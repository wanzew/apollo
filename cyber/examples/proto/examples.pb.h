// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/examples/proto/examples.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fexamples_2fproto_2fexamples_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fexamples_2fproto_2fexamples_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fexamples_2fproto_2fexamples_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fexamples_2fproto_2fexamples_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fexamples_2fproto_2fexamples_2eproto;
namespace apollo {
namespace cyber {
namespace examples {
namespace proto {
class Chatter;
struct ChatterDefaultTypeInternal;
extern ChatterDefaultTypeInternal _Chatter_default_instance_;
class Driver;
struct DriverDefaultTypeInternal;
extern DriverDefaultTypeInternal _Driver_default_instance_;
class SamplesTest1;
struct SamplesTest1DefaultTypeInternal;
extern SamplesTest1DefaultTypeInternal _SamplesTest1_default_instance_;
}  // namespace proto
}  // namespace examples
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::examples::proto::Chatter* Arena::CreateMaybeMessage<::apollo::cyber::examples::proto::Chatter>(Arena*);
template<> ::apollo::cyber::examples::proto::Driver* Arena::CreateMaybeMessage<::apollo::cyber::examples::proto::Driver>(Arena*);
template<> ::apollo::cyber::examples::proto::SamplesTest1* Arena::CreateMaybeMessage<::apollo::cyber::examples::proto::SamplesTest1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace examples {
namespace proto {

// ===================================================================

class SamplesTest1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.examples.proto.SamplesTest1) */ {
 public:
  inline SamplesTest1() : SamplesTest1(nullptr) {}
  ~SamplesTest1() override;
  explicit PROTOBUF_CONSTEXPR SamplesTest1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SamplesTest1(const SamplesTest1& from);
  SamplesTest1(SamplesTest1&& from) noexcept
    : SamplesTest1() {
    *this = ::std::move(from);
  }

  inline SamplesTest1& operator=(const SamplesTest1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplesTest1& operator=(SamplesTest1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SamplesTest1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SamplesTest1* internal_default_instance() {
    return reinterpret_cast<const SamplesTest1*>(
               &_SamplesTest1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SamplesTest1& a, SamplesTest1& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplesTest1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplesTest1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SamplesTest1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SamplesTest1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SamplesTest1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SamplesTest1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplesTest1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.examples.proto.SamplesTest1";
  }
  protected:
  explicit SamplesTest1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 1,
    kCaseNameFieldNumber = 2,
  };
  // optional string class_name = 1;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional string case_name = 2;
  bool has_case_name() const;
  private:
  bool _internal_has_case_name() const;
  public:
  void clear_case_name();
  const std::string& case_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_case_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_case_name();
  PROTOBUF_NODISCARD std::string* release_case_name();
  void set_allocated_case_name(std::string* case_name);
  private:
  const std::string& _internal_case_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_case_name(const std::string& value);
  std::string* _internal_mutable_case_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.examples.proto.SamplesTest1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr case_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fexamples_2fproto_2fexamples_2eproto;
};
// -------------------------------------------------------------------

class Chatter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.examples.proto.Chatter) */ {
 public:
  inline Chatter() : Chatter(nullptr) {}
  ~Chatter() override;
  explicit PROTOBUF_CONSTEXPR Chatter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chatter(const Chatter& from);
  Chatter(Chatter&& from) noexcept
    : Chatter() {
    *this = ::std::move(from);
  }

  inline Chatter& operator=(const Chatter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chatter& operator=(Chatter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chatter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chatter* internal_default_instance() {
    return reinterpret_cast<const Chatter*>(
               &_Chatter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chatter& a, Chatter& b) {
    a.Swap(&b);
  }
  inline void Swap(Chatter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chatter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chatter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chatter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chatter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chatter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chatter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.examples.proto.Chatter";
  }
  protected:
  explicit Chatter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kLidarTimestampFieldNumber = 2,
    kSeqFieldNumber = 3,
  };
  // optional bytes content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint64 lidar_timestamp = 2;
  bool has_lidar_timestamp() const;
  private:
  bool _internal_has_lidar_timestamp() const;
  public:
  void clear_lidar_timestamp();
  uint64_t lidar_timestamp() const;
  void set_lidar_timestamp(uint64_t value);
  private:
  uint64_t _internal_lidar_timestamp() const;
  void _internal_set_lidar_timestamp(uint64_t value);
  public:

  // optional uint64 seq = 3;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.examples.proto.Chatter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t timestamp_;
    uint64_t lidar_timestamp_;
    uint64_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fexamples_2fproto_2fexamples_2eproto;
};
// -------------------------------------------------------------------

class Driver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.examples.proto.Driver) */ {
 public:
  inline Driver() : Driver(nullptr) {}
  ~Driver() override;
  explicit PROTOBUF_CONSTEXPR Driver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Driver(const Driver& from);
  Driver(Driver&& from) noexcept
    : Driver() {
    *this = ::std::move(from);
  }

  inline Driver& operator=(const Driver& from) {
    CopyFrom(from);
    return *this;
  }
  inline Driver& operator=(Driver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Driver& default_instance() {
    return *internal_default_instance();
  }
  static inline const Driver* internal_default_instance() {
    return reinterpret_cast<const Driver*>(
               &_Driver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Driver& a, Driver& b) {
    a.Swap(&b);
  }
  inline void Swap(Driver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Driver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Driver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Driver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Driver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Driver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Driver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.examples.proto.Driver";
  }
  protected:
  explicit Driver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // optional string content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint64 msg_id = 2;
  bool has_msg_id() const;
  private:
  bool _internal_has_msg_id() const;
  public:
  void clear_msg_id();
  uint64_t msg_id() const;
  void set_msg_id(uint64_t value);
  private:
  uint64_t _internal_msg_id() const;
  void _internal_set_msg_id(uint64_t value);
  public:

  // optional uint64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.examples.proto.Driver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t msg_id_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fexamples_2fproto_2fexamples_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SamplesTest1

// optional string class_name = 1;
inline bool SamplesTest1::_internal_has_class_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SamplesTest1::has_class_name() const {
  return _internal_has_class_name();
}
inline void SamplesTest1::clear_class_name() {
  _impl_.class_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SamplesTest1::class_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.SamplesTest1.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SamplesTest1::set_class_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.SamplesTest1.class_name)
}
inline std::string* SamplesTest1::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.examples.proto.SamplesTest1.class_name)
  return _s;
}
inline const std::string& SamplesTest1::_internal_class_name() const {
  return _impl_.class_name_.Get();
}
inline void SamplesTest1::_internal_set_class_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SamplesTest1::_internal_mutable_class_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SamplesTest1::release_class_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.examples.proto.SamplesTest1.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.class_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class_name_.IsDefault()) {
    _impl_.class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SamplesTest1::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class_name_.IsDefault()) {
    _impl_.class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.examples.proto.SamplesTest1.class_name)
}

// optional string case_name = 2;
inline bool SamplesTest1::_internal_has_case_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SamplesTest1::has_case_name() const {
  return _internal_has_case_name();
}
inline void SamplesTest1::clear_case_name() {
  _impl_.case_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SamplesTest1::case_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.SamplesTest1.case_name)
  return _internal_case_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SamplesTest1::set_case_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.case_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.SamplesTest1.case_name)
}
inline std::string* SamplesTest1::mutable_case_name() {
  std::string* _s = _internal_mutable_case_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.examples.proto.SamplesTest1.case_name)
  return _s;
}
inline const std::string& SamplesTest1::_internal_case_name() const {
  return _impl_.case_name_.Get();
}
inline void SamplesTest1::_internal_set_case_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.case_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SamplesTest1::_internal_mutable_case_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.case_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SamplesTest1::release_case_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.examples.proto.SamplesTest1.case_name)
  if (!_internal_has_case_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.case_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.case_name_.IsDefault()) {
    _impl_.case_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SamplesTest1::set_allocated_case_name(std::string* case_name) {
  if (case_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.case_name_.SetAllocated(case_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.case_name_.IsDefault()) {
    _impl_.case_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.examples.proto.SamplesTest1.case_name)
}

// -------------------------------------------------------------------

// Chatter

// optional uint64 timestamp = 1;
inline bool Chatter::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chatter::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Chatter::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Chatter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Chatter::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Chatter.timestamp)
  return _internal_timestamp();
}
inline void Chatter::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void Chatter::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Chatter.timestamp)
}

// optional uint64 lidar_timestamp = 2;
inline bool Chatter::_internal_has_lidar_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chatter::has_lidar_timestamp() const {
  return _internal_has_lidar_timestamp();
}
inline void Chatter::clear_lidar_timestamp() {
  _impl_.lidar_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Chatter::_internal_lidar_timestamp() const {
  return _impl_.lidar_timestamp_;
}
inline uint64_t Chatter::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Chatter.lidar_timestamp)
  return _internal_lidar_timestamp();
}
inline void Chatter::_internal_set_lidar_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lidar_timestamp_ = value;
}
inline void Chatter::set_lidar_timestamp(uint64_t value) {
  _internal_set_lidar_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Chatter.lidar_timestamp)
}

// optional uint64 seq = 3;
inline bool Chatter::_internal_has_seq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chatter::has_seq() const {
  return _internal_has_seq();
}
inline void Chatter::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t Chatter::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t Chatter::seq() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Chatter.seq)
  return _internal_seq();
}
inline void Chatter::_internal_set_seq(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seq_ = value;
}
inline void Chatter::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Chatter.seq)
}

// optional bytes content = 4;
inline bool Chatter::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chatter::has_content() const {
  return _internal_has_content();
}
inline void Chatter::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chatter::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Chatter.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chatter::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Chatter.content)
}
inline std::string* Chatter::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.examples.proto.Chatter.content)
  return _s;
}
inline const std::string& Chatter::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Chatter::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Chatter::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Chatter::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.examples.proto.Chatter.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Chatter::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.examples.proto.Chatter.content)
}

// -------------------------------------------------------------------

// Driver

// optional string content = 1;
inline bool Driver::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Driver::has_content() const {
  return _internal_has_content();
}
inline void Driver::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Driver::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Driver.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Driver::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Driver.content)
}
inline std::string* Driver::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.examples.proto.Driver.content)
  return _s;
}
inline const std::string& Driver::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Driver::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Driver::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Driver::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.examples.proto.Driver.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Driver::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.examples.proto.Driver.content)
}

// optional uint64 msg_id = 2;
inline bool Driver::_internal_has_msg_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Driver::has_msg_id() const {
  return _internal_has_msg_id();
}
inline void Driver::clear_msg_id() {
  _impl_.msg_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Driver::_internal_msg_id() const {
  return _impl_.msg_id_;
}
inline uint64_t Driver::msg_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Driver.msg_id)
  return _internal_msg_id();
}
inline void Driver::_internal_set_msg_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_id_ = value;
}
inline void Driver::set_msg_id(uint64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Driver.msg_id)
}

// optional uint64 timestamp = 3;
inline bool Driver::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Driver::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Driver::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Driver::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Driver::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.examples.proto.Driver.timestamp)
  return _internal_timestamp();
}
inline void Driver::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void Driver::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.examples.proto.Driver.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace examples
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fexamples_2fproto_2fexamples_2eproto
