// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/classic_conf.proto

#include "cyber/proto/classic_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR ClassicTask::ClassicTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prio_)*/1u} {}
struct ClassicTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicTaskDefaultTypeInternal() {}
  union {
    ClassicTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicTaskDefaultTypeInternal _ClassicTask_default_instance_;
PROTOBUF_CONSTEXPR SchedGroup::SchedGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.affinity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpuset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processor_policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processor_num_)*/0u
  , /*decltype(_impl_.processor_prio_)*/0} {}
struct SchedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedGroupDefaultTypeInternal() {}
  union {
    SchedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedGroupDefaultTypeInternal _SchedGroup_default_instance_;
PROTOBUF_CONSTEXPR ClassicConf::ClassicConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassicConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicConfDefaultTypeInternal() {}
  union {
    ClassicConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicConfDefaultTypeInternal _ClassicConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2fclassic_5fconf_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2fclassic_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2fclassic_5fconf_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicTask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicTask, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicTask, _impl_.prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicTask, _impl_.group_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.processor_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.affinity_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.processor_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.processor_prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedGroup, _impl_.tasks_),
  0,
  4,
  1,
  2,
  3,
  5,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ClassicConf, _impl_.groups_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::cyber::proto::ClassicTask)},
  { 12, 25, -1, sizeof(::apollo::cyber::proto::SchedGroup)},
  { 32, -1, -1, sizeof(::apollo::cyber::proto::ClassicConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_ClassicTask_default_instance_._instance,
  &::apollo::cyber::proto::_SchedGroup_default_instance_._instance,
  &::apollo::cyber::proto::_ClassicConf_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2fclassic_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036cyber/proto/classic_conf.proto\022\022apollo"
  ".cyber.proto\"@\n\013ClassicTask\022\014\n\004name\030\001 \001("
  "\t\022\017\n\004prio\030\002 \001(\r:\0011\022\022\n\ngroup_name\030\003 \001(\t\"\305"
  "\001\n\nSchedGroup\022\031\n\004name\030\001 \002(\t:\013default_grp"
  "\022\025\n\rprocessor_num\030\002 \001(\r\022\020\n\010affinity\030\003 \001("
  "\t\022\016\n\006cpuset\030\004 \001(\t\022\030\n\020processor_policy\030\005 "
  "\001(\t\022\031\n\016processor_prio\030\006 \001(\005:\0010\022.\n\005tasks\030"
  "\007 \003(\0132\037.apollo.cyber.proto.ClassicTask\"="
  "\n\013ClassicConf\022.\n\006groups\030\001 \003(\0132\036.apollo.c"
  "yber.proto.SchedGroup"
  ;
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto = {
    false, false, 381, descriptor_table_protodef_cyber_2fproto_2fclassic_5fconf_2eproto,
    "cyber/proto/classic_conf.proto",
    &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2fclassic_5fconf_2eproto, file_level_enum_descriptors_cyber_2fproto_2fclassic_5fconf_2eproto,
    file_level_service_descriptors_cyber_2fproto_2fclassic_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2fclassic_5fconf_2eproto(&descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ClassicTask::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicTask>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClassicTask::ClassicTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ClassicTask)
}
ClassicTask::ClassicTask(const ClassicTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.prio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_name()) {
    _impl_.group_name_.Set(from._internal_group_name(), 
      GetArenaForAllocation());
  }
  _impl_.prio_ = from._impl_.prio_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ClassicTask)
}

inline void ClassicTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.prio_){1u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassicTask::~ClassicTask() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ClassicTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.group_name_.Destroy();
}

void ClassicTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ClassicTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.group_name_.ClearNonDefaultToEmpty();
    }
    _impl_.prio_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ClassicTask.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prio(&has_bits);
          _impl_.prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ClassicTask.group_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ClassicTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ClassicTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 prio = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prio(), target);
  }

  // optional string group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ClassicTask.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ClassicTask)
  return target;
}

size_t ClassicTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ClassicTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string group_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

    // optional uint32 prio = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassicTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicTask::GetClassData() const { return &_class_data_; }

void ClassicTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClassicTask *>(to)->MergeFrom(
      static_cast<const ClassicTask &>(from));
}


void ClassicTask::MergeFrom(const ClassicTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ClassicTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.prio_ = from._impl_.prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicTask::CopyFrom(const ClassicTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ClassicTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicTask::IsInitialized() const {
  return true;
}

void ClassicTask::InternalSwap(ClassicTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  swap(_impl_.prio_, other->_impl_.prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fclassic_5fconf_2eproto[0]);
}

// ===================================================================

class SchedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<SchedGroup>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SchedGroup::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"default_grp", 11}}, {nullptr}};
SchedGroup::SchedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.SchedGroup)
}
SchedGroup::SchedGroup(const SchedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.affinity_){}
    , decltype(_impl_.cpuset_){}
    , decltype(_impl_.processor_policy_){}
    , decltype(_impl_.processor_num_){}
    , decltype(_impl_.processor_prio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_affinity()) {
    _impl_.affinity_.Set(from._internal_affinity(), 
      GetArenaForAllocation());
  }
  _impl_.cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpuset()) {
    _impl_.cpuset_.Set(from._internal_cpuset(), 
      GetArenaForAllocation());
  }
  _impl_.processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_processor_policy()) {
    _impl_.processor_policy_.Set(from._internal_processor_policy(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.processor_num_, &from._impl_.processor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processor_prio_) -
    reinterpret_cast<char*>(&_impl_.processor_num_)) + sizeof(_impl_.processor_prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SchedGroup)
}

inline void SchedGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasks_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.affinity_){}
    , decltype(_impl_.cpuset_){}
    , decltype(_impl_.processor_policy_){}
    , decltype(_impl_.processor_num_){0u}
    , decltype(_impl_.processor_prio_){0}
  };
  _impl_.name_.InitDefault();
  _impl_.affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SchedGroup::~SchedGroup() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SchedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.affinity_.Destroy();
  _impl_.cpuset_.Destroy();
  _impl_.processor_policy_.Destroy();
}

void SchedGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SchedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::cyber::proto::SchedGroup::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.processor_policy_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.processor_prio_) -
        reinterpret_cast<char*>(&_impl_.processor_num_)) + sizeof(_impl_.processor_prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1 [default = "default_grp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedGroup.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 processor_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_processor_num(&has_bits);
          _impl_.processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string affinity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_affinity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedGroup.affinity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cpuset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cpuset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedGroup.cpuset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string processor_policy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_processor_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedGroup.processor_policy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 processor_prio = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_processor_prio(&has_bits);
          _impl_.processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.ClassicTask tasks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SchedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1 [default = "default_grp"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 processor_num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_processor_num(), target);
  }

  // optional string affinity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_affinity().data(), static_cast<int>(this->_internal_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedGroup.affinity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_affinity(), target);
  }

  // optional string cpuset = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpuset().data(), static_cast<int>(this->_internal_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedGroup.cpuset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpuset(), target);
  }

  // optional string processor_policy = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_processor_policy().data(), static_cast<int>(this->_internal_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedGroup.processor_policy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_processor_policy(), target);
  }

  // optional int32 processor_prio = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_processor_prio(), target);
  }

  // repeated .apollo.cyber.proto.ClassicTask tasks = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SchedGroup)
  return target;
}

size_t SchedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SchedGroup)
  size_t total_size = 0;

  // required string name = 1 [default = "default_grp"];
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.ClassicTask tasks = 7;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string affinity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_affinity());
    }

    // optional string cpuset = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpuset());
    }

    // optional string processor_policy = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_processor_policy());
    }

    // optional uint32 processor_num = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processor_num());
    }

    // optional int32 processor_prio = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processor_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchedGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchedGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchedGroup::GetClassData() const { return &_class_data_; }

void SchedGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SchedGroup *>(to)->MergeFrom(
      static_cast<const SchedGroup &>(from));
}


void SchedGroup::MergeFrom(const SchedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SchedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.tasks_.MergeFrom(from._impl_.tasks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_affinity(from._internal_affinity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cpuset(from._internal_cpuset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_processor_policy(from._internal_processor_policy());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.processor_num_ = from._impl_.processor_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.processor_prio_ = from._impl_.processor_prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchedGroup::CopyFrom(const SchedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SchedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedGroup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SchedGroup::InternalSwap(SchedGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.affinity_, lhs_arena,
      &other->_impl_.affinity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpuset_, lhs_arena,
      &other->_impl_.cpuset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processor_policy_, lhs_arena,
      &other->_impl_.processor_policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchedGroup, _impl_.processor_prio_)
      + sizeof(SchedGroup::_impl_.processor_prio_)
      - PROTOBUF_FIELD_OFFSET(SchedGroup, _impl_.processor_num_)>(
          reinterpret_cast<char*>(&_impl_.processor_num_),
          reinterpret_cast<char*>(&other->_impl_.processor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fclassic_5fconf_2eproto[1]);
}

// ===================================================================

class ClassicConf::_Internal {
 public:
};

ClassicConf::ClassicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ClassicConf)
}
ClassicConf::ClassicConf(const ClassicConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ClassicConf)
}

inline void ClassicConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClassicConf::~ClassicConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ClassicConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
}

void ClassicConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ClassicConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.cyber.proto.SchedGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ClassicConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SchedGroup groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ClassicConf)
  return target;
}

size_t ClassicConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ClassicConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SchedGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassicConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicConf::GetClassData() const { return &_class_data_; }

void ClassicConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClassicConf *>(to)->MergeFrom(
      static_cast<const ClassicConf &>(from));
}


void ClassicConf::MergeFrom(const ClassicConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ClassicConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.groups_.MergeFrom(from._impl_.groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicConf::CopyFrom(const ClassicConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ClassicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicConf::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.groups_))
    return false;
  return true;
}

void ClassicConf::InternalSwap(ClassicConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fclassic_5fconf_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ClassicTask*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ClassicTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ClassicTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SchedGroup*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::SchedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::SchedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ClassicConf*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ClassicConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ClassicConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
