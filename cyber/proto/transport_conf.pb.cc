// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/transport_conf.proto

#include "cyber/proto/transport_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR ShmMulticastLocator::ShmMulticastLocator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u} {}
struct ShmMulticastLocatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShmMulticastLocatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShmMulticastLocatorDefaultTypeInternal() {}
  union {
    ShmMulticastLocator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShmMulticastLocatorDefaultTypeInternal _ShmMulticastLocator_default_instance_;
PROTOBUF_CONSTEXPR ShmConf::ShmConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notifier_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shm_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shm_locator_)*/nullptr} {}
struct ShmConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShmConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShmConfDefaultTypeInternal() {}
  union {
    ShmConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShmConfDefaultTypeInternal _ShmConf_default_instance_;
PROTOBUF_CONSTEXPR RtpsParticipantAttr::RtpsParticipantAttr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lease_duration_)*/12
  , /*decltype(_impl_.announcement_period_)*/3
  , /*decltype(_impl_.domain_id_gain_)*/200u
  , /*decltype(_impl_.port_base_)*/10000u} {}
struct RtpsParticipantAttrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtpsParticipantAttrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtpsParticipantAttrDefaultTypeInternal() {}
  union {
    RtpsParticipantAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtpsParticipantAttrDefaultTypeInternal _RtpsParticipantAttr_default_instance_;
PROTOBUF_CONSTEXPR CommunicationMode::CommunicationMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diff_host_)*/3
  , /*decltype(_impl_.same_proc_)*/1
  , /*decltype(_impl_.diff_proc_)*/2} {}
struct CommunicationModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommunicationModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommunicationModeDefaultTypeInternal() {}
  union {
    CommunicationMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommunicationModeDefaultTypeInternal _CommunicationMode_default_instance_;
PROTOBUF_CONSTEXPR ResourceLimit::ResourceLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_history_depth_)*/1000u} {}
struct ResourceLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceLimitDefaultTypeInternal() {}
  union {
    ResourceLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceLimitDefaultTypeInternal _ResourceLimit_default_instance_;
PROTOBUF_CONSTEXPR TransportConf::TransportConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shm_conf_)*/nullptr
  , /*decltype(_impl_.participant_attr_)*/nullptr
  , /*decltype(_impl_.communication_mode_)*/nullptr
  , /*decltype(_impl_.resource_limit_)*/nullptr} {}
struct TransportConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportConfDefaultTypeInternal() {}
  union {
    TransportConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportConfDefaultTypeInternal _TransportConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _impl_.port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _impl_.notifier_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _impl_.shm_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _impl_.shm_locator_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _impl_.lease_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _impl_.announcement_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _impl_.domain_id_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _impl_.port_base_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _impl_.same_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _impl_.diff_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _impl_.diff_host_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _impl_.max_history_depth_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _impl_.shm_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _impl_.participant_attr_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _impl_.communication_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _impl_.resource_limit_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::cyber::proto::ShmMulticastLocator)},
  { 10, 19, -1, sizeof(::apollo::cyber::proto::ShmConf)},
  { 22, 32, -1, sizeof(::apollo::cyber::proto::RtpsParticipantAttr)},
  { 36, 45, -1, sizeof(::apollo::cyber::proto::CommunicationMode)},
  { 48, 55, -1, sizeof(::apollo::cyber::proto::ResourceLimit)},
  { 56, 66, -1, sizeof(::apollo::cyber::proto::TransportConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_ShmMulticastLocator_default_instance_._instance,
  &::apollo::cyber::proto::_ShmConf_default_instance_._instance,
  &::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_._instance,
  &::apollo::cyber::proto::_CommunicationMode_default_instance_._instance,
  &::apollo::cyber::proto::_ResourceLimit_default_instance_._instance,
  &::apollo::cyber::proto::_TransportConf_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2ftransport_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n cyber/proto/transport_conf.proto\022\022apol"
  "lo.cyber.proto\"/\n\023ShmMulticastLocator\022\n\n"
  "\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"p\n\007ShmConf\022\025\n\rno"
  "tifier_type\030\001 \001(\t\022\020\n\010shm_type\030\002 \001(\t\022<\n\013s"
  "hm_locator\030\003 \001(\0132\'.apollo.cyber.proto.Sh"
  "mMulticastLocator\"\210\001\n\023RtpsParticipantAtt"
  "r\022\032\n\016lease_duration\030\001 \001(\005:\00212\022\036\n\023announc"
  "ement_period\030\002 \001(\005:\0013\022\033\n\016domain_id_gain\030"
  "\003 \001(\r:\003200\022\030\n\tport_base\030\004 \001(\r:\00510000\"\304\001\n"
  "\021CommunicationMode\022:\n\tsame_proc\030\001 \001(\0162 ."
  "apollo.cyber.proto.OptionalMode:\005INTRA\0228"
  "\n\tdiff_proc\030\002 \001(\0162 .apollo.cyber.proto.O"
  "ptionalMode:\003SHM\0229\n\tdiff_host\030\003 \001(\0162 .ap"
  "ollo.cyber.proto.OptionalMode:\004RTPS\"0\n\rR"
  "esourceLimit\022\037\n\021max_history_depth\030\001 \001(\r:"
  "\0041000\"\377\001\n\rTransportConf\022-\n\010shm_conf\030\001 \001("
  "\0132\033.apollo.cyber.proto.ShmConf\022A\n\020partic"
  "ipant_attr\030\002 \001(\0132\'.apollo.cyber.proto.Rt"
  "psParticipantAttr\022A\n\022communication_mode\030"
  "\003 \001(\0132%.apollo.cyber.proto.Communication"
  "Mode\0229\n\016resource_limit\030\004 \001(\0132!.apollo.cy"
  "ber.proto.ResourceLimit*8\n\014OptionalMode\022"
  "\n\n\006HYBRID\020\000\022\t\n\005INTRA\020\001\022\007\n\003SHM\020\002\022\010\n\004RTPS\020"
  "\003"
  ;
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto = {
    false, false, 921, descriptor_table_protodef_cyber_2fproto_2ftransport_5fconf_2eproto,
    "cyber/proto/transport_conf.proto",
    &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto, file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto,
    file_level_service_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2ftransport_5fconf_2eproto(&descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
  return file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto[0];
}
bool OptionalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ShmMulticastLocator::_Internal {
 public:
  using HasBits = decltype(std::declval<ShmMulticastLocator>()._impl_._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShmMulticastLocator::ShmMulticastLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ShmMulticastLocator)
}
ShmMulticastLocator::ShmMulticastLocator(const ShmMulticastLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _impl_.ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  _impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmMulticastLocator)
}

inline void ShmMulticastLocator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShmMulticastLocator::~ShmMulticastLocator() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmMulticastLocator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShmMulticastLocator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void ShmMulticastLocator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShmMulticastLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmMulticastLocator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ip_.ClearNonDefaultToEmpty();
  }
  _impl_.port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShmMulticastLocator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ShmMulticastLocator.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShmMulticastLocator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmMulticastLocator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmMulticastLocator)
  return target;
}

size_t ShmMulticastLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmMulticastLocator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShmMulticastLocator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShmMulticastLocator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShmMulticastLocator::GetClassData() const { return &_class_data_; }

void ShmMulticastLocator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShmMulticastLocator *>(to)->MergeFrom(
      static_cast<const ShmMulticastLocator &>(from));
}


void ShmMulticastLocator::MergeFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.port_ = from._impl_.port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShmMulticastLocator::CopyFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmMulticastLocator::IsInitialized() const {
  return true;
}

void ShmMulticastLocator::InternalSwap(ShmMulticastLocator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmMulticastLocator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[0]);
}

// ===================================================================

class ShmConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ShmConf>()._impl_._has_bits_);
  static void set_has_notifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ShmMulticastLocator& shm_locator(const ShmConf* msg);
  static void set_has_shm_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::cyber::proto::ShmMulticastLocator&
ShmConf::_Internal::shm_locator(const ShmConf* msg) {
  return *msg->_impl_.shm_locator_;
}
ShmConf::ShmConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ShmConf)
}
ShmConf::ShmConf(const ShmConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifier_type_){}
    , decltype(_impl_.shm_type_){}
    , decltype(_impl_.shm_locator_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notifier_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notifier_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notifier_type()) {
    _impl_.notifier_type_.Set(from._internal_notifier_type(), 
      GetArenaForAllocation());
  }
  _impl_.shm_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shm_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shm_type()) {
    _impl_.shm_type_.Set(from._internal_shm_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_shm_locator()) {
    _impl_.shm_locator_ = new ::apollo::cyber::proto::ShmMulticastLocator(*from._impl_.shm_locator_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmConf)
}

inline void ShmConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifier_type_){}
    , decltype(_impl_.shm_type_){}
    , decltype(_impl_.shm_locator_){nullptr}
  };
  _impl_.notifier_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notifier_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shm_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shm_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShmConf::~ShmConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShmConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notifier_type_.Destroy();
  _impl_.shm_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shm_locator_;
}

void ShmConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShmConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.notifier_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shm_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.shm_locator_ != nullptr);
      _impl_.shm_locator_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShmConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string notifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notifier_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ShmConf.notifier_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string shm_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shm_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ShmConf.shm_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shm_locator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShmConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notifier_type().data(), static_cast<int>(this->_internal_notifier_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notifier_type(), target);
  }

  // optional string shm_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shm_type().data(), static_cast<int>(this->_internal_shm_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.shm_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shm_type(), target);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::shm_locator(this),
        _Internal::shm_locator(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmConf)
  return target;
}

size_t ShmConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string notifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notifier_type());
    }

    // optional string shm_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shm_type());
    }

    // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shm_locator_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShmConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShmConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShmConf::GetClassData() const { return &_class_data_; }

void ShmConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShmConf *>(to)->MergeFrom(
      static_cast<const ShmConf &>(from));
}


void ShmConf::MergeFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notifier_type(from._internal_notifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_shm_type(from._internal_shm_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shm_locator()->::apollo::cyber::proto::ShmMulticastLocator::MergeFrom(from._internal_shm_locator());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShmConf::CopyFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmConf::IsInitialized() const {
  return true;
}

void ShmConf::InternalSwap(ShmConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notifier_type_, lhs_arena,
      &other->_impl_.notifier_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shm_type_, lhs_arena,
      &other->_impl_.shm_type_, rhs_arena
  );
  swap(_impl_.shm_locator_, other->_impl_.shm_locator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[1]);
}

// ===================================================================

class RtpsParticipantAttr::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpsParticipantAttr>()._impl_._has_bits_);
  static void set_has_lease_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain_id_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RtpsParticipantAttr::RtpsParticipantAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}
RtpsParticipantAttr::RtpsParticipantAttr(const RtpsParticipantAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lease_duration_){}
    , decltype(_impl_.announcement_period_){}
    , decltype(_impl_.domain_id_gain_){}
    , decltype(_impl_.port_base_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lease_duration_, &from._impl_.lease_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_base_) -
    reinterpret_cast<char*>(&_impl_.lease_duration_)) + sizeof(_impl_.port_base_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}

inline void RtpsParticipantAttr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lease_duration_){12}
    , decltype(_impl_.announcement_period_){3}
    , decltype(_impl_.domain_id_gain_){200u}
    , decltype(_impl_.port_base_){10000u}
  };
}

RtpsParticipantAttr::~RtpsParticipantAttr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RtpsParticipantAttr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtpsParticipantAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RtpsParticipantAttr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtpsParticipantAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RtpsParticipantAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.lease_duration_ = 12;
    _impl_.announcement_period_ = 3;
    _impl_.domain_id_gain_ = 200u;
    _impl_.port_base_ = 10000u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtpsParticipantAttr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lease_duration = 1 [default = 12];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lease_duration(&has_bits);
          _impl_.lease_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 announcement_period = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_announcement_period(&has_bits);
          _impl_.announcement_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 domain_id_gain = 3 [default = 200];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_domain_id_gain(&has_bits);
          _impl_.domain_id_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port_base = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_port_base(&has_bits);
          _impl_.port_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtpsParticipantAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RtpsParticipantAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lease_duration(), target);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_announcement_period(), target);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_domain_id_gain(), target);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RtpsParticipantAttr)
  return target;
}

size_t RtpsParticipantAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RtpsParticipantAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 lease_duration = 1 [default = 12];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lease_duration());
    }

    // optional int32 announcement_period = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_announcement_period());
    }

    // optional uint32 domain_id_gain = 3 [default = 200];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_domain_id_gain());
    }

    // optional uint32 port_base = 4 [default = 10000];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port_base());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtpsParticipantAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RtpsParticipantAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtpsParticipantAttr::GetClassData() const { return &_class_data_; }

void RtpsParticipantAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RtpsParticipantAttr *>(to)->MergeFrom(
      static_cast<const RtpsParticipantAttr &>(from));
}


void RtpsParticipantAttr::MergeFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lease_duration_ = from._impl_.lease_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.announcement_period_ = from._impl_.announcement_period_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.domain_id_gain_ = from._impl_.domain_id_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.port_base_ = from._impl_.port_base_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtpsParticipantAttr::CopyFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpsParticipantAttr::IsInitialized() const {
  return true;
}

void RtpsParticipantAttr::InternalSwap(RtpsParticipantAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.lease_duration_, other->_impl_.lease_duration_);
  swap(_impl_.announcement_period_, other->_impl_.announcement_period_);
  swap(_impl_.domain_id_gain_, other->_impl_.domain_id_gain_);
  swap(_impl_.port_base_, other->_impl_.port_base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpsParticipantAttr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[2]);
}

// ===================================================================

class CommunicationMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CommunicationMode>()._impl_._has_bits_);
  static void set_has_same_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diff_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_diff_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommunicationMode::CommunicationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.CommunicationMode)
}
CommunicationMode::CommunicationMode(const CommunicationMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diff_host_){}
    , decltype(_impl_.same_proc_){}
    , decltype(_impl_.diff_proc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.diff_host_, &from._impl_.diff_host_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.diff_proc_) -
    reinterpret_cast<char*>(&_impl_.diff_host_)) + sizeof(_impl_.diff_proc_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.CommunicationMode)
}

inline void CommunicationMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diff_host_){3}
    , decltype(_impl_.same_proc_){1}
    , decltype(_impl_.diff_proc_){2}
  };
}

CommunicationMode::~CommunicationMode() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.CommunicationMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommunicationMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommunicationMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommunicationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.CommunicationMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.diff_host_ = 3;
    _impl_.same_proc_ = 1;
    _impl_.diff_proc_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_same_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_diff_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_diff_host(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommunicationMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.CommunicationMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_same_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diff_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_diff_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.CommunicationMode)
  return target;
}

size_t CommunicationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.CommunicationMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_diff_host());
    }

    // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_same_proc());
    }

    // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_diff_proc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommunicationMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommunicationMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommunicationMode::GetClassData() const { return &_class_data_; }

void CommunicationMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommunicationMode *>(to)->MergeFrom(
      static_cast<const CommunicationMode &>(from));
}


void CommunicationMode::MergeFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.diff_host_ = from._impl_.diff_host_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.same_proc_ = from._impl_.same_proc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.diff_proc_ = from._impl_.diff_proc_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommunicationMode::CopyFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationMode::IsInitialized() const {
  return true;
}

void CommunicationMode::InternalSwap(CommunicationMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.diff_host_, other->_impl_.diff_host_);
  swap(_impl_.same_proc_, other->_impl_.same_proc_);
  swap(_impl_.diff_proc_, other->_impl_.diff_proc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[3]);
}

// ===================================================================

class ResourceLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceLimit>()._impl_._has_bits_);
  static void set_has_max_history_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceLimit::ResourceLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ResourceLimit)
}
ResourceLimit::ResourceLimit(const ResourceLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_history_depth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.max_history_depth_ = from._impl_.max_history_depth_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ResourceLimit)
}

inline void ResourceLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_history_depth_){1000u}
  };
}

ResourceLimit::~ResourceLimit() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ResourceLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ResourceLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_history_depth_ = 1000u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_history_depth = 1 [default = 1000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_history_depth(&has_bits);
          _impl_.max_history_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ResourceLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_history_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ResourceLimit)
  return target;
}

size_t ResourceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ResourceLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_history_depth = 1 [default = 1000];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_history_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceLimit::GetClassData() const { return &_class_data_; }

void ResourceLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourceLimit *>(to)->MergeFrom(
      static_cast<const ResourceLimit &>(from));
}


void ResourceLimit::MergeFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_history_depth()) {
    _internal_set_max_history_depth(from._internal_max_history_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLimit::CopyFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimit::IsInitialized() const {
  return true;
}

void ResourceLimit::InternalSwap(ResourceLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_history_depth_, other->_impl_.max_history_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[4]);
}

// ===================================================================

class TransportConf::_Internal {
 public:
  using HasBits = decltype(std::declval<TransportConf>()._impl_._has_bits_);
  static const ::apollo::cyber::proto::ShmConf& shm_conf(const TransportConf* msg);
  static void set_has_shm_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::cyber::proto::RtpsParticipantAttr& participant_attr(const TransportConf* msg);
  static void set_has_participant_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::CommunicationMode& communication_mode(const TransportConf* msg);
  static void set_has_communication_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::ResourceLimit& resource_limit(const TransportConf* msg);
  static void set_has_resource_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ShmConf&
TransportConf::_Internal::shm_conf(const TransportConf* msg) {
  return *msg->_impl_.shm_conf_;
}
const ::apollo::cyber::proto::RtpsParticipantAttr&
TransportConf::_Internal::participant_attr(const TransportConf* msg) {
  return *msg->_impl_.participant_attr_;
}
const ::apollo::cyber::proto::CommunicationMode&
TransportConf::_Internal::communication_mode(const TransportConf* msg) {
  return *msg->_impl_.communication_mode_;
}
const ::apollo::cyber::proto::ResourceLimit&
TransportConf::_Internal::resource_limit(const TransportConf* msg) {
  return *msg->_impl_.resource_limit_;
}
TransportConf::TransportConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.TransportConf)
}
TransportConf::TransportConf(const TransportConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shm_conf_){nullptr}
    , decltype(_impl_.participant_attr_){nullptr}
    , decltype(_impl_.communication_mode_){nullptr}
    , decltype(_impl_.resource_limit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shm_conf()) {
    _impl_.shm_conf_ = new ::apollo::cyber::proto::ShmConf(*from._impl_.shm_conf_);
  }
  if (from._internal_has_participant_attr()) {
    _impl_.participant_attr_ = new ::apollo::cyber::proto::RtpsParticipantAttr(*from._impl_.participant_attr_);
  }
  if (from._internal_has_communication_mode()) {
    _impl_.communication_mode_ = new ::apollo::cyber::proto::CommunicationMode(*from._impl_.communication_mode_);
  }
  if (from._internal_has_resource_limit()) {
    _impl_.resource_limit_ = new ::apollo::cyber::proto::ResourceLimit(*from._impl_.resource_limit_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TransportConf)
}

inline void TransportConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shm_conf_){nullptr}
    , decltype(_impl_.participant_attr_){nullptr}
    , decltype(_impl_.communication_mode_){nullptr}
    , decltype(_impl_.resource_limit_){nullptr}
  };
}

TransportConf::~TransportConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TransportConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shm_conf_;
  if (this != internal_default_instance()) delete _impl_.participant_attr_;
  if (this != internal_default_instance()) delete _impl_.communication_mode_;
  if (this != internal_default_instance()) delete _impl_.resource_limit_;
}

void TransportConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TransportConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.shm_conf_ != nullptr);
      _impl_.shm_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.participant_attr_ != nullptr);
      _impl_.participant_attr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.communication_mode_ != nullptr);
      _impl_.communication_mode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.resource_limit_ != nullptr);
      _impl_.resource_limit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shm_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_attr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_communication_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TransportConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shm_conf(this),
        _Internal::shm_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::participant_attr(this),
        _Internal::participant_attr(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::communication_mode(this),
        _Internal::communication_mode(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::resource_limit(this),
        _Internal::resource_limit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TransportConf)
  return target;
}

size_t TransportConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TransportConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shm_conf_);
    }

    // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.participant_attr_);
    }

    // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.communication_mode_);
    }

    // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resource_limit_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportConf::GetClassData() const { return &_class_data_; }

void TransportConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransportConf *>(to)->MergeFrom(
      static_cast<const TransportConf &>(from));
}


void TransportConf::MergeFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shm_conf()->::apollo::cyber::proto::ShmConf::MergeFrom(from._internal_shm_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_participant_attr()->::apollo::cyber::proto::RtpsParticipantAttr::MergeFrom(from._internal_participant_attr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_communication_mode()->::apollo::cyber::proto::CommunicationMode::MergeFrom(from._internal_communication_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource_limit()->::apollo::cyber::proto::ResourceLimit::MergeFrom(from._internal_resource_limit());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportConf::CopyFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConf::IsInitialized() const {
  return true;
}

void TransportConf::InternalSwap(TransportConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportConf, _impl_.resource_limit_)
      + sizeof(TransportConf::_impl_.resource_limit_)
      - PROTOBUF_FIELD_OFFSET(TransportConf, _impl_.shm_conf_)>(
          reinterpret_cast<char*>(&_impl_.shm_conf_),
          reinterpret_cast<char*>(&other->_impl_.shm_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmMulticastLocator*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmMulticastLocator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ShmMulticastLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmConf*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ShmConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::RtpsParticipantAttr*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::RtpsParticipantAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::RtpsParticipantAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::CommunicationMode*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::CommunicationMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::CommunicationMode >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ResourceLimit*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ResourceLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ResourceLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::TransportConf*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::TransportConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::TransportConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
