// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto

#include "cyber/proto/choreography_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR ChoreographyTask::ChoreographyTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processor_)*/0
  , /*decltype(_impl_.prio_)*/1u} {}
struct ChoreographyTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChoreographyTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChoreographyTaskDefaultTypeInternal() {}
  union {
    ChoreographyTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChoreographyTaskDefaultTypeInternal _ChoreographyTask_default_instance_;
PROTOBUF_CONSTEXPR ChoreographyConf::ChoreographyConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.choreography_affinity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.choreography_processor_policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.choreography_cpuset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pool_affinity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pool_processor_policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pool_cpuset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.choreography_processor_num_)*/0u
  , /*decltype(_impl_.choreography_processor_prio_)*/0
  , /*decltype(_impl_.pool_processor_num_)*/0u
  , /*decltype(_impl_.pool_processor_prio_)*/0} {}
struct ChoreographyConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChoreographyConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChoreographyConfDefaultTypeInternal() {}
  union {
    ChoreographyConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChoreographyConfDefaultTypeInternal _ChoreographyConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _impl_.processor_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _impl_.prio_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.choreography_processor_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.choreography_affinity_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.choreography_processor_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.choreography_processor_prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.choreography_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.pool_processor_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.pool_affinity_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.pool_processor_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.pool_processor_prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.pool_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _impl_.tasks_),
  6,
  0,
  1,
  7,
  2,
  8,
  3,
  4,
  9,
  5,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::cyber::proto::ChoreographyTask)},
  { 12, 29, -1, sizeof(::apollo::cyber::proto::ChoreographyConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_ChoreographyTask_default_instance_._instance,
  &::apollo::cyber::proto::_ChoreographyConf_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2fchoreography_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#cyber/proto/choreography_conf.proto\022\022a"
  "pollo.cyber.proto\"D\n\020ChoreographyTask\022\014\n"
  "\004name\030\001 \001(\t\022\021\n\tprocessor\030\002 \001(\005\022\017\n\004prio\030\003"
  " \001(\r:\0011\"\367\002\n\020ChoreographyConf\022\"\n\032choreogr"
  "aphy_processor_num\030\001 \001(\r\022\035\n\025choreography"
  "_affinity\030\002 \001(\t\022%\n\035choreography_processo"
  "r_policy\030\003 \001(\t\022#\n\033choreography_processor"
  "_prio\030\004 \001(\005\022\033\n\023choreography_cpuset\030\005 \001(\t"
  "\022\032\n\022pool_processor_num\030\006 \001(\r\022\025\n\rpool_aff"
  "inity\030\007 \001(\t\022\035\n\025pool_processor_policy\030\010 \001"
  "(\t\022\033\n\023pool_processor_prio\030\t \001(\005\022\023\n\013pool_"
  "cpuset\030\n \001(\t\0223\n\005tasks\030\013 \003(\0132$.apollo.cyb"
  "er.proto.ChoreographyTask"
  ;
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto = {
    false, false, 505, descriptor_table_protodef_cyber_2fproto_2fchoreography_5fconf_2eproto,
    "cyber/proto/choreography_conf.proto",
    &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto, file_level_enum_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto,
    file_level_service_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2fchoreography_5fconf_2eproto(&descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ChoreographyTask::_Internal {
 public:
  using HasBits = decltype(std::declval<ChoreographyTask>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChoreographyTask::ChoreographyTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ChoreographyTask)
}
ChoreographyTask::ChoreographyTask(const ChoreographyTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.processor_){}
    , decltype(_impl_.prio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.processor_, &from._impl_.processor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prio_) -
    reinterpret_cast<char*>(&_impl_.processor_)) + sizeof(_impl_.prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyTask)
}

inline void ChoreographyTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.processor_){0}
    , decltype(_impl_.prio_){1u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChoreographyTask::~ChoreographyTask() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChoreographyTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ChoreographyTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChoreographyTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.processor_ = 0;
    _impl_.prio_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChoreographyTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyTask.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 processor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_processor(&has_bits);
          _impl_.processor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prio = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_prio(&has_bits);
          _impl_.prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChoreographyTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 processor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_processor(), target);
  }

  // optional uint32 prio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyTask)
  return target;
}

size_t ChoreographyTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 processor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processor());
    }

    // optional uint32 prio = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChoreographyTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChoreographyTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChoreographyTask::GetClassData() const { return &_class_data_; }

void ChoreographyTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChoreographyTask *>(to)->MergeFrom(
      static_cast<const ChoreographyTask &>(from));
}


void ChoreographyTask::MergeFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.processor_ = from._impl_.processor_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.prio_ = from._impl_.prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChoreographyTask::CopyFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyTask::IsInitialized() const {
  return true;
}

void ChoreographyTask::InternalSwap(ChoreographyTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.processor_, other->_impl_.processor_);
  swap(_impl_.prio_, other->_impl_.prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChoreographyTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto[0]);
}

// ===================================================================

class ChoreographyConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ChoreographyConf>()._impl_._has_bits_);
  static void set_has_choreography_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_choreography_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_choreography_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_choreography_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_choreography_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pool_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pool_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pool_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pool_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pool_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChoreographyConf::ChoreographyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ChoreographyConf)
}
ChoreographyConf::ChoreographyConf(const ChoreographyConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.choreography_affinity_){}
    , decltype(_impl_.choreography_processor_policy_){}
    , decltype(_impl_.choreography_cpuset_){}
    , decltype(_impl_.pool_affinity_){}
    , decltype(_impl_.pool_processor_policy_){}
    , decltype(_impl_.pool_cpuset_){}
    , decltype(_impl_.choreography_processor_num_){}
    , decltype(_impl_.choreography_processor_prio_){}
    , decltype(_impl_.pool_processor_num_){}
    , decltype(_impl_.pool_processor_prio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.choreography_affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_choreography_affinity()) {
    _impl_.choreography_affinity_.Set(from._internal_choreography_affinity(), 
      GetArenaForAllocation());
  }
  _impl_.choreography_processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_choreography_processor_policy()) {
    _impl_.choreography_processor_policy_.Set(from._internal_choreography_processor_policy(), 
      GetArenaForAllocation());
  }
  _impl_.choreography_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_choreography_cpuset()) {
    _impl_.choreography_cpuset_.Set(from._internal_choreography_cpuset(), 
      GetArenaForAllocation());
  }
  _impl_.pool_affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pool_affinity()) {
    _impl_.pool_affinity_.Set(from._internal_pool_affinity(), 
      GetArenaForAllocation());
  }
  _impl_.pool_processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pool_processor_policy()) {
    _impl_.pool_processor_policy_.Set(from._internal_pool_processor_policy(), 
      GetArenaForAllocation());
  }
  _impl_.pool_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pool_cpuset()) {
    _impl_.pool_cpuset_.Set(from._internal_pool_cpuset(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.choreography_processor_num_, &from._impl_.choreography_processor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pool_processor_prio_) -
    reinterpret_cast<char*>(&_impl_.choreography_processor_num_)) + sizeof(_impl_.pool_processor_prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyConf)
}

inline void ChoreographyConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tasks_){arena}
    , decltype(_impl_.choreography_affinity_){}
    , decltype(_impl_.choreography_processor_policy_){}
    , decltype(_impl_.choreography_cpuset_){}
    , decltype(_impl_.pool_affinity_){}
    , decltype(_impl_.pool_processor_policy_){}
    , decltype(_impl_.pool_cpuset_){}
    , decltype(_impl_.choreography_processor_num_){0u}
    , decltype(_impl_.choreography_processor_prio_){0}
    , decltype(_impl_.pool_processor_num_){0u}
    , decltype(_impl_.pool_processor_prio_){0}
  };
  _impl_.choreography_affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.choreography_processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.choreography_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.choreography_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_affinity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_affinity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_processor_policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_processor_policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pool_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChoreographyConf::~ChoreographyConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChoreographyConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.choreography_affinity_.Destroy();
  _impl_.choreography_processor_policy_.Destroy();
  _impl_.choreography_cpuset_.Destroy();
  _impl_.pool_affinity_.Destroy();
  _impl_.pool_processor_policy_.Destroy();
  _impl_.pool_cpuset_.Destroy();
}

void ChoreographyConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChoreographyConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.choreography_affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.choreography_processor_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.choreography_cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pool_affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pool_processor_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pool_cpuset_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.choreography_processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.choreography_processor_prio_) -
        reinterpret_cast<char*>(&_impl_.choreography_processor_num_)) + sizeof(_impl_.choreography_processor_prio_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.pool_processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pool_processor_prio_) -
        reinterpret_cast<char*>(&_impl_.pool_processor_num_)) + sizeof(_impl_.pool_processor_prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChoreographyConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 choreography_processor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_choreography_processor_num(&has_bits);
          _impl_.choreography_processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string choreography_affinity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_choreography_affinity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string choreography_processor_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_choreography_processor_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 choreography_processor_prio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_choreography_processor_prio(&has_bits);
          _impl_.choreography_processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string choreography_cpuset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_choreography_cpuset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pool_processor_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pool_processor_num(&has_bits);
          _impl_.pool_processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pool_affinity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pool_affinity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_affinity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pool_processor_policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pool_processor_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 pool_processor_prio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pool_processor_prio(&has_bits);
          _impl_.pool_processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pool_cpuset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_pool_cpuset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChoreographyConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 choreography_processor_num = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_choreography_processor_num(), target);
  }

  // optional string choreography_affinity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_affinity().data(), static_cast<int>(this->_internal_choreography_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_choreography_affinity(), target);
  }

  // optional string choreography_processor_policy = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_processor_policy().data(), static_cast<int>(this->_internal_choreography_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_choreography_processor_policy(), target);
  }

  // optional int32 choreography_processor_prio = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_choreography_processor_prio(), target);
  }

  // optional string choreography_cpuset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_cpuset().data(), static_cast<int>(this->_internal_choreography_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_choreography_cpuset(), target);
  }

  // optional uint32 pool_processor_num = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pool_processor_num(), target);
  }

  // optional string pool_affinity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_affinity().data(), static_cast<int>(this->_internal_pool_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_affinity");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pool_affinity(), target);
  }

  // optional string pool_processor_policy = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_processor_policy().data(), static_cast<int>(this->_internal_pool_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pool_processor_policy(), target);
  }

  // optional int32 pool_processor_prio = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_pool_processor_prio(), target);
  }

  // optional string pool_cpuset = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_cpuset().data(), static_cast<int>(this->_internal_pool_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pool_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyConf)
  return target;
}

size_t ChoreographyConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string choreography_affinity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_affinity());
    }

    // optional string choreography_processor_policy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_processor_policy());
    }

    // optional string choreography_cpuset = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_cpuset());
    }

    // optional string pool_affinity = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_affinity());
    }

    // optional string pool_processor_policy = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_processor_policy());
    }

    // optional string pool_cpuset = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_cpuset());
    }

    // optional uint32 choreography_processor_num = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_choreography_processor_num());
    }

    // optional int32 choreography_processor_prio = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_choreography_processor_prio());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 pool_processor_num = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pool_processor_num());
    }

    // optional int32 pool_processor_prio = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pool_processor_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChoreographyConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChoreographyConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChoreographyConf::GetClassData() const { return &_class_data_; }

void ChoreographyConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChoreographyConf *>(to)->MergeFrom(
      static_cast<const ChoreographyConf &>(from));
}


void ChoreographyConf::MergeFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.tasks_.MergeFrom(from._impl_.tasks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_choreography_affinity(from._internal_choreography_affinity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_choreography_processor_policy(from._internal_choreography_processor_policy());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_choreography_cpuset(from._internal_choreography_cpuset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_pool_affinity(from._internal_pool_affinity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_pool_processor_policy(from._internal_pool_processor_policy());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_pool_cpuset(from._internal_pool_cpuset());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.choreography_processor_num_ = from._impl_.choreography_processor_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.choreography_processor_prio_ = from._impl_.choreography_processor_prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.pool_processor_num_ = from._impl_.pool_processor_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.pool_processor_prio_ = from._impl_.pool_processor_prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChoreographyConf::CopyFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyConf::IsInitialized() const {
  return true;
}

void ChoreographyConf::InternalSwap(ChoreographyConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.choreography_affinity_, lhs_arena,
      &other->_impl_.choreography_affinity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.choreography_processor_policy_, lhs_arena,
      &other->_impl_.choreography_processor_policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.choreography_cpuset_, lhs_arena,
      &other->_impl_.choreography_cpuset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_affinity_, lhs_arena,
      &other->_impl_.pool_affinity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_processor_policy_, lhs_arena,
      &other->_impl_.pool_processor_policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pool_cpuset_, lhs_arena,
      &other->_impl_.pool_cpuset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChoreographyConf, _impl_.pool_processor_prio_)
      + sizeof(ChoreographyConf::_impl_.pool_processor_prio_)
      - PROTOBUF_FIELD_OFFSET(ChoreographyConf, _impl_.choreography_processor_num_)>(
          reinterpret_cast<char*>(&_impl_.choreography_processor_num_),
          reinterpret_cast<char*>(&other->_impl_.choreography_processor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChoreographyConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ChoreographyTask*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ChoreographyTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ChoreographyTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ChoreographyConf*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ChoreographyConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ChoreographyConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
