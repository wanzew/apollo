// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fchoreography_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fchoreography_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2fchoreography_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ChoreographyConf;
struct ChoreographyConfDefaultTypeInternal;
extern ChoreographyConfDefaultTypeInternal _ChoreographyConf_default_instance_;
class ChoreographyTask;
struct ChoreographyTaskDefaultTypeInternal;
extern ChoreographyTaskDefaultTypeInternal _ChoreographyTask_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::ChoreographyConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChoreographyConf>(Arena*);
template<> ::apollo::cyber::proto::ChoreographyTask* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChoreographyTask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ChoreographyTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChoreographyTask) */ {
 public:
  inline ChoreographyTask() : ChoreographyTask(nullptr) {}
  ~ChoreographyTask() override;
  explicit PROTOBUF_CONSTEXPR ChoreographyTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChoreographyTask(const ChoreographyTask& from);
  ChoreographyTask(ChoreographyTask&& from) noexcept
    : ChoreographyTask() {
    *this = ::std::move(from);
  }

  inline ChoreographyTask& operator=(const ChoreographyTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChoreographyTask& operator=(ChoreographyTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChoreographyTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChoreographyTask* internal_default_instance() {
    return reinterpret_cast<const ChoreographyTask*>(
               &_ChoreographyTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChoreographyTask& a, ChoreographyTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ChoreographyTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChoreographyTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChoreographyTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChoreographyTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChoreographyTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChoreographyTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChoreographyTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChoreographyTask";
  }
  protected:
  explicit ChoreographyTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProcessorFieldNumber = 2,
    kPrioFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 processor = 2;
  bool has_processor() const;
  private:
  bool _internal_has_processor() const;
  public:
  void clear_processor();
  int32_t processor() const;
  void set_processor(int32_t value);
  private:
  int32_t _internal_processor() const;
  void _internal_set_processor(int32_t value);
  public:

  // optional uint32 prio = 3 [default = 1];
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  uint32_t prio() const;
  void set_prio(uint32_t value);
  private:
  uint32_t _internal_prio() const;
  void _internal_set_prio(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChoreographyTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t processor_;
    uint32_t prio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ChoreographyConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChoreographyConf) */ {
 public:
  inline ChoreographyConf() : ChoreographyConf(nullptr) {}
  ~ChoreographyConf() override;
  explicit PROTOBUF_CONSTEXPR ChoreographyConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChoreographyConf(const ChoreographyConf& from);
  ChoreographyConf(ChoreographyConf&& from) noexcept
    : ChoreographyConf() {
    *this = ::std::move(from);
  }

  inline ChoreographyConf& operator=(const ChoreographyConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChoreographyConf& operator=(ChoreographyConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChoreographyConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChoreographyConf* internal_default_instance() {
    return reinterpret_cast<const ChoreographyConf*>(
               &_ChoreographyConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChoreographyConf& a, ChoreographyConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ChoreographyConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChoreographyConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChoreographyConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChoreographyConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChoreographyConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChoreographyConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChoreographyConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChoreographyConf";
  }
  protected:
  explicit ChoreographyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 11,
    kChoreographyAffinityFieldNumber = 2,
    kChoreographyProcessorPolicyFieldNumber = 3,
    kChoreographyCpusetFieldNumber = 5,
    kPoolAffinityFieldNumber = 7,
    kPoolProcessorPolicyFieldNumber = 8,
    kPoolCpusetFieldNumber = 10,
    kChoreographyProcessorNumFieldNumber = 1,
    kChoreographyProcessorPrioFieldNumber = 4,
    kPoolProcessorNumFieldNumber = 6,
    kPoolProcessorPrioFieldNumber = 9,
  };
  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::apollo::cyber::proto::ChoreographyTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >*
      mutable_tasks();
  private:
  const ::apollo::cyber::proto::ChoreographyTask& _internal_tasks(int index) const;
  ::apollo::cyber::proto::ChoreographyTask* _internal_add_tasks();
  public:
  const ::apollo::cyber::proto::ChoreographyTask& tasks(int index) const;
  ::apollo::cyber::proto::ChoreographyTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >&
      tasks() const;

  // optional string choreography_affinity = 2;
  bool has_choreography_affinity() const;
  private:
  bool _internal_has_choreography_affinity() const;
  public:
  void clear_choreography_affinity();
  const std::string& choreography_affinity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_choreography_affinity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_choreography_affinity();
  PROTOBUF_NODISCARD std::string* release_choreography_affinity();
  void set_allocated_choreography_affinity(std::string* choreography_affinity);
  private:
  const std::string& _internal_choreography_affinity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_choreography_affinity(const std::string& value);
  std::string* _internal_mutable_choreography_affinity();
  public:

  // optional string choreography_processor_policy = 3;
  bool has_choreography_processor_policy() const;
  private:
  bool _internal_has_choreography_processor_policy() const;
  public:
  void clear_choreography_processor_policy();
  const std::string& choreography_processor_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_choreography_processor_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_choreography_processor_policy();
  PROTOBUF_NODISCARD std::string* release_choreography_processor_policy();
  void set_allocated_choreography_processor_policy(std::string* choreography_processor_policy);
  private:
  const std::string& _internal_choreography_processor_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_choreography_processor_policy(const std::string& value);
  std::string* _internal_mutable_choreography_processor_policy();
  public:

  // optional string choreography_cpuset = 5;
  bool has_choreography_cpuset() const;
  private:
  bool _internal_has_choreography_cpuset() const;
  public:
  void clear_choreography_cpuset();
  const std::string& choreography_cpuset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_choreography_cpuset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_choreography_cpuset();
  PROTOBUF_NODISCARD std::string* release_choreography_cpuset();
  void set_allocated_choreography_cpuset(std::string* choreography_cpuset);
  private:
  const std::string& _internal_choreography_cpuset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_choreography_cpuset(const std::string& value);
  std::string* _internal_mutable_choreography_cpuset();
  public:

  // optional string pool_affinity = 7;
  bool has_pool_affinity() const;
  private:
  bool _internal_has_pool_affinity() const;
  public:
  void clear_pool_affinity();
  const std::string& pool_affinity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool_affinity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool_affinity();
  PROTOBUF_NODISCARD std::string* release_pool_affinity();
  void set_allocated_pool_affinity(std::string* pool_affinity);
  private:
  const std::string& _internal_pool_affinity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool_affinity(const std::string& value);
  std::string* _internal_mutable_pool_affinity();
  public:

  // optional string pool_processor_policy = 8;
  bool has_pool_processor_policy() const;
  private:
  bool _internal_has_pool_processor_policy() const;
  public:
  void clear_pool_processor_policy();
  const std::string& pool_processor_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool_processor_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool_processor_policy();
  PROTOBUF_NODISCARD std::string* release_pool_processor_policy();
  void set_allocated_pool_processor_policy(std::string* pool_processor_policy);
  private:
  const std::string& _internal_pool_processor_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool_processor_policy(const std::string& value);
  std::string* _internal_mutable_pool_processor_policy();
  public:

  // optional string pool_cpuset = 10;
  bool has_pool_cpuset() const;
  private:
  bool _internal_has_pool_cpuset() const;
  public:
  void clear_pool_cpuset();
  const std::string& pool_cpuset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool_cpuset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool_cpuset();
  PROTOBUF_NODISCARD std::string* release_pool_cpuset();
  void set_allocated_pool_cpuset(std::string* pool_cpuset);
  private:
  const std::string& _internal_pool_cpuset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool_cpuset(const std::string& value);
  std::string* _internal_mutable_pool_cpuset();
  public:

  // optional uint32 choreography_processor_num = 1;
  bool has_choreography_processor_num() const;
  private:
  bool _internal_has_choreography_processor_num() const;
  public:
  void clear_choreography_processor_num();
  uint32_t choreography_processor_num() const;
  void set_choreography_processor_num(uint32_t value);
  private:
  uint32_t _internal_choreography_processor_num() const;
  void _internal_set_choreography_processor_num(uint32_t value);
  public:

  // optional int32 choreography_processor_prio = 4;
  bool has_choreography_processor_prio() const;
  private:
  bool _internal_has_choreography_processor_prio() const;
  public:
  void clear_choreography_processor_prio();
  int32_t choreography_processor_prio() const;
  void set_choreography_processor_prio(int32_t value);
  private:
  int32_t _internal_choreography_processor_prio() const;
  void _internal_set_choreography_processor_prio(int32_t value);
  public:

  // optional uint32 pool_processor_num = 6;
  bool has_pool_processor_num() const;
  private:
  bool _internal_has_pool_processor_num() const;
  public:
  void clear_pool_processor_num();
  uint32_t pool_processor_num() const;
  void set_pool_processor_num(uint32_t value);
  private:
  uint32_t _internal_pool_processor_num() const;
  void _internal_set_pool_processor_num(uint32_t value);
  public:

  // optional int32 pool_processor_prio = 9;
  bool has_pool_processor_prio() const;
  private:
  bool _internal_has_pool_processor_prio() const;
  public:
  void clear_pool_processor_prio();
  int32_t pool_processor_prio() const;
  void set_pool_processor_prio(int32_t value);
  private:
  int32_t _internal_pool_processor_prio() const;
  void _internal_set_pool_processor_prio(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChoreographyConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask > tasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr choreography_affinity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr choreography_processor_policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr choreography_cpuset_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_affinity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_processor_policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_cpuset_;
    uint32_t choreography_processor_num_;
    int32_t choreography_processor_prio_;
    uint32_t pool_processor_num_;
    int32_t pool_processor_prio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChoreographyTask

// optional string name = 1;
inline bool ChoreographyTask::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChoreographyTask::has_name() const {
  return _internal_has_name();
}
inline void ChoreographyTask::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChoreographyTask::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyTask::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.name)
}
inline std::string* ChoreographyTask::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyTask.name)
  return _s;
}
inline const std::string& ChoreographyTask::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChoreographyTask::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyTask::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyTask::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyTask.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyTask::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyTask.name)
}

// optional int32 processor = 2;
inline bool ChoreographyTask::_internal_has_processor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChoreographyTask::has_processor() const {
  return _internal_has_processor();
}
inline void ChoreographyTask::clear_processor() {
  _impl_.processor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChoreographyTask::_internal_processor() const {
  return _impl_.processor_;
}
inline int32_t ChoreographyTask::processor() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.processor)
  return _internal_processor();
}
inline void ChoreographyTask::_internal_set_processor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.processor_ = value;
}
inline void ChoreographyTask::set_processor(int32_t value) {
  _internal_set_processor(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.processor)
}

// optional uint32 prio = 3 [default = 1];
inline bool ChoreographyTask::_internal_has_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChoreographyTask::has_prio() const {
  return _internal_has_prio();
}
inline void ChoreographyTask::clear_prio() {
  _impl_.prio_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChoreographyTask::_internal_prio() const {
  return _impl_.prio_;
}
inline uint32_t ChoreographyTask::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.prio)
  return _internal_prio();
}
inline void ChoreographyTask::_internal_set_prio(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prio_ = value;
}
inline void ChoreographyTask::set_prio(uint32_t value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.prio)
}

// -------------------------------------------------------------------

// ChoreographyConf

// optional uint32 choreography_processor_num = 1;
inline bool ChoreographyConf::_internal_has_choreography_processor_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChoreographyConf::has_choreography_processor_num() const {
  return _internal_has_choreography_processor_num();
}
inline void ChoreographyConf::clear_choreography_processor_num() {
  _impl_.choreography_processor_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ChoreographyConf::_internal_choreography_processor_num() const {
  return _impl_.choreography_processor_num_;
}
inline uint32_t ChoreographyConf::choreography_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
  return _internal_choreography_processor_num();
}
inline void ChoreographyConf::_internal_set_choreography_processor_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.choreography_processor_num_ = value;
}
inline void ChoreographyConf::set_choreography_processor_num(uint32_t value) {
  _internal_set_choreography_processor_num(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
}

// optional string choreography_affinity = 2;
inline bool ChoreographyConf::_internal_has_choreography_affinity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChoreographyConf::has_choreography_affinity() const {
  return _internal_has_choreography_affinity();
}
inline void ChoreographyConf::clear_choreography_affinity() {
  _impl_.choreography_affinity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChoreographyConf::choreography_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return _internal_choreography_affinity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_choreography_affinity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.choreography_affinity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
inline std::string* ChoreographyConf::mutable_choreography_affinity() {
  std::string* _s = _internal_mutable_choreography_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_choreography_affinity() const {
  return _impl_.choreography_affinity_.Get();
}
inline void ChoreographyConf::_internal_set_choreography_affinity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.choreography_affinity_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_choreography_affinity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.choreography_affinity_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_choreography_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  if (!_internal_has_choreography_affinity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.choreography_affinity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_affinity_.IsDefault()) {
    _impl_.choreography_affinity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_choreography_affinity(std::string* choreography_affinity) {
  if (choreography_affinity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.choreography_affinity_.SetAllocated(choreography_affinity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_affinity_.IsDefault()) {
    _impl_.choreography_affinity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}

// optional string choreography_processor_policy = 3;
inline bool ChoreographyConf::_internal_has_choreography_processor_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChoreographyConf::has_choreography_processor_policy() const {
  return _internal_has_choreography_processor_policy();
}
inline void ChoreographyConf::clear_choreography_processor_policy() {
  _impl_.choreography_processor_policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChoreographyConf::choreography_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return _internal_choreography_processor_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_choreography_processor_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.choreography_processor_policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
inline std::string* ChoreographyConf::mutable_choreography_processor_policy() {
  std::string* _s = _internal_mutable_choreography_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_choreography_processor_policy() const {
  return _impl_.choreography_processor_policy_.Get();
}
inline void ChoreographyConf::_internal_set_choreography_processor_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.choreography_processor_policy_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_choreography_processor_policy() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.choreography_processor_policy_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_choreography_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  if (!_internal_has_choreography_processor_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.choreography_processor_policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_processor_policy_.IsDefault()) {
    _impl_.choreography_processor_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_choreography_processor_policy(std::string* choreography_processor_policy) {
  if (choreography_processor_policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.choreography_processor_policy_.SetAllocated(choreography_processor_policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_processor_policy_.IsDefault()) {
    _impl_.choreography_processor_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}

// optional int32 choreography_processor_prio = 4;
inline bool ChoreographyConf::_internal_has_choreography_processor_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChoreographyConf::has_choreography_processor_prio() const {
  return _internal_has_choreography_processor_prio();
}
inline void ChoreographyConf::clear_choreography_processor_prio() {
  _impl_.choreography_processor_prio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ChoreographyConf::_internal_choreography_processor_prio() const {
  return _impl_.choreography_processor_prio_;
}
inline int32_t ChoreographyConf::choreography_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
  return _internal_choreography_processor_prio();
}
inline void ChoreographyConf::_internal_set_choreography_processor_prio(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.choreography_processor_prio_ = value;
}
inline void ChoreographyConf::set_choreography_processor_prio(int32_t value) {
  _internal_set_choreography_processor_prio(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
}

// optional string choreography_cpuset = 5;
inline bool ChoreographyConf::_internal_has_choreography_cpuset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChoreographyConf::has_choreography_cpuset() const {
  return _internal_has_choreography_cpuset();
}
inline void ChoreographyConf::clear_choreography_cpuset() {
  _impl_.choreography_cpuset_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChoreographyConf::choreography_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return _internal_choreography_cpuset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_choreography_cpuset(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.choreography_cpuset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
inline std::string* ChoreographyConf::mutable_choreography_cpuset() {
  std::string* _s = _internal_mutable_choreography_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_choreography_cpuset() const {
  return _impl_.choreography_cpuset_.Get();
}
inline void ChoreographyConf::_internal_set_choreography_cpuset(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.choreography_cpuset_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_choreography_cpuset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.choreography_cpuset_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_choreography_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  if (!_internal_has_choreography_cpuset()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.choreography_cpuset_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_cpuset_.IsDefault()) {
    _impl_.choreography_cpuset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_choreography_cpuset(std::string* choreography_cpuset) {
  if (choreography_cpuset != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.choreography_cpuset_.SetAllocated(choreography_cpuset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.choreography_cpuset_.IsDefault()) {
    _impl_.choreography_cpuset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}

// optional uint32 pool_processor_num = 6;
inline bool ChoreographyConf::_internal_has_pool_processor_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChoreographyConf::has_pool_processor_num() const {
  return _internal_has_pool_processor_num();
}
inline void ChoreographyConf::clear_pool_processor_num() {
  _impl_.pool_processor_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ChoreographyConf::_internal_pool_processor_num() const {
  return _impl_.pool_processor_num_;
}
inline uint32_t ChoreographyConf::pool_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
  return _internal_pool_processor_num();
}
inline void ChoreographyConf::_internal_set_pool_processor_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pool_processor_num_ = value;
}
inline void ChoreographyConf::set_pool_processor_num(uint32_t value) {
  _internal_set_pool_processor_num(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
}

// optional string pool_affinity = 7;
inline bool ChoreographyConf::_internal_has_pool_affinity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChoreographyConf::has_pool_affinity() const {
  return _internal_has_pool_affinity();
}
inline void ChoreographyConf::clear_pool_affinity() {
  _impl_.pool_affinity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChoreographyConf::pool_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return _internal_pool_affinity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_pool_affinity(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.pool_affinity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
inline std::string* ChoreographyConf::mutable_pool_affinity() {
  std::string* _s = _internal_mutable_pool_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_pool_affinity() const {
  return _impl_.pool_affinity_.Get();
}
inline void ChoreographyConf::_internal_set_pool_affinity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pool_affinity_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_pool_affinity() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.pool_affinity_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_pool_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  if (!_internal_has_pool_affinity()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.pool_affinity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_affinity_.IsDefault()) {
    _impl_.pool_affinity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_pool_affinity(std::string* pool_affinity) {
  if (pool_affinity != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.pool_affinity_.SetAllocated(pool_affinity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_affinity_.IsDefault()) {
    _impl_.pool_affinity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}

// optional string pool_processor_policy = 8;
inline bool ChoreographyConf::_internal_has_pool_processor_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChoreographyConf::has_pool_processor_policy() const {
  return _internal_has_pool_processor_policy();
}
inline void ChoreographyConf::clear_pool_processor_policy() {
  _impl_.pool_processor_policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ChoreographyConf::pool_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return _internal_pool_processor_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_pool_processor_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.pool_processor_policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
inline std::string* ChoreographyConf::mutable_pool_processor_policy() {
  std::string* _s = _internal_mutable_pool_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_pool_processor_policy() const {
  return _impl_.pool_processor_policy_.Get();
}
inline void ChoreographyConf::_internal_set_pool_processor_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pool_processor_policy_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_pool_processor_policy() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.pool_processor_policy_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_pool_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  if (!_internal_has_pool_processor_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.pool_processor_policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_processor_policy_.IsDefault()) {
    _impl_.pool_processor_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_pool_processor_policy(std::string* pool_processor_policy) {
  if (pool_processor_policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.pool_processor_policy_.SetAllocated(pool_processor_policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_processor_policy_.IsDefault()) {
    _impl_.pool_processor_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}

// optional int32 pool_processor_prio = 9;
inline bool ChoreographyConf::_internal_has_pool_processor_prio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChoreographyConf::has_pool_processor_prio() const {
  return _internal_has_pool_processor_prio();
}
inline void ChoreographyConf::clear_pool_processor_prio() {
  _impl_.pool_processor_prio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ChoreographyConf::_internal_pool_processor_prio() const {
  return _impl_.pool_processor_prio_;
}
inline int32_t ChoreographyConf::pool_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
  return _internal_pool_processor_prio();
}
inline void ChoreographyConf::_internal_set_pool_processor_prio(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pool_processor_prio_ = value;
}
inline void ChoreographyConf::set_pool_processor_prio(int32_t value) {
  _internal_set_pool_processor_prio(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
}

// optional string pool_cpuset = 10;
inline bool ChoreographyConf::_internal_has_pool_cpuset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChoreographyConf::has_pool_cpuset() const {
  return _internal_has_pool_cpuset();
}
inline void ChoreographyConf::clear_pool_cpuset() {
  _impl_.pool_cpuset_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ChoreographyConf::pool_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return _internal_pool_cpuset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChoreographyConf::set_pool_cpuset(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.pool_cpuset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
inline std::string* ChoreographyConf::mutable_pool_cpuset() {
  std::string* _s = _internal_mutable_pool_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return _s;
}
inline const std::string& ChoreographyConf::_internal_pool_cpuset() const {
  return _impl_.pool_cpuset_.Get();
}
inline void ChoreographyConf::_internal_set_pool_cpuset(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pool_cpuset_.Set(value, GetArenaForAllocation());
}
inline std::string* ChoreographyConf::_internal_mutable_pool_cpuset() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.pool_cpuset_.Mutable(GetArenaForAllocation());
}
inline std::string* ChoreographyConf::release_pool_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  if (!_internal_has_pool_cpuset()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.pool_cpuset_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_cpuset_.IsDefault()) {
    _impl_.pool_cpuset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChoreographyConf::set_allocated_pool_cpuset(std::string* pool_cpuset) {
  if (pool_cpuset != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.pool_cpuset_.SetAllocated(pool_cpuset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pool_cpuset_.IsDefault()) {
    _impl_.pool_cpuset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}

// repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
inline int ChoreographyConf::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int ChoreographyConf::tasks_size() const {
  return _internal_tasks_size();
}
inline void ChoreographyConf::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline ::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.tasks)
  return _impl_.tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >*
ChoreographyConf::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return &_impl_.tasks_;
}
inline const ::apollo::cyber::proto::ChoreographyTask& ChoreographyConf::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline const ::apollo::cyber::proto::ChoreographyTask& ChoreographyConf::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.tasks)
  return _internal_tasks(index);
}
inline ::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::_internal_add_tasks() {
  return _impl_.tasks_.Add();
}
inline ::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::add_tasks() {
  ::apollo::cyber::proto::ChoreographyTask* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChoreographyConf.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >&
ChoreographyConf::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return _impl_.tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fchoreography_5fconf_2eproto
