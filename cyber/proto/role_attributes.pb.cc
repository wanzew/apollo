// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto

#include "cyber/proto/role_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR SocketAddr::SocketAddr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u} {}
struct SocketAddrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketAddrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketAddrDefaultTypeInternal() {}
  union {
    SocketAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketAddrDefaultTypeInternal _SocketAddr_default_instance_;
PROTOBUF_CONSTEXPR RoleAttributes::RoleAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qos_profile_)*/nullptr
  , /*decltype(_impl_.socket_addr_)*/nullptr
  , /*decltype(_impl_.node_id_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_id_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.service_id_)*/uint64_t{0u}
  , /*decltype(_impl_.process_id_)*/0} {}
struct RoleAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleAttributesDefaultTypeInternal() {}
  union {
    RoleAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleAttributesDefaultTypeInternal _RoleAttributes_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2frole_5fattributes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2frole_5fattributes_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2frole_5fattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _impl_.port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.host_ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.process_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.node_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.proto_desc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.qos_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.socket_addr_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _impl_.service_id_),
  0,
  1,
  13,
  2,
  9,
  3,
  10,
  4,
  5,
  11,
  7,
  8,
  6,
  12,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::cyber::proto::SocketAddr)},
  { 10, 30, -1, sizeof(::apollo::cyber::proto::RoleAttributes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_SocketAddr_default_instance_._instance,
  &::apollo::cyber::proto::_RoleAttributes_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2frole_5fattributes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!cyber/proto/role_attributes.proto\022\022apo"
  "llo.cyber.proto\032\035cyber/proto/qos_profile"
  ".proto\"&\n\nSocketAddr\022\n\n\002ip\030\001 \001(\t\022\014\n\004port"
  "\030\002 \001(\r\"\340\002\n\016RoleAttributes\022\021\n\thost_name\030\001"
  " \001(\t\022\017\n\007host_ip\030\002 \001(\t\022\022\n\nprocess_id\030\003 \001("
  "\005\022\021\n\tnode_name\030\004 \001(\t\022\017\n\007node_id\030\005 \001(\004\022\024\n"
  "\014channel_name\030\006 \001(\t\022\022\n\nchannel_id\030\007 \001(\004\022"
  "\024\n\014message_type\030\010 \001(\t\022\022\n\nproto_desc\030\t \001("
  "\014\022\n\n\002id\030\n \001(\004\0223\n\013qos_profile\030\013 \001(\0132\036.apo"
  "llo.cyber.proto.QosProfile\0223\n\013socket_add"
  "r\030\014 \001(\0132\036.apollo.cyber.proto.SocketAddr\022"
  "\024\n\014service_name\030\r \001(\t\022\022\n\nservice_id\030\016 \001("
  "\004"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_deps[1] = {
  &::descriptor_table_cyber_2fproto_2fqos_5fprofile_2eproto,
};
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto = {
    false, false, 481, descriptor_table_protodef_cyber_2fproto_2frole_5fattributes_2eproto,
    "cyber/proto/role_attributes.proto",
    &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once, descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2frole_5fattributes_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto, file_level_enum_descriptors_cyber_2fproto_2frole_5fattributes_2eproto,
    file_level_service_descriptors_cyber_2fproto_2frole_5fattributes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2frole_5fattributes_2eproto(&descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SocketAddr::_Internal {
 public:
  using HasBits = decltype(std::declval<SocketAddr>()._impl_._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SocketAddr::SocketAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.SocketAddr)
}
SocketAddr::SocketAddr(const SocketAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _impl_.ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  _impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SocketAddr)
}

inline void SocketAddr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SocketAddr::~SocketAddr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SocketAddr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void SocketAddr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SocketAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ip_.ClearNonDefaultToEmpty();
  }
  _impl_.port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketAddr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SocketAddr.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SocketAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SocketAddr.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SocketAddr)
  return target;
}

size_t SocketAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SocketAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SocketAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketAddr::GetClassData() const { return &_class_data_; }

void SocketAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SocketAddr *>(to)->MergeFrom(
      static_cast<const SocketAddr &>(from));
}


void SocketAddr::MergeFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SocketAddr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.port_ = from._impl_.port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketAddr::CopyFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SocketAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAddr::IsInitialized() const {
  return true;
}

void SocketAddr::InternalSwap(SocketAddr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketAddr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_getter, &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once,
      file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto[0]);
}

// ===================================================================

class RoleAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleAttributes>()._impl_._has_bits_);
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proto_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::cyber::proto::QosProfile& qos_profile(const RoleAttributes* msg);
  static void set_has_qos_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::cyber::proto::SocketAddr& socket_addr(const RoleAttributes* msg);
  static void set_has_socket_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::cyber::proto::QosProfile&
RoleAttributes::_Internal::qos_profile(const RoleAttributes* msg) {
  return *msg->_impl_.qos_profile_;
}
const ::apollo::cyber::proto::SocketAddr&
RoleAttributes::_Internal::socket_addr(const RoleAttributes* msg) {
  return *msg->_impl_.socket_addr_;
}
void RoleAttributes::clear_qos_profile() {
  if (_impl_.qos_profile_ != nullptr) _impl_.qos_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
RoleAttributes::RoleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.RoleAttributes)
}
RoleAttributes::RoleAttributes(const RoleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_ip_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.proto_desc_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.qos_profile_){nullptr}
    , decltype(_impl_.socket_addr_){nullptr}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.service_id_){}
    , decltype(_impl_.process_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    _impl_.host_name_.Set(from._internal_host_name(), 
      GetArenaForAllocation());
  }
  _impl_.host_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_ip()) {
    _impl_.host_ip_.Set(from._internal_host_ip(), 
      GetArenaForAllocation());
  }
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node_name()) {
    _impl_.node_name_.Set(from._internal_node_name(), 
      GetArenaForAllocation());
  }
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _impl_.channel_name_.Set(from._internal_channel_name(), 
      GetArenaForAllocation());
  }
  _impl_.message_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_type()) {
    _impl_.message_type_.Set(from._internal_message_type(), 
      GetArenaForAllocation());
  }
  _impl_.proto_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_desc()) {
    _impl_.proto_desc_.Set(from._internal_proto_desc(), 
      GetArenaForAllocation());
  }
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_name()) {
    _impl_.service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_qos_profile()) {
    _impl_.qos_profile_ = new ::apollo::cyber::proto::QosProfile(*from._impl_.qos_profile_);
  }
  if (from._internal_has_socket_addr()) {
    _impl_.socket_addr_ = new ::apollo::cyber::proto::SocketAddr(*from._impl_.socket_addr_);
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.process_id_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.process_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RoleAttributes)
}

inline void RoleAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.host_ip_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.proto_desc_){}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.qos_profile_){nullptr}
    , decltype(_impl_.socket_addr_){nullptr}
    , decltype(_impl_.node_id_){uint64_t{0u}}
    , decltype(_impl_.channel_id_){uint64_t{0u}}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.service_id_){uint64_t{0u}}
    , decltype(_impl_.process_id_){0}
  };
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleAttributes::~RoleAttributes() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RoleAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_name_.Destroy();
  _impl_.host_ip_.Destroy();
  _impl_.node_name_.Destroy();
  _impl_.channel_name_.Destroy();
  _impl_.message_type_.Destroy();
  _impl_.proto_desc_.Destroy();
  _impl_.service_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.qos_profile_;
  if (this != internal_default_instance()) delete _impl_.socket_addr_;
}

void RoleAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RoleAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.host_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.host_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.node_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.message_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.proto_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.service_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.qos_profile_ != nullptr);
      _impl_.qos_profile_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.socket_addr_ != nullptr);
    _impl_.socket_addr_->Clear();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.process_id_) -
        reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.process_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.host_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string host_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.host_ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 process_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_process_id(&has_bits);
          _impl_.process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string node_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.node_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_node_id(&has_bits);
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 channel_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.message_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes proto_desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_proto_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string service_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.service_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 service_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_service_id(&has_bits);
          _impl_.service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RoleAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string host_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // optional string host_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_ip().data(), static_cast<int>(this->_internal_host_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_ip(), target);
  }

  // optional int32 process_id = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_id(), target);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.node_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_name(), target);
  }

  // optional uint64 node_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_node_id(), target);
  }

  // optional string channel_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.channel_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_channel_name(), target);
  }

  // optional uint64 channel_id = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_channel_id(), target);
  }

  // optional string message_type = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.message_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_type(), target);
  }

  // optional bytes proto_desc = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_proto_desc(), target);
  }

  // optional uint64 id = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_id(), target);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::qos_profile(this),
        _Internal::qos_profile(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::socket_addr(this),
        _Internal::socket_addr(this).GetCachedSize(), target, stream);
  }

  // optional string service_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.service_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_service_name(), target);
  }

  // optional uint64 service_id = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RoleAttributes)
  return target;
}

size_t RoleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RoleAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional string host_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_ip());
    }

    // optional string node_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_name());
    }

    // optional string channel_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string message_type = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
    }

    // optional bytes proto_desc = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_desc());
    }

    // optional string service_name = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
    }

    // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qos_profile_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.socket_addr_);
    }

    // optional uint64 node_id = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_node_id());
    }

    // optional uint64 channel_id = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
    }

    // optional uint64 id = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 service_id = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_service_id());
    }

    // optional int32 process_id = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleAttributes::GetClassData() const { return &_class_data_; }

void RoleAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleAttributes *>(to)->MergeFrom(
      static_cast<const RoleAttributes &>(from));
}


void RoleAttributes::MergeFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RoleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_host_ip(from._internal_host_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_node_name(from._internal_node_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_message_type(from._internal_message_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_proto_desc(from._internal_proto_desc());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_qos_profile()->::apollo::cyber::proto::QosProfile::MergeFrom(from._internal_qos_profile());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_socket_addr()->::apollo::cyber::proto::SocketAddr::MergeFrom(from._internal_socket_addr());
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.node_id_ = from._impl_.node_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.service_id_ = from._impl_.service_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.process_id_ = from._impl_.process_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleAttributes::CopyFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RoleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAttributes::IsInitialized() const {
  return true;
}

void RoleAttributes::InternalSwap(RoleAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_ip_, lhs_arena,
      &other->_impl_.host_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_name_, lhs_arena,
      &other->_impl_.node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_type_, lhs_arena,
      &other->_impl_.message_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_desc_, lhs_arena,
      &other->_impl_.proto_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAttributes, _impl_.process_id_)
      + sizeof(RoleAttributes::_impl_.process_id_)
      - PROTOBUF_FIELD_OFFSET(RoleAttributes, _impl_.qos_profile_)>(
          reinterpret_cast<char*>(&_impl_.qos_profile_),
          reinterpret_cast<char*>(&other->_impl_.qos_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_getter, &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once,
      file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SocketAddr*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::SocketAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::SocketAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::RoleAttributes*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::RoleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::RoleAttributes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
