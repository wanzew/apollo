// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/component_conf.proto

#include "cyber/proto/component_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR ReaderOption::ReaderOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qos_profile_)*/nullptr
  , /*decltype(_impl_.pending_queue_size_)*/1u} {}
struct ReaderOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReaderOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReaderOptionDefaultTypeInternal() {}
  union {
    ReaderOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReaderOptionDefaultTypeInternal _ReaderOption_default_instance_;
PROTOBUF_CONSTEXPR ComponentConfig::ComponentConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.readers_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ComponentConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentConfigDefaultTypeInternal() {}
  union {
    ComponentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentConfigDefaultTypeInternal _ComponentConfig_default_instance_;
PROTOBUF_CONSTEXPR TimerComponentConfig::TimerComponentConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/0u} {}
struct TimerComponentConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimerComponentConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimerComponentConfigDefaultTypeInternal() {}
  union {
    TimerComponentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimerComponentConfigDefaultTypeInternal _TimerComponentConfig_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2fcomponent_5fconf_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2fcomponent_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2fcomponent_5fconf_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _impl_.qos_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _impl_.pending_queue_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _impl_.config_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _impl_.flag_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _impl_.readers_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _impl_.config_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _impl_.flag_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _impl_.interval_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::cyber::proto::ReaderOption)},
  { 12, 22, -1, sizeof(::apollo::cyber::proto::ComponentConfig)},
  { 26, 36, -1, sizeof(::apollo::cyber::proto::TimerComponentConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_ReaderOption_default_instance_._instance,
  &::apollo::cyber::proto::_ComponentConfig_default_instance_._instance,
  &::apollo::cyber::proto::_TimerComponentConfig_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2fcomponent_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n cyber/proto/component_conf.proto\022\022apol"
  "lo.cyber.proto\032\035cyber/proto/qos_profile."
  "proto\"s\n\014ReaderOption\022\017\n\007channel\030\001 \001(\t\0223"
  "\n\013qos_profile\030\002 \001(\0132\036.apollo.cyber.proto"
  ".QosProfile\022\035\n\022pending_queue_size\030\003 \001(\r:"
  "\0011\"\204\001\n\017ComponentConfig\022\014\n\004name\030\001 \001(\t\022\030\n\020"
  "config_file_path\030\002 \001(\t\022\026\n\016flag_file_path"
  "\030\003 \001(\t\0221\n\007readers\030\004 \003(\0132 .apollo.cyber.p"
  "roto.ReaderOption\"h\n\024TimerComponentConfi"
  "g\022\014\n\004name\030\001 \001(\t\022\030\n\020config_file_path\030\002 \001("
  "\t\022\026\n\016flag_file_path\030\003 \001(\t\022\020\n\010interval\030\004 "
  "\001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_deps[1] = {
  &::descriptor_table_cyber_2fproto_2fqos_5fprofile_2eproto,
};
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto = {
    false, false, 443, descriptor_table_protodef_cyber_2fproto_2fcomponent_5fconf_2eproto,
    "cyber/proto/component_conf.proto",
    &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_once, descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2fcomponent_5fconf_2eproto, file_level_enum_descriptors_cyber_2fproto_2fcomponent_5fconf_2eproto,
    file_level_service_descriptors_cyber_2fproto_2fcomponent_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2fcomponent_5fconf_2eproto(&descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ReaderOption::_Internal {
 public:
  using HasBits = decltype(std::declval<ReaderOption>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::cyber::proto::QosProfile& qos_profile(const ReaderOption* msg);
  static void set_has_qos_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pending_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::cyber::proto::QosProfile&
ReaderOption::_Internal::qos_profile(const ReaderOption* msg) {
  return *msg->_impl_.qos_profile_;
}
void ReaderOption::clear_qos_profile() {
  if (_impl_.qos_profile_ != nullptr) _impl_.qos_profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ReaderOption::ReaderOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ReaderOption)
}
ReaderOption::ReaderOption(const ReaderOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.qos_profile_){nullptr}
    , decltype(_impl_.pending_queue_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel()) {
    _impl_.channel_.Set(from._internal_channel(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_qos_profile()) {
    _impl_.qos_profile_ = new ::apollo::cyber::proto::QosProfile(*from._impl_.qos_profile_);
  }
  _impl_.pending_queue_size_ = from._impl_.pending_queue_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ReaderOption)
}

inline void ReaderOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.qos_profile_){nullptr}
    , decltype(_impl_.pending_queue_size_){1u}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReaderOption::~ReaderOption() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ReaderOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReaderOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.qos_profile_;
}

void ReaderOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReaderOption::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ReaderOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.qos_profile_ != nullptr);
      _impl_.qos_profile_->Clear();
    }
    _impl_.pending_queue_size_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReaderOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ReaderOption.channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pending_queue_size = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pending_queue_size(&has_bits);
          _impl_.pending_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReaderOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ReaderOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ReaderOption.channel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel(), target);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::qos_profile(this),
        _Internal::qos_profile(this).GetCachedSize(), target, stream);
  }

  // optional uint32 pending_queue_size = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pending_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ReaderOption)
  return target;
}

size_t ReaderOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ReaderOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel());
    }

    // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qos_profile_);
    }

    // optional uint32 pending_queue_size = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pending_queue_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReaderOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReaderOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReaderOption::GetClassData() const { return &_class_data_; }

void ReaderOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReaderOption *>(to)->MergeFrom(
      static_cast<const ReaderOption &>(from));
}


void ReaderOption::MergeFrom(const ReaderOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ReaderOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel(from._internal_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_qos_profile()->::apollo::cyber::proto::QosProfile::MergeFrom(from._internal_qos_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pending_queue_size_ = from._impl_.pending_queue_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReaderOption::CopyFrom(const ReaderOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ReaderOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReaderOption::IsInitialized() const {
  return true;
}

void ReaderOption::InternalSwap(ReaderOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_, lhs_arena,
      &other->_impl_.channel_, rhs_arena
  );
  swap(_impl_.qos_profile_, other->_impl_.qos_profile_);
  swap(_impl_.pending_queue_size_, other->_impl_.pending_queue_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReaderOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fcomponent_5fconf_2eproto[0]);
}

// ===================================================================

class ComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flag_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ComponentConfig::ComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ComponentConfig)
}
ComponentConfig::ComponentConfig(const ComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.readers_){from._impl_.readers_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.config_file_path_){}
    , decltype(_impl_.flag_file_path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.config_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_config_file_path()) {
    _impl_.config_file_path_.Set(from._internal_config_file_path(), 
      GetArenaForAllocation());
  }
  _impl_.flag_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_flag_file_path()) {
    _impl_.flag_file_path_.Set(from._internal_flag_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ComponentConfig)
}

inline void ComponentConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.readers_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.config_file_path_){}
    , decltype(_impl_.flag_file_path_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentConfig::~ComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ComponentConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.readers_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.config_file_path_.Destroy();
  _impl_.flag_file_path_.Destroy();
}

void ComponentConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ComponentConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.readers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.config_file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.flag_file_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ComponentConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string config_file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_config_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ComponentConfig.config_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string flag_file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flag_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.ComponentConfig.flag_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.ReaderOption readers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ComponentConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_file_path().data(), static_cast<int>(this->_internal_config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.config_file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_file_path(), target);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_flag_file_path().data(), static_cast<int>(this->_internal_flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.flag_file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_flag_file_path(), target);
  }

  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_readers_size()); i < n; i++) {
    const auto& repfield = this->_internal_readers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ComponentConfig)
  return target;
}

size_t ComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ComponentConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  total_size += 1UL * this->_internal_readers_size();
  for (const auto& msg : this->_impl_.readers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string config_file_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_file_path());
    }

    // optional string flag_file_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flag_file_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComponentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentConfig::GetClassData() const { return &_class_data_; }

void ComponentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComponentConfig *>(to)->MergeFrom(
      static_cast<const ComponentConfig &>(from));
}


void ComponentConfig::MergeFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.readers_.MergeFrom(from._impl_.readers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_config_file_path(from._internal_config_file_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_flag_file_path(from._internal_flag_file_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentConfig::CopyFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentConfig::IsInitialized() const {
  return true;
}

void ComponentConfig::InternalSwap(ComponentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.readers_.InternalSwap(&other->_impl_.readers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_file_path_, lhs_arena,
      &other->_impl_.config_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_file_path_, lhs_arena,
      &other->_impl_.flag_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fcomponent_5fconf_2eproto[1]);
}

// ===================================================================

class TimerComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TimerComponentConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flag_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TimerComponentConfig::TimerComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.TimerComponentConfig)
}
TimerComponentConfig::TimerComponentConfig(const TimerComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.config_file_path_){}
    , decltype(_impl_.flag_file_path_){}
    , decltype(_impl_.interval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.config_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_config_file_path()) {
    _impl_.config_file_path_.Set(from._internal_config_file_path(), 
      GetArenaForAllocation());
  }
  _impl_.flag_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_flag_file_path()) {
    _impl_.flag_file_path_.Set(from._internal_flag_file_path(), 
      GetArenaForAllocation());
  }
  _impl_.interval_ = from._impl_.interval_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TimerComponentConfig)
}

inline void TimerComponentConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.config_file_path_){}
    , decltype(_impl_.flag_file_path_){}
    , decltype(_impl_.interval_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimerComponentConfig::~TimerComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TimerComponentConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimerComponentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.config_file_path_.Destroy();
  _impl_.flag_file_path_.Destroy();
}

void TimerComponentConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimerComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TimerComponentConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.config_file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.flag_file_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.interval_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimerComponentConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.TimerComponentConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string config_file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_config_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.TimerComponentConfig.config_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string flag_file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flag_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_interval(&has_bits);
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimerComponentConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TimerComponentConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_file_path().data(), static_cast<int>(this->_internal_config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.config_file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_file_path(), target);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_flag_file_path().data(), static_cast<int>(this->_internal_flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_flag_file_path(), target);
  }

  // optional uint32 interval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TimerComponentConfig)
  return target;
}

size_t TimerComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TimerComponentConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string config_file_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_file_path());
    }

    // optional string flag_file_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flag_file_path());
    }

    // optional uint32 interval = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_interval());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimerComponentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimerComponentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimerComponentConfig::GetClassData() const { return &_class_data_; }

void TimerComponentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimerComponentConfig *>(to)->MergeFrom(
      static_cast<const TimerComponentConfig &>(from));
}


void TimerComponentConfig::MergeFrom(const TimerComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TimerComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_config_file_path(from._internal_config_file_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_flag_file_path(from._internal_flag_file_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.interval_ = from._impl_.interval_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimerComponentConfig::CopyFrom(const TimerComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TimerComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerComponentConfig::IsInitialized() const {
  return true;
}

void TimerComponentConfig::InternalSwap(TimerComponentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_file_path_, lhs_arena,
      &other->_impl_.config_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_file_path_, lhs_arena,
      &other->_impl_.flag_file_path_, rhs_arena
  );
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerComponentConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fcomponent_5fconf_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ReaderOption*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ReaderOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ReaderOption >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ComponentConfig*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::ComponentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ComponentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::TimerComponentConfig*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::TimerComponentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::TimerComponentConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
