// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/scheduler_conf.proto

#include "cyber/proto/scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace cyber {
namespace proto {
PROTOBUF_CONSTEXPR InnerThread::InnerThread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpuset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prio_)*/1u} {}
struct InnerThreadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerThreadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerThreadDefaultTypeInternal() {}
  union {
    InnerThread _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerThreadDefaultTypeInternal _InnerThread_default_instance_;
PROTOBUF_CONSTEXPR SchedulerConf::SchedulerConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threads_)*/{}
  , /*decltype(_impl_.policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_level_cpuset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.classic_conf_)*/nullptr
  , /*decltype(_impl_.choreography_conf_)*/nullptr
  , /*decltype(_impl_.routine_num_)*/0u
  , /*decltype(_impl_.default_proc_num_)*/0u} {}
struct SchedulerConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedulerConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedulerConfDefaultTypeInternal() {}
  union {
    SchedulerConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedulerConfDefaultTypeInternal _SchedulerConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_cyber_2fproto_2fscheduler_5fconf_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2fscheduler_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2fscheduler_5fconf_2eproto = nullptr;

const uint32_t TableStruct_cyber_2fproto_2fscheduler_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _impl_.cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _impl_.prio_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.routine_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.default_proc_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.process_level_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.threads_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.classic_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _impl_.choreography_conf_),
  0,
  4,
  5,
  1,
  ~0u,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::cyber::proto::InnerThread)},
  { 14, 27, -1, sizeof(::apollo::cyber::proto::SchedulerConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::cyber::proto::_InnerThread_default_instance_._instance,
  &::apollo::cyber::proto::_SchedulerConf_default_instance_._instance,
};

const char descriptor_table_protodef_cyber_2fproto_2fscheduler_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n cyber/proto/scheduler_conf.proto\022\022apol"
  "lo.cyber.proto\032\036cyber/proto/classic_conf"
  ".proto\032#cyber/proto/choreography_conf.pr"
  "oto\"L\n\013InnerThread\022\014\n\004name\030\001 \001(\t\022\016\n\006cpus"
  "et\030\002 \001(\t\022\016\n\006policy\030\003 \001(\t\022\017\n\004prio\030\004 \001(\r:\001"
  "1\"\226\002\n\rSchedulerConf\022\016\n\006policy\030\001 \001(\t\022\023\n\013r"
  "outine_num\030\002 \001(\r\022\030\n\020default_proc_num\030\003 \001"
  "(\r\022\034\n\024process_level_cpuset\030\004 \001(\t\0220\n\007thre"
  "ads\030\005 \003(\0132\037.apollo.cyber.proto.InnerThre"
  "ad\0225\n\014classic_conf\030\006 \001(\0132\037.apollo.cyber."
  "proto.ClassicConf\022\?\n\021choreography_conf\030\007"
  " \001(\0132$.apollo.cyber.proto.ChoreographyCo"
  "nf"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_deps[2] = {
  &::descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto,
  &::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto,
};
static ::_pbi::once_flag descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto = {
    false, false, 482, descriptor_table_protodef_cyber_2fproto_2fscheduler_5fconf_2eproto,
    "cyber/proto/scheduler_conf.proto",
    &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_once, descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_cyber_2fproto_2fscheduler_5fconf_2eproto::offsets,
    file_level_metadata_cyber_2fproto_2fscheduler_5fconf_2eproto, file_level_enum_descriptors_cyber_2fproto_2fscheduler_5fconf_2eproto,
    file_level_service_descriptors_cyber_2fproto_2fscheduler_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_getter() {
  return &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cyber_2fproto_2fscheduler_5fconf_2eproto(&descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class InnerThread::_Internal {
 public:
  using HasBits = decltype(std::declval<InnerThread>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

InnerThread::InnerThread(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.InnerThread)
}
InnerThread::InnerThread(const InnerThread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cpuset_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.prio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpuset()) {
    _impl_.cpuset_.Set(from._internal_cpuset(), 
      GetArenaForAllocation());
  }
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_policy()) {
    _impl_.policy_.Set(from._internal_policy(), 
      GetArenaForAllocation());
  }
  _impl_.prio_ = from._impl_.prio_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.InnerThread)
}

inline void InnerThread::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cpuset_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.prio_){1u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InnerThread::~InnerThread() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.InnerThread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerThread::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.cpuset_.Destroy();
  _impl_.policy_.Destroy();
}

void InnerThread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InnerThread::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.InnerThread)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.policy_.ClearNonDefaultToEmpty();
    }
    _impl_.prio_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerThread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.InnerThread.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cpuset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpuset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.InnerThread.cpuset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.InnerThread.policy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prio = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prio(&has_bits);
          _impl_.prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerThread::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.InnerThread)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string cpuset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpuset().data(), static_cast<int>(this->_internal_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.cpuset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpuset(), target);
  }

  // optional string policy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.policy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_policy(), target);
  }

  // optional uint32 prio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.InnerThread)
  return target;
}

size_t InnerThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.InnerThread)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string cpuset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpuset());
    }

    // optional string policy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy());
    }

    // optional uint32 prio = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerThread::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerThread::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerThread::GetClassData() const { return &_class_data_; }

void InnerThread::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerThread *>(to)->MergeFrom(
      static_cast<const InnerThread &>(from));
}


void InnerThread::MergeFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.InnerThread)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cpuset(from._internal_cpuset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_policy(from._internal_policy());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.prio_ = from._impl_.prio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerThread::CopyFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.InnerThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerThread::IsInitialized() const {
  return true;
}

void InnerThread::InternalSwap(InnerThread* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpuset_, lhs_arena,
      &other->_impl_.cpuset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.policy_, lhs_arena,
      &other->_impl_.policy_, rhs_arena
  );
  swap(_impl_.prio_, other->_impl_.prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerThread::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fscheduler_5fconf_2eproto[0]);
}

// ===================================================================

class SchedulerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<SchedulerConf>()._impl_._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routine_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_proc_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_process_level_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ClassicConf& classic_conf(const SchedulerConf* msg);
  static void set_has_classic_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::ChoreographyConf& choreography_conf(const SchedulerConf* msg);
  static void set_has_choreography_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ClassicConf&
SchedulerConf::_Internal::classic_conf(const SchedulerConf* msg) {
  return *msg->_impl_.classic_conf_;
}
const ::apollo::cyber::proto::ChoreographyConf&
SchedulerConf::_Internal::choreography_conf(const SchedulerConf* msg) {
  return *msg->_impl_.choreography_conf_;
}
void SchedulerConf::clear_classic_conf() {
  if (_impl_.classic_conf_ != nullptr) _impl_.classic_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SchedulerConf::clear_choreography_conf() {
  if (_impl_.choreography_conf_ != nullptr) _impl_.choreography_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SchedulerConf::SchedulerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.SchedulerConf)
}
SchedulerConf::SchedulerConf(const SchedulerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){from._impl_.threads_}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.process_level_cpuset_){}
    , decltype(_impl_.classic_conf_){nullptr}
    , decltype(_impl_.choreography_conf_){nullptr}
    , decltype(_impl_.routine_num_){}
    , decltype(_impl_.default_proc_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_policy()) {
    _impl_.policy_.Set(from._internal_policy(), 
      GetArenaForAllocation());
  }
  _impl_.process_level_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_level_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_process_level_cpuset()) {
    _impl_.process_level_cpuset_.Set(from._internal_process_level_cpuset(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_classic_conf()) {
    _impl_.classic_conf_ = new ::apollo::cyber::proto::ClassicConf(*from._impl_.classic_conf_);
  }
  if (from._internal_has_choreography_conf()) {
    _impl_.choreography_conf_ = new ::apollo::cyber::proto::ChoreographyConf(*from._impl_.choreography_conf_);
  }
  ::memcpy(&_impl_.routine_num_, &from._impl_.routine_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_proc_num_) -
    reinterpret_cast<char*>(&_impl_.routine_num_)) + sizeof(_impl_.default_proc_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SchedulerConf)
}

inline void SchedulerConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){arena}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.process_level_cpuset_){}
    , decltype(_impl_.classic_conf_){nullptr}
    , decltype(_impl_.choreography_conf_){nullptr}
    , decltype(_impl_.routine_num_){0u}
    , decltype(_impl_.default_proc_num_){0u}
  };
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.process_level_cpuset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_level_cpuset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SchedulerConf::~SchedulerConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SchedulerConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchedulerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threads_.~RepeatedPtrField();
  _impl_.policy_.Destroy();
  _impl_.process_level_cpuset_.Destroy();
  if (this != internal_default_instance()) delete _impl_.classic_conf_;
  if (this != internal_default_instance()) delete _impl_.choreography_conf_;
}

void SchedulerConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchedulerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SchedulerConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threads_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.process_level_cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.classic_conf_ != nullptr);
      _impl_.classic_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.choreography_conf_ != nullptr);
      _impl_.choreography_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.routine_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.default_proc_num_) -
        reinterpret_cast<char*>(&_impl_.routine_num_)) + sizeof(_impl_.default_proc_num_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulerConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedulerConf.policy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 routine_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_routine_num(&has_bits);
          _impl_.routine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_proc_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_default_proc_num(&has_bits);
          _impl_.default_proc_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string process_level_cpuset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_process_level_cpuset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.InnerThread threads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_classic_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_choreography_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchedulerConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SchedulerConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy(), target);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_routine_num(), target);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_default_proc_num(), target);
  }

  // optional string process_level_cpuset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_level_cpuset().data(), static_cast<int>(this->_internal_process_level_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_process_level_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threads_size()); i < n; i++) {
    const auto& repfield = this->_internal_threads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::classic_conf(this),
        _Internal::classic_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::choreography_conf(this),
        _Internal::choreography_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SchedulerConf)
  return target;
}

size_t SchedulerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SchedulerConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->_impl_.threads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string policy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy());
    }

    // optional string process_level_cpuset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_level_cpuset());
    }

    // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classic_conf_);
    }

    // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.choreography_conf_);
    }

    // optional uint32 routine_num = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_routine_num());
    }

    // optional uint32 default_proc_num = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_default_proc_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchedulerConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchedulerConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchedulerConf::GetClassData() const { return &_class_data_; }

void SchedulerConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SchedulerConf *>(to)->MergeFrom(
      static_cast<const SchedulerConf &>(from));
}


void SchedulerConf::MergeFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.threads_.MergeFrom(from._impl_.threads_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_policy(from._internal_policy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_process_level_cpuset(from._internal_process_level_cpuset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_classic_conf()->::apollo::cyber::proto::ClassicConf::MergeFrom(from._internal_classic_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_choreography_conf()->::apollo::cyber::proto::ChoreographyConf::MergeFrom(from._internal_choreography_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.routine_num_ = from._impl_.routine_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.default_proc_num_ = from._impl_.default_proc_num_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchedulerConf::CopyFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerConf::IsInitialized() const {
  if (_internal_has_classic_conf()) {
    if (!_impl_.classic_conf_->IsInitialized()) return false;
  }
  return true;
}

void SchedulerConf::InternalSwap(SchedulerConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.threads_.InternalSwap(&other->_impl_.threads_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.policy_, lhs_arena,
      &other->_impl_.policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_level_cpuset_, lhs_arena,
      &other->_impl_.process_level_cpuset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchedulerConf, _impl_.default_proc_num_)
      + sizeof(SchedulerConf::_impl_.default_proc_num_)
      - PROTOBUF_FIELD_OFFSET(SchedulerConf, _impl_.classic_conf_)>(
          reinterpret_cast<char*>(&_impl_.classic_conf_),
          reinterpret_cast<char*>(&other->_impl_.classic_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulerConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_getter, &descriptor_table_cyber_2fproto_2fscheduler_5fconf_2eproto_once,
      file_level_metadata_cyber_2fproto_2fscheduler_5fconf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::InnerThread*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::InnerThread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::InnerThread >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SchedulerConf*
Arena::CreateMaybeMessage< ::apollo::cyber::proto::SchedulerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::SchedulerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
