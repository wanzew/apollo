// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frole_5fattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frole_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cyber/proto/qos_profile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2frole_5fattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2frole_5fattributes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class RoleAttributes;
struct RoleAttributesDefaultTypeInternal;
extern RoleAttributesDefaultTypeInternal _RoleAttributes_default_instance_;
class SocketAddr;
struct SocketAddrDefaultTypeInternal;
extern SocketAddrDefaultTypeInternal _SocketAddr_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::RoleAttributes* Arena::CreateMaybeMessage<::apollo::cyber::proto::RoleAttributes>(Arena*);
template<> ::apollo::cyber::proto::SocketAddr* Arena::CreateMaybeMessage<::apollo::cyber::proto::SocketAddr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SocketAddr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SocketAddr) */ {
 public:
  inline SocketAddr() : SocketAddr(nullptr) {}
  ~SocketAddr() override;
  explicit PROTOBUF_CONSTEXPR SocketAddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketAddr(const SocketAddr& from);
  SocketAddr(SocketAddr&& from) noexcept
    : SocketAddr() {
    *this = ::std::move(from);
  }

  inline SocketAddr& operator=(const SocketAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketAddr& operator=(SocketAddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SocketAddr& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketAddr* internal_default_instance() {
    return reinterpret_cast<const SocketAddr*>(
               &_SocketAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SocketAddr& a, SocketAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketAddr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketAddr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SocketAddr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SocketAddr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketAddr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SocketAddr";
  }
  protected:
  explicit SocketAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SocketAddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fproto_2frole_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class RoleAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.RoleAttributes) */ {
 public:
  inline RoleAttributes() : RoleAttributes(nullptr) {}
  ~RoleAttributes() override;
  explicit PROTOBUF_CONSTEXPR RoleAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleAttributes(const RoleAttributes& from);
  RoleAttributes(RoleAttributes&& from) noexcept
    : RoleAttributes() {
    *this = ::std::move(from);
  }

  inline RoleAttributes& operator=(const RoleAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAttributes& operator=(RoleAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleAttributes* internal_default_instance() {
    return reinterpret_cast<const RoleAttributes*>(
               &_RoleAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoleAttributes& a, RoleAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.RoleAttributes";
  }
  protected:
  explicit RoleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 1,
    kHostIpFieldNumber = 2,
    kNodeNameFieldNumber = 4,
    kChannelNameFieldNumber = 6,
    kMessageTypeFieldNumber = 8,
    kProtoDescFieldNumber = 9,
    kServiceNameFieldNumber = 13,
    kQosProfileFieldNumber = 11,
    kSocketAddrFieldNumber = 12,
    kNodeIdFieldNumber = 5,
    kChannelIdFieldNumber = 7,
    kIdFieldNumber = 10,
    kServiceIdFieldNumber = 14,
    kProcessIdFieldNumber = 3,
  };
  // optional string host_name = 1;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional string host_ip = 2;
  bool has_host_ip() const;
  private:
  bool _internal_has_host_ip() const;
  public:
  void clear_host_ip();
  const std::string& host_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_ip();
  PROTOBUF_NODISCARD std::string* release_host_ip();
  void set_allocated_host_ip(std::string* host_ip);
  private:
  const std::string& _internal_host_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_ip(const std::string& value);
  std::string* _internal_mutable_host_ip();
  public:

  // optional string node_name = 4;
  bool has_node_name() const;
  private:
  bool _internal_has_node_name() const;
  public:
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // optional string channel_name = 6;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional string message_type = 8;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_NODISCARD std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // optional bytes proto_desc = 9;
  bool has_proto_desc() const;
  private:
  bool _internal_has_proto_desc() const;
  public:
  void clear_proto_desc();
  const std::string& proto_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_desc();
  PROTOBUF_NODISCARD std::string* release_proto_desc();
  void set_allocated_proto_desc(std::string* proto_desc);
  private:
  const std::string& _internal_proto_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_desc(const std::string& value);
  std::string* _internal_mutable_proto_desc();
  public:

  // optional string service_name = 13;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  bool has_qos_profile() const;
  private:
  bool _internal_has_qos_profile() const;
  public:
  void clear_qos_profile();
  const ::apollo::cyber::proto::QosProfile& qos_profile() const;
  PROTOBUF_NODISCARD ::apollo::cyber::proto::QosProfile* release_qos_profile();
  ::apollo::cyber::proto::QosProfile* mutable_qos_profile();
  void set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile);
  private:
  const ::apollo::cyber::proto::QosProfile& _internal_qos_profile() const;
  ::apollo::cyber::proto::QosProfile* _internal_mutable_qos_profile();
  public:
  void unsafe_arena_set_allocated_qos_profile(
      ::apollo::cyber::proto::QosProfile* qos_profile);
  ::apollo::cyber::proto::QosProfile* unsafe_arena_release_qos_profile();

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  bool has_socket_addr() const;
  private:
  bool _internal_has_socket_addr() const;
  public:
  void clear_socket_addr();
  const ::apollo::cyber::proto::SocketAddr& socket_addr() const;
  PROTOBUF_NODISCARD ::apollo::cyber::proto::SocketAddr* release_socket_addr();
  ::apollo::cyber::proto::SocketAddr* mutable_socket_addr();
  void set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr);
  private:
  const ::apollo::cyber::proto::SocketAddr& _internal_socket_addr() const;
  ::apollo::cyber::proto::SocketAddr* _internal_mutable_socket_addr();
  public:
  void unsafe_arena_set_allocated_socket_addr(
      ::apollo::cyber::proto::SocketAddr* socket_addr);
  ::apollo::cyber::proto::SocketAddr* unsafe_arena_release_socket_addr();

  // optional uint64 node_id = 5;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  uint64_t node_id() const;
  void set_node_id(uint64_t value);
  private:
  uint64_t _internal_node_id() const;
  void _internal_set_node_id(uint64_t value);
  public:

  // optional uint64 channel_id = 7;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional uint64 id = 10;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 service_id = 14;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  uint64_t service_id() const;
  void set_service_id(uint64_t value);
  private:
  uint64_t _internal_service_id() const;
  void _internal_set_service_id(uint64_t value);
  public:

  // optional int32 process_id = 3;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  int32_t process_id() const;
  void set_process_id(int32_t value);
  private:
  int32_t _internal_process_id() const;
  void _internal_set_process_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.RoleAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::apollo::cyber::proto::QosProfile* qos_profile_;
    ::apollo::cyber::proto::SocketAddr* socket_addr_;
    uint64_t node_id_;
    uint64_t channel_id_;
    uint64_t id_;
    uint64_t service_id_;
    int32_t process_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cyber_2fproto_2frole_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SocketAddr

// optional string ip = 1;
inline bool SocketAddr::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SocketAddr::has_ip() const {
  return _internal_has_ip();
}
inline void SocketAddr::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SocketAddr::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SocketAddr::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.ip)
}
inline std::string* SocketAddr::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SocketAddr.ip)
  return _s;
}
inline const std::string& SocketAddr::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void SocketAddr::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* SocketAddr::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* SocketAddr::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SocketAddr.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SocketAddr::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SocketAddr.ip)
}

// optional uint32 port = 2;
inline bool SocketAddr::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SocketAddr::has_port() const {
  return _internal_has_port();
}
inline void SocketAddr::clear_port() {
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SocketAddr::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t SocketAddr::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.port)
  return _internal_port();
}
inline void SocketAddr::_internal_set_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}
inline void SocketAddr::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.port)
}

// -------------------------------------------------------------------

// RoleAttributes

// optional string host_name = 1;
inline bool RoleAttributes::_internal_has_host_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleAttributes::has_host_name() const {
  return _internal_has_host_name();
}
inline void RoleAttributes::clear_host_name() {
  _impl_.host_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleAttributes::host_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_host_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.host_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_name)
}
inline std::string* RoleAttributes::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_name)
  return _s;
}
inline const std::string& RoleAttributes::_internal_host_name() const {
  return _impl_.host_name_.Get();
}
inline void RoleAttributes::_internal_set_host_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.host_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_host_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.host_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_host_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.host_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_name_.IsDefault()) {
    _impl_.host_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.host_name_.SetAllocated(host_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_name_.IsDefault()) {
    _impl_.host_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_name)
}

// optional string host_ip = 2;
inline bool RoleAttributes::_internal_has_host_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleAttributes::has_host_ip() const {
  return _internal_has_host_ip();
}
inline void RoleAttributes::clear_host_ip() {
  _impl_.host_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleAttributes::host_ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_ip)
  return _internal_host_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_host_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.host_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline std::string* RoleAttributes::mutable_host_ip() {
  std::string* _s = _internal_mutable_host_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_ip)
  return _s;
}
inline const std::string& RoleAttributes::_internal_host_ip() const {
  return _impl_.host_ip_.Get();
}
inline void RoleAttributes::_internal_set_host_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.host_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_host_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.host_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_host_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_ip)
  if (!_internal_has_host_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.host_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_ip_.IsDefault()) {
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_host_ip(std::string* host_ip) {
  if (host_ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host_ip_.SetAllocated(host_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_ip_.IsDefault()) {
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_ip)
}

// optional int32 process_id = 3;
inline bool RoleAttributes::_internal_has_process_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RoleAttributes::has_process_id() const {
  return _internal_has_process_id();
}
inline void RoleAttributes::clear_process_id() {
  _impl_.process_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t RoleAttributes::_internal_process_id() const {
  return _impl_.process_id_;
}
inline int32_t RoleAttributes::process_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.process_id)
  return _internal_process_id();
}
inline void RoleAttributes::_internal_set_process_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.process_id_ = value;
}
inline void RoleAttributes::set_process_id(int32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.process_id)
}

// optional string node_name = 4;
inline bool RoleAttributes::_internal_has_node_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleAttributes::has_node_name() const {
  return _internal_has_node_name();
}
inline void RoleAttributes::clear_node_name() {
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleAttributes::node_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_node_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.node_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_name)
}
inline std::string* RoleAttributes::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.node_name)
  return _s;
}
inline const std::string& RoleAttributes::_internal_node_name() const {
  return _impl_.node_name_.Get();
}
inline void RoleAttributes::_internal_set_node_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.node_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_node_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.node_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_node_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.node_name)
  if (!_internal_has_node_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.node_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.node_name_.SetAllocated(node_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.node_name)
}

// optional uint64 node_id = 5;
inline bool RoleAttributes::_internal_has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleAttributes::has_node_id() const {
  return _internal_has_node_id();
}
inline void RoleAttributes::clear_node_id() {
  _impl_.node_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t RoleAttributes::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint64_t RoleAttributes::node_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_id)
  return _internal_node_id();
}
inline void RoleAttributes::_internal_set_node_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.node_id_ = value;
}
inline void RoleAttributes::set_node_id(uint64_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_id)
}

// optional string channel_name = 6;
inline bool RoleAttributes::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleAttributes::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void RoleAttributes::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoleAttributes::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline std::string* RoleAttributes::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.channel_name)
  return _s;
}
inline const std::string& RoleAttributes::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void RoleAttributes::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.channel_name)
}

// optional uint64 channel_id = 7;
inline bool RoleAttributes::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoleAttributes::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void RoleAttributes::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t RoleAttributes::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t RoleAttributes::channel_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_id)
  return _internal_channel_id();
}
inline void RoleAttributes::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.channel_id_ = value;
}
inline void RoleAttributes::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_id)
}

// optional string message_type = 8;
inline bool RoleAttributes::_internal_has_message_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleAttributes::has_message_type() const {
  return _internal_has_message_type();
}
inline void RoleAttributes::clear_message_type() {
  _impl_.message_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RoleAttributes::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_message_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.message_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.message_type)
}
inline std::string* RoleAttributes::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.message_type)
  return _s;
}
inline const std::string& RoleAttributes::_internal_message_type() const {
  return _impl_.message_type_.Get();
}
inline void RoleAttributes::_internal_set_message_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_message_type() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.message_type_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.message_type)
  if (!_internal_has_message_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.message_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_type_.IsDefault()) {
    _impl_.message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.message_type_.SetAllocated(message_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_type_.IsDefault()) {
    _impl_.message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.message_type)
}

// optional bytes proto_desc = 9;
inline bool RoleAttributes::_internal_has_proto_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleAttributes::has_proto_desc() const {
  return _internal_has_proto_desc();
}
inline void RoleAttributes::clear_proto_desc() {
  _impl_.proto_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& RoleAttributes::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.proto_desc)
  return _internal_proto_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_proto_desc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.proto_desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline std::string* RoleAttributes::mutable_proto_desc() {
  std::string* _s = _internal_mutable_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.proto_desc)
  return _s;
}
inline const std::string& RoleAttributes::_internal_proto_desc() const {
  return _impl_.proto_desc_.Get();
}
inline void RoleAttributes::_internal_set_proto_desc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.proto_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_proto_desc() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.proto_desc_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.proto_desc)
  if (!_internal_has_proto_desc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.proto_desc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_desc_.IsDefault()) {
    _impl_.proto_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_proto_desc(std::string* proto_desc) {
  if (proto_desc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.proto_desc_.SetAllocated(proto_desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_desc_.IsDefault()) {
    _impl_.proto_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.proto_desc)
}

// optional uint64 id = 10;
inline bool RoleAttributes::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RoleAttributes::has_id() const {
  return _internal_has_id();
}
inline void RoleAttributes::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t RoleAttributes::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RoleAttributes::id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.id)
  return _internal_id();
}
inline void RoleAttributes::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.id_ = value;
}
inline void RoleAttributes::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.id)
}

// optional .apollo.cyber.proto.QosProfile qos_profile = 11;
inline bool RoleAttributes::_internal_has_qos_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qos_profile_ != nullptr);
  return value;
}
inline bool RoleAttributes::has_qos_profile() const {
  return _internal_has_qos_profile();
}
inline const ::apollo::cyber::proto::QosProfile& RoleAttributes::_internal_qos_profile() const {
  const ::apollo::cyber::proto::QosProfile* p = _impl_.qos_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::QosProfile&>(
      ::apollo::cyber::proto::_QosProfile_default_instance_);
}
inline const ::apollo::cyber::proto::QosProfile& RoleAttributes::qos_profile() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.qos_profile)
  return _internal_qos_profile();
}
inline void RoleAttributes::unsafe_arena_set_allocated_qos_profile(
    ::apollo::cyber::proto::QosProfile* qos_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qos_profile_);
  }
  _impl_.qos_profile_ = qos_profile;
  if (qos_profile) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.RoleAttributes.qos_profile)
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::release_qos_profile() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::cyber::proto::QosProfile* temp = _impl_.qos_profile_;
  _impl_.qos_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::unsafe_arena_release_qos_profile() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.qos_profile)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::cyber::proto::QosProfile* temp = _impl_.qos_profile_;
  _impl_.qos_profile_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::_internal_mutable_qos_profile() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.qos_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::QosProfile>(GetArenaForAllocation());
    _impl_.qos_profile_ = p;
  }
  return _impl_.qos_profile_;
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::mutable_qos_profile() {
  ::apollo::cyber::proto::QosProfile* _msg = _internal_mutable_qos_profile();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.qos_profile)
  return _msg;
}
inline void RoleAttributes::set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qos_profile_);
  }
  if (qos_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile));
    if (message_arena != submessage_arena) {
      qos_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos_profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.qos_profile_ = qos_profile;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.qos_profile)
}

// optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
inline bool RoleAttributes::_internal_has_socket_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.socket_addr_ != nullptr);
  return value;
}
inline bool RoleAttributes::has_socket_addr() const {
  return _internal_has_socket_addr();
}
inline void RoleAttributes::clear_socket_addr() {
  if (_impl_.socket_addr_ != nullptr) _impl_.socket_addr_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::cyber::proto::SocketAddr& RoleAttributes::_internal_socket_addr() const {
  const ::apollo::cyber::proto::SocketAddr* p = _impl_.socket_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::SocketAddr&>(
      ::apollo::cyber::proto::_SocketAddr_default_instance_);
}
inline const ::apollo::cyber::proto::SocketAddr& RoleAttributes::socket_addr() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.socket_addr)
  return _internal_socket_addr();
}
inline void RoleAttributes::unsafe_arena_set_allocated_socket_addr(
    ::apollo::cyber::proto::SocketAddr* socket_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.socket_addr_);
  }
  _impl_.socket_addr_ = socket_addr;
  if (socket_addr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.RoleAttributes.socket_addr)
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::release_socket_addr() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::cyber::proto::SocketAddr* temp = _impl_.socket_addr_;
  _impl_.socket_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::unsafe_arena_release_socket_addr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.socket_addr)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::cyber::proto::SocketAddr* temp = _impl_.socket_addr_;
  _impl_.socket_addr_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::_internal_mutable_socket_addr() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.socket_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::SocketAddr>(GetArenaForAllocation());
    _impl_.socket_addr_ = p;
  }
  return _impl_.socket_addr_;
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::mutable_socket_addr() {
  ::apollo::cyber::proto::SocketAddr* _msg = _internal_mutable_socket_addr();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.socket_addr)
  return _msg;
}
inline void RoleAttributes::set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.socket_addr_;
  }
  if (socket_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(socket_addr);
    if (message_arena != submessage_arena) {
      socket_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socket_addr, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.socket_addr_ = socket_addr;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.socket_addr)
}

// optional string service_name = 13;
inline bool RoleAttributes::_internal_has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleAttributes::has_service_name() const {
  return _internal_has_service_name();
}
inline void RoleAttributes::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& RoleAttributes::service_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleAttributes::set_service_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_name)
}
inline std::string* RoleAttributes::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.service_name)
  return _s;
}
inline const std::string& RoleAttributes::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void RoleAttributes::_internal_set_service_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleAttributes::_internal_mutable_service_name() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleAttributes::release_service_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.service_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleAttributes::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.service_name)
}

// optional uint64 service_id = 14;
inline bool RoleAttributes::_internal_has_service_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RoleAttributes::has_service_id() const {
  return _internal_has_service_id();
}
inline void RoleAttributes::clear_service_id() {
  _impl_.service_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t RoleAttributes::_internal_service_id() const {
  return _impl_.service_id_;
}
inline uint64_t RoleAttributes::service_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_id)
  return _internal_service_id();
}
inline void RoleAttributes::_internal_set_service_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.service_id_ = value;
}
inline void RoleAttributes::set_service_id(uint64_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frole_5fattributes_2eproto
