// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/third_party_perception/proto/radar_obstacle.proto

#include "modules/third_party_perception/proto/radar_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace third_party_perception {
PROTOBUF_CONSTEXPR RadarObstacle::RadarObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relative_position_)*/nullptr
  , /*decltype(_impl_.relative_velocity_)*/nullptr
  , /*decltype(_impl_.absolute_position_)*/nullptr
  , /*decltype(_impl_.absolute_velocity_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.movable_)*/false
  , /*decltype(_impl_.rcs_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.moving_frames_count_)*/0} {}
struct RadarObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarObstacleDefaultTypeInternal() {}
  union {
    RadarObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarObstacleDefaultTypeInternal _RadarObstacle_default_instance_;
PROTOBUF_CONSTEXPR RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RadarObstacles_RadarObstacleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RadarObstacles::RadarObstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radar_obstacle_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0} {}
struct RadarObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarObstaclesDefaultTypeInternal() {}
  union {
    RadarObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarObstaclesDefaultTypeInternal _RadarObstacles_default_instance_;
}  // namespace third_party_perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto = nullptr;

const uint32_t TableStruct_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.relative_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.relative_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.rcs_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.movable_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.absolute_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.absolute_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacle, _impl_.moving_frames_count_),
  4,
  0,
  1,
  6,
  5,
  7,
  8,
  9,
  10,
  2,
  3,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles, _impl_.radar_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::third_party_perception::RadarObstacles, _impl_.error_code_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, -1, sizeof(::apollo::third_party_perception::RadarObstacle)},
  { 32, 40, -1, sizeof(::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse)},
  { 42, 51, -1, sizeof(::apollo::third_party_perception::RadarObstacles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::third_party_perception::_RadarObstacle_default_instance_._instance,
  &::apollo::third_party_perception::_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_._instance,
  &::apollo::third_party_perception::_RadarObstacles_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9modules/third_party_perception/proto/r"
  "adar_obstacle.proto\022\035apollo.third_party_"
  "perception\032%modules/common/proto/error_c"
  "ode.proto\032!modules/common/proto/header.p"
  "roto\0322modules/perception/proto/perceptio"
  "n_obstacle.proto\"\367\002\n\rRadarObstacle\022\n\n\002id"
  "\030\001 \001(\005\0223\n\021relative_position\030\002 \001(\0132\030.apol"
  "lo.perception.Point\0223\n\021relative_velocity"
  "\030\003 \001(\0132\030.apollo.perception.Point\022\013\n\003rcs\030"
  "\004 \001(\001\022\017\n\007movable\030\005 \001(\010\022\r\n\005width\030\006 \001(\001\022\016\n"
  "\006length\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\r\n\005theta\030\t"
  " \001(\001\0223\n\021absolute_position\030\n \001(\0132\030.apollo"
  ".perception.Point\0223\n\021absolute_velocity\030\013"
  " \001(\0132\030.apollo.perception.Point\022\r\n\005count\030"
  "\014 \001(\005\022\033\n\023moving_frames_count\030\r \001(\005\"\247\002\n\016R"
  "adarObstacles\022X\n\016radar_obstacle\030\001 \003(\0132@."
  "apollo.third_party_perception.RadarObsta"
  "cles.RadarObstacleEntry\022%\n\006header\030\002 \001(\0132"
  "\025.apollo.common.Header\0220\n\nerror_code\030\003 \001"
  "(\0162\030.apollo.common.ErrorCode:\002OK\032b\n\022Rada"
  "rObstacleEntry\022\013\n\003key\030\001 \001(\005\022;\n\005value\030\002 \001"
  "(\0132,.apollo.third_party_perception.Radar"
  "Obstacle:\0028\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto = {
    false, false, 892, descriptor_table_protodef_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto,
    "modules/third_party_perception/proto/radar_obstacle.proto",
    &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_once, descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto::offsets,
    file_level_metadata_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto, file_level_enum_descriptors_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto,
    file_level_service_descriptors_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_getter() {
  return &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto(&descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto);
namespace apollo {
namespace third_party_perception {

// ===================================================================

class RadarObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarObstacle>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::Point& relative_position(const RadarObstacle* msg);
  static void set_has_relative_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::Point& relative_velocity(const RadarObstacle* msg);
  static void set_has_relative_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rcs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_movable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::Point& absolute_position(const RadarObstacle* msg);
  static void set_has_absolute_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::Point& absolute_velocity(const RadarObstacle* msg);
  static void set_has_absolute_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_moving_frames_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::perception::Point&
RadarObstacle::_Internal::relative_position(const RadarObstacle* msg) {
  return *msg->_impl_.relative_position_;
}
const ::apollo::perception::Point&
RadarObstacle::_Internal::relative_velocity(const RadarObstacle* msg) {
  return *msg->_impl_.relative_velocity_;
}
const ::apollo::perception::Point&
RadarObstacle::_Internal::absolute_position(const RadarObstacle* msg) {
  return *msg->_impl_.absolute_position_;
}
const ::apollo::perception::Point&
RadarObstacle::_Internal::absolute_velocity(const RadarObstacle* msg) {
  return *msg->_impl_.absolute_velocity_;
}
void RadarObstacle::clear_relative_position() {
  if (_impl_.relative_position_ != nullptr) _impl_.relative_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RadarObstacle::clear_relative_velocity() {
  if (_impl_.relative_velocity_ != nullptr) _impl_.relative_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RadarObstacle::clear_absolute_position() {
  if (_impl_.absolute_position_ != nullptr) _impl_.absolute_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RadarObstacle::clear_absolute_velocity() {
  if (_impl_.absolute_velocity_ != nullptr) _impl_.absolute_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RadarObstacle::RadarObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.third_party_perception.RadarObstacle)
}
RadarObstacle::RadarObstacle(const RadarObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_position_){nullptr}
    , decltype(_impl_.relative_velocity_){nullptr}
    , decltype(_impl_.absolute_position_){nullptr}
    , decltype(_impl_.absolute_velocity_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.movable_){}
    , decltype(_impl_.rcs_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.moving_frames_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relative_position()) {
    _impl_.relative_position_ = new ::apollo::perception::Point(*from._impl_.relative_position_);
  }
  if (from._internal_has_relative_velocity()) {
    _impl_.relative_velocity_ = new ::apollo::perception::Point(*from._impl_.relative_velocity_);
  }
  if (from._internal_has_absolute_position()) {
    _impl_.absolute_position_ = new ::apollo::perception::Point(*from._impl_.absolute_position_);
  }
  if (from._internal_has_absolute_velocity()) {
    _impl_.absolute_velocity_ = new ::apollo::perception::Point(*from._impl_.absolute_velocity_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.moving_frames_count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.moving_frames_count_));
  // @@protoc_insertion_point(copy_constructor:apollo.third_party_perception.RadarObstacle)
}

inline void RadarObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_position_){nullptr}
    , decltype(_impl_.relative_velocity_){nullptr}
    , decltype(_impl_.absolute_position_){nullptr}
    , decltype(_impl_.absolute_velocity_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.movable_){false}
    , decltype(_impl_.rcs_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.moving_frames_count_){0}
  };
}

RadarObstacle::~RadarObstacle() {
  // @@protoc_insertion_point(destructor:apollo.third_party_perception.RadarObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.relative_position_;
  if (this != internal_default_instance()) delete _impl_.relative_velocity_;
  if (this != internal_default_instance()) delete _impl_.absolute_position_;
  if (this != internal_default_instance()) delete _impl_.absolute_velocity_;
}

void RadarObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.third_party_perception.RadarObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.relative_position_ != nullptr);
      _impl_.relative_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.relative_velocity_ != nullptr);
      _impl_.relative_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.absolute_position_ != nullptr);
      _impl_.absolute_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.absolute_velocity_ != nullptr);
      _impl_.absolute_velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.width_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.moving_frames_count_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.moving_frames_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point relative_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point relative_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_rcs(&has_bits);
          _impl_.rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool movable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_movable(&has_bits);
          _impl_.movable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point absolute_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point absolute_velocity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 moving_frames_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_moving_frames_count(&has_bits);
          _impl_.moving_frames_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.third_party_perception.RadarObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.perception.Point relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relative_position(this),
        _Internal::relative_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.Point relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::relative_velocity(this),
        _Internal::relative_velocity(this).GetCachedSize(), target, stream);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rcs(), target);
  }

  // optional bool movable = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_movable(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_length(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_height(), target);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_theta(), target);
  }

  // optional .apollo.perception.Point absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::absolute_position(this),
        _Internal::absolute_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.Point absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::absolute_velocity(this),
        _Internal::absolute_velocity(this).GetCachedSize(), target, stream);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_count(), target);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_moving_frames_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.third_party_perception.RadarObstacle)
  return target;
}

size_t RadarObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.third_party_perception.RadarObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.Point relative_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_position_);
    }

    // optional .apollo.perception.Point relative_velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_velocity_);
    }

    // optional .apollo.perception.Point absolute_position = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.absolute_position_);
    }

    // optional .apollo.perception.Point absolute_velocity = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.absolute_velocity_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional bool movable = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double rcs = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double length = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double theta = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 moving_frames_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moving_frames_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarObstacle::GetClassData() const { return &_class_data_; }

void RadarObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarObstacle *>(to)->MergeFrom(
      static_cast<const RadarObstacle &>(from));
}


void RadarObstacle::MergeFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.third_party_perception.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_relative_position()->::apollo::perception::Point::MergeFrom(from._internal_relative_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relative_velocity()->::apollo::perception::Point::MergeFrom(from._internal_relative_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_absolute_position()->::apollo::perception::Point::MergeFrom(from._internal_absolute_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_absolute_velocity()->::apollo::perception::Point::MergeFrom(from._internal_absolute_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.movable_ = from._impl_.movable_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rcs_ = from._impl_.rcs_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.width_ = from._impl_.width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.moving_frames_count_ = from._impl_.moving_frames_count_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarObstacle::CopyFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.third_party_perception.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacle::IsInitialized() const {
  return true;
}

void RadarObstacle::InternalSwap(RadarObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarObstacle, _impl_.moving_frames_count_)
      + sizeof(RadarObstacle::_impl_.moving_frames_count_)
      - PROTOBUF_FIELD_OFFSET(RadarObstacle, _impl_.relative_position_)>(
          reinterpret_cast<char*>(&_impl_.relative_position_),
          reinterpret_cast<char*>(&other->_impl_.relative_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_getter, &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto[0]);
}

// ===================================================================

RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse() {}
RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RadarObstacles_RadarObstacleEntry_DoNotUse::MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacles_RadarObstacleEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_getter, &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto[1]);
}

// ===================================================================

class RadarObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarObstacles>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const RadarObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
RadarObstacles::_Internal::header(const RadarObstacles* msg) {
  return *msg->_impl_.header_;
}
void RadarObstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RadarObstacles::RadarObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RadarObstacles::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.third_party_perception.RadarObstacles)
}
RadarObstacles::RadarObstacles(const RadarObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.radar_obstacle_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.radar_obstacle_.MergeFrom(from._impl_.radar_obstacle_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.third_party_perception.RadarObstacles)
}

inline void RadarObstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.radar_obstacle_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.error_code_){0}
  };
}

RadarObstacles::~RadarObstacles() {
  // @@protoc_insertion_point(destructor:apollo.third_party_perception.RadarObstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RadarObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radar_obstacle_.Destruct();
  _impl_.radar_obstacle_.~MapField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void RadarObstacles::ArenaDtor(void* object) {
  RadarObstacles* _this = reinterpret_cast< RadarObstacles* >(object);
  _this->_impl_.radar_obstacle_.Destruct();
}
void RadarObstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.third_party_perception.RadarObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.radar_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarObstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.radar_obstacle_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.third_party_perception.RadarObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  if (!this->_internal_radar_obstacle().empty()) {
    using MapType = ::_pb::Map<int32_t, ::apollo::third_party_perception::RadarObstacle>;
    using WireHelper = RadarObstacles_RadarObstacleEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_radar_obstacle();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.third_party_perception.RadarObstacles)
  return target;
}

size_t RadarObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.third_party_perception.RadarObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_radar_obstacle_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::third_party_perception::RadarObstacle >::const_iterator
      it = this->_internal_radar_obstacle().begin();
      it != this->_internal_radar_obstacle().end(); ++it) {
    total_size += RadarObstacles_RadarObstacleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarObstacles::GetClassData() const { return &_class_data_; }

void RadarObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarObstacles *>(to)->MergeFrom(
      static_cast<const RadarObstacles &>(from));
}


void RadarObstacles::MergeFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.third_party_perception.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.radar_obstacle_.MergeFrom(from._impl_.radar_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarObstacles::CopyFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.third_party_perception.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacles::IsInitialized() const {
  return true;
}

void RadarObstacles::InternalSwap(RadarObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.radar_obstacle_.InternalSwap(&other->_impl_.radar_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarObstacles, _impl_.error_code_)
      + sizeof(RadarObstacles::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RadarObstacles, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_getter, &descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace third_party_perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::third_party_perception::RadarObstacle*
Arena::CreateMaybeMessage< ::apollo::third_party_perception::RadarObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::third_party_perception::RadarObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::third_party_perception::RadarObstacles*
Arena::CreateMaybeMessage< ::apollo::third_party_perception::RadarObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::third_party_perception::RadarObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
