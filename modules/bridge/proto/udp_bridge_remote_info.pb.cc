// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/bridge/proto/udp_bridge_remote_info.proto

#include "modules/bridge/proto/udp_bridge_remote_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace bridge {
PROTOBUF_CONSTEXPR UDPBridgeSenderRemoteInfo::UDPBridgeSenderRemoteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remote_ip_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_port_)*/8900} {}
struct UDPBridgeSenderRemoteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDPBridgeSenderRemoteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDPBridgeSenderRemoteInfoDefaultTypeInternal() {}
  union {
    UDPBridgeSenderRemoteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDPBridgeSenderRemoteInfoDefaultTypeInternal _UDPBridgeSenderRemoteInfo_default_instance_;
PROTOBUF_CONSTEXPR UDPBridgeReceiverRemoteInfo::UDPBridgeReceiverRemoteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bind_port_)*/8500
  , /*decltype(_impl_.enable_timeout_)*/true} {}
struct UDPBridgeReceiverRemoteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDPBridgeReceiverRemoteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDPBridgeReceiverRemoteInfoDefaultTypeInternal() {}
  union {
    UDPBridgeReceiverRemoteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDPBridgeReceiverRemoteInfoDefaultTypeInternal _UDPBridgeReceiverRemoteInfo_default_instance_;
}  // namespace bridge
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = nullptr;

const uint32_t TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _impl_.remote_ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _impl_.remote_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _impl_.proto_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _impl_.topic_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _impl_.bind_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _impl_.proto_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _impl_.enable_timeout_),
  0,
  2,
  1,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::bridge::UDPBridgeSenderRemoteInfo)},
  { 12, 22, -1, sizeof(::apollo::bridge::UDPBridgeReceiverRemoteInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::bridge::_UDPBridgeSenderRemoteInfo_default_instance_._instance,
  &::apollo::bridge::_UDPBridgeReceiverRemoteInfo_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/bridge/proto/udp_bridge_remote"
  "_info.proto\022\rapollo.bridge\"v\n\031UDPBridgeS"
  "enderRemoteInfo\022\034\n\tremote_ip\030\001 \001(\t:\t127."
  "0.0.1\022\031\n\013remote_port\030\002 \001(\005:\0048900\022 \n\nprot"
  "o_name\030\003 \001(\t:\014ProtoMsgName\"\214\001\n\033UDPBridge"
  "ReceiverRemoteInfo\022\024\n\ntopic_name\030\001 \001(\t:\000"
  "\022\027\n\tbind_port\030\002 \001(\005:\0048500\022 \n\nproto_name\030"
  "\003 \001(\t:\014ProtoMsgName\022\034\n\016enable_timeout\030\004 "
  "\001(\010:\004true"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = {
    false, false, 329, descriptor_table_protodef_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto,
    "modules/bridge/proto/udp_bridge_remote_info.proto",
    &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto::offsets,
    file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto, file_level_enum_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto,
    file_level_service_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_getter() {
  return &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto(&descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto);
namespace apollo {
namespace bridge {

// ===================================================================

class UDPBridgeSenderRemoteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UDPBridgeSenderRemoteInfo>()._impl_._has_bits_);
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString UDPBridgeSenderRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_remote_ip_{{{"127.0.0.1", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString UDPBridgeSenderRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_proto_name_{{{"ProtoMsgName", 12}}, {nullptr}};
UDPBridgeSenderRemoteInfo::UDPBridgeSenderRemoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
}
UDPBridgeSenderRemoteInfo::UDPBridgeSenderRemoteInfo(const UDPBridgeSenderRemoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_ip_){}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.remote_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_ip_.InitDefault();
  if (from._internal_has_remote_ip()) {
    _impl_.remote_ip_.Set(from._internal_remote_ip(), 
      GetArenaForAllocation());
  }
  _impl_.proto_name_.InitDefault();
  if (from._internal_has_proto_name()) {
    _impl_.proto_name_.Set(from._internal_proto_name(), 
      GetArenaForAllocation());
  }
  _impl_.remote_port_ = from._impl_.remote_port_;
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
}

inline void UDPBridgeSenderRemoteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_ip_){}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.remote_port_){8900}
  };
  _impl_.remote_ip_.InitDefault();
  _impl_.proto_name_.InitDefault();
}

UDPBridgeSenderRemoteInfo::~UDPBridgeSenderRemoteInfo() {
  // @@protoc_insertion_point(destructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDPBridgeSenderRemoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_ip_.Destroy();
  _impl_.proto_name_.Destroy();
}

void UDPBridgeSenderRemoteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDPBridgeSenderRemoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.remote_ip_.ClearToDefault(::apollo::bridge::UDPBridgeSenderRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_remote_ip_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.proto_name_.ClearToDefault(::apollo::bridge::UDPBridgeSenderRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_proto_name_, GetArenaForAllocation());
       }
    _impl_.remote_port_ = 8900;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDPBridgeSenderRemoteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string remote_ip = 1 [default = "127.0.0.1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remote_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 remote_port = 2 [default = 8900];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remote_port(&has_bits);
          _impl_.remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string proto_name = 3 [default = "ProtoMsgName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDPBridgeSenderRemoteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string remote_ip = 1 [default = "127.0.0.1"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_ip().data(), static_cast<int>(this->_internal_remote_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_ip(), target);
  }

  // optional int32 remote_port = 2 [default = 8900];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_remote_port(), target);
  }

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.UDPBridgeSenderRemoteInfo)
  return target;
}

size_t UDPBridgeSenderRemoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string remote_ip = 1 [default = "127.0.0.1"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_ip());
    }

    // optional string proto_name = 3 [default = "ProtoMsgName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional int32 remote_port = 2 [default = 8900];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remote_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDPBridgeSenderRemoteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDPBridgeSenderRemoteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDPBridgeSenderRemoteInfo::GetClassData() const { return &_class_data_; }

void UDPBridgeSenderRemoteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDPBridgeSenderRemoteInfo *>(to)->MergeFrom(
      static_cast<const UDPBridgeSenderRemoteInfo &>(from));
}


void UDPBridgeSenderRemoteInfo::MergeFrom(const UDPBridgeSenderRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_remote_ip(from._internal_remote_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_name(from._internal_proto_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remote_port_ = from._impl_.remote_port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDPBridgeSenderRemoteInfo::CopyFrom(const UDPBridgeSenderRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPBridgeSenderRemoteInfo::IsInitialized() const {
  return true;
}

void UDPBridgeSenderRemoteInfo::InternalSwap(UDPBridgeSenderRemoteInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_ip_, lhs_arena,
      &other->_impl_.remote_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_name_, lhs_arena,
      &other->_impl_.proto_name_, rhs_arena
  );
  swap(_impl_.remote_port_, other->_impl_.remote_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UDPBridgeSenderRemoteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_getter, &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once,
      file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[0]);
}

// ===================================================================

class UDPBridgeReceiverRemoteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UDPBridgeReceiverRemoteInfo>()._impl_._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bind_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString UDPBridgeReceiverRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_proto_name_{{{"ProtoMsgName", 12}}, {nullptr}};
UDPBridgeReceiverRemoteInfo::UDPBridgeReceiverRemoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
}
UDPBridgeReceiverRemoteInfo::UDPBridgeReceiverRemoteInfo(const UDPBridgeReceiverRemoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_name_){}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.bind_port_){}
    , decltype(_impl_.enable_timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic_name()) {
    _impl_.topic_name_.Set(from._internal_topic_name(), 
      GetArenaForAllocation());
  }
  _impl_.proto_name_.InitDefault();
  if (from._internal_has_proto_name()) {
    _impl_.proto_name_.Set(from._internal_proto_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bind_port_, &from._impl_.bind_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_timeout_) -
    reinterpret_cast<char*>(&_impl_.bind_port_)) + sizeof(_impl_.enable_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
}

inline void UDPBridgeReceiverRemoteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_name_){}
    , decltype(_impl_.proto_name_){}
    , decltype(_impl_.bind_port_){8500}
    , decltype(_impl_.enable_timeout_){true}
  };
  _impl_.topic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_name_.InitDefault();
}

UDPBridgeReceiverRemoteInfo::~UDPBridgeReceiverRemoteInfo() {
  // @@protoc_insertion_point(destructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDPBridgeReceiverRemoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_name_.Destroy();
  _impl_.proto_name_.Destroy();
}

void UDPBridgeReceiverRemoteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDPBridgeReceiverRemoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.topic_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.proto_name_.ClearToDefault(::apollo::bridge::UDPBridgeReceiverRemoteInfo::Impl_::_i_give_permission_to_break_this_code_default_proto_name_, GetArenaForAllocation());
       }
    _impl_.bind_port_ = 8500;
    _impl_.enable_timeout_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDPBridgeReceiverRemoteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string topic_name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 bind_port = 2 [default = 8500];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bind_port(&has_bits);
          _impl_.bind_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string proto_name = 3 [default = "ProtoMsgName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_timeout = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_timeout(&has_bits);
          _impl_.enable_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDPBridgeReceiverRemoteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string topic_name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // optional int32 bind_port = 2 [default = 8500];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bind_port(), target);
  }

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_name(), target);
  }

  // optional bool enable_timeout = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  return target;
}

size_t UDPBridgeReceiverRemoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string topic_name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic_name());
    }

    // optional string proto_name = 3 [default = "ProtoMsgName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional int32 bind_port = 2 [default = 8500];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bind_port());
    }

    // optional bool enable_timeout = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDPBridgeReceiverRemoteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDPBridgeReceiverRemoteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDPBridgeReceiverRemoteInfo::GetClassData() const { return &_class_data_; }

void UDPBridgeReceiverRemoteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDPBridgeReceiverRemoteInfo *>(to)->MergeFrom(
      static_cast<const UDPBridgeReceiverRemoteInfo &>(from));
}


void UDPBridgeReceiverRemoteInfo::MergeFrom(const UDPBridgeReceiverRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_topic_name(from._internal_topic_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_name(from._internal_proto_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bind_port_ = from._impl_.bind_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_timeout_ = from._impl_.enable_timeout_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDPBridgeReceiverRemoteInfo::CopyFrom(const UDPBridgeReceiverRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPBridgeReceiverRemoteInfo::IsInitialized() const {
  return true;
}

void UDPBridgeReceiverRemoteInfo::InternalSwap(UDPBridgeReceiverRemoteInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_name_, lhs_arena,
      &other->_impl_.topic_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_name_, lhs_arena,
      &other->_impl_.proto_name_, rhs_arena
  );
  swap(_impl_.bind_port_, other->_impl_.bind_port_);
  swap(_impl_.enable_timeout_, other->_impl_.enable_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UDPBridgeReceiverRemoteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_getter, &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once,
      file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::bridge::UDPBridgeSenderRemoteInfo*
Arena::CreateMaybeMessage< ::apollo::bridge::UDPBridgeSenderRemoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::bridge::UDPBridgeSenderRemoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::bridge::UDPBridgeReceiverRemoteInfo*
Arena::CreateMaybeMessage< ::apollo::bridge::UDPBridgeReceiverRemoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::bridge::UDPBridgeReceiverRemoteInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
