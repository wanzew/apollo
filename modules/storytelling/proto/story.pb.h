// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/storytelling/proto/story.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fstorytelling_2fproto_2fstory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fstorytelling_2fproto_2fstory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto;
namespace apollo {
namespace storytelling {
class CloseToClearArea;
struct CloseToClearAreaDefaultTypeInternal;
extern CloseToClearAreaDefaultTypeInternal _CloseToClearArea_default_instance_;
class CloseToCrosswalk;
struct CloseToCrosswalkDefaultTypeInternal;
extern CloseToCrosswalkDefaultTypeInternal _CloseToCrosswalk_default_instance_;
class CloseToJunction;
struct CloseToJunctionDefaultTypeInternal;
extern CloseToJunctionDefaultTypeInternal _CloseToJunction_default_instance_;
class CloseToSignal;
struct CloseToSignalDefaultTypeInternal;
extern CloseToSignalDefaultTypeInternal _CloseToSignal_default_instance_;
class CloseToStopSign;
struct CloseToStopSignDefaultTypeInternal;
extern CloseToStopSignDefaultTypeInternal _CloseToStopSign_default_instance_;
class CloseToYieldSign;
struct CloseToYieldSignDefaultTypeInternal;
extern CloseToYieldSignDefaultTypeInternal _CloseToYieldSign_default_instance_;
class Stories;
struct StoriesDefaultTypeInternal;
extern StoriesDefaultTypeInternal _Stories_default_instance_;
}  // namespace storytelling
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::storytelling::CloseToClearArea* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToClearArea>(Arena*);
template<> ::apollo::storytelling::CloseToCrosswalk* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToCrosswalk>(Arena*);
template<> ::apollo::storytelling::CloseToJunction* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToJunction>(Arena*);
template<> ::apollo::storytelling::CloseToSignal* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToSignal>(Arena*);
template<> ::apollo::storytelling::CloseToStopSign* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToStopSign>(Arena*);
template<> ::apollo::storytelling::CloseToYieldSign* Arena::CreateMaybeMessage<::apollo::storytelling::CloseToYieldSign>(Arena*);
template<> ::apollo::storytelling::Stories* Arena::CreateMaybeMessage<::apollo::storytelling::Stories>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace storytelling {

enum CloseToJunction_JunctionType : int {
  CloseToJunction_JunctionType_PNC_JUNCTION = 1,
  CloseToJunction_JunctionType_JUNCTION = 2
};
bool CloseToJunction_JunctionType_IsValid(int value);
constexpr CloseToJunction_JunctionType CloseToJunction_JunctionType_JunctionType_MIN = CloseToJunction_JunctionType_PNC_JUNCTION;
constexpr CloseToJunction_JunctionType CloseToJunction_JunctionType_JunctionType_MAX = CloseToJunction_JunctionType_JUNCTION;
constexpr int CloseToJunction_JunctionType_JunctionType_ARRAYSIZE = CloseToJunction_JunctionType_JunctionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseToJunction_JunctionType_descriptor();
template<typename T>
inline const std::string& CloseToJunction_JunctionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloseToJunction_JunctionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloseToJunction_JunctionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloseToJunction_JunctionType_descriptor(), enum_t_value);
}
inline bool CloseToJunction_JunctionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CloseToJunction_JunctionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloseToJunction_JunctionType>(
    CloseToJunction_JunctionType_descriptor(), name, value);
}
// ===================================================================

class CloseToCrosswalk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToCrosswalk) */ {
 public:
  inline CloseToCrosswalk() : CloseToCrosswalk(nullptr) {}
  ~CloseToCrosswalk() override;
  explicit PROTOBUF_CONSTEXPR CloseToCrosswalk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToCrosswalk(const CloseToCrosswalk& from);
  CloseToCrosswalk(CloseToCrosswalk&& from) noexcept
    : CloseToCrosswalk() {
    *this = ::std::move(from);
  }

  inline CloseToCrosswalk& operator=(const CloseToCrosswalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToCrosswalk& operator=(CloseToCrosswalk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToCrosswalk& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToCrosswalk* internal_default_instance() {
    return reinterpret_cast<const CloseToCrosswalk*>(
               &_CloseToCrosswalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloseToCrosswalk& a, CloseToCrosswalk& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToCrosswalk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToCrosswalk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToCrosswalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToCrosswalk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToCrosswalk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToCrosswalk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToCrosswalk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToCrosswalk";
  }
  protected:
  explicit CloseToCrosswalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double distance = 2 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToCrosswalk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToClearArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToClearArea) */ {
 public:
  inline CloseToClearArea() : CloseToClearArea(nullptr) {}
  ~CloseToClearArea() override;
  explicit PROTOBUF_CONSTEXPR CloseToClearArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToClearArea(const CloseToClearArea& from);
  CloseToClearArea(CloseToClearArea&& from) noexcept
    : CloseToClearArea() {
    *this = ::std::move(from);
  }

  inline CloseToClearArea& operator=(const CloseToClearArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToClearArea& operator=(CloseToClearArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToClearArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToClearArea* internal_default_instance() {
    return reinterpret_cast<const CloseToClearArea*>(
               &_CloseToClearArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CloseToClearArea& a, CloseToClearArea& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToClearArea* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToClearArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToClearArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToClearArea>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToClearArea& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToClearArea& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToClearArea* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToClearArea";
  }
  protected:
  explicit CloseToClearArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double distance = 2 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToClearArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToJunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToJunction) */ {
 public:
  inline CloseToJunction() : CloseToJunction(nullptr) {}
  ~CloseToJunction() override;
  explicit PROTOBUF_CONSTEXPR CloseToJunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToJunction(const CloseToJunction& from);
  CloseToJunction(CloseToJunction&& from) noexcept
    : CloseToJunction() {
    *this = ::std::move(from);
  }

  inline CloseToJunction& operator=(const CloseToJunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToJunction& operator=(CloseToJunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToJunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToJunction* internal_default_instance() {
    return reinterpret_cast<const CloseToJunction*>(
               &_CloseToJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseToJunction& a, CloseToJunction& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToJunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToJunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToJunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToJunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToJunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToJunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToJunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToJunction";
  }
  protected:
  explicit CloseToJunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CloseToJunction_JunctionType JunctionType;
  static constexpr JunctionType PNC_JUNCTION =
    CloseToJunction_JunctionType_PNC_JUNCTION;
  static constexpr JunctionType JUNCTION =
    CloseToJunction_JunctionType_JUNCTION;
  static inline bool JunctionType_IsValid(int value) {
    return CloseToJunction_JunctionType_IsValid(value);
  }
  static constexpr JunctionType JunctionType_MIN =
    CloseToJunction_JunctionType_JunctionType_MIN;
  static constexpr JunctionType JunctionType_MAX =
    CloseToJunction_JunctionType_JunctionType_MAX;
  static constexpr int JunctionType_ARRAYSIZE =
    CloseToJunction_JunctionType_JunctionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JunctionType_descriptor() {
    return CloseToJunction_JunctionType_descriptor();
  }
  template<typename T>
  static inline const std::string& JunctionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JunctionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JunctionType_Name.");
    return CloseToJunction_JunctionType_Name(enum_t_value);
  }
  static inline bool JunctionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JunctionType* value) {
    return CloseToJunction_JunctionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::storytelling::CloseToJunction_JunctionType type() const;
  void set_type(::apollo::storytelling::CloseToJunction_JunctionType value);
  private:
  ::apollo::storytelling::CloseToJunction_JunctionType _internal_type() const;
  void _internal_set_type(::apollo::storytelling::CloseToJunction_JunctionType value);
  public:

  // optional double distance = 3 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToJunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int type_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToSignal) */ {
 public:
  inline CloseToSignal() : CloseToSignal(nullptr) {}
  ~CloseToSignal() override;
  explicit PROTOBUF_CONSTEXPR CloseToSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToSignal(const CloseToSignal& from);
  CloseToSignal(CloseToSignal&& from) noexcept
    : CloseToSignal() {
    *this = ::std::move(from);
  }

  inline CloseToSignal& operator=(const CloseToSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToSignal& operator=(CloseToSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToSignal* internal_default_instance() {
    return reinterpret_cast<const CloseToSignal*>(
               &_CloseToSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseToSignal& a, CloseToSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToSignal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToSignal";
  }
  protected:
  explicit CloseToSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double distance = 2 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToStopSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToStopSign) */ {
 public:
  inline CloseToStopSign() : CloseToStopSign(nullptr) {}
  ~CloseToStopSign() override;
  explicit PROTOBUF_CONSTEXPR CloseToStopSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToStopSign(const CloseToStopSign& from);
  CloseToStopSign(CloseToStopSign&& from) noexcept
    : CloseToStopSign() {
    *this = ::std::move(from);
  }

  inline CloseToStopSign& operator=(const CloseToStopSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToStopSign& operator=(CloseToStopSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToStopSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToStopSign* internal_default_instance() {
    return reinterpret_cast<const CloseToStopSign*>(
               &_CloseToStopSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CloseToStopSign& a, CloseToStopSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToStopSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToStopSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToStopSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToStopSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToStopSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToStopSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToStopSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToStopSign";
  }
  protected:
  explicit CloseToStopSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double distance = 2 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToStopSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class CloseToYieldSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.CloseToYieldSign) */ {
 public:
  inline CloseToYieldSign() : CloseToYieldSign(nullptr) {}
  ~CloseToYieldSign() override;
  explicit PROTOBUF_CONSTEXPR CloseToYieldSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseToYieldSign(const CloseToYieldSign& from);
  CloseToYieldSign(CloseToYieldSign&& from) noexcept
    : CloseToYieldSign() {
    *this = ::std::move(from);
  }

  inline CloseToYieldSign& operator=(const CloseToYieldSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseToYieldSign& operator=(CloseToYieldSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseToYieldSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseToYieldSign* internal_default_instance() {
    return reinterpret_cast<const CloseToYieldSign*>(
               &_CloseToYieldSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CloseToYieldSign& a, CloseToYieldSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseToYieldSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseToYieldSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseToYieldSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseToYieldSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseToYieldSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseToYieldSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseToYieldSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.CloseToYieldSign";
  }
  protected:
  explicit CloseToYieldSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double distance = 2 [default = nan];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.storytelling.CloseToYieldSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// -------------------------------------------------------------------

class Stories final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.storytelling.Stories) */ {
 public:
  inline Stories() : Stories(nullptr) {}
  ~Stories() override;
  explicit PROTOBUF_CONSTEXPR Stories(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stories(const Stories& from);
  Stories(Stories&& from) noexcept
    : Stories() {
    *this = ::std::move(from);
  }

  inline Stories& operator=(const Stories& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stories& operator=(Stories&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stories& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stories* internal_default_instance() {
    return reinterpret_cast<const Stories*>(
               &_Stories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Stories& a, Stories& b) {
    a.Swap(&b);
  }
  inline void Swap(Stories* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stories* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stories* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stories>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stories& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stories& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stories* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.storytelling.Stories";
  }
  protected:
  explicit Stories(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCloseToClearAreaFieldNumber = 2,
    kCloseToCrosswalkFieldNumber = 3,
    kCloseToJunctionFieldNumber = 4,
    kCloseToSignalFieldNumber = 5,
    kCloseToStopSignFieldNumber = 6,
    kCloseToYieldSignFieldNumber = 7,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
  bool has_close_to_clear_area() const;
  private:
  bool _internal_has_close_to_clear_area() const;
  public:
  void clear_close_to_clear_area();
  const ::apollo::storytelling::CloseToClearArea& close_to_clear_area() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToClearArea* release_close_to_clear_area();
  ::apollo::storytelling::CloseToClearArea* mutable_close_to_clear_area();
  void set_allocated_close_to_clear_area(::apollo::storytelling::CloseToClearArea* close_to_clear_area);
  private:
  const ::apollo::storytelling::CloseToClearArea& _internal_close_to_clear_area() const;
  ::apollo::storytelling::CloseToClearArea* _internal_mutable_close_to_clear_area();
  public:
  void unsafe_arena_set_allocated_close_to_clear_area(
      ::apollo::storytelling::CloseToClearArea* close_to_clear_area);
  ::apollo::storytelling::CloseToClearArea* unsafe_arena_release_close_to_clear_area();

  // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
  bool has_close_to_crosswalk() const;
  private:
  bool _internal_has_close_to_crosswalk() const;
  public:
  void clear_close_to_crosswalk();
  const ::apollo::storytelling::CloseToCrosswalk& close_to_crosswalk() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToCrosswalk* release_close_to_crosswalk();
  ::apollo::storytelling::CloseToCrosswalk* mutable_close_to_crosswalk();
  void set_allocated_close_to_crosswalk(::apollo::storytelling::CloseToCrosswalk* close_to_crosswalk);
  private:
  const ::apollo::storytelling::CloseToCrosswalk& _internal_close_to_crosswalk() const;
  ::apollo::storytelling::CloseToCrosswalk* _internal_mutable_close_to_crosswalk();
  public:
  void unsafe_arena_set_allocated_close_to_crosswalk(
      ::apollo::storytelling::CloseToCrosswalk* close_to_crosswalk);
  ::apollo::storytelling::CloseToCrosswalk* unsafe_arena_release_close_to_crosswalk();

  // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
  bool has_close_to_junction() const;
  private:
  bool _internal_has_close_to_junction() const;
  public:
  void clear_close_to_junction();
  const ::apollo::storytelling::CloseToJunction& close_to_junction() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToJunction* release_close_to_junction();
  ::apollo::storytelling::CloseToJunction* mutable_close_to_junction();
  void set_allocated_close_to_junction(::apollo::storytelling::CloseToJunction* close_to_junction);
  private:
  const ::apollo::storytelling::CloseToJunction& _internal_close_to_junction() const;
  ::apollo::storytelling::CloseToJunction* _internal_mutable_close_to_junction();
  public:
  void unsafe_arena_set_allocated_close_to_junction(
      ::apollo::storytelling::CloseToJunction* close_to_junction);
  ::apollo::storytelling::CloseToJunction* unsafe_arena_release_close_to_junction();

  // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
  bool has_close_to_signal() const;
  private:
  bool _internal_has_close_to_signal() const;
  public:
  void clear_close_to_signal();
  const ::apollo::storytelling::CloseToSignal& close_to_signal() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToSignal* release_close_to_signal();
  ::apollo::storytelling::CloseToSignal* mutable_close_to_signal();
  void set_allocated_close_to_signal(::apollo::storytelling::CloseToSignal* close_to_signal);
  private:
  const ::apollo::storytelling::CloseToSignal& _internal_close_to_signal() const;
  ::apollo::storytelling::CloseToSignal* _internal_mutable_close_to_signal();
  public:
  void unsafe_arena_set_allocated_close_to_signal(
      ::apollo::storytelling::CloseToSignal* close_to_signal);
  ::apollo::storytelling::CloseToSignal* unsafe_arena_release_close_to_signal();

  // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
  bool has_close_to_stop_sign() const;
  private:
  bool _internal_has_close_to_stop_sign() const;
  public:
  void clear_close_to_stop_sign();
  const ::apollo::storytelling::CloseToStopSign& close_to_stop_sign() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToStopSign* release_close_to_stop_sign();
  ::apollo::storytelling::CloseToStopSign* mutable_close_to_stop_sign();
  void set_allocated_close_to_stop_sign(::apollo::storytelling::CloseToStopSign* close_to_stop_sign);
  private:
  const ::apollo::storytelling::CloseToStopSign& _internal_close_to_stop_sign() const;
  ::apollo::storytelling::CloseToStopSign* _internal_mutable_close_to_stop_sign();
  public:
  void unsafe_arena_set_allocated_close_to_stop_sign(
      ::apollo::storytelling::CloseToStopSign* close_to_stop_sign);
  ::apollo::storytelling::CloseToStopSign* unsafe_arena_release_close_to_stop_sign();

  // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
  bool has_close_to_yield_sign() const;
  private:
  bool _internal_has_close_to_yield_sign() const;
  public:
  void clear_close_to_yield_sign();
  const ::apollo::storytelling::CloseToYieldSign& close_to_yield_sign() const;
  PROTOBUF_NODISCARD ::apollo::storytelling::CloseToYieldSign* release_close_to_yield_sign();
  ::apollo::storytelling::CloseToYieldSign* mutable_close_to_yield_sign();
  void set_allocated_close_to_yield_sign(::apollo::storytelling::CloseToYieldSign* close_to_yield_sign);
  private:
  const ::apollo::storytelling::CloseToYieldSign& _internal_close_to_yield_sign() const;
  ::apollo::storytelling::CloseToYieldSign* _internal_mutable_close_to_yield_sign();
  public:
  void unsafe_arena_set_allocated_close_to_yield_sign(
      ::apollo::storytelling::CloseToYieldSign* close_to_yield_sign);
  ::apollo::storytelling::CloseToYieldSign* unsafe_arena_release_close_to_yield_sign();

  // @@protoc_insertion_point(class_scope:apollo.storytelling.Stories)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Header* header_;
    ::apollo::storytelling::CloseToClearArea* close_to_clear_area_;
    ::apollo::storytelling::CloseToCrosswalk* close_to_crosswalk_;
    ::apollo::storytelling::CloseToJunction* close_to_junction_;
    ::apollo::storytelling::CloseToSignal* close_to_signal_;
    ::apollo::storytelling::CloseToStopSign* close_to_stop_sign_;
    ::apollo::storytelling::CloseToYieldSign* close_to_yield_sign_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloseToCrosswalk

// optional string id = 1;
inline bool CloseToCrosswalk::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToCrosswalk::has_id() const {
  return _internal_has_id();
}
inline void CloseToCrosswalk::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToCrosswalk::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToCrosswalk.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToCrosswalk::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToCrosswalk.id)
}
inline std::string* CloseToCrosswalk::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToCrosswalk.id)
  return _s;
}
inline const std::string& CloseToCrosswalk::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToCrosswalk::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToCrosswalk::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToCrosswalk::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToCrosswalk.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToCrosswalk::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToCrosswalk.id)
}

// optional double distance = 2 [default = nan];
inline bool CloseToCrosswalk::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToCrosswalk::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToCrosswalk::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CloseToCrosswalk::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToCrosswalk::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToCrosswalk.distance)
  return _internal_distance();
}
inline void CloseToCrosswalk::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_ = value;
}
inline void CloseToCrosswalk::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToCrosswalk.distance)
}

// -------------------------------------------------------------------

// CloseToClearArea

// optional string id = 1;
inline bool CloseToClearArea::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToClearArea::has_id() const {
  return _internal_has_id();
}
inline void CloseToClearArea::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToClearArea::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToClearArea.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToClearArea::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToClearArea.id)
}
inline std::string* CloseToClearArea::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToClearArea.id)
  return _s;
}
inline const std::string& CloseToClearArea::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToClearArea::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToClearArea::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToClearArea::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToClearArea.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToClearArea::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToClearArea.id)
}

// optional double distance = 2 [default = nan];
inline bool CloseToClearArea::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToClearArea::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToClearArea::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CloseToClearArea::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToClearArea::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToClearArea.distance)
  return _internal_distance();
}
inline void CloseToClearArea::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_ = value;
}
inline void CloseToClearArea::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToClearArea.distance)
}

// -------------------------------------------------------------------

// CloseToJunction

// optional string id = 1;
inline bool CloseToJunction::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToJunction::has_id() const {
  return _internal_has_id();
}
inline void CloseToJunction::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToJunction::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToJunction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToJunction::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToJunction.id)
}
inline std::string* CloseToJunction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToJunction.id)
  return _s;
}
inline const std::string& CloseToJunction::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToJunction::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToJunction::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToJunction::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToJunction.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToJunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToJunction.id)
}

// optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
inline bool CloseToJunction::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToJunction::has_type() const {
  return _internal_has_type();
}
inline void CloseToJunction::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::storytelling::CloseToJunction_JunctionType CloseToJunction::_internal_type() const {
  return static_cast< ::apollo::storytelling::CloseToJunction_JunctionType >(_impl_.type_);
}
inline ::apollo::storytelling::CloseToJunction_JunctionType CloseToJunction::type() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToJunction.type)
  return _internal_type();
}
inline void CloseToJunction::_internal_set_type(::apollo::storytelling::CloseToJunction_JunctionType value) {
  assert(::apollo::storytelling::CloseToJunction_JunctionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CloseToJunction::set_type(::apollo::storytelling::CloseToJunction_JunctionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToJunction.type)
}

// optional double distance = 3 [default = nan];
inline bool CloseToJunction::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CloseToJunction::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToJunction::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CloseToJunction::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToJunction::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToJunction.distance)
  return _internal_distance();
}
inline void CloseToJunction::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.distance_ = value;
}
inline void CloseToJunction::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToJunction.distance)
}

// -------------------------------------------------------------------

// CloseToSignal

// optional string id = 1;
inline bool CloseToSignal::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToSignal::has_id() const {
  return _internal_has_id();
}
inline void CloseToSignal::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToSignal::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToSignal.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToSignal::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToSignal.id)
}
inline std::string* CloseToSignal::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToSignal.id)
  return _s;
}
inline const std::string& CloseToSignal::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToSignal::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToSignal::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToSignal::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToSignal.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToSignal::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToSignal.id)
}

// optional double distance = 2 [default = nan];
inline bool CloseToSignal::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToSignal::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToSignal::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CloseToSignal::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToSignal::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToSignal.distance)
  return _internal_distance();
}
inline void CloseToSignal::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_ = value;
}
inline void CloseToSignal::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToSignal.distance)
}

// -------------------------------------------------------------------

// CloseToStopSign

// optional string id = 1;
inline bool CloseToStopSign::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToStopSign::has_id() const {
  return _internal_has_id();
}
inline void CloseToStopSign::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToStopSign::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToStopSign.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToStopSign::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToStopSign.id)
}
inline std::string* CloseToStopSign::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToStopSign.id)
  return _s;
}
inline const std::string& CloseToStopSign::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToStopSign::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToStopSign::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToStopSign::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToStopSign.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToStopSign::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToStopSign.id)
}

// optional double distance = 2 [default = nan];
inline bool CloseToStopSign::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToStopSign::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToStopSign::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CloseToStopSign::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToStopSign::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToStopSign.distance)
  return _internal_distance();
}
inline void CloseToStopSign::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_ = value;
}
inline void CloseToStopSign::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToStopSign.distance)
}

// -------------------------------------------------------------------

// CloseToYieldSign

// optional string id = 1;
inline bool CloseToYieldSign::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseToYieldSign::has_id() const {
  return _internal_has_id();
}
inline void CloseToYieldSign::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseToYieldSign::id() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToYieldSign.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseToYieldSign::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToYieldSign.id)
}
inline std::string* CloseToYieldSign::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.CloseToYieldSign.id)
  return _s;
}
inline const std::string& CloseToYieldSign::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CloseToYieldSign::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseToYieldSign::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseToYieldSign::release_id() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.CloseToYieldSign.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseToYieldSign::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.CloseToYieldSign.id)
}

// optional double distance = 2 [default = nan];
inline bool CloseToYieldSign::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloseToYieldSign::has_distance() const {
  return _internal_has_distance();
}
inline void CloseToYieldSign::clear_distance() {
  _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CloseToYieldSign::_internal_distance() const {
  return _impl_.distance_;
}
inline double CloseToYieldSign::distance() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.CloseToYieldSign.distance)
  return _internal_distance();
}
inline void CloseToYieldSign::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_ = value;
}
inline void CloseToYieldSign::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.storytelling.CloseToYieldSign.distance)
}

// -------------------------------------------------------------------

// Stories

// optional .apollo.common.Header header = 1;
inline bool Stories::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Stories::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Stories::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Stories::header() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.header)
  return _internal_header();
}
inline void Stories::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.header)
}
inline ::apollo::common::Header* Stories::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Stories::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Stories::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* Stories::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.header)
  return _msg;
}
inline void Stories::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.header)
}

// optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
inline bool Stories::_internal_has_close_to_clear_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_clear_area_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_clear_area() const {
  return _internal_has_close_to_clear_area();
}
inline void Stories::clear_close_to_clear_area() {
  if (_impl_.close_to_clear_area_ != nullptr) _impl_.close_to_clear_area_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::storytelling::CloseToClearArea& Stories::_internal_close_to_clear_area() const {
  const ::apollo::storytelling::CloseToClearArea* p = _impl_.close_to_clear_area_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToClearArea&>(
      ::apollo::storytelling::_CloseToClearArea_default_instance_);
}
inline const ::apollo::storytelling::CloseToClearArea& Stories::close_to_clear_area() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_clear_area)
  return _internal_close_to_clear_area();
}
inline void Stories::unsafe_arena_set_allocated_close_to_clear_area(
    ::apollo::storytelling::CloseToClearArea* close_to_clear_area) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_clear_area_);
  }
  _impl_.close_to_clear_area_ = close_to_clear_area;
  if (close_to_clear_area) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_clear_area)
}
inline ::apollo::storytelling::CloseToClearArea* Stories::release_close_to_clear_area() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::storytelling::CloseToClearArea* temp = _impl_.close_to_clear_area_;
  _impl_.close_to_clear_area_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToClearArea* Stories::unsafe_arena_release_close_to_clear_area() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_clear_area)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::storytelling::CloseToClearArea* temp = _impl_.close_to_clear_area_;
  _impl_.close_to_clear_area_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToClearArea* Stories::_internal_mutable_close_to_clear_area() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.close_to_clear_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToClearArea>(GetArenaForAllocation());
    _impl_.close_to_clear_area_ = p;
  }
  return _impl_.close_to_clear_area_;
}
inline ::apollo::storytelling::CloseToClearArea* Stories::mutable_close_to_clear_area() {
  ::apollo::storytelling::CloseToClearArea* _msg = _internal_mutable_close_to_clear_area();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_clear_area)
  return _msg;
}
inline void Stories::set_allocated_close_to_clear_area(::apollo::storytelling::CloseToClearArea* close_to_clear_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_clear_area_;
  }
  if (close_to_clear_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_clear_area);
    if (message_arena != submessage_arena) {
      close_to_clear_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_clear_area, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.close_to_clear_area_ = close_to_clear_area;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_clear_area)
}

// optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
inline bool Stories::_internal_has_close_to_crosswalk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_crosswalk_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_crosswalk() const {
  return _internal_has_close_to_crosswalk();
}
inline void Stories::clear_close_to_crosswalk() {
  if (_impl_.close_to_crosswalk_ != nullptr) _impl_.close_to_crosswalk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::storytelling::CloseToCrosswalk& Stories::_internal_close_to_crosswalk() const {
  const ::apollo::storytelling::CloseToCrosswalk* p = _impl_.close_to_crosswalk_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToCrosswalk&>(
      ::apollo::storytelling::_CloseToCrosswalk_default_instance_);
}
inline const ::apollo::storytelling::CloseToCrosswalk& Stories::close_to_crosswalk() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_crosswalk)
  return _internal_close_to_crosswalk();
}
inline void Stories::unsafe_arena_set_allocated_close_to_crosswalk(
    ::apollo::storytelling::CloseToCrosswalk* close_to_crosswalk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_crosswalk_);
  }
  _impl_.close_to_crosswalk_ = close_to_crosswalk;
  if (close_to_crosswalk) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_crosswalk)
}
inline ::apollo::storytelling::CloseToCrosswalk* Stories::release_close_to_crosswalk() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::storytelling::CloseToCrosswalk* temp = _impl_.close_to_crosswalk_;
  _impl_.close_to_crosswalk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToCrosswalk* Stories::unsafe_arena_release_close_to_crosswalk() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_crosswalk)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::storytelling::CloseToCrosswalk* temp = _impl_.close_to_crosswalk_;
  _impl_.close_to_crosswalk_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToCrosswalk* Stories::_internal_mutable_close_to_crosswalk() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.close_to_crosswalk_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToCrosswalk>(GetArenaForAllocation());
    _impl_.close_to_crosswalk_ = p;
  }
  return _impl_.close_to_crosswalk_;
}
inline ::apollo::storytelling::CloseToCrosswalk* Stories::mutable_close_to_crosswalk() {
  ::apollo::storytelling::CloseToCrosswalk* _msg = _internal_mutable_close_to_crosswalk();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_crosswalk)
  return _msg;
}
inline void Stories::set_allocated_close_to_crosswalk(::apollo::storytelling::CloseToCrosswalk* close_to_crosswalk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_crosswalk_;
  }
  if (close_to_crosswalk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_crosswalk);
    if (message_arena != submessage_arena) {
      close_to_crosswalk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_crosswalk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.close_to_crosswalk_ = close_to_crosswalk;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_crosswalk)
}

// optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
inline bool Stories::_internal_has_close_to_junction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_junction_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_junction() const {
  return _internal_has_close_to_junction();
}
inline void Stories::clear_close_to_junction() {
  if (_impl_.close_to_junction_ != nullptr) _impl_.close_to_junction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::storytelling::CloseToJunction& Stories::_internal_close_to_junction() const {
  const ::apollo::storytelling::CloseToJunction* p = _impl_.close_to_junction_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToJunction&>(
      ::apollo::storytelling::_CloseToJunction_default_instance_);
}
inline const ::apollo::storytelling::CloseToJunction& Stories::close_to_junction() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_junction)
  return _internal_close_to_junction();
}
inline void Stories::unsafe_arena_set_allocated_close_to_junction(
    ::apollo::storytelling::CloseToJunction* close_to_junction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_junction_);
  }
  _impl_.close_to_junction_ = close_to_junction;
  if (close_to_junction) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_junction)
}
inline ::apollo::storytelling::CloseToJunction* Stories::release_close_to_junction() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::storytelling::CloseToJunction* temp = _impl_.close_to_junction_;
  _impl_.close_to_junction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToJunction* Stories::unsafe_arena_release_close_to_junction() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_junction)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::storytelling::CloseToJunction* temp = _impl_.close_to_junction_;
  _impl_.close_to_junction_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToJunction* Stories::_internal_mutable_close_to_junction() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.close_to_junction_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToJunction>(GetArenaForAllocation());
    _impl_.close_to_junction_ = p;
  }
  return _impl_.close_to_junction_;
}
inline ::apollo::storytelling::CloseToJunction* Stories::mutable_close_to_junction() {
  ::apollo::storytelling::CloseToJunction* _msg = _internal_mutable_close_to_junction();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_junction)
  return _msg;
}
inline void Stories::set_allocated_close_to_junction(::apollo::storytelling::CloseToJunction* close_to_junction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_junction_;
  }
  if (close_to_junction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_junction);
    if (message_arena != submessage_arena) {
      close_to_junction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_junction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.close_to_junction_ = close_to_junction;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_junction)
}

// optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
inline bool Stories::_internal_has_close_to_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_signal_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_signal() const {
  return _internal_has_close_to_signal();
}
inline void Stories::clear_close_to_signal() {
  if (_impl_.close_to_signal_ != nullptr) _impl_.close_to_signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::storytelling::CloseToSignal& Stories::_internal_close_to_signal() const {
  const ::apollo::storytelling::CloseToSignal* p = _impl_.close_to_signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToSignal&>(
      ::apollo::storytelling::_CloseToSignal_default_instance_);
}
inline const ::apollo::storytelling::CloseToSignal& Stories::close_to_signal() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_signal)
  return _internal_close_to_signal();
}
inline void Stories::unsafe_arena_set_allocated_close_to_signal(
    ::apollo::storytelling::CloseToSignal* close_to_signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_signal_);
  }
  _impl_.close_to_signal_ = close_to_signal;
  if (close_to_signal) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_signal)
}
inline ::apollo::storytelling::CloseToSignal* Stories::release_close_to_signal() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::storytelling::CloseToSignal* temp = _impl_.close_to_signal_;
  _impl_.close_to_signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToSignal* Stories::unsafe_arena_release_close_to_signal() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_signal)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::storytelling::CloseToSignal* temp = _impl_.close_to_signal_;
  _impl_.close_to_signal_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToSignal* Stories::_internal_mutable_close_to_signal() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.close_to_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToSignal>(GetArenaForAllocation());
    _impl_.close_to_signal_ = p;
  }
  return _impl_.close_to_signal_;
}
inline ::apollo::storytelling::CloseToSignal* Stories::mutable_close_to_signal() {
  ::apollo::storytelling::CloseToSignal* _msg = _internal_mutable_close_to_signal();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_signal)
  return _msg;
}
inline void Stories::set_allocated_close_to_signal(::apollo::storytelling::CloseToSignal* close_to_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_signal_;
  }
  if (close_to_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_signal);
    if (message_arena != submessage_arena) {
      close_to_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.close_to_signal_ = close_to_signal;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_signal)
}

// optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
inline bool Stories::_internal_has_close_to_stop_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_stop_sign_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_stop_sign() const {
  return _internal_has_close_to_stop_sign();
}
inline void Stories::clear_close_to_stop_sign() {
  if (_impl_.close_to_stop_sign_ != nullptr) _impl_.close_to_stop_sign_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::storytelling::CloseToStopSign& Stories::_internal_close_to_stop_sign() const {
  const ::apollo::storytelling::CloseToStopSign* p = _impl_.close_to_stop_sign_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToStopSign&>(
      ::apollo::storytelling::_CloseToStopSign_default_instance_);
}
inline const ::apollo::storytelling::CloseToStopSign& Stories::close_to_stop_sign() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_stop_sign)
  return _internal_close_to_stop_sign();
}
inline void Stories::unsafe_arena_set_allocated_close_to_stop_sign(
    ::apollo::storytelling::CloseToStopSign* close_to_stop_sign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_stop_sign_);
  }
  _impl_.close_to_stop_sign_ = close_to_stop_sign;
  if (close_to_stop_sign) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_stop_sign)
}
inline ::apollo::storytelling::CloseToStopSign* Stories::release_close_to_stop_sign() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::storytelling::CloseToStopSign* temp = _impl_.close_to_stop_sign_;
  _impl_.close_to_stop_sign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToStopSign* Stories::unsafe_arena_release_close_to_stop_sign() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_stop_sign)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::storytelling::CloseToStopSign* temp = _impl_.close_to_stop_sign_;
  _impl_.close_to_stop_sign_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToStopSign* Stories::_internal_mutable_close_to_stop_sign() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.close_to_stop_sign_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToStopSign>(GetArenaForAllocation());
    _impl_.close_to_stop_sign_ = p;
  }
  return _impl_.close_to_stop_sign_;
}
inline ::apollo::storytelling::CloseToStopSign* Stories::mutable_close_to_stop_sign() {
  ::apollo::storytelling::CloseToStopSign* _msg = _internal_mutable_close_to_stop_sign();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_stop_sign)
  return _msg;
}
inline void Stories::set_allocated_close_to_stop_sign(::apollo::storytelling::CloseToStopSign* close_to_stop_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_stop_sign_;
  }
  if (close_to_stop_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_stop_sign);
    if (message_arena != submessage_arena) {
      close_to_stop_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_stop_sign, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.close_to_stop_sign_ = close_to_stop_sign;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_stop_sign)
}

// optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
inline bool Stories::_internal_has_close_to_yield_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_to_yield_sign_ != nullptr);
  return value;
}
inline bool Stories::has_close_to_yield_sign() const {
  return _internal_has_close_to_yield_sign();
}
inline void Stories::clear_close_to_yield_sign() {
  if (_impl_.close_to_yield_sign_ != nullptr) _impl_.close_to_yield_sign_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::storytelling::CloseToYieldSign& Stories::_internal_close_to_yield_sign() const {
  const ::apollo::storytelling::CloseToYieldSign* p = _impl_.close_to_yield_sign_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::storytelling::CloseToYieldSign&>(
      ::apollo::storytelling::_CloseToYieldSign_default_instance_);
}
inline const ::apollo::storytelling::CloseToYieldSign& Stories::close_to_yield_sign() const {
  // @@protoc_insertion_point(field_get:apollo.storytelling.Stories.close_to_yield_sign)
  return _internal_close_to_yield_sign();
}
inline void Stories::unsafe_arena_set_allocated_close_to_yield_sign(
    ::apollo::storytelling::CloseToYieldSign* close_to_yield_sign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.close_to_yield_sign_);
  }
  _impl_.close_to_yield_sign_ = close_to_yield_sign;
  if (close_to_yield_sign) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.storytelling.Stories.close_to_yield_sign)
}
inline ::apollo::storytelling::CloseToYieldSign* Stories::release_close_to_yield_sign() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::storytelling::CloseToYieldSign* temp = _impl_.close_to_yield_sign_;
  _impl_.close_to_yield_sign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::storytelling::CloseToYieldSign* Stories::unsafe_arena_release_close_to_yield_sign() {
  // @@protoc_insertion_point(field_release:apollo.storytelling.Stories.close_to_yield_sign)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::storytelling::CloseToYieldSign* temp = _impl_.close_to_yield_sign_;
  _impl_.close_to_yield_sign_ = nullptr;
  return temp;
}
inline ::apollo::storytelling::CloseToYieldSign* Stories::_internal_mutable_close_to_yield_sign() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.close_to_yield_sign_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::storytelling::CloseToYieldSign>(GetArenaForAllocation());
    _impl_.close_to_yield_sign_ = p;
  }
  return _impl_.close_to_yield_sign_;
}
inline ::apollo::storytelling::CloseToYieldSign* Stories::mutable_close_to_yield_sign() {
  ::apollo::storytelling::CloseToYieldSign* _msg = _internal_mutable_close_to_yield_sign();
  // @@protoc_insertion_point(field_mutable:apollo.storytelling.Stories.close_to_yield_sign)
  return _msg;
}
inline void Stories::set_allocated_close_to_yield_sign(::apollo::storytelling::CloseToYieldSign* close_to_yield_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.close_to_yield_sign_;
  }
  if (close_to_yield_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_to_yield_sign);
    if (message_arena != submessage_arena) {
      close_to_yield_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_to_yield_sign, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.close_to_yield_sign_ = close_to_yield_sign;
  // @@protoc_insertion_point(field_set_allocated:apollo.storytelling.Stories.close_to_yield_sign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storytelling
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::storytelling::CloseToJunction_JunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::storytelling::CloseToJunction_JunctionType>() {
  return ::apollo::storytelling::CloseToJunction_JunctionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fstorytelling_2fproto_2fstory_2eproto
