// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/storytelling/proto/story.proto

#include "modules/storytelling/proto/story.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace storytelling {
PROTOBUF_CONSTEXPR CloseToCrosswalk::CloseToCrosswalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToCrosswalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToCrosswalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToCrosswalkDefaultTypeInternal() {}
  union {
    CloseToCrosswalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToCrosswalkDefaultTypeInternal _CloseToCrosswalk_default_instance_;
PROTOBUF_CONSTEXPR CloseToClearArea::CloseToClearArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToClearAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToClearAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToClearAreaDefaultTypeInternal() {}
  union {
    CloseToClearArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToClearAreaDefaultTypeInternal _CloseToClearArea_default_instance_;
PROTOBUF_CONSTEXPR CloseToJunction::CloseToJunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToJunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToJunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToJunctionDefaultTypeInternal() {}
  union {
    CloseToJunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToJunctionDefaultTypeInternal _CloseToJunction_default_instance_;
PROTOBUF_CONSTEXPR CloseToSignal::CloseToSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToSignalDefaultTypeInternal() {}
  union {
    CloseToSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToSignalDefaultTypeInternal _CloseToSignal_default_instance_;
PROTOBUF_CONSTEXPR CloseToStopSign::CloseToStopSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToStopSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToStopSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToStopSignDefaultTypeInternal() {}
  union {
    CloseToStopSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToStopSignDefaultTypeInternal _CloseToStopSign_default_instance_;
PROTOBUF_CONSTEXPR CloseToYieldSign::CloseToYieldSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/std::numeric_limits<double>::quiet_NaN()} {}
struct CloseToYieldSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseToYieldSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseToYieldSignDefaultTypeInternal() {}
  union {
    CloseToYieldSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseToYieldSignDefaultTypeInternal _CloseToYieldSign_default_instance_;
PROTOBUF_CONSTEXPR Stories::Stories(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.close_to_clear_area_)*/nullptr
  , /*decltype(_impl_.close_to_crosswalk_)*/nullptr
  , /*decltype(_impl_.close_to_junction_)*/nullptr
  , /*decltype(_impl_.close_to_signal_)*/nullptr
  , /*decltype(_impl_.close_to_stop_sign_)*/nullptr
  , /*decltype(_impl_.close_to_yield_sign_)*/nullptr} {}
struct StoriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoriesDefaultTypeInternal() {}
  union {
    Stories _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoriesDefaultTypeInternal _Stories_default_instance_;
}  // namespace storytelling
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto = nullptr;

const uint32_t TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _impl_.distance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _impl_.close_to_yield_sign_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::storytelling::CloseToCrosswalk)},
  { 10, 18, -1, sizeof(::apollo::storytelling::CloseToClearArea)},
  { 20, 29, -1, sizeof(::apollo::storytelling::CloseToJunction)},
  { 32, 40, -1, sizeof(::apollo::storytelling::CloseToSignal)},
  { 42, 50, -1, sizeof(::apollo::storytelling::CloseToStopSign)},
  { 52, 60, -1, sizeof(::apollo::storytelling::CloseToYieldSign)},
  { 62, 75, -1, sizeof(::apollo::storytelling::Stories)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::storytelling::_CloseToCrosswalk_default_instance_._instance,
  &::apollo::storytelling::_CloseToClearArea_default_instance_._instance,
  &::apollo::storytelling::_CloseToJunction_default_instance_._instance,
  &::apollo::storytelling::_CloseToSignal_default_instance_._instance,
  &::apollo::storytelling::_CloseToStopSign_default_instance_._instance,
  &::apollo::storytelling::_CloseToYieldSign_default_instance_._instance,
  &::apollo::storytelling::_Stories_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fstorytelling_2fproto_2fstory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/storytelling/proto/story.proto"
  "\022\023apollo.storytelling\032!modules/common/pr"
  "oto/header.proto\"5\n\020CloseToCrosswalk\022\n\n\002"
  "id\030\001 \001(\t\022\025\n\010distance\030\002 \001(\001:\003nan\"5\n\020Close"
  "ToClearArea\022\n\n\002id\030\001 \001(\t\022\025\n\010distance\030\002 \001("
  "\001:\003nan\"\245\001\n\017CloseToJunction\022\n\n\002id\030\001 \001(\t\022\?"
  "\n\004type\030\002 \001(\01621.apollo.storytelling.Close"
  "ToJunction.JunctionType\022\025\n\010distance\030\003 \001("
  "\001:\003nan\".\n\014JunctionType\022\020\n\014PNC_JUNCTION\020\001"
  "\022\014\n\010JUNCTION\020\002\"2\n\rCloseToSignal\022\n\n\002id\030\001 "
  "\001(\t\022\025\n\010distance\030\002 \001(\001:\003nan\"4\n\017CloseToSto"
  "pSign\022\n\n\002id\030\001 \001(\t\022\025\n\010distance\030\002 \001(\001:\003nan"
  "\"5\n\020CloseToYieldSign\022\n\n\002id\030\001 \001(\t\022\025\n\010dist"
  "ance\030\002 \001(\001:\003nan\"\273\003\n\007Stories\022%\n\006header\030\001 "
  "\001(\0132\025.apollo.common.Header\022B\n\023close_to_c"
  "lear_area\030\002 \001(\0132%.apollo.storytelling.Cl"
  "oseToClearArea\022A\n\022close_to_crosswalk\030\003 \001"
  "(\0132%.apollo.storytelling.CloseToCrosswal"
  "k\022\?\n\021close_to_junction\030\004 \001(\0132$.apollo.st"
  "orytelling.CloseToJunction\022;\n\017close_to_s"
  "ignal\030\005 \001(\0132\".apollo.storytelling.CloseT"
  "oSignal\022@\n\022close_to_stop_sign\030\006 \001(\0132$.ap"
  "ollo.storytelling.CloseToStopSign\022B\n\023clo"
  "se_to_yield_sign\030\007 \001(\0132%.apollo.storytel"
  "ling.CloseToYieldSign"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto = {
    false, false, 981, descriptor_table_protodef_modules_2fstorytelling_2fproto_2fstory_2eproto,
    "modules/storytelling/proto/story.proto",
    &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once, descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto::offsets,
    file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto, file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto,
    file_level_service_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter() {
  return &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fstorytelling_2fproto_2fstory_2eproto(&descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto);
namespace apollo {
namespace storytelling {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseToJunction_JunctionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto);
  return file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto[0];
}
bool CloseToJunction_JunctionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CloseToJunction_JunctionType CloseToJunction::PNC_JUNCTION;
constexpr CloseToJunction_JunctionType CloseToJunction::JUNCTION;
constexpr CloseToJunction_JunctionType CloseToJunction::JunctionType_MIN;
constexpr CloseToJunction_JunctionType CloseToJunction::JunctionType_MAX;
constexpr int CloseToJunction::JunctionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CloseToCrosswalk::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToCrosswalk>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToCrosswalk::CloseToCrosswalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToCrosswalk)
}
CloseToCrosswalk::CloseToCrosswalk(const CloseToCrosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToCrosswalk)
}

inline void CloseToCrosswalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToCrosswalk::~CloseToCrosswalk() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToCrosswalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToCrosswalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToCrosswalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToCrosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToCrosswalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToCrosswalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToCrosswalk.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToCrosswalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToCrosswalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToCrosswalk.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToCrosswalk)
  return target;
}

size_t CloseToCrosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToCrosswalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToCrosswalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToCrosswalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToCrosswalk::GetClassData() const { return &_class_data_; }

void CloseToCrosswalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToCrosswalk *>(to)->MergeFrom(
      static_cast<const CloseToCrosswalk &>(from));
}


void CloseToCrosswalk::MergeFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToCrosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToCrosswalk::CopyFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToCrosswalk::IsInitialized() const {
  return true;
}

void CloseToCrosswalk::InternalSwap(CloseToCrosswalk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToCrosswalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[0]);
}

// ===================================================================

class CloseToClearArea::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToClearArea>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToClearArea::CloseToClearArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToClearArea)
}
CloseToClearArea::CloseToClearArea(const CloseToClearArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToClearArea)
}

inline void CloseToClearArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToClearArea::~CloseToClearArea() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToClearArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToClearArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToClearArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToClearArea::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToClearArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToClearArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToClearArea.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToClearArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToClearArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToClearArea.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToClearArea)
  return target;
}

size_t CloseToClearArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToClearArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToClearArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToClearArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToClearArea::GetClassData() const { return &_class_data_; }

void CloseToClearArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToClearArea *>(to)->MergeFrom(
      static_cast<const CloseToClearArea &>(from));
}


void CloseToClearArea::MergeFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToClearArea)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToClearArea::CopyFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToClearArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToClearArea::IsInitialized() const {
  return true;
}

void CloseToClearArea::InternalSwap(CloseToClearArea* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToClearArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[1]);
}

// ===================================================================

class CloseToJunction::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToJunction>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CloseToJunction::CloseToJunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToJunction)
}
CloseToJunction::CloseToJunction(const CloseToJunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToJunction)
}

inline void CloseToJunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToJunction::~CloseToJunction() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToJunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToJunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToJunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToJunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.type_ = 1;
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToJunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToJunction.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::storytelling::CloseToJunction_JunctionType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::storytelling::CloseToJunction_JunctionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 3 [default = nan];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToJunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToJunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToJunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional double distance = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToJunction)
  return target;
}

size_t CloseToJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToJunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double distance = 3 [default = nan];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToJunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToJunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToJunction::GetClassData() const { return &_class_data_; }

void CloseToJunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToJunction *>(to)->MergeFrom(
      static_cast<const CloseToJunction &>(from));
}


void CloseToJunction::MergeFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToJunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToJunction::CopyFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToJunction::IsInitialized() const {
  return true;
}

void CloseToJunction::InternalSwap(CloseToJunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToJunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[2]);
}

// ===================================================================

class CloseToSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToSignal>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToSignal::CloseToSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToSignal)
}
CloseToSignal::CloseToSignal(const CloseToSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToSignal)
}

inline void CloseToSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToSignal::~CloseToSignal() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToSignal.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToSignal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToSignal)
  return target;
}

size_t CloseToSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToSignal::GetClassData() const { return &_class_data_; }

void CloseToSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToSignal *>(to)->MergeFrom(
      static_cast<const CloseToSignal &>(from));
}


void CloseToSignal::MergeFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToSignal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToSignal::CopyFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToSignal::IsInitialized() const {
  return true;
}

void CloseToSignal::InternalSwap(CloseToSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[3]);
}

// ===================================================================

class CloseToStopSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToStopSign>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToStopSign::CloseToStopSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToStopSign)
}
CloseToStopSign::CloseToStopSign(const CloseToStopSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToStopSign)
}

inline void CloseToStopSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToStopSign::~CloseToStopSign() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToStopSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToStopSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToStopSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToStopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToStopSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToStopSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToStopSign.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToStopSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToStopSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToStopSign.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToStopSign)
  return target;
}

size_t CloseToStopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToStopSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToStopSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToStopSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToStopSign::GetClassData() const { return &_class_data_; }

void CloseToStopSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToStopSign *>(to)->MergeFrom(
      static_cast<const CloseToStopSign &>(from));
}


void CloseToStopSign::MergeFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToStopSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToStopSign::CopyFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToStopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToStopSign::IsInitialized() const {
  return true;
}

void CloseToStopSign::InternalSwap(CloseToStopSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToStopSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[4]);
}

// ===================================================================

class CloseToYieldSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToYieldSign>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToYieldSign::CloseToYieldSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToYieldSign)
}
CloseToYieldSign::CloseToYieldSign(const CloseToYieldSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToYieldSign)
}

inline void CloseToYieldSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){std::numeric_limits<double>::quiet_NaN()}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseToYieldSign::~CloseToYieldSign() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToYieldSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseToYieldSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CloseToYieldSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseToYieldSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToYieldSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    _impl_.distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToYieldSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.storytelling.CloseToYieldSign.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseToYieldSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToYieldSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToYieldSign.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToYieldSign)
  return target;
}

size_t CloseToYieldSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToYieldSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseToYieldSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseToYieldSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseToYieldSign::GetClassData() const { return &_class_data_; }

void CloseToYieldSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseToYieldSign *>(to)->MergeFrom(
      static_cast<const CloseToYieldSign &>(from));
}


void CloseToYieldSign::MergeFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToYieldSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseToYieldSign::CopyFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToYieldSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToYieldSign::IsInitialized() const {
  return true;
}

void CloseToYieldSign::InternalSwap(CloseToYieldSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToYieldSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[5]);
}

// ===================================================================

class Stories::_Internal {
 public:
  using HasBits = decltype(std::declval<Stories>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Stories* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::storytelling::CloseToClearArea& close_to_clear_area(const Stories* msg);
  static void set_has_close_to_clear_area(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::storytelling::CloseToCrosswalk& close_to_crosswalk(const Stories* msg);
  static void set_has_close_to_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::storytelling::CloseToJunction& close_to_junction(const Stories* msg);
  static void set_has_close_to_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::storytelling::CloseToSignal& close_to_signal(const Stories* msg);
  static void set_has_close_to_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::storytelling::CloseToStopSign& close_to_stop_sign(const Stories* msg);
  static void set_has_close_to_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::storytelling::CloseToYieldSign& close_to_yield_sign(const Stories* msg);
  static void set_has_close_to_yield_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::common::Header&
Stories::_Internal::header(const Stories* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::storytelling::CloseToClearArea&
Stories::_Internal::close_to_clear_area(const Stories* msg) {
  return *msg->_impl_.close_to_clear_area_;
}
const ::apollo::storytelling::CloseToCrosswalk&
Stories::_Internal::close_to_crosswalk(const Stories* msg) {
  return *msg->_impl_.close_to_crosswalk_;
}
const ::apollo::storytelling::CloseToJunction&
Stories::_Internal::close_to_junction(const Stories* msg) {
  return *msg->_impl_.close_to_junction_;
}
const ::apollo::storytelling::CloseToSignal&
Stories::_Internal::close_to_signal(const Stories* msg) {
  return *msg->_impl_.close_to_signal_;
}
const ::apollo::storytelling::CloseToStopSign&
Stories::_Internal::close_to_stop_sign(const Stories* msg) {
  return *msg->_impl_.close_to_stop_sign_;
}
const ::apollo::storytelling::CloseToYieldSign&
Stories::_Internal::close_to_yield_sign(const Stories* msg) {
  return *msg->_impl_.close_to_yield_sign_;
}
void Stories::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Stories::Stories(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.Stories)
}
Stories::Stories(const Stories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.close_to_clear_area_){nullptr}
    , decltype(_impl_.close_to_crosswalk_){nullptr}
    , decltype(_impl_.close_to_junction_){nullptr}
    , decltype(_impl_.close_to_signal_){nullptr}
    , decltype(_impl_.close_to_stop_sign_){nullptr}
    , decltype(_impl_.close_to_yield_sign_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_close_to_clear_area()) {
    _impl_.close_to_clear_area_ = new ::apollo::storytelling::CloseToClearArea(*from._impl_.close_to_clear_area_);
  }
  if (from._internal_has_close_to_crosswalk()) {
    _impl_.close_to_crosswalk_ = new ::apollo::storytelling::CloseToCrosswalk(*from._impl_.close_to_crosswalk_);
  }
  if (from._internal_has_close_to_junction()) {
    _impl_.close_to_junction_ = new ::apollo::storytelling::CloseToJunction(*from._impl_.close_to_junction_);
  }
  if (from._internal_has_close_to_signal()) {
    _impl_.close_to_signal_ = new ::apollo::storytelling::CloseToSignal(*from._impl_.close_to_signal_);
  }
  if (from._internal_has_close_to_stop_sign()) {
    _impl_.close_to_stop_sign_ = new ::apollo::storytelling::CloseToStopSign(*from._impl_.close_to_stop_sign_);
  }
  if (from._internal_has_close_to_yield_sign()) {
    _impl_.close_to_yield_sign_ = new ::apollo::storytelling::CloseToYieldSign(*from._impl_.close_to_yield_sign_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.Stories)
}

inline void Stories::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.close_to_clear_area_){nullptr}
    , decltype(_impl_.close_to_crosswalk_){nullptr}
    , decltype(_impl_.close_to_junction_){nullptr}
    , decltype(_impl_.close_to_signal_){nullptr}
    , decltype(_impl_.close_to_stop_sign_){nullptr}
    , decltype(_impl_.close_to_yield_sign_){nullptr}
  };
}

Stories::~Stories() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.Stories)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stories::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.close_to_clear_area_;
  if (this != internal_default_instance()) delete _impl_.close_to_crosswalk_;
  if (this != internal_default_instance()) delete _impl_.close_to_junction_;
  if (this != internal_default_instance()) delete _impl_.close_to_signal_;
  if (this != internal_default_instance()) delete _impl_.close_to_stop_sign_;
  if (this != internal_default_instance()) delete _impl_.close_to_yield_sign_;
}

void Stories::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stories::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.Stories)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.close_to_clear_area_ != nullptr);
      _impl_.close_to_clear_area_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.close_to_crosswalk_ != nullptr);
      _impl_.close_to_crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.close_to_junction_ != nullptr);
      _impl_.close_to_junction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.close_to_signal_ != nullptr);
      _impl_.close_to_signal_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.close_to_stop_sign_ != nullptr);
      _impl_.close_to_stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.close_to_yield_sign_ != nullptr);
      _impl_.close_to_yield_sign_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stories::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_clear_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_crosswalk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_junction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_yield_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stories::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.Stories)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::close_to_clear_area(this),
        _Internal::close_to_clear_area(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::close_to_crosswalk(this),
        _Internal::close_to_crosswalk(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::close_to_junction(this),
        _Internal::close_to_junction(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::close_to_signal(this),
        _Internal::close_to_signal(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::close_to_stop_sign(this),
        _Internal::close_to_stop_sign(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::close_to_yield_sign(this),
        _Internal::close_to_yield_sign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.Stories)
  return target;
}

size_t Stories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.Stories)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_clear_area_);
    }

    // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_crosswalk_);
    }

    // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_junction_);
    }

    // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_signal_);
    }

    // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_stop_sign_);
    }

    // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.close_to_yield_sign_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stories::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stories::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stories::GetClassData() const { return &_class_data_; }

void Stories::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stories *>(to)->MergeFrom(
      static_cast<const Stories &>(from));
}


void Stories::MergeFrom(const Stories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.Stories)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_close_to_clear_area()->::apollo::storytelling::CloseToClearArea::MergeFrom(from._internal_close_to_clear_area());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_close_to_crosswalk()->::apollo::storytelling::CloseToCrosswalk::MergeFrom(from._internal_close_to_crosswalk());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_close_to_junction()->::apollo::storytelling::CloseToJunction::MergeFrom(from._internal_close_to_junction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_close_to_signal()->::apollo::storytelling::CloseToSignal::MergeFrom(from._internal_close_to_signal());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_close_to_stop_sign()->::apollo::storytelling::CloseToStopSign::MergeFrom(from._internal_close_to_stop_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_close_to_yield_sign()->::apollo::storytelling::CloseToYieldSign::MergeFrom(from._internal_close_to_yield_sign());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stories::CopyFrom(const Stories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.Stories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stories::IsInitialized() const {
  return true;
}

void Stories::InternalSwap(Stories* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stories, _impl_.close_to_yield_sign_)
      + sizeof(Stories::_impl_.close_to_yield_sign_)
      - PROTOBUF_FIELD_OFFSET(Stories, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stories::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_getter, &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once,
      file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace storytelling
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToCrosswalk*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToCrosswalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToCrosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToClearArea*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToClearArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToClearArea >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToJunction*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToJunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToJunction >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToSignal*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToStopSign*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToStopSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToStopSign >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToYieldSign*
Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToYieldSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToYieldSign >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::Stories*
Arena::CreateMaybeMessage< ::apollo::storytelling::Stories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::Stories >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
