// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lon_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/control/proto/calibration_table.pb.h"
#include "modules/control/proto/pid_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto;
namespace apollo {
namespace control {
class FilterConf;
struct FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class LonControllerConf;
struct LonControllerConfDefaultTypeInternal;
extern LonControllerConfDefaultTypeInternal _LonControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::FilterConf* Arena::CreateMaybeMessage<::apollo::control::FilterConf>(Arena*);
template<> ::apollo::control::LonControllerConf* Arena::CreateMaybeMessage<::apollo::control::LonControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

// ===================================================================

class FilterConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.FilterConf) */ {
 public:
  inline FilterConf() : FilterConf(nullptr) {}
  ~FilterConf() override;
  explicit PROTOBUF_CONSTEXPR FilterConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterConf(const FilterConf& from);
  FilterConf(FilterConf&& from) noexcept
    : FilterConf() {
    *this = ::std::move(from);
  }

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
               &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilterConf& a, FilterConf& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FilterConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.FilterConf";
  }
  protected:
  explicit FilterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCutoffFreqFieldNumber = 1,
  };
  // optional int32 cutoff_freq = 1;
  bool has_cutoff_freq() const;
  private:
  bool _internal_has_cutoff_freq() const;
  public:
  void clear_cutoff_freq();
  int32_t cutoff_freq() const;
  void set_cutoff_freq(int32_t value);
  private:
  int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.FilterConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t cutoff_freq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LonControllerConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.LonControllerConf) */ {
 public:
  inline LonControllerConf() : LonControllerConf(nullptr) {}
  ~LonControllerConf() override;
  explicit PROTOBUF_CONSTEXPR LonControllerConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LonControllerConf(const LonControllerConf& from);
  LonControllerConf(LonControllerConf&& from) noexcept
    : LonControllerConf() {
    *this = ::std::move(from);
  }

  inline LonControllerConf& operator=(const LonControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LonControllerConf& operator=(LonControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LonControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const LonControllerConf* internal_default_instance() {
    return reinterpret_cast<const LonControllerConf*>(
               &_LonControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LonControllerConf& a, LonControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LonControllerConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LonControllerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LonControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LonControllerConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LonControllerConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LonControllerConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonControllerConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.LonControllerConf";
  }
  protected:
  explicit LonControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationPidConfFieldNumber = 8,
    kLowSpeedPidConfFieldNumber = 9,
    kHighSpeedPidConfFieldNumber = 10,
    kPitchAngleFilterConfFieldNumber = 12,
    kCalibrationTableFieldNumber = 13,
    kTsFieldNumber = 1,
    kBrakeDeadzoneFieldNumber = 2,
    kThrottleDeadzoneFieldNumber = 3,
    kSpeedControllerInputLimitFieldNumber = 4,
    kStationErrorLimitFieldNumber = 5,
    kPreviewWindowFieldNumber = 6,
    kStandstillAccelerationFieldNumber = 7,
    kSwitchSpeedFieldNumber = 11,
  };
  // optional .apollo.control.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  private:
  bool _internal_has_station_pid_conf() const;
  public:
  void clear_station_pid_conf();
  const ::apollo::control::PidConf& station_pid_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::PidConf* release_station_pid_conf();
  ::apollo::control::PidConf* mutable_station_pid_conf();
  void set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf);
  private:
  const ::apollo::control::PidConf& _internal_station_pid_conf() const;
  ::apollo::control::PidConf* _internal_mutable_station_pid_conf();
  public:
  void unsafe_arena_set_allocated_station_pid_conf(
      ::apollo::control::PidConf* station_pid_conf);
  ::apollo::control::PidConf* unsafe_arena_release_station_pid_conf();

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  private:
  bool _internal_has_low_speed_pid_conf() const;
  public:
  void clear_low_speed_pid_conf();
  const ::apollo::control::PidConf& low_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::PidConf* release_low_speed_pid_conf();
  ::apollo::control::PidConf* mutable_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf);
  private:
  const ::apollo::control::PidConf& _internal_low_speed_pid_conf() const;
  ::apollo::control::PidConf* _internal_mutable_low_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_low_speed_pid_conf(
      ::apollo::control::PidConf* low_speed_pid_conf);
  ::apollo::control::PidConf* unsafe_arena_release_low_speed_pid_conf();

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  private:
  bool _internal_has_high_speed_pid_conf() const;
  public:
  void clear_high_speed_pid_conf();
  const ::apollo::control::PidConf& high_speed_pid_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::PidConf* release_high_speed_pid_conf();
  ::apollo::control::PidConf* mutable_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf);
  private:
  const ::apollo::control::PidConf& _internal_high_speed_pid_conf() const;
  ::apollo::control::PidConf* _internal_mutable_high_speed_pid_conf();
  public:
  void unsafe_arena_set_allocated_high_speed_pid_conf(
      ::apollo::control::PidConf* high_speed_pid_conf);
  ::apollo::control::PidConf* unsafe_arena_release_high_speed_pid_conf();

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
  bool has_pitch_angle_filter_conf() const;
  private:
  bool _internal_has_pitch_angle_filter_conf() const;
  public:
  void clear_pitch_angle_filter_conf();
  const ::apollo::control::FilterConf& pitch_angle_filter_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::FilterConf* release_pitch_angle_filter_conf();
  ::apollo::control::FilterConf* mutable_pitch_angle_filter_conf();
  void set_allocated_pitch_angle_filter_conf(::apollo::control::FilterConf* pitch_angle_filter_conf);
  private:
  const ::apollo::control::FilterConf& _internal_pitch_angle_filter_conf() const;
  ::apollo::control::FilterConf* _internal_mutable_pitch_angle_filter_conf();
  public:
  void unsafe_arena_set_allocated_pitch_angle_filter_conf(
      ::apollo::control::FilterConf* pitch_angle_filter_conf);
  ::apollo::control::FilterConf* unsafe_arena_release_pitch_angle_filter_conf();

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
  bool has_calibration_table() const;
  private:
  bool _internal_has_calibration_table() const;
  public:
  void clear_calibration_table();
  const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  PROTOBUF_NODISCARD ::apollo::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);
  private:
  const ::apollo::control::calibrationtable::ControlCalibrationTable& _internal_calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* _internal_mutable_calibration_table();
  public:
  void unsafe_arena_set_allocated_calibration_table(
      ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);
  ::apollo::control::calibrationtable::ControlCalibrationTable* unsafe_arena_release_calibration_table();

  // optional double ts = 1;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // optional double brake_deadzone = 2;
  bool has_brake_deadzone() const;
  private:
  bool _internal_has_brake_deadzone() const;
  public:
  void clear_brake_deadzone();
  double brake_deadzone() const;
  void set_brake_deadzone(double value);
  private:
  double _internal_brake_deadzone() const;
  void _internal_set_brake_deadzone(double value);
  public:

  // optional double throttle_deadzone = 3;
  bool has_throttle_deadzone() const;
  private:
  bool _internal_has_throttle_deadzone() const;
  public:
  void clear_throttle_deadzone();
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);
  private:
  double _internal_throttle_deadzone() const;
  void _internal_set_throttle_deadzone(double value);
  public:

  // optional double speed_controller_input_limit = 4;
  bool has_speed_controller_input_limit() const;
  private:
  bool _internal_has_speed_controller_input_limit() const;
  public:
  void clear_speed_controller_input_limit();
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);
  private:
  double _internal_speed_controller_input_limit() const;
  void _internal_set_speed_controller_input_limit(double value);
  public:

  // optional double station_error_limit = 5;
  bool has_station_error_limit() const;
  private:
  bool _internal_has_station_error_limit() const;
  public:
  void clear_station_error_limit();
  double station_error_limit() const;
  void set_station_error_limit(double value);
  private:
  double _internal_station_error_limit() const;
  void _internal_set_station_error_limit(double value);
  public:

  // optional double preview_window = 6;
  bool has_preview_window() const;
  private:
  bool _internal_has_preview_window() const;
  public:
  void clear_preview_window();
  double preview_window() const;
  void set_preview_window(double value);
  private:
  double _internal_preview_window() const;
  void _internal_set_preview_window(double value);
  public:

  // optional double standstill_acceleration = 7;
  bool has_standstill_acceleration() const;
  private:
  bool _internal_has_standstill_acceleration() const;
  public:
  void clear_standstill_acceleration();
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);
  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);
  public:

  // optional double switch_speed = 11;
  bool has_switch_speed() const;
  private:
  bool _internal_has_switch_speed() const;
  public:
  void clear_switch_speed();
  double switch_speed() const;
  void set_switch_speed(double value);
  private:
  double _internal_switch_speed() const;
  void _internal_set_switch_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.LonControllerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::control::PidConf* station_pid_conf_;
    ::apollo::control::PidConf* low_speed_pid_conf_;
    ::apollo::control::PidConf* high_speed_pid_conf_;
    ::apollo::control::FilterConf* pitch_angle_filter_conf_;
    ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table_;
    double ts_;
    double brake_deadzone_;
    double throttle_deadzone_;
    double speed_controller_input_limit_;
    double station_error_limit_;
    double preview_window_;
    double standstill_acceleration_;
    double switch_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilterConf

// optional int32 cutoff_freq = 1;
inline bool FilterConf::_internal_has_cutoff_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterConf::has_cutoff_freq() const {
  return _internal_has_cutoff_freq();
}
inline void FilterConf::clear_cutoff_freq() {
  _impl_.cutoff_freq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FilterConf::_internal_cutoff_freq() const {
  return _impl_.cutoff_freq_;
}
inline int32_t FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.FilterConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void FilterConf::_internal_set_cutoff_freq(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cutoff_freq_ = value;
}
inline void FilterConf::set_cutoff_freq(int32_t value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:apollo.control.FilterConf.cutoff_freq)
}

// -------------------------------------------------------------------

// LonControllerConf

// optional double ts = 1;
inline bool LonControllerConf::_internal_has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LonControllerConf::has_ts() const {
  return _internal_has_ts();
}
inline void LonControllerConf::clear_ts() {
  _impl_.ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LonControllerConf::_internal_ts() const {
  return _impl_.ts_;
}
inline double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.ts)
  return _internal_ts();
}
inline void LonControllerConf::_internal_set_ts(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ts_ = value;
}
inline void LonControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.ts)
}

// optional double brake_deadzone = 2;
inline bool LonControllerConf::_internal_has_brake_deadzone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LonControllerConf::has_brake_deadzone() const {
  return _internal_has_brake_deadzone();
}
inline void LonControllerConf::clear_brake_deadzone() {
  _impl_.brake_deadzone_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double LonControllerConf::_internal_brake_deadzone() const {
  return _impl_.brake_deadzone_;
}
inline double LonControllerConf::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.brake_deadzone)
  return _internal_brake_deadzone();
}
inline void LonControllerConf::_internal_set_brake_deadzone(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.brake_deadzone_ = value;
}
inline void LonControllerConf::set_brake_deadzone(double value) {
  _internal_set_brake_deadzone(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.brake_deadzone)
}

// optional double throttle_deadzone = 3;
inline bool LonControllerConf::_internal_has_throttle_deadzone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LonControllerConf::has_throttle_deadzone() const {
  return _internal_has_throttle_deadzone();
}
inline void LonControllerConf::clear_throttle_deadzone() {
  _impl_.throttle_deadzone_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double LonControllerConf::_internal_throttle_deadzone() const {
  return _impl_.throttle_deadzone_;
}
inline double LonControllerConf::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.throttle_deadzone)
  return _internal_throttle_deadzone();
}
inline void LonControllerConf::_internal_set_throttle_deadzone(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.throttle_deadzone_ = value;
}
inline void LonControllerConf::set_throttle_deadzone(double value) {
  _internal_set_throttle_deadzone(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.throttle_deadzone)
}

// optional double speed_controller_input_limit = 4;
inline bool LonControllerConf::_internal_has_speed_controller_input_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LonControllerConf::has_speed_controller_input_limit() const {
  return _internal_has_speed_controller_input_limit();
}
inline void LonControllerConf::clear_speed_controller_input_limit() {
  _impl_.speed_controller_input_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double LonControllerConf::_internal_speed_controller_input_limit() const {
  return _impl_.speed_controller_input_limit_;
}
inline double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.speed_controller_input_limit)
  return _internal_speed_controller_input_limit();
}
inline void LonControllerConf::_internal_set_speed_controller_input_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.speed_controller_input_limit_ = value;
}
inline void LonControllerConf::set_speed_controller_input_limit(double value) {
  _internal_set_speed_controller_input_limit(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
inline bool LonControllerConf::_internal_has_station_error_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LonControllerConf::has_station_error_limit() const {
  return _internal_has_station_error_limit();
}
inline void LonControllerConf::clear_station_error_limit() {
  _impl_.station_error_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double LonControllerConf::_internal_station_error_limit() const {
  return _impl_.station_error_limit_;
}
inline double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_error_limit)
  return _internal_station_error_limit();
}
inline void LonControllerConf::_internal_set_station_error_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.station_error_limit_ = value;
}
inline void LonControllerConf::set_station_error_limit(double value) {
  _internal_set_station_error_limit(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
inline bool LonControllerConf::_internal_has_preview_window() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LonControllerConf::has_preview_window() const {
  return _internal_has_preview_window();
}
inline void LonControllerConf::clear_preview_window() {
  _impl_.preview_window_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double LonControllerConf::_internal_preview_window() const {
  return _impl_.preview_window_;
}
inline double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.preview_window)
  return _internal_preview_window();
}
inline void LonControllerConf::_internal_set_preview_window(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.preview_window_ = value;
}
inline void LonControllerConf::set_preview_window(double value) {
  _internal_set_preview_window(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
inline bool LonControllerConf::_internal_has_standstill_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LonControllerConf::has_standstill_acceleration() const {
  return _internal_has_standstill_acceleration();
}
inline void LonControllerConf::clear_standstill_acceleration() {
  _impl_.standstill_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double LonControllerConf::_internal_standstill_acceleration() const {
  return _impl_.standstill_acceleration_;
}
inline double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void LonControllerConf::_internal_set_standstill_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.standstill_acceleration_ = value;
}
inline void LonControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.standstill_acceleration)
}

// optional .apollo.control.PidConf station_pid_conf = 8;
inline bool LonControllerConf::_internal_has_station_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.station_pid_conf_ != nullptr);
  return value;
}
inline bool LonControllerConf::has_station_pid_conf() const {
  return _internal_has_station_pid_conf();
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_station_pid_conf() const {
  const ::apollo::control::PidConf* p = _impl_.station_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::PidConf&>(
      ::apollo::control::_PidConf_default_instance_);
}
inline const ::apollo::control::PidConf& LonControllerConf::station_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.station_pid_conf)
  return _internal_station_pid_conf();
}
inline void LonControllerConf::unsafe_arena_set_allocated_station_pid_conf(
    ::apollo::control::PidConf* station_pid_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.station_pid_conf_);
  }
  _impl_.station_pid_conf_ = station_pid_conf;
  if (station_pid_conf) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}
inline ::apollo::control::PidConf* LonControllerConf::release_station_pid_conf() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::control::PidConf* temp = _impl_.station_pid_conf_;
  _impl_.station_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::unsafe_arena_release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.station_pid_conf)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::control::PidConf* temp = _impl_.station_pid_conf_;
  _impl_.station_pid_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::_internal_mutable_station_pid_conf() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaForAllocation());
    _impl_.station_pid_conf_ = p;
  }
  return _impl_.station_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_station_pid_conf() {
  ::apollo::control::PidConf* _msg = _internal_mutable_station_pid_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.station_pid_conf)
  return _msg;
}
inline void LonControllerConf::set_allocated_station_pid_conf(::apollo::control::PidConf* station_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.station_pid_conf_);
  }
  if (station_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(station_pid_conf));
    if (message_arena != submessage_arena) {
      station_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, station_pid_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.station_pid_conf_ = station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.station_pid_conf)
}

// optional .apollo.control.PidConf low_speed_pid_conf = 9;
inline bool LonControllerConf::_internal_has_low_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.low_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonControllerConf::has_low_speed_pid_conf() const {
  return _internal_has_low_speed_pid_conf();
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_low_speed_pid_conf() const {
  const ::apollo::control::PidConf* p = _impl_.low_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::PidConf&>(
      ::apollo::control::_PidConf_default_instance_);
}
inline const ::apollo::control::PidConf& LonControllerConf::low_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.low_speed_pid_conf)
  return _internal_low_speed_pid_conf();
}
inline void LonControllerConf::unsafe_arena_set_allocated_low_speed_pid_conf(
    ::apollo::control::PidConf* low_speed_pid_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_speed_pid_conf_);
  }
  _impl_.low_speed_pid_conf_ = low_speed_pid_conf;
  if (low_speed_pid_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}
inline ::apollo::control::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::control::PidConf* temp = _impl_.low_speed_pid_conf_;
  _impl_.low_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::unsafe_arena_release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.low_speed_pid_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::control::PidConf* temp = _impl_.low_speed_pid_conf_;
  _impl_.low_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::_internal_mutable_low_speed_pid_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.low_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaForAllocation());
    _impl_.low_speed_pid_conf_ = p;
  }
  return _impl_.low_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  ::apollo::control::PidConf* _msg = _internal_mutable_low_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.low_speed_pid_conf)
  return _msg;
}
inline void LonControllerConf::set_allocated_low_speed_pid_conf(::apollo::control::PidConf* low_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_speed_pid_conf_);
  }
  if (low_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_speed_pid_conf));
    if (message_arena != submessage_arena) {
      low_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_speed_pid_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.low_speed_pid_conf_ = low_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.low_speed_pid_conf)
}

// optional .apollo.control.PidConf high_speed_pid_conf = 10;
inline bool LonControllerConf::_internal_has_high_speed_pid_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.high_speed_pid_conf_ != nullptr);
  return value;
}
inline bool LonControllerConf::has_high_speed_pid_conf() const {
  return _internal_has_high_speed_pid_conf();
}
inline const ::apollo::control::PidConf& LonControllerConf::_internal_high_speed_pid_conf() const {
  const ::apollo::control::PidConf* p = _impl_.high_speed_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::PidConf&>(
      ::apollo::control::_PidConf_default_instance_);
}
inline const ::apollo::control::PidConf& LonControllerConf::high_speed_pid_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.high_speed_pid_conf)
  return _internal_high_speed_pid_conf();
}
inline void LonControllerConf::unsafe_arena_set_allocated_high_speed_pid_conf(
    ::apollo::control::PidConf* high_speed_pid_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_speed_pid_conf_);
  }
  _impl_.high_speed_pid_conf_ = high_speed_pid_conf;
  if (high_speed_pid_conf) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}
inline ::apollo::control::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::PidConf* temp = _impl_.high_speed_pid_conf_;
  _impl_.high_speed_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::unsafe_arena_release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.high_speed_pid_conf)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::PidConf* temp = _impl_.high_speed_pid_conf_;
  _impl_.high_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::PidConf* LonControllerConf::_internal_mutable_high_speed_pid_conf() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.high_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::PidConf>(GetArenaForAllocation());
    _impl_.high_speed_pid_conf_ = p;
  }
  return _impl_.high_speed_pid_conf_;
}
inline ::apollo::control::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  ::apollo::control::PidConf* _msg = _internal_mutable_high_speed_pid_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.high_speed_pid_conf)
  return _msg;
}
inline void LonControllerConf::set_allocated_high_speed_pid_conf(::apollo::control::PidConf* high_speed_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_speed_pid_conf_);
  }
  if (high_speed_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_speed_pid_conf));
    if (message_arena != submessage_arena) {
      high_speed_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_speed_pid_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.high_speed_pid_conf_ = high_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
inline bool LonControllerConf::_internal_has_switch_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LonControllerConf::has_switch_speed() const {
  return _internal_has_switch_speed();
}
inline void LonControllerConf::clear_switch_speed() {
  _impl_.switch_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double LonControllerConf::_internal_switch_speed() const {
  return _impl_.switch_speed_;
}
inline double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.switch_speed)
  return _internal_switch_speed();
}
inline void LonControllerConf::_internal_set_switch_speed(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.switch_speed_ = value;
}
inline void LonControllerConf::set_switch_speed(double value) {
  _internal_set_switch_speed(value);
  // @@protoc_insertion_point(field_set:apollo.control.LonControllerConf.switch_speed)
}

// optional .apollo.control.FilterConf pitch_angle_filter_conf = 12;
inline bool LonControllerConf::_internal_has_pitch_angle_filter_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pitch_angle_filter_conf_ != nullptr);
  return value;
}
inline bool LonControllerConf::has_pitch_angle_filter_conf() const {
  return _internal_has_pitch_angle_filter_conf();
}
inline void LonControllerConf::clear_pitch_angle_filter_conf() {
  if (_impl_.pitch_angle_filter_conf_ != nullptr) _impl_.pitch_angle_filter_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::control::FilterConf& LonControllerConf::_internal_pitch_angle_filter_conf() const {
  const ::apollo::control::FilterConf* p = _impl_.pitch_angle_filter_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::FilterConf&>(
      ::apollo::control::_FilterConf_default_instance_);
}
inline const ::apollo::control::FilterConf& LonControllerConf::pitch_angle_filter_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return _internal_pitch_angle_filter_conf();
}
inline void LonControllerConf::unsafe_arena_set_allocated_pitch_angle_filter_conf(
    ::apollo::control::FilterConf* pitch_angle_filter_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pitch_angle_filter_conf_);
  }
  _impl_.pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  if (pitch_angle_filter_conf) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.LonControllerConf.pitch_angle_filter_conf)
}
inline ::apollo::control::FilterConf* LonControllerConf::release_pitch_angle_filter_conf() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::control::FilterConf* temp = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::FilterConf* LonControllerConf::unsafe_arena_release_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::control::FilterConf* temp = _impl_.pitch_angle_filter_conf_;
  _impl_.pitch_angle_filter_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::FilterConf* LonControllerConf::_internal_mutable_pitch_angle_filter_conf() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.pitch_angle_filter_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::FilterConf>(GetArenaForAllocation());
    _impl_.pitch_angle_filter_conf_ = p;
  }
  return _impl_.pitch_angle_filter_conf_;
}
inline ::apollo::control::FilterConf* LonControllerConf::mutable_pitch_angle_filter_conf() {
  ::apollo::control::FilterConf* _msg = _internal_mutable_pitch_angle_filter_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.pitch_angle_filter_conf)
  return _msg;
}
inline void LonControllerConf::set_allocated_pitch_angle_filter_conf(::apollo::control::FilterConf* pitch_angle_filter_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pitch_angle_filter_conf_;
  }
  if (pitch_angle_filter_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pitch_angle_filter_conf);
    if (message_arena != submessage_arena) {
      pitch_angle_filter_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch_angle_filter_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.pitch_angle_filter_conf)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 13;
inline bool LonControllerConf::_internal_has_calibration_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_table_ != nullptr);
  return value;
}
inline bool LonControllerConf::has_calibration_table() const {
  return _internal_has_calibration_table();
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::_internal_calibration_table() const {
  const ::apollo::control::calibrationtable::ControlCalibrationTable* p = _impl_.calibration_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::calibrationtable::ControlCalibrationTable&>(
      ::apollo::control::calibrationtable::_ControlCalibrationTable_default_instance_);
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.LonControllerConf.calibration_table)
  return _internal_calibration_table();
}
inline void LonControllerConf::unsafe_arena_set_allocated_calibration_table(
    ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calibration_table_);
  }
  _impl_.calibration_table_ = calibration_table;
  if (calibration_table) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.LonControllerConf.calibration_table)
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = _impl_.calibration_table_;
  _impl_.calibration_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::unsafe_arena_release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.LonControllerConf.calibration_table)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = _impl_.calibration_table_;
  _impl_.calibration_table_ = nullptr;
  return temp;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::_internal_mutable_calibration_table() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.calibration_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationTable>(GetArenaForAllocation());
    _impl_.calibration_table_ = p;
  }
  return _impl_.calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  ::apollo::control::calibrationtable::ControlCalibrationTable* _msg = _internal_mutable_calibration_table();
  // @@protoc_insertion_point(field_mutable:apollo.control.LonControllerConf.calibration_table)
  return _msg;
}
inline void LonControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calibration_table_);
  }
  if (calibration_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_table));
    if (message_arena != submessage_arena) {
      calibration_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.LonControllerConf.calibration_table)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto
