// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/input_debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto;
namespace apollo {
namespace control {
class InputDebug;
struct InputDebugDefaultTypeInternal;
extern InputDebugDefaultTypeInternal _InputDebug_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::InputDebug* Arena::CreateMaybeMessage<::apollo::control::InputDebug>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

// ===================================================================

class InputDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.InputDebug) */ {
 public:
  inline InputDebug() : InputDebug(nullptr) {}
  ~InputDebug() override;
  explicit PROTOBUF_CONSTEXPR InputDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputDebug(const InputDebug& from);
  InputDebug(InputDebug&& from) noexcept
    : InputDebug() {
    *this = ::std::move(from);
  }

  inline InputDebug& operator=(const InputDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDebug& operator=(InputDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputDebug* internal_default_instance() {
    return reinterpret_cast<const InputDebug*>(
               &_InputDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputDebug& a, InputDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.InputDebug";
  }
  protected:
  explicit InputDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationHeaderFieldNumber = 1,
    kCanbusHeaderFieldNumber = 2,
    kTrajectoryHeaderFieldNumber = 3,
    kLatestReplanTrajectoryHeaderFieldNumber = 4,
  };
  // optional .apollo.common.Header localization_header = 1;
  bool has_localization_header() const;
  private:
  bool _internal_has_localization_header() const;
  public:
  void clear_localization_header();
  const ::apollo::common::Header& localization_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_localization_header();
  ::apollo::common::Header* mutable_localization_header();
  void set_allocated_localization_header(::apollo::common::Header* localization_header);
  private:
  const ::apollo::common::Header& _internal_localization_header() const;
  ::apollo::common::Header* _internal_mutable_localization_header();
  public:
  void unsafe_arena_set_allocated_localization_header(
      ::apollo::common::Header* localization_header);
  ::apollo::common::Header* unsafe_arena_release_localization_header();

  // optional .apollo.common.Header canbus_header = 2;
  bool has_canbus_header() const;
  private:
  bool _internal_has_canbus_header() const;
  public:
  void clear_canbus_header();
  const ::apollo::common::Header& canbus_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_canbus_header();
  ::apollo::common::Header* mutable_canbus_header();
  void set_allocated_canbus_header(::apollo::common::Header* canbus_header);
  private:
  const ::apollo::common::Header& _internal_canbus_header() const;
  ::apollo::common::Header* _internal_mutable_canbus_header();
  public:
  void unsafe_arena_set_allocated_canbus_header(
      ::apollo::common::Header* canbus_header);
  ::apollo::common::Header* unsafe_arena_release_canbus_header();

  // optional .apollo.common.Header trajectory_header = 3;
  bool has_trajectory_header() const;
  private:
  bool _internal_has_trajectory_header() const;
  public:
  void clear_trajectory_header();
  const ::apollo::common::Header& trajectory_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_trajectory_header();
  ::apollo::common::Header* mutable_trajectory_header();
  void set_allocated_trajectory_header(::apollo::common::Header* trajectory_header);
  private:
  const ::apollo::common::Header& _internal_trajectory_header() const;
  ::apollo::common::Header* _internal_mutable_trajectory_header();
  public:
  void unsafe_arena_set_allocated_trajectory_header(
      ::apollo::common::Header* trajectory_header);
  ::apollo::common::Header* unsafe_arena_release_trajectory_header();

  // optional .apollo.common.Header latest_replan_trajectory_header = 4;
  bool has_latest_replan_trajectory_header() const;
  private:
  bool _internal_has_latest_replan_trajectory_header() const;
  public:
  void clear_latest_replan_trajectory_header();
  const ::apollo::common::Header& latest_replan_trajectory_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_latest_replan_trajectory_header();
  ::apollo::common::Header* mutable_latest_replan_trajectory_header();
  void set_allocated_latest_replan_trajectory_header(::apollo::common::Header* latest_replan_trajectory_header);
  private:
  const ::apollo::common::Header& _internal_latest_replan_trajectory_header() const;
  ::apollo::common::Header* _internal_mutable_latest_replan_trajectory_header();
  public:
  void unsafe_arena_set_allocated_latest_replan_trajectory_header(
      ::apollo::common::Header* latest_replan_trajectory_header);
  ::apollo::common::Header* unsafe_arena_release_latest_replan_trajectory_header();

  // @@protoc_insertion_point(class_scope:apollo.control.InputDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Header* localization_header_;
    ::apollo::common::Header* canbus_header_;
    ::apollo::common::Header* trajectory_header_;
    ::apollo::common::Header* latest_replan_trajectory_header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputDebug

// optional .apollo.common.Header localization_header = 1;
inline bool InputDebug::_internal_has_localization_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.localization_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_localization_header() const {
  return _internal_has_localization_header();
}
inline const ::apollo::common::Header& InputDebug::_internal_localization_header() const {
  const ::apollo::common::Header* p = _impl_.localization_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InputDebug::localization_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.localization_header)
  return _internal_localization_header();
}
inline void InputDebug::unsafe_arena_set_allocated_localization_header(
    ::apollo::common::Header* localization_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localization_header_);
  }
  _impl_.localization_header_ = localization_header;
  if (localization_header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.InputDebug.localization_header)
}
inline ::apollo::common::Header* InputDebug::release_localization_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.localization_header_;
  _impl_.localization_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* InputDebug::unsafe_arena_release_localization_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.localization_header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.localization_header_;
  _impl_.localization_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InputDebug::_internal_mutable_localization_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.localization_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.localization_header_ = p;
  }
  return _impl_.localization_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_localization_header() {
  ::apollo::common::Header* _msg = _internal_mutable_localization_header();
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.localization_header)
  return _msg;
}
inline void InputDebug::set_allocated_localization_header(::apollo::common::Header* localization_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localization_header_);
  }
  if (localization_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_header));
    if (message_arena != submessage_arena) {
      localization_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.localization_header_ = localization_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.localization_header)
}

// optional .apollo.common.Header canbus_header = 2;
inline bool InputDebug::_internal_has_canbus_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.canbus_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_canbus_header() const {
  return _internal_has_canbus_header();
}
inline const ::apollo::common::Header& InputDebug::_internal_canbus_header() const {
  const ::apollo::common::Header* p = _impl_.canbus_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InputDebug::canbus_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.canbus_header)
  return _internal_canbus_header();
}
inline void InputDebug::unsafe_arena_set_allocated_canbus_header(
    ::apollo::common::Header* canbus_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.canbus_header_);
  }
  _impl_.canbus_header_ = canbus_header;
  if (canbus_header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.InputDebug.canbus_header)
}
inline ::apollo::common::Header* InputDebug::release_canbus_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.canbus_header_;
  _impl_.canbus_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* InputDebug::unsafe_arena_release_canbus_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.canbus_header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.canbus_header_;
  _impl_.canbus_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InputDebug::_internal_mutable_canbus_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.canbus_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.canbus_header_ = p;
  }
  return _impl_.canbus_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_canbus_header() {
  ::apollo::common::Header* _msg = _internal_mutable_canbus_header();
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.canbus_header)
  return _msg;
}
inline void InputDebug::set_allocated_canbus_header(::apollo::common::Header* canbus_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.canbus_header_);
  }
  if (canbus_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canbus_header));
    if (message_arena != submessage_arena) {
      canbus_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canbus_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.canbus_header_ = canbus_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.canbus_header)
}

// optional .apollo.common.Header trajectory_header = 3;
inline bool InputDebug::_internal_has_trajectory_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trajectory_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_trajectory_header() const {
  return _internal_has_trajectory_header();
}
inline const ::apollo::common::Header& InputDebug::_internal_trajectory_header() const {
  const ::apollo::common::Header* p = _impl_.trajectory_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InputDebug::trajectory_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.trajectory_header)
  return _internal_trajectory_header();
}
inline void InputDebug::unsafe_arena_set_allocated_trajectory_header(
    ::apollo::common::Header* trajectory_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trajectory_header_);
  }
  _impl_.trajectory_header_ = trajectory_header;
  if (trajectory_header) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.InputDebug.trajectory_header)
}
inline ::apollo::common::Header* InputDebug::release_trajectory_header() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = _impl_.trajectory_header_;
  _impl_.trajectory_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* InputDebug::unsafe_arena_release_trajectory_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.trajectory_header)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = _impl_.trajectory_header_;
  _impl_.trajectory_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InputDebug::_internal_mutable_trajectory_header() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.trajectory_header_ = p;
  }
  return _impl_.trajectory_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_trajectory_header() {
  ::apollo::common::Header* _msg = _internal_mutable_trajectory_header();
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.trajectory_header)
  return _msg;
}
inline void InputDebug::set_allocated_trajectory_header(::apollo::common::Header* trajectory_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trajectory_header_);
  }
  if (trajectory_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_header));
    if (message_arena != submessage_arena) {
      trajectory_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.trajectory_header_ = trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.trajectory_header)
}

// optional .apollo.common.Header latest_replan_trajectory_header = 4;
inline bool InputDebug::_internal_has_latest_replan_trajectory_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.latest_replan_trajectory_header_ != nullptr);
  return value;
}
inline bool InputDebug::has_latest_replan_trajectory_header() const {
  return _internal_has_latest_replan_trajectory_header();
}
inline const ::apollo::common::Header& InputDebug::_internal_latest_replan_trajectory_header() const {
  const ::apollo::common::Header* p = _impl_.latest_replan_trajectory_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InputDebug::latest_replan_trajectory_header() const {
  // @@protoc_insertion_point(field_get:apollo.control.InputDebug.latest_replan_trajectory_header)
  return _internal_latest_replan_trajectory_header();
}
inline void InputDebug::unsafe_arena_set_allocated_latest_replan_trajectory_header(
    ::apollo::common::Header* latest_replan_trajectory_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latest_replan_trajectory_header_);
  }
  _impl_.latest_replan_trajectory_header_ = latest_replan_trajectory_header;
  if (latest_replan_trajectory_header) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.InputDebug.latest_replan_trajectory_header)
}
inline ::apollo::common::Header* InputDebug::release_latest_replan_trajectory_header() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Header* temp = _impl_.latest_replan_trajectory_header_;
  _impl_.latest_replan_trajectory_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* InputDebug::unsafe_arena_release_latest_replan_trajectory_header() {
  // @@protoc_insertion_point(field_release:apollo.control.InputDebug.latest_replan_trajectory_header)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Header* temp = _impl_.latest_replan_trajectory_header_;
  _impl_.latest_replan_trajectory_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InputDebug::_internal_mutable_latest_replan_trajectory_header() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.latest_replan_trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.latest_replan_trajectory_header_ = p;
  }
  return _impl_.latest_replan_trajectory_header_;
}
inline ::apollo::common::Header* InputDebug::mutable_latest_replan_trajectory_header() {
  ::apollo::common::Header* _msg = _internal_mutable_latest_replan_trajectory_header();
  // @@protoc_insertion_point(field_mutable:apollo.control.InputDebug.latest_replan_trajectory_header)
  return _msg;
}
inline void InputDebug::set_allocated_latest_replan_trajectory_header(::apollo::common::Header* latest_replan_trajectory_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latest_replan_trajectory_header_);
  }
  if (latest_replan_trajectory_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_replan_trajectory_header));
    if (message_arena != submessage_arena) {
      latest_replan_trajectory_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_replan_trajectory_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.latest_replan_trajectory_header_ = latest_replan_trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.InputDebug.latest_replan_trajectory_header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto
