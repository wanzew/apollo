// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_cmd.proto

#include "modules/control/proto/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace control {
PROTOBUF_CONSTEXPR LatencyStats::LatencyStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.controller_time_ms_)*/{}
  , /*decltype(_impl_.total_time_ms_)*/0
  , /*decltype(_impl_.total_time_exceeded_)*/false} {}
struct LatencyStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyStatsDefaultTypeInternal() {}
  union {
    LatencyStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
PROTOBUF_CONSTEXPR ControlCommand::ControlCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.signal_)*/nullptr
  , /*decltype(_impl_.latency_stats_)*/nullptr
  , /*decltype(_impl_.pad_msg_)*/nullptr
  , /*decltype(_impl_.engage_advice_)*/nullptr
  , /*decltype(_impl_.throttle_)*/0
  , /*decltype(_impl_.brake_)*/0
  , /*decltype(_impl_.steering_rate_)*/0
  , /*decltype(_impl_.steering_target_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.acceleration_)*/0
  , /*decltype(_impl_.left_turn_)*/false
  , /*decltype(_impl_.right_turn_)*/false
  , /*decltype(_impl_.high_beam_)*/false
  , /*decltype(_impl_.low_beam_)*/false
  , /*decltype(_impl_.horn_)*/false
  , /*decltype(_impl_.parking_brake_)*/false
  , /*decltype(_impl_.reset_model_)*/false
  , /*decltype(_impl_.engine_on_off_)*/false
  , /*decltype(_impl_.is_in_safe_mode_)*/false
  , /*decltype(_impl_.driving_mode_)*/0
  , /*decltype(_impl_.trajectory_fraction_)*/0
  , /*decltype(_impl_.gear_location_)*/0
  , /*decltype(_impl_.turnsignal_)*/0} {}
struct ControlCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlCommandDefaultTypeInternal() {}
  union {
    ControlCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
PROTOBUF_CONSTEXPR SimpleLongitudinalDebug::SimpleLongitudinalDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.station_reference_)*/0
  , /*decltype(_impl_.station_error_)*/0
  , /*decltype(_impl_.station_error_limited_)*/0
  , /*decltype(_impl_.preview_station_error_)*/0
  , /*decltype(_impl_.speed_reference_)*/0
  , /*decltype(_impl_.speed_error_)*/0
  , /*decltype(_impl_.speed_controller_input_limited_)*/0
  , /*decltype(_impl_.preview_speed_reference_)*/0
  , /*decltype(_impl_.preview_speed_error_)*/0
  , /*decltype(_impl_.preview_acceleration_reference_)*/0
  , /*decltype(_impl_.acceleration_cmd_closeloop_)*/0
  , /*decltype(_impl_.acceleration_cmd_)*/0
  , /*decltype(_impl_.acceleration_lookup_)*/0
  , /*decltype(_impl_.speed_lookup_)*/0
  , /*decltype(_impl_.calibration_value_)*/0
  , /*decltype(_impl_.throttle_cmd_)*/0
  , /*decltype(_impl_.brake_cmd_)*/0
  , /*decltype(_impl_.slope_offset_compensation_)*/0
  , /*decltype(_impl_.current_station_)*/0
  , /*decltype(_impl_.path_remain_)*/0
  , /*decltype(_impl_.is_full_stop_)*/false} {}
struct SimpleLongitudinalDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleLongitudinalDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleLongitudinalDebugDefaultTypeInternal() {}
  union {
    SimpleLongitudinalDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleLongitudinalDebugDefaultTypeInternal _SimpleLongitudinalDebug_default_instance_;
PROTOBUF_CONSTEXPR SimpleLateralDebug::SimpleLateralDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lateral_error_)*/0
  , /*decltype(_impl_.ref_heading_)*/0
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.heading_error_)*/0
  , /*decltype(_impl_.heading_error_rate_)*/0
  , /*decltype(_impl_.lateral_error_rate_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_.steer_angle_)*/0
  , /*decltype(_impl_.steer_angle_feedforward_)*/0
  , /*decltype(_impl_.steer_angle_lateral_contribution_)*/0
  , /*decltype(_impl_.steer_angle_lateral_rate_contribution_)*/0
  , /*decltype(_impl_.steer_angle_heading_contribution_)*/0
  , /*decltype(_impl_.steer_angle_heading_rate_contribution_)*/0
  , /*decltype(_impl_.steer_angle_feedback_)*/0
  , /*decltype(_impl_.steering_position_)*/0
  , /*decltype(_impl_.ref_speed_)*/0
  , /*decltype(_impl_.steer_angle_limited_)*/0} {}
struct SimpleLateralDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleLateralDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleLateralDebugDefaultTypeInternal() {}
  union {
    SimpleLateralDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleLateralDebugDefaultTypeInternal _SimpleLateralDebug_default_instance_;
PROTOBUF_CONSTEXPR SimpleMPCDebug::SimpleMPCDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matrix_q_updated_)*/{}
  , /*decltype(_impl_.matrix_r_updated_)*/{}
  , /*decltype(_impl_.lateral_error_)*/0
  , /*decltype(_impl_.ref_heading_)*/0
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.heading_error_)*/0
  , /*decltype(_impl_.heading_error_rate_)*/0
  , /*decltype(_impl_.lateral_error_rate_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_.steer_angle_)*/0
  , /*decltype(_impl_.steer_angle_feedforward_)*/0
  , /*decltype(_impl_.steer_angle_lateral_contribution_)*/0
  , /*decltype(_impl_.steer_angle_lateral_rate_contribution_)*/0
  , /*decltype(_impl_.steer_angle_heading_contribution_)*/0
  , /*decltype(_impl_.steer_angle_heading_rate_contribution_)*/0
  , /*decltype(_impl_.steer_angle_feedback_)*/0
  , /*decltype(_impl_.steering_position_)*/0
  , /*decltype(_impl_.ref_speed_)*/0
  , /*decltype(_impl_.steer_angle_limited_)*/0
  , /*decltype(_impl_.station_reference_)*/0
  , /*decltype(_impl_.station_error_)*/0
  , /*decltype(_impl_.speed_reference_)*/0
  , /*decltype(_impl_.speed_error_)*/0
  , /*decltype(_impl_.acceleration_reference_)*/0
  , /*decltype(_impl_.station_feedback_)*/0
  , /*decltype(_impl_.speed_feedback_)*/0
  , /*decltype(_impl_.acceleration_cmd_closeloop_)*/0
  , /*decltype(_impl_.acceleration_cmd_)*/0
  , /*decltype(_impl_.acceleration_lookup_)*/0
  , /*decltype(_impl_.speed_lookup_)*/0
  , /*decltype(_impl_.calibration_value_)*/0
  , /*decltype(_impl_.is_full_stop_)*/false} {}
struct SimpleMPCDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleMPCDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleMPCDebugDefaultTypeInternal() {}
  union {
    SimpleMPCDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleMPCDebugDefaultTypeInternal _SimpleMPCDebug_default_instance_;
PROTOBUF_CONSTEXPR InputDebug::InputDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localization_header_)*/nullptr
  , /*decltype(_impl_.canbus_header_)*/nullptr
  , /*decltype(_impl_.trajectory_header_)*/nullptr} {}
struct InputDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDebugDefaultTypeInternal() {}
  union {
    InputDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDebugDefaultTypeInternal _InputDebug_default_instance_;
PROTOBUF_CONSTEXPR Debug::Debug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.simple_lon_debug_)*/nullptr
  , /*decltype(_impl_.simple_lat_debug_)*/nullptr
  , /*decltype(_impl_.input_debug_)*/nullptr
  , /*decltype(_impl_.simple_mpc_debug_)*/nullptr} {}
struct DebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugDefaultTypeInternal() {}
  union {
    Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugDefaultTypeInternal _Debug_default_instance_;
}  // namespace control
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _impl_.total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _impl_.controller_time_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _impl_.total_time_exceeded_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.steering_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.steering_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.parking_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.reset_model_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.engine_on_off_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.trajectory_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.gear_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.latency_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.pad_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.is_in_safe_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.left_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.right_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.high_beam_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.low_beam_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _impl_.turnsignal_),
  0,
  6,
  7,
  8,
  9,
  17,
  10,
  11,
  18,
  19,
  22,
  21,
  23,
  1,
  2,
  3,
  4,
  5,
  20,
  12,
  13,
  14,
  15,
  16,
  24,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.station_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.station_error_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.speed_controller_input_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.calibration_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.current_station_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _impl_.path_remain_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  20,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.ref_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steering_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.ref_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _impl_.steer_angle_limited_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.ref_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steering_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.ref_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.station_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.station_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.speed_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.calibration_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.matrix_q_updated_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _impl_.matrix_r_updated_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  29,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _impl_.localization_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _impl_.canbus_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _impl_.trajectory_header_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _impl_.simple_lon_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _impl_.simple_lat_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _impl_.input_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _impl_.simple_mpc_debug_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::control::LatencyStats)},
  { 12, 43, -1, sizeof(::apollo::control::ControlCommand)},
  { 68, 95, -1, sizeof(::apollo::control::SimpleLongitudinalDebug)},
  { 116, 139, -1, sizeof(::apollo::control::SimpleLateralDebug)},
  { 156, 194, -1, sizeof(::apollo::control::SimpleMPCDebug)},
  { 226, 235, -1, sizeof(::apollo::control::InputDebug)},
  { 238, 248, -1, sizeof(::apollo::control::Debug)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::control::_LatencyStats_default_instance_._instance,
  &::apollo::control::_ControlCommand_default_instance_._instance,
  &::apollo::control::_SimpleLongitudinalDebug_default_instance_._instance,
  &::apollo::control::_SimpleLateralDebug_default_instance_._instance,
  &::apollo::control::_SimpleMPCDebug_default_instance_._instance,
  &::apollo::control::_InputDebug_default_instance_._instance,
  &::apollo::control::_Debug_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/control/proto/control_cmd.prot"
  "o\022\016apollo.control\032\"modules/canbus/proto/"
  "chassis.proto\032!modules/common/proto/head"
  "er.proto\032)modules/common/proto/vehicle_s"
  "ignal.proto\032#modules/control/proto/pad_m"
  "sg.proto\032&modules/common/proto/drive_sta"
  "te.proto\"^\n\014LatencyStats\022\025\n\rtotal_time_m"
  "s\030\001 \001(\001\022\032\n\022controller_time_ms\030\002 \003(\001\022\033\n\023t"
  "otal_time_exceeded\030\003 \001(\010\"\267\006\n\016ControlComm"
  "and\022%\n\006header\030\001 \001(\0132\025.apollo.common.Head"
  "er\022\020\n\010throttle\030\003 \001(\001\022\r\n\005brake\030\004 \001(\001\022\025\n\rs"
  "teering_rate\030\006 \001(\001\022\027\n\017steering_target\030\007 "
  "\001(\001\022\025\n\rparking_brake\030\010 \001(\010\022\r\n\005speed\030\t \001("
  "\001\022\024\n\014acceleration\030\n \001(\001\022\027\n\013reset_model\030\020"
  " \001(\010B\002\030\001\022\025\n\rengine_on_off\030\021 \001(\010\022\033\n\023traje"
  "ctory_fraction\030\022 \001(\001\022<\n\014driving_mode\030\023 \001"
  "(\0162\".apollo.canbus.Chassis.DrivingModeB\002"
  "\030\001\022:\n\rgear_location\030\024 \001(\0162#.apollo.canbu"
  "s.Chassis.GearPosition\022$\n\005debug\030\026 \001(\0132\025."
  "apollo.control.Debug\022,\n\006signal\030\027 \001(\0132\034.a"
  "pollo.common.VehicleSignal\0223\n\rlatency_st"
  "ats\030\030 \001(\0132\034.apollo.control.LatencyStats\022"
  "+\n\007pad_msg\030\031 \001(\0132\032.apollo.control.PadMes"
  "sage\0222\n\rengage_advice\030\032 \001(\0132\033.apollo.com"
  "mon.EngageAdvice\022\036\n\017is_in_safe_mode\030\033 \001("
  "\010:\005false\022\025\n\tleft_turn\030\r \001(\010B\002\030\001\022\026\n\nright"
  "_turn\030\016 \001(\010B\002\030\001\022\025\n\thigh_beam\030\013 \001(\010B\002\030\001\022\024"
  "\n\010low_beam\030\014 \001(\010B\002\030\001\022\020\n\004horn\030\017 \001(\010B\002\030\001\0222"
  "\n\nturnsignal\030\025 \001(\0162\032.apollo.control.Turn"
  "SignalB\002\030\001\"\341\004\n\027SimpleLongitudinalDebug\022\031"
  "\n\021station_reference\030\001 \001(\001\022\025\n\rstation_err"
  "or\030\002 \001(\001\022\035\n\025station_error_limited\030\003 \001(\001\022"
  "\035\n\025preview_station_error\030\004 \001(\001\022\027\n\017speed_"
  "reference\030\005 \001(\001\022\023\n\013speed_error\030\006 \001(\001\022&\n\036"
  "speed_controller_input_limited\030\007 \001(\001\022\037\n\027"
  "preview_speed_reference\030\010 \001(\001\022\033\n\023preview"
  "_speed_error\030\t \001(\001\022&\n\036preview_accelerati"
  "on_reference\030\n \001(\001\022\"\n\032acceleration_cmd_c"
  "loseloop\030\013 \001(\001\022\030\n\020acceleration_cmd\030\014 \001(\001"
  "\022\033\n\023acceleration_lookup\030\r \001(\001\022\024\n\014speed_l"
  "ookup\030\016 \001(\001\022\031\n\021calibration_value\030\017 \001(\001\022\024"
  "\n\014throttle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd\030\021 \001(\001\022"
  "\024\n\014is_full_stop\030\022 \001(\010\022!\n\031slope_offset_co"
  "mpensation\030\023 \001(\001\022\027\n\017current_station\030\024 \001("
  "\001\022\023\n\013path_remain\030\025 \001(\001\"\204\004\n\022SimpleLateral"
  "Debug\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_head"
  "ing\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_er"
  "ror\030\004 \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n"
  "\022lateral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007"
  " \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angle"
  "_feedforward\030\t \001(\001\022(\n steer_angle_latera"
  "l_contribution\030\n \001(\001\022-\n%steer_angle_late"
  "ral_rate_contribution\030\013 \001(\001\022(\n steer_ang"
  "le_heading_contribution\030\014 \001(\001\022-\n%steer_a"
  "ngle_heading_rate_contribution\030\r \001(\001\022\034\n\024"
  "steer_angle_feedback\030\016 \001(\001\022\031\n\021steering_p"
  "osition\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023stee"
  "r_angle_limited\030\021 \001(\001\"\210\007\n\016SimpleMPCDebug"
  "\022\025\n\rlateral_error\030\001 \001(\001\022\023\n\013ref_heading\030\002"
  " \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\rheading_error\030\004"
  " \001(\001\022\032\n\022heading_error_rate\030\005 \001(\001\022\032\n\022late"
  "ral_error_rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001\022"
  "\023\n\013steer_angle\030\010 \001(\001\022\037\n\027steer_angle_feed"
  "forward\030\t \001(\001\022(\n steer_angle_lateral_con"
  "tribution\030\n \001(\001\022-\n%steer_angle_lateral_r"
  "ate_contribution\030\013 \001(\001\022(\n steer_angle_he"
  "ading_contribution\030\014 \001(\001\022-\n%steer_angle_"
  "heading_rate_contribution\030\r \001(\001\022\034\n\024steer"
  "_angle_feedback\030\016 \001(\001\022\031\n\021steering_positi"
  "on\030\017 \001(\001\022\021\n\tref_speed\030\020 \001(\001\022\033\n\023steer_ang"
  "le_limited\030\021 \001(\001\022\031\n\021station_reference\030\022 "
  "\001(\001\022\025\n\rstation_error\030\023 \001(\001\022\027\n\017speed_refe"
  "rence\030\024 \001(\001\022\023\n\013speed_error\030\025 \001(\001\022\036\n\026acce"
  "leration_reference\030\026 \001(\001\022\024\n\014is_full_stop"
  "\030\027 \001(\010\022\030\n\020station_feedback\030\030 \001(\001\022\026\n\016spee"
  "d_feedback\030\031 \001(\001\022\"\n\032acceleration_cmd_clo"
  "seloop\030\032 \001(\001\022\030\n\020acceleration_cmd\030\033 \001(\001\022\033"
  "\n\023acceleration_lookup\030\034 \001(\001\022\024\n\014speed_loo"
  "kup\030\035 \001(\001\022\031\n\021calibration_value\030\036 \001(\001\022\030\n\020"
  "matrix_q_updated\030\037 \003(\001\022\030\n\020matrix_r_updat"
  "ed\030  \003(\001\"\240\001\n\nInputDebug\0222\n\023localization_"
  "header\030\001 \001(\0132\025.apollo.common.Header\022,\n\rc"
  "anbus_header\030\002 \001(\0132\025.apollo.common.Heade"
  "r\0220\n\021trajectory_header\030\003 \001(\0132\025.apollo.co"
  "mmon.Header\"\363\001\n\005Debug\022A\n\020simple_lon_debu"
  "g\030\001 \001(\0132\'.apollo.control.SimpleLongitudi"
  "nalDebug\022<\n\020simple_lat_debug\030\002 \001(\0132\".apo"
  "llo.control.SimpleLateralDebug\022/\n\013input_"
  "debug\030\003 \001(\0132\032.apollo.control.InputDebug\022"
  "8\n\020simple_mpc_debug\030\004 \001(\0132\036.apollo.contr"
  "ol.SimpleMPCDebug*:\n\nTurnSignal\022\r\n\tTURN_"
  "NONE\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto = {
    false, false, 3677, descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto,
    "modules/control/proto/control_cmd.proto",
    &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_deps, 5, 7,
    schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::offsets,
    file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto,
    file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto);
namespace apollo {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnSignal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto);
  return file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LatencyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStats>()._impl_._has_bits_);
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_time_exceeded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LatencyStats::LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_time_ms_){from._impl_.controller_time_ms_}
    , decltype(_impl_.total_time_ms_){}
    , decltype(_impl_.total_time_exceeded_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_time_ms_, &from._impl_.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_time_exceeded_) -
    reinterpret_cast<char*>(&_impl_.total_time_ms_)) + sizeof(_impl_.total_time_exceeded_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatencyStats)
}

inline void LatencyStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_time_ms_){arena}
    , decltype(_impl_.total_time_ms_){0}
    , decltype(_impl_.total_time_exceeded_){false}
  };
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.control.LatencyStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.controller_time_ms_.~RepeatedField();
}

void LatencyStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatencyStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.controller_time_ms_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_time_exceeded_) -
        reinterpret_cast<char*>(&_impl_.total_time_ms_)) + sizeof(_impl_.total_time_exceeded_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_total_time_ms(&has_bits);
          _impl_.total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double controller_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_controller_time_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_controller_time_ms(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool total_time_exceeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_time_exceeded(&has_bits);
          _impl_.total_time_exceeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatencyStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0, n = this->_internal_controller_time_ms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_controller_time_ms(i), target);
  }

  // optional bool total_time_exceeded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_total_time_exceeded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatencyStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double controller_time_ms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controller_time_ms_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_controller_time_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool total_time_exceeded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyStats::GetClassData() const { return &_class_data_; }

void LatencyStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyStats *>(to)->MergeFrom(
      static_cast<const LatencyStats &>(from));
}


void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.controller_time_ms_.MergeFrom(from._impl_.controller_time_ms_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.total_time_ms_ = from._impl_.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.total_time_exceeded_ = from._impl_.total_time_exceeded_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.controller_time_ms_.InternalSwap(&other->_impl_.controller_time_ms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_exceeded_)
      + sizeof(LatencyStats::_impl_.total_time_exceeded_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.total_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.total_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[0]);
}

// ===================================================================

class ControlCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCommand>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const ControlCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steering_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_reset_model(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_engine_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_trajectory_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::control::Debug& debug(const ControlCommand* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::VehicleSignal& signal(const ControlCommand* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::control::LatencyStats& latency_stats(const ControlCommand* msg);
  static void set_has_latency_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::PadMessage& pad_msg(const ControlCommand* msg);
  static void set_has_pad_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const ControlCommand* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_in_safe_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_left_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_right_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_high_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_low_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_turnsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::apollo::common::Header&
ControlCommand::_Internal::header(const ControlCommand* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::control::Debug&
ControlCommand::_Internal::debug(const ControlCommand* msg) {
  return *msg->_impl_.debug_;
}
const ::apollo::common::VehicleSignal&
ControlCommand::_Internal::signal(const ControlCommand* msg) {
  return *msg->_impl_.signal_;
}
const ::apollo::control::LatencyStats&
ControlCommand::_Internal::latency_stats(const ControlCommand* msg) {
  return *msg->_impl_.latency_stats_;
}
const ::apollo::control::PadMessage&
ControlCommand::_Internal::pad_msg(const ControlCommand* msg) {
  return *msg->_impl_.pad_msg_;
}
const ::apollo::common::EngageAdvice&
ControlCommand::_Internal::engage_advice(const ControlCommand* msg) {
  return *msg->_impl_.engage_advice_;
}
void ControlCommand::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_signal() {
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ControlCommand::clear_pad_msg() {
  if (_impl_.pad_msg_ != nullptr) _impl_.pad_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ControlCommand::clear_engage_advice() {
  if (_impl_.engage_advice_ != nullptr) _impl_.engage_advice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ControlCommand::ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.latency_stats_){nullptr}
    , decltype(_impl_.pad_msg_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.throttle_){}
    , decltype(_impl_.brake_){}
    , decltype(_impl_.steering_rate_){}
    , decltype(_impl_.steering_target_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.acceleration_){}
    , decltype(_impl_.left_turn_){}
    , decltype(_impl_.right_turn_){}
    , decltype(_impl_.high_beam_){}
    , decltype(_impl_.low_beam_){}
    , decltype(_impl_.horn_){}
    , decltype(_impl_.parking_brake_){}
    , decltype(_impl_.reset_model_){}
    , decltype(_impl_.engine_on_off_){}
    , decltype(_impl_.is_in_safe_mode_){}
    , decltype(_impl_.driving_mode_){}
    , decltype(_impl_.trajectory_fraction_){}
    , decltype(_impl_.gear_location_){}
    , decltype(_impl_.turnsignal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_debug()) {
    _impl_.debug_ = new ::apollo::control::Debug(*from._impl_.debug_);
  }
  if (from._internal_has_signal()) {
    _impl_.signal_ = new ::apollo::common::VehicleSignal(*from._impl_.signal_);
  }
  if (from._internal_has_latency_stats()) {
    _impl_.latency_stats_ = new ::apollo::control::LatencyStats(*from._impl_.latency_stats_);
  }
  if (from._internal_has_pad_msg()) {
    _impl_.pad_msg_ = new ::apollo::control::PadMessage(*from._impl_.pad_msg_);
  }
  if (from._internal_has_engage_advice()) {
    _impl_.engage_advice_ = new ::apollo::common::EngageAdvice(*from._impl_.engage_advice_);
  }
  ::memcpy(&_impl_.throttle_, &from._impl_.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turnsignal_) -
    reinterpret_cast<char*>(&_impl_.throttle_)) + sizeof(_impl_.turnsignal_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommand)
}

inline void ControlCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.latency_stats_){nullptr}
    , decltype(_impl_.pad_msg_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.throttle_){0}
    , decltype(_impl_.brake_){0}
    , decltype(_impl_.steering_rate_){0}
    , decltype(_impl_.steering_target_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.acceleration_){0}
    , decltype(_impl_.left_turn_){false}
    , decltype(_impl_.right_turn_){false}
    , decltype(_impl_.high_beam_){false}
    , decltype(_impl_.low_beam_){false}
    , decltype(_impl_.horn_){false}
    , decltype(_impl_.parking_brake_){false}
    , decltype(_impl_.reset_model_){false}
    , decltype(_impl_.engine_on_off_){false}
    , decltype(_impl_.is_in_safe_mode_){false}
    , decltype(_impl_.driving_mode_){0}
    , decltype(_impl_.trajectory_fraction_){0}
    , decltype(_impl_.gear_location_){0}
    , decltype(_impl_.turnsignal_){0}
  };
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.debug_;
  if (this != internal_default_instance()) delete _impl_.signal_;
  if (this != internal_default_instance()) delete _impl_.latency_stats_;
  if (this != internal_default_instance()) delete _impl_.pad_msg_;
  if (this != internal_default_instance()) delete _impl_.engage_advice_;
}

void ControlCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.debug_ != nullptr);
      _impl_.debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.latency_stats_ != nullptr);
      _impl_.latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.pad_msg_ != nullptr);
      _impl_.pad_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.engage_advice_ != nullptr);
      _impl_.engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_) -
        reinterpret_cast<char*>(&_impl_.throttle_)) + sizeof(_impl_.brake_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.steering_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.low_beam_) -
        reinterpret_cast<char*>(&_impl_.steering_rate_)) + sizeof(_impl_.low_beam_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.horn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_location_) -
        reinterpret_cast<char*>(&_impl_.horn_)) + sizeof(_impl_.gear_location_));
  }
  _impl_.turnsignal_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_throttle(&has_bits);
          _impl_.throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_brake(&has_bits);
          _impl_.brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_steering_rate(&has_bits);
          _impl_.steering_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_steering_target(&has_bits);
          _impl_.steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_brake = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_parking_brake(&has_bits);
          _impl_.parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_acceleration(&has_bits);
          _impl_.acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_beam = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_high_beam(&has_bits);
          _impl_.high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_beam = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_low_beam(&has_bits);
          _impl_.low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool left_turn = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_left_turn(&has_bits);
          _impl_.left_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_turn = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_right_turn(&has_bits);
          _impl_.right_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool horn = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_horn(&has_bits);
          _impl_.horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reset_model = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_reset_model(&has_bits);
          _impl_.reset_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool engine_on_off = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_engine_on_off(&has_bits);
          _impl_.engine_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double trajectory_fraction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_trajectory_fraction(&has_bits);
          _impl_.trajectory_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::control::TurnSignal_IsValid(val))) {
            _internal_set_turnsignal(static_cast<::apollo::control::TurnSignal>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.Debug debug = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal signal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.LatencyStats latency_stats = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.PadMessage pad_msg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pad_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_safe_mode = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_is_in_safe_mode(&has_bits);
          _impl_.is_in_safe_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double throttle = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle(), target);
  }

  // optional double brake = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_brake(), target);
  }

  // optional double steering_rate = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_steering_rate(), target);
  }

  // optional double steering_target = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_steering_target(), target);
  }

  // optional bool parking_brake = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_parking_brake(), target);
  }

  // optional double speed = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_speed(), target);
  }

  // optional double acceleration = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_acceleration(), target);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_high_beam(), target);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_low_beam(), target);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_left_turn(), target);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_right_turn(), target);
  }

  // optional bool horn = 15 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_horn(), target);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_reset_model(), target);
  }

  // optional bool engine_on_off = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_engine_on_off(), target);
  }

  // optional double trajectory_fraction = 18;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_trajectory_fraction(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_gear_location(), target);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_turnsignal(), target);
  }

  // optional .apollo.control.Debug debug = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::latency_stats(this),
        _Internal::latency_stats(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::pad_msg(this),
        _Internal::pad_msg(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 26;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::engage_advice(this),
        _Internal::engage_advice(this).GetCachedSize(), target, stream);
  }

  // optional bool is_in_safe_mode = 27 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_is_in_safe_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.control.Debug debug = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 23;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_);
    }

    // optional .apollo.control.LatencyStats latency_stats = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latency_stats_);
    }

    // optional .apollo.control.PadMessage pad_msg = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pad_msg_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.engage_advice_);
    }

    // optional double throttle = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double brake = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steering_rate = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steering_target = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool left_turn = 13 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool right_turn = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam = 11 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 12 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool horn = 15 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool reset_model = 16 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool engine_on_off = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool is_in_safe_mode = 27 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional double trajectory_fraction = 18;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turnsignal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCommand::GetClassData() const { return &_class_data_; }

void ControlCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlCommand *>(to)->MergeFrom(
      static_cast<const ControlCommand &>(from));
}


void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_debug()->::apollo::control::Debug::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latency_stats()->::apollo::control::LatencyStats::MergeFrom(from._internal_latency_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pad_msg()->::apollo::control::PadMessage::MergeFrom(from._internal_pad_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.throttle_ = from._impl_.throttle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.brake_ = from._impl_.brake_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.steering_rate_ = from._impl_.steering_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.steering_target_ = from._impl_.steering_target_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.acceleration_ = from._impl_.acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.left_turn_ = from._impl_.left_turn_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.right_turn_ = from._impl_.right_turn_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.high_beam_ = from._impl_.high_beam_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.low_beam_ = from._impl_.low_beam_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.horn_ = from._impl_.horn_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.parking_brake_ = from._impl_.parking_brake_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.reset_model_ = from._impl_.reset_model_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.engine_on_off_ = from._impl_.engine_on_off_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.is_in_safe_mode_ = from._impl_.is_in_safe_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.driving_mode_ = from._impl_.driving_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.trajectory_fraction_ = from._impl_.trajectory_fraction_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.gear_location_ = from._impl_.gear_location_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_turnsignal(from._internal_turnsignal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCommand, _impl_.turnsignal_)
      + sizeof(ControlCommand::_impl_.turnsignal_)
      - PROTOBUF_FIELD_OFFSET(ControlCommand, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[1]);
}

// ===================================================================

class SimpleLongitudinalDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLongitudinalDebug>()._impl_._has_bits_);
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_station_error_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_controller_input_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_current_station(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

SimpleLongitudinalDebug::SimpleLongitudinalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.station_reference_){}
    , decltype(_impl_.station_error_){}
    , decltype(_impl_.station_error_limited_){}
    , decltype(_impl_.preview_station_error_){}
    , decltype(_impl_.speed_reference_){}
    , decltype(_impl_.speed_error_){}
    , decltype(_impl_.speed_controller_input_limited_){}
    , decltype(_impl_.preview_speed_reference_){}
    , decltype(_impl_.preview_speed_error_){}
    , decltype(_impl_.preview_acceleration_reference_){}
    , decltype(_impl_.acceleration_cmd_closeloop_){}
    , decltype(_impl_.acceleration_cmd_){}
    , decltype(_impl_.acceleration_lookup_){}
    , decltype(_impl_.speed_lookup_){}
    , decltype(_impl_.calibration_value_){}
    , decltype(_impl_.throttle_cmd_){}
    , decltype(_impl_.brake_cmd_){}
    , decltype(_impl_.slope_offset_compensation_){}
    , decltype(_impl_.current_station_){}
    , decltype(_impl_.path_remain_){}
    , decltype(_impl_.is_full_stop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.station_reference_, &from._impl_.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_full_stop_) -
    reinterpret_cast<char*>(&_impl_.station_reference_)) + sizeof(_impl_.is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLongitudinalDebug)
}

inline void SimpleLongitudinalDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.station_reference_){0}
    , decltype(_impl_.station_error_){0}
    , decltype(_impl_.station_error_limited_){0}
    , decltype(_impl_.preview_station_error_){0}
    , decltype(_impl_.speed_reference_){0}
    , decltype(_impl_.speed_error_){0}
    , decltype(_impl_.speed_controller_input_limited_){0}
    , decltype(_impl_.preview_speed_reference_){0}
    , decltype(_impl_.preview_speed_error_){0}
    , decltype(_impl_.preview_acceleration_reference_){0}
    , decltype(_impl_.acceleration_cmd_closeloop_){0}
    , decltype(_impl_.acceleration_cmd_){0}
    , decltype(_impl_.acceleration_lookup_){0}
    , decltype(_impl_.speed_lookup_){0}
    , decltype(_impl_.calibration_value_){0}
    , decltype(_impl_.throttle_cmd_){0}
    , decltype(_impl_.brake_cmd_){0}
    , decltype(_impl_.slope_offset_compensation_){0}
    , decltype(_impl_.current_station_){0}
    , decltype(_impl_.path_remain_){0}
    , decltype(_impl_.is_full_stop_){false}
  };
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLongitudinalDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleLongitudinalDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLongitudinalDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.station_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preview_speed_reference_) -
        reinterpret_cast<char*>(&_impl_.station_reference_)) + sizeof(_impl_.preview_speed_reference_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.preview_speed_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.throttle_cmd_) -
        reinterpret_cast<char*>(&_impl_.preview_speed_error_)) + sizeof(_impl_.throttle_cmd_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.brake_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_full_stop_) -
        reinterpret_cast<char*>(&_impl_.brake_cmd_)) + sizeof(_impl_.is_full_stop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLongitudinalDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double station_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_station_reference(&has_bits);
          _impl_.station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_station_error(&has_bits);
          _impl_.station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double station_error_limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_station_error_limited(&has_bits);
          _impl_.station_error_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preview_station_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_preview_station_error(&has_bits);
          _impl_.preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_speed_reference(&has_bits);
          _impl_.speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed_error(&has_bits);
          _impl_.speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_controller_input_limited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_speed_controller_input_limited(&has_bits);
          _impl_.speed_controller_input_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_preview_speed_reference(&has_bits);
          _impl_.preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preview_speed_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_preview_speed_error(&has_bits);
          _impl_.preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_preview_acceleration_reference(&has_bits);
          _impl_.preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_acceleration_cmd_closeloop(&has_bits);
          _impl_.acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_acceleration_cmd(&has_bits);
          _impl_.acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_acceleration_lookup(&has_bits);
          _impl_.acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_lookup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_speed_lookup(&has_bits);
          _impl_.speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double calibration_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_calibration_value(&has_bits);
          _impl_.calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_cmd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_throttle_cmd(&has_bits);
          _impl_.throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_cmd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_brake_cmd(&has_bits);
          _impl_.brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_full_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_full_stop(&has_bits);
          _impl_.is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_slope_offset_compensation(&has_bits);
          _impl_.slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double current_station = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_current_station(&has_bits);
          _impl_.current_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_remain = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_path_remain(&has_bits);
          _impl_.path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleLongitudinalDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLongitudinalDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_brake_cmd(), target);
  }

  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_full_stop(), target);
  }

  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_current_station(), target);
  }

  // optional double path_remain = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_path_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double station_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double speed_reference = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed_error = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double preview_speed_error = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_lookup = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double speed_lookup = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double brake_cmd = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double current_station = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double path_remain = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleLongitudinalDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleLongitudinalDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleLongitudinalDebug::GetClassData() const { return &_class_data_; }

void SimpleLongitudinalDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleLongitudinalDebug *>(to)->MergeFrom(
      static_cast<const SimpleLongitudinalDebug &>(from));
}


void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.station_reference_ = from._impl_.station_reference_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.station_error_ = from._impl_.station_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.station_error_limited_ = from._impl_.station_error_limited_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.preview_station_error_ = from._impl_.preview_station_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.speed_reference_ = from._impl_.speed_reference_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.speed_error_ = from._impl_.speed_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.speed_controller_input_limited_ = from._impl_.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.preview_speed_reference_ = from._impl_.preview_speed_reference_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.preview_speed_error_ = from._impl_.preview_speed_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.preview_acceleration_reference_ = from._impl_.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.acceleration_cmd_closeloop_ = from._impl_.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.acceleration_cmd_ = from._impl_.acceleration_cmd_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.acceleration_lookup_ = from._impl_.acceleration_lookup_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.speed_lookup_ = from._impl_.speed_lookup_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.calibration_value_ = from._impl_.calibration_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.throttle_cmd_ = from._impl_.throttle_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.brake_cmd_ = from._impl_.brake_cmd_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.slope_offset_compensation_ = from._impl_.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.current_station_ = from._impl_.current_station_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.path_remain_ = from._impl_.path_remain_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.is_full_stop_ = from._impl_.is_full_stop_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, _impl_.is_full_stop_)
      + sizeof(SimpleLongitudinalDebug::_impl_.is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, _impl_.station_reference_)>(
          reinterpret_cast<char*>(&_impl_.station_reference_),
          reinterpret_cast<char*>(&other->_impl_.station_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[2]);
}

// ===================================================================

class SimpleLateralDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLateralDebug>()._impl_._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

SimpleLateralDebug::SimpleLateralDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lateral_error_){}
    , decltype(_impl_.ref_heading_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.heading_error_){}
    , decltype(_impl_.heading_error_rate_){}
    , decltype(_impl_.lateral_error_rate_){}
    , decltype(_impl_.curvature_){}
    , decltype(_impl_.steer_angle_){}
    , decltype(_impl_.steer_angle_feedforward_){}
    , decltype(_impl_.steer_angle_lateral_contribution_){}
    , decltype(_impl_.steer_angle_lateral_rate_contribution_){}
    , decltype(_impl_.steer_angle_heading_contribution_){}
    , decltype(_impl_.steer_angle_heading_rate_contribution_){}
    , decltype(_impl_.steer_angle_feedback_){}
    , decltype(_impl_.steering_position_){}
    , decltype(_impl_.ref_speed_){}
    , decltype(_impl_.steer_angle_limited_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lateral_error_, &from._impl_.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steer_angle_limited_) -
    reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.steer_angle_limited_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLateralDebug)
}

inline void SimpleLateralDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lateral_error_){0}
    , decltype(_impl_.ref_heading_){0}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.heading_error_){0}
    , decltype(_impl_.heading_error_rate_){0}
    , decltype(_impl_.lateral_error_rate_){0}
    , decltype(_impl_.curvature_){0}
    , decltype(_impl_.steer_angle_){0}
    , decltype(_impl_.steer_angle_feedforward_){0}
    , decltype(_impl_.steer_angle_lateral_contribution_){0}
    , decltype(_impl_.steer_angle_lateral_rate_contribution_){0}
    , decltype(_impl_.steer_angle_heading_contribution_){0}
    , decltype(_impl_.steer_angle_heading_rate_contribution_){0}
    , decltype(_impl_.steer_angle_feedback_){0}
    , decltype(_impl_.steering_position_){0}
    , decltype(_impl_.ref_speed_){0}
    , decltype(_impl_.steer_angle_limited_){0}
  };
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLateralDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleLateralDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleLateralDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLateralDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steer_angle_) -
        reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.steer_angle_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.steer_angle_feedforward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ref_speed_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_feedforward_)) + sizeof(_impl_.ref_speed_));
  }
  _impl_.steer_angle_limited_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLateralDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lateral_error(&has_bits);
          _impl_.lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ref_heading(&has_bits);
          _impl_.ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_heading_error(&has_bits);
          _impl_.heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&has_bits);
          _impl_.heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&has_bits);
          _impl_.lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_curvature(&has_bits);
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_steer_angle(&has_bits);
          _impl_.steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&has_bits);
          _impl_.steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&has_bits);
          _impl_.steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&has_bits);
          _impl_.steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&has_bits);
          _impl_.steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&has_bits);
          _impl_.steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&has_bits);
          _impl_.steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_steering_position(&has_bits);
          _impl_.steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_ref_speed(&has_bits);
          _impl_.ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&has_bits);
          _impl_.steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleLateralDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLateralDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLateralDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleLateralDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleLateralDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleLateralDebug::GetClassData() const { return &_class_data_; }

void SimpleLateralDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleLateralDebug *>(to)->MergeFrom(
      static_cast<const SimpleLateralDebug &>(from));
}


void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lateral_error_ = from._impl_.lateral_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ref_heading_ = from._impl_.ref_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.heading_error_ = from._impl_.heading_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.heading_error_rate_ = from._impl_.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.lateral_error_rate_ = from._impl_.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.steer_angle_ = from._impl_.steer_angle_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.steer_angle_feedforward_ = from._impl_.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.steer_angle_lateral_contribution_ = from._impl_.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.steer_angle_lateral_rate_contribution_ = from._impl_.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.steer_angle_heading_contribution_ = from._impl_.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.steer_angle_heading_rate_contribution_ = from._impl_.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.steer_angle_feedback_ = from._impl_.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.steering_position_ = from._impl_.steering_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.ref_speed_ = from._impl_.ref_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_steer_angle_limited(from._internal_steer_angle_limited());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, _impl_.steer_angle_limited_)
      + sizeof(SimpleLateralDebug::_impl_.steer_angle_limited_)
      - PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, _impl_.lateral_error_)>(
          reinterpret_cast<char*>(&_impl_.lateral_error_),
          reinterpret_cast<char*>(&other->_impl_.lateral_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLateralDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[3]);
}

// ===================================================================

class SimpleMPCDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleMPCDebug>()._impl_._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_station_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_speed_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

SimpleMPCDebug::SimpleMPCDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matrix_q_updated_){from._impl_.matrix_q_updated_}
    , decltype(_impl_.matrix_r_updated_){from._impl_.matrix_r_updated_}
    , decltype(_impl_.lateral_error_){}
    , decltype(_impl_.ref_heading_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.heading_error_){}
    , decltype(_impl_.heading_error_rate_){}
    , decltype(_impl_.lateral_error_rate_){}
    , decltype(_impl_.curvature_){}
    , decltype(_impl_.steer_angle_){}
    , decltype(_impl_.steer_angle_feedforward_){}
    , decltype(_impl_.steer_angle_lateral_contribution_){}
    , decltype(_impl_.steer_angle_lateral_rate_contribution_){}
    , decltype(_impl_.steer_angle_heading_contribution_){}
    , decltype(_impl_.steer_angle_heading_rate_contribution_){}
    , decltype(_impl_.steer_angle_feedback_){}
    , decltype(_impl_.steering_position_){}
    , decltype(_impl_.ref_speed_){}
    , decltype(_impl_.steer_angle_limited_){}
    , decltype(_impl_.station_reference_){}
    , decltype(_impl_.station_error_){}
    , decltype(_impl_.speed_reference_){}
    , decltype(_impl_.speed_error_){}
    , decltype(_impl_.acceleration_reference_){}
    , decltype(_impl_.station_feedback_){}
    , decltype(_impl_.speed_feedback_){}
    , decltype(_impl_.acceleration_cmd_closeloop_){}
    , decltype(_impl_.acceleration_cmd_){}
    , decltype(_impl_.acceleration_lookup_){}
    , decltype(_impl_.speed_lookup_){}
    , decltype(_impl_.calibration_value_){}
    , decltype(_impl_.is_full_stop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lateral_error_, &from._impl_.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_full_stop_) -
    reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleMPCDebug)
}

inline void SimpleMPCDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matrix_q_updated_){arena}
    , decltype(_impl_.matrix_r_updated_){arena}
    , decltype(_impl_.lateral_error_){0}
    , decltype(_impl_.ref_heading_){0}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.heading_error_){0}
    , decltype(_impl_.heading_error_rate_){0}
    , decltype(_impl_.lateral_error_rate_){0}
    , decltype(_impl_.curvature_){0}
    , decltype(_impl_.steer_angle_){0}
    , decltype(_impl_.steer_angle_feedforward_){0}
    , decltype(_impl_.steer_angle_lateral_contribution_){0}
    , decltype(_impl_.steer_angle_lateral_rate_contribution_){0}
    , decltype(_impl_.steer_angle_heading_contribution_){0}
    , decltype(_impl_.steer_angle_heading_rate_contribution_){0}
    , decltype(_impl_.steer_angle_feedback_){0}
    , decltype(_impl_.steering_position_){0}
    , decltype(_impl_.ref_speed_){0}
    , decltype(_impl_.steer_angle_limited_){0}
    , decltype(_impl_.station_reference_){0}
    , decltype(_impl_.station_error_){0}
    , decltype(_impl_.speed_reference_){0}
    , decltype(_impl_.speed_error_){0}
    , decltype(_impl_.acceleration_reference_){0}
    , decltype(_impl_.station_feedback_){0}
    , decltype(_impl_.speed_feedback_){0}
    , decltype(_impl_.acceleration_cmd_closeloop_){0}
    , decltype(_impl_.acceleration_cmd_){0}
    , decltype(_impl_.acceleration_lookup_){0}
    , decltype(_impl_.speed_lookup_){0}
    , decltype(_impl_.calibration_value_){0}
    , decltype(_impl_.is_full_stop_){false}
  };
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleMPCDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleMPCDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matrix_q_updated_.~RepeatedField();
  _impl_.matrix_r_updated_.~RepeatedField();
}

void SimpleMPCDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleMPCDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matrix_q_updated_.Clear();
  _impl_.matrix_r_updated_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steer_angle_) -
        reinterpret_cast<char*>(&_impl_.lateral_error_)) + sizeof(_impl_.steer_angle_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.steer_angle_feedforward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ref_speed_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_feedforward_)) + sizeof(_impl_.ref_speed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.steer_angle_limited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_feedback_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_limited_)) + sizeof(_impl_.speed_feedback_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.acceleration_cmd_closeloop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_full_stop_) -
        reinterpret_cast<char*>(&_impl_.acceleration_cmd_closeloop_)) + sizeof(_impl_.is_full_stop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMPCDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lateral_error(&has_bits);
          _impl_.lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ref_heading(&has_bits);
          _impl_.ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_heading_error(&has_bits);
          _impl_.heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&has_bits);
          _impl_.heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&has_bits);
          _impl_.lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_curvature(&has_bits);
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_steer_angle(&has_bits);
          _impl_.steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&has_bits);
          _impl_.steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&has_bits);
          _impl_.steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&has_bits);
          _impl_.steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&has_bits);
          _impl_.steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&has_bits);
          _impl_.steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&has_bits);
          _impl_.steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_steering_position(&has_bits);
          _impl_.steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_ref_speed(&has_bits);
          _impl_.ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&has_bits);
          _impl_.steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double station_reference = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_station_reference(&has_bits);
          _impl_.station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double station_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_station_error(&has_bits);
          _impl_.station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_speed_reference(&has_bits);
          _impl_.speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_speed_error(&has_bits);
          _impl_.speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_reference = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_acceleration_reference(&has_bits);
          _impl_.acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_full_stop = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_full_stop(&has_bits);
          _impl_.is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double station_feedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_station_feedback(&has_bits);
          _impl_.station_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_feedback = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_speed_feedback(&has_bits);
          _impl_.speed_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_acceleration_cmd_closeloop(&has_bits);
          _impl_.acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_acceleration_cmd(&has_bits);
          _impl_.acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_acceleration_lookup(&has_bits);
          _impl_.acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_lookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_speed_lookup(&has_bits);
          _impl_.speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double calibration_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_calibration_value(&has_bits);
          _impl_.calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_q_updated = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_q_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<249>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q_updated(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_r_updated = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_r_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<257>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r_updated(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleMPCDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleMPCDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_acceleration_reference(), target);
  }

  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_is_full_stop(), target);
  }

  // optional double station_feedback = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_calibration_value(), target);
  }

  // repeated double matrix_q_updated = 31;
  for (int i = 0, n = this->_internal_matrix_q_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_matrix_q_updated(i), target);
  }

  // repeated double matrix_r_updated = 32;
  for (int i = 0, n = this->_internal_matrix_r_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_matrix_r_updated(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleMPCDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q_updated = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_matrix_q_updated_size());
    total_size += data_size;
  }

  // repeated double matrix_r_updated = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_matrix_r_updated_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double speed_error = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double station_feedback = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double speed_feedback = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional double acceleration_cmd_closeloop = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_lookup = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double calibration_value = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 23;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleMPCDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleMPCDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleMPCDebug::GetClassData() const { return &_class_data_; }

void SimpleMPCDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleMPCDebug *>(to)->MergeFrom(
      static_cast<const SimpleMPCDebug &>(from));
}


void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.matrix_q_updated_.MergeFrom(from._impl_.matrix_q_updated_);
  _impl_.matrix_r_updated_.MergeFrom(from._impl_.matrix_r_updated_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lateral_error_ = from._impl_.lateral_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ref_heading_ = from._impl_.ref_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.heading_error_ = from._impl_.heading_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.heading_error_rate_ = from._impl_.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.lateral_error_rate_ = from._impl_.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.steer_angle_ = from._impl_.steer_angle_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.steer_angle_feedforward_ = from._impl_.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.steer_angle_lateral_contribution_ = from._impl_.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.steer_angle_lateral_rate_contribution_ = from._impl_.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.steer_angle_heading_contribution_ = from._impl_.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.steer_angle_heading_rate_contribution_ = from._impl_.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.steer_angle_feedback_ = from._impl_.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.steering_position_ = from._impl_.steering_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.ref_speed_ = from._impl_.ref_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.steer_angle_limited_ = from._impl_.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.station_reference_ = from._impl_.station_reference_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.station_error_ = from._impl_.station_error_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.speed_reference_ = from._impl_.speed_reference_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.speed_error_ = from._impl_.speed_error_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.acceleration_reference_ = from._impl_.acceleration_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.station_feedback_ = from._impl_.station_feedback_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.speed_feedback_ = from._impl_.speed_feedback_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.acceleration_cmd_closeloop_ = from._impl_.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.acceleration_cmd_ = from._impl_.acceleration_cmd_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.acceleration_lookup_ = from._impl_.acceleration_lookup_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.speed_lookup_ = from._impl_.speed_lookup_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.calibration_value_ = from._impl_.calibration_value_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.is_full_stop_ = from._impl_.is_full_stop_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matrix_q_updated_.InternalSwap(&other->_impl_.matrix_q_updated_);
  _impl_.matrix_r_updated_.InternalSwap(&other->_impl_.matrix_r_updated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, _impl_.is_full_stop_)
      + sizeof(SimpleMPCDebug::_impl_.is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, _impl_.lateral_error_)>(
          reinterpret_cast<char*>(&_impl_.lateral_error_),
          reinterpret_cast<char*>(&other->_impl_.lateral_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMPCDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[4]);
}

// ===================================================================

class InputDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<InputDebug>()._impl_._has_bits_);
  static const ::apollo::common::Header& localization_header(const InputDebug* msg);
  static void set_has_localization_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Header& canbus_header(const InputDebug* msg);
  static void set_has_canbus_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Header& trajectory_header(const InputDebug* msg);
  static void set_has_trajectory_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
InputDebug::_Internal::localization_header(const InputDebug* msg) {
  return *msg->_impl_.localization_header_;
}
const ::apollo::common::Header&
InputDebug::_Internal::canbus_header(const InputDebug* msg) {
  return *msg->_impl_.canbus_header_;
}
const ::apollo::common::Header&
InputDebug::_Internal::trajectory_header(const InputDebug* msg) {
  return *msg->_impl_.trajectory_header_;
}
void InputDebug::clear_localization_header() {
  if (_impl_.localization_header_ != nullptr) _impl_.localization_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InputDebug::clear_canbus_header() {
  if (_impl_.canbus_header_ != nullptr) _impl_.canbus_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InputDebug::clear_trajectory_header() {
  if (_impl_.trajectory_header_ != nullptr) _impl_.trajectory_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InputDebug::InputDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.InputDebug)
}
InputDebug::InputDebug(const InputDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localization_header_){nullptr}
    , decltype(_impl_.canbus_header_){nullptr}
    , decltype(_impl_.trajectory_header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localization_header()) {
    _impl_.localization_header_ = new ::apollo::common::Header(*from._impl_.localization_header_);
  }
  if (from._internal_has_canbus_header()) {
    _impl_.canbus_header_ = new ::apollo::common::Header(*from._impl_.canbus_header_);
  }
  if (from._internal_has_trajectory_header()) {
    _impl_.trajectory_header_ = new ::apollo::common::Header(*from._impl_.trajectory_header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.InputDebug)
}

inline void InputDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localization_header_){nullptr}
    , decltype(_impl_.canbus_header_){nullptr}
    , decltype(_impl_.trajectory_header_){nullptr}
  };
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.InputDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.localization_header_;
  if (this != internal_default_instance()) delete _impl_.canbus_header_;
  if (this != internal_default_instance()) delete _impl_.trajectory_header_;
}

void InputDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.InputDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.localization_header_ != nullptr);
      _impl_.localization_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.canbus_header_ != nullptr);
      _impl_.canbus_header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.trajectory_header_ != nullptr);
      _impl_.trajectory_header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header localization_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header canbus_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_canbus_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header trajectory_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.InputDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header localization_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::localization_header(this),
        _Internal::localization_header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::canbus_header(this),
        _Internal::canbus_header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trajectory_header(this),
        _Internal::trajectory_header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.InputDebug)
  return target;
}

size_t InputDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.InputDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header localization_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.localization_header_);
    }

    // optional .apollo.common.Header canbus_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.canbus_header_);
    }

    // optional .apollo.common.Header trajectory_header = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trajectory_header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputDebug::GetClassData() const { return &_class_data_; }

void InputDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputDebug *>(to)->MergeFrom(
      static_cast<const InputDebug &>(from));
}


void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_localization_header()->::apollo::common::Header::MergeFrom(from._internal_localization_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_canbus_header()->::apollo::common::Header::MergeFrom(from._internal_canbus_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trajectory_header()->::apollo::common::Header::MergeFrom(from._internal_trajectory_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {
  return true;
}

void InputDebug::InternalSwap(InputDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputDebug, _impl_.trajectory_header_)
      + sizeof(InputDebug::_impl_.trajectory_header_)
      - PROTOBUF_FIELD_OFFSET(InputDebug, _impl_.localization_header_)>(
          reinterpret_cast<char*>(&_impl_.localization_header_),
          reinterpret_cast<char*>(&other->_impl_.localization_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[5]);
}

// ===================================================================

class Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug>()._impl_._has_bits_);
  static const ::apollo::control::SimpleLongitudinalDebug& simple_lon_debug(const Debug* msg);
  static void set_has_simple_lon_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::control::SimpleLateralDebug& simple_lat_debug(const Debug* msg);
  static void set_has_simple_lat_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::control::InputDebug& input_debug(const Debug* msg);
  static void set_has_input_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::control::SimpleMPCDebug& simple_mpc_debug(const Debug* msg);
  static void set_has_simple_mpc_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::control::SimpleLongitudinalDebug&
Debug::_Internal::simple_lon_debug(const Debug* msg) {
  return *msg->_impl_.simple_lon_debug_;
}
const ::apollo::control::SimpleLateralDebug&
Debug::_Internal::simple_lat_debug(const Debug* msg) {
  return *msg->_impl_.simple_lat_debug_;
}
const ::apollo::control::InputDebug&
Debug::_Internal::input_debug(const Debug* msg) {
  return *msg->_impl_.input_debug_;
}
const ::apollo::control::SimpleMPCDebug&
Debug::_Internal::simple_mpc_debug(const Debug* msg) {
  return *msg->_impl_.simple_mpc_debug_;
}
Debug::Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simple_lon_debug_){nullptr}
    , decltype(_impl_.simple_lat_debug_){nullptr}
    , decltype(_impl_.input_debug_){nullptr}
    , decltype(_impl_.simple_mpc_debug_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simple_lon_debug()) {
    _impl_.simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug(*from._impl_.simple_lon_debug_);
  }
  if (from._internal_has_simple_lat_debug()) {
    _impl_.simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug(*from._impl_.simple_lat_debug_);
  }
  if (from._internal_has_input_debug()) {
    _impl_.input_debug_ = new ::apollo::control::InputDebug(*from._impl_.input_debug_);
  }
  if (from._internal_has_simple_mpc_debug()) {
    _impl_.simple_mpc_debug_ = new ::apollo::control::SimpleMPCDebug(*from._impl_.simple_mpc_debug_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.Debug)
}

inline void Debug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simple_lon_debug_){nullptr}
    , decltype(_impl_.simple_lat_debug_){nullptr}
    , decltype(_impl_.input_debug_){nullptr}
    , decltype(_impl_.simple_mpc_debug_){nullptr}
  };
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.control.Debug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.simple_lon_debug_;
  if (this != internal_default_instance()) delete _impl_.simple_lat_debug_;
  if (this != internal_default_instance()) delete _impl_.input_debug_;
  if (this != internal_default_instance()) delete _impl_.simple_mpc_debug_;
}

void Debug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Debug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.simple_lon_debug_ != nullptr);
      _impl_.simple_lon_debug_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.simple_lat_debug_ != nullptr);
      _impl_.simple_lat_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.input_debug_ != nullptr);
      _impl_.input_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.simple_mpc_debug_ != nullptr);
      _impl_.simple_mpc_debug_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Debug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lon_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lat_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.InputDebug input_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_mpc_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Debug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Debug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::simple_lon_debug(this),
        _Internal::simple_lon_debug(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::simple_lat_debug(this),
        _Internal::simple_lat_debug(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::input_debug(this),
        _Internal::input_debug(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::simple_mpc_debug(this),
        _Internal::simple_mpc_debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Debug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.simple_lon_debug_);
    }

    // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.simple_lat_debug_);
    }

    // optional .apollo.control.InputDebug input_debug = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_debug_);
    }

    // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.simple_mpc_debug_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Debug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Debug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Debug::GetClassData() const { return &_class_data_; }

void Debug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Debug *>(to)->MergeFrom(
      static_cast<const Debug &>(from));
}


void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simple_lon_debug()->::apollo::control::SimpleLongitudinalDebug::MergeFrom(from._internal_simple_lon_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_simple_lat_debug()->::apollo::control::SimpleLateralDebug::MergeFrom(from._internal_simple_lat_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from._internal_input_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_simple_mpc_debug()->::apollo::control::SimpleMPCDebug::MergeFrom(from._internal_simple_mpc_debug());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Debug, _impl_.simple_mpc_debug_)
      + sizeof(Debug::_impl_.simple_mpc_debug_)
      - PROTOBUF_FIELD_OFFSET(Debug, _impl_.simple_lon_debug_)>(
          reinterpret_cast<char*>(&_impl_.simple_lon_debug_),
          reinterpret_cast<char*>(&other->_impl_.simple_lon_debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::LatencyStats*
Arena::CreateMaybeMessage< ::apollo::control::LatencyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::ControlCommand*
Arena::CreateMaybeMessage< ::apollo::control::ControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::ControlCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleLongitudinalDebug*
Arena::CreateMaybeMessage< ::apollo::control::SimpleLongitudinalDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::SimpleLongitudinalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleLateralDebug*
Arena::CreateMaybeMessage< ::apollo::control::SimpleLateralDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::SimpleLateralDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleMPCDebug*
Arena::CreateMaybeMessage< ::apollo::control::SimpleMPCDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::SimpleMPCDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::InputDebug*
Arena::CreateMaybeMessage< ::apollo::control::InputDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::InputDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::Debug*
Arena::CreateMaybeMessage< ::apollo::control::Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::Debug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
