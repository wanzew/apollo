// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/preprocessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fpreprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fpreprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/drive_state.pb.h"
#include "modules/control/proto/input_debug.pb.h"
#include "modules/control/proto/local_view.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fpreprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2fpreprocessor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto;
namespace apollo {
namespace control {
class Preprocessor;
struct PreprocessorDefaultTypeInternal;
extern PreprocessorDefaultTypeInternal _Preprocessor_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::Preprocessor* Arena::CreateMaybeMessage<::apollo::control::Preprocessor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

// ===================================================================

class Preprocessor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.Preprocessor) */ {
 public:
  inline Preprocessor() : Preprocessor(nullptr) {}
  ~Preprocessor() override;
  explicit PROTOBUF_CONSTEXPR Preprocessor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Preprocessor(const Preprocessor& from);
  Preprocessor(Preprocessor&& from) noexcept
    : Preprocessor() {
    *this = ::std::move(from);
  }

  inline Preprocessor& operator=(const Preprocessor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Preprocessor& operator=(Preprocessor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Preprocessor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Preprocessor* internal_default_instance() {
    return reinterpret_cast<const Preprocessor*>(
               &_Preprocessor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Preprocessor& a, Preprocessor& b) {
    a.Swap(&b);
  }
  inline void Swap(Preprocessor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Preprocessor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Preprocessor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Preprocessor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Preprocessor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Preprocessor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preprocessor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.Preprocessor";
  }
  protected:
  explicit Preprocessor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstopReasonFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kLocalViewFieldNumber = 2,
    kEngageAdviceFieldNumber = 4,
    kInputDebugFieldNumber = 5,
    kReceivedPadMsgFieldNumber = 6,
    kEstopFieldNumber = 7,
  };
  // optional string estop_reason = 8;
  bool has_estop_reason() const;
  private:
  bool _internal_has_estop_reason() const;
  public:
  void clear_estop_reason();
  const std::string& estop_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_estop_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_estop_reason();
  PROTOBUF_NODISCARD std::string* release_estop_reason();
  void set_allocated_estop_reason(std::string* estop_reason);
  private:
  const std::string& _internal_estop_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_estop_reason(const std::string& value);
  std::string* _internal_mutable_estop_reason();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.control.LocalView local_view = 2;
  bool has_local_view() const;
  private:
  bool _internal_has_local_view() const;
  public:
  void clear_local_view();
  const ::apollo::control::LocalView& local_view() const;
  PROTOBUF_NODISCARD ::apollo::control::LocalView* release_local_view();
  ::apollo::control::LocalView* mutable_local_view();
  void set_allocated_local_view(::apollo::control::LocalView* local_view);
  private:
  const ::apollo::control::LocalView& _internal_local_view() const;
  ::apollo::control::LocalView* _internal_mutable_local_view();
  public:
  void unsafe_arena_set_allocated_local_view(
      ::apollo::control::LocalView* local_view);
  ::apollo::control::LocalView* unsafe_arena_release_local_view();

  // optional .apollo.common.EngageAdvice engage_advice = 4;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const ::apollo::common::EngageAdvice& engage_advice() const;
  PROTOBUF_NODISCARD ::apollo::common::EngageAdvice* release_engage_advice();
  ::apollo::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice);
  private:
  const ::apollo::common::EngageAdvice& _internal_engage_advice() const;
  ::apollo::common::EngageAdvice* _internal_mutable_engage_advice();
  public:
  void unsafe_arena_set_allocated_engage_advice(
      ::apollo::common::EngageAdvice* engage_advice);
  ::apollo::common::EngageAdvice* unsafe_arena_release_engage_advice();

  // optional .apollo.control.InputDebug input_debug = 5;
  bool has_input_debug() const;
  private:
  bool _internal_has_input_debug() const;
  public:
  void clear_input_debug();
  const ::apollo::control::InputDebug& input_debug() const;
  PROTOBUF_NODISCARD ::apollo::control::InputDebug* release_input_debug();
  ::apollo::control::InputDebug* mutable_input_debug();
  void set_allocated_input_debug(::apollo::control::InputDebug* input_debug);
  private:
  const ::apollo::control::InputDebug& _internal_input_debug() const;
  ::apollo::control::InputDebug* _internal_mutable_input_debug();
  public:
  void unsafe_arena_set_allocated_input_debug(
      ::apollo::control::InputDebug* input_debug);
  ::apollo::control::InputDebug* unsafe_arena_release_input_debug();

  // optional bool received_pad_msg = 6 [default = false];
  bool has_received_pad_msg() const;
  private:
  bool _internal_has_received_pad_msg() const;
  public:
  void clear_received_pad_msg();
  bool received_pad_msg() const;
  void set_received_pad_msg(bool value);
  private:
  bool _internal_received_pad_msg() const;
  void _internal_set_received_pad_msg(bool value);
  public:

  // optional bool estop = 7 [default = false];
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  bool estop() const;
  void set_estop(bool value);
  private:
  bool _internal_estop() const;
  void _internal_set_estop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.Preprocessor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr estop_reason_;
    ::apollo::common::Header* header_;
    ::apollo::control::LocalView* local_view_;
    ::apollo::common::EngageAdvice* engage_advice_;
    ::apollo::control::InputDebug* input_debug_;
    bool received_pad_msg_;
    bool estop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fpreprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Preprocessor

// optional .apollo.common.Header header = 1;
inline bool Preprocessor::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Preprocessor::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Preprocessor::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Preprocessor::header() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.header)
  return _internal_header();
}
inline void Preprocessor::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.Preprocessor.header)
}
inline ::apollo::common::Header* Preprocessor::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Preprocessor::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.control.Preprocessor.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Preprocessor::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* Preprocessor::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.control.Preprocessor.header)
  return _msg;
}
inline void Preprocessor::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Preprocessor.header)
}

// optional .apollo.control.LocalView local_view = 2;
inline bool Preprocessor::_internal_has_local_view() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_view_ != nullptr);
  return value;
}
inline bool Preprocessor::has_local_view() const {
  return _internal_has_local_view();
}
inline const ::apollo::control::LocalView& Preprocessor::_internal_local_view() const {
  const ::apollo::control::LocalView* p = _impl_.local_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::LocalView&>(
      ::apollo::control::_LocalView_default_instance_);
}
inline const ::apollo::control::LocalView& Preprocessor::local_view() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.local_view)
  return _internal_local_view();
}
inline void Preprocessor::unsafe_arena_set_allocated_local_view(
    ::apollo::control::LocalView* local_view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_view_);
  }
  _impl_.local_view_ = local_view;
  if (local_view) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.Preprocessor.local_view)
}
inline ::apollo::control::LocalView* Preprocessor::release_local_view() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::LocalView* temp = _impl_.local_view_;
  _impl_.local_view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::LocalView* Preprocessor::unsafe_arena_release_local_view() {
  // @@protoc_insertion_point(field_release:apollo.control.Preprocessor.local_view)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::LocalView* temp = _impl_.local_view_;
  _impl_.local_view_ = nullptr;
  return temp;
}
inline ::apollo::control::LocalView* Preprocessor::_internal_mutable_local_view() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.local_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::LocalView>(GetArenaForAllocation());
    _impl_.local_view_ = p;
  }
  return _impl_.local_view_;
}
inline ::apollo::control::LocalView* Preprocessor::mutable_local_view() {
  ::apollo::control::LocalView* _msg = _internal_mutable_local_view();
  // @@protoc_insertion_point(field_mutable:apollo.control.Preprocessor.local_view)
  return _msg;
}
inline void Preprocessor::set_allocated_local_view(::apollo::control::LocalView* local_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_view_);
  }
  if (local_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_view));
    if (message_arena != submessage_arena) {
      local_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_view, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.local_view_ = local_view;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Preprocessor.local_view)
}

// optional .apollo.common.EngageAdvice engage_advice = 4;
inline bool Preprocessor::_internal_has_engage_advice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engage_advice_ != nullptr);
  return value;
}
inline bool Preprocessor::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline const ::apollo::common::EngageAdvice& Preprocessor::_internal_engage_advice() const {
  const ::apollo::common::EngageAdvice* p = _impl_.engage_advice_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::EngageAdvice&>(
      ::apollo::common::_EngageAdvice_default_instance_);
}
inline const ::apollo::common::EngageAdvice& Preprocessor::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.engage_advice)
  return _internal_engage_advice();
}
inline void Preprocessor::unsafe_arena_set_allocated_engage_advice(
    ::apollo::common::EngageAdvice* engage_advice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.engage_advice_);
  }
  _impl_.engage_advice_ = engage_advice;
  if (engage_advice) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.Preprocessor.engage_advice)
}
inline ::apollo::common::EngageAdvice* Preprocessor::release_engage_advice() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::EngageAdvice* Preprocessor::unsafe_arena_release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.control.Preprocessor.engage_advice)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
  return temp;
}
inline ::apollo::common::EngageAdvice* Preprocessor::_internal_mutable_engage_advice() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::EngageAdvice>(GetArenaForAllocation());
    _impl_.engage_advice_ = p;
  }
  return _impl_.engage_advice_;
}
inline ::apollo::common::EngageAdvice* Preprocessor::mutable_engage_advice() {
  ::apollo::common::EngageAdvice* _msg = _internal_mutable_engage_advice();
  // @@protoc_insertion_point(field_mutable:apollo.control.Preprocessor.engage_advice)
  return _msg;
}
inline void Preprocessor::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice));
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Preprocessor.engage_advice)
}

// optional .apollo.control.InputDebug input_debug = 5;
inline bool Preprocessor::_internal_has_input_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_debug_ != nullptr);
  return value;
}
inline bool Preprocessor::has_input_debug() const {
  return _internal_has_input_debug();
}
inline const ::apollo::control::InputDebug& Preprocessor::_internal_input_debug() const {
  const ::apollo::control::InputDebug* p = _impl_.input_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::InputDebug&>(
      ::apollo::control::_InputDebug_default_instance_);
}
inline const ::apollo::control::InputDebug& Preprocessor::input_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.input_debug)
  return _internal_input_debug();
}
inline void Preprocessor::unsafe_arena_set_allocated_input_debug(
    ::apollo::control::InputDebug* input_debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_debug_);
  }
  _impl_.input_debug_ = input_debug;
  if (input_debug) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.Preprocessor.input_debug)
}
inline ::apollo::control::InputDebug* Preprocessor::release_input_debug() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::control::InputDebug* temp = _impl_.input_debug_;
  _impl_.input_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::InputDebug* Preprocessor::unsafe_arena_release_input_debug() {
  // @@protoc_insertion_point(field_release:apollo.control.Preprocessor.input_debug)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::control::InputDebug* temp = _impl_.input_debug_;
  _impl_.input_debug_ = nullptr;
  return temp;
}
inline ::apollo::control::InputDebug* Preprocessor::_internal_mutable_input_debug() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.input_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::InputDebug>(GetArenaForAllocation());
    _impl_.input_debug_ = p;
  }
  return _impl_.input_debug_;
}
inline ::apollo::control::InputDebug* Preprocessor::mutable_input_debug() {
  ::apollo::control::InputDebug* _msg = _internal_mutable_input_debug();
  // @@protoc_insertion_point(field_mutable:apollo.control.Preprocessor.input_debug)
  return _msg;
}
inline void Preprocessor::set_allocated_input_debug(::apollo::control::InputDebug* input_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_debug_);
  }
  if (input_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_debug));
    if (message_arena != submessage_arena) {
      input_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_debug, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.input_debug_ = input_debug;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Preprocessor.input_debug)
}

// optional bool received_pad_msg = 6 [default = false];
inline bool Preprocessor::_internal_has_received_pad_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Preprocessor::has_received_pad_msg() const {
  return _internal_has_received_pad_msg();
}
inline void Preprocessor::clear_received_pad_msg() {
  _impl_.received_pad_msg_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Preprocessor::_internal_received_pad_msg() const {
  return _impl_.received_pad_msg_;
}
inline bool Preprocessor::received_pad_msg() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.received_pad_msg)
  return _internal_received_pad_msg();
}
inline void Preprocessor::_internal_set_received_pad_msg(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.received_pad_msg_ = value;
}
inline void Preprocessor::set_received_pad_msg(bool value) {
  _internal_set_received_pad_msg(value);
  // @@protoc_insertion_point(field_set:apollo.control.Preprocessor.received_pad_msg)
}

// optional bool estop = 7 [default = false];
inline bool Preprocessor::_internal_has_estop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Preprocessor::has_estop() const {
  return _internal_has_estop();
}
inline void Preprocessor::clear_estop() {
  _impl_.estop_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Preprocessor::_internal_estop() const {
  return _impl_.estop_;
}
inline bool Preprocessor::estop() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.estop)
  return _internal_estop();
}
inline void Preprocessor::_internal_set_estop(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.estop_ = value;
}
inline void Preprocessor::set_estop(bool value) {
  _internal_set_estop(value);
  // @@protoc_insertion_point(field_set:apollo.control.Preprocessor.estop)
}

// optional string estop_reason = 8;
inline bool Preprocessor::_internal_has_estop_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Preprocessor::has_estop_reason() const {
  return _internal_has_estop_reason();
}
inline void Preprocessor::clear_estop_reason() {
  _impl_.estop_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Preprocessor::estop_reason() const {
  // @@protoc_insertion_point(field_get:apollo.control.Preprocessor.estop_reason)
  return _internal_estop_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Preprocessor::set_estop_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.estop_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.control.Preprocessor.estop_reason)
}
inline std::string* Preprocessor::mutable_estop_reason() {
  std::string* _s = _internal_mutable_estop_reason();
  // @@protoc_insertion_point(field_mutable:apollo.control.Preprocessor.estop_reason)
  return _s;
}
inline const std::string& Preprocessor::_internal_estop_reason() const {
  return _impl_.estop_reason_.Get();
}
inline void Preprocessor::_internal_set_estop_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.estop_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* Preprocessor::_internal_mutable_estop_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.estop_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* Preprocessor::release_estop_reason() {
  // @@protoc_insertion_point(field_release:apollo.control.Preprocessor.estop_reason)
  if (!_internal_has_estop_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.estop_reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.estop_reason_.IsDefault()) {
    _impl_.estop_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Preprocessor::set_allocated_estop_reason(std::string* estop_reason) {
  if (estop_reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.estop_reason_.SetAllocated(estop_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.estop_reason_.IsDefault()) {
    _impl_.estop_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.control.Preprocessor.estop_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fpreprocessor_2eproto
