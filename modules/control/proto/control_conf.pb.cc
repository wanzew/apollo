// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_conf.proto

#include "modules/control/proto/control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace control {
PROTOBUF_CONSTEXPR ControlConf::ControlConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_controllers_)*/{}
  , /*decltype(_impl_.lat_controller_conf_)*/nullptr
  , /*decltype(_impl_.lon_controller_conf_)*/nullptr
  , /*decltype(_impl_.mpc_controller_conf_)*/nullptr
  , /*decltype(_impl_.enable_csv_debug_)*/false
  , /*decltype(_impl_.enable_speed_station_preview_)*/false
  , /*decltype(_impl_.is_control_test_mode_)*/false
  , /*decltype(_impl_.use_preview_speed_for_table_)*/false
  , /*decltype(_impl_.enable_input_timestamp_check_)*/false
  , /*decltype(_impl_.enable_slope_offset_)*/false
  , /*decltype(_impl_.enable_navigation_mode_error_filter_)*/false
  , /*decltype(_impl_.control_period_)*/0
  , /*decltype(_impl_.max_planning_interval_sec_)*/0
  , /*decltype(_impl_.max_planning_delay_threshold_)*/0
  , /*decltype(_impl_.driving_mode_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.soft_estop_brake_)*/0
  , /*decltype(_impl_.max_status_interval_sec_)*/0
  , /*decltype(_impl_.trajectory_period_)*/0
  , /*decltype(_impl_.chassis_period_)*/0
  , /*decltype(_impl_.localization_period_)*/0
  , /*decltype(_impl_.minimum_speed_resolution_)*/0
  , /*decltype(_impl_.query_relative_time_)*/0
  , /*decltype(_impl_.minimum_speed_protection_)*/0
  , /*decltype(_impl_.max_steering_percentage_allowed_)*/0
  , /*decltype(_impl_.control_test_duration_)*/-1
  , /*decltype(_impl_.max_localization_miss_num_)*/20
  , /*decltype(_impl_.max_chassis_miss_num_)*/20
  , /*decltype(_impl_.max_acceleration_when_stopped_)*/0.01
  , /*decltype(_impl_.steer_angle_rate_)*/100
  , /*decltype(_impl_.max_planning_miss_num_)*/20
  , /*decltype(_impl_.enable_gain_scheduler_)*/true
  , /*decltype(_impl_.set_steer_limit_)*/true
  , /*decltype(_impl_.enable_navigation_mode_position_update_)*/true
  , /*decltype(_impl_.enable_persistent_estop_)*/true
  , /*decltype(_impl_.lock_steer_speed_)*/0.081
  , /*decltype(_impl_.max_path_remain_when_stopped_)*/0.3} {}
struct ControlConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlConfDefaultTypeInternal() {}
  union {
    ControlConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlConfDefaultTypeInternal _ControlConf_default_instance_;
}  // namespace control
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.control_test_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_csv_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_speed_station_preview_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.is_control_test_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.use_preview_speed_for_table_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_input_timestamp_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_localization_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_chassis_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_planning_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_acceleration_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.set_steer_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.lock_steer_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_navigation_mode_error_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_navigation_mode_position_update_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.enable_persistent_estop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.control_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_planning_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_planning_delay_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.soft_estop_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.active_controllers_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_steering_percentage_allowed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_status_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.lat_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.lon_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.trajectory_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.chassis_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.localization_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.minimum_speed_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.mpc_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.minimum_speed_protection_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlConf, _impl_.max_path_remain_when_stopped_),
  24,
  3,
  4,
  5,
  6,
  7,
  25,
  26,
  29,
  27,
  28,
  30,
  31,
  8,
  34,
  9,
  32,
  33,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  23,
  16,
  0,
  1,
  17,
  18,
  19,
  20,
  2,
  21,
  22,
  35,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 43, -1, sizeof(::apollo::control::ControlConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::control::_ControlConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/control/proto/control_conf.pro"
  "to\022\016apollo.control\032\"modules/canbus/proto"
  "/chassis.proto\032#modules/control/proto/pa"
  "d_msg.proto\032/modules/control/proto/lat_c"
  "ontroller_conf.proto\032/modules/control/pr"
  "oto/lon_controller_conf.proto\032/modules/c"
  "ontrol/proto/mpc_controller_conf.proto\"\256"
  "\014\n\013ControlConf\022!\n\025control_test_duration\030"
  "\001 \001(\001:\002-1\022\037\n\020enable_csv_debug\030\002 \001(\010:\005fal"
  "se\022+\n\034enable_speed_station_preview\030\003 \001(\010"
  ":\005false\022#\n\024is_control_test_mode\030\004 \001(\010:\005f"
  "alse\022*\n\033use_preview_speed_for_table\030\005 \001("
  "\010:\005false\022+\n\034enable_input_timestamp_check"
  "\030\006 \001(\010:\005false\022%\n\031max_localization_miss_n"
  "um\030\007 \001(\005:\00220\022 \n\024max_chassis_miss_num\030\010 \001"
  "(\005:\00220\022!\n\025max_planning_miss_num\030\t \001(\005:\0022"
  "0\022+\n\035max_acceleration_when_stopped\030\n \001(\001"
  ":\0040.01\022\035\n\020steer_angle_rate\030\013 \001(\001:\003100\022#\n"
  "\025enable_gain_scheduler\030\014 \001(\010:\004true\022\035\n\017se"
  "t_steer_limit\030\r \001(\010:\004true\022\"\n\023enable_slop"
  "e_offset\030\016 \001(\010:\005false\022\037\n\020lock_steer_spee"
  "d\030\017 \001(\001:\0050.081\0222\n#enable_navigation_mode"
  "_error_filter\030\020 \001(\010:\005false\0224\n&enable_nav"
  "igation_mode_position_update\030\021 \001(\010:\004true"
  "\022%\n\027enable_persistent_estop\030\022 \001(\010:\004true\022"
  "\026\n\016control_period\030\023 \001(\001\022!\n\031max_planning_"
  "interval_sec\030\024 \001(\001\022$\n\034max_planning_delay"
  "_threshold\030\025 \001(\001\0228\n\014driving_mode\030\026 \001(\0162\""
  ".apollo.canbus.Chassis.DrivingMode\022-\n\006ac"
  "tion\030\027 \001(\0162\035.apollo.control.DrivingActio"
  "n\022\030\n\020soft_estop_brake\030\030 \001(\001\022F\n\022active_co"
  "ntrollers\030\031 \003(\0162*.apollo.control.Control"
  "Conf.ControllerType\022\'\n\037max_steering_perc"
  "entage_allowed\030\032 \001(\005\022\037\n\027max_status_inter"
  "val_sec\030\033 \001(\001\022>\n\023lat_controller_conf\030\034 \001"
  "(\0132!.apollo.control.LatControllerConf\022>\n"
  "\023lon_controller_conf\030\035 \001(\0132!.apollo.cont"
  "rol.LonControllerConf\022\031\n\021trajectory_peri"
  "od\030\036 \001(\001\022\026\n\016chassis_period\030\037 \001(\001\022\033\n\023loca"
  "lization_period\030  \001(\001\022 \n\030minimum_speed_r"
  "esolution\030! \001(\001\022>\n\023mpc_controller_conf\030\""
  " \001(\0132!.apollo.control.MPCControllerConf\022"
  "\033\n\023query_relative_time\030# \001(\001\022 \n\030minimum_"
  "speed_protection\030$ \001(\001\022)\n\034max_path_remai"
  "n_when_stopped\030% \001(\001:\0030.3\"L\n\016ControllerT"
  "ype\022\022\n\016LAT_CONTROLLER\020\000\022\022\n\016LON_CONTROLLE"
  "R\020\001\022\022\n\016MPC_CONTROLLER\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto = {
    false, false, 1863, descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto,
    "modules/control/proto/control_conf.proto",
    &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_deps, 5, 1,
    schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto,
    file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto);
namespace apollo {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto[0];
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::LON_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::MPC_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::ControllerType_MIN;
constexpr ControlConf_ControllerType ControlConf::ControllerType_MAX;
constexpr int ControlConf::ControllerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ControlConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlConf>()._impl_._has_bits_);
  static void set_has_control_test_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_enable_csv_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_speed_station_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_control_test_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_preview_speed_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_input_timestamp_check(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_localization_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_chassis_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_max_planning_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_acceleration_when_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_enable_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_set_steer_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_enable_slope_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lock_steer_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_enable_navigation_mode_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_navigation_mode_position_update(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_enable_persistent_estop(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_control_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_planning_interval_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_planning_delay_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_soft_estop_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_steering_percentage_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_status_interval_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::control::LatControllerConf& lat_controller_conf(const ControlConf* msg);
  static void set_has_lat_controller_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::control::LonControllerConf& lon_controller_conf(const ControlConf* msg);
  static void set_has_lon_controller_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trajectory_period(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chassis_period(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_localization_period(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_minimum_speed_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::control::MPCControllerConf& mpc_controller_conf(const ControlConf* msg);
  static void set_has_mpc_controller_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_query_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_minimum_speed_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_path_remain_when_stopped(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

const ::apollo::control::LatControllerConf&
ControlConf::_Internal::lat_controller_conf(const ControlConf* msg) {
  return *msg->_impl_.lat_controller_conf_;
}
const ::apollo::control::LonControllerConf&
ControlConf::_Internal::lon_controller_conf(const ControlConf* msg) {
  return *msg->_impl_.lon_controller_conf_;
}
const ::apollo::control::MPCControllerConf&
ControlConf::_Internal::mpc_controller_conf(const ControlConf* msg) {
  return *msg->_impl_.mpc_controller_conf_;
}
void ControlConf::clear_lat_controller_conf() {
  if (_impl_.lat_controller_conf_ != nullptr) _impl_.lat_controller_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ControlConf::clear_lon_controller_conf() {
  if (_impl_.lon_controller_conf_ != nullptr) _impl_.lon_controller_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ControlConf::clear_mpc_controller_conf() {
  if (_impl_.mpc_controller_conf_ != nullptr) _impl_.mpc_controller_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ControlConf::ControlConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.control.ControlConf)
}
ControlConf::ControlConf(const ControlConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_controllers_){from._impl_.active_controllers_}
    , decltype(_impl_.lat_controller_conf_){nullptr}
    , decltype(_impl_.lon_controller_conf_){nullptr}
    , decltype(_impl_.mpc_controller_conf_){nullptr}
    , decltype(_impl_.enable_csv_debug_){}
    , decltype(_impl_.enable_speed_station_preview_){}
    , decltype(_impl_.is_control_test_mode_){}
    , decltype(_impl_.use_preview_speed_for_table_){}
    , decltype(_impl_.enable_input_timestamp_check_){}
    , decltype(_impl_.enable_slope_offset_){}
    , decltype(_impl_.enable_navigation_mode_error_filter_){}
    , decltype(_impl_.control_period_){}
    , decltype(_impl_.max_planning_interval_sec_){}
    , decltype(_impl_.max_planning_delay_threshold_){}
    , decltype(_impl_.driving_mode_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.soft_estop_brake_){}
    , decltype(_impl_.max_status_interval_sec_){}
    , decltype(_impl_.trajectory_period_){}
    , decltype(_impl_.chassis_period_){}
    , decltype(_impl_.localization_period_){}
    , decltype(_impl_.minimum_speed_resolution_){}
    , decltype(_impl_.query_relative_time_){}
    , decltype(_impl_.minimum_speed_protection_){}
    , decltype(_impl_.max_steering_percentage_allowed_){}
    , decltype(_impl_.control_test_duration_){}
    , decltype(_impl_.max_localization_miss_num_){}
    , decltype(_impl_.max_chassis_miss_num_){}
    , decltype(_impl_.max_acceleration_when_stopped_){}
    , decltype(_impl_.steer_angle_rate_){}
    , decltype(_impl_.max_planning_miss_num_){}
    , decltype(_impl_.enable_gain_scheduler_){}
    , decltype(_impl_.set_steer_limit_){}
    , decltype(_impl_.enable_navigation_mode_position_update_){}
    , decltype(_impl_.enable_persistent_estop_){}
    , decltype(_impl_.lock_steer_speed_){}
    , decltype(_impl_.max_path_remain_when_stopped_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_controller_conf()) {
    _impl_.lat_controller_conf_ = new ::apollo::control::LatControllerConf(*from._impl_.lat_controller_conf_);
  }
  if (from._internal_has_lon_controller_conf()) {
    _impl_.lon_controller_conf_ = new ::apollo::control::LonControllerConf(*from._impl_.lon_controller_conf_);
  }
  if (from._internal_has_mpc_controller_conf()) {
    _impl_.mpc_controller_conf_ = new ::apollo::control::MPCControllerConf(*from._impl_.mpc_controller_conf_);
  }
  ::memcpy(&_impl_.enable_csv_debug_, &from._impl_.enable_csv_debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_path_remain_when_stopped_) -
    reinterpret_cast<char*>(&_impl_.enable_csv_debug_)) + sizeof(_impl_.max_path_remain_when_stopped_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlConf)
}

inline void ControlConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_controllers_){arena}
    , decltype(_impl_.lat_controller_conf_){nullptr}
    , decltype(_impl_.lon_controller_conf_){nullptr}
    , decltype(_impl_.mpc_controller_conf_){nullptr}
    , decltype(_impl_.enable_csv_debug_){false}
    , decltype(_impl_.enable_speed_station_preview_){false}
    , decltype(_impl_.is_control_test_mode_){false}
    , decltype(_impl_.use_preview_speed_for_table_){false}
    , decltype(_impl_.enable_input_timestamp_check_){false}
    , decltype(_impl_.enable_slope_offset_){false}
    , decltype(_impl_.enable_navigation_mode_error_filter_){false}
    , decltype(_impl_.control_period_){0}
    , decltype(_impl_.max_planning_interval_sec_){0}
    , decltype(_impl_.max_planning_delay_threshold_){0}
    , decltype(_impl_.driving_mode_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.soft_estop_brake_){0}
    , decltype(_impl_.max_status_interval_sec_){0}
    , decltype(_impl_.trajectory_period_){0}
    , decltype(_impl_.chassis_period_){0}
    , decltype(_impl_.localization_period_){0}
    , decltype(_impl_.minimum_speed_resolution_){0}
    , decltype(_impl_.query_relative_time_){0}
    , decltype(_impl_.minimum_speed_protection_){0}
    , decltype(_impl_.max_steering_percentage_allowed_){0}
    , decltype(_impl_.control_test_duration_){-1}
    , decltype(_impl_.max_localization_miss_num_){20}
    , decltype(_impl_.max_chassis_miss_num_){20}
    , decltype(_impl_.max_acceleration_when_stopped_){0.01}
    , decltype(_impl_.steer_angle_rate_){100}
    , decltype(_impl_.max_planning_miss_num_){20}
    , decltype(_impl_.enable_gain_scheduler_){true}
    , decltype(_impl_.set_steer_limit_){true}
    , decltype(_impl_.enable_navigation_mode_position_update_){true}
    , decltype(_impl_.enable_persistent_estop_){true}
    , decltype(_impl_.lock_steer_speed_){0.081}
    , decltype(_impl_.max_path_remain_when_stopped_){0.3}
  };
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.active_controllers_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.lat_controller_conf_;
  if (this != internal_default_instance()) delete _impl_.lon_controller_conf_;
  if (this != internal_default_instance()) delete _impl_.mpc_controller_conf_;
}

void ControlConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_controllers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lat_controller_conf_ != nullptr);
      _impl_.lat_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lon_controller_conf_ != nullptr);
      _impl_.lon_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.mpc_controller_conf_ != nullptr);
      _impl_.mpc_controller_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.enable_csv_debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_input_timestamp_check_) -
        reinterpret_cast<char*>(&_impl_.enable_csv_debug_)) + sizeof(_impl_.enable_input_timestamp_check_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.enable_slope_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.soft_estop_brake_) -
        reinterpret_cast<char*>(&_impl_.enable_slope_offset_)) + sizeof(_impl_.soft_estop_brake_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.max_status_interval_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_steering_percentage_allowed_) -
        reinterpret_cast<char*>(&_impl_.max_status_interval_sec_)) + sizeof(_impl_.max_steering_percentage_allowed_));
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.control_test_duration_ = -1;
    _impl_.max_localization_miss_num_ = 20;
    _impl_.max_chassis_miss_num_ = 20;
    _impl_.max_acceleration_when_stopped_ = 0.01;
    _impl_.steer_angle_rate_ = 100;
    _impl_.max_planning_miss_num_ = 20;
    _impl_.enable_gain_scheduler_ = true;
    _impl_.set_steer_limit_ = true;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.enable_navigation_mode_position_update_ = true;
    _impl_.enable_persistent_estop_ = true;
    _impl_.lock_steer_speed_ = 0.081;
    _impl_.max_path_remain_when_stopped_ = 0.3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double control_test_duration = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_control_test_duration(&_impl_._has_bits_);
          _impl_.control_test_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_csv_debug = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_csv_debug(&_impl_._has_bits_);
          _impl_.enable_csv_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_speed_station_preview = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_speed_station_preview(&_impl_._has_bits_);
          _impl_.enable_speed_station_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_control_test_mode = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_control_test_mode(&_impl_._has_bits_);
          _impl_.is_control_test_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_preview_speed_for_table = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_use_preview_speed_for_table(&_impl_._has_bits_);
          _impl_.use_preview_speed_for_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_input_timestamp_check = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_input_timestamp_check(&_impl_._has_bits_);
          _impl_.enable_input_timestamp_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_localization_miss_num = 7 [default = 20];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_localization_miss_num(&_impl_._has_bits_);
          _impl_.max_localization_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_chassis_miss_num = 8 [default = 20];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_chassis_miss_num(&_impl_._has_bits_);
          _impl_.max_chassis_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_planning_miss_num = 9 [default = 20];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_max_planning_miss_num(&_impl_._has_bits_);
          _impl_.max_planning_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_when_stopped = 10 [default = 0.01];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_max_acceleration_when_stopped(&_impl_._has_bits_);
          _impl_.max_acceleration_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_rate = 11 [default = 100];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_steer_angle_rate(&_impl_._has_bits_);
          _impl_.steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_gain_scheduler = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_enable_gain_scheduler(&_impl_._has_bits_);
          _impl_.enable_gain_scheduler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool set_steer_limit = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_set_steer_limit(&_impl_._has_bits_);
          _impl_.set_steer_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_slope_offset = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_enable_slope_offset(&_impl_._has_bits_);
          _impl_.enable_slope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lock_steer_speed = 15 [default = 0.081];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_lock_steer_speed(&_impl_._has_bits_);
          _impl_.lock_steer_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_error_filter = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_enable_navigation_mode_error_filter(&_impl_._has_bits_);
          _impl_.enable_navigation_mode_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_position_update = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_enable_navigation_mode_position_update(&_impl_._has_bits_);
          _impl_.enable_navigation_mode_position_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_persistent_estop = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_enable_persistent_estop(&_impl_._has_bits_);
          _impl_.enable_persistent_estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double control_period = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_control_period(&_impl_._has_bits_);
          _impl_.control_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_planning_interval_sec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_max_planning_interval_sec(&_impl_._has_bits_);
          _impl_.max_planning_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_planning_delay_threshold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_max_planning_delay_threshold(&_impl_._has_bits_);
          _impl_.max_planning_delay_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.DrivingAction action = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::control::DrivingAction_IsValid(val))) {
            _internal_set_action(static_cast<::apollo::control::DrivingAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double soft_estop_brake = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_soft_estop_brake(&_impl_._has_bits_);
          _impl_.soft_estop_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.control.ControlConf.ControllerType active_controllers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::control::ControlConf_ControllerType_IsValid(val))) {
              _internal_add_active_controllers(static_cast<::apollo::control::ControlConf_ControllerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_active_controllers(), ptr, ctx, ::apollo::control::ControlConf_ControllerType_IsValid, &_internal_metadata_, 25);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_steering_percentage_allowed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_max_steering_percentage_allowed(&_impl_._has_bits_);
          _impl_.max_steering_percentage_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_status_interval_sec = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_max_status_interval_sec(&_impl_._has_bits_);
          _impl_.max_status_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.LatControllerConf lat_controller_conf = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.LonControllerConf lon_controller_conf = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double trajectory_period = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_trajectory_period(&_impl_._has_bits_);
          _impl_.trajectory_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double chassis_period = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_chassis_period(&_impl_._has_bits_);
          _impl_.chassis_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double localization_period = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_localization_period(&_impl_._has_bits_);
          _impl_.localization_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimum_speed_resolution = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_minimum_speed_resolution(&_impl_._has_bits_);
          _impl_.minimum_speed_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.MPCControllerConf mpc_controller_conf = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mpc_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double query_relative_time = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_query_relative_time(&_impl_._has_bits_);
          _impl_.query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimum_speed_protection = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_minimum_speed_protection(&_impl_._has_bits_);
          _impl_.minimum_speed_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_path_remain_when_stopped = 37 [default = 0.3];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_max_path_remain_when_stopped(&_impl_._has_bits_);
          _impl_.max_path_remain_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double control_test_duration = 1 [default = -1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_control_test_duration(), target);
  }

  // optional bool enable_csv_debug = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_csv_debug(), target);
  }

  // optional bool enable_speed_station_preview = 3 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_speed_station_preview(), target);
  }

  // optional bool is_control_test_mode = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_control_test_mode(), target);
  }

  // optional bool use_preview_speed_for_table = 5 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_use_preview_speed_for_table(), target);
  }

  // optional bool enable_input_timestamp_check = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_input_timestamp_check(), target);
  }

  // optional int32 max_localization_miss_num = 7 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_localization_miss_num(), target);
  }

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_chassis_miss_num(), target);
  }

  // optional int32 max_planning_miss_num = 9 [default = 20];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_planning_miss_num(), target);
  }

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_acceleration_when_stopped(), target);
  }

  // optional double steer_angle_rate = 11 [default = 100];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_rate(), target);
  }

  // optional bool enable_gain_scheduler = 12 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_gain_scheduler(), target);
  }

  // optional bool set_steer_limit = 13 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_set_steer_limit(), target);
  }

  // optional bool enable_slope_offset = 14 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_slope_offset(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double lock_steer_speed = 15 [default = 0.081];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_lock_steer_speed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_enable_navigation_mode_position_update(), target);
  }

  // optional bool enable_persistent_estop = 18 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_persistent_estop(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double control_period = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_control_period(), target);
  }

  // optional double max_planning_interval_sec = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_max_planning_interval_sec(), target);
  }

  // optional double max_planning_delay_threshold = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_max_planning_delay_threshold(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_driving_mode(), target);
  }

  // optional .apollo.control.DrivingAction action = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_action(), target);
  }

  // optional double soft_estop_brake = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_soft_estop_brake(), target);
  }

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 25;
  for (int i = 0, n = this->_internal_active_controllers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_active_controllers(i), target);
  }

  // optional int32 max_steering_percentage_allowed = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_max_steering_percentage_allowed(), target);
  }

  // optional double max_status_interval_sec = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_max_status_interval_sec(), target);
  }

  // optional .apollo.control.LatControllerConf lat_controller_conf = 28;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::lat_controller_conf(this),
        _Internal::lat_controller_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.LonControllerConf lon_controller_conf = 29;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::lon_controller_conf(this),
        _Internal::lon_controller_conf(this).GetCachedSize(), target, stream);
  }

  // optional double trajectory_period = 30;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_trajectory_period(), target);
  }

  // optional double chassis_period = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_chassis_period(), target);
  }

  // optional double localization_period = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_localization_period(), target);
  }

  // optional double minimum_speed_resolution = 33;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_minimum_speed_resolution(), target);
  }

  // optional .apollo.control.MPCControllerConf mpc_controller_conf = 34;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::mpc_controller_conf(this),
        _Internal::mpc_controller_conf(this).GetCachedSize(), target, stream);
  }

  // optional double query_relative_time = 35;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_query_relative_time(), target);
  }

  // optional double minimum_speed_protection = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_minimum_speed_protection(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(37, this->_internal_max_path_remain_when_stopped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlConf)
  return target;
}

size_t ControlConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 25;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_active_controllers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_active_controllers(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.control.LatControllerConf lat_controller_conf = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lat_controller_conf_);
    }

    // optional .apollo.control.LonControllerConf lon_controller_conf = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lon_controller_conf_);
    }

    // optional .apollo.control.MPCControllerConf mpc_controller_conf = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mpc_controller_conf_);
    }

    // optional bool enable_csv_debug = 2 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_speed_station_preview = 3 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_control_test_mode = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool use_preview_speed_for_table = 5 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_timestamp_check = 6 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool enable_slope_offset = 14 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool enable_navigation_mode_error_filter = 16 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional double control_period = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double max_planning_interval_sec = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double max_planning_delay_threshold = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional .apollo.control.DrivingAction action = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional double soft_estop_brake = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double max_status_interval_sec = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double trajectory_period = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double chassis_period = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double localization_period = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_resolution = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double query_relative_time = 35;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_protection = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_steering_percentage_allowed = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_steering_percentage_allowed());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double control_test_duration = 1 [default = -1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_localization_miss_num = 7 [default = 20];
    if (cached_has_bits & 0x02000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_localization_miss_num());
    }

    // optional int32 max_chassis_miss_num = 8 [default = 20];
    if (cached_has_bits & 0x04000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_chassis_miss_num());
    }

    // optional double max_acceleration_when_stopped = 10 [default = 0.01];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_rate = 11 [default = 100];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_planning_miss_num = 9 [default = 20];
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_planning_miss_num());
    }

    // optional bool enable_gain_scheduler = 12 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool set_steer_limit = 13 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool enable_navigation_mode_position_update = 17 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enable_persistent_estop = 18 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional double lock_steer_speed = 15 [default = 0.081];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_path_remain_when_stopped = 37 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlConf::GetClassData() const { return &_class_data_; }

void ControlConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlConf *>(to)->MergeFrom(
      static_cast<const ControlConf &>(from));
}


void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.active_controllers_.MergeFrom(from._impl_.active_controllers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_controller_conf()->::apollo::control::LatControllerConf::MergeFrom(from._internal_lat_controller_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lon_controller_conf()->::apollo::control::LonControllerConf::MergeFrom(from._internal_lon_controller_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mpc_controller_conf()->::apollo::control::MPCControllerConf::MergeFrom(from._internal_mpc_controller_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_csv_debug_ = from._impl_.enable_csv_debug_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.enable_speed_station_preview_ = from._impl_.enable_speed_station_preview_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_control_test_mode_ = from._impl_.is_control_test_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.use_preview_speed_for_table_ = from._impl_.use_preview_speed_for_table_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.enable_input_timestamp_check_ = from._impl_.enable_input_timestamp_check_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.enable_slope_offset_ = from._impl_.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.enable_navigation_mode_error_filter_ = from._impl_.enable_navigation_mode_error_filter_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.control_period_ = from._impl_.control_period_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.max_planning_interval_sec_ = from._impl_.max_planning_interval_sec_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.max_planning_delay_threshold_ = from._impl_.max_planning_delay_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.driving_mode_ = from._impl_.driving_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.action_ = from._impl_.action_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.soft_estop_brake_ = from._impl_.soft_estop_brake_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.max_status_interval_sec_ = from._impl_.max_status_interval_sec_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.trajectory_period_ = from._impl_.trajectory_period_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.chassis_period_ = from._impl_.chassis_period_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.localization_period_ = from._impl_.localization_period_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.minimum_speed_resolution_ = from._impl_.minimum_speed_resolution_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.query_relative_time_ = from._impl_.query_relative_time_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.minimum_speed_protection_ = from._impl_.minimum_speed_protection_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.max_steering_percentage_allowed_ = from._impl_.max_steering_percentage_allowed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.control_test_duration_ = from._impl_.control_test_duration_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.max_localization_miss_num_ = from._impl_.max_localization_miss_num_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.max_chassis_miss_num_ = from._impl_.max_chassis_miss_num_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.max_acceleration_when_stopped_ = from._impl_.max_acceleration_when_stopped_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.steer_angle_rate_ = from._impl_.steer_angle_rate_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.max_planning_miss_num_ = from._impl_.max_planning_miss_num_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.enable_gain_scheduler_ = from._impl_.enable_gain_scheduler_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.set_steer_limit_ = from._impl_.set_steer_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enable_navigation_mode_position_update_ = from._impl_.enable_navigation_mode_position_update_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_persistent_estop_ = from._impl_.enable_persistent_estop_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lock_steer_speed_ = from._impl_.lock_steer_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_path_remain_when_stopped_ = from._impl_.max_path_remain_when_stopped_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {
  return true;
}

void ControlConf::InternalSwap(ControlConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.active_controllers_.InternalSwap(&other->_impl_.active_controllers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlConf, _impl_.max_steering_percentage_allowed_)
      + sizeof(ControlConf::_impl_.max_steering_percentage_allowed_)
      - PROTOBUF_FIELD_OFFSET(ControlConf, _impl_.lat_controller_conf_)>(
          reinterpret_cast<char*>(&_impl_.lat_controller_conf_),
          reinterpret_cast<char*>(&other->_impl_.lat_controller_conf_));
  swap(_impl_.control_test_duration_, other->_impl_.control_test_duration_);
  swap(_impl_.max_localization_miss_num_, other->_impl_.max_localization_miss_num_);
  swap(_impl_.max_chassis_miss_num_, other->_impl_.max_chassis_miss_num_);
  swap(_impl_.max_acceleration_when_stopped_, other->_impl_.max_acceleration_when_stopped_);
  swap(_impl_.steer_angle_rate_, other->_impl_.steer_angle_rate_);
  swap(_impl_.max_planning_miss_num_, other->_impl_.max_planning_miss_num_);
  swap(_impl_.enable_gain_scheduler_, other->_impl_.enable_gain_scheduler_);
  swap(_impl_.set_steer_limit_, other->_impl_.set_steer_limit_);
  swap(_impl_.enable_navigation_mode_position_update_, other->_impl_.enable_navigation_mode_position_update_);
  swap(_impl_.enable_persistent_estop_, other->_impl_.enable_persistent_estop_);
  swap(_impl_.lock_steer_speed_, other->_impl_.lock_steer_speed_);
  swap(_impl_.max_path_remain_when_stopped_, other->_impl_.max_path_remain_when_stopped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::ControlConf*
Arena::CreateMaybeMessage< ::apollo::control::ControlConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::ControlConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
