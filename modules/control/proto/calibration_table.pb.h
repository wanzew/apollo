// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/calibration_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto;
namespace apollo {
namespace control {
namespace calibrationtable {
class ControlCalibrationInfo;
struct ControlCalibrationInfoDefaultTypeInternal;
extern ControlCalibrationInfoDefaultTypeInternal _ControlCalibrationInfo_default_instance_;
class ControlCalibrationTable;
struct ControlCalibrationTableDefaultTypeInternal;
extern ControlCalibrationTableDefaultTypeInternal _ControlCalibrationTable_default_instance_;
}  // namespace calibrationtable
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::calibrationtable::ControlCalibrationInfo* Arena::CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationInfo>(Arena*);
template<> ::apollo::control::calibrationtable::ControlCalibrationTable* Arena::CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {
namespace calibrationtable {

// ===================================================================

class ControlCalibrationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationTable) */ {
 public:
  inline ControlCalibrationTable() : ControlCalibrationTable(nullptr) {}
  ~ControlCalibrationTable() override;
  explicit PROTOBUF_CONSTEXPR ControlCalibrationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCalibrationTable(const ControlCalibrationTable& from);
  ControlCalibrationTable(ControlCalibrationTable&& from) noexcept
    : ControlCalibrationTable() {
    *this = ::std::move(from);
  }

  inline ControlCalibrationTable& operator=(const ControlCalibrationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCalibrationTable& operator=(ControlCalibrationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCalibrationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCalibrationTable* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationTable*>(
               &_ControlCalibrationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCalibrationTable& a, ControlCalibrationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCalibrationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCalibrationTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCalibrationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlCalibrationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCalibrationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlCalibrationTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCalibrationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.calibrationtable.ControlCalibrationTable";
  }
  protected:
  explicit ControlCalibrationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibrationFieldNumber = 1,
  };
  // repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
  int calibration_size() const;
  private:
  int _internal_calibration_size() const;
  public:
  void clear_calibration();
  ::apollo::control::calibrationtable::ControlCalibrationInfo* mutable_calibration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
      mutable_calibration();
  private:
  const ::apollo::control::calibrationtable::ControlCalibrationInfo& _internal_calibration(int index) const;
  ::apollo::control::calibrationtable::ControlCalibrationInfo* _internal_add_calibration();
  public:
  const ::apollo::control::calibrationtable::ControlCalibrationInfo& calibration(int index) const;
  ::apollo::control::calibrationtable::ControlCalibrationInfo* add_calibration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
      calibration() const;

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo > calibration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ControlCalibrationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.calibrationtable.ControlCalibrationInfo) */ {
 public:
  inline ControlCalibrationInfo() : ControlCalibrationInfo(nullptr) {}
  ~ControlCalibrationInfo() override;
  explicit PROTOBUF_CONSTEXPR ControlCalibrationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCalibrationInfo(const ControlCalibrationInfo& from);
  ControlCalibrationInfo(ControlCalibrationInfo&& from) noexcept
    : ControlCalibrationInfo() {
    *this = ::std::move(from);
  }

  inline ControlCalibrationInfo& operator=(const ControlCalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCalibrationInfo& operator=(ControlCalibrationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCalibrationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCalibrationInfo* internal_default_instance() {
    return reinterpret_cast<const ControlCalibrationInfo*>(
               &_ControlCalibrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlCalibrationInfo& a, ControlCalibrationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCalibrationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCalibrationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCalibrationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlCalibrationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCalibrationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlCalibrationInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCalibrationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.calibrationtable.ControlCalibrationInfo";
  }
  protected:
  explicit ControlCalibrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // optional double speed = 1;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acceleration = 2;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // optional double command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  double command() const;
  void set_command(double value);
  private:
  double _internal_command() const;
  void _internal_set_command(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.calibrationtable.ControlCalibrationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double speed_;
    double acceleration_;
    double command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCalibrationTable

// repeated .apollo.control.calibrationtable.ControlCalibrationInfo calibration = 1;
inline int ControlCalibrationTable::_internal_calibration_size() const {
  return _impl_.calibration_.size();
}
inline int ControlCalibrationTable::calibration_size() const {
  return _internal_calibration_size();
}
inline void ControlCalibrationTable::clear_calibration() {
  _impl_.calibration_.Clear();
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::mutable_calibration(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return _impl_.calibration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >*
ControlCalibrationTable::mutable_calibration() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return &_impl_.calibration_;
}
inline const ::apollo::control::calibrationtable::ControlCalibrationInfo& ControlCalibrationTable::_internal_calibration(int index) const {
  return _impl_.calibration_.Get(index);
}
inline const ::apollo::control::calibrationtable::ControlCalibrationInfo& ControlCalibrationTable::calibration(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return _internal_calibration(index);
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::_internal_add_calibration() {
  return _impl_.calibration_.Add();
}
inline ::apollo::control::calibrationtable::ControlCalibrationInfo* ControlCalibrationTable::add_calibration() {
  ::apollo::control::calibrationtable::ControlCalibrationInfo* _add = _internal_add_calibration();
  // @@protoc_insertion_point(field_add:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::control::calibrationtable::ControlCalibrationInfo >&
ControlCalibrationTable::calibration() const {
  // @@protoc_insertion_point(field_list:apollo.control.calibrationtable.ControlCalibrationTable.calibration)
  return _impl_.calibration_;
}

// -------------------------------------------------------------------

// ControlCalibrationInfo

// optional double speed = 1;
inline bool ControlCalibrationInfo::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_speed() const {
  return _internal_has_speed();
}
inline void ControlCalibrationInfo::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ControlCalibrationInfo::_internal_speed() const {
  return _impl_.speed_;
}
inline double ControlCalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
  return _internal_speed();
}
inline void ControlCalibrationInfo::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.speed_ = value;
}
inline void ControlCalibrationInfo::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.speed)
}

// optional double acceleration = 2;
inline bool ControlCalibrationInfo::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void ControlCalibrationInfo::clear_acceleration() {
  _impl_.acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ControlCalibrationInfo::_internal_acceleration() const {
  return _impl_.acceleration_;
}
inline double ControlCalibrationInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
  return _internal_acceleration();
}
inline void ControlCalibrationInfo::_internal_set_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acceleration_ = value;
}
inline void ControlCalibrationInfo::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.acceleration)
}

// optional double command = 3;
inline bool ControlCalibrationInfo::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCalibrationInfo::has_command() const {
  return _internal_has_command();
}
inline void ControlCalibrationInfo::clear_command() {
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ControlCalibrationInfo::_internal_command() const {
  return _impl_.command_;
}
inline double ControlCalibrationInfo::command() const {
  // @@protoc_insertion_point(field_get:apollo.control.calibrationtable.ControlCalibrationInfo.command)
  return _internal_command();
}
inline void ControlCalibrationInfo::_internal_set_command(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.command_ = value;
}
inline void ControlCalibrationInfo::set_command(double value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:apollo.control.calibrationtable.ControlCalibrationInfo.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calibrationtable
}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto
