// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/control/proto/pad_msg.pb.h"
#include "modules/control/proto/lat_controller_conf.pb.h"
#include "modules/control/proto/lon_controller_conf.pb.h"
#include "modules/control/proto/mpc_controller_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto;
namespace apollo {
namespace control {
class ControlConf;
struct ControlConfDefaultTypeInternal;
extern ControlConfDefaultTypeInternal _ControlConf_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::ControlConf* Arena::CreateMaybeMessage<::apollo::control::ControlConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

enum ControlConf_ControllerType : int {
  ControlConf_ControllerType_LAT_CONTROLLER = 0,
  ControlConf_ControllerType_LON_CONTROLLER = 1,
  ControlConf_ControllerType_MPC_CONTROLLER = 2
};
bool ControlConf_ControllerType_IsValid(int value);
constexpr ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MIN = ControlConf_ControllerType_LAT_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MAX = ControlConf_ControllerType_MPC_CONTROLLER;
constexpr int ControlConf_ControllerType_ControllerType_ARRAYSIZE = ControlConf_ControllerType_ControllerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlConf_ControllerType_descriptor();
template<typename T>
inline const std::string& ControlConf_ControllerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlConf_ControllerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlConf_ControllerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlConf_ControllerType_descriptor(), enum_t_value);
}
inline bool ControlConf_ControllerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlConf_ControllerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlConf_ControllerType>(
    ControlConf_ControllerType_descriptor(), name, value);
}
// ===================================================================

class ControlConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.ControlConf) */ {
 public:
  inline ControlConf() : ControlConf(nullptr) {}
  ~ControlConf() override;
  explicit PROTOBUF_CONSTEXPR ControlConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlConf(const ControlConf& from);
  ControlConf(ControlConf&& from) noexcept
    : ControlConf() {
    *this = ::std::move(from);
  }

  inline ControlConf& operator=(const ControlConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlConf& operator=(ControlConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlConf* internal_default_instance() {
    return reinterpret_cast<const ControlConf*>(
               &_ControlConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlConf& a, ControlConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.ControlConf";
  }
  protected:
  explicit ControlConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlConf_ControllerType ControllerType;
  static constexpr ControllerType LAT_CONTROLLER =
    ControlConf_ControllerType_LAT_CONTROLLER;
  static constexpr ControllerType LON_CONTROLLER =
    ControlConf_ControllerType_LON_CONTROLLER;
  static constexpr ControllerType MPC_CONTROLLER =
    ControlConf_ControllerType_MPC_CONTROLLER;
  static inline bool ControllerType_IsValid(int value) {
    return ControlConf_ControllerType_IsValid(value);
  }
  static constexpr ControllerType ControllerType_MIN =
    ControlConf_ControllerType_ControllerType_MIN;
  static constexpr ControllerType ControllerType_MAX =
    ControlConf_ControllerType_ControllerType_MAX;
  static constexpr int ControllerType_ARRAYSIZE =
    ControlConf_ControllerType_ControllerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControllerType_descriptor() {
    return ControlConf_ControllerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ControllerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControllerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControllerType_Name.");
    return ControlConf_ControllerType_Name(enum_t_value);
  }
  static inline bool ControllerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ControllerType* value) {
    return ControlConf_ControllerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActiveControllersFieldNumber = 7,
    kLatControllerConfFieldNumber = 10,
    kLonControllerConfFieldNumber = 11,
    kMpcControllerConfFieldNumber = 16,
    kControlPeriodFieldNumber = 1,
    kMaxPlanningIntervalSecFieldNumber = 2,
    kMaxPlanningDelayThresholdFieldNumber = 3,
    kDrivingModeFieldNumber = 4,
    kActionFieldNumber = 5,
    kSoftEstopBrakeFieldNumber = 6,
    kMaxStatusIntervalSecFieldNumber = 9,
    kTrajectoryPeriodFieldNumber = 12,
    kChassisPeriodFieldNumber = 13,
    kLocalizationPeriodFieldNumber = 14,
    kMinimumSpeedResolutionFieldNumber = 15,
    kQueryRelativeTimeFieldNumber = 17,
    kMinimumSpeedProtectionFieldNumber = 18,
    kMaxSteeringPercentageAllowedFieldNumber = 8,
  };
  // repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
  int active_controllers_size() const;
  private:
  int _internal_active_controllers_size() const;
  public:
  void clear_active_controllers();
  private:
  ::apollo::control::ControlConf_ControllerType _internal_active_controllers(int index) const;
  void _internal_add_active_controllers(::apollo::control::ControlConf_ControllerType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_active_controllers();
  public:
  ::apollo::control::ControlConf_ControllerType active_controllers(int index) const;
  void set_active_controllers(int index, ::apollo::control::ControlConf_ControllerType value);
  void add_active_controllers(::apollo::control::ControlConf_ControllerType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& active_controllers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_active_controllers();

  // optional .apollo.control.LatControllerConf lat_controller_conf = 10;
  bool has_lat_controller_conf() const;
  private:
  bool _internal_has_lat_controller_conf() const;
  public:
  void clear_lat_controller_conf();
  const ::apollo::control::LatControllerConf& lat_controller_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::LatControllerConf* release_lat_controller_conf();
  ::apollo::control::LatControllerConf* mutable_lat_controller_conf();
  void set_allocated_lat_controller_conf(::apollo::control::LatControllerConf* lat_controller_conf);
  private:
  const ::apollo::control::LatControllerConf& _internal_lat_controller_conf() const;
  ::apollo::control::LatControllerConf* _internal_mutable_lat_controller_conf();
  public:
  void unsafe_arena_set_allocated_lat_controller_conf(
      ::apollo::control::LatControllerConf* lat_controller_conf);
  ::apollo::control::LatControllerConf* unsafe_arena_release_lat_controller_conf();

  // optional .apollo.control.LonControllerConf lon_controller_conf = 11;
  bool has_lon_controller_conf() const;
  private:
  bool _internal_has_lon_controller_conf() const;
  public:
  void clear_lon_controller_conf();
  const ::apollo::control::LonControllerConf& lon_controller_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::LonControllerConf* release_lon_controller_conf();
  ::apollo::control::LonControllerConf* mutable_lon_controller_conf();
  void set_allocated_lon_controller_conf(::apollo::control::LonControllerConf* lon_controller_conf);
  private:
  const ::apollo::control::LonControllerConf& _internal_lon_controller_conf() const;
  ::apollo::control::LonControllerConf* _internal_mutable_lon_controller_conf();
  public:
  void unsafe_arena_set_allocated_lon_controller_conf(
      ::apollo::control::LonControllerConf* lon_controller_conf);
  ::apollo::control::LonControllerConf* unsafe_arena_release_lon_controller_conf();

  // optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
  bool has_mpc_controller_conf() const;
  private:
  bool _internal_has_mpc_controller_conf() const;
  public:
  void clear_mpc_controller_conf();
  const ::apollo::control::MPCControllerConf& mpc_controller_conf() const;
  PROTOBUF_NODISCARD ::apollo::control::MPCControllerConf* release_mpc_controller_conf();
  ::apollo::control::MPCControllerConf* mutable_mpc_controller_conf();
  void set_allocated_mpc_controller_conf(::apollo::control::MPCControllerConf* mpc_controller_conf);
  private:
  const ::apollo::control::MPCControllerConf& _internal_mpc_controller_conf() const;
  ::apollo::control::MPCControllerConf* _internal_mutable_mpc_controller_conf();
  public:
  void unsafe_arena_set_allocated_mpc_controller_conf(
      ::apollo::control::MPCControllerConf* mpc_controller_conf);
  ::apollo::control::MPCControllerConf* unsafe_arena_release_mpc_controller_conf();

  // optional double control_period = 1;
  bool has_control_period() const;
  private:
  bool _internal_has_control_period() const;
  public:
  void clear_control_period();
  double control_period() const;
  void set_control_period(double value);
  private:
  double _internal_control_period() const;
  void _internal_set_control_period(double value);
  public:

  // optional double max_planning_interval_sec = 2;
  bool has_max_planning_interval_sec() const;
  private:
  bool _internal_has_max_planning_interval_sec() const;
  public:
  void clear_max_planning_interval_sec();
  double max_planning_interval_sec() const;
  void set_max_planning_interval_sec(double value);
  private:
  double _internal_max_planning_interval_sec() const;
  void _internal_set_max_planning_interval_sec(double value);
  public:

  // optional double max_planning_delay_threshold = 3;
  bool has_max_planning_delay_threshold() const;
  private:
  bool _internal_has_max_planning_delay_threshold() const;
  public:
  void clear_max_planning_delay_threshold();
  double max_planning_delay_threshold() const;
  void set_max_planning_delay_threshold(double value);
  private:
  double _internal_max_planning_delay_threshold() const;
  void _internal_set_max_planning_delay_threshold(double value);
  public:

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  bool has_driving_mode() const;
  private:
  bool _internal_has_driving_mode() const;
  public:
  void clear_driving_mode();
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  private:
  ::apollo::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  public:

  // optional .apollo.control.DrivingAction action = 5;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::apollo::control::DrivingAction action() const;
  void set_action(::apollo::control::DrivingAction value);
  private:
  ::apollo::control::DrivingAction _internal_action() const;
  void _internal_set_action(::apollo::control::DrivingAction value);
  public:

  // optional double soft_estop_brake = 6;
  bool has_soft_estop_brake() const;
  private:
  bool _internal_has_soft_estop_brake() const;
  public:
  void clear_soft_estop_brake();
  double soft_estop_brake() const;
  void set_soft_estop_brake(double value);
  private:
  double _internal_soft_estop_brake() const;
  void _internal_set_soft_estop_brake(double value);
  public:

  // optional double max_status_interval_sec = 9;
  bool has_max_status_interval_sec() const;
  private:
  bool _internal_has_max_status_interval_sec() const;
  public:
  void clear_max_status_interval_sec();
  double max_status_interval_sec() const;
  void set_max_status_interval_sec(double value);
  private:
  double _internal_max_status_interval_sec() const;
  void _internal_set_max_status_interval_sec(double value);
  public:

  // optional double trajectory_period = 12;
  bool has_trajectory_period() const;
  private:
  bool _internal_has_trajectory_period() const;
  public:
  void clear_trajectory_period();
  double trajectory_period() const;
  void set_trajectory_period(double value);
  private:
  double _internal_trajectory_period() const;
  void _internal_set_trajectory_period(double value);
  public:

  // optional double chassis_period = 13;
  bool has_chassis_period() const;
  private:
  bool _internal_has_chassis_period() const;
  public:
  void clear_chassis_period();
  double chassis_period() const;
  void set_chassis_period(double value);
  private:
  double _internal_chassis_period() const;
  void _internal_set_chassis_period(double value);
  public:

  // optional double localization_period = 14;
  bool has_localization_period() const;
  private:
  bool _internal_has_localization_period() const;
  public:
  void clear_localization_period();
  double localization_period() const;
  void set_localization_period(double value);
  private:
  double _internal_localization_period() const;
  void _internal_set_localization_period(double value);
  public:

  // optional double minimum_speed_resolution = 15;
  bool has_minimum_speed_resolution() const;
  private:
  bool _internal_has_minimum_speed_resolution() const;
  public:
  void clear_minimum_speed_resolution();
  double minimum_speed_resolution() const;
  void set_minimum_speed_resolution(double value);
  private:
  double _internal_minimum_speed_resolution() const;
  void _internal_set_minimum_speed_resolution(double value);
  public:

  // optional double query_relative_time = 17;
  bool has_query_relative_time() const;
  private:
  bool _internal_has_query_relative_time() const;
  public:
  void clear_query_relative_time();
  double query_relative_time() const;
  void set_query_relative_time(double value);
  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);
  public:

  // optional double minimum_speed_protection = 18;
  bool has_minimum_speed_protection() const;
  private:
  bool _internal_has_minimum_speed_protection() const;
  public:
  void clear_minimum_speed_protection();
  double minimum_speed_protection() const;
  void set_minimum_speed_protection(double value);
  private:
  double _internal_minimum_speed_protection() const;
  void _internal_set_minimum_speed_protection(double value);
  public:

  // optional int32 max_steering_percentage_allowed = 8;
  bool has_max_steering_percentage_allowed() const;
  private:
  bool _internal_has_max_steering_percentage_allowed() const;
  public:
  void clear_max_steering_percentage_allowed();
  int32_t max_steering_percentage_allowed() const;
  void set_max_steering_percentage_allowed(int32_t value);
  private:
  int32_t _internal_max_steering_percentage_allowed() const;
  void _internal_set_max_steering_percentage_allowed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.ControlConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> active_controllers_;
    ::apollo::control::LatControllerConf* lat_controller_conf_;
    ::apollo::control::LonControllerConf* lon_controller_conf_;
    ::apollo::control::MPCControllerConf* mpc_controller_conf_;
    double control_period_;
    double max_planning_interval_sec_;
    double max_planning_delay_threshold_;
    int driving_mode_;
    int action_;
    double soft_estop_brake_;
    double max_status_interval_sec_;
    double trajectory_period_;
    double chassis_period_;
    double localization_period_;
    double minimum_speed_resolution_;
    double query_relative_time_;
    double minimum_speed_protection_;
    int32_t max_steering_percentage_allowed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlConf

// optional double control_period = 1;
inline bool ControlConf::_internal_has_control_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlConf::has_control_period() const {
  return _internal_has_control_period();
}
inline void ControlConf::clear_control_period() {
  _impl_.control_period_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ControlConf::_internal_control_period() const {
  return _impl_.control_period_;
}
inline double ControlConf::control_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.control_period)
  return _internal_control_period();
}
inline void ControlConf::_internal_set_control_period(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.control_period_ = value;
}
inline void ControlConf::set_control_period(double value) {
  _internal_set_control_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.control_period)
}

// optional double max_planning_interval_sec = 2;
inline bool ControlConf::_internal_has_max_planning_interval_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlConf::has_max_planning_interval_sec() const {
  return _internal_has_max_planning_interval_sec();
}
inline void ControlConf::clear_max_planning_interval_sec() {
  _impl_.max_planning_interval_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ControlConf::_internal_max_planning_interval_sec() const {
  return _impl_.max_planning_interval_sec_;
}
inline double ControlConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_interval_sec)
  return _internal_max_planning_interval_sec();
}
inline void ControlConf::_internal_set_max_planning_interval_sec(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_planning_interval_sec_ = value;
}
inline void ControlConf::set_max_planning_interval_sec(double value) {
  _internal_set_max_planning_interval_sec(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_interval_sec)
}

// optional double max_planning_delay_threshold = 3;
inline bool ControlConf::_internal_has_max_planning_delay_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlConf::has_max_planning_delay_threshold() const {
  return _internal_has_max_planning_delay_threshold();
}
inline void ControlConf::clear_max_planning_delay_threshold() {
  _impl_.max_planning_delay_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ControlConf::_internal_max_planning_delay_threshold() const {
  return _impl_.max_planning_delay_threshold_;
}
inline double ControlConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_planning_delay_threshold)
  return _internal_max_planning_delay_threshold();
}
inline void ControlConf::_internal_set_max_planning_delay_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_planning_delay_threshold_ = value;
}
inline void ControlConf::set_max_planning_delay_threshold(double value) {
  _internal_set_max_planning_delay_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_planning_delay_threshold)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
inline bool ControlConf::_internal_has_driving_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlConf::has_driving_mode() const {
  return _internal_has_driving_mode();
}
inline void ControlConf::clear_driving_mode() {
  _impl_.driving_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Chassis_DrivingMode ControlConf::_internal_driving_mode() const {
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(_impl_.driving_mode_);
}
inline ::apollo::canbus::Chassis_DrivingMode ControlConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.driving_mode)
  return _internal_driving_mode();
}
inline void ControlConf::_internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.driving_mode_ = value;
}
inline void ControlConf::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.driving_mode)
}

// optional .apollo.control.DrivingAction action = 5;
inline bool ControlConf::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlConf::has_action() const {
  return _internal_has_action();
}
inline void ControlConf::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::control::DrivingAction ControlConf::_internal_action() const {
  return static_cast< ::apollo::control::DrivingAction >(_impl_.action_);
}
inline ::apollo::control::DrivingAction ControlConf::action() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.action)
  return _internal_action();
}
inline void ControlConf::_internal_set_action(::apollo::control::DrivingAction value) {
  assert(::apollo::control::DrivingAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.action_ = value;
}
inline void ControlConf::set_action(::apollo::control::DrivingAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.action)
}

// optional double soft_estop_brake = 6;
inline bool ControlConf::_internal_has_soft_estop_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlConf::has_soft_estop_brake() const {
  return _internal_has_soft_estop_brake();
}
inline void ControlConf::clear_soft_estop_brake() {
  _impl_.soft_estop_brake_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ControlConf::_internal_soft_estop_brake() const {
  return _impl_.soft_estop_brake_;
}
inline double ControlConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.soft_estop_brake)
  return _internal_soft_estop_brake();
}
inline void ControlConf::_internal_set_soft_estop_brake(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.soft_estop_brake_ = value;
}
inline void ControlConf::set_soft_estop_brake(double value) {
  _internal_set_soft_estop_brake(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.soft_estop_brake)
}

// repeated .apollo.control.ControlConf.ControllerType active_controllers = 7;
inline int ControlConf::_internal_active_controllers_size() const {
  return _impl_.active_controllers_.size();
}
inline int ControlConf::active_controllers_size() const {
  return _internal_active_controllers_size();
}
inline void ControlConf::clear_active_controllers() {
  _impl_.active_controllers_.Clear();
}
inline ::apollo::control::ControlConf_ControllerType ControlConf::_internal_active_controllers(int index) const {
  return static_cast< ::apollo::control::ControlConf_ControllerType >(_impl_.active_controllers_.Get(index));
}
inline ::apollo::control::ControlConf_ControllerType ControlConf::active_controllers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.active_controllers)
  return _internal_active_controllers(index);
}
inline void ControlConf::set_active_controllers(int index, ::apollo::control::ControlConf_ControllerType value) {
  assert(::apollo::control::ControlConf_ControllerType_IsValid(value));
  _impl_.active_controllers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.active_controllers)
}
inline void ControlConf::_internal_add_active_controllers(::apollo::control::ControlConf_ControllerType value) {
  assert(::apollo::control::ControlConf_ControllerType_IsValid(value));
  _impl_.active_controllers_.Add(value);
}
inline void ControlConf::add_active_controllers(::apollo::control::ControlConf_ControllerType value) {
  _internal_add_active_controllers(value);
  // @@protoc_insertion_point(field_add:apollo.control.ControlConf.active_controllers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ControlConf::active_controllers() const {
  // @@protoc_insertion_point(field_list:apollo.control.ControlConf.active_controllers)
  return _impl_.active_controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ControlConf::_internal_mutable_active_controllers() {
  return &_impl_.active_controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ControlConf::mutable_active_controllers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.ControlConf.active_controllers)
  return _internal_mutable_active_controllers();
}

// optional int32 max_steering_percentage_allowed = 8;
inline bool ControlConf::_internal_has_max_steering_percentage_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ControlConf::has_max_steering_percentage_allowed() const {
  return _internal_has_max_steering_percentage_allowed();
}
inline void ControlConf::clear_max_steering_percentage_allowed() {
  _impl_.max_steering_percentage_allowed_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t ControlConf::_internal_max_steering_percentage_allowed() const {
  return _impl_.max_steering_percentage_allowed_;
}
inline int32_t ControlConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_steering_percentage_allowed)
  return _internal_max_steering_percentage_allowed();
}
inline void ControlConf::_internal_set_max_steering_percentage_allowed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.max_steering_percentage_allowed_ = value;
}
inline void ControlConf::set_max_steering_percentage_allowed(int32_t value) {
  _internal_set_max_steering_percentage_allowed(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_steering_percentage_allowed)
}

// optional double max_status_interval_sec = 9;
inline bool ControlConf::_internal_has_max_status_interval_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ControlConf::has_max_status_interval_sec() const {
  return _internal_has_max_status_interval_sec();
}
inline void ControlConf::clear_max_status_interval_sec() {
  _impl_.max_status_interval_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ControlConf::_internal_max_status_interval_sec() const {
  return _impl_.max_status_interval_sec_;
}
inline double ControlConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.max_status_interval_sec)
  return _internal_max_status_interval_sec();
}
inline void ControlConf::_internal_set_max_status_interval_sec(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_status_interval_sec_ = value;
}
inline void ControlConf::set_max_status_interval_sec(double value) {
  _internal_set_max_status_interval_sec(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.max_status_interval_sec)
}

// optional .apollo.control.LatControllerConf lat_controller_conf = 10;
inline bool ControlConf::_internal_has_lat_controller_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lat_controller_conf_ != nullptr);
  return value;
}
inline bool ControlConf::has_lat_controller_conf() const {
  return _internal_has_lat_controller_conf();
}
inline const ::apollo::control::LatControllerConf& ControlConf::_internal_lat_controller_conf() const {
  const ::apollo::control::LatControllerConf* p = _impl_.lat_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::LatControllerConf&>(
      ::apollo::control::_LatControllerConf_default_instance_);
}
inline const ::apollo::control::LatControllerConf& ControlConf::lat_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lat_controller_conf)
  return _internal_lat_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_lat_controller_conf(
    ::apollo::control::LatControllerConf* lat_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_controller_conf_);
  }
  _impl_.lat_controller_conf_ = lat_controller_conf;
  if (lat_controller_conf) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.ControlConf.lat_controller_conf)
}
inline ::apollo::control::LatControllerConf* ControlConf::release_lat_controller_conf() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::control::LatControllerConf* temp = _impl_.lat_controller_conf_;
  _impl_.lat_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::LatControllerConf* ControlConf::unsafe_arena_release_lat_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lat_controller_conf)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::control::LatControllerConf* temp = _impl_.lat_controller_conf_;
  _impl_.lat_controller_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::LatControllerConf* ControlConf::_internal_mutable_lat_controller_conf() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lat_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::LatControllerConf>(GetArenaForAllocation());
    _impl_.lat_controller_conf_ = p;
  }
  return _impl_.lat_controller_conf_;
}
inline ::apollo::control::LatControllerConf* ControlConf::mutable_lat_controller_conf() {
  ::apollo::control::LatControllerConf* _msg = _internal_mutable_lat_controller_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lat_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_lat_controller_conf(::apollo::control::LatControllerConf* lat_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_controller_conf_);
  }
  if (lat_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_controller_conf));
    if (message_arena != submessage_arena) {
      lat_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_controller_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lat_controller_conf_ = lat_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lat_controller_conf)
}

// optional .apollo.control.LonControllerConf lon_controller_conf = 11;
inline bool ControlConf::_internal_has_lon_controller_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lon_controller_conf_ != nullptr);
  return value;
}
inline bool ControlConf::has_lon_controller_conf() const {
  return _internal_has_lon_controller_conf();
}
inline const ::apollo::control::LonControllerConf& ControlConf::_internal_lon_controller_conf() const {
  const ::apollo::control::LonControllerConf* p = _impl_.lon_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::LonControllerConf&>(
      ::apollo::control::_LonControllerConf_default_instance_);
}
inline const ::apollo::control::LonControllerConf& ControlConf::lon_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.lon_controller_conf)
  return _internal_lon_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_lon_controller_conf(
    ::apollo::control::LonControllerConf* lon_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_controller_conf_);
  }
  _impl_.lon_controller_conf_ = lon_controller_conf;
  if (lon_controller_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.ControlConf.lon_controller_conf)
}
inline ::apollo::control::LonControllerConf* ControlConf::release_lon_controller_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::control::LonControllerConf* temp = _impl_.lon_controller_conf_;
  _impl_.lon_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::LonControllerConf* ControlConf::unsafe_arena_release_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.lon_controller_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::control::LonControllerConf* temp = _impl_.lon_controller_conf_;
  _impl_.lon_controller_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::LonControllerConf* ControlConf::_internal_mutable_lon_controller_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lon_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::LonControllerConf>(GetArenaForAllocation());
    _impl_.lon_controller_conf_ = p;
  }
  return _impl_.lon_controller_conf_;
}
inline ::apollo::control::LonControllerConf* ControlConf::mutable_lon_controller_conf() {
  ::apollo::control::LonControllerConf* _msg = _internal_mutable_lon_controller_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.lon_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_lon_controller_conf(::apollo::control::LonControllerConf* lon_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_controller_conf_);
  }
  if (lon_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_controller_conf));
    if (message_arena != submessage_arena) {
      lon_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_controller_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lon_controller_conf_ = lon_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.lon_controller_conf)
}

// optional double trajectory_period = 12;
inline bool ControlConf::_internal_has_trajectory_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ControlConf::has_trajectory_period() const {
  return _internal_has_trajectory_period();
}
inline void ControlConf::clear_trajectory_period() {
  _impl_.trajectory_period_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ControlConf::_internal_trajectory_period() const {
  return _impl_.trajectory_period_;
}
inline double ControlConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.trajectory_period)
  return _internal_trajectory_period();
}
inline void ControlConf::_internal_set_trajectory_period(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.trajectory_period_ = value;
}
inline void ControlConf::set_trajectory_period(double value) {
  _internal_set_trajectory_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.trajectory_period)
}

// optional double chassis_period = 13;
inline bool ControlConf::_internal_has_chassis_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ControlConf::has_chassis_period() const {
  return _internal_has_chassis_period();
}
inline void ControlConf::clear_chassis_period() {
  _impl_.chassis_period_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ControlConf::_internal_chassis_period() const {
  return _impl_.chassis_period_;
}
inline double ControlConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.chassis_period)
  return _internal_chassis_period();
}
inline void ControlConf::_internal_set_chassis_period(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.chassis_period_ = value;
}
inline void ControlConf::set_chassis_period(double value) {
  _internal_set_chassis_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.chassis_period)
}

// optional double localization_period = 14;
inline bool ControlConf::_internal_has_localization_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ControlConf::has_localization_period() const {
  return _internal_has_localization_period();
}
inline void ControlConf::clear_localization_period() {
  _impl_.localization_period_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ControlConf::_internal_localization_period() const {
  return _impl_.localization_period_;
}
inline double ControlConf::localization_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.localization_period)
  return _internal_localization_period();
}
inline void ControlConf::_internal_set_localization_period(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.localization_period_ = value;
}
inline void ControlConf::set_localization_period(double value) {
  _internal_set_localization_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.localization_period)
}

// optional double minimum_speed_resolution = 15;
inline bool ControlConf::_internal_has_minimum_speed_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ControlConf::has_minimum_speed_resolution() const {
  return _internal_has_minimum_speed_resolution();
}
inline void ControlConf::clear_minimum_speed_resolution() {
  _impl_.minimum_speed_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ControlConf::_internal_minimum_speed_resolution() const {
  return _impl_.minimum_speed_resolution_;
}
inline double ControlConf::minimum_speed_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.minimum_speed_resolution)
  return _internal_minimum_speed_resolution();
}
inline void ControlConf::_internal_set_minimum_speed_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.minimum_speed_resolution_ = value;
}
inline void ControlConf::set_minimum_speed_resolution(double value) {
  _internal_set_minimum_speed_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.minimum_speed_resolution)
}

// optional .apollo.control.MPCControllerConf mpc_controller_conf = 16;
inline bool ControlConf::_internal_has_mpc_controller_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mpc_controller_conf_ != nullptr);
  return value;
}
inline bool ControlConf::has_mpc_controller_conf() const {
  return _internal_has_mpc_controller_conf();
}
inline const ::apollo::control::MPCControllerConf& ControlConf::_internal_mpc_controller_conf() const {
  const ::apollo::control::MPCControllerConf* p = _impl_.mpc_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::control::MPCControllerConf&>(
      ::apollo::control::_MPCControllerConf_default_instance_);
}
inline const ::apollo::control::MPCControllerConf& ControlConf::mpc_controller_conf() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.mpc_controller_conf)
  return _internal_mpc_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_mpc_controller_conf(
    ::apollo::control::MPCControllerConf* mpc_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mpc_controller_conf_);
  }
  _impl_.mpc_controller_conf_ = mpc_controller_conf;
  if (mpc_controller_conf) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.control.ControlConf.mpc_controller_conf)
}
inline ::apollo::control::MPCControllerConf* ControlConf::release_mpc_controller_conf() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::MPCControllerConf* temp = _impl_.mpc_controller_conf_;
  _impl_.mpc_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::control::MPCControllerConf* ControlConf::unsafe_arena_release_mpc_controller_conf() {
  // @@protoc_insertion_point(field_release:apollo.control.ControlConf.mpc_controller_conf)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::control::MPCControllerConf* temp = _impl_.mpc_controller_conf_;
  _impl_.mpc_controller_conf_ = nullptr;
  return temp;
}
inline ::apollo::control::MPCControllerConf* ControlConf::_internal_mutable_mpc_controller_conf() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.mpc_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::MPCControllerConf>(GetArenaForAllocation());
    _impl_.mpc_controller_conf_ = p;
  }
  return _impl_.mpc_controller_conf_;
}
inline ::apollo::control::MPCControllerConf* ControlConf::mutable_mpc_controller_conf() {
  ::apollo::control::MPCControllerConf* _msg = _internal_mutable_mpc_controller_conf();
  // @@protoc_insertion_point(field_mutable:apollo.control.ControlConf.mpc_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_mpc_controller_conf(::apollo::control::MPCControllerConf* mpc_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mpc_controller_conf_);
  }
  if (mpc_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpc_controller_conf));
    if (message_arena != submessage_arena) {
      mpc_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mpc_controller_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mpc_controller_conf_ = mpc_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.ControlConf.mpc_controller_conf)
}

// optional double query_relative_time = 17;
inline bool ControlConf::_internal_has_query_relative_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ControlConf::has_query_relative_time() const {
  return _internal_has_query_relative_time();
}
inline void ControlConf::clear_query_relative_time() {
  _impl_.query_relative_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ControlConf::_internal_query_relative_time() const {
  return _impl_.query_relative_time_;
}
inline double ControlConf::query_relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.query_relative_time)
  return _internal_query_relative_time();
}
inline void ControlConf::_internal_set_query_relative_time(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.query_relative_time_ = value;
}
inline void ControlConf::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.query_relative_time)
}

// optional double minimum_speed_protection = 18;
inline bool ControlConf::_internal_has_minimum_speed_protection() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ControlConf::has_minimum_speed_protection() const {
  return _internal_has_minimum_speed_protection();
}
inline void ControlConf::clear_minimum_speed_protection() {
  _impl_.minimum_speed_protection_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double ControlConf::_internal_minimum_speed_protection() const {
  return _impl_.minimum_speed_protection_;
}
inline double ControlConf::minimum_speed_protection() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlConf.minimum_speed_protection)
  return _internal_minimum_speed_protection();
}
inline void ControlConf::_internal_set_minimum_speed_protection(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.minimum_speed_protection_ = value;
}
inline void ControlConf::set_minimum_speed_protection(double value) {
  _internal_set_minimum_speed_protection(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlConf.minimum_speed_protection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::control::ControlConf_ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::control::ControlConf_ControllerType>() {
  return ::apollo::control::ControlConf_ControllerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto
