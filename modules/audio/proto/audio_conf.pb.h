// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/audio/proto/audio_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2faudio_2fproto_2faudio_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2faudio_2fproto_2faudio_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2faudio_2fproto_2faudio_5fconf_2eproto;
namespace apollo {
namespace audio {
class AudioConf;
struct AudioConfDefaultTypeInternal;
extern AudioConfDefaultTypeInternal _AudioConf_default_instance_;
class TopicConf;
struct TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
}  // namespace audio
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::audio::AudioConf* Arena::CreateMaybeMessage<::apollo::audio::AudioConf>(Arena*);
template<> ::apollo::audio::TopicConf* Arena::CreateMaybeMessage<::apollo::audio::TopicConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace audio {

// ===================================================================

class TopicConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.audio.TopicConf) */ {
 public:
  inline TopicConf() : TopicConf(nullptr) {}
  ~TopicConf() override;
  explicit PROTOBUF_CONSTEXPR TopicConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicConf(const TopicConf& from);
  TopicConf(TopicConf&& from) noexcept
    : TopicConf() {
    *this = ::std::move(from);
  }

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicConf& operator=(TopicConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicConf* internal_default_instance() {
    return reinterpret_cast<const TopicConf*>(
               &_TopicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicConf& a, TopicConf& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.audio.TopicConf";
  }
  protected:
  explicit TopicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataTopicNameFieldNumber = 1,
    kAudioDetectionTopicNameFieldNumber = 2,
    kLocalizationTopicNameFieldNumber = 3,
    kAudioEventTopicNameFieldNumber = 4,
    kPerceptionTopicNameFieldNumber = 5,
  };
  // optional string audio_data_topic_name = 1;
  bool has_audio_data_topic_name() const;
  private:
  bool _internal_has_audio_data_topic_name() const;
  public:
  void clear_audio_data_topic_name();
  const std::string& audio_data_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_data_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_data_topic_name();
  PROTOBUF_NODISCARD std::string* release_audio_data_topic_name();
  void set_allocated_audio_data_topic_name(std::string* audio_data_topic_name);
  private:
  const std::string& _internal_audio_data_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data_topic_name(const std::string& value);
  std::string* _internal_mutable_audio_data_topic_name();
  public:

  // optional string audio_detection_topic_name = 2;
  bool has_audio_detection_topic_name() const;
  private:
  bool _internal_has_audio_detection_topic_name() const;
  public:
  void clear_audio_detection_topic_name();
  const std::string& audio_detection_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_detection_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_detection_topic_name();
  PROTOBUF_NODISCARD std::string* release_audio_detection_topic_name();
  void set_allocated_audio_detection_topic_name(std::string* audio_detection_topic_name);
  private:
  const std::string& _internal_audio_detection_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_detection_topic_name(const std::string& value);
  std::string* _internal_mutable_audio_detection_topic_name();
  public:

  // optional string localization_topic_name = 3;
  bool has_localization_topic_name() const;
  private:
  bool _internal_has_localization_topic_name() const;
  public:
  void clear_localization_topic_name();
  const std::string& localization_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_topic_name();
  PROTOBUF_NODISCARD std::string* release_localization_topic_name();
  void set_allocated_localization_topic_name(std::string* localization_topic_name);
  private:
  const std::string& _internal_localization_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_topic_name(const std::string& value);
  std::string* _internal_mutable_localization_topic_name();
  public:

  // optional string audio_event_topic_name = 4;
  bool has_audio_event_topic_name() const;
  private:
  bool _internal_has_audio_event_topic_name() const;
  public:
  void clear_audio_event_topic_name();
  const std::string& audio_event_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_event_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_event_topic_name();
  PROTOBUF_NODISCARD std::string* release_audio_event_topic_name();
  void set_allocated_audio_event_topic_name(std::string* audio_event_topic_name);
  private:
  const std::string& _internal_audio_event_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_event_topic_name(const std::string& value);
  std::string* _internal_mutable_audio_event_topic_name();
  public:

  // optional string perception_topic_name = 5;
  bool has_perception_topic_name() const;
  private:
  bool _internal_has_perception_topic_name() const;
  public:
  void clear_perception_topic_name();
  const std::string& perception_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_perception_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_perception_topic_name();
  PROTOBUF_NODISCARD std::string* release_perception_topic_name();
  void set_allocated_perception_topic_name(std::string* perception_topic_name);
  private:
  const std::string& _internal_perception_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_perception_topic_name(const std::string& value);
  std::string* _internal_mutable_perception_topic_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.audio.TopicConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_detection_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_event_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr perception_topic_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2faudio_2fproto_2faudio_5fconf_2eproto;
};
// -------------------------------------------------------------------

class AudioConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.audio.AudioConf) */ {
 public:
  inline AudioConf() : AudioConf(nullptr) {}
  ~AudioConf() override;
  explicit PROTOBUF_CONSTEXPR AudioConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioConf(const AudioConf& from);
  AudioConf(AudioConf&& from) noexcept
    : AudioConf() {
    *this = ::std::move(from);
  }

  inline AudioConf& operator=(const AudioConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConf& operator=(AudioConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioConf* internal_default_instance() {
    return reinterpret_cast<const AudioConf*>(
               &_AudioConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioConf& a, AudioConf& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.audio.AudioConf";
  }
  protected:
  explicit AudioConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespeakerExtrinsicsPathFieldNumber = 2,
    kTopicConfFieldNumber = 1,
  };
  // optional string respeaker_extrinsics_path = 2;
  bool has_respeaker_extrinsics_path() const;
  private:
  bool _internal_has_respeaker_extrinsics_path() const;
  public:
  void clear_respeaker_extrinsics_path();
  const std::string& respeaker_extrinsics_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_respeaker_extrinsics_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_respeaker_extrinsics_path();
  PROTOBUF_NODISCARD std::string* release_respeaker_extrinsics_path();
  void set_allocated_respeaker_extrinsics_path(std::string* respeaker_extrinsics_path);
  private:
  const std::string& _internal_respeaker_extrinsics_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_respeaker_extrinsics_path(const std::string& value);
  std::string* _internal_mutable_respeaker_extrinsics_path();
  public:

  // optional .apollo.audio.TopicConf topic_conf = 1;
  bool has_topic_conf() const;
  private:
  bool _internal_has_topic_conf() const;
  public:
  void clear_topic_conf();
  const ::apollo::audio::TopicConf& topic_conf() const;
  PROTOBUF_NODISCARD ::apollo::audio::TopicConf* release_topic_conf();
  ::apollo::audio::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::audio::TopicConf* topic_conf);
  private:
  const ::apollo::audio::TopicConf& _internal_topic_conf() const;
  ::apollo::audio::TopicConf* _internal_mutable_topic_conf();
  public:
  void unsafe_arena_set_allocated_topic_conf(
      ::apollo::audio::TopicConf* topic_conf);
  ::apollo::audio::TopicConf* unsafe_arena_release_topic_conf();

  // @@protoc_insertion_point(class_scope:apollo.audio.AudioConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr respeaker_extrinsics_path_;
    ::apollo::audio::TopicConf* topic_conf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2faudio_2fproto_2faudio_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicConf

// optional string audio_data_topic_name = 1;
inline bool TopicConf::_internal_has_audio_data_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicConf::has_audio_data_topic_name() const {
  return _internal_has_audio_data_topic_name();
}
inline void TopicConf::clear_audio_data_topic_name() {
  _impl_.audio_data_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TopicConf::audio_data_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_data_topic_name)
  return _internal_audio_data_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_audio_data_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.audio_data_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_data_topic_name)
}
inline std::string* TopicConf::mutable_audio_data_topic_name() {
  std::string* _s = _internal_mutable_audio_data_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_data_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_audio_data_topic_name() const {
  return _impl_.audio_data_topic_name_.Get();
}
inline void TopicConf::_internal_set_audio_data_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.audio_data_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_audio_data_topic_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.audio_data_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_audio_data_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_data_topic_name)
  if (!_internal_has_audio_data_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.audio_data_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_data_topic_name_.IsDefault()) {
    _impl_.audio_data_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_audio_data_topic_name(std::string* audio_data_topic_name) {
  if (audio_data_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.audio_data_topic_name_.SetAllocated(audio_data_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_data_topic_name_.IsDefault()) {
    _impl_.audio_data_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_data_topic_name)
}

// optional string audio_detection_topic_name = 2;
inline bool TopicConf::_internal_has_audio_detection_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicConf::has_audio_detection_topic_name() const {
  return _internal_has_audio_detection_topic_name();
}
inline void TopicConf::clear_audio_detection_topic_name() {
  _impl_.audio_detection_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TopicConf::audio_detection_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_detection_topic_name)
  return _internal_audio_detection_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_audio_detection_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.audio_detection_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_detection_topic_name)
}
inline std::string* TopicConf::mutable_audio_detection_topic_name() {
  std::string* _s = _internal_mutable_audio_detection_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_detection_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_audio_detection_topic_name() const {
  return _impl_.audio_detection_topic_name_.Get();
}
inline void TopicConf::_internal_set_audio_detection_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.audio_detection_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_audio_detection_topic_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.audio_detection_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_audio_detection_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_detection_topic_name)
  if (!_internal_has_audio_detection_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.audio_detection_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_detection_topic_name_.IsDefault()) {
    _impl_.audio_detection_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_audio_detection_topic_name(std::string* audio_detection_topic_name) {
  if (audio_detection_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.audio_detection_topic_name_.SetAllocated(audio_detection_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_detection_topic_name_.IsDefault()) {
    _impl_.audio_detection_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_detection_topic_name)
}

// optional string localization_topic_name = 3;
inline bool TopicConf::_internal_has_localization_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TopicConf::has_localization_topic_name() const {
  return _internal_has_localization_topic_name();
}
inline void TopicConf::clear_localization_topic_name() {
  _impl_.localization_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TopicConf::localization_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.localization_topic_name)
  return _internal_localization_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_localization_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.localization_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.localization_topic_name)
}
inline std::string* TopicConf::mutable_localization_topic_name() {
  std::string* _s = _internal_mutable_localization_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.localization_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_localization_topic_name() const {
  return _impl_.localization_topic_name_.Get();
}
inline void TopicConf::_internal_set_localization_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.localization_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_localization_topic_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.localization_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_localization_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.localization_topic_name)
  if (!_internal_has_localization_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.localization_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_name_.IsDefault()) {
    _impl_.localization_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_localization_topic_name(std::string* localization_topic_name) {
  if (localization_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.localization_topic_name_.SetAllocated(localization_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_name_.IsDefault()) {
    _impl_.localization_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.localization_topic_name)
}

// optional string audio_event_topic_name = 4;
inline bool TopicConf::_internal_has_audio_event_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TopicConf::has_audio_event_topic_name() const {
  return _internal_has_audio_event_topic_name();
}
inline void TopicConf::clear_audio_event_topic_name() {
  _impl_.audio_event_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TopicConf::audio_event_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_event_topic_name)
  return _internal_audio_event_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_audio_event_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.audio_event_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_event_topic_name)
}
inline std::string* TopicConf::mutable_audio_event_topic_name() {
  std::string* _s = _internal_mutable_audio_event_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_event_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_audio_event_topic_name() const {
  return _impl_.audio_event_topic_name_.Get();
}
inline void TopicConf::_internal_set_audio_event_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.audio_event_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_audio_event_topic_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.audio_event_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_audio_event_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_event_topic_name)
  if (!_internal_has_audio_event_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.audio_event_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_event_topic_name_.IsDefault()) {
    _impl_.audio_event_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_audio_event_topic_name(std::string* audio_event_topic_name) {
  if (audio_event_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.audio_event_topic_name_.SetAllocated(audio_event_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_event_topic_name_.IsDefault()) {
    _impl_.audio_event_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_event_topic_name)
}

// optional string perception_topic_name = 5;
inline bool TopicConf::_internal_has_perception_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TopicConf::has_perception_topic_name() const {
  return _internal_has_perception_topic_name();
}
inline void TopicConf::clear_perception_topic_name() {
  _impl_.perception_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TopicConf::perception_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.perception_topic_name)
  return _internal_perception_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_perception_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.perception_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.perception_topic_name)
}
inline std::string* TopicConf::mutable_perception_topic_name() {
  std::string* _s = _internal_mutable_perception_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.perception_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_perception_topic_name() const {
  return _impl_.perception_topic_name_.Get();
}
inline void TopicConf::_internal_set_perception_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.perception_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_perception_topic_name() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.perception_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_perception_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.perception_topic_name)
  if (!_internal_has_perception_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.perception_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_topic_name_.IsDefault()) {
    _impl_.perception_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_perception_topic_name(std::string* perception_topic_name) {
  if (perception_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.perception_topic_name_.SetAllocated(perception_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_topic_name_.IsDefault()) {
    _impl_.perception_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.perception_topic_name)
}

// -------------------------------------------------------------------

// AudioConf

// optional .apollo.audio.TopicConf topic_conf = 1;
inline bool AudioConf::_internal_has_topic_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_conf_ != nullptr);
  return value;
}
inline bool AudioConf::has_topic_conf() const {
  return _internal_has_topic_conf();
}
inline void AudioConf::clear_topic_conf() {
  if (_impl_.topic_conf_ != nullptr) _impl_.topic_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::audio::TopicConf& AudioConf::_internal_topic_conf() const {
  const ::apollo::audio::TopicConf* p = _impl_.topic_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::audio::TopicConf&>(
      ::apollo::audio::_TopicConf_default_instance_);
}
inline const ::apollo::audio::TopicConf& AudioConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioConf.topic_conf)
  return _internal_topic_conf();
}
inline void AudioConf::unsafe_arena_set_allocated_topic_conf(
    ::apollo::audio::TopicConf* topic_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_conf_);
  }
  _impl_.topic_conf_ = topic_conf;
  if (topic_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.audio.AudioConf.topic_conf)
}
inline ::apollo::audio::TopicConf* AudioConf::release_topic_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::audio::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::audio::TopicConf* AudioConf::unsafe_arena_release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioConf.topic_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::audio::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
  return temp;
}
inline ::apollo::audio::TopicConf* AudioConf::_internal_mutable_topic_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.topic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::audio::TopicConf>(GetArenaForAllocation());
    _impl_.topic_conf_ = p;
  }
  return _impl_.topic_conf_;
}
inline ::apollo::audio::TopicConf* AudioConf::mutable_topic_conf() {
  ::apollo::audio::TopicConf* _msg = _internal_mutable_topic_conf();
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioConf.topic_conf)
  return _msg;
}
inline void AudioConf::set_allocated_topic_conf(::apollo::audio::TopicConf* topic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_conf_;
  }
  if (topic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_conf);
    if (message_arena != submessage_arena) {
      topic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioConf.topic_conf)
}

// optional string respeaker_extrinsics_path = 2;
inline bool AudioConf::_internal_has_respeaker_extrinsics_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AudioConf::has_respeaker_extrinsics_path() const {
  return _internal_has_respeaker_extrinsics_path();
}
inline void AudioConf::clear_respeaker_extrinsics_path() {
  _impl_.respeaker_extrinsics_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioConf::respeaker_extrinsics_path() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioConf.respeaker_extrinsics_path)
  return _internal_respeaker_extrinsics_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioConf::set_respeaker_extrinsics_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.respeaker_extrinsics_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.audio.AudioConf.respeaker_extrinsics_path)
}
inline std::string* AudioConf::mutable_respeaker_extrinsics_path() {
  std::string* _s = _internal_mutable_respeaker_extrinsics_path();
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioConf.respeaker_extrinsics_path)
  return _s;
}
inline const std::string& AudioConf::_internal_respeaker_extrinsics_path() const {
  return _impl_.respeaker_extrinsics_path_.Get();
}
inline void AudioConf::_internal_set_respeaker_extrinsics_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.respeaker_extrinsics_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioConf::_internal_mutable_respeaker_extrinsics_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.respeaker_extrinsics_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioConf::release_respeaker_extrinsics_path() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioConf.respeaker_extrinsics_path)
  if (!_internal_has_respeaker_extrinsics_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.respeaker_extrinsics_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.respeaker_extrinsics_path_.IsDefault()) {
    _impl_.respeaker_extrinsics_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AudioConf::set_allocated_respeaker_extrinsics_path(std::string* respeaker_extrinsics_path) {
  if (respeaker_extrinsics_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.respeaker_extrinsics_path_.SetAllocated(respeaker_extrinsics_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.respeaker_extrinsics_path_.IsDefault()) {
    _impl_.respeaker_extrinsics_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioConf.respeaker_extrinsics_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fconf_2eproto
