// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/audio/proto/audio_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/audio/proto/audio_common.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/localization/proto/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2faudio_2fproto_2faudio_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2faudio_2fproto_2faudio_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2faudio_2fproto_2faudio_5fevent_2eproto;
namespace apollo {
namespace audio {
class AudioEvent;
struct AudioEventDefaultTypeInternal;
extern AudioEventDefaultTypeInternal _AudioEvent_default_instance_;
}  // namespace audio
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::audio::AudioEvent* Arena::CreateMaybeMessage<::apollo::audio::AudioEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace audio {

// ===================================================================

class AudioEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.audio.AudioEvent) */ {
 public:
  inline AudioEvent() : AudioEvent(nullptr) {}
  ~AudioEvent() override;
  explicit PROTOBUF_CONSTEXPR AudioEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioEvent(const AudioEvent& from);
  AudioEvent(AudioEvent&& from) noexcept
    : AudioEvent() {
    *this = ::std::move(from);
  }

  inline AudioEvent& operator=(const AudioEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioEvent& operator=(AudioEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioEvent* internal_default_instance() {
    return reinterpret_cast<const AudioEvent*>(
               &_AudioEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioEvent& a, AudioEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.audio.AudioEvent";
  }
  protected:
  explicit AudioEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 7,
    kIdFieldNumber = 2,
    kMovingResultFieldNumber = 3,
    kAudioTypeFieldNumber = 4,
    kSirenIsOnFieldNumber = 5,
    kAudioDirectionFieldNumber = 6,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.localization.Pose pose = 7;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::apollo::localization::Pose& pose() const;
  PROTOBUF_NODISCARD ::apollo::localization::Pose* release_pose();
  ::apollo::localization::Pose* mutable_pose();
  void set_allocated_pose(::apollo::localization::Pose* pose);
  private:
  const ::apollo::localization::Pose& _internal_pose() const;
  ::apollo::localization::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::apollo::localization::Pose* pose);
  ::apollo::localization::Pose* unsafe_arena_release_pose();

  // optional int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  bool has_moving_result() const;
  private:
  bool _internal_has_moving_result() const;
  public:
  void clear_moving_result();
  ::apollo::audio::MovingResult moving_result() const;
  void set_moving_result(::apollo::audio::MovingResult value);
  private:
  ::apollo::audio::MovingResult _internal_moving_result() const;
  void _internal_set_moving_result(::apollo::audio::MovingResult value);
  public:

  // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
  bool has_audio_type() const;
  private:
  bool _internal_has_audio_type() const;
  public:
  void clear_audio_type();
  ::apollo::audio::AudioType audio_type() const;
  void set_audio_type(::apollo::audio::AudioType value);
  private:
  ::apollo::audio::AudioType _internal_audio_type() const;
  void _internal_set_audio_type(::apollo::audio::AudioType value);
  public:

  // optional bool siren_is_on = 5;
  bool has_siren_is_on() const;
  private:
  bool _internal_has_siren_is_on() const;
  public:
  void clear_siren_is_on();
  bool siren_is_on() const;
  void set_siren_is_on(bool value);
  private:
  bool _internal_siren_is_on() const;
  void _internal_set_siren_is_on(bool value);
  public:

  // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
  bool has_audio_direction() const;
  private:
  bool _internal_has_audio_direction() const;
  public:
  void clear_audio_direction();
  ::apollo::audio::AudioDirection audio_direction() const;
  void set_audio_direction(::apollo::audio::AudioDirection value);
  private:
  ::apollo::audio::AudioDirection _internal_audio_direction() const;
  void _internal_set_audio_direction(::apollo::audio::AudioDirection value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.audio.AudioEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Header* header_;
    ::apollo::localization::Pose* pose_;
    int32_t id_;
    int moving_result_;
    int audio_type_;
    bool siren_is_on_;
    int audio_direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2faudio_2fproto_2faudio_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioEvent

// optional .apollo.common.Header header = 1;
inline bool AudioEvent::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool AudioEvent::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& AudioEvent::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& AudioEvent::header() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.header)
  return _internal_header();
}
inline void AudioEvent::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.audio.AudioEvent.header)
}
inline ::apollo::common::Header* AudioEvent::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* AudioEvent::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioEvent.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* AudioEvent::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* AudioEvent::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioEvent.header)
  return _msg;
}
inline void AudioEvent::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioEvent.header)
}

// optional int32 id = 2;
inline bool AudioEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AudioEvent::has_id() const {
  return _internal_has_id();
}
inline void AudioEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AudioEvent::_internal_id() const {
  return _impl_.id_;
}
inline int32_t AudioEvent::id() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.id)
  return _internal_id();
}
inline void AudioEvent::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void AudioEvent::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.id)
}

// optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
inline bool AudioEvent::_internal_has_moving_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AudioEvent::has_moving_result() const {
  return _internal_has_moving_result();
}
inline void AudioEvent::clear_moving_result() {
  _impl_.moving_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::audio::MovingResult AudioEvent::_internal_moving_result() const {
  return static_cast< ::apollo::audio::MovingResult >(_impl_.moving_result_);
}
inline ::apollo::audio::MovingResult AudioEvent::moving_result() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.moving_result)
  return _internal_moving_result();
}
inline void AudioEvent::_internal_set_moving_result(::apollo::audio::MovingResult value) {
  assert(::apollo::audio::MovingResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.moving_result_ = value;
}
inline void AudioEvent::set_moving_result(::apollo::audio::MovingResult value) {
  _internal_set_moving_result(value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.moving_result)
}

// optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
inline bool AudioEvent::_internal_has_audio_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AudioEvent::has_audio_type() const {
  return _internal_has_audio_type();
}
inline void AudioEvent::clear_audio_type() {
  _impl_.audio_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::audio::AudioType AudioEvent::_internal_audio_type() const {
  return static_cast< ::apollo::audio::AudioType >(_impl_.audio_type_);
}
inline ::apollo::audio::AudioType AudioEvent::audio_type() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.audio_type)
  return _internal_audio_type();
}
inline void AudioEvent::_internal_set_audio_type(::apollo::audio::AudioType value) {
  assert(::apollo::audio::AudioType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.audio_type_ = value;
}
inline void AudioEvent::set_audio_type(::apollo::audio::AudioType value) {
  _internal_set_audio_type(value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.audio_type)
}

// optional bool siren_is_on = 5;
inline bool AudioEvent::_internal_has_siren_is_on() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AudioEvent::has_siren_is_on() const {
  return _internal_has_siren_is_on();
}
inline void AudioEvent::clear_siren_is_on() {
  _impl_.siren_is_on_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool AudioEvent::_internal_siren_is_on() const {
  return _impl_.siren_is_on_;
}
inline bool AudioEvent::siren_is_on() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.siren_is_on)
  return _internal_siren_is_on();
}
inline void AudioEvent::_internal_set_siren_is_on(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.siren_is_on_ = value;
}
inline void AudioEvent::set_siren_is_on(bool value) {
  _internal_set_siren_is_on(value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.siren_is_on)
}

// optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
inline bool AudioEvent::_internal_has_audio_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AudioEvent::has_audio_direction() const {
  return _internal_has_audio_direction();
}
inline void AudioEvent::clear_audio_direction() {
  _impl_.audio_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::audio::AudioDirection AudioEvent::_internal_audio_direction() const {
  return static_cast< ::apollo::audio::AudioDirection >(_impl_.audio_direction_);
}
inline ::apollo::audio::AudioDirection AudioEvent::audio_direction() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.audio_direction)
  return _internal_audio_direction();
}
inline void AudioEvent::_internal_set_audio_direction(::apollo::audio::AudioDirection value) {
  assert(::apollo::audio::AudioDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.audio_direction_ = value;
}
inline void AudioEvent::set_audio_direction(::apollo::audio::AudioDirection value) {
  _internal_set_audio_direction(value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.audio_direction)
}

// optional .apollo.localization.Pose pose = 7;
inline bool AudioEvent::_internal_has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline bool AudioEvent::has_pose() const {
  return _internal_has_pose();
}
inline const ::apollo::localization::Pose& AudioEvent::_internal_pose() const {
  const ::apollo::localization::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::localization::Pose&>(
      ::apollo::localization::_Pose_default_instance_);
}
inline const ::apollo::localization::Pose& AudioEvent::pose() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.pose)
  return _internal_pose();
}
inline void AudioEvent::unsafe_arena_set_allocated_pose(
    ::apollo::localization::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.audio.AudioEvent.pose)
}
inline ::apollo::localization::Pose* AudioEvent::release_pose() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::localization::Pose* AudioEvent::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioEvent.pose)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::apollo::localization::Pose* AudioEvent::_internal_mutable_pose() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::localization::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::apollo::localization::Pose* AudioEvent::mutable_pose() {
  ::apollo::localization::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioEvent.pose)
  return _msg;
}
inline void AudioEvent::set_allocated_pose(::apollo::localization::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioEvent.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fevent_2eproto
