// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/audio/proto/audio_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2faudio_2fproto_2faudio_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2faudio_2fproto_2faudio_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2faudio_2fproto_2faudio_5fcommon_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace audio {

enum MovingResult : int {
  UNKNOWN = 0,
  APPROACHING = 1,
  DEPARTING = 2,
  STATIONARY = 3
};
bool MovingResult_IsValid(int value);
constexpr MovingResult MovingResult_MIN = UNKNOWN;
constexpr MovingResult MovingResult_MAX = STATIONARY;
constexpr int MovingResult_ARRAYSIZE = MovingResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingResult_descriptor();
template<typename T>
inline const std::string& MovingResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MovingResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MovingResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MovingResult_descriptor(), enum_t_value);
}
inline bool MovingResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MovingResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MovingResult>(
    MovingResult_descriptor(), name, value);
}
enum AudioType : int {
  UNKNOWN_TYPE = 0,
  POLICE = 1,
  AMBULANCE = 2,
  FIRETRUCK = 3
};
bool AudioType_IsValid(int value);
constexpr AudioType AudioType_MIN = UNKNOWN_TYPE;
constexpr AudioType AudioType_MAX = FIRETRUCK;
constexpr int AudioType_ARRAYSIZE = AudioType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioType_descriptor();
template<typename T>
inline const std::string& AudioType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioType_descriptor(), enum_t_value);
}
inline bool AudioType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioType>(
    AudioType_descriptor(), name, value);
}
enum AudioDirection : int {
  UNKNOWN_DIRECTION = 0,
  FRONT = 1,
  LEFT = 2,
  BACK = 3,
  RIGHT = 4
};
bool AudioDirection_IsValid(int value);
constexpr AudioDirection AudioDirection_MIN = UNKNOWN_DIRECTION;
constexpr AudioDirection AudioDirection_MAX = RIGHT;
constexpr int AudioDirection_ARRAYSIZE = AudioDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioDirection_descriptor();
template<typename T>
inline const std::string& AudioDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioDirection_descriptor(), enum_t_value);
}
inline bool AudioDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioDirection>(
    AudioDirection_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::audio::MovingResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::MovingResult>() {
  return ::apollo::audio::MovingResult_descriptor();
}
template <> struct is_proto_enum< ::apollo::audio::AudioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::AudioType>() {
  return ::apollo::audio::AudioType_descriptor();
}
template <> struct is_proto_enum< ::apollo::audio::AudioDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::AudioDirection>() {
  return ::apollo::audio::AudioDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2faudio_2fproto_2faudio_5fcommon_2eproto
