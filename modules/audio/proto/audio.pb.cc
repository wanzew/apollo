// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/audio/proto/audio.proto

#include "modules/audio/proto/audio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace audio {
PROTOBUF_CONSTEXPR AudioDetection::AudioDetection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.is_siren_)*/false
  , /*decltype(_impl_.moving_result_)*/0
  , /*decltype(_impl_.source_degree_)*/0} {}
struct AudioDetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioDetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioDetectionDefaultTypeInternal() {}
  union {
    AudioDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioDetectionDefaultTypeInternal _AudioDetection_default_instance_;
}  // namespace audio
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2faudio_2fproto_2faudio_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2faudio_2fproto_2faudio_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2faudio_2fproto_2faudio_2eproto = nullptr;

const uint32_t TableStruct_modules_2faudio_2fproto_2faudio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_.is_siren_),
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_.moving_result_),
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::audio::AudioDetection, _impl_.source_degree_),
  0,
  2,
  3,
  1,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::audio::AudioDetection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::audio::_AudioDetection_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2faudio_2fproto_2faudio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037modules/audio/proto/audio.proto\022\014apoll"
  "o.audio\032&modules/audio/proto/audio_commo"
  "n.proto\032#modules/common/proto/geometry.p"
  "roto\032!modules/common/proto/header.proto\""
  "\306\001\n\016AudioDetection\022%\n\006header\030\001 \001(\0132\025.apo"
  "llo.common.Header\022\020\n\010is_siren\030\002 \001(\010\022:\n\rm"
  "oving_result\030\003 \001(\0162\032.apollo.audio.Moving"
  "Result:\007UNKNOWN\022(\n\010position\030\004 \001(\0132\026.apol"
  "lo.common.Point3D\022\025\n\rsource_degree\030\005 \001(\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_deps[3] = {
  &::descriptor_table_modules_2faudio_2fproto_2faudio_5fcommon_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2faudio_2fproto_2faudio_2eproto = {
    false, false, 360, descriptor_table_protodef_modules_2faudio_2fproto_2faudio_2eproto,
    "modules/audio/proto/audio.proto",
    &descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_once, descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_modules_2faudio_2fproto_2faudio_2eproto::offsets,
    file_level_metadata_modules_2faudio_2fproto_2faudio_2eproto, file_level_enum_descriptors_modules_2faudio_2fproto_2faudio_2eproto,
    file_level_service_descriptors_modules_2faudio_2fproto_2faudio_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_getter() {
  return &descriptor_table_modules_2faudio_2fproto_2faudio_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2faudio_2fproto_2faudio_2eproto(&descriptor_table_modules_2faudio_2fproto_2faudio_2eproto);
namespace apollo {
namespace audio {

// ===================================================================

class AudioDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioDetection>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const AudioDetection* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_siren(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moving_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& position(const AudioDetection* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
AudioDetection::_Internal::header(const AudioDetection* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::Point3D&
AudioDetection::_Internal::position(const AudioDetection* msg) {
  return *msg->_impl_.position_;
}
void AudioDetection::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioDetection::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioDetection::AudioDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.audio.AudioDetection)
}
AudioDetection::AudioDetection(const AudioDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.is_siren_){}
    , decltype(_impl_.moving_result_){}
    , decltype(_impl_.source_degree_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  ::memcpy(&_impl_.is_siren_, &from._impl_.is_siren_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_degree_) -
    reinterpret_cast<char*>(&_impl_.is_siren_)) + sizeof(_impl_.source_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.audio.AudioDetection)
}

inline void AudioDetection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.is_siren_){false}
    , decltype(_impl_.moving_result_){0}
    , decltype(_impl_.source_degree_){0}
  };
}

AudioDetection::~AudioDetection() {
  // @@protoc_insertion_point(destructor:apollo.audio.AudioDetection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void AudioDetection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.audio.AudioDetection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.is_siren_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_degree_) -
        reinterpret_cast<char*>(&_impl_.is_siren_)) + sizeof(_impl_.source_degree_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioDetection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_siren = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_siren(&has_bits);
          _impl_.is_siren_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::audio::MovingResult_IsValid(val))) {
            _internal_set_moving_result(static_cast<::apollo::audio::MovingResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double source_degree = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_source_degree(&has_bits);
          _impl_.source_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioDetection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.audio.AudioDetection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional bool is_siren = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_siren(), target);
  }

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_moving_result(), target);
  }

  // optional .apollo.common.Point3D position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double source_degree = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_source_degree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.audio.AudioDetection)
  return target;
}

size_t AudioDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.audio.AudioDetection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.Point3D position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional bool is_siren = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_moving_result());
    }

    // optional double source_degree = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioDetection::GetClassData() const { return &_class_data_; }

void AudioDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioDetection *>(to)->MergeFrom(
      static_cast<const AudioDetection &>(from));
}


void AudioDetection::MergeFrom(const AudioDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.audio.AudioDetection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_siren_ = from._impl_.is_siren_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.moving_result_ = from._impl_.moving_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.source_degree_ = from._impl_.source_degree_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioDetection::CopyFrom(const AudioDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.audio.AudioDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDetection::IsInitialized() const {
  return true;
}

void AudioDetection::InternalSwap(AudioDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioDetection, _impl_.source_degree_)
      + sizeof(AudioDetection::_impl_.source_degree_)
      - PROTOBUF_FIELD_OFFSET(AudioDetection, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioDetection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_getter, &descriptor_table_modules_2faudio_2fproto_2faudio_2eproto_once,
      file_level_metadata_modules_2faudio_2fproto_2faudio_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace audio
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::audio::AudioDetection*
Arena::CreateMaybeMessage< ::apollo::audio::AudioDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::audio::AudioDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
