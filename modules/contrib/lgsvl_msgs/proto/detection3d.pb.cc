// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/contrib/lgsvl_msgs/proto/detection3d.proto

#include "modules/contrib/lgsvl_msgs/proto/detection3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace contrib {
namespace lgsvl_msgs {
PROTOBUF_CONSTEXPR Pose::Pose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
PROTOBUF_CONSTEXPR BoundingBox3D::BoundingBox3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundingBox3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundingBox3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundingBox3DDefaultTypeInternal() {}
  union {
    BoundingBox3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
PROTOBUF_CONSTEXPR Detection3D::Detection3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Detection3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Detection3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Detection3DDefaultTypeInternal() {}
  union {
    Detection3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Detection3DDefaultTypeInternal _Detection3D_default_instance_;
}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Pose, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Pose, _impl_.orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::BoundingBox3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::BoundingBox3D, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::BoundingBox3D, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::contrib::lgsvl_msgs::Detection3D, _impl_.velocity_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::contrib::lgsvl_msgs::Pose)},
  { 8, -1, -1, sizeof(::apollo::contrib::lgsvl_msgs::BoundingBox3D)},
  { 16, -1, -1, sizeof(::apollo::contrib::lgsvl_msgs::Detection3D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::contrib::lgsvl_msgs::_Pose_default_instance_._instance,
  &::apollo::contrib::lgsvl_msgs::_BoundingBox3D_default_instance_._instance,
  &::apollo::contrib::lgsvl_msgs::_Detection3D_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/contrib/lgsvl_msgs/proto/detec"
  "tion3d.proto\022\031apollo.contrib.lgsvl_msgs\032"
  "!modules/common/proto/header.proto\032#modu"
  "les/common/proto/geometry.proto\0322modules"
  "/contrib/lgsvl_msgs/proto/detection2d.pr"
  "oto\"`\n\004Pose\022(\n\010position\030\001 \001(\0132\026.apollo.c"
  "ommon.Point3D\022.\n\013orientation\030\002 \001(\0132\031.apo"
  "llo.common.Quaternion\"t\n\rBoundingBox3D\0221"
  "\n\010position\030\001 \001(\0132\037.apollo.contrib.lgsvl_"
  "msgs.Pose\0220\n\004size\030\002 \001(\0132\".apollo.contrib"
  ".lgsvl_msgs.Vector3\"\312\001\n\013Detection3D\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022\n\n\002id"
  "\030\002 \001(\r\022\r\n\005label\030\003 \001(\t\022\r\n\005score\030\004 \001(\001\0226\n\004"
  "bbox\030\005 \001(\0132(.apollo.contrib.lgsvl_msgs.B"
  "oundingBox3D\0222\n\010velocity\030\006 \001(\0132 .apollo."
  "contrib.lgsvl_msgs.Twistb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto = {
    false, false, 632, descriptor_table_protodef_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto,
    "modules/contrib/lgsvl_msgs/proto/detection3d.proto",
    &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_once, descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto::offsets,
    file_level_metadata_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto, file_level_enum_descriptors_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto,
    file_level_service_descriptors_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_getter() {
  return &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto(&descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto);
namespace apollo {
namespace contrib {
namespace lgsvl_msgs {

// ===================================================================

class Pose::_Internal {
 public:
  static const ::apollo::common::Point3D& position(const Pose* msg);
  static const ::apollo::common::Quaternion& orientation(const Pose* msg);
};

const ::apollo::common::Point3D&
Pose::_Internal::position(const Pose* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Quaternion&
Pose::_Internal::orientation(const Pose* msg) {
  return *msg->_impl_.orientation_;
}
void Pose::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void Pose::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.contrib.lgsvl_msgs.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _impl_.orientation_ = new ::apollo::common::Quaternion(*from._impl_.orientation_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.contrib.lgsvl_msgs.Pose)
}

inline void Pose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:apollo.contrib.lgsvl_msgs.Pose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
}

void Pose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.contrib.lgsvl_msgs.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.orientation_ != nullptr) {
    delete _impl_.orientation_;
  }
  _impl_.orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.common.Point3D position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.common.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.contrib.lgsvl_msgs.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Point3D position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .apollo.common.Quaternion orientation = 2;
  if (this->_internal_has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.contrib.lgsvl_msgs.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.contrib.lgsvl_msgs.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apollo.common.Point3D position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .apollo.common.Quaternion orientation = 2;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orientation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.contrib.lgsvl_msgs.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::apollo::common::Quaternion::MergeFrom(from._internal_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.contrib.lgsvl_msgs.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)
      + sizeof(Pose::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_getter, &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_once,
      file_level_metadata_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto[0]);
}

// ===================================================================

class BoundingBox3D::_Internal {
 public:
  static const ::apollo::contrib::lgsvl_msgs::Pose& position(const BoundingBox3D* msg);
  static const ::apollo::contrib::lgsvl_msgs::Vector3& size(const BoundingBox3D* msg);
};

const ::apollo::contrib::lgsvl_msgs::Pose&
BoundingBox3D::_Internal::position(const BoundingBox3D* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::contrib::lgsvl_msgs::Vector3&
BoundingBox3D::_Internal::size(const BoundingBox3D* msg) {
  return *msg->_impl_.size_;
}
void BoundingBox3D::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
BoundingBox3D::BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.contrib.lgsvl_msgs.BoundingBox3D)
}
BoundingBox3D::BoundingBox3D(const BoundingBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::contrib::lgsvl_msgs::Pose(*from._impl_.position_);
  }
  if (from._internal_has_size()) {
    _impl_.size_ = new ::apollo::contrib::lgsvl_msgs::Vector3(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.contrib.lgsvl_msgs.BoundingBox3D)
}

inline void BoundingBox3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoundingBox3D::~BoundingBox3D() {
  // @@protoc_insertion_point(destructor:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundingBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void BoundingBox3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundingBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.contrib.lgsvl_msgs.Pose position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.contrib.lgsvl_msgs.Vector3 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingBox3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.contrib.lgsvl_msgs.Pose position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .apollo.contrib.lgsvl_msgs.Vector3 size = 2;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  return target;
}

size_t BoundingBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apollo.contrib.lgsvl_msgs.Pose position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .apollo.contrib.lgsvl_msgs.Vector3 size = 2;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundingBox3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundingBox3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundingBox3D::GetClassData() const { return &_class_data_; }

void BoundingBox3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoundingBox3D *>(to)->MergeFrom(
      static_cast<const BoundingBox3D &>(from));
}


void BoundingBox3D::MergeFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::apollo::contrib::lgsvl_msgs::Pose::MergeFrom(from._internal_position());
  }
  if (from._internal_has_size()) {
    _internal_mutable_size()->::apollo::contrib::lgsvl_msgs::Vector3::MergeFrom(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingBox3D::CopyFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.contrib.lgsvl_msgs.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3D::IsInitialized() const {
  return true;
}

void BoundingBox3D::InternalSwap(BoundingBox3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox3D, _impl_.size_)
      + sizeof(BoundingBox3D::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox3D, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_getter, &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_once,
      file_level_metadata_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto[1]);
}

// ===================================================================

class Detection3D::_Internal {
 public:
  static const ::apollo::common::Header& header(const Detection3D* msg);
  static const ::apollo::contrib::lgsvl_msgs::BoundingBox3D& bbox(const Detection3D* msg);
  static const ::apollo::contrib::lgsvl_msgs::Twist& velocity(const Detection3D* msg);
};

const ::apollo::common::Header&
Detection3D::_Internal::header(const Detection3D* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::contrib::lgsvl_msgs::BoundingBox3D&
Detection3D::_Internal::bbox(const Detection3D* msg) {
  return *msg->_impl_.bbox_;
}
const ::apollo::contrib::lgsvl_msgs::Twist&
Detection3D::_Internal::velocity(const Detection3D* msg) {
  return *msg->_impl_.velocity_;
}
void Detection3D::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void Detection3D::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
Detection3D::Detection3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.contrib.lgsvl_msgs.Detection3D)
}
Detection3D::Detection3D(const Detection3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.score_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _impl_.label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_bbox()) {
    _impl_.bbox_ = new ::apollo::contrib::lgsvl_msgs::BoundingBox3D(*from._impl_.bbox_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::contrib::lgsvl_msgs::Twist(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:apollo.contrib.lgsvl_msgs.Detection3D)
}

inline void Detection3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Detection3D::~Detection3D() {
  // @@protoc_insertion_point(destructor:apollo.contrib.lgsvl_msgs.Detection3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detection3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.bbox_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void Detection3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Detection3D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.contrib.lgsvl_msgs.Detection3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bbox_ != nullptr) {
    delete _impl_.bbox_;
  }
  _impl_.bbox_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  ::memset(&_impl_.score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apollo.contrib.lgsvl_msgs.Detection3D.label"));
        } else
          goto handle_unusual;
        continue;
      // double score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .apollo.contrib.lgsvl_msgs.BoundingBox3D bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detection3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.contrib.lgsvl_msgs.Detection3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apollo.contrib.lgsvl_msgs.Detection3D.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // double score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_score(), target);
  }

  // .apollo.contrib.lgsvl_msgs.BoundingBox3D bbox = 5;
  if (this->_internal_has_bbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.contrib.lgsvl_msgs.Detection3D)
  return target;
}

size_t Detection3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.contrib.lgsvl_msgs.Detection3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 3;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .apollo.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .apollo.contrib.lgsvl_msgs.BoundingBox3D bbox = 5;
  if (this->_internal_has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bbox_);
  }

  // .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // double score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detection3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detection3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detection3D::GetClassData() const { return &_class_data_; }

void Detection3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detection3D *>(to)->MergeFrom(
      static_cast<const Detection3D &>(from));
}


void Detection3D::MergeFrom(const Detection3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.contrib.lgsvl_msgs.Detection3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_bbox()) {
    _internal_mutable_bbox()->::apollo::contrib::lgsvl_msgs::BoundingBox3D::MergeFrom(from._internal_bbox());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::apollo::contrib::lgsvl_msgs::Twist::MergeFrom(from._internal_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detection3D::CopyFrom(const Detection3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.contrib.lgsvl_msgs.Detection3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection3D::IsInitialized() const {
  return true;
}

void Detection3D::InternalSwap(Detection3D* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection3D, _impl_.id_)
      + sizeof(Detection3D::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Detection3D, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_getter, &descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto_once,
      file_level_metadata_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::contrib::lgsvl_msgs::Pose*
Arena::CreateMaybeMessage< ::apollo::contrib::lgsvl_msgs::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::contrib::lgsvl_msgs::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::contrib::lgsvl_msgs::BoundingBox3D*
Arena::CreateMaybeMessage< ::apollo::contrib::lgsvl_msgs::BoundingBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::contrib::lgsvl_msgs::BoundingBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::contrib::lgsvl_msgs::Detection3D*
Arena::CreateMaybeMessage< ::apollo::contrib::lgsvl_msgs::Detection3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::contrib::lgsvl_msgs::Detection3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
