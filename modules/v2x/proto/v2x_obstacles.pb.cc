// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_obstacles.proto

#include "modules/v2x/proto/v2x_obstacles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace v2x {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR MiniAreaMap::MiniAreaMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rscu_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feature_position_)*/nullptr
  , /*decltype(_impl_.start_position_)*/nullptr
  , /*decltype(_impl_.end_position_)*/nullptr} {}
struct MiniAreaMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiniAreaMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiniAreaMapDefaultTypeInternal() {}
  union {
    MiniAreaMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiniAreaMapDefaultTypeInternal _MiniAreaMap_default_instance_;
PROTOBUF_CONSTEXPR AbnormalInformation::AbnormalInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_speed_)*/0
  , /*decltype(_impl_.vehicle_density_)*/0} {}
struct AbnormalInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbnormalInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbnormalInformationDefaultTypeInternal() {}
  union {
    AbnormalInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbnormalInformationDefaultTypeInternal _AbnormalInformation_default_instance_;
PROTOBUF_CONSTEXPR V2XInformation::V2XInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.v2x_type_)*/{}
  , /*decltype(_impl_.traffic_event_start_)*/nullptr
  , /*decltype(_impl_.traffic_event_start_error_)*/nullptr
  , /*decltype(_impl_.traffic_event_end_)*/nullptr
  , /*decltype(_impl_.traffic_event_end_error_)*/nullptr
  , /*decltype(_impl_.abnormal_info_)*/nullptr} {}
struct V2XInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V2XInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V2XInformationDefaultTypeInternal() {}
  union {
    V2XInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V2XInformationDefaultTypeInternal _V2XInformation_default_instance_;
PROTOBUF_CONSTEXPR V2XObstacle::V2XObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.perception_obstacle_)*/nullptr
  , /*decltype(_impl_.v2x_info_)*/nullptr} {}
struct V2XObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V2XObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V2XObstacleDefaultTypeInternal() {}
  union {
    V2XObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V2XObstacleDefaultTypeInternal _V2XObstacle_default_instance_;
PROTOBUF_CONSTEXPR V2XObstacles::V2XObstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.v2x_obstacle_)*/{}
  , /*decltype(_impl_.area_map_)*/nullptr
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.traffic_flow_)*/0
  , /*decltype(_impl_.error_code_)*/0} {}
struct V2XObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V2XObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V2XObstaclesDefaultTypeInternal() {}
  union {
    V2XObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V2XObstaclesDefaultTypeInternal _V2XObstacles_default_instance_;
}  // namespace v2x
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto = nullptr;

const uint32_t TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Point, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Point, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _impl_.rscu_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _impl_.feature_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _impl_.start_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::MiniAreaMap, _impl_.end_position_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::AbnormalInformation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::AbnormalInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::AbnormalInformation, _impl_.average_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::AbnormalInformation, _impl_.vehicle_density_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.v2x_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.traffic_event_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.traffic_event_start_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.traffic_event_end_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.traffic_event_end_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XInformation, _impl_.abnormal_info_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacle, _impl_.perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacle, _impl_.v2x_info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_.v2x_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_.area_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_.traffic_flow_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::V2XObstacles, _impl_.error_code_),
  ~0u,
  0,
  2,
  1,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::v2x::Point)},
  { 12, 22, -1, sizeof(::apollo::v2x::MiniAreaMap)},
  { 26, 34, -1, sizeof(::apollo::v2x::AbnormalInformation)},
  { 36, 48, -1, sizeof(::apollo::v2x::V2XInformation)},
  { 54, 62, -1, sizeof(::apollo::v2x::V2XObstacle)},
  { 64, 75, -1, sizeof(::apollo::v2x::V2XObstacles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::v2x::_Point_default_instance_._instance,
  &::apollo::v2x::_MiniAreaMap_default_instance_._instance,
  &::apollo::v2x::_AbnormalInformation_default_instance_._instance,
  &::apollo::v2x::_V2XInformation_default_instance_._instance,
  &::apollo::v2x::_V2XObstacle_default_instance_._instance,
  &::apollo::v2x::_V2XObstacles_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/v2x/proto/v2x_obstacles.proto\022"
  "\napollo.v2x\032!modules/common/proto/header"
  ".proto\032%modules/common/proto/error_code."
  "proto\0322modules/perception/proto/percepti"
  "on_obstacle.proto\"(\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n"
  "\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\237\001\n\013MiniAreaMap\022\017\n\007r"
  "scu_id\030\001 \001(\014\022+\n\020feature_position\030\002 \001(\0132\021"
  ".apollo.v2x.Point\022)\n\016start_position\030\003 \001("
  "\0132\021.apollo.v2x.Point\022\'\n\014end_position\030\004 \001"
  "(\0132\021.apollo.v2x.Point\"E\n\023AbnormalInforma"
  "tion\022\025\n\raverage_speed\030\001 \001(\001\022\027\n\017vehicle_d"
  "ensity\030\002 \001(\001\"\374\002\n\016V2XInformation\0224\n\010v2x_t"
  "ype\030\001 \003(\0162\".apollo.v2x.V2XInformation.V2"
  "XType\022.\n\023traffic_event_start\030\003 \001(\0132\021.apo"
  "llo.v2x.Point\0224\n\031traffic_event_start_err"
  "or\030\004 \001(\0132\021.apollo.v2x.Point\022,\n\021traffic_e"
  "vent_end\030\005 \001(\0132\021.apollo.v2x.Point\0222\n\027tra"
  "ffic_event_end_error\030\006 \001(\0132\021.apollo.v2x."
  "Point\0226\n\rabnormal_info\030\007 \001(\0132\037.apollo.v2"
  "x.AbnormalInformation\"4\n\007V2XType\022\010\n\004NONE"
  "\020\000\022\017\n\013ZOMBIES_CAR\020\001\022\016\n\nBLIND_ZONE\020\002\"\177\n\013V"
  "2XObstacle\022B\n\023perception_obstacle\030\001 \001(\0132"
  "%.apollo.perception.PerceptionObstacle\022,"
  "\n\010v2x_info\030\002 \001(\0132\032.apollo.v2x.V2XInforma"
  "tion\"\327\001\n\014V2XObstacles\022-\n\014v2x_obstacle\030\001 "
  "\003(\0132\027.apollo.v2x.V2XObstacle\022)\n\010area_map"
  "\030\002 \001(\0132\027.apollo.v2x.MiniAreaMap\022\024\n\014traff"
  "ic_flow\030\003 \001(\001\022%\n\006header\030\004 \001(\0132\025.apollo.c"
  "ommon.Header\0220\n\nerror_code\030\005 \001(\0162\030.apoll"
  "o.common.ErrorCode:\002OK"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto = {
    false, false, 1182, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto,
    "modules/v2x/proto/v2x_obstacles.proto",
    &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once, descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto::offsets,
    file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto,
    file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter() {
  return &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto);
namespace apollo {
namespace v2x {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V2XInformation_V2XType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[0];
}
bool V2XInformation_V2XType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr V2XInformation_V2XType V2XInformation::NONE;
constexpr V2XInformation_V2XType V2XInformation::ZOMBIES_CAR;
constexpr V2XInformation_V2XType V2XInformation::BLIND_ZONE;
constexpr V2XInformation_V2XType V2XInformation::V2XType_MIN;
constexpr V2XInformation_V2XType V2XInformation::V2XType_MAX;
constexpr int V2XInformation::V2XType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)
      + sizeof(Point::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[0]);
}

// ===================================================================

class MiniAreaMap::_Internal {
 public:
  using HasBits = decltype(std::declval<MiniAreaMap>()._impl_._has_bits_);
  static void set_has_rscu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::Point& feature_position(const MiniAreaMap* msg);
  static void set_has_feature_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Point& start_position(const MiniAreaMap* msg);
  static void set_has_start_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::v2x::Point& end_position(const MiniAreaMap* msg);
  static void set_has_end_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::v2x::Point&
MiniAreaMap::_Internal::feature_position(const MiniAreaMap* msg) {
  return *msg->_impl_.feature_position_;
}
const ::apollo::v2x::Point&
MiniAreaMap::_Internal::start_position(const MiniAreaMap* msg) {
  return *msg->_impl_.start_position_;
}
const ::apollo::v2x::Point&
MiniAreaMap::_Internal::end_position(const MiniAreaMap* msg) {
  return *msg->_impl_.end_position_;
}
MiniAreaMap::MiniAreaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.MiniAreaMap)
}
MiniAreaMap::MiniAreaMap(const MiniAreaMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rscu_id_){}
    , decltype(_impl_.feature_position_){nullptr}
    , decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.end_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rscu_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rscu_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rscu_id()) {
    _impl_.rscu_id_.Set(from._internal_rscu_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_feature_position()) {
    _impl_.feature_position_ = new ::apollo::v2x::Point(*from._impl_.feature_position_);
  }
  if (from._internal_has_start_position()) {
    _impl_.start_position_ = new ::apollo::v2x::Point(*from._impl_.start_position_);
  }
  if (from._internal_has_end_position()) {
    _impl_.end_position_ = new ::apollo::v2x::Point(*from._impl_.end_position_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.MiniAreaMap)
}

inline void MiniAreaMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rscu_id_){}
    , decltype(_impl_.feature_position_){nullptr}
    , decltype(_impl_.start_position_){nullptr}
    , decltype(_impl_.end_position_){nullptr}
  };
  _impl_.rscu_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rscu_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MiniAreaMap::~MiniAreaMap() {
  // @@protoc_insertion_point(destructor:apollo.v2x.MiniAreaMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MiniAreaMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rscu_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.feature_position_;
  if (this != internal_default_instance()) delete _impl_.start_position_;
  if (this != internal_default_instance()) delete _impl_.end_position_;
}

void MiniAreaMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MiniAreaMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.MiniAreaMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rscu_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.feature_position_ != nullptr);
      _impl_.feature_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.start_position_ != nullptr);
      _impl_.start_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.end_position_ != nullptr);
      _impl_.end_position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiniAreaMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes rscu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rscu_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point feature_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MiniAreaMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.MiniAreaMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes rscu_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rscu_id(), target);
  }

  // optional .apollo.v2x.Point feature_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::feature_position(this),
        _Internal::feature_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Point start_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_position(this),
        _Internal::start_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Point end_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_position(this),
        _Internal::end_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.MiniAreaMap)
  return target;
}

size_t MiniAreaMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.MiniAreaMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes rscu_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rscu_id());
    }

    // optional .apollo.v2x.Point feature_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feature_position_);
    }

    // optional .apollo.v2x.Point start_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_position_);
    }

    // optional .apollo.v2x.Point end_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MiniAreaMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MiniAreaMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MiniAreaMap::GetClassData() const { return &_class_data_; }

void MiniAreaMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MiniAreaMap *>(to)->MergeFrom(
      static_cast<const MiniAreaMap &>(from));
}


void MiniAreaMap::MergeFrom(const MiniAreaMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.MiniAreaMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rscu_id(from._internal_rscu_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_feature_position()->::apollo::v2x::Point::MergeFrom(from._internal_feature_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start_position()->::apollo::v2x::Point::MergeFrom(from._internal_start_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_end_position()->::apollo::v2x::Point::MergeFrom(from._internal_end_position());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MiniAreaMap::CopyFrom(const MiniAreaMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.MiniAreaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniAreaMap::IsInitialized() const {
  return true;
}

void MiniAreaMap::InternalSwap(MiniAreaMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rscu_id_, lhs_arena,
      &other->_impl_.rscu_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MiniAreaMap, _impl_.end_position_)
      + sizeof(MiniAreaMap::_impl_.end_position_)
      - PROTOBUF_FIELD_OFFSET(MiniAreaMap, _impl_.feature_position_)>(
          reinterpret_cast<char*>(&_impl_.feature_position_),
          reinterpret_cast<char*>(&other->_impl_.feature_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MiniAreaMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[1]);
}

// ===================================================================

class AbnormalInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<AbnormalInformation>()._impl_._has_bits_);
  static void set_has_average_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_density(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AbnormalInformation::AbnormalInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.AbnormalInformation)
}
AbnormalInformation::AbnormalInformation(const AbnormalInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_speed_){}
    , decltype(_impl_.vehicle_density_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.average_speed_, &from._impl_.average_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vehicle_density_) -
    reinterpret_cast<char*>(&_impl_.average_speed_)) + sizeof(_impl_.vehicle_density_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.AbnormalInformation)
}

inline void AbnormalInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_speed_){0}
    , decltype(_impl_.vehicle_density_){0}
  };
}

AbnormalInformation::~AbnormalInformation() {
  // @@protoc_insertion_point(destructor:apollo.v2x.AbnormalInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbnormalInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbnormalInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbnormalInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.AbnormalInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.average_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vehicle_density_) -
        reinterpret_cast<char*>(&_impl_.average_speed_)) + sizeof(_impl_.vehicle_density_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbnormalInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double average_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_average_speed(&has_bits);
          _impl_.average_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicle_density = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_vehicle_density(&has_bits);
          _impl_.vehicle_density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbnormalInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.AbnormalInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double average_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_average_speed(), target);
  }

  // optional double vehicle_density = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_vehicle_density(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.AbnormalInformation)
  return target;
}

size_t AbnormalInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.AbnormalInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double average_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_density = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbnormalInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AbnormalInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbnormalInformation::GetClassData() const { return &_class_data_; }

void AbnormalInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AbnormalInformation *>(to)->MergeFrom(
      static_cast<const AbnormalInformation &>(from));
}


void AbnormalInformation::MergeFrom(const AbnormalInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.AbnormalInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.average_speed_ = from._impl_.average_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vehicle_density_ = from._impl_.vehicle_density_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbnormalInformation::CopyFrom(const AbnormalInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.AbnormalInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbnormalInformation::IsInitialized() const {
  return true;
}

void AbnormalInformation::InternalSwap(AbnormalInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbnormalInformation, _impl_.vehicle_density_)
      + sizeof(AbnormalInformation::_impl_.vehicle_density_)
      - PROTOBUF_FIELD_OFFSET(AbnormalInformation, _impl_.average_speed_)>(
          reinterpret_cast<char*>(&_impl_.average_speed_),
          reinterpret_cast<char*>(&other->_impl_.average_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbnormalInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[2]);
}

// ===================================================================

class V2XInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<V2XInformation>()._impl_._has_bits_);
  static const ::apollo::v2x::Point& traffic_event_start(const V2XInformation* msg);
  static void set_has_traffic_event_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::Point& traffic_event_start_error(const V2XInformation* msg);
  static void set_has_traffic_event_start_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Point& traffic_event_end(const V2XInformation* msg);
  static void set_has_traffic_event_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::v2x::Point& traffic_event_end_error(const V2XInformation* msg);
  static void set_has_traffic_event_end_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::v2x::AbnormalInformation& abnormal_info(const V2XInformation* msg);
  static void set_has_abnormal_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::v2x::Point&
V2XInformation::_Internal::traffic_event_start(const V2XInformation* msg) {
  return *msg->_impl_.traffic_event_start_;
}
const ::apollo::v2x::Point&
V2XInformation::_Internal::traffic_event_start_error(const V2XInformation* msg) {
  return *msg->_impl_.traffic_event_start_error_;
}
const ::apollo::v2x::Point&
V2XInformation::_Internal::traffic_event_end(const V2XInformation* msg) {
  return *msg->_impl_.traffic_event_end_;
}
const ::apollo::v2x::Point&
V2XInformation::_Internal::traffic_event_end_error(const V2XInformation* msg) {
  return *msg->_impl_.traffic_event_end_error_;
}
const ::apollo::v2x::AbnormalInformation&
V2XInformation::_Internal::abnormal_info(const V2XInformation* msg) {
  return *msg->_impl_.abnormal_info_;
}
V2XInformation::V2XInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.V2XInformation)
}
V2XInformation::V2XInformation(const V2XInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.v2x_type_){from._impl_.v2x_type_}
    , decltype(_impl_.traffic_event_start_){nullptr}
    , decltype(_impl_.traffic_event_start_error_){nullptr}
    , decltype(_impl_.traffic_event_end_){nullptr}
    , decltype(_impl_.traffic_event_end_error_){nullptr}
    , decltype(_impl_.abnormal_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_event_start()) {
    _impl_.traffic_event_start_ = new ::apollo::v2x::Point(*from._impl_.traffic_event_start_);
  }
  if (from._internal_has_traffic_event_start_error()) {
    _impl_.traffic_event_start_error_ = new ::apollo::v2x::Point(*from._impl_.traffic_event_start_error_);
  }
  if (from._internal_has_traffic_event_end()) {
    _impl_.traffic_event_end_ = new ::apollo::v2x::Point(*from._impl_.traffic_event_end_);
  }
  if (from._internal_has_traffic_event_end_error()) {
    _impl_.traffic_event_end_error_ = new ::apollo::v2x::Point(*from._impl_.traffic_event_end_error_);
  }
  if (from._internal_has_abnormal_info()) {
    _impl_.abnormal_info_ = new ::apollo::v2x::AbnormalInformation(*from._impl_.abnormal_info_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.V2XInformation)
}

inline void V2XInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.v2x_type_){arena}
    , decltype(_impl_.traffic_event_start_){nullptr}
    , decltype(_impl_.traffic_event_start_error_){nullptr}
    , decltype(_impl_.traffic_event_end_){nullptr}
    , decltype(_impl_.traffic_event_end_error_){nullptr}
    , decltype(_impl_.abnormal_info_){nullptr}
  };
}

V2XInformation::~V2XInformation() {
  // @@protoc_insertion_point(destructor:apollo.v2x.V2XInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V2XInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v2x_type_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.traffic_event_start_;
  if (this != internal_default_instance()) delete _impl_.traffic_event_start_error_;
  if (this != internal_default_instance()) delete _impl_.traffic_event_end_;
  if (this != internal_default_instance()) delete _impl_.traffic_event_end_error_;
  if (this != internal_default_instance()) delete _impl_.abnormal_info_;
}

void V2XInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V2XInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.V2XInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v2x_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.traffic_event_start_ != nullptr);
      _impl_.traffic_event_start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.traffic_event_start_error_ != nullptr);
      _impl_.traffic_event_start_error_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.traffic_event_end_ != nullptr);
      _impl_.traffic_event_end_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.traffic_event_end_error_ != nullptr);
      _impl_.traffic_event_end_error_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.abnormal_info_ != nullptr);
      _impl_.abnormal_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V2XInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.v2x.V2XInformation.V2XType v2x_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::V2XInformation_V2XType_IsValid(val))) {
              _internal_add_v2x_type(static_cast<::apollo::v2x::V2XInformation_V2XType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_v2x_type(), ptr, ctx, ::apollo::v2x::V2XInformation_V2XType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point traffic_event_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point traffic_event_start_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_start_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point traffic_event_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Point traffic_event_end_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_end_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.AbnormalInformation abnormal_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_abnormal_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V2XInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.V2XInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.v2x.V2XInformation.V2XType v2x_type = 1;
  for (int i = 0, n = this->_internal_v2x_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_v2x_type(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.v2x.Point traffic_event_start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::traffic_event_start(this),
        _Internal::traffic_event_start(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Point traffic_event_start_error = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::traffic_event_start_error(this),
        _Internal::traffic_event_start_error(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Point traffic_event_end = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::traffic_event_end(this),
        _Internal::traffic_event_end(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Point traffic_event_end_error = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::traffic_event_end_error(this),
        _Internal::traffic_event_end_error(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.AbnormalInformation abnormal_info = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::abnormal_info(this),
        _Internal::abnormal_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.V2XInformation)
  return target;
}

size_t V2XInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.V2XInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.V2XInformation.V2XType v2x_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_v2x_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_v2x_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.v2x.Point traffic_event_start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_start_);
    }

    // optional .apollo.v2x.Point traffic_event_start_error = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_start_error_);
    }

    // optional .apollo.v2x.Point traffic_event_end = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_end_);
    }

    // optional .apollo.v2x.Point traffic_event_end_error = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_end_error_);
    }

    // optional .apollo.v2x.AbnormalInformation abnormal_info = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.abnormal_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V2XInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V2XInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V2XInformation::GetClassData() const { return &_class_data_; }

void V2XInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V2XInformation *>(to)->MergeFrom(
      static_cast<const V2XInformation &>(from));
}


void V2XInformation::MergeFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.v2x_type_.MergeFrom(from._impl_.v2x_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_traffic_event_start()->::apollo::v2x::Point::MergeFrom(from._internal_traffic_event_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_traffic_event_start_error()->::apollo::v2x::Point::MergeFrom(from._internal_traffic_event_start_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_traffic_event_end()->::apollo::v2x::Point::MergeFrom(from._internal_traffic_event_end());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_traffic_event_end_error()->::apollo::v2x::Point::MergeFrom(from._internal_traffic_event_end_error());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_abnormal_info()->::apollo::v2x::AbnormalInformation::MergeFrom(from._internal_abnormal_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V2XInformation::CopyFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XInformation::IsInitialized() const {
  return true;
}

void V2XInformation::InternalSwap(V2XInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.v2x_type_.InternalSwap(&other->_impl_.v2x_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V2XInformation, _impl_.abnormal_info_)
      + sizeof(V2XInformation::_impl_.abnormal_info_)
      - PROTOBUF_FIELD_OFFSET(V2XInformation, _impl_.traffic_event_start_)>(
          reinterpret_cast<char*>(&_impl_.traffic_event_start_),
          reinterpret_cast<char*>(&other->_impl_.traffic_event_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V2XInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[3]);
}

// ===================================================================

class V2XObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<V2XObstacle>()._impl_._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& perception_obstacle(const V2XObstacle* msg);
  static void set_has_perception_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::V2XInformation& v2x_info(const V2XObstacle* msg);
  static void set_has_v2x_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::PerceptionObstacle&
V2XObstacle::_Internal::perception_obstacle(const V2XObstacle* msg) {
  return *msg->_impl_.perception_obstacle_;
}
const ::apollo::v2x::V2XInformation&
V2XObstacle::_Internal::v2x_info(const V2XObstacle* msg) {
  return *msg->_impl_.v2x_info_;
}
void V2XObstacle::clear_perception_obstacle() {
  if (_impl_.perception_obstacle_ != nullptr) _impl_.perception_obstacle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
V2XObstacle::V2XObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.V2XObstacle)
}
V2XObstacle::V2XObstacle(const V2XObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){nullptr}
    , decltype(_impl_.v2x_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perception_obstacle()) {
    _impl_.perception_obstacle_ = new ::apollo::perception::PerceptionObstacle(*from._impl_.perception_obstacle_);
  }
  if (from._internal_has_v2x_info()) {
    _impl_.v2x_info_ = new ::apollo::v2x::V2XInformation(*from._impl_.v2x_info_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.V2XObstacle)
}

inline void V2XObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){nullptr}
    , decltype(_impl_.v2x_info_){nullptr}
  };
}

V2XObstacle::~V2XObstacle() {
  // @@protoc_insertion_point(destructor:apollo.v2x.V2XObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V2XObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.perception_obstacle_;
  if (this != internal_default_instance()) delete _impl_.v2x_info_;
}

void V2XObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V2XObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.V2XObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.perception_obstacle_ != nullptr);
      _impl_.perception_obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.v2x_info_ != nullptr);
      _impl_.v2x_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V2XObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perception_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.V2XInformation v2x_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_v2x_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V2XObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.V2XObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::perception_obstacle(this),
        _Internal::perception_obstacle(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.V2XInformation v2x_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::v2x_info(this),
        _Internal::v2x_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.V2XObstacle)
  return target;
}

size_t V2XObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.V2XObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.perception_obstacle_);
    }

    // optional .apollo.v2x.V2XInformation v2x_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.v2x_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V2XObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V2XObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V2XObstacle::GetClassData() const { return &_class_data_; }

void V2XObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V2XObstacle *>(to)->MergeFrom(
      static_cast<const V2XObstacle &>(from));
}


void V2XObstacle::MergeFrom(const V2XObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.V2XObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_perception_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_perception_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_v2x_info()->::apollo::v2x::V2XInformation::MergeFrom(from._internal_v2x_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V2XObstacle::CopyFrom(const V2XObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.V2XObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XObstacle::IsInitialized() const {
  return true;
}

void V2XObstacle::InternalSwap(V2XObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V2XObstacle, _impl_.v2x_info_)
      + sizeof(V2XObstacle::_impl_.v2x_info_)
      - PROTOBUF_FIELD_OFFSET(V2XObstacle, _impl_.perception_obstacle_)>(
          reinterpret_cast<char*>(&_impl_.perception_obstacle_),
          reinterpret_cast<char*>(&other->_impl_.perception_obstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V2XObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[4]);
}

// ===================================================================

class V2XObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<V2XObstacles>()._impl_._has_bits_);
  static const ::apollo::v2x::MiniAreaMap& area_map(const V2XObstacles* msg);
  static void set_has_area_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_traffic_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Header& header(const V2XObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::v2x::MiniAreaMap&
V2XObstacles::_Internal::area_map(const V2XObstacles* msg) {
  return *msg->_impl_.area_map_;
}
const ::apollo::common::Header&
V2XObstacles::_Internal::header(const V2XObstacles* msg) {
  return *msg->_impl_.header_;
}
void V2XObstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
V2XObstacles::V2XObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.V2XObstacles)
}
V2XObstacles::V2XObstacles(const V2XObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.v2x_obstacle_){from._impl_.v2x_obstacle_}
    , decltype(_impl_.area_map_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.traffic_flow_){}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_area_map()) {
    _impl_.area_map_ = new ::apollo::v2x::MiniAreaMap(*from._impl_.area_map_);
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.traffic_flow_, &from._impl_.traffic_flow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.traffic_flow_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.V2XObstacles)
}

inline void V2XObstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.v2x_obstacle_){arena}
    , decltype(_impl_.area_map_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.traffic_flow_){0}
    , decltype(_impl_.error_code_){0}
  };
}

V2XObstacles::~V2XObstacles() {
  // @@protoc_insertion_point(destructor:apollo.v2x.V2XObstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V2XObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v2x_obstacle_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.area_map_;
  if (this != internal_default_instance()) delete _impl_.header_;
}

void V2XObstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V2XObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.V2XObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v2x_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.area_map_ != nullptr);
      _impl_.area_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.traffic_flow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_code_) -
        reinterpret_cast<char*>(&_impl_.traffic_flow_)) + sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V2XObstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.v2x.V2XObstacle v2x_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2x_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.MiniAreaMap area_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_area_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double traffic_flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_traffic_flow(&has_bits);
          _impl_.traffic_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode error_code = 5 [default = OK];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V2XObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.V2XObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.v2x.V2XObstacle v2x_obstacle = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_v2x_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_v2x_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.v2x.MiniAreaMap area_map = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::area_map(this),
        _Internal::area_map(this).GetCachedSize(), target, stream);
  }

  // optional double traffic_flow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_traffic_flow(), target);
  }

  // optional .apollo.common.Header header = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.ErrorCode error_code = 5 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.V2XObstacles)
  return target;
}

size_t V2XObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.V2XObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.V2XObstacle v2x_obstacle = 1;
  total_size += 1UL * this->_internal_v2x_obstacle_size();
  for (const auto& msg : this->_impl_.v2x_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.v2x.MiniAreaMap area_map = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.area_map_);
    }

    // optional .apollo.common.Header header = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double traffic_flow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.ErrorCode error_code = 5 [default = OK];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V2XObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V2XObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V2XObstacles::GetClassData() const { return &_class_data_; }

void V2XObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V2XObstacles *>(to)->MergeFrom(
      static_cast<const V2XObstacles &>(from));
}


void V2XObstacles::MergeFrom(const V2XObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.V2XObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.v2x_obstacle_.MergeFrom(from._impl_.v2x_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_area_map()->::apollo::v2x::MiniAreaMap::MergeFrom(from._internal_area_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.traffic_flow_ = from._impl_.traffic_flow_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V2XObstacles::CopyFrom(const V2XObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.V2XObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XObstacles::IsInitialized() const {
  return true;
}

void V2XObstacles::InternalSwap(V2XObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.v2x_obstacle_.InternalSwap(&other->_impl_.v2x_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V2XObstacles, _impl_.error_code_)
      + sizeof(V2XObstacles::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(V2XObstacles, _impl_.area_map_)>(
          reinterpret_cast<char*>(&_impl_.area_map_),
          reinterpret_cast<char*>(&other->_impl_.area_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V2XObstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::Point*
Arena::CreateMaybeMessage< ::apollo::v2x::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::MiniAreaMap*
Arena::CreateMaybeMessage< ::apollo::v2x::MiniAreaMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::MiniAreaMap >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::AbnormalInformation*
Arena::CreateMaybeMessage< ::apollo::v2x::AbnormalInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::AbnormalInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::V2XInformation*
Arena::CreateMaybeMessage< ::apollo::v2x::V2XInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::V2XInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::V2XObstacle*
Arena::CreateMaybeMessage< ::apollo::v2x::V2XObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::V2XObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::V2XObstacles*
Arena::CreateMaybeMessage< ::apollo::v2x::V2XObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::V2XObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
