// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_junction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto;
namespace apollo {
namespace v2x {
class Id;
struct IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Junction;
struct JunctionDefaultTypeInternal;
extern JunctionDefaultTypeInternal _Junction_default_instance_;
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::v2x::Id* Arena::CreateMaybeMessage<::apollo::v2x::Id>(Arena*);
template<> ::apollo::v2x::Junction* Arena::CreateMaybeMessage<::apollo::v2x::Junction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace v2x {

enum Junction_Type : int {
  Junction_Type_UNKNOWN = 0,
  Junction_Type_IN_ROAD = 1,
  Junction_Type_CROSS_ROAD = 2
};
bool Junction_Type_IsValid(int value);
constexpr Junction_Type Junction_Type_Type_MIN = Junction_Type_UNKNOWN;
constexpr Junction_Type Junction_Type_Type_MAX = Junction_Type_CROSS_ROAD;
constexpr int Junction_Type_Type_ARRAYSIZE = Junction_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Junction_Type_descriptor();
template<typename T>
inline const std::string& Junction_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Junction_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Junction_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Junction_Type_descriptor(), enum_t_value);
}
inline bool Junction_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Junction_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Junction_Type>(
    Junction_Type_descriptor(), name, value);
}
enum Junction_EdgeType : int {
  Junction_EdgeType_PHYSICAL = 0,
  Junction_EdgeType_VIRTUAL = 1
};
bool Junction_EdgeType_IsValid(int value);
constexpr Junction_EdgeType Junction_EdgeType_EdgeType_MIN = Junction_EdgeType_PHYSICAL;
constexpr Junction_EdgeType Junction_EdgeType_EdgeType_MAX = Junction_EdgeType_VIRTUAL;
constexpr int Junction_EdgeType_EdgeType_ARRAYSIZE = Junction_EdgeType_EdgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Junction_EdgeType_descriptor();
template<typename T>
inline const std::string& Junction_EdgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Junction_EdgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Junction_EdgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Junction_EdgeType_descriptor(), enum_t_value);
}
inline bool Junction_EdgeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Junction_EdgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Junction_EdgeType>(
    Junction_EdgeType_descriptor(), name, value);
}
// ===================================================================

class Id final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.Id) */ {
 public:
  inline Id() : Id(nullptr) {}
  ~Id() override;
  explicit PROTOBUF_CONSTEXPR Id(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Id(const Id& from);
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Id* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Id& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Id& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.Id";
  }
  protected:
  explicit Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto;
};
// -------------------------------------------------------------------

class Junction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.Junction) */ {
 public:
  inline Junction() : Junction(nullptr) {}
  ~Junction() override;
  explicit PROTOBUF_CONSTEXPR Junction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Junction(const Junction& from);
  Junction(Junction&& from) noexcept
    : Junction() {
    *this = ::std::move(from);
  }

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Junction& operator=(Junction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Junction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Junction* internal_default_instance() {
    return reinterpret_cast<const Junction*>(
               &_Junction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Junction& a, Junction& b) {
    a.Swap(&b);
  }
  inline void Swap(Junction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Junction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Junction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Junction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Junction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Junction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Junction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.Junction";
  }
  protected:
  explicit Junction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Junction_Type Type;
  static constexpr Type UNKNOWN =
    Junction_Type_UNKNOWN;
  static constexpr Type IN_ROAD =
    Junction_Type_IN_ROAD;
  static constexpr Type CROSS_ROAD =
    Junction_Type_CROSS_ROAD;
  static inline bool Type_IsValid(int value) {
    return Junction_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Junction_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Junction_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Junction_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Junction_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Junction_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Junction_Type_Parse(name, value);
  }

  typedef Junction_EdgeType EdgeType;
  static constexpr EdgeType PHYSICAL =
    Junction_EdgeType_PHYSICAL;
  static constexpr EdgeType VIRTUAL =
    Junction_EdgeType_VIRTUAL;
  static inline bool EdgeType_IsValid(int value) {
    return Junction_EdgeType_IsValid(value);
  }
  static constexpr EdgeType EdgeType_MIN =
    Junction_EdgeType_EdgeType_MIN;
  static constexpr EdgeType EdgeType_MAX =
    Junction_EdgeType_EdgeType_MAX;
  static constexpr int EdgeType_ARRAYSIZE =
    Junction_EdgeType_EdgeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EdgeType_descriptor() {
    return Junction_EdgeType_descriptor();
  }
  template<typename T>
  static inline const std::string& EdgeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EdgeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EdgeType_Name.");
    return Junction_EdgeType_Name(enum_t_value);
  }
  static inline bool EdgeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EdgeType* value) {
    return Junction_EdgeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCrosswalkIdFieldNumber = 3,
    kOverlapIdFieldNumber = 4,
    kLaneIdFieldNumber = 6,
    kEdgeTypeFieldNumber = 8,
    kIdFieldNumber = 1,
    kPolygonFieldNumber = 2,
    kTypeFieldNumber = 7,
    kNumRoadSegmentsFieldNumber = 5,
  };
  // repeated .apollo.v2x.Id crosswalk_id = 3;
  int crosswalk_id_size() const;
  private:
  int _internal_crosswalk_id_size() const;
  public:
  void clear_crosswalk_id();
  ::apollo::v2x::Id* mutable_crosswalk_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
      mutable_crosswalk_id();
  private:
  const ::apollo::v2x::Id& _internal_crosswalk_id(int index) const;
  ::apollo::v2x::Id* _internal_add_crosswalk_id();
  public:
  const ::apollo::v2x::Id& crosswalk_id(int index) const;
  ::apollo::v2x::Id* add_crosswalk_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
      crosswalk_id() const;

  // repeated .apollo.v2x.Id overlap_id = 4;
  int overlap_id_size() const;
  private:
  int _internal_overlap_id_size() const;
  public:
  void clear_overlap_id();
  ::apollo::v2x::Id* mutable_overlap_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
      mutable_overlap_id();
  private:
  const ::apollo::v2x::Id& _internal_overlap_id(int index) const;
  ::apollo::v2x::Id* _internal_add_overlap_id();
  public:
  const ::apollo::v2x::Id& overlap_id(int index) const;
  ::apollo::v2x::Id* add_overlap_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
      overlap_id() const;

  // repeated .apollo.v2x.Id lane_id = 6;
  int lane_id_size() const;
  private:
  int _internal_lane_id_size() const;
  public:
  void clear_lane_id();
  ::apollo::v2x::Id* mutable_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
      mutable_lane_id();
  private:
  const ::apollo::v2x::Id& _internal_lane_id(int index) const;
  ::apollo::v2x::Id* _internal_add_lane_id();
  public:
  const ::apollo::v2x::Id& lane_id(int index) const;
  ::apollo::v2x::Id* add_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
      lane_id() const;

  // repeated .apollo.v2x.Junction.EdgeType edge_type = 8;
  int edge_type_size() const;
  private:
  int _internal_edge_type_size() const;
  public:
  void clear_edge_type();
  private:
  ::apollo::v2x::Junction_EdgeType _internal_edge_type(int index) const;
  void _internal_add_edge_type(::apollo::v2x::Junction_EdgeType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_edge_type();
  public:
  ::apollo::v2x::Junction_EdgeType edge_type(int index) const;
  void set_edge_type(int index, ::apollo::v2x::Junction_EdgeType value);
  void add_edge_type(::apollo::v2x::Junction_EdgeType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& edge_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_edge_type();

  // optional .apollo.v2x.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::v2x::Id& id() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Id* release_id();
  ::apollo::v2x::Id* mutable_id();
  void set_allocated_id(::apollo::v2x::Id* id);
  private:
  const ::apollo::v2x::Id& _internal_id() const;
  ::apollo::v2x::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::v2x::Id* id);
  ::apollo::v2x::Id* unsafe_arena_release_id();

  // optional .apollo.common.Polygon polygon = 2;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::apollo::common::Polygon& polygon() const;
  PROTOBUF_NODISCARD ::apollo::common::Polygon* release_polygon();
  ::apollo::common::Polygon* mutable_polygon();
  void set_allocated_polygon(::apollo::common::Polygon* polygon);
  private:
  const ::apollo::common::Polygon& _internal_polygon() const;
  ::apollo::common::Polygon* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::apollo::common::Polygon* polygon);
  ::apollo::common::Polygon* unsafe_arena_release_polygon();

  // optional .apollo.v2x.Junction.Type type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::v2x::Junction_Type type() const;
  void set_type(::apollo::v2x::Junction_Type value);
  private:
  ::apollo::v2x::Junction_Type _internal_type() const;
  void _internal_set_type(::apollo::v2x::Junction_Type value);
  public:

  // optional int32 num_road_segments = 5 [default = 4];
  bool has_num_road_segments() const;
  private:
  bool _internal_has_num_road_segments() const;
  public:
  void clear_num_road_segments();
  int32_t num_road_segments() const;
  void set_num_road_segments(int32_t value);
  private:
  int32_t _internal_num_road_segments() const;
  void _internal_set_num_road_segments(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.Junction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id > crosswalk_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id > overlap_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id > lane_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> edge_type_;
    ::apollo::v2x::Id* id_;
    ::apollo::common::Polygon* polygon_;
    int type_;
    int32_t num_road_segments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Id

// optional bytes id = 1;
inline bool Id::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Id::has_id() const {
  return _internal_has_id();
}
inline void Id::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Id::id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Id.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.v2x.Id.id)
}
inline std::string* Id::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Id.id)
  return _s;
}
inline const std::string& Id::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Id::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Id::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Id::release_id() {
  // @@protoc_insertion_point(field_release:apollo.v2x.Id.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Id::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.Id.id)
}

// -------------------------------------------------------------------

// Junction

// optional .apollo.v2x.Id id = 1;
inline bool Junction::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool Junction::has_id() const {
  return _internal_has_id();
}
inline void Junction::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::v2x::Id& Junction::_internal_id() const {
  const ::apollo::v2x::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Id&>(
      ::apollo::v2x::_Id_default_instance_);
}
inline const ::apollo::v2x::Id& Junction::id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.id)
  return _internal_id();
}
inline void Junction::unsafe_arena_set_allocated_id(
    ::apollo::v2x::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.Junction.id)
}
inline ::apollo::v2x::Id* Junction::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Id* Junction::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.v2x.Junction.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Id* Junction::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::apollo::v2x::Id* Junction::mutable_id() {
  ::apollo::v2x::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Junction.id)
  return _msg;
}
inline void Junction::set_allocated_id(::apollo::v2x::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.Junction.id)
}

// optional .apollo.common.Polygon polygon = 2;
inline bool Junction::_internal_has_polygon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.polygon_ != nullptr);
  return value;
}
inline bool Junction::has_polygon() const {
  return _internal_has_polygon();
}
inline const ::apollo::common::Polygon& Junction::_internal_polygon() const {
  const ::apollo::common::Polygon* p = _impl_.polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Polygon&>(
      ::apollo::common::_Polygon_default_instance_);
}
inline const ::apollo::common::Polygon& Junction::polygon() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.polygon)
  return _internal_polygon();
}
inline void Junction::unsafe_arena_set_allocated_polygon(
    ::apollo::common::Polygon* polygon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.polygon_);
  }
  _impl_.polygon_ = polygon;
  if (polygon) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.Junction.polygon)
}
inline ::apollo::common::Polygon* Junction::release_polygon() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Polygon* temp = _impl_.polygon_;
  _impl_.polygon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Polygon* Junction::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:apollo.v2x.Junction.polygon)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Polygon* temp = _impl_.polygon_;
  _impl_.polygon_ = nullptr;
  return temp;
}
inline ::apollo::common::Polygon* Junction::_internal_mutable_polygon() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Polygon>(GetArenaForAllocation());
    _impl_.polygon_ = p;
  }
  return _impl_.polygon_;
}
inline ::apollo::common::Polygon* Junction::mutable_polygon() {
  ::apollo::common::Polygon* _msg = _internal_mutable_polygon();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Junction.polygon)
  return _msg;
}
inline void Junction::set_allocated_polygon(::apollo::common::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.polygon_);
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon));
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.Junction.polygon)
}

// repeated .apollo.v2x.Id crosswalk_id = 3;
inline int Junction::_internal_crosswalk_id_size() const {
  return _impl_.crosswalk_id_.size();
}
inline int Junction::crosswalk_id_size() const {
  return _internal_crosswalk_id_size();
}
inline void Junction::clear_crosswalk_id() {
  _impl_.crosswalk_id_.Clear();
}
inline ::apollo::v2x::Id* Junction::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Junction.crosswalk_id)
  return _impl_.crosswalk_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
Junction::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.Junction.crosswalk_id)
  return &_impl_.crosswalk_id_;
}
inline const ::apollo::v2x::Id& Junction::_internal_crosswalk_id(int index) const {
  return _impl_.crosswalk_id_.Get(index);
}
inline const ::apollo::v2x::Id& Junction::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.crosswalk_id)
  return _internal_crosswalk_id(index);
}
inline ::apollo::v2x::Id* Junction::_internal_add_crosswalk_id() {
  return _impl_.crosswalk_id_.Add();
}
inline ::apollo::v2x::Id* Junction::add_crosswalk_id() {
  ::apollo::v2x::Id* _add = _internal_add_crosswalk_id();
  // @@protoc_insertion_point(field_add:apollo.v2x.Junction.crosswalk_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
Junction::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.Junction.crosswalk_id)
  return _impl_.crosswalk_id_;
}

// repeated .apollo.v2x.Id overlap_id = 4;
inline int Junction::_internal_overlap_id_size() const {
  return _impl_.overlap_id_.size();
}
inline int Junction::overlap_id_size() const {
  return _internal_overlap_id_size();
}
inline void Junction::clear_overlap_id() {
  _impl_.overlap_id_.Clear();
}
inline ::apollo::v2x::Id* Junction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Junction.overlap_id)
  return _impl_.overlap_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
Junction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.Junction.overlap_id)
  return &_impl_.overlap_id_;
}
inline const ::apollo::v2x::Id& Junction::_internal_overlap_id(int index) const {
  return _impl_.overlap_id_.Get(index);
}
inline const ::apollo::v2x::Id& Junction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.overlap_id)
  return _internal_overlap_id(index);
}
inline ::apollo::v2x::Id* Junction::_internal_add_overlap_id() {
  return _impl_.overlap_id_.Add();
}
inline ::apollo::v2x::Id* Junction::add_overlap_id() {
  ::apollo::v2x::Id* _add = _internal_add_overlap_id();
  // @@protoc_insertion_point(field_add:apollo.v2x.Junction.overlap_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
Junction::overlap_id() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.Junction.overlap_id)
  return _impl_.overlap_id_;
}

// optional int32 num_road_segments = 5 [default = 4];
inline bool Junction::_internal_has_num_road_segments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Junction::has_num_road_segments() const {
  return _internal_has_num_road_segments();
}
inline void Junction::clear_num_road_segments() {
  _impl_.num_road_segments_ = 4;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Junction::_internal_num_road_segments() const {
  return _impl_.num_road_segments_;
}
inline int32_t Junction::num_road_segments() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.num_road_segments)
  return _internal_num_road_segments();
}
inline void Junction::_internal_set_num_road_segments(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_road_segments_ = value;
}
inline void Junction::set_num_road_segments(int32_t value) {
  _internal_set_num_road_segments(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Junction.num_road_segments)
}

// repeated .apollo.v2x.Id lane_id = 6;
inline int Junction::_internal_lane_id_size() const {
  return _impl_.lane_id_.size();
}
inline int Junction::lane_id_size() const {
  return _internal_lane_id_size();
}
inline void Junction::clear_lane_id() {
  _impl_.lane_id_.Clear();
}
inline ::apollo::v2x::Id* Junction::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.Junction.lane_id)
  return _impl_.lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >*
Junction::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.Junction.lane_id)
  return &_impl_.lane_id_;
}
inline const ::apollo::v2x::Id& Junction::_internal_lane_id(int index) const {
  return _impl_.lane_id_.Get(index);
}
inline const ::apollo::v2x::Id& Junction::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.lane_id)
  return _internal_lane_id(index);
}
inline ::apollo::v2x::Id* Junction::_internal_add_lane_id() {
  return _impl_.lane_id_.Add();
}
inline ::apollo::v2x::Id* Junction::add_lane_id() {
  ::apollo::v2x::Id* _add = _internal_add_lane_id();
  // @@protoc_insertion_point(field_add:apollo.v2x.Junction.lane_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::Id >&
Junction::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.Junction.lane_id)
  return _impl_.lane_id_;
}

// optional .apollo.v2x.Junction.Type type = 7;
inline bool Junction::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Junction::has_type() const {
  return _internal_has_type();
}
inline void Junction::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::v2x::Junction_Type Junction::_internal_type() const {
  return static_cast< ::apollo::v2x::Junction_Type >(_impl_.type_);
}
inline ::apollo::v2x::Junction_Type Junction::type() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.type)
  return _internal_type();
}
inline void Junction::_internal_set_type(::apollo::v2x::Junction_Type value) {
  assert(::apollo::v2x::Junction_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void Junction::set_type(::apollo::v2x::Junction_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Junction.type)
}

// repeated .apollo.v2x.Junction.EdgeType edge_type = 8;
inline int Junction::_internal_edge_type_size() const {
  return _impl_.edge_type_.size();
}
inline int Junction::edge_type_size() const {
  return _internal_edge_type_size();
}
inline void Junction::clear_edge_type() {
  _impl_.edge_type_.Clear();
}
inline ::apollo::v2x::Junction_EdgeType Junction::_internal_edge_type(int index) const {
  return static_cast< ::apollo::v2x::Junction_EdgeType >(_impl_.edge_type_.Get(index));
}
inline ::apollo::v2x::Junction_EdgeType Junction::edge_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Junction.edge_type)
  return _internal_edge_type(index);
}
inline void Junction::set_edge_type(int index, ::apollo::v2x::Junction_EdgeType value) {
  assert(::apollo::v2x::Junction_EdgeType_IsValid(value));
  _impl_.edge_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Junction.edge_type)
}
inline void Junction::_internal_add_edge_type(::apollo::v2x::Junction_EdgeType value) {
  assert(::apollo::v2x::Junction_EdgeType_IsValid(value));
  _impl_.edge_type_.Add(value);
}
inline void Junction::add_edge_type(::apollo::v2x::Junction_EdgeType value) {
  _internal_add_edge_type(value);
  // @@protoc_insertion_point(field_add:apollo.v2x.Junction.edge_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Junction::edge_type() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.Junction.edge_type)
  return _impl_.edge_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Junction::_internal_mutable_edge_type() {
  return &_impl_.edge_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Junction::mutable_edge_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.Junction.edge_type)
  return _internal_mutable_edge_type();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2x
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::v2x::Junction_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::Junction_Type>() {
  return ::apollo::v2x::Junction_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::v2x::Junction_EdgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::Junction_EdgeType>() {
  return ::apollo::v2x::Junction_EdgeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fjunction_2eproto
