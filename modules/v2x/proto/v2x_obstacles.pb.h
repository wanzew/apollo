// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_obstacles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/error_code.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
namespace apollo {
namespace v2x {
class AbnormalInformation;
struct AbnormalInformationDefaultTypeInternal;
extern AbnormalInformationDefaultTypeInternal _AbnormalInformation_default_instance_;
class MiniAreaMap;
struct MiniAreaMapDefaultTypeInternal;
extern MiniAreaMapDefaultTypeInternal _MiniAreaMap_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class V2XInformation;
struct V2XInformationDefaultTypeInternal;
extern V2XInformationDefaultTypeInternal _V2XInformation_default_instance_;
class V2XObstacle;
struct V2XObstacleDefaultTypeInternal;
extern V2XObstacleDefaultTypeInternal _V2XObstacle_default_instance_;
class V2XObstacles;
struct V2XObstaclesDefaultTypeInternal;
extern V2XObstaclesDefaultTypeInternal _V2XObstacles_default_instance_;
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::v2x::AbnormalInformation* Arena::CreateMaybeMessage<::apollo::v2x::AbnormalInformation>(Arena*);
template<> ::apollo::v2x::MiniAreaMap* Arena::CreateMaybeMessage<::apollo::v2x::MiniAreaMap>(Arena*);
template<> ::apollo::v2x::Point* Arena::CreateMaybeMessage<::apollo::v2x::Point>(Arena*);
template<> ::apollo::v2x::V2XInformation* Arena::CreateMaybeMessage<::apollo::v2x::V2XInformation>(Arena*);
template<> ::apollo::v2x::V2XObstacle* Arena::CreateMaybeMessage<::apollo::v2x::V2XObstacle>(Arena*);
template<> ::apollo::v2x::V2XObstacles* Arena::CreateMaybeMessage<::apollo::v2x::V2XObstacles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace v2x {

enum V2XInformation_V2XType : int {
  V2XInformation_V2XType_NONE = 0,
  V2XInformation_V2XType_ZOMBIES_CAR = 1,
  V2XInformation_V2XType_BLIND_ZONE = 2
};
bool V2XInformation_V2XType_IsValid(int value);
constexpr V2XInformation_V2XType V2XInformation_V2XType_V2XType_MIN = V2XInformation_V2XType_NONE;
constexpr V2XInformation_V2XType V2XInformation_V2XType_V2XType_MAX = V2XInformation_V2XType_BLIND_ZONE;
constexpr int V2XInformation_V2XType_V2XType_ARRAYSIZE = V2XInformation_V2XType_V2XType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V2XInformation_V2XType_descriptor();
template<typename T>
inline const std::string& V2XInformation_V2XType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V2XInformation_V2XType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V2XInformation_V2XType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V2XInformation_V2XType_descriptor(), enum_t_value);
}
inline bool V2XInformation_V2XType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V2XInformation_V2XType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V2XInformation_V2XType>(
    V2XInformation_V2XType_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// -------------------------------------------------------------------

class MiniAreaMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.MiniAreaMap) */ {
 public:
  inline MiniAreaMap() : MiniAreaMap(nullptr) {}
  ~MiniAreaMap() override;
  explicit PROTOBUF_CONSTEXPR MiniAreaMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MiniAreaMap(const MiniAreaMap& from);
  MiniAreaMap(MiniAreaMap&& from) noexcept
    : MiniAreaMap() {
    *this = ::std::move(from);
  }

  inline MiniAreaMap& operator=(const MiniAreaMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniAreaMap& operator=(MiniAreaMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniAreaMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniAreaMap* internal_default_instance() {
    return reinterpret_cast<const MiniAreaMap*>(
               &_MiniAreaMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MiniAreaMap& a, MiniAreaMap& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniAreaMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniAreaMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniAreaMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniAreaMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MiniAreaMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MiniAreaMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniAreaMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.MiniAreaMap";
  }
  protected:
  explicit MiniAreaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRscuIdFieldNumber = 1,
    kFeaturePositionFieldNumber = 2,
    kStartPositionFieldNumber = 3,
    kEndPositionFieldNumber = 4,
  };
  // optional bytes rscu_id = 1;
  bool has_rscu_id() const;
  private:
  bool _internal_has_rscu_id() const;
  public:
  void clear_rscu_id();
  const std::string& rscu_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rscu_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rscu_id();
  PROTOBUF_NODISCARD std::string* release_rscu_id();
  void set_allocated_rscu_id(std::string* rscu_id);
  private:
  const std::string& _internal_rscu_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rscu_id(const std::string& value);
  std::string* _internal_mutable_rscu_id();
  public:

  // optional .apollo.v2x.Point feature_position = 2;
  bool has_feature_position() const;
  private:
  bool _internal_has_feature_position() const;
  public:
  void clear_feature_position();
  const ::apollo::v2x::Point& feature_position() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_feature_position();
  ::apollo::v2x::Point* mutable_feature_position();
  void set_allocated_feature_position(::apollo::v2x::Point* feature_position);
  private:
  const ::apollo::v2x::Point& _internal_feature_position() const;
  ::apollo::v2x::Point* _internal_mutable_feature_position();
  public:
  void unsafe_arena_set_allocated_feature_position(
      ::apollo::v2x::Point* feature_position);
  ::apollo::v2x::Point* unsafe_arena_release_feature_position();

  // optional .apollo.v2x.Point start_position = 3;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::apollo::v2x::Point& start_position() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_start_position();
  ::apollo::v2x::Point* mutable_start_position();
  void set_allocated_start_position(::apollo::v2x::Point* start_position);
  private:
  const ::apollo::v2x::Point& _internal_start_position() const;
  ::apollo::v2x::Point* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::apollo::v2x::Point* start_position);
  ::apollo::v2x::Point* unsafe_arena_release_start_position();

  // optional .apollo.v2x.Point end_position = 4;
  bool has_end_position() const;
  private:
  bool _internal_has_end_position() const;
  public:
  void clear_end_position();
  const ::apollo::v2x::Point& end_position() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_end_position();
  ::apollo::v2x::Point* mutable_end_position();
  void set_allocated_end_position(::apollo::v2x::Point* end_position);
  private:
  const ::apollo::v2x::Point& _internal_end_position() const;
  ::apollo::v2x::Point* _internal_mutable_end_position();
  public:
  void unsafe_arena_set_allocated_end_position(
      ::apollo::v2x::Point* end_position);
  ::apollo::v2x::Point* unsafe_arena_release_end_position();

  // @@protoc_insertion_point(class_scope:apollo.v2x.MiniAreaMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rscu_id_;
    ::apollo::v2x::Point* feature_position_;
    ::apollo::v2x::Point* start_position_;
    ::apollo::v2x::Point* end_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// -------------------------------------------------------------------

class AbnormalInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.AbnormalInformation) */ {
 public:
  inline AbnormalInformation() : AbnormalInformation(nullptr) {}
  ~AbnormalInformation() override;
  explicit PROTOBUF_CONSTEXPR AbnormalInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbnormalInformation(const AbnormalInformation& from);
  AbnormalInformation(AbnormalInformation&& from) noexcept
    : AbnormalInformation() {
    *this = ::std::move(from);
  }

  inline AbnormalInformation& operator=(const AbnormalInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbnormalInformation& operator=(AbnormalInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbnormalInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbnormalInformation* internal_default_instance() {
    return reinterpret_cast<const AbnormalInformation*>(
               &_AbnormalInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AbnormalInformation& a, AbnormalInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(AbnormalInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbnormalInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbnormalInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbnormalInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbnormalInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AbnormalInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbnormalInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.AbnormalInformation";
  }
  protected:
  explicit AbnormalInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageSpeedFieldNumber = 1,
    kVehicleDensityFieldNumber = 2,
  };
  // optional double average_speed = 1;
  bool has_average_speed() const;
  private:
  bool _internal_has_average_speed() const;
  public:
  void clear_average_speed();
  double average_speed() const;
  void set_average_speed(double value);
  private:
  double _internal_average_speed() const;
  void _internal_set_average_speed(double value);
  public:

  // optional double vehicle_density = 2;
  bool has_vehicle_density() const;
  private:
  bool _internal_has_vehicle_density() const;
  public:
  void clear_vehicle_density();
  double vehicle_density() const;
  void set_vehicle_density(double value);
  private:
  double _internal_vehicle_density() const;
  void _internal_set_vehicle_density(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.AbnormalInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double average_speed_;
    double vehicle_density_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// -------------------------------------------------------------------

class V2XInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.V2XInformation) */ {
 public:
  inline V2XInformation() : V2XInformation(nullptr) {}
  ~V2XInformation() override;
  explicit PROTOBUF_CONSTEXPR V2XInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V2XInformation(const V2XInformation& from);
  V2XInformation(V2XInformation&& from) noexcept
    : V2XInformation() {
    *this = ::std::move(from);
  }

  inline V2XInformation& operator=(const V2XInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline V2XInformation& operator=(V2XInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V2XInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const V2XInformation* internal_default_instance() {
    return reinterpret_cast<const V2XInformation*>(
               &_V2XInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(V2XInformation& a, V2XInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(V2XInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V2XInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V2XInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V2XInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V2XInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V2XInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2XInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.V2XInformation";
  }
  protected:
  explicit V2XInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V2XInformation_V2XType V2XType;
  static constexpr V2XType NONE =
    V2XInformation_V2XType_NONE;
  static constexpr V2XType ZOMBIES_CAR =
    V2XInformation_V2XType_ZOMBIES_CAR;
  static constexpr V2XType BLIND_ZONE =
    V2XInformation_V2XType_BLIND_ZONE;
  static inline bool V2XType_IsValid(int value) {
    return V2XInformation_V2XType_IsValid(value);
  }
  static constexpr V2XType V2XType_MIN =
    V2XInformation_V2XType_V2XType_MIN;
  static constexpr V2XType V2XType_MAX =
    V2XInformation_V2XType_V2XType_MAX;
  static constexpr int V2XType_ARRAYSIZE =
    V2XInformation_V2XType_V2XType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  V2XType_descriptor() {
    return V2XInformation_V2XType_descriptor();
  }
  template<typename T>
  static inline const std::string& V2XType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, V2XType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function V2XType_Name.");
    return V2XInformation_V2XType_Name(enum_t_value);
  }
  static inline bool V2XType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      V2XType* value) {
    return V2XInformation_V2XType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kV2XTypeFieldNumber = 1,
    kTrafficEventStartFieldNumber = 3,
    kTrafficEventStartErrorFieldNumber = 4,
    kTrafficEventEndFieldNumber = 5,
    kTrafficEventEndErrorFieldNumber = 6,
    kAbnormalInfoFieldNumber = 7,
  };
  // repeated .apollo.v2x.V2XInformation.V2XType v2x_type = 1;
  int v2x_type_size() const;
  private:
  int _internal_v2x_type_size() const;
  public:
  void clear_v2x_type();
  private:
  ::apollo::v2x::V2XInformation_V2XType _internal_v2x_type(int index) const;
  void _internal_add_v2x_type(::apollo::v2x::V2XInformation_V2XType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_v2x_type();
  public:
  ::apollo::v2x::V2XInformation_V2XType v2x_type(int index) const;
  void set_v2x_type(int index, ::apollo::v2x::V2XInformation_V2XType value);
  void add_v2x_type(::apollo::v2x::V2XInformation_V2XType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& v2x_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_v2x_type();

  // optional .apollo.v2x.Point traffic_event_start = 3;
  bool has_traffic_event_start() const;
  private:
  bool _internal_has_traffic_event_start() const;
  public:
  void clear_traffic_event_start();
  const ::apollo::v2x::Point& traffic_event_start() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_traffic_event_start();
  ::apollo::v2x::Point* mutable_traffic_event_start();
  void set_allocated_traffic_event_start(::apollo::v2x::Point* traffic_event_start);
  private:
  const ::apollo::v2x::Point& _internal_traffic_event_start() const;
  ::apollo::v2x::Point* _internal_mutable_traffic_event_start();
  public:
  void unsafe_arena_set_allocated_traffic_event_start(
      ::apollo::v2x::Point* traffic_event_start);
  ::apollo::v2x::Point* unsafe_arena_release_traffic_event_start();

  // optional .apollo.v2x.Point traffic_event_start_error = 4;
  bool has_traffic_event_start_error() const;
  private:
  bool _internal_has_traffic_event_start_error() const;
  public:
  void clear_traffic_event_start_error();
  const ::apollo::v2x::Point& traffic_event_start_error() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_traffic_event_start_error();
  ::apollo::v2x::Point* mutable_traffic_event_start_error();
  void set_allocated_traffic_event_start_error(::apollo::v2x::Point* traffic_event_start_error);
  private:
  const ::apollo::v2x::Point& _internal_traffic_event_start_error() const;
  ::apollo::v2x::Point* _internal_mutable_traffic_event_start_error();
  public:
  void unsafe_arena_set_allocated_traffic_event_start_error(
      ::apollo::v2x::Point* traffic_event_start_error);
  ::apollo::v2x::Point* unsafe_arena_release_traffic_event_start_error();

  // optional .apollo.v2x.Point traffic_event_end = 5;
  bool has_traffic_event_end() const;
  private:
  bool _internal_has_traffic_event_end() const;
  public:
  void clear_traffic_event_end();
  const ::apollo::v2x::Point& traffic_event_end() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_traffic_event_end();
  ::apollo::v2x::Point* mutable_traffic_event_end();
  void set_allocated_traffic_event_end(::apollo::v2x::Point* traffic_event_end);
  private:
  const ::apollo::v2x::Point& _internal_traffic_event_end() const;
  ::apollo::v2x::Point* _internal_mutable_traffic_event_end();
  public:
  void unsafe_arena_set_allocated_traffic_event_end(
      ::apollo::v2x::Point* traffic_event_end);
  ::apollo::v2x::Point* unsafe_arena_release_traffic_event_end();

  // optional .apollo.v2x.Point traffic_event_end_error = 6;
  bool has_traffic_event_end_error() const;
  private:
  bool _internal_has_traffic_event_end_error() const;
  public:
  void clear_traffic_event_end_error();
  const ::apollo::v2x::Point& traffic_event_end_error() const;
  PROTOBUF_NODISCARD ::apollo::v2x::Point* release_traffic_event_end_error();
  ::apollo::v2x::Point* mutable_traffic_event_end_error();
  void set_allocated_traffic_event_end_error(::apollo::v2x::Point* traffic_event_end_error);
  private:
  const ::apollo::v2x::Point& _internal_traffic_event_end_error() const;
  ::apollo::v2x::Point* _internal_mutable_traffic_event_end_error();
  public:
  void unsafe_arena_set_allocated_traffic_event_end_error(
      ::apollo::v2x::Point* traffic_event_end_error);
  ::apollo::v2x::Point* unsafe_arena_release_traffic_event_end_error();

  // optional .apollo.v2x.AbnormalInformation abnormal_info = 7;
  bool has_abnormal_info() const;
  private:
  bool _internal_has_abnormal_info() const;
  public:
  void clear_abnormal_info();
  const ::apollo::v2x::AbnormalInformation& abnormal_info() const;
  PROTOBUF_NODISCARD ::apollo::v2x::AbnormalInformation* release_abnormal_info();
  ::apollo::v2x::AbnormalInformation* mutable_abnormal_info();
  void set_allocated_abnormal_info(::apollo::v2x::AbnormalInformation* abnormal_info);
  private:
  const ::apollo::v2x::AbnormalInformation& _internal_abnormal_info() const;
  ::apollo::v2x::AbnormalInformation* _internal_mutable_abnormal_info();
  public:
  void unsafe_arena_set_allocated_abnormal_info(
      ::apollo::v2x::AbnormalInformation* abnormal_info);
  ::apollo::v2x::AbnormalInformation* unsafe_arena_release_abnormal_info();

  // @@protoc_insertion_point(class_scope:apollo.v2x.V2XInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> v2x_type_;
    ::apollo::v2x::Point* traffic_event_start_;
    ::apollo::v2x::Point* traffic_event_start_error_;
    ::apollo::v2x::Point* traffic_event_end_;
    ::apollo::v2x::Point* traffic_event_end_error_;
    ::apollo::v2x::AbnormalInformation* abnormal_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// -------------------------------------------------------------------

class V2XObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.V2XObstacle) */ {
 public:
  inline V2XObstacle() : V2XObstacle(nullptr) {}
  ~V2XObstacle() override;
  explicit PROTOBUF_CONSTEXPR V2XObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V2XObstacle(const V2XObstacle& from);
  V2XObstacle(V2XObstacle&& from) noexcept
    : V2XObstacle() {
    *this = ::std::move(from);
  }

  inline V2XObstacle& operator=(const V2XObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline V2XObstacle& operator=(V2XObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V2XObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const V2XObstacle* internal_default_instance() {
    return reinterpret_cast<const V2XObstacle*>(
               &_V2XObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(V2XObstacle& a, V2XObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(V2XObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V2XObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V2XObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V2XObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V2XObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V2XObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2XObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.V2XObstacle";
  }
  protected:
  explicit V2XObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerceptionObstacleFieldNumber = 1,
    kV2XInfoFieldNumber = 2,
  };
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  bool has_perception_obstacle() const;
  private:
  bool _internal_has_perception_obstacle() const;
  public:
  void clear_perception_obstacle();
  const ::apollo::perception::PerceptionObstacle& perception_obstacle() const;
  PROTOBUF_NODISCARD ::apollo::perception::PerceptionObstacle* release_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle();
  void set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle);
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_perception_obstacle() const;
  ::apollo::perception::PerceptionObstacle* _internal_mutable_perception_obstacle();
  public:
  void unsafe_arena_set_allocated_perception_obstacle(
      ::apollo::perception::PerceptionObstacle* perception_obstacle);
  ::apollo::perception::PerceptionObstacle* unsafe_arena_release_perception_obstacle();

  // optional .apollo.v2x.V2XInformation v2x_info = 2;
  bool has_v2x_info() const;
  private:
  bool _internal_has_v2x_info() const;
  public:
  void clear_v2x_info();
  const ::apollo::v2x::V2XInformation& v2x_info() const;
  PROTOBUF_NODISCARD ::apollo::v2x::V2XInformation* release_v2x_info();
  ::apollo::v2x::V2XInformation* mutable_v2x_info();
  void set_allocated_v2x_info(::apollo::v2x::V2XInformation* v2x_info);
  private:
  const ::apollo::v2x::V2XInformation& _internal_v2x_info() const;
  ::apollo::v2x::V2XInformation* _internal_mutable_v2x_info();
  public:
  void unsafe_arena_set_allocated_v2x_info(
      ::apollo::v2x::V2XInformation* v2x_info);
  ::apollo::v2x::V2XInformation* unsafe_arena_release_v2x_info();

  // @@protoc_insertion_point(class_scope:apollo.v2x.V2XObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::PerceptionObstacle* perception_obstacle_;
    ::apollo::v2x::V2XInformation* v2x_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// -------------------------------------------------------------------

class V2XObstacles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.V2XObstacles) */ {
 public:
  inline V2XObstacles() : V2XObstacles(nullptr) {}
  ~V2XObstacles() override;
  explicit PROTOBUF_CONSTEXPR V2XObstacles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V2XObstacles(const V2XObstacles& from);
  V2XObstacles(V2XObstacles&& from) noexcept
    : V2XObstacles() {
    *this = ::std::move(from);
  }

  inline V2XObstacles& operator=(const V2XObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline V2XObstacles& operator=(V2XObstacles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V2XObstacles& default_instance() {
    return *internal_default_instance();
  }
  static inline const V2XObstacles* internal_default_instance() {
    return reinterpret_cast<const V2XObstacles*>(
               &_V2XObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(V2XObstacles& a, V2XObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(V2XObstacles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V2XObstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V2XObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V2XObstacles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V2XObstacles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V2XObstacles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2XObstacles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.V2XObstacles";
  }
  protected:
  explicit V2XObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV2XObstacleFieldNumber = 1,
    kAreaMapFieldNumber = 2,
    kHeaderFieldNumber = 4,
    kTrafficFlowFieldNumber = 3,
    kErrorCodeFieldNumber = 5,
  };
  // repeated .apollo.v2x.V2XObstacle v2x_obstacle = 1;
  int v2x_obstacle_size() const;
  private:
  int _internal_v2x_obstacle_size() const;
  public:
  void clear_v2x_obstacle();
  ::apollo::v2x::V2XObstacle* mutable_v2x_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::V2XObstacle >*
      mutable_v2x_obstacle();
  private:
  const ::apollo::v2x::V2XObstacle& _internal_v2x_obstacle(int index) const;
  ::apollo::v2x::V2XObstacle* _internal_add_v2x_obstacle();
  public:
  const ::apollo::v2x::V2XObstacle& v2x_obstacle(int index) const;
  ::apollo::v2x::V2XObstacle* add_v2x_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::V2XObstacle >&
      v2x_obstacle() const;

  // optional .apollo.v2x.MiniAreaMap area_map = 2;
  bool has_area_map() const;
  private:
  bool _internal_has_area_map() const;
  public:
  void clear_area_map();
  const ::apollo::v2x::MiniAreaMap& area_map() const;
  PROTOBUF_NODISCARD ::apollo::v2x::MiniAreaMap* release_area_map();
  ::apollo::v2x::MiniAreaMap* mutable_area_map();
  void set_allocated_area_map(::apollo::v2x::MiniAreaMap* area_map);
  private:
  const ::apollo::v2x::MiniAreaMap& _internal_area_map() const;
  ::apollo::v2x::MiniAreaMap* _internal_mutable_area_map();
  public:
  void unsafe_arena_set_allocated_area_map(
      ::apollo::v2x::MiniAreaMap* area_map);
  ::apollo::v2x::MiniAreaMap* unsafe_arena_release_area_map();

  // optional .apollo.common.Header header = 4;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double traffic_flow = 3;
  bool has_traffic_flow() const;
  private:
  bool _internal_has_traffic_flow() const;
  public:
  void clear_traffic_flow();
  double traffic_flow() const;
  void set_traffic_flow(double value);
  private:
  double _internal_traffic_flow() const;
  void _internal_set_traffic_flow(double value);
  public:

  // optional .apollo.common.ErrorCode error_code = 5 [default = OK];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.V2XObstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::V2XObstacle > v2x_obstacle_;
    ::apollo::v2x::MiniAreaMap* area_map_;
    ::apollo::common::Header* header_;
    double traffic_flow_;
    int error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// optional double x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Point.x)
}

// optional double y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Point.y)
}

// optional double z = 3;
inline bool Point::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_z() const {
  return _internal_has_z();
}
inline void Point::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Point::_internal_z() const {
  return _impl_.z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.Point.z)
}

// -------------------------------------------------------------------

// MiniAreaMap

// optional bytes rscu_id = 1;
inline bool MiniAreaMap::_internal_has_rscu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MiniAreaMap::has_rscu_id() const {
  return _internal_has_rscu_id();
}
inline void MiniAreaMap::clear_rscu_id() {
  _impl_.rscu_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiniAreaMap::rscu_id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.MiniAreaMap.rscu_id)
  return _internal_rscu_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MiniAreaMap::set_rscu_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rscu_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.v2x.MiniAreaMap.rscu_id)
}
inline std::string* MiniAreaMap::mutable_rscu_id() {
  std::string* _s = _internal_mutable_rscu_id();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.MiniAreaMap.rscu_id)
  return _s;
}
inline const std::string& MiniAreaMap::_internal_rscu_id() const {
  return _impl_.rscu_id_.Get();
}
inline void MiniAreaMap::_internal_set_rscu_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rscu_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MiniAreaMap::_internal_mutable_rscu_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rscu_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MiniAreaMap::release_rscu_id() {
  // @@protoc_insertion_point(field_release:apollo.v2x.MiniAreaMap.rscu_id)
  if (!_internal_has_rscu_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rscu_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rscu_id_.IsDefault()) {
    _impl_.rscu_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MiniAreaMap::set_allocated_rscu_id(std::string* rscu_id) {
  if (rscu_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rscu_id_.SetAllocated(rscu_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rscu_id_.IsDefault()) {
    _impl_.rscu_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.MiniAreaMap.rscu_id)
}

// optional .apollo.v2x.Point feature_position = 2;
inline bool MiniAreaMap::_internal_has_feature_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feature_position_ != nullptr);
  return value;
}
inline bool MiniAreaMap::has_feature_position() const {
  return _internal_has_feature_position();
}
inline void MiniAreaMap::clear_feature_position() {
  if (_impl_.feature_position_ != nullptr) _impl_.feature_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::v2x::Point& MiniAreaMap::_internal_feature_position() const {
  const ::apollo::v2x::Point* p = _impl_.feature_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& MiniAreaMap::feature_position() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.MiniAreaMap.feature_position)
  return _internal_feature_position();
}
inline void MiniAreaMap::unsafe_arena_set_allocated_feature_position(
    ::apollo::v2x::Point* feature_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_position_);
  }
  _impl_.feature_position_ = feature_position;
  if (feature_position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.MiniAreaMap.feature_position)
}
inline ::apollo::v2x::Point* MiniAreaMap::release_feature_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::Point* temp = _impl_.feature_position_;
  _impl_.feature_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::unsafe_arena_release_feature_position() {
  // @@protoc_insertion_point(field_release:apollo.v2x.MiniAreaMap.feature_position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::Point* temp = _impl_.feature_position_;
  _impl_.feature_position_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::_internal_mutable_feature_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.feature_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.feature_position_ = p;
  }
  return _impl_.feature_position_;
}
inline ::apollo::v2x::Point* MiniAreaMap::mutable_feature_position() {
  ::apollo::v2x::Point* _msg = _internal_mutable_feature_position();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.MiniAreaMap.feature_position)
  return _msg;
}
inline void MiniAreaMap::set_allocated_feature_position(::apollo::v2x::Point* feature_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.feature_position_;
  }
  if (feature_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feature_position);
    if (message_arena != submessage_arena) {
      feature_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.feature_position_ = feature_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.MiniAreaMap.feature_position)
}

// optional .apollo.v2x.Point start_position = 3;
inline bool MiniAreaMap::_internal_has_start_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_position_ != nullptr);
  return value;
}
inline bool MiniAreaMap::has_start_position() const {
  return _internal_has_start_position();
}
inline void MiniAreaMap::clear_start_position() {
  if (_impl_.start_position_ != nullptr) _impl_.start_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::v2x::Point& MiniAreaMap::_internal_start_position() const {
  const ::apollo::v2x::Point* p = _impl_.start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& MiniAreaMap::start_position() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.MiniAreaMap.start_position)
  return _internal_start_position();
}
inline void MiniAreaMap::unsafe_arena_set_allocated_start_position(
    ::apollo::v2x::Point* start_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_position_);
  }
  _impl_.start_position_ = start_position;
  if (start_position) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.MiniAreaMap.start_position)
}
inline ::apollo::v2x::Point* MiniAreaMap::release_start_position() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::v2x::Point* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:apollo.v2x.MiniAreaMap.start_position)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::v2x::Point* temp = _impl_.start_position_;
  _impl_.start_position_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::_internal_mutable_start_position() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.start_position_ = p;
  }
  return _impl_.start_position_;
}
inline ::apollo::v2x::Point* MiniAreaMap::mutable_start_position() {
  ::apollo::v2x::Point* _msg = _internal_mutable_start_position();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.MiniAreaMap.start_position)
  return _msg;
}
inline void MiniAreaMap::set_allocated_start_position(::apollo::v2x::Point* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_position_;
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_position);
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.MiniAreaMap.start_position)
}

// optional .apollo.v2x.Point end_position = 4;
inline bool MiniAreaMap::_internal_has_end_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_position_ != nullptr);
  return value;
}
inline bool MiniAreaMap::has_end_position() const {
  return _internal_has_end_position();
}
inline void MiniAreaMap::clear_end_position() {
  if (_impl_.end_position_ != nullptr) _impl_.end_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::v2x::Point& MiniAreaMap::_internal_end_position() const {
  const ::apollo::v2x::Point* p = _impl_.end_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& MiniAreaMap::end_position() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.MiniAreaMap.end_position)
  return _internal_end_position();
}
inline void MiniAreaMap::unsafe_arena_set_allocated_end_position(
    ::apollo::v2x::Point* end_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  _impl_.end_position_ = end_position;
  if (end_position) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.MiniAreaMap.end_position)
}
inline ::apollo::v2x::Point* MiniAreaMap::release_end_position() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::v2x::Point* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::unsafe_arena_release_end_position() {
  // @@protoc_insertion_point(field_release:apollo.v2x.MiniAreaMap.end_position)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::v2x::Point* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* MiniAreaMap::_internal_mutable_end_position() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.end_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.end_position_ = p;
  }
  return _impl_.end_position_;
}
inline ::apollo::v2x::Point* MiniAreaMap::mutable_end_position() {
  ::apollo::v2x::Point* _msg = _internal_mutable_end_position();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.MiniAreaMap.end_position)
  return _msg;
}
inline void MiniAreaMap::set_allocated_end_position(::apollo::v2x::Point* end_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_position_;
  }
  if (end_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_position);
    if (message_arena != submessage_arena) {
      end_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.end_position_ = end_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.MiniAreaMap.end_position)
}

// -------------------------------------------------------------------

// AbnormalInformation

// optional double average_speed = 1;
inline bool AbnormalInformation::_internal_has_average_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AbnormalInformation::has_average_speed() const {
  return _internal_has_average_speed();
}
inline void AbnormalInformation::clear_average_speed() {
  _impl_.average_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AbnormalInformation::_internal_average_speed() const {
  return _impl_.average_speed_;
}
inline double AbnormalInformation::average_speed() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.AbnormalInformation.average_speed)
  return _internal_average_speed();
}
inline void AbnormalInformation::_internal_set_average_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.average_speed_ = value;
}
inline void AbnormalInformation::set_average_speed(double value) {
  _internal_set_average_speed(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.AbnormalInformation.average_speed)
}

// optional double vehicle_density = 2;
inline bool AbnormalInformation::_internal_has_vehicle_density() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AbnormalInformation::has_vehicle_density() const {
  return _internal_has_vehicle_density();
}
inline void AbnormalInformation::clear_vehicle_density() {
  _impl_.vehicle_density_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AbnormalInformation::_internal_vehicle_density() const {
  return _impl_.vehicle_density_;
}
inline double AbnormalInformation::vehicle_density() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.AbnormalInformation.vehicle_density)
  return _internal_vehicle_density();
}
inline void AbnormalInformation::_internal_set_vehicle_density(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vehicle_density_ = value;
}
inline void AbnormalInformation::set_vehicle_density(double value) {
  _internal_set_vehicle_density(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.AbnormalInformation.vehicle_density)
}

// -------------------------------------------------------------------

// V2XInformation

// repeated .apollo.v2x.V2XInformation.V2XType v2x_type = 1;
inline int V2XInformation::_internal_v2x_type_size() const {
  return _impl_.v2x_type_.size();
}
inline int V2XInformation::v2x_type_size() const {
  return _internal_v2x_type_size();
}
inline void V2XInformation::clear_v2x_type() {
  _impl_.v2x_type_.Clear();
}
inline ::apollo::v2x::V2XInformation_V2XType V2XInformation::_internal_v2x_type(int index) const {
  return static_cast< ::apollo::v2x::V2XInformation_V2XType >(_impl_.v2x_type_.Get(index));
}
inline ::apollo::v2x::V2XInformation_V2XType V2XInformation::v2x_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.v2x_type)
  return _internal_v2x_type(index);
}
inline void V2XInformation::set_v2x_type(int index, ::apollo::v2x::V2XInformation_V2XType value) {
  assert(::apollo::v2x::V2XInformation_V2XType_IsValid(value));
  _impl_.v2x_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.v2x.V2XInformation.v2x_type)
}
inline void V2XInformation::_internal_add_v2x_type(::apollo::v2x::V2XInformation_V2XType value) {
  assert(::apollo::v2x::V2XInformation_V2XType_IsValid(value));
  _impl_.v2x_type_.Add(value);
}
inline void V2XInformation::add_v2x_type(::apollo::v2x::V2XInformation_V2XType value) {
  _internal_add_v2x_type(value);
  // @@protoc_insertion_point(field_add:apollo.v2x.V2XInformation.v2x_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
V2XInformation::v2x_type() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.V2XInformation.v2x_type)
  return _impl_.v2x_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V2XInformation::_internal_mutable_v2x_type() {
  return &_impl_.v2x_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V2XInformation::mutable_v2x_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.V2XInformation.v2x_type)
  return _internal_mutable_v2x_type();
}

// optional .apollo.v2x.Point traffic_event_start = 3;
inline bool V2XInformation::_internal_has_traffic_event_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_start_ != nullptr);
  return value;
}
inline bool V2XInformation::has_traffic_event_start() const {
  return _internal_has_traffic_event_start();
}
inline void V2XInformation::clear_traffic_event_start() {
  if (_impl_.traffic_event_start_ != nullptr) _impl_.traffic_event_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::v2x::Point& V2XInformation::_internal_traffic_event_start() const {
  const ::apollo::v2x::Point* p = _impl_.traffic_event_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& V2XInformation::traffic_event_start() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.traffic_event_start)
  return _internal_traffic_event_start();
}
inline void V2XInformation::unsafe_arena_set_allocated_traffic_event_start(
    ::apollo::v2x::Point* traffic_event_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_start_);
  }
  _impl_.traffic_event_start_ = traffic_event_start;
  if (traffic_event_start) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XInformation.traffic_event_start)
}
inline ::apollo::v2x::Point* V2XInformation::release_traffic_event_start() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_start_;
  _impl_.traffic_event_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::unsafe_arena_release_traffic_event_start() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XInformation.traffic_event_start)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_start_;
  _impl_.traffic_event_start_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::_internal_mutable_traffic_event_start() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.traffic_event_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.traffic_event_start_ = p;
  }
  return _impl_.traffic_event_start_;
}
inline ::apollo::v2x::Point* V2XInformation::mutable_traffic_event_start() {
  ::apollo::v2x::Point* _msg = _internal_mutable_traffic_event_start();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XInformation.traffic_event_start)
  return _msg;
}
inline void V2XInformation::set_allocated_traffic_event_start(::apollo::v2x::Point* traffic_event_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.traffic_event_start_;
  }
  if (traffic_event_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_event_start);
    if (message_arena != submessage_arena) {
      traffic_event_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_start, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.traffic_event_start_ = traffic_event_start;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XInformation.traffic_event_start)
}

// optional .apollo.v2x.Point traffic_event_start_error = 4;
inline bool V2XInformation::_internal_has_traffic_event_start_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_start_error_ != nullptr);
  return value;
}
inline bool V2XInformation::has_traffic_event_start_error() const {
  return _internal_has_traffic_event_start_error();
}
inline void V2XInformation::clear_traffic_event_start_error() {
  if (_impl_.traffic_event_start_error_ != nullptr) _impl_.traffic_event_start_error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::v2x::Point& V2XInformation::_internal_traffic_event_start_error() const {
  const ::apollo::v2x::Point* p = _impl_.traffic_event_start_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& V2XInformation::traffic_event_start_error() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.traffic_event_start_error)
  return _internal_traffic_event_start_error();
}
inline void V2XInformation::unsafe_arena_set_allocated_traffic_event_start_error(
    ::apollo::v2x::Point* traffic_event_start_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_start_error_);
  }
  _impl_.traffic_event_start_error_ = traffic_event_start_error;
  if (traffic_event_start_error) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XInformation.traffic_event_start_error)
}
inline ::apollo::v2x::Point* V2XInformation::release_traffic_event_start_error() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_start_error_;
  _impl_.traffic_event_start_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::unsafe_arena_release_traffic_event_start_error() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XInformation.traffic_event_start_error)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_start_error_;
  _impl_.traffic_event_start_error_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::_internal_mutable_traffic_event_start_error() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.traffic_event_start_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.traffic_event_start_error_ = p;
  }
  return _impl_.traffic_event_start_error_;
}
inline ::apollo::v2x::Point* V2XInformation::mutable_traffic_event_start_error() {
  ::apollo::v2x::Point* _msg = _internal_mutable_traffic_event_start_error();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XInformation.traffic_event_start_error)
  return _msg;
}
inline void V2XInformation::set_allocated_traffic_event_start_error(::apollo::v2x::Point* traffic_event_start_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.traffic_event_start_error_;
  }
  if (traffic_event_start_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_event_start_error);
    if (message_arena != submessage_arena) {
      traffic_event_start_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_start_error, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.traffic_event_start_error_ = traffic_event_start_error;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XInformation.traffic_event_start_error)
}

// optional .apollo.v2x.Point traffic_event_end = 5;
inline bool V2XInformation::_internal_has_traffic_event_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_end_ != nullptr);
  return value;
}
inline bool V2XInformation::has_traffic_event_end() const {
  return _internal_has_traffic_event_end();
}
inline void V2XInformation::clear_traffic_event_end() {
  if (_impl_.traffic_event_end_ != nullptr) _impl_.traffic_event_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::v2x::Point& V2XInformation::_internal_traffic_event_end() const {
  const ::apollo::v2x::Point* p = _impl_.traffic_event_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& V2XInformation::traffic_event_end() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.traffic_event_end)
  return _internal_traffic_event_end();
}
inline void V2XInformation::unsafe_arena_set_allocated_traffic_event_end(
    ::apollo::v2x::Point* traffic_event_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_end_);
  }
  _impl_.traffic_event_end_ = traffic_event_end;
  if (traffic_event_end) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XInformation.traffic_event_end)
}
inline ::apollo::v2x::Point* V2XInformation::release_traffic_event_end() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_end_;
  _impl_.traffic_event_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::unsafe_arena_release_traffic_event_end() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XInformation.traffic_event_end)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_end_;
  _impl_.traffic_event_end_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::_internal_mutable_traffic_event_end() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.traffic_event_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.traffic_event_end_ = p;
  }
  return _impl_.traffic_event_end_;
}
inline ::apollo::v2x::Point* V2XInformation::mutable_traffic_event_end() {
  ::apollo::v2x::Point* _msg = _internal_mutable_traffic_event_end();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XInformation.traffic_event_end)
  return _msg;
}
inline void V2XInformation::set_allocated_traffic_event_end(::apollo::v2x::Point* traffic_event_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.traffic_event_end_;
  }
  if (traffic_event_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_event_end);
    if (message_arena != submessage_arena) {
      traffic_event_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.traffic_event_end_ = traffic_event_end;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XInformation.traffic_event_end)
}

// optional .apollo.v2x.Point traffic_event_end_error = 6;
inline bool V2XInformation::_internal_has_traffic_event_end_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_end_error_ != nullptr);
  return value;
}
inline bool V2XInformation::has_traffic_event_end_error() const {
  return _internal_has_traffic_event_end_error();
}
inline void V2XInformation::clear_traffic_event_end_error() {
  if (_impl_.traffic_event_end_error_ != nullptr) _impl_.traffic_event_end_error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::v2x::Point& V2XInformation::_internal_traffic_event_end_error() const {
  const ::apollo::v2x::Point* p = _impl_.traffic_event_end_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::Point&>(
      ::apollo::v2x::_Point_default_instance_);
}
inline const ::apollo::v2x::Point& V2XInformation::traffic_event_end_error() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.traffic_event_end_error)
  return _internal_traffic_event_end_error();
}
inline void V2XInformation::unsafe_arena_set_allocated_traffic_event_end_error(
    ::apollo::v2x::Point* traffic_event_end_error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_end_error_);
  }
  _impl_.traffic_event_end_error_ = traffic_event_end_error;
  if (traffic_event_end_error) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XInformation.traffic_event_end_error)
}
inline ::apollo::v2x::Point* V2XInformation::release_traffic_event_end_error() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_end_error_;
  _impl_.traffic_event_end_error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::unsafe_arena_release_traffic_event_end_error() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XInformation.traffic_event_end_error)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::v2x::Point* temp = _impl_.traffic_event_end_error_;
  _impl_.traffic_event_end_error_ = nullptr;
  return temp;
}
inline ::apollo::v2x::Point* V2XInformation::_internal_mutable_traffic_event_end_error() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.traffic_event_end_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::Point>(GetArenaForAllocation());
    _impl_.traffic_event_end_error_ = p;
  }
  return _impl_.traffic_event_end_error_;
}
inline ::apollo::v2x::Point* V2XInformation::mutable_traffic_event_end_error() {
  ::apollo::v2x::Point* _msg = _internal_mutable_traffic_event_end_error();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XInformation.traffic_event_end_error)
  return _msg;
}
inline void V2XInformation::set_allocated_traffic_event_end_error(::apollo::v2x::Point* traffic_event_end_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.traffic_event_end_error_;
  }
  if (traffic_event_end_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_event_end_error);
    if (message_arena != submessage_arena) {
      traffic_event_end_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_end_error, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.traffic_event_end_error_ = traffic_event_end_error;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XInformation.traffic_event_end_error)
}

// optional .apollo.v2x.AbnormalInformation abnormal_info = 7;
inline bool V2XInformation::_internal_has_abnormal_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.abnormal_info_ != nullptr);
  return value;
}
inline bool V2XInformation::has_abnormal_info() const {
  return _internal_has_abnormal_info();
}
inline void V2XInformation::clear_abnormal_info() {
  if (_impl_.abnormal_info_ != nullptr) _impl_.abnormal_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::v2x::AbnormalInformation& V2XInformation::_internal_abnormal_info() const {
  const ::apollo::v2x::AbnormalInformation* p = _impl_.abnormal_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::AbnormalInformation&>(
      ::apollo::v2x::_AbnormalInformation_default_instance_);
}
inline const ::apollo::v2x::AbnormalInformation& V2XInformation::abnormal_info() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XInformation.abnormal_info)
  return _internal_abnormal_info();
}
inline void V2XInformation::unsafe_arena_set_allocated_abnormal_info(
    ::apollo::v2x::AbnormalInformation* abnormal_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.abnormal_info_);
  }
  _impl_.abnormal_info_ = abnormal_info;
  if (abnormal_info) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XInformation.abnormal_info)
}
inline ::apollo::v2x::AbnormalInformation* V2XInformation::release_abnormal_info() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::v2x::AbnormalInformation* temp = _impl_.abnormal_info_;
  _impl_.abnormal_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::AbnormalInformation* V2XInformation::unsafe_arena_release_abnormal_info() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XInformation.abnormal_info)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::v2x::AbnormalInformation* temp = _impl_.abnormal_info_;
  _impl_.abnormal_info_ = nullptr;
  return temp;
}
inline ::apollo::v2x::AbnormalInformation* V2XInformation::_internal_mutable_abnormal_info() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.abnormal_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::AbnormalInformation>(GetArenaForAllocation());
    _impl_.abnormal_info_ = p;
  }
  return _impl_.abnormal_info_;
}
inline ::apollo::v2x::AbnormalInformation* V2XInformation::mutable_abnormal_info() {
  ::apollo::v2x::AbnormalInformation* _msg = _internal_mutable_abnormal_info();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XInformation.abnormal_info)
  return _msg;
}
inline void V2XInformation::set_allocated_abnormal_info(::apollo::v2x::AbnormalInformation* abnormal_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.abnormal_info_;
  }
  if (abnormal_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(abnormal_info);
    if (message_arena != submessage_arena) {
      abnormal_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abnormal_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.abnormal_info_ = abnormal_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XInformation.abnormal_info)
}

// -------------------------------------------------------------------

// V2XObstacle

// optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline bool V2XObstacle::_internal_has_perception_obstacle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.perception_obstacle_ != nullptr);
  return value;
}
inline bool V2XObstacle::has_perception_obstacle() const {
  return _internal_has_perception_obstacle();
}
inline const ::apollo::perception::PerceptionObstacle& V2XObstacle::_internal_perception_obstacle() const {
  const ::apollo::perception::PerceptionObstacle* p = _impl_.perception_obstacle_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::PerceptionObstacle&>(
      ::apollo::perception::_PerceptionObstacle_default_instance_);
}
inline const ::apollo::perception::PerceptionObstacle& V2XObstacle::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacle.perception_obstacle)
  return _internal_perception_obstacle();
}
inline void V2XObstacle::unsafe_arena_set_allocated_perception_obstacle(
    ::apollo::perception::PerceptionObstacle* perception_obstacle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perception_obstacle_);
  }
  _impl_.perception_obstacle_ = perception_obstacle;
  if (perception_obstacle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XObstacle.perception_obstacle)
}
inline ::apollo::perception::PerceptionObstacle* V2XObstacle::release_perception_obstacle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.perception_obstacle_;
  _impl_.perception_obstacle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* V2XObstacle::unsafe_arena_release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XObstacle.perception_obstacle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.perception_obstacle_;
  _impl_.perception_obstacle_ = nullptr;
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* V2XObstacle::_internal_mutable_perception_obstacle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.perception_obstacle_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(GetArenaForAllocation());
    _impl_.perception_obstacle_ = p;
  }
  return _impl_.perception_obstacle_;
}
inline ::apollo::perception::PerceptionObstacle* V2XObstacle::mutable_perception_obstacle() {
  ::apollo::perception::PerceptionObstacle* _msg = _internal_mutable_perception_obstacle();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XObstacle.perception_obstacle)
  return _msg;
}
inline void V2XObstacle::set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perception_obstacle_);
  }
  if (perception_obstacle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perception_obstacle));
    if (message_arena != submessage_arena) {
      perception_obstacle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perception_obstacle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.perception_obstacle_ = perception_obstacle;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XObstacle.perception_obstacle)
}

// optional .apollo.v2x.V2XInformation v2x_info = 2;
inline bool V2XObstacle::_internal_has_v2x_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.v2x_info_ != nullptr);
  return value;
}
inline bool V2XObstacle::has_v2x_info() const {
  return _internal_has_v2x_info();
}
inline void V2XObstacle::clear_v2x_info() {
  if (_impl_.v2x_info_ != nullptr) _impl_.v2x_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::v2x::V2XInformation& V2XObstacle::_internal_v2x_info() const {
  const ::apollo::v2x::V2XInformation* p = _impl_.v2x_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::V2XInformation&>(
      ::apollo::v2x::_V2XInformation_default_instance_);
}
inline const ::apollo::v2x::V2XInformation& V2XObstacle::v2x_info() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacle.v2x_info)
  return _internal_v2x_info();
}
inline void V2XObstacle::unsafe_arena_set_allocated_v2x_info(
    ::apollo::v2x::V2XInformation* v2x_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v2x_info_);
  }
  _impl_.v2x_info_ = v2x_info;
  if (v2x_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XObstacle.v2x_info)
}
inline ::apollo::v2x::V2XInformation* V2XObstacle::release_v2x_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::V2XInformation* temp = _impl_.v2x_info_;
  _impl_.v2x_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::V2XInformation* V2XObstacle::unsafe_arena_release_v2x_info() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XObstacle.v2x_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::V2XInformation* temp = _impl_.v2x_info_;
  _impl_.v2x_info_ = nullptr;
  return temp;
}
inline ::apollo::v2x::V2XInformation* V2XObstacle::_internal_mutable_v2x_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.v2x_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::V2XInformation>(GetArenaForAllocation());
    _impl_.v2x_info_ = p;
  }
  return _impl_.v2x_info_;
}
inline ::apollo::v2x::V2XInformation* V2XObstacle::mutable_v2x_info() {
  ::apollo::v2x::V2XInformation* _msg = _internal_mutable_v2x_info();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XObstacle.v2x_info)
  return _msg;
}
inline void V2XObstacle::set_allocated_v2x_info(::apollo::v2x::V2XInformation* v2x_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.v2x_info_;
  }
  if (v2x_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v2x_info);
    if (message_arena != submessage_arena) {
      v2x_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v2x_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.v2x_info_ = v2x_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XObstacle.v2x_info)
}

// -------------------------------------------------------------------

// V2XObstacles

// repeated .apollo.v2x.V2XObstacle v2x_obstacle = 1;
inline int V2XObstacles::_internal_v2x_obstacle_size() const {
  return _impl_.v2x_obstacle_.size();
}
inline int V2XObstacles::v2x_obstacle_size() const {
  return _internal_v2x_obstacle_size();
}
inline void V2XObstacles::clear_v2x_obstacle() {
  _impl_.v2x_obstacle_.Clear();
}
inline ::apollo::v2x::V2XObstacle* V2XObstacles::mutable_v2x_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XObstacles.v2x_obstacle)
  return _impl_.v2x_obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::V2XObstacle >*
V2XObstacles::mutable_v2x_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.V2XObstacles.v2x_obstacle)
  return &_impl_.v2x_obstacle_;
}
inline const ::apollo::v2x::V2XObstacle& V2XObstacles::_internal_v2x_obstacle(int index) const {
  return _impl_.v2x_obstacle_.Get(index);
}
inline const ::apollo::v2x::V2XObstacle& V2XObstacles::v2x_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacles.v2x_obstacle)
  return _internal_v2x_obstacle(index);
}
inline ::apollo::v2x::V2XObstacle* V2XObstacles::_internal_add_v2x_obstacle() {
  return _impl_.v2x_obstacle_.Add();
}
inline ::apollo::v2x::V2XObstacle* V2XObstacles::add_v2x_obstacle() {
  ::apollo::v2x::V2XObstacle* _add = _internal_add_v2x_obstacle();
  // @@protoc_insertion_point(field_add:apollo.v2x.V2XObstacles.v2x_obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::V2XObstacle >&
V2XObstacles::v2x_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.V2XObstacles.v2x_obstacle)
  return _impl_.v2x_obstacle_;
}

// optional .apollo.v2x.MiniAreaMap area_map = 2;
inline bool V2XObstacles::_internal_has_area_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.area_map_ != nullptr);
  return value;
}
inline bool V2XObstacles::has_area_map() const {
  return _internal_has_area_map();
}
inline void V2XObstacles::clear_area_map() {
  if (_impl_.area_map_ != nullptr) _impl_.area_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::v2x::MiniAreaMap& V2XObstacles::_internal_area_map() const {
  const ::apollo::v2x::MiniAreaMap* p = _impl_.area_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::MiniAreaMap&>(
      ::apollo::v2x::_MiniAreaMap_default_instance_);
}
inline const ::apollo::v2x::MiniAreaMap& V2XObstacles::area_map() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacles.area_map)
  return _internal_area_map();
}
inline void V2XObstacles::unsafe_arena_set_allocated_area_map(
    ::apollo::v2x::MiniAreaMap* area_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.area_map_);
  }
  _impl_.area_map_ = area_map;
  if (area_map) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XObstacles.area_map)
}
inline ::apollo::v2x::MiniAreaMap* V2XObstacles::release_area_map() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::MiniAreaMap* temp = _impl_.area_map_;
  _impl_.area_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::MiniAreaMap* V2XObstacles::unsafe_arena_release_area_map() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XObstacles.area_map)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::MiniAreaMap* temp = _impl_.area_map_;
  _impl_.area_map_ = nullptr;
  return temp;
}
inline ::apollo::v2x::MiniAreaMap* V2XObstacles::_internal_mutable_area_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.area_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::MiniAreaMap>(GetArenaForAllocation());
    _impl_.area_map_ = p;
  }
  return _impl_.area_map_;
}
inline ::apollo::v2x::MiniAreaMap* V2XObstacles::mutable_area_map() {
  ::apollo::v2x::MiniAreaMap* _msg = _internal_mutable_area_map();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XObstacles.area_map)
  return _msg;
}
inline void V2XObstacles::set_allocated_area_map(::apollo::v2x::MiniAreaMap* area_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.area_map_;
  }
  if (area_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(area_map);
    if (message_arena != submessage_arena) {
      area_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.area_map_ = area_map;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XObstacles.area_map)
}

// optional double traffic_flow = 3;
inline bool V2XObstacles::_internal_has_traffic_flow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool V2XObstacles::has_traffic_flow() const {
  return _internal_has_traffic_flow();
}
inline void V2XObstacles::clear_traffic_flow() {
  _impl_.traffic_flow_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double V2XObstacles::_internal_traffic_flow() const {
  return _impl_.traffic_flow_;
}
inline double V2XObstacles::traffic_flow() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacles.traffic_flow)
  return _internal_traffic_flow();
}
inline void V2XObstacles::_internal_set_traffic_flow(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.traffic_flow_ = value;
}
inline void V2XObstacles::set_traffic_flow(double value) {
  _internal_set_traffic_flow(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.V2XObstacles.traffic_flow)
}

// optional .apollo.common.Header header = 4;
inline bool V2XObstacles::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool V2XObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& V2XObstacles::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& V2XObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacles.header)
  return _internal_header();
}
inline void V2XObstacles::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.V2XObstacles.header)
}
inline ::apollo::common::Header* V2XObstacles::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* V2XObstacles::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.v2x.V2XObstacles.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* V2XObstacles::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* V2XObstacles::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.V2XObstacles.header)
  return _msg;
}
inline void V2XObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.V2XObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 5 [default = OK];
inline bool V2XObstacles::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool V2XObstacles::has_error_code() const {
  return _internal_has_error_code();
}
inline void V2XObstacles::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::common::ErrorCode V2XObstacles::_internal_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(_impl_.error_code_);
}
inline ::apollo::common::ErrorCode V2XObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.V2XObstacles.error_code)
  return _internal_error_code();
}
inline void V2XObstacles::_internal_set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.error_code_ = value;
}
inline void V2XObstacles::set_error_code(::apollo::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.V2XObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2x
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::v2x::V2XInformation_V2XType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::V2XInformation_V2XType>() {
  return ::apollo::v2x::V2XInformation_V2XType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobstacles_2eproto
