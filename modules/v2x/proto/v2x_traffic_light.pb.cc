// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light.proto

#include "modules/v2x/proto/v2x_traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace v2x {
PROTOBUF_CONSTEXPR SingleTrafficLight::SingleTrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.traffic_light_type_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.color_remaining_time_s_)*/0
  , /*decltype(_impl_.right_turn_light_)*/false
  , /*decltype(_impl_.next_color_)*/0
  , /*decltype(_impl_.next_remaining_time_s_)*/0} {}
struct SingleTrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleTrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleTrafficLightDefaultTypeInternal() {}
  union {
    SingleTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleTrafficLightDefaultTypeInternal _SingleTrafficLight_default_instance_;
PROTOBUF_CONSTEXPR RoadTrafficLight::RoadTrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.single_traffic_light_)*/{}
  , /*decltype(_impl_.gps_x_m_)*/0
  , /*decltype(_impl_.gps_y_m_)*/0
  , /*decltype(_impl_.road_attribute_)*/0} {}
struct RoadTrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadTrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadTrafficLightDefaultTypeInternal() {}
  union {
    RoadTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadTrafficLightDefaultTypeInternal _RoadTrafficLight_default_instance_;
PROTOBUF_CONSTEXPR IntersectionTrafficLightData::IntersectionTrafficLightData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.road_traffic_light_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.intersection_id_)*/0} {}
struct IntersectionTrafficLightDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionTrafficLightDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionTrafficLightDataDefaultTypeInternal() {}
  union {
    IntersectionTrafficLightData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionTrafficLightDataDefaultTypeInternal _IntersectionTrafficLightData_default_instance_;
}  // namespace v2x
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto = nullptr;

const uint32_t TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.traffic_light_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.color_remaining_time_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.right_turn_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.next_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _impl_.next_remaining_time_s_),
  1,
  ~0u,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _impl_.gps_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _impl_.gps_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _impl_.single_traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::RoadTrafficLight, _impl_.road_attribute_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _impl_.road_traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _impl_.intersection_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _impl_.confidence_),
  0,
  ~0u,
  2,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::v2x::SingleTrafficLight)},
  { 20, 30, -1, sizeof(::apollo::v2x::RoadTrafficLight)},
  { 34, 44, -1, sizeof(::apollo::v2x::IntersectionTrafficLightData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::v2x::_SingleTrafficLight_default_instance_._instance,
  &::apollo::v2x::_RoadTrafficLight_default_instance_._instance,
  &::apollo::v2x::_IntersectionTrafficLightData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/v2x/proto/v2x_traffic_light.pr"
  "oto\022\napollo.v2x\032!modules/common/proto/he"
  "ader.proto\032$modules/common/proto/directi"
  "on.proto\"\262\003\n\022SingleTrafficLight\0223\n\005color"
  "\030\001 \001(\0162$.apollo.v2x.SingleTrafficLight.C"
  "olor\022\?\n\022traffic_light_type\030\002 \003(\0162#.apoll"
  "o.v2x.SingleTrafficLight.Type\022\n\n\002id\030\003 \001("
  "\t\022\036\n\026color_remaining_time_s\030\004 \001(\005\022\030\n\020rig"
  "ht_turn_light\030\005 \001(\010\0228\n\nnext_color\030\006 \001(\0162"
  "$.apollo.v2x.SingleTrafficLight.Color\022\035\n"
  "\025next_remaining_time_s\030\007 \001(\001\"P\n\005Color\022\013\n"
  "\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005GREEN"
  "\020\003\022\t\n\005BLACK\020\004\022\017\n\013FLASH_GREEN\020\005\"5\n\004Type\022\014"
  "\n\010STRAIGHT\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\n\n\006U_T"
  "URN\020\003\"\244\001\n\020RoadTrafficLight\022\017\n\007gps_x_m\030\001 "
  "\001(\001\022\017\n\007gps_y_m\030\002 \001(\001\022<\n\024single_traffic_l"
  "ight\030\003 \003(\0132\036.apollo.v2x.SingleTrafficLig"
  "ht\0220\n\016road_attribute\030\004 \001(\0162\030.apollo.comm"
  "on.Direction\"\254\001\n\034IntersectionTrafficLigh"
  "tData\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
  "ader\0228\n\022road_traffic_light\030\002 \003(\0132\034.apoll"
  "o.v2x.RoadTrafficLight\022\027\n\017intersection_i"
  "d\030\003 \001(\005\022\022\n\nconfidence\030\004 \001(\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fdirection_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto = {
    false, false, 907, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto,
    "modules/v2x/proto/v2x_traffic_light.proto",
    &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once, descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto::offsets,
    file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto,
    file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_getter() {
  return &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto);
namespace apollo {
namespace v2x {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[0];
}
bool SingleTrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SingleTrafficLight_Color SingleTrafficLight::UNKNOWN;
constexpr SingleTrafficLight_Color SingleTrafficLight::RED;
constexpr SingleTrafficLight_Color SingleTrafficLight::YELLOW;
constexpr SingleTrafficLight_Color SingleTrafficLight::GREEN;
constexpr SingleTrafficLight_Color SingleTrafficLight::BLACK;
constexpr SingleTrafficLight_Color SingleTrafficLight::FLASH_GREEN;
constexpr SingleTrafficLight_Color SingleTrafficLight::Color_MIN;
constexpr SingleTrafficLight_Color SingleTrafficLight::Color_MAX;
constexpr int SingleTrafficLight::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[1];
}
bool SingleTrafficLight_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SingleTrafficLight_Type SingleTrafficLight::STRAIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::LEFT;
constexpr SingleTrafficLight_Type SingleTrafficLight::RIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::U_TURN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MIN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MAX;
constexpr int SingleTrafficLight::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SingleTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleTrafficLight>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right_turn_light(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SingleTrafficLight::SingleTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.SingleTrafficLight)
}
SingleTrafficLight::SingleTrafficLight(const SingleTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_type_){from._impl_.traffic_light_type_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.color_remaining_time_s_){}
    , decltype(_impl_.right_turn_light_){}
    , decltype(_impl_.next_color_){}
    , decltype(_impl_.next_remaining_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_remaining_time_s_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.next_remaining_time_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.SingleTrafficLight)
}

inline void SingleTrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_type_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.color_remaining_time_s_){0}
    , decltype(_impl_.right_turn_light_){false}
    , decltype(_impl_.next_color_){0}
    , decltype(_impl_.next_remaining_time_s_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleTrafficLight::~SingleTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.SingleTrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traffic_light_type_.~RepeatedField();
  _impl_.id_.Destroy();
}

void SingleTrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.SingleTrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traffic_light_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.next_remaining_time_s_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.next_remaining_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.SingleTrafficLight.Type traffic_light_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Type_IsValid(val))) {
              _internal_add_traffic_light_type(static_cast<::apollo::v2x::SingleTrafficLight_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_traffic_light_type(), ptr, ctx, ::apollo::v2x::SingleTrafficLight_Type_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.v2x.SingleTrafficLight.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 color_remaining_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_color_remaining_time_s(&has_bits);
          _impl_.color_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_turn_light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_right_turn_light(&has_bits);
          _impl_.right_turn_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_next_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double next_remaining_time_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_next_remaining_time_s(&has_bits);
          _impl_.next_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.SingleTrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // repeated .apollo.v2x.SingleTrafficLight.Type traffic_light_type = 2;
  for (int i = 0, n = this->_internal_traffic_light_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_traffic_light_type(i), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.v2x.SingleTrafficLight.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional int32 color_remaining_time_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_color_remaining_time_s(), target);
  }

  // optional bool right_turn_light = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_right_turn_light(), target);
  }

  // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_next_color(), target);
  }

  // optional double next_remaining_time_s = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_next_remaining_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.SingleTrafficLight)
  return target;
}

size_t SingleTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.SingleTrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.SingleTrafficLight.Type traffic_light_type = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_traffic_light_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_traffic_light_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional int32 color_remaining_time_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color_remaining_time_s());
    }

    // optional bool right_turn_light = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_next_color());
    }

    // optional double next_remaining_time_s = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTrafficLight::GetClassData() const { return &_class_data_; }

void SingleTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleTrafficLight *>(to)->MergeFrom(
      static_cast<const SingleTrafficLight &>(from));
}


void SingleTrafficLight::MergeFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.traffic_light_type_.MergeFrom(from._impl_.traffic_light_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.color_remaining_time_s_ = from._impl_.color_remaining_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.right_turn_light_ = from._impl_.right_turn_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.next_color_ = from._impl_.next_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.next_remaining_time_s_ = from._impl_.next_remaining_time_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTrafficLight::CopyFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTrafficLight::IsInitialized() const {
  return true;
}

void SingleTrafficLight::InternalSwap(SingleTrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traffic_light_type_.InternalSwap(&other->_impl_.traffic_light_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTrafficLight, _impl_.next_remaining_time_s_)
      + sizeof(SingleTrafficLight::_impl_.next_remaining_time_s_)
      - PROTOBUF_FIELD_OFFSET(SingleTrafficLight, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[0]);
}

// ===================================================================

class RoadTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadTrafficLight>()._impl_._has_bits_);
  static void set_has_gps_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gps_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_road_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RoadTrafficLight::RoadTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.RoadTrafficLight)
}
RoadTrafficLight::RoadTrafficLight(const RoadTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.single_traffic_light_){from._impl_.single_traffic_light_}
    , decltype(_impl_.gps_x_m_){}
    , decltype(_impl_.gps_y_m_){}
    , decltype(_impl_.road_attribute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gps_x_m_, &from._impl_.gps_x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.road_attribute_) -
    reinterpret_cast<char*>(&_impl_.gps_x_m_)) + sizeof(_impl_.road_attribute_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.RoadTrafficLight)
}

inline void RoadTrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.single_traffic_light_){arena}
    , decltype(_impl_.gps_x_m_){0}
    , decltype(_impl_.gps_y_m_){0}
    , decltype(_impl_.road_attribute_){0}
  };
}

RoadTrafficLight::~RoadTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.RoadTrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.single_traffic_light_.~RepeatedPtrField();
}

void RoadTrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.RoadTrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.single_traffic_light_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gps_x_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.road_attribute_) -
        reinterpret_cast<char*>(&_impl_.gps_x_m_)) + sizeof(_impl_.road_attribute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadTrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gps_x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gps_x_m(&has_bits);
          _impl_.gps_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gps_y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_gps_y_m(&has_bits);
          _impl_.gps_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Direction road_attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::Direction_IsValid(val))) {
            _internal_set_road_attribute(static_cast<::apollo::common::Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadTrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.RoadTrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double gps_x_m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_gps_x_m(), target);
  }

  // optional double gps_y_m = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_gps_y_m(), target);
  }

  // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_single_traffic_light_size()); i < n; i++) {
    const auto& repfield = this->_internal_single_traffic_light(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Direction road_attribute = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_road_attribute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.RoadTrafficLight)
  return target;
}

size_t RoadTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.RoadTrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
  total_size += 1UL * this->_internal_single_traffic_light_size();
  for (const auto& msg : this->_impl_.single_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double gps_x_m = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double gps_y_m = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.Direction road_attribute = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_road_attribute());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadTrafficLight::GetClassData() const { return &_class_data_; }

void RoadTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadTrafficLight *>(to)->MergeFrom(
      static_cast<const RoadTrafficLight &>(from));
}


void RoadTrafficLight::MergeFrom(const RoadTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.RoadTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.single_traffic_light_.MergeFrom(from._impl_.single_traffic_light_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gps_x_m_ = from._impl_.gps_x_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gps_y_m_ = from._impl_.gps_y_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.road_attribute_ = from._impl_.road_attribute_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadTrafficLight::CopyFrom(const RoadTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.RoadTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadTrafficLight::IsInitialized() const {
  return true;
}

void RoadTrafficLight::InternalSwap(RoadTrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.single_traffic_light_.InternalSwap(&other->_impl_.single_traffic_light_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadTrafficLight, _impl_.road_attribute_)
      + sizeof(RoadTrafficLight::_impl_.road_attribute_)
      - PROTOBUF_FIELD_OFFSET(RoadTrafficLight, _impl_.gps_x_m_)>(
          reinterpret_cast<char*>(&_impl_.gps_x_m_),
          reinterpret_cast<char*>(&other->_impl_.gps_x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadTrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[1]);
}

// ===================================================================

class IntersectionTrafficLightData::_Internal {
 public:
  using HasBits = decltype(std::declval<IntersectionTrafficLightData>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const IntersectionTrafficLightData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intersection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
IntersectionTrafficLightData::_Internal::header(const IntersectionTrafficLightData* msg) {
  return *msg->_impl_.header_;
}
void IntersectionTrafficLightData::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IntersectionTrafficLightData::IntersectionTrafficLightData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.IntersectionTrafficLightData)
}
IntersectionTrafficLightData::IntersectionTrafficLightData(const IntersectionTrafficLightData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_traffic_light_){from._impl_.road_traffic_light_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.intersection_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.confidence_, &from._impl_.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intersection_id_) -
    reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.intersection_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.IntersectionTrafficLightData)
}

inline void IntersectionTrafficLightData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_traffic_light_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.intersection_id_){0}
  };
}

IntersectionTrafficLightData::~IntersectionTrafficLightData() {
  // @@protoc_insertion_point(destructor:apollo.v2x.IntersectionTrafficLightData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntersectionTrafficLightData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_traffic_light_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void IntersectionTrafficLightData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntersectionTrafficLightData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.IntersectionTrafficLightData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_traffic_light_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.intersection_id_) -
        reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.intersection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionTrafficLightData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.RoadTrafficLight road_traffic_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 intersection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_intersection_id(&has_bits);
          _impl_.intersection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntersectionTrafficLightData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.IntersectionTrafficLightData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.v2x.RoadTrafficLight road_traffic_light = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_traffic_light_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_traffic_light(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 intersection_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_intersection_id(), target);
  }

  // optional double confidence = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.IntersectionTrafficLightData)
  return target;
}

size_t IntersectionTrafficLightData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.IntersectionTrafficLightData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.RoadTrafficLight road_traffic_light = 2;
  total_size += 1UL * this->_internal_road_traffic_light_size();
  for (const auto& msg : this->_impl_.road_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double confidence = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 intersection_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intersection_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntersectionTrafficLightData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntersectionTrafficLightData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntersectionTrafficLightData::GetClassData() const { return &_class_data_; }

void IntersectionTrafficLightData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntersectionTrafficLightData *>(to)->MergeFrom(
      static_cast<const IntersectionTrafficLightData &>(from));
}


void IntersectionTrafficLightData::MergeFrom(const IntersectionTrafficLightData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.IntersectionTrafficLightData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.road_traffic_light_.MergeFrom(from._impl_.road_traffic_light_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.intersection_id_ = from._impl_.intersection_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntersectionTrafficLightData::CopyFrom(const IntersectionTrafficLightData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.IntersectionTrafficLightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionTrafficLightData::IsInitialized() const {
  return true;
}

void IntersectionTrafficLightData::InternalSwap(IntersectionTrafficLightData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.road_traffic_light_.InternalSwap(&other->_impl_.road_traffic_light_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntersectionTrafficLightData, _impl_.intersection_id_)
      + sizeof(IntersectionTrafficLightData::_impl_.intersection_id_)
      - PROTOBUF_FIELD_OFFSET(IntersectionTrafficLightData, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionTrafficLightData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::SingleTrafficLight*
Arena::CreateMaybeMessage< ::apollo::v2x::SingleTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::SingleTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::RoadTrafficLight*
Arena::CreateMaybeMessage< ::apollo::v2x::RoadTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::RoadTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::IntersectionTrafficLightData*
Arena::CreateMaybeMessage< ::apollo::v2x::IntersectionTrafficLightData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::IntersectionTrafficLightData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
