// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/fusion_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
namespace apollo {
namespace v2x {
namespace ft {
namespace fusion {
class FusionParams;
struct FusionParamsDefaultTypeInternal;
extern FusionParamsDefaultTypeInternal _FusionParams_default_instance_;
class KMParams;
struct KMParamsDefaultTypeInternal;
extern KMParamsDefaultTypeInternal _KMParams_default_instance_;
class Param;
struct ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class ScoreParams;
struct ScoreParamsDefaultTypeInternal;
extern ScoreParamsDefaultTypeInternal _ScoreParams_default_instance_;
class SingleCameraParam;
struct SingleCameraParamDefaultTypeInternal;
extern SingleCameraParamDefaultTypeInternal _SingleCameraParam_default_instance_;
}  // namespace fusion
}  // namespace ft
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::v2x::ft::fusion::FusionParams* Arena::CreateMaybeMessage<::apollo::v2x::ft::fusion::FusionParams>(Arena*);
template<> ::apollo::v2x::ft::fusion::KMParams* Arena::CreateMaybeMessage<::apollo::v2x::ft::fusion::KMParams>(Arena*);
template<> ::apollo::v2x::ft::fusion::Param* Arena::CreateMaybeMessage<::apollo::v2x::ft::fusion::Param>(Arena*);
template<> ::apollo::v2x::ft::fusion::ScoreParams* Arena::CreateMaybeMessage<::apollo::v2x::ft::fusion::ScoreParams>(Arena*);
template<> ::apollo::v2x::ft::fusion::SingleCameraParam* Arena::CreateMaybeMessage<::apollo::v2x::ft::fusion::SingleCameraParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace v2x {
namespace ft {
namespace fusion {

enum ConfidenceLevel : int {
  C90P = 0,
  C95P = 1,
  C975P = 2,
  C99P = 3
};
bool ConfidenceLevel_IsValid(int value);
constexpr ConfidenceLevel ConfidenceLevel_MIN = C90P;
constexpr ConfidenceLevel ConfidenceLevel_MAX = C99P;
constexpr int ConfidenceLevel_ARRAYSIZE = ConfidenceLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfidenceLevel_descriptor();
template<typename T>
inline const std::string& ConfidenceLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfidenceLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfidenceLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfidenceLevel_descriptor(), enum_t_value);
}
inline bool ConfidenceLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfidenceLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfidenceLevel>(
    ConfidenceLevel_descriptor(), name, value);
}
// ===================================================================

class KMParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.ft.fusion.KMParams) */ {
 public:
  inline KMParams() : KMParams(nullptr) {}
  ~KMParams() override;
  explicit PROTOBUF_CONSTEXPR KMParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KMParams(const KMParams& from);
  KMParams(KMParams&& from) noexcept
    : KMParams() {
    *this = ::std::move(from);
  }

  inline KMParams& operator=(const KMParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMParams& operator=(KMParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KMParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const KMParams* internal_default_instance() {
    return reinterpret_cast<const KMParams*>(
               &_KMParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KMParams& a, KMParams& b) {
    a.Swap(&b);
  }
  inline void Swap(KMParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KMParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KMParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KMParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KMParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KMParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.ft.fusion.KMParams";
  }
  protected:
  explicit KMParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinScoreFieldNumber = 1,
  };
  // optional double min_score = 1;
  bool has_min_score() const;
  private:
  bool _internal_has_min_score() const;
  public:
  void clear_min_score();
  double min_score() const;
  void set_min_score(double value);
  private:
  double _internal_min_score() const;
  void _internal_set_min_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.ft.fusion.KMParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double min_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
};
// -------------------------------------------------------------------

class Param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.ft.fusion.Param) */ {
 public:
  inline Param() : Param(nullptr) {}
  ~Param() override;
  explicit PROTOBUF_CONSTEXPR Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Param(const Param& from);
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Param& operator=(Param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Param* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Param& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.ft.fusion.Param";
  }
  protected:
  explicit Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // optional double k = 1;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  double k() const;
  void set_k(double value);
  private:
  double _internal_k() const;
  void _internal_set_k(double value);
  public:

  // optional double b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  double b() const;
  void set_b(double value);
  private:
  double _internal_b() const;
  void _internal_set_b(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.ft.fusion.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double k_;
    double b_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
};
// -------------------------------------------------------------------

class SingleCameraParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.ft.fusion.SingleCameraParam) */ {
 public:
  inline SingleCameraParam() : SingleCameraParam(nullptr) {}
  ~SingleCameraParam() override;
  explicit PROTOBUF_CONSTEXPR SingleCameraParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleCameraParam(const SingleCameraParam& from);
  SingleCameraParam(SingleCameraParam&& from) noexcept
    : SingleCameraParam() {
    *this = ::std::move(from);
  }

  inline SingleCameraParam& operator=(const SingleCameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleCameraParam& operator=(SingleCameraParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleCameraParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleCameraParam* internal_default_instance() {
    return reinterpret_cast<const SingleCameraParam*>(
               &_SingleCameraParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SingleCameraParam& a, SingleCameraParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleCameraParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleCameraParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleCameraParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleCameraParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleCameraParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleCameraParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleCameraParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.ft.fusion.SingleCameraParam";
  }
  protected:
  explicit SingleCameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 2,
    kCameraIdFieldNumber = 1,
  };
  // repeated .apollo.v2x.ft.fusion.Param param = 2;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  ::apollo::v2x::ft::fusion::Param* mutable_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::Param >*
      mutable_param();
  private:
  const ::apollo::v2x::ft::fusion::Param& _internal_param(int index) const;
  ::apollo::v2x::ft::fusion::Param* _internal_add_param();
  public:
  const ::apollo::v2x::ft::fusion::Param& param(int index) const;
  ::apollo::v2x::ft::fusion::Param* add_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::Param >&
      param() const;

  // optional int32 camera_id = 1;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  int32_t camera_id() const;
  void set_camera_id(int32_t value);
  private:
  int32_t _internal_camera_id() const;
  void _internal_set_camera_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.ft.fusion.SingleCameraParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::Param > param_;
    int32_t camera_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
};
// -------------------------------------------------------------------

class ScoreParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.ft.fusion.ScoreParams) */ {
 public:
  inline ScoreParams() : ScoreParams(nullptr) {}
  ~ScoreParams() override;
  explicit PROTOBUF_CONSTEXPR ScoreParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoreParams(const ScoreParams& from);
  ScoreParams(ScoreParams&& from) noexcept
    : ScoreParams() {
    *this = ::std::move(from);
  }

  inline ScoreParams& operator=(const ScoreParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreParams& operator=(ScoreParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoreParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoreParams* internal_default_instance() {
    return reinterpret_cast<const ScoreParams*>(
               &_ScoreParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScoreParams& a, ScoreParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScoreParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScoreParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoreParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScoreParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.ft.fusion.ScoreParams";
  }
  protected:
  explicit ScoreParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbScaleFieldNumber = 1,
    kMaxMatchDistanceFieldNumber = 2,
    kMinScoreFieldNumber = 3,
    kUseMahalanobisDistanceFieldNumber = 4,
    kCheckTypeFieldNumber = 5,
    kConfidenceLevelFieldNumber = 6,
  };
  // optional double prob_scale = 1;
  bool has_prob_scale() const;
  private:
  bool _internal_has_prob_scale() const;
  public:
  void clear_prob_scale();
  double prob_scale() const;
  void set_prob_scale(double value);
  private:
  double _internal_prob_scale() const;
  void _internal_set_prob_scale(double value);
  public:

  // optional double max_match_distance = 2;
  bool has_max_match_distance() const;
  private:
  bool _internal_has_max_match_distance() const;
  public:
  void clear_max_match_distance();
  double max_match_distance() const;
  void set_max_match_distance(double value);
  private:
  double _internal_max_match_distance() const;
  void _internal_set_max_match_distance(double value);
  public:

  // optional double min_score = 3;
  bool has_min_score() const;
  private:
  bool _internal_has_min_score() const;
  public:
  void clear_min_score();
  double min_score() const;
  void set_min_score(double value);
  private:
  double _internal_min_score() const;
  void _internal_set_min_score(double value);
  public:

  // optional bool use_mahalanobis_distance = 4 [default = false];
  bool has_use_mahalanobis_distance() const;
  private:
  bool _internal_has_use_mahalanobis_distance() const;
  public:
  void clear_use_mahalanobis_distance();
  bool use_mahalanobis_distance() const;
  void set_use_mahalanobis_distance(bool value);
  private:
  bool _internal_use_mahalanobis_distance() const;
  void _internal_set_use_mahalanobis_distance(bool value);
  public:

  // optional bool check_type = 5 [default = false];
  bool has_check_type() const;
  private:
  bool _internal_has_check_type() const;
  public:
  void clear_check_type();
  bool check_type() const;
  void set_check_type(bool value);
  private:
  bool _internal_check_type() const;
  void _internal_set_check_type(bool value);
  public:

  // optional .apollo.v2x.ft.fusion.ConfidenceLevel confidence_level = 6 [default = C975P];
  bool has_confidence_level() const;
  private:
  bool _internal_has_confidence_level() const;
  public:
  void clear_confidence_level();
  ::apollo::v2x::ft::fusion::ConfidenceLevel confidence_level() const;
  void set_confidence_level(::apollo::v2x::ft::fusion::ConfidenceLevel value);
  private:
  ::apollo::v2x::ft::fusion::ConfidenceLevel _internal_confidence_level() const;
  void _internal_set_confidence_level(::apollo::v2x::ft::fusion::ConfidenceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.ft.fusion.ScoreParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double prob_scale_;
    double max_match_distance_;
    double min_score_;
    bool use_mahalanobis_distance_;
    bool check_type_;
    int confidence_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FusionParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.ft.fusion.FusionParams) */ {
 public:
  inline FusionParams() : FusionParams(nullptr) {}
  ~FusionParams() override;
  explicit PROTOBUF_CONSTEXPR FusionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionParams(const FusionParams& from);
  FusionParams(FusionParams&& from) noexcept
    : FusionParams() {
    *this = ::std::move(from);
  }

  inline FusionParams& operator=(const FusionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionParams& operator=(FusionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionParams* internal_default_instance() {
    return reinterpret_cast<const FusionParams*>(
               &_FusionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FusionParams& a, FusionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.ft.fusion.FusionParams";
  }
  protected:
  explicit FusionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFusionParamsFieldNumber = 1,
    kKmParamsFieldNumber = 2,
    kScoreParamsFieldNumber = 3,
  };
  // repeated .apollo.v2x.ft.fusion.SingleCameraParam fusion_params = 1;
  int fusion_params_size() const;
  private:
  int _internal_fusion_params_size() const;
  public:
  void clear_fusion_params();
  ::apollo::v2x::ft::fusion::SingleCameraParam* mutable_fusion_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::SingleCameraParam >*
      mutable_fusion_params();
  private:
  const ::apollo::v2x::ft::fusion::SingleCameraParam& _internal_fusion_params(int index) const;
  ::apollo::v2x::ft::fusion::SingleCameraParam* _internal_add_fusion_params();
  public:
  const ::apollo::v2x::ft::fusion::SingleCameraParam& fusion_params(int index) const;
  ::apollo::v2x::ft::fusion::SingleCameraParam* add_fusion_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::SingleCameraParam >&
      fusion_params() const;

  // optional .apollo.v2x.ft.fusion.KMParams km_params = 2;
  bool has_km_params() const;
  private:
  bool _internal_has_km_params() const;
  public:
  void clear_km_params();
  const ::apollo::v2x::ft::fusion::KMParams& km_params() const;
  PROTOBUF_NODISCARD ::apollo::v2x::ft::fusion::KMParams* release_km_params();
  ::apollo::v2x::ft::fusion::KMParams* mutable_km_params();
  void set_allocated_km_params(::apollo::v2x::ft::fusion::KMParams* km_params);
  private:
  const ::apollo::v2x::ft::fusion::KMParams& _internal_km_params() const;
  ::apollo::v2x::ft::fusion::KMParams* _internal_mutable_km_params();
  public:
  void unsafe_arena_set_allocated_km_params(
      ::apollo::v2x::ft::fusion::KMParams* km_params);
  ::apollo::v2x::ft::fusion::KMParams* unsafe_arena_release_km_params();

  // required .apollo.v2x.ft.fusion.ScoreParams score_params = 3;
  bool has_score_params() const;
  private:
  bool _internal_has_score_params() const;
  public:
  void clear_score_params();
  const ::apollo::v2x::ft::fusion::ScoreParams& score_params() const;
  PROTOBUF_NODISCARD ::apollo::v2x::ft::fusion::ScoreParams* release_score_params();
  ::apollo::v2x::ft::fusion::ScoreParams* mutable_score_params();
  void set_allocated_score_params(::apollo::v2x::ft::fusion::ScoreParams* score_params);
  private:
  const ::apollo::v2x::ft::fusion::ScoreParams& _internal_score_params() const;
  ::apollo::v2x::ft::fusion::ScoreParams* _internal_mutable_score_params();
  public:
  void unsafe_arena_set_allocated_score_params(
      ::apollo::v2x::ft::fusion::ScoreParams* score_params);
  ::apollo::v2x::ft::fusion::ScoreParams* unsafe_arena_release_score_params();

  // @@protoc_insertion_point(class_scope:apollo.v2x.ft.fusion.FusionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::SingleCameraParam > fusion_params_;
    ::apollo::v2x::ft::fusion::KMParams* km_params_;
    ::apollo::v2x::ft::fusion::ScoreParams* score_params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KMParams

// optional double min_score = 1;
inline bool KMParams::_internal_has_min_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMParams::has_min_score() const {
  return _internal_has_min_score();
}
inline void KMParams::clear_min_score() {
  _impl_.min_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double KMParams::_internal_min_score() const {
  return _impl_.min_score_;
}
inline double KMParams::min_score() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.KMParams.min_score)
  return _internal_min_score();
}
inline void KMParams::_internal_set_min_score(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_score_ = value;
}
inline void KMParams::set_min_score(double value) {
  _internal_set_min_score(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.KMParams.min_score)
}

// -------------------------------------------------------------------

// Param

// optional double k = 1;
inline bool Param::_internal_has_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Param::has_k() const {
  return _internal_has_k();
}
inline void Param::clear_k() {
  _impl_.k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Param::_internal_k() const {
  return _impl_.k_;
}
inline double Param::k() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.Param.k)
  return _internal_k();
}
inline void Param::_internal_set_k(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.k_ = value;
}
inline void Param::set_k(double value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.Param.k)
}

// optional double b = 2;
inline bool Param::_internal_has_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Param::has_b() const {
  return _internal_has_b();
}
inline void Param::clear_b() {
  _impl_.b_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Param::_internal_b() const {
  return _impl_.b_;
}
inline double Param::b() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.Param.b)
  return _internal_b();
}
inline void Param::_internal_set_b(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.b_ = value;
}
inline void Param::set_b(double value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.Param.b)
}

// -------------------------------------------------------------------

// SingleCameraParam

// optional int32 camera_id = 1;
inline bool SingleCameraParam::_internal_has_camera_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SingleCameraParam::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void SingleCameraParam::clear_camera_id() {
  _impl_.camera_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SingleCameraParam::_internal_camera_id() const {
  return _impl_.camera_id_;
}
inline int32_t SingleCameraParam::camera_id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.SingleCameraParam.camera_id)
  return _internal_camera_id();
}
inline void SingleCameraParam::_internal_set_camera_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.camera_id_ = value;
}
inline void SingleCameraParam::set_camera_id(int32_t value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.SingleCameraParam.camera_id)
}

// repeated .apollo.v2x.ft.fusion.Param param = 2;
inline int SingleCameraParam::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int SingleCameraParam::param_size() const {
  return _internal_param_size();
}
inline void SingleCameraParam::clear_param() {
  _impl_.param_.Clear();
}
inline ::apollo::v2x::ft::fusion::Param* SingleCameraParam::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.ft.fusion.SingleCameraParam.param)
  return _impl_.param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::Param >*
SingleCameraParam::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.ft.fusion.SingleCameraParam.param)
  return &_impl_.param_;
}
inline const ::apollo::v2x::ft::fusion::Param& SingleCameraParam::_internal_param(int index) const {
  return _impl_.param_.Get(index);
}
inline const ::apollo::v2x::ft::fusion::Param& SingleCameraParam::param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.SingleCameraParam.param)
  return _internal_param(index);
}
inline ::apollo::v2x::ft::fusion::Param* SingleCameraParam::_internal_add_param() {
  return _impl_.param_.Add();
}
inline ::apollo::v2x::ft::fusion::Param* SingleCameraParam::add_param() {
  ::apollo::v2x::ft::fusion::Param* _add = _internal_add_param();
  // @@protoc_insertion_point(field_add:apollo.v2x.ft.fusion.SingleCameraParam.param)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::Param >&
SingleCameraParam::param() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.ft.fusion.SingleCameraParam.param)
  return _impl_.param_;
}

// -------------------------------------------------------------------

// ScoreParams

// optional double prob_scale = 1;
inline bool ScoreParams::_internal_has_prob_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScoreParams::has_prob_scale() const {
  return _internal_has_prob_scale();
}
inline void ScoreParams::clear_prob_scale() {
  _impl_.prob_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScoreParams::_internal_prob_scale() const {
  return _impl_.prob_scale_;
}
inline double ScoreParams::prob_scale() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.prob_scale)
  return _internal_prob_scale();
}
inline void ScoreParams::_internal_set_prob_scale(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prob_scale_ = value;
}
inline void ScoreParams::set_prob_scale(double value) {
  _internal_set_prob_scale(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.prob_scale)
}

// optional double max_match_distance = 2;
inline bool ScoreParams::_internal_has_max_match_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScoreParams::has_max_match_distance() const {
  return _internal_has_max_match_distance();
}
inline void ScoreParams::clear_max_match_distance() {
  _impl_.max_match_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScoreParams::_internal_max_match_distance() const {
  return _impl_.max_match_distance_;
}
inline double ScoreParams::max_match_distance() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.max_match_distance)
  return _internal_max_match_distance();
}
inline void ScoreParams::_internal_set_max_match_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_match_distance_ = value;
}
inline void ScoreParams::set_max_match_distance(double value) {
  _internal_set_max_match_distance(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.max_match_distance)
}

// optional double min_score = 3;
inline bool ScoreParams::_internal_has_min_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScoreParams::has_min_score() const {
  return _internal_has_min_score();
}
inline void ScoreParams::clear_min_score() {
  _impl_.min_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScoreParams::_internal_min_score() const {
  return _impl_.min_score_;
}
inline double ScoreParams::min_score() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.min_score)
  return _internal_min_score();
}
inline void ScoreParams::_internal_set_min_score(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_score_ = value;
}
inline void ScoreParams::set_min_score(double value) {
  _internal_set_min_score(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.min_score)
}

// optional bool use_mahalanobis_distance = 4 [default = false];
inline bool ScoreParams::_internal_has_use_mahalanobis_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScoreParams::has_use_mahalanobis_distance() const {
  return _internal_has_use_mahalanobis_distance();
}
inline void ScoreParams::clear_use_mahalanobis_distance() {
  _impl_.use_mahalanobis_distance_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ScoreParams::_internal_use_mahalanobis_distance() const {
  return _impl_.use_mahalanobis_distance_;
}
inline bool ScoreParams::use_mahalanobis_distance() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.use_mahalanobis_distance)
  return _internal_use_mahalanobis_distance();
}
inline void ScoreParams::_internal_set_use_mahalanobis_distance(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_mahalanobis_distance_ = value;
}
inline void ScoreParams::set_use_mahalanobis_distance(bool value) {
  _internal_set_use_mahalanobis_distance(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.use_mahalanobis_distance)
}

// optional bool check_type = 5 [default = false];
inline bool ScoreParams::_internal_has_check_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScoreParams::has_check_type() const {
  return _internal_has_check_type();
}
inline void ScoreParams::clear_check_type() {
  _impl_.check_type_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ScoreParams::_internal_check_type() const {
  return _impl_.check_type_;
}
inline bool ScoreParams::check_type() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.check_type)
  return _internal_check_type();
}
inline void ScoreParams::_internal_set_check_type(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.check_type_ = value;
}
inline void ScoreParams::set_check_type(bool value) {
  _internal_set_check_type(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.check_type)
}

// optional .apollo.v2x.ft.fusion.ConfidenceLevel confidence_level = 6 [default = C975P];
inline bool ScoreParams::_internal_has_confidence_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScoreParams::has_confidence_level() const {
  return _internal_has_confidence_level();
}
inline void ScoreParams::clear_confidence_level() {
  _impl_.confidence_level_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::v2x::ft::fusion::ConfidenceLevel ScoreParams::_internal_confidence_level() const {
  return static_cast< ::apollo::v2x::ft::fusion::ConfidenceLevel >(_impl_.confidence_level_);
}
inline ::apollo::v2x::ft::fusion::ConfidenceLevel ScoreParams::confidence_level() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.ScoreParams.confidence_level)
  return _internal_confidence_level();
}
inline void ScoreParams::_internal_set_confidence_level(::apollo::v2x::ft::fusion::ConfidenceLevel value) {
  assert(::apollo::v2x::ft::fusion::ConfidenceLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.confidence_level_ = value;
}
inline void ScoreParams::set_confidence_level(::apollo::v2x::ft::fusion::ConfidenceLevel value) {
  _internal_set_confidence_level(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.ft.fusion.ScoreParams.confidence_level)
}

// -------------------------------------------------------------------

// FusionParams

// repeated .apollo.v2x.ft.fusion.SingleCameraParam fusion_params = 1;
inline int FusionParams::_internal_fusion_params_size() const {
  return _impl_.fusion_params_.size();
}
inline int FusionParams::fusion_params_size() const {
  return _internal_fusion_params_size();
}
inline void FusionParams::clear_fusion_params() {
  _impl_.fusion_params_.Clear();
}
inline ::apollo::v2x::ft::fusion::SingleCameraParam* FusionParams::mutable_fusion_params(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.ft.fusion.FusionParams.fusion_params)
  return _impl_.fusion_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::SingleCameraParam >*
FusionParams::mutable_fusion_params() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.ft.fusion.FusionParams.fusion_params)
  return &_impl_.fusion_params_;
}
inline const ::apollo::v2x::ft::fusion::SingleCameraParam& FusionParams::_internal_fusion_params(int index) const {
  return _impl_.fusion_params_.Get(index);
}
inline const ::apollo::v2x::ft::fusion::SingleCameraParam& FusionParams::fusion_params(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.FusionParams.fusion_params)
  return _internal_fusion_params(index);
}
inline ::apollo::v2x::ft::fusion::SingleCameraParam* FusionParams::_internal_add_fusion_params() {
  return _impl_.fusion_params_.Add();
}
inline ::apollo::v2x::ft::fusion::SingleCameraParam* FusionParams::add_fusion_params() {
  ::apollo::v2x::ft::fusion::SingleCameraParam* _add = _internal_add_fusion_params();
  // @@protoc_insertion_point(field_add:apollo.v2x.ft.fusion.FusionParams.fusion_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::ft::fusion::SingleCameraParam >&
FusionParams::fusion_params() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.ft.fusion.FusionParams.fusion_params)
  return _impl_.fusion_params_;
}

// optional .apollo.v2x.ft.fusion.KMParams km_params = 2;
inline bool FusionParams::_internal_has_km_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.km_params_ != nullptr);
  return value;
}
inline bool FusionParams::has_km_params() const {
  return _internal_has_km_params();
}
inline void FusionParams::clear_km_params() {
  if (_impl_.km_params_ != nullptr) _impl_.km_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::v2x::ft::fusion::KMParams& FusionParams::_internal_km_params() const {
  const ::apollo::v2x::ft::fusion::KMParams* p = _impl_.km_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::ft::fusion::KMParams&>(
      ::apollo::v2x::ft::fusion::_KMParams_default_instance_);
}
inline const ::apollo::v2x::ft::fusion::KMParams& FusionParams::km_params() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.FusionParams.km_params)
  return _internal_km_params();
}
inline void FusionParams::unsafe_arena_set_allocated_km_params(
    ::apollo::v2x::ft::fusion::KMParams* km_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.km_params_);
  }
  _impl_.km_params_ = km_params;
  if (km_params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.ft.fusion.FusionParams.km_params)
}
inline ::apollo::v2x::ft::fusion::KMParams* FusionParams::release_km_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::ft::fusion::KMParams* temp = _impl_.km_params_;
  _impl_.km_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::ft::fusion::KMParams* FusionParams::unsafe_arena_release_km_params() {
  // @@protoc_insertion_point(field_release:apollo.v2x.ft.fusion.FusionParams.km_params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::v2x::ft::fusion::KMParams* temp = _impl_.km_params_;
  _impl_.km_params_ = nullptr;
  return temp;
}
inline ::apollo::v2x::ft::fusion::KMParams* FusionParams::_internal_mutable_km_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.km_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::ft::fusion::KMParams>(GetArenaForAllocation());
    _impl_.km_params_ = p;
  }
  return _impl_.km_params_;
}
inline ::apollo::v2x::ft::fusion::KMParams* FusionParams::mutable_km_params() {
  ::apollo::v2x::ft::fusion::KMParams* _msg = _internal_mutable_km_params();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.ft.fusion.FusionParams.km_params)
  return _msg;
}
inline void FusionParams::set_allocated_km_params(::apollo::v2x::ft::fusion::KMParams* km_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.km_params_;
  }
  if (km_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(km_params);
    if (message_arena != submessage_arena) {
      km_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, km_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.km_params_ = km_params;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.ft.fusion.FusionParams.km_params)
}

// required .apollo.v2x.ft.fusion.ScoreParams score_params = 3;
inline bool FusionParams::_internal_has_score_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.score_params_ != nullptr);
  return value;
}
inline bool FusionParams::has_score_params() const {
  return _internal_has_score_params();
}
inline void FusionParams::clear_score_params() {
  if (_impl_.score_params_ != nullptr) _impl_.score_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::v2x::ft::fusion::ScoreParams& FusionParams::_internal_score_params() const {
  const ::apollo::v2x::ft::fusion::ScoreParams* p = _impl_.score_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::v2x::ft::fusion::ScoreParams&>(
      ::apollo::v2x::ft::fusion::_ScoreParams_default_instance_);
}
inline const ::apollo::v2x::ft::fusion::ScoreParams& FusionParams::score_params() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.ft.fusion.FusionParams.score_params)
  return _internal_score_params();
}
inline void FusionParams::unsafe_arena_set_allocated_score_params(
    ::apollo::v2x::ft::fusion::ScoreParams* score_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.score_params_);
  }
  _impl_.score_params_ = score_params;
  if (score_params) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.ft.fusion.FusionParams.score_params)
}
inline ::apollo::v2x::ft::fusion::ScoreParams* FusionParams::release_score_params() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::ft::fusion::ScoreParams* temp = _impl_.score_params_;
  _impl_.score_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::v2x::ft::fusion::ScoreParams* FusionParams::unsafe_arena_release_score_params() {
  // @@protoc_insertion_point(field_release:apollo.v2x.ft.fusion.FusionParams.score_params)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::v2x::ft::fusion::ScoreParams* temp = _impl_.score_params_;
  _impl_.score_params_ = nullptr;
  return temp;
}
inline ::apollo::v2x::ft::fusion::ScoreParams* FusionParams::_internal_mutable_score_params() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.score_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::v2x::ft::fusion::ScoreParams>(GetArenaForAllocation());
    _impl_.score_params_ = p;
  }
  return _impl_.score_params_;
}
inline ::apollo::v2x::ft::fusion::ScoreParams* FusionParams::mutable_score_params() {
  ::apollo::v2x::ft::fusion::ScoreParams* _msg = _internal_mutable_score_params();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.ft.fusion.FusionParams.score_params)
  return _msg;
}
inline void FusionParams::set_allocated_score_params(::apollo::v2x::ft::fusion::ScoreParams* score_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.score_params_;
  }
  if (score_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(score_params);
    if (message_arena != submessage_arena) {
      score_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.score_params_ = score_params;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.ft.fusion.FusionParams.score_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace ft
}  // namespace v2x
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::v2x::ft::fusion::ConfidenceLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::ft::fusion::ConfidenceLevel>() {
  return ::apollo::v2x::ft::fusion::ConfidenceLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto
