// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light_policy.proto

#include "modules/v2x/proto/v2x_traffic_light_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace v2x {
PROTOBUF_CONSTEXPR Position2D::Position2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct Position2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Position2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Position2DDefaultTypeInternal() {}
  union {
    Position2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Position2DDefaultTypeInternal _Position2D_default_instance_;
PROTOBUF_CONSTEXPR Connection::Connection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allow_driving_behavior_)*/0
  , /*decltype(_impl_.phase_id_)*/0} {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_offset_)*/{}
  , /*decltype(_impl_.connections_)*/{}
  , /*decltype(_impl_.lane_id_)*/0} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
PROTOBUF_CONSTEXPR Road::Road(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.points_)*/nullptr
  , /*decltype(_impl_.upstream_node_id_)*/0} {}
struct RoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadDefaultTypeInternal _Road_default_instance_;
PROTOBUF_CONSTEXPR Intersection::Intersection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roads_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct IntersectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionDefaultTypeInternal() {}
  union {
    Intersection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionDefaultTypeInternal _Intersection_default_instance_;
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.intersections_)*/{}
  , /*decltype(_impl_.time_stamp_)*/0
  , /*decltype(_impl_.msg_cnt_)*/0} {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
PROTOBUF_CONSTEXPR Phase::Phase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.color_remaining_time_s_)*/0} {}
struct PhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhaseDefaultTypeInternal() {}
  union {
    Phase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhaseDefaultTypeInternal _Phase_default_instance_;
PROTOBUF_CONSTEXPR IntersectionState::IntersectionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.phases_)*/{}
  , /*decltype(_impl_.intersection_id_)*/0
  , /*decltype(_impl_.moy_)*/0
  , /*decltype(_impl_.time_stamp_dsecond_)*/0} {}
struct IntersectionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntersectionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntersectionStateDefaultTypeInternal() {}
  union {
    IntersectionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntersectionStateDefaultTypeInternal _IntersectionState_default_instance_;
PROTOBUF_CONSTEXPR Spat::Spat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.intersections_)*/{}
  , /*decltype(_impl_.time_stamp_)*/0
  , /*decltype(_impl_.msg_cnt_)*/0} {}
struct SpatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatDefaultTypeInternal() {}
  union {
    Spat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatDefaultTypeInternal _Spat_default_instance_;
PROTOBUF_CONSTEXPR PolicyData::PolicyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_)*/nullptr
  , /*decltype(_impl_.spat_)*/nullptr} {}
struct PolicyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyDataDefaultTypeInternal() {}
  union {
    PolicyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyDataDefaultTypeInternal _PolicyData_default_instance_;
}  // namespace v2x
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto = nullptr;

const uint32_t TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _impl_.allow_driving_behavior_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _impl_.phase_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _impl_.position_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _impl_.connections_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _impl_.upstream_node_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _impl_.lanes_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _impl_.roads_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _impl_.msg_cnt_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _impl_.intersections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _impl_.color_remaining_time_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _impl_.intersection_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _impl_.phases_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _impl_.moy_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _impl_.time_stamp_dsecond_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _impl_.msg_cnt_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _impl_.intersections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _impl_.spat_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::v2x::Position2D)},
  { 10, 18, -1, sizeof(::apollo::v2x::Connection)},
  { 20, 29, -1, sizeof(::apollo::v2x::Lane)},
  { 32, 41, -1, sizeof(::apollo::v2x::Road)},
  { 44, 53, -1, sizeof(::apollo::v2x::Intersection)},
  { 56, 65, -1, sizeof(::apollo::v2x::Map)},
  { 68, 77, -1, sizeof(::apollo::v2x::Phase)},
  { 80, 90, -1, sizeof(::apollo::v2x::IntersectionState)},
  { 94, 103, -1, sizeof(::apollo::v2x::Spat)},
  { 106, 114, -1, sizeof(::apollo::v2x::PolicyData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::v2x::_Position2D_default_instance_._instance,
  &::apollo::v2x::_Connection_default_instance_._instance,
  &::apollo::v2x::_Lane_default_instance_._instance,
  &::apollo::v2x::_Road_default_instance_._instance,
  &::apollo::v2x::_Intersection_default_instance_._instance,
  &::apollo::v2x::_Map_default_instance_._instance,
  &::apollo::v2x::_Phase_default_instance_._instance,
  &::apollo::v2x::_IntersectionState_default_instance_._instance,
  &::apollo::v2x::_Spat_default_instance_._instance,
  &::apollo::v2x::_PolicyData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/v2x/proto/v2x_traffic_light_po"
  "licy.proto\022\napollo.v2x\"\"\n\nPosition2D\022\t\n\001"
  "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\222\001\n\nConnection\022;\n\026all"
  "ow_driving_behavior\030\001 \001(\0162\033.apollo.v2x.C"
  "onnection.Type\022\020\n\010phase_id\030\002 \001(\005\"5\n\004Type"
  "\022\014\n\010STRAIGHT\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\n\n\006U"
  "_TURN\020\003\"u\n\004Lane\022\017\n\007lane_id\030\001 \001(\005\022/\n\017posi"
  "tion_offset\030\002 \003(\0132\026.apollo.v2x.Position2"
  "D\022+\n\013connections\030\003 \003(\0132\026.apollo.v2x.Conn"
  "ection\"i\n\004Road\022\030\n\020upstream_node_id\030\001 \001(\005"
  "\022&\n\006points\030\002 \001(\0132\026.apollo.v2x.Position2D"
  "\022\037\n\005lanes\030\003 \003(\0132\020.apollo.v2x.Lane\"e\n\014Int"
  "ersection\022\n\n\002id\030\001 \001(\005\022(\n\010position\030\002 \001(\0132"
  "\026.apollo.v2x.Position2D\022\037\n\005roads\030\003 \003(\0132\020"
  ".apollo.v2x.Road\"[\n\003Map\022\022\n\ntime_stamp\030\001 "
  "\001(\001\022\017\n\007msg_cnt\030\002 \001(\005\022/\n\rintersections\030\003 "
  "\003(\0132\030.apollo.v2x.Intersection\"\255\001\n\005Phase\022"
  "\n\n\002id\030\001 \001(\005\022&\n\005color\030\002 \001(\0162\027.apollo.v2x."
  "Phase.Color\022\036\n\026color_remaining_time_s\030\003 "
  "\001(\005\"P\n\005Color\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YE"
  "LLOW\020\002\022\t\n\005GREEN\020\003\022\t\n\005BLACK\020\004\022\017\n\013FLASH_GR"
  "EEN\020\005\"x\n\021IntersectionState\022\027\n\017intersecti"
  "on_id\030\001 \001(\005\022!\n\006Phases\030\002 \003(\0132\021.apollo.v2x"
  ".Phase\022\013\n\003moy\030\003 \001(\005\022\032\n\022time_stamp_dsecon"
  "d\030\004 \001(\005\"a\n\004Spat\022\022\n\ntime_stamp\030\001 \001(\001\022\017\n\007m"
  "sg_cnt\030\002 \001(\005\0224\n\rintersections\030\003 \003(\0132\035.ap"
  "ollo.v2x.IntersectionState\"J\n\nPolicyData"
  "\022\034\n\003map\030\001 \001(\0132\017.apollo.v2x.Map\022\036\n\004spat\030\002"
  " \001(\0132\020.apollo.v2x.Spat"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto = {
    false, false, 1142, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto,
    "modules/v2x/proto/v2x_traffic_light_policy.proto",
    &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto::offsets,
    file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto,
    file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter() {
  return &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto);
namespace apollo {
namespace v2x {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connection_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[0];
}
bool Connection_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Connection_Type Connection::STRAIGHT;
constexpr Connection_Type Connection::LEFT;
constexpr Connection_Type Connection::RIGHT;
constexpr Connection_Type Connection::U_TURN;
constexpr Connection_Type Connection::Type_MIN;
constexpr Connection_Type Connection::Type_MAX;
constexpr int Connection::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[1];
}
bool Phase_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Phase_Color Phase::UNKNOWN;
constexpr Phase_Color Phase::RED;
constexpr Phase_Color Phase::YELLOW;
constexpr Phase_Color Phase::GREEN;
constexpr Phase_Color Phase::BLACK;
constexpr Phase_Color Phase::FLASH_GREEN;
constexpr Phase_Color Phase::Color_MIN;
constexpr Phase_Color Phase::Color_MAX;
constexpr int Phase::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Position2D::_Internal {
 public:
  using HasBits = decltype(std::declval<Position2D>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Position2D::Position2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Position2D)
}
Position2D::Position2D(const Position2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Position2D)
}

inline void Position2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Position2D::~Position2D() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Position2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position2D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Position2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Position2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Position2D)
  return target;
}

size_t Position2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Position2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position2D::GetClassData() const { return &_class_data_; }

void Position2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position2D *>(to)->MergeFrom(
      static_cast<const Position2D &>(from));
}


void Position2D::MergeFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position2D::CopyFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position2D::IsInitialized() const {
  return true;
}

void Position2D::InternalSwap(Position2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position2D, _impl_.y_)
      + sizeof(Position2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Position2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[0]);
}

// ===================================================================

class Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<Connection>()._impl_._has_bits_);
  static void set_has_allow_driving_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allow_driving_behavior_){}
    , decltype(_impl_.phase_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.allow_driving_behavior_, &from._impl_.allow_driving_behavior_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_id_) -
    reinterpret_cast<char*>(&_impl_.allow_driving_behavior_)) + sizeof(_impl_.phase_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Connection)
}

inline void Connection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allow_driving_behavior_){0}
    , decltype(_impl_.phase_id_){0}
  };
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Connection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Connection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.allow_driving_behavior_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.phase_id_) -
        reinterpret_cast<char*>(&_impl_.allow_driving_behavior_)) + sizeof(_impl_.phase_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::Connection_Type_IsValid(val))) {
            _internal_set_allow_driving_behavior(static_cast<::apollo::v2x::Connection_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_phase_id(&has_bits);
          _impl_.phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_allow_driving_behavior(), target);
  }

  // optional int32 phase_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_allow_driving_behavior());
    }

    // optional int32 phase_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }

void Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Connection *>(to)->MergeFrom(
      static_cast<const Connection &>(from));
}


void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.allow_driving_behavior_ = from._impl_.allow_driving_behavior_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phase_id_ = from._impl_.phase_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, _impl_.phase_id_)
      + sizeof(Connection::_impl_.phase_id_)
      - PROTOBUF_FIELD_OFFSET(Connection, _impl_.allow_driving_behavior_)>(
          reinterpret_cast<char*>(&_impl_.allow_driving_behavior_),
          reinterpret_cast<char*>(&other->_impl_.allow_driving_behavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[1]);
}

// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._impl_._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_offset_){from._impl_.position_offset_}
    , decltype(_impl_.connections_){from._impl_.connections_}
    , decltype(_impl_.lane_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_ = from._impl_.lane_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_offset_){arena}
    , decltype(_impl_.connections_){arena}
    , decltype(_impl_.lane_id_){0}
  };
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_offset_.~RepeatedPtrField();
  _impl_.connections_.~RepeatedPtrField();
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_offset_.Clear();
  _impl_.connections_.Clear();
  _impl_.lane_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lane_id(&has_bits);
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Position2D position_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position_offset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Connection connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // repeated .apollo.v2x.Position2D position_offset = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_position_offset_size()); i < n; i++) {
    const auto& repfield = this->_internal_position_offset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.v2x.Connection connections = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connections_size()); i < n; i++) {
    const auto& repfield = this->_internal_connections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Position2D position_offset = 2;
  total_size += 1UL * this->_internal_position_offset_size();
  for (const auto& msg : this->_impl_.position_offset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.v2x.Connection connections = 3;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->_impl_.connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 lane_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }

void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane *>(to)->MergeFrom(
      static_cast<const Lane &>(from));
}


void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.position_offset_.MergeFrom(from._impl_.position_offset_);
  _impl_.connections_.MergeFrom(from._impl_.connections_);
  if (from._internal_has_lane_id()) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.position_offset_.InternalSwap(&other->_impl_.position_offset_);
  _impl_.connections_.InternalSwap(&other->_impl_.connections_);
  swap(_impl_.lane_id_, other->_impl_.lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[2]);
}

// ===================================================================

class Road::_Internal {
 public:
  using HasBits = decltype(std::declval<Road>()._impl_._has_bits_);
  static void set_has_upstream_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Position2D& points(const Road* msg);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::v2x::Position2D&
Road::_Internal::points(const Road* msg) {
  return *msg->_impl_.points_;
}
Road::Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Road)
}
Road::Road(const Road& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.upstream_node_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    _impl_.points_ = new ::apollo::v2x::Position2D(*from._impl_.points_);
  }
  _impl_.upstream_node_id_ = from._impl_.upstream_node_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Road)
}

inline void Road::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lanes_){arena}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.upstream_node_id_){0}
  };
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Road)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lanes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.points_;
}

void Road::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Road)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lanes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.points_ != nullptr);
    _impl_.points_->Clear();
  }
  _impl_.upstream_node_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Road::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 upstream_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upstream_node_id(&has_bits);
          _impl_.upstream_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Position2D points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Lane lanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Road::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Road)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 upstream_node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_upstream_node_id(), target);
  }

  // optional .apollo.v2x.Position2D points = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::points(this),
        _Internal::points(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.v2x.Lane lanes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Road)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Lane lanes = 3;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Position2D points = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.points_);
    }

    // optional int32 upstream_node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upstream_node_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Road::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Road::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Road::GetClassData() const { return &_class_data_; }

void Road::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Road *>(to)->MergeFrom(
      static_cast<const Road &>(from));
}


void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Road)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lanes_.MergeFrom(from._impl_.lanes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_points()->::apollo::v2x::Position2D::MergeFrom(from._internal_points());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.upstream_node_id_ = from._impl_.upstream_node_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::InternalSwap(Road* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, _impl_.upstream_node_id_)
      + sizeof(Road::_impl_.upstream_node_id_)
      - PROTOBUF_FIELD_OFFSET(Road, _impl_.points_)>(
          reinterpret_cast<char*>(&_impl_.points_),
          reinterpret_cast<char*>(&other->_impl_.points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Road::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[3]);
}

// ===================================================================

class Intersection::_Internal {
 public:
  using HasBits = decltype(std::declval<Intersection>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Position2D& position(const Intersection* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::v2x::Position2D&
Intersection::_Internal::position(const Intersection* msg) {
  return *msg->_impl_.position_;
}
Intersection::Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Intersection)
}
Intersection::Intersection(const Intersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roads_){from._impl_.roads_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::v2x::Position2D(*from._impl_.position_);
  }
  _impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Intersection)
}

inline void Intersection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roads_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

Intersection::~Intersection() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Intersection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Intersection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roads_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Intersection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Intersection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roads_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intersection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Position2D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Road roads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Intersection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Intersection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.v2x.Position2D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.v2x.Road roads = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roads_size()); i < n; i++) {
    const auto& repfield = this->_internal_roads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Intersection)
  return target;
}

size_t Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Intersection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Road roads = 3;
  total_size += 1UL * this->_internal_roads_size();
  for (const auto& msg : this->_impl_.roads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Position2D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Intersection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Intersection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Intersection::GetClassData() const { return &_class_data_; }

void Intersection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Intersection *>(to)->MergeFrom(
      static_cast<const Intersection &>(from));
}


void Intersection::MergeFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.roads_.MergeFrom(from._impl_.roads_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::v2x::Position2D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_ = from._impl_.id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Intersection::CopyFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersection::IsInitialized() const {
  return true;
}

void Intersection::InternalSwap(Intersection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.roads_.InternalSwap(&other->_impl_.roads_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Intersection, _impl_.id_)
      + sizeof(Intersection::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Intersection, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Intersection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[4]);
}

// ===================================================================

class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._impl_._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intersections_){from._impl_.intersections_}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.msg_cnt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_stamp_, &from._impl_.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_cnt_) -
    reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Map)
}

inline void Map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intersections_){arena}
    , decltype(_impl_.time_stamp_){0}
    , decltype(_impl_.msg_cnt_){0}
  };
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intersections_.~RepeatedPtrField();
}

void Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intersections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msg_cnt_) -
        reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.msg_cnt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_time_stamp(&has_bits);
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 msg_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_cnt(&has_bits);
          _impl_.msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Intersection intersections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_stamp(), target);
  }

  // optional int32 msg_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_cnt(), target);
  }

  // repeated .apollo.v2x.Intersection intersections = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intersections_size()); i < n; i++) {
    const auto& repfield = this->_internal_intersections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Intersection intersections = 3;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->_impl_.intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 msg_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_cnt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }

void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Map *>(to)->MergeFrom(
      static_cast<const Map &>(from));
}


void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Map)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.intersections_.MergeFrom(from._impl_.intersections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.time_stamp_ = from._impl_.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msg_cnt_ = from._impl_.msg_cnt_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intersections_.InternalSwap(&other->_impl_.intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, _impl_.msg_cnt_)
      + sizeof(Map::_impl_.msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(Map, _impl_.time_stamp_)>(
          reinterpret_cast<char*>(&_impl_.time_stamp_),
          reinterpret_cast<char*>(&other->_impl_.time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[5]);
}

// ===================================================================

class Phase::_Internal {
 public:
  using HasBits = decltype(std::declval<Phase>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Phase::Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Phase)
}
Phase::Phase(const Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.color_remaining_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_remaining_time_s_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_remaining_time_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Phase)
}

inline void Phase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.color_remaining_time_s_){0}
  };
}

Phase::~Phase() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Phase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Phase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Phase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.color_remaining_time_s_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_remaining_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Phase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Phase.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::Phase_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::v2x::Phase_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 color_remaining_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_color_remaining_time_s(&has_bits);
          _impl_.color_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Phase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Phase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.v2x.Phase.Color color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // optional int32 color_remaining_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_color_remaining_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Phase)
  return target;
}

size_t Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Phase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.v2x.Phase.Color color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional int32 color_remaining_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color_remaining_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Phase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Phase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Phase::GetClassData() const { return &_class_data_; }

void Phase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Phase *>(to)->MergeFrom(
      static_cast<const Phase &>(from));
}


void Phase::MergeFrom(const Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.color_remaining_time_s_ = from._impl_.color_remaining_time_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Phase::CopyFrom(const Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phase::IsInitialized() const {
  return true;
}

void Phase::InternalSwap(Phase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Phase, _impl_.color_remaining_time_s_)
      + sizeof(Phase::_impl_.color_remaining_time_s_)
      - PROTOBUF_FIELD_OFFSET(Phase, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Phase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[6]);
}

// ===================================================================

class IntersectionState::_Internal {
 public:
  using HasBits = decltype(std::declval<IntersectionState>()._impl_._has_bits_);
  static void set_has_intersection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_stamp_dsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IntersectionState::IntersectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.IntersectionState)
}
IntersectionState::IntersectionState(const IntersectionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phases_){from._impl_.phases_}
    , decltype(_impl_.intersection_id_){}
    , decltype(_impl_.moy_){}
    , decltype(_impl_.time_stamp_dsecond_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.intersection_id_, &from._impl_.intersection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_dsecond_) -
    reinterpret_cast<char*>(&_impl_.intersection_id_)) + sizeof(_impl_.time_stamp_dsecond_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.IntersectionState)
}

inline void IntersectionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phases_){arena}
    , decltype(_impl_.intersection_id_){0}
    , decltype(_impl_.moy_){0}
    , decltype(_impl_.time_stamp_dsecond_){0}
  };
}

IntersectionState::~IntersectionState() {
  // @@protoc_insertion_point(destructor:apollo.v2x.IntersectionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntersectionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phases_.~RepeatedPtrField();
}

void IntersectionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntersectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.IntersectionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phases_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.intersection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_stamp_dsecond_) -
        reinterpret_cast<char*>(&_impl_.intersection_id_)) + sizeof(_impl_.time_stamp_dsecond_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 intersection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_intersection_id(&has_bits);
          _impl_.intersection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Phase Phases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 moy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_moy(&has_bits);
          _impl_.moy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_stamp_dsecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_stamp_dsecond(&has_bits);
          _impl_.time_stamp_dsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntersectionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.IntersectionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 intersection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_intersection_id(), target);
  }

  // repeated .apollo.v2x.Phase Phases = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phases_size()); i < n; i++) {
    const auto& repfield = this->_internal_phases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 moy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_moy(), target);
  }

  // optional int32 time_stamp_dsecond = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_stamp_dsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.IntersectionState)
  return target;
}

size_t IntersectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.IntersectionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Phase Phases = 2;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->_impl_.phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 intersection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intersection_id());
    }

    // optional int32 moy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moy());
    }

    // optional int32 time_stamp_dsecond = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_stamp_dsecond());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntersectionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntersectionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntersectionState::GetClassData() const { return &_class_data_; }

void IntersectionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntersectionState *>(to)->MergeFrom(
      static_cast<const IntersectionState &>(from));
}


void IntersectionState::MergeFrom(const IntersectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.IntersectionState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.phases_.MergeFrom(from._impl_.phases_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.intersection_id_ = from._impl_.intersection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.moy_ = from._impl_.moy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.time_stamp_dsecond_ = from._impl_.time_stamp_dsecond_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntersectionState::CopyFrom(const IntersectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionState::IsInitialized() const {
  return true;
}

void IntersectionState::InternalSwap(IntersectionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.phases_.InternalSwap(&other->_impl_.phases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntersectionState, _impl_.time_stamp_dsecond_)
      + sizeof(IntersectionState::_impl_.time_stamp_dsecond_)
      - PROTOBUF_FIELD_OFFSET(IntersectionState, _impl_.intersection_id_)>(
          reinterpret_cast<char*>(&_impl_.intersection_id_),
          reinterpret_cast<char*>(&other->_impl_.intersection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[7]);
}

// ===================================================================

class Spat::_Internal {
 public:
  using HasBits = decltype(std::declval<Spat>()._impl_._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Spat::Spat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Spat)
}
Spat::Spat(const Spat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intersections_){from._impl_.intersections_}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.msg_cnt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_stamp_, &from._impl_.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_cnt_) -
    reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Spat)
}

inline void Spat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.intersections_){arena}
    , decltype(_impl_.time_stamp_){0}
    , decltype(_impl_.msg_cnt_){0}
  };
}

Spat::~Spat() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Spat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Spat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intersections_.~RepeatedPtrField();
}

void Spat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Spat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Spat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intersections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msg_cnt_) -
        reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.msg_cnt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_time_stamp(&has_bits);
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 msg_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_cnt(&has_bits);
          _impl_.msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.IntersectionState intersections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Spat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Spat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_stamp(), target);
  }

  // optional int32 msg_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_cnt(), target);
  }

  // repeated .apollo.v2x.IntersectionState intersections = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intersections_size()); i < n; i++) {
    const auto& repfield = this->_internal_intersections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Spat)
  return target;
}

size_t Spat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Spat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.IntersectionState intersections = 3;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->_impl_.intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 msg_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_cnt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Spat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Spat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Spat::GetClassData() const { return &_class_data_; }

void Spat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Spat *>(to)->MergeFrom(
      static_cast<const Spat &>(from));
}


void Spat::MergeFrom(const Spat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Spat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.intersections_.MergeFrom(from._impl_.intersections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.time_stamp_ = from._impl_.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msg_cnt_ = from._impl_.msg_cnt_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Spat::CopyFrom(const Spat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Spat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spat::IsInitialized() const {
  return true;
}

void Spat::InternalSwap(Spat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intersections_.InternalSwap(&other->_impl_.intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Spat, _impl_.msg_cnt_)
      + sizeof(Spat::_impl_.msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(Spat, _impl_.time_stamp_)>(
          reinterpret_cast<char*>(&_impl_.time_stamp_),
          reinterpret_cast<char*>(&other->_impl_.time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Spat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[8]);
}

// ===================================================================

class PolicyData::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyData>()._impl_._has_bits_);
  static const ::apollo::v2x::Map& map(const PolicyData* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::Spat& spat(const PolicyData* msg);
  static void set_has_spat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::v2x::Map&
PolicyData::_Internal::map(const PolicyData* msg) {
  return *msg->_impl_.map_;
}
const ::apollo::v2x::Spat&
PolicyData::_Internal::spat(const PolicyData* msg) {
  return *msg->_impl_.spat_;
}
PolicyData::PolicyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.PolicyData)
}
PolicyData::PolicyData(const PolicyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.spat_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map()) {
    _impl_.map_ = new ::apollo::v2x::Map(*from._impl_.map_);
  }
  if (from._internal_has_spat()) {
    _impl_.spat_ = new ::apollo::v2x::Spat(*from._impl_.spat_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.PolicyData)
}

inline void PolicyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.spat_){nullptr}
  };
}

PolicyData::~PolicyData() {
  // @@protoc_insertion_point(destructor:apollo.v2x.PolicyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolicyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.map_;
  if (this != internal_default_instance()) delete _impl_.spat_;
}

void PolicyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolicyData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.PolicyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.map_ != nullptr);
      _impl_.map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spat_ != nullptr);
      _impl_.spat_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.v2x.Map map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.Spat spat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.PolicyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.v2x.Map map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.v2x.Spat spat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spat(this),
        _Internal::spat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.PolicyData)
  return target;
}

size_t PolicyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.PolicyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Map map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.map_);
    }

    // optional .apollo.v2x.Spat spat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spat_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyData::GetClassData() const { return &_class_data_; }

void PolicyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyData *>(to)->MergeFrom(
      static_cast<const PolicyData &>(from));
}


void PolicyData::MergeFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.PolicyData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_map()->::apollo::v2x::Map::MergeFrom(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spat()->::apollo::v2x::Spat::MergeFrom(from._internal_spat());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyData::CopyFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.PolicyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyData::IsInitialized() const {
  return true;
}

void PolicyData::InternalSwap(PolicyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyData, _impl_.spat_)
      + sizeof(PolicyData::_impl_.spat_)
      - PROTOBUF_FIELD_OFFSET(PolicyData, _impl_.map_)>(
          reinterpret_cast<char*>(&_impl_.map_),
          reinterpret_cast<char*>(&other->_impl_.map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::Position2D*
Arena::CreateMaybeMessage< ::apollo::v2x::Position2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Position2D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Connection*
Arena::CreateMaybeMessage< ::apollo::v2x::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Lane*
Arena::CreateMaybeMessage< ::apollo::v2x::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Road*
Arena::CreateMaybeMessage< ::apollo::v2x::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Road >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Intersection*
Arena::CreateMaybeMessage< ::apollo::v2x::Intersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Intersection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Map*
Arena::CreateMaybeMessage< ::apollo::v2x::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Phase*
Arena::CreateMaybeMessage< ::apollo::v2x::Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::IntersectionState*
Arena::CreateMaybeMessage< ::apollo::v2x::IntersectionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::IntersectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Spat*
Arena::CreateMaybeMessage< ::apollo::v2x::Spat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Spat >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::PolicyData*
Arena::CreateMaybeMessage< ::apollo::v2x::PolicyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::PolicyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
