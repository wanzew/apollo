// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/gnss_pnt_result.proto

#include "modules/localization/proto/gnss_pnt_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace localization {
PROTOBUF_CONSTEXPR SatDirCosine::SatDirCosine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sat_prn_)*/0u
  , /*decltype(_impl_.sat_sys_)*/0u
  , /*decltype(_impl_.cosine_x_)*/0
  , /*decltype(_impl_.cosine_y_)*/0
  , /*decltype(_impl_.cosine_z_)*/0} {}
struct SatDirCosineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatDirCosineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatDirCosineDefaultTypeInternal() {}
  union {
    SatDirCosine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatDirCosineDefaultTypeInternal _SatDirCosine_default_instance_;
PROTOBUF_CONSTEXPR GnssPntResult::GnssPntResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sat_dir_cosine_)*/{}
  , /*decltype(_impl_.receiver_id_)*/0u
  , /*decltype(_impl_.gnss_week_)*/0u
  , /*decltype(_impl_.gnss_second_s_)*/0
  , /*decltype(_impl_.pos_x_m_)*/0
  , /*decltype(_impl_.pos_y_m_)*/0
  , /*decltype(_impl_.pos_z_m_)*/0
  , /*decltype(_impl_.std_pos_x_m_)*/0
  , /*decltype(_impl_.std_pos_y_m_)*/0
  , /*decltype(_impl_.std_pos_z_m_)*/0
  , /*decltype(_impl_.pnt_type_)*/0
  , /*decltype(_impl_.sovled_sat_num_)*/0u
  , /*decltype(_impl_.vel_x_m_)*/0
  , /*decltype(_impl_.vel_y_m_)*/0
  , /*decltype(_impl_.vel_z_m_)*/0
  , /*decltype(_impl_.std_vel_x_m_)*/0
  , /*decltype(_impl_.std_vel_y_m_)*/0
  , /*decltype(_impl_.std_vel_z_m_)*/0
  , /*decltype(_impl_.pdop_)*/0
  , /*decltype(_impl_.hdop_)*/0
  , /*decltype(_impl_.vdop_)*/0
  , /*decltype(_impl_.time_type_)*/1} {}
struct GnssPntResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssPntResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssPntResultDefaultTypeInternal() {}
  union {
    GnssPntResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssPntResultDefaultTypeInternal _GnssPntResult_default_instance_;
}  // namespace localization
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto = nullptr;

const uint32_t TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_.sat_prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_.sat_sys_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_.cosine_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_.cosine_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _impl_.cosine_z_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.time_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.gnss_week_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.gnss_second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.pnt_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.pos_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.pos_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.pos_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_pos_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_pos_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_pos_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.vel_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.vel_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.vel_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_vel_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_vel_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.std_vel_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.sovled_sat_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.sat_dir_cosine_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _impl_.vdop_),
  0,
  20,
  1,
  2,
  9,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  13,
  14,
  15,
  16,
  10,
  ~0u,
  17,
  18,
  19,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::localization::SatDirCosine)},
  { 16, 44, -1, sizeof(::apollo::localization::GnssPntResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::localization::_SatDirCosine_default_instance_._instance,
  &::apollo::localization::_GnssPntResult_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/localization/proto/gnss_pnt_re"
  "sult.proto\022\023apollo.localization\0325modules"
  "/drivers/gnss/proto/gnss_raw_observation"
  ".proto\"f\n\014SatDirCosine\022\017\n\007sat_prn\030\001 \001(\r\022"
  "\017\n\007sat_sys\030\002 \001(\r\022\020\n\010cosine_x\030\003 \001(\001\022\020\n\010co"
  "sine_y\030\004 \001(\001\022\020\n\010cosine_z\030\005 \001(\001\"\254\004\n\rGnssP"
  "ntResult\022\023\n\013receiver_id\030\001 \001(\r\022>\n\ttime_ty"
  "pe\030\002 \001(\0162!.apollo.drivers.gnss.GnssTimeT"
  "ype:\010GPS_TIME\022\021\n\tgnss_week\030\003 \001(\r\022\025\n\rgnss"
  "_second_s\030\004 \001(\001\022;\n\010pnt_type\030\005 \001(\0162\034.apol"
  "lo.localization.PntType:\013PNT_INVALID\022\017\n\007"
  "pos_x_m\030\006 \001(\001\022\017\n\007pos_y_m\030\007 \001(\001\022\017\n\007pos_z_"
  "m\030\010 \001(\001\022\023\n\013std_pos_x_m\030\t \001(\001\022\023\n\013std_pos_"
  "y_m\030\n \001(\001\022\023\n\013std_pos_z_m\030\013 \001(\001\022\017\n\007vel_x_"
  "m\030\014 \001(\001\022\017\n\007vel_y_m\030\r \001(\001\022\017\n\007vel_z_m\030\016 \001("
  "\001\022\023\n\013std_vel_x_m\030\017 \001(\001\022\023\n\013std_vel_y_m\030\020 "
  "\001(\001\022\023\n\013std_vel_z_m\030\021 \001(\001\022\026\n\016sovled_sat_n"
  "um\030\022 \001(\r\0229\n\016sat_dir_cosine\030\023 \003(\0132!.apoll"
  "o.localization.SatDirCosine\022\014\n\004pdop\030\024 \001("
  "\001\022\014\n\004hdop\030\025 \001(\001\022\014\n\004vdop\030\026 \001(\001*r\n\007PntType"
  "\022\017\n\013PNT_INVALID\020\000\022\013\n\007PNT_SPP\020\001\022\020\n\014PNT_PH"
  "ASE_TD\020\002\022\021\n\rPNT_CODE_DIFF\020\003\022\021\n\rPNT_RTK_F"
  "LOAT\020\004\022\021\n\rPNT_RTK_FIXED\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto = {
    false, false, 905, descriptor_table_protodef_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto,
    "modules/localization/proto/gnss_pnt_result.proto",
    &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto::offsets,
    file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto, file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto,
    file_level_service_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_getter() {
  return &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto(&descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto);
namespace apollo {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PntType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto);
  return file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[0];
}
bool PntType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SatDirCosine::_Internal {
 public:
  using HasBits = decltype(std::declval<SatDirCosine>()._impl_._has_bits_);
  static void set_has_sat_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sat_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cosine_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cosine_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cosine_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SatDirCosine::SatDirCosine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.SatDirCosine)
}
SatDirCosine::SatDirCosine(const SatDirCosine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_prn_){}
    , decltype(_impl_.sat_sys_){}
    , decltype(_impl_.cosine_x_){}
    , decltype(_impl_.cosine_y_){}
    , decltype(_impl_.cosine_z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sat_prn_, &from._impl_.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cosine_z_) -
    reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.cosine_z_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.SatDirCosine)
}

inline void SatDirCosine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_prn_){0u}
    , decltype(_impl_.sat_sys_){0u}
    , decltype(_impl_.cosine_x_){0}
    , decltype(_impl_.cosine_y_){0}
    , decltype(_impl_.cosine_z_){0}
  };
}

SatDirCosine::~SatDirCosine() {
  // @@protoc_insertion_point(destructor:apollo.localization.SatDirCosine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SatDirCosine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SatDirCosine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SatDirCosine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.SatDirCosine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cosine_z_) -
        reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.cosine_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SatDirCosine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sat_prn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sat_prn(&has_bits);
          _impl_.sat_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sat_sys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sat_sys(&has_bits);
          _impl_.sat_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cosine_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_cosine_x(&has_bits);
          _impl_.cosine_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cosine_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_cosine_y(&has_bits);
          _impl_.cosine_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cosine_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_cosine_z(&has_bits);
          _impl_.cosine_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SatDirCosine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.SatDirCosine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sat_prn(), target);
  }

  // optional uint32 sat_sys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sat_sys(), target);
  }

  // optional double cosine_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cosine_x(), target);
  }

  // optional double cosine_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_cosine_y(), target);
  }

  // optional double cosine_z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_cosine_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.SatDirCosine)
  return target;
}

size_t SatDirCosine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.SatDirCosine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 sat_prn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sat_prn());
    }

    // optional uint32 sat_sys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sat_sys());
    }

    // optional double cosine_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double cosine_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double cosine_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SatDirCosine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SatDirCosine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SatDirCosine::GetClassData() const { return &_class_data_; }

void SatDirCosine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SatDirCosine *>(to)->MergeFrom(
      static_cast<const SatDirCosine &>(from));
}


void SatDirCosine::MergeFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.SatDirCosine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sat_prn_ = from._impl_.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sat_sys_ = from._impl_.sat_sys_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cosine_x_ = from._impl_.cosine_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.cosine_y_ = from._impl_.cosine_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.cosine_z_ = from._impl_.cosine_z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SatDirCosine::CopyFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.SatDirCosine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatDirCosine::IsInitialized() const {
  return true;
}

void SatDirCosine::InternalSwap(SatDirCosine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatDirCosine, _impl_.cosine_z_)
      + sizeof(SatDirCosine::_impl_.cosine_z_)
      - PROTOBUF_FIELD_OFFSET(SatDirCosine, _impl_.sat_prn_)>(
          reinterpret_cast<char*>(&_impl_.sat_prn_),
          reinterpret_cast<char*>(&other->_impl_.sat_prn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SatDirCosine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[0]);
}

// ===================================================================

class GnssPntResult::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssPntResult>()._impl_._has_bits_);
  static void set_has_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gnss_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gnss_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pnt_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pos_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pos_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_pos_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_std_pos_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_std_pos_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vel_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vel_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vel_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_std_vel_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_std_vel_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_std_vel_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sovled_sat_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

GnssPntResult::GnssPntResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.GnssPntResult)
}
GnssPntResult::GnssPntResult(const GnssPntResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_dir_cosine_){from._impl_.sat_dir_cosine_}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.gnss_week_){}
    , decltype(_impl_.gnss_second_s_){}
    , decltype(_impl_.pos_x_m_){}
    , decltype(_impl_.pos_y_m_){}
    , decltype(_impl_.pos_z_m_){}
    , decltype(_impl_.std_pos_x_m_){}
    , decltype(_impl_.std_pos_y_m_){}
    , decltype(_impl_.std_pos_z_m_){}
    , decltype(_impl_.pnt_type_){}
    , decltype(_impl_.sovled_sat_num_){}
    , decltype(_impl_.vel_x_m_){}
    , decltype(_impl_.vel_y_m_){}
    , decltype(_impl_.vel_z_m_){}
    , decltype(_impl_.std_vel_x_m_){}
    , decltype(_impl_.std_vel_y_m_){}
    , decltype(_impl_.std_vel_z_m_){}
    , decltype(_impl_.pdop_){}
    , decltype(_impl_.hdop_){}
    , decltype(_impl_.vdop_){}
    , decltype(_impl_.time_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.receiver_id_, &from._impl_.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_type_) -
    reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.GnssPntResult)
}

inline void GnssPntResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_dir_cosine_){arena}
    , decltype(_impl_.receiver_id_){0u}
    , decltype(_impl_.gnss_week_){0u}
    , decltype(_impl_.gnss_second_s_){0}
    , decltype(_impl_.pos_x_m_){0}
    , decltype(_impl_.pos_y_m_){0}
    , decltype(_impl_.pos_z_m_){0}
    , decltype(_impl_.std_pos_x_m_){0}
    , decltype(_impl_.std_pos_y_m_){0}
    , decltype(_impl_.std_pos_z_m_){0}
    , decltype(_impl_.pnt_type_){0}
    , decltype(_impl_.sovled_sat_num_){0u}
    , decltype(_impl_.vel_x_m_){0}
    , decltype(_impl_.vel_y_m_){0}
    , decltype(_impl_.vel_z_m_){0}
    , decltype(_impl_.std_vel_x_m_){0}
    , decltype(_impl_.std_vel_y_m_){0}
    , decltype(_impl_.std_vel_z_m_){0}
    , decltype(_impl_.pdop_){0}
    , decltype(_impl_.hdop_){0}
    , decltype(_impl_.vdop_){0}
    , decltype(_impl_.time_type_){1}
  };
}

GnssPntResult::~GnssPntResult() {
  // @@protoc_insertion_point(destructor:apollo.localization.GnssPntResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssPntResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sat_dir_cosine_.~RepeatedPtrField();
}

void GnssPntResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssPntResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.GnssPntResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sat_dir_cosine_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.receiver_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.std_pos_y_m_) -
        reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.std_pos_y_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.std_pos_z_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.std_vel_y_m_) -
        reinterpret_cast<char*>(&_impl_.std_pos_z_m_)) + sizeof(_impl_.std_vel_y_m_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.std_vel_z_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vdop_) -
        reinterpret_cast<char*>(&_impl_.std_vel_z_m_)) + sizeof(_impl_.vdop_));
    _impl_.time_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssPntResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 receiver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_receiver_id(&has_bits);
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssTimeType_IsValid(val))) {
            _internal_set_time_type(static_cast<::apollo::drivers::gnss::GnssTimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gnss_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gnss_week(&has_bits);
          _impl_.gnss_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gnss_second_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_gnss_second_s(&has_bits);
          _impl_.gnss_second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::PntType_IsValid(val))) {
            _internal_set_pnt_type(static_cast<::apollo::localization::PntType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double pos_x_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_pos_x_m(&has_bits);
          _impl_.pos_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pos_y_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_pos_y_m(&has_bits);
          _impl_.pos_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pos_z_m = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_pos_z_m(&has_bits);
          _impl_.pos_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_pos_x_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_std_pos_x_m(&has_bits);
          _impl_.std_pos_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_pos_y_m = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_std_pos_y_m(&has_bits);
          _impl_.std_pos_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_pos_z_m = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_std_pos_z_m(&has_bits);
          _impl_.std_pos_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vel_x_m = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_vel_x_m(&has_bits);
          _impl_.vel_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vel_y_m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_vel_y_m(&has_bits);
          _impl_.vel_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vel_z_m = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_vel_z_m(&has_bits);
          _impl_.vel_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_vel_x_m = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_std_vel_x_m(&has_bits);
          _impl_.std_vel_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_vel_y_m = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_std_vel_y_m(&has_bits);
          _impl_.std_vel_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double std_vel_z_m = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_std_vel_z_m(&has_bits);
          _impl_.std_vel_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sovled_sat_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_sovled_sat_num(&has_bits);
          _impl_.sovled_sat_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sat_dir_cosine(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double pdop = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_pdop(&has_bits);
          _impl_.pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hdop = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_hdop(&has_bits);
          _impl_.hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vdop = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_vdop(&has_bits);
          _impl_.vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssPntResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.GnssPntResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_gnss_second_s(), target);
  }

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pnt_type(), target);
  }

  // optional double pos_x_m = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_pos_x_m(), target);
  }

  // optional double pos_y_m = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_pos_y_m(), target);
  }

  // optional double pos_z_m = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_pos_z_m(), target);
  }

  // optional double std_pos_x_m = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_std_pos_x_m(), target);
  }

  // optional double std_pos_y_m = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_std_pos_y_m(), target);
  }

  // optional double std_pos_z_m = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_std_pos_z_m(), target);
  }

  // optional double vel_x_m = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_vel_x_m(), target);
  }

  // optional double vel_y_m = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_vel_y_m(), target);
  }

  // optional double vel_z_m = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_vel_z_m(), target);
  }

  // optional double std_vel_x_m = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_std_vel_x_m(), target);
  }

  // optional double std_vel_y_m = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_std_vel_y_m(), target);
  }

  // optional double std_vel_z_m = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_std_vel_z_m(), target);
  }

  // optional uint32 sovled_sat_num = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sovled_sat_num(), target);
  }

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sat_dir_cosine_size()); i < n; i++) {
    const auto& repfield = this->_internal_sat_dir_cosine(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double pdop = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_pdop(), target);
  }

  // optional double hdop = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_hdop(), target);
  }

  // optional double vdop = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_vdop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.GnssPntResult)
  return target;
}

size_t GnssPntResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.GnssPntResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  total_size += 2UL * this->_internal_sat_dir_cosine_size();
  for (const auto& msg : this->_impl_.sat_dir_cosine_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 receiver_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_receiver_id());
    }

    // optional uint32 gnss_week = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pos_x_m = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double pos_y_m = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double pos_z_m = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double std_pos_x_m = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double std_pos_y_m = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double std_pos_z_m = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pnt_type());
    }

    // optional uint32 sovled_sat_num = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_sovled_sat_num());
    }

    // optional double vel_x_m = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double vel_y_m = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double vel_z_m = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double std_vel_x_m = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double std_vel_y_m = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double std_vel_z_m = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double pdop = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double hdop = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_time_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssPntResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GnssPntResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssPntResult::GetClassData() const { return &_class_data_; }

void GnssPntResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GnssPntResult *>(to)->MergeFrom(
      static_cast<const GnssPntResult &>(from));
}


void GnssPntResult::MergeFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.GnssPntResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sat_dir_cosine_.MergeFrom(from._impl_.sat_dir_cosine_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.receiver_id_ = from._impl_.receiver_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gnss_week_ = from._impl_.gnss_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gnss_second_s_ = from._impl_.gnss_second_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pos_x_m_ = from._impl_.pos_x_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pos_y_m_ = from._impl_.pos_y_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pos_z_m_ = from._impl_.pos_z_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.std_pos_x_m_ = from._impl_.std_pos_x_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.std_pos_y_m_ = from._impl_.std_pos_y_m_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.std_pos_z_m_ = from._impl_.std_pos_z_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.pnt_type_ = from._impl_.pnt_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.sovled_sat_num_ = from._impl_.sovled_sat_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.vel_x_m_ = from._impl_.vel_x_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.vel_y_m_ = from._impl_.vel_y_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.vel_z_m_ = from._impl_.vel_z_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.std_vel_x_m_ = from._impl_.std_vel_x_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.std_vel_y_m_ = from._impl_.std_vel_y_m_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.std_vel_z_m_ = from._impl_.std_vel_z_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.pdop_ = from._impl_.pdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.hdop_ = from._impl_.hdop_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.vdop_ = from._impl_.vdop_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.time_type_ = from._impl_.time_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssPntResult::CopyFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.GnssPntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssPntResult::IsInitialized() const {
  return true;
}

void GnssPntResult::InternalSwap(GnssPntResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sat_dir_cosine_.InternalSwap(&other->_impl_.sat_dir_cosine_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssPntResult, _impl_.vdop_)
      + sizeof(GnssPntResult::_impl_.vdop_)
      - PROTOBUF_FIELD_OFFSET(GnssPntResult, _impl_.receiver_id_)>(
          reinterpret_cast<char*>(&_impl_.receiver_id_),
          reinterpret_cast<char*>(&other->_impl_.receiver_id_));
  swap(_impl_.time_type_, other->_impl_.time_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssPntResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::SatDirCosine*
Arena::CreateMaybeMessage< ::apollo::localization::SatDirCosine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::SatDirCosine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::localization::GnssPntResult*
Arena::CreateMaybeMessage< ::apollo::localization::GnssPntResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::GnssPntResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
