// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/measure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fmeasure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fmeasure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2fmeasure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2flocalization_2fproto_2fmeasure_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto;
namespace apollo {
namespace localization {
class IntegMeasure;
struct IntegMeasureDefaultTypeInternal;
extern IntegMeasureDefaultTypeInternal _IntegMeasure_default_instance_;
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::localization::IntegMeasure* Arena::CreateMaybeMessage<::apollo::localization::IntegMeasure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace localization {

enum IntegMeasure_MeasureType : int {
  IntegMeasure_MeasureType_GNSS_POS_ONLY = 0,
  IntegMeasure_MeasureType_GNSS_POS_VEL = 1,
  IntegMeasure_MeasureType_GNSS_POS_XY = 2,
  IntegMeasure_MeasureType_GNSS_VEL_ONLY = 3,
  IntegMeasure_MeasureType_POINT_CLOUD_POS = 4,
  IntegMeasure_MeasureType_ODOMETER_VEL_ONLY = 5,
  IntegMeasure_MeasureType_VEHICLE_CONSTRAINT = 6
};
bool IntegMeasure_MeasureType_IsValid(int value);
constexpr IntegMeasure_MeasureType IntegMeasure_MeasureType_MeasureType_MIN = IntegMeasure_MeasureType_GNSS_POS_ONLY;
constexpr IntegMeasure_MeasureType IntegMeasure_MeasureType_MeasureType_MAX = IntegMeasure_MeasureType_VEHICLE_CONSTRAINT;
constexpr int IntegMeasure_MeasureType_MeasureType_ARRAYSIZE = IntegMeasure_MeasureType_MeasureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_MeasureType_descriptor();
template<typename T>
inline const std::string& IntegMeasure_MeasureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegMeasure_MeasureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegMeasure_MeasureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegMeasure_MeasureType_descriptor(), enum_t_value);
}
inline bool IntegMeasure_MeasureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegMeasure_MeasureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegMeasure_MeasureType>(
    IntegMeasure_MeasureType_descriptor(), name, value);
}
enum IntegMeasure_FrameType : int {
  IntegMeasure_FrameType_ENU = 0,
  IntegMeasure_FrameType_ECEF = 1,
  IntegMeasure_FrameType_UTM = 2,
  IntegMeasure_FrameType_ODOMETER = 3
};
bool IntegMeasure_FrameType_IsValid(int value);
constexpr IntegMeasure_FrameType IntegMeasure_FrameType_FrameType_MIN = IntegMeasure_FrameType_ENU;
constexpr IntegMeasure_FrameType IntegMeasure_FrameType_FrameType_MAX = IntegMeasure_FrameType_ODOMETER;
constexpr int IntegMeasure_FrameType_FrameType_ARRAYSIZE = IntegMeasure_FrameType_FrameType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_FrameType_descriptor();
template<typename T>
inline const std::string& IntegMeasure_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegMeasure_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegMeasure_FrameType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegMeasure_FrameType_descriptor(), enum_t_value);
}
inline bool IntegMeasure_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegMeasure_FrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegMeasure_FrameType>(
    IntegMeasure_FrameType_descriptor(), name, value);
}
// ===================================================================

class IntegMeasure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.localization.IntegMeasure) */ {
 public:
  inline IntegMeasure() : IntegMeasure(nullptr) {}
  ~IntegMeasure() override;
  explicit PROTOBUF_CONSTEXPR IntegMeasure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegMeasure(const IntegMeasure& from);
  IntegMeasure(IntegMeasure&& from) noexcept
    : IntegMeasure() {
    *this = ::std::move(from);
  }

  inline IntegMeasure& operator=(const IntegMeasure& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegMeasure& operator=(IntegMeasure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegMeasure& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegMeasure* internal_default_instance() {
    return reinterpret_cast<const IntegMeasure*>(
               &_IntegMeasure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntegMeasure& a, IntegMeasure& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegMeasure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegMeasure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegMeasure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntegMeasure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntegMeasure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntegMeasure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegMeasure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.localization.IntegMeasure";
  }
  protected:
  explicit IntegMeasure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IntegMeasure_MeasureType MeasureType;
  static constexpr MeasureType GNSS_POS_ONLY =
    IntegMeasure_MeasureType_GNSS_POS_ONLY;
  static constexpr MeasureType GNSS_POS_VEL =
    IntegMeasure_MeasureType_GNSS_POS_VEL;
  static constexpr MeasureType GNSS_POS_XY =
    IntegMeasure_MeasureType_GNSS_POS_XY;
  static constexpr MeasureType GNSS_VEL_ONLY =
    IntegMeasure_MeasureType_GNSS_VEL_ONLY;
  static constexpr MeasureType POINT_CLOUD_POS =
    IntegMeasure_MeasureType_POINT_CLOUD_POS;
  static constexpr MeasureType ODOMETER_VEL_ONLY =
    IntegMeasure_MeasureType_ODOMETER_VEL_ONLY;
  static constexpr MeasureType VEHICLE_CONSTRAINT =
    IntegMeasure_MeasureType_VEHICLE_CONSTRAINT;
  static inline bool MeasureType_IsValid(int value) {
    return IntegMeasure_MeasureType_IsValid(value);
  }
  static constexpr MeasureType MeasureType_MIN =
    IntegMeasure_MeasureType_MeasureType_MIN;
  static constexpr MeasureType MeasureType_MAX =
    IntegMeasure_MeasureType_MeasureType_MAX;
  static constexpr int MeasureType_ARRAYSIZE =
    IntegMeasure_MeasureType_MeasureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MeasureType_descriptor() {
    return IntegMeasure_MeasureType_descriptor();
  }
  template<typename T>
  static inline const std::string& MeasureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeasureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeasureType_Name.");
    return IntegMeasure_MeasureType_Name(enum_t_value);
  }
  static inline bool MeasureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MeasureType* value) {
    return IntegMeasure_MeasureType_Parse(name, value);
  }

  typedef IntegMeasure_FrameType FrameType;
  static constexpr FrameType ENU =
    IntegMeasure_FrameType_ENU;
  static constexpr FrameType ECEF =
    IntegMeasure_FrameType_ECEF;
  static constexpr FrameType UTM =
    IntegMeasure_FrameType_UTM;
  static constexpr FrameType ODOMETER =
    IntegMeasure_FrameType_ODOMETER;
  static inline bool FrameType_IsValid(int value) {
    return IntegMeasure_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    IntegMeasure_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    IntegMeasure_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    IntegMeasure_FrameType_FrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameType_descriptor() {
    return IntegMeasure_FrameType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return IntegMeasure_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameType* value) {
    return IntegMeasure_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureCovarFieldNumber = 10,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kMeasureTypeFieldNumber = 2,
    kFrameTypeFieldNumber = 3,
    kYawFieldNumber = 6,
    kZoneIdFieldNumber = 7,
    kIsHaveVarianceFieldNumber = 8,
    kIsGnssDoubleAntennaFieldNumber = 9,
  };
  // repeated double measure_covar = 10 [packed = true];
  int measure_covar_size() const;
  private:
  int _internal_measure_covar_size() const;
  public:
  void clear_measure_covar();
  private:
  double _internal_measure_covar(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_measure_covar() const;
  void _internal_add_measure_covar(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_measure_covar();
  public:
  double measure_covar(int index) const;
  void set_measure_covar(int index, double value);
  void add_measure_covar(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      measure_covar() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_measure_covar();

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.common.Point3D position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point3D* position);
  ::apollo::common::Point3D* unsafe_arena_release_position();

  // optional .apollo.common.Point3D velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::common::Point3D* velocity);
  ::apollo::common::Point3D* unsafe_arena_release_velocity();

  // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
  bool has_measure_type() const;
  private:
  bool _internal_has_measure_type() const;
  public:
  void clear_measure_type();
  ::apollo::localization::IntegMeasure_MeasureType measure_type() const;
  void set_measure_type(::apollo::localization::IntegMeasure_MeasureType value);
  private:
  ::apollo::localization::IntegMeasure_MeasureType _internal_measure_type() const;
  void _internal_set_measure_type(::apollo::localization::IntegMeasure_MeasureType value);
  public:

  // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
  bool has_frame_type() const;
  private:
  bool _internal_has_frame_type() const;
  public:
  void clear_frame_type();
  ::apollo::localization::IntegMeasure_FrameType frame_type() const;
  void set_frame_type(::apollo::localization::IntegMeasure_FrameType value);
  private:
  ::apollo::localization::IntegMeasure_FrameType _internal_frame_type() const;
  void _internal_set_frame_type(::apollo::localization::IntegMeasure_FrameType value);
  public:

  // optional double yaw = 6;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional int32 zone_id = 7;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int32_t zone_id() const;
  void set_zone_id(int32_t value);
  private:
  int32_t _internal_zone_id() const;
  void _internal_set_zone_id(int32_t value);
  public:

  // optional bool is_have_variance = 8;
  bool has_is_have_variance() const;
  private:
  bool _internal_has_is_have_variance() const;
  public:
  void clear_is_have_variance();
  bool is_have_variance() const;
  void set_is_have_variance(bool value);
  private:
  bool _internal_is_have_variance() const;
  void _internal_set_is_have_variance(bool value);
  public:

  // optional bool is_gnss_double_antenna = 9;
  bool has_is_gnss_double_antenna() const;
  private:
  bool _internal_has_is_gnss_double_antenna() const;
  public:
  void clear_is_gnss_double_antenna();
  bool is_gnss_double_antenna() const;
  void set_is_gnss_double_antenna(bool value);
  private:
  bool _internal_is_gnss_double_antenna() const;
  void _internal_set_is_gnss_double_antenna(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.localization.IntegMeasure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > measure_covar_;
    ::apollo::common::Header* header_;
    ::apollo::common::Point3D* position_;
    ::apollo::common::Point3D* velocity_;
    int measure_type_;
    int frame_type_;
    double yaw_;
    int32_t zone_id_;
    bool is_have_variance_;
    bool is_gnss_double_antenna_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2flocalization_2fproto_2fmeasure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntegMeasure

// optional .apollo.common.Header header = 1;
inline bool IntegMeasure::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& IntegMeasure::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& IntegMeasure::header() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.header)
  return _internal_header();
}
inline void IntegMeasure::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.localization.IntegMeasure.header)
}
inline ::apollo::common::Header* IntegMeasure::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* IntegMeasure::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* IntegMeasure::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* IntegMeasure::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.header)
  return _msg;
}
inline void IntegMeasure::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.header)
}

// optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
inline bool IntegMeasure::_internal_has_measure_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IntegMeasure::has_measure_type() const {
  return _internal_has_measure_type();
}
inline void IntegMeasure::clear_measure_type() {
  _impl_.measure_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::localization::IntegMeasure_MeasureType IntegMeasure::_internal_measure_type() const {
  return static_cast< ::apollo::localization::IntegMeasure_MeasureType >(_impl_.measure_type_);
}
inline ::apollo::localization::IntegMeasure_MeasureType IntegMeasure::measure_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.measure_type)
  return _internal_measure_type();
}
inline void IntegMeasure::_internal_set_measure_type(::apollo::localization::IntegMeasure_MeasureType value) {
  assert(::apollo::localization::IntegMeasure_MeasureType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.measure_type_ = value;
}
inline void IntegMeasure::set_measure_type(::apollo::localization::IntegMeasure_MeasureType value) {
  _internal_set_measure_type(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.measure_type)
}

// optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
inline bool IntegMeasure::_internal_has_frame_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IntegMeasure::has_frame_type() const {
  return _internal_has_frame_type();
}
inline void IntegMeasure::clear_frame_type() {
  _impl_.frame_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::localization::IntegMeasure_FrameType IntegMeasure::_internal_frame_type() const {
  return static_cast< ::apollo::localization::IntegMeasure_FrameType >(_impl_.frame_type_);
}
inline ::apollo::localization::IntegMeasure_FrameType IntegMeasure::frame_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.frame_type)
  return _internal_frame_type();
}
inline void IntegMeasure::_internal_set_frame_type(::apollo::localization::IntegMeasure_FrameType value) {
  assert(::apollo::localization::IntegMeasure_FrameType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.frame_type_ = value;
}
inline void IntegMeasure::set_frame_type(::apollo::localization::IntegMeasure_FrameType value) {
  _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.frame_type)
}

// optional .apollo.common.Point3D position = 4;
inline bool IntegMeasure::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& IntegMeasure::_internal_position() const {
  const ::apollo::common::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& IntegMeasure::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.position)
  return _internal_position();
}
inline void IntegMeasure::unsafe_arena_set_allocated_position(
    ::apollo::common::Point3D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.localization.IntegMeasure.position)
}
inline ::apollo::common::Point3D* IntegMeasure::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* IntegMeasure::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* IntegMeasure::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::Point3D* IntegMeasure::mutable_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.position)
  return _msg;
}
inline void IntegMeasure::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.position)
}

// optional .apollo.common.Point3D velocity = 5;
inline bool IntegMeasure::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& IntegMeasure::_internal_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& IntegMeasure::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.velocity)
  return _internal_velocity();
}
inline void IntegMeasure::unsafe_arena_set_allocated_velocity(
    ::apollo::common::Point3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.localization.IntegMeasure.velocity)
}
inline ::apollo::common::Point3D* IntegMeasure::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* IntegMeasure::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.IntegMeasure.velocity)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* IntegMeasure::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::apollo::common::Point3D* IntegMeasure::mutable_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.localization.IntegMeasure.velocity)
  return _msg;
}
inline void IntegMeasure::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.IntegMeasure.velocity)
}

// optional double yaw = 6;
inline bool IntegMeasure::_internal_has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IntegMeasure::has_yaw() const {
  return _internal_has_yaw();
}
inline void IntegMeasure::clear_yaw() {
  _impl_.yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double IntegMeasure::_internal_yaw() const {
  return _impl_.yaw_;
}
inline double IntegMeasure::yaw() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.yaw)
  return _internal_yaw();
}
inline void IntegMeasure::_internal_set_yaw(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.yaw_ = value;
}
inline void IntegMeasure::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.yaw)
}

// optional int32 zone_id = 7;
inline bool IntegMeasure::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IntegMeasure::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void IntegMeasure::clear_zone_id() {
  _impl_.zone_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t IntegMeasure::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int32_t IntegMeasure::zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.zone_id)
  return _internal_zone_id();
}
inline void IntegMeasure::_internal_set_zone_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.zone_id_ = value;
}
inline void IntegMeasure::set_zone_id(int32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.zone_id)
}

// optional bool is_have_variance = 8;
inline bool IntegMeasure::_internal_has_is_have_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IntegMeasure::has_is_have_variance() const {
  return _internal_has_is_have_variance();
}
inline void IntegMeasure::clear_is_have_variance() {
  _impl_.is_have_variance_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool IntegMeasure::_internal_is_have_variance() const {
  return _impl_.is_have_variance_;
}
inline bool IntegMeasure::is_have_variance() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.is_have_variance)
  return _internal_is_have_variance();
}
inline void IntegMeasure::_internal_set_is_have_variance(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_have_variance_ = value;
}
inline void IntegMeasure::set_is_have_variance(bool value) {
  _internal_set_is_have_variance(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.is_have_variance)
}

// optional bool is_gnss_double_antenna = 9;
inline bool IntegMeasure::_internal_has_is_gnss_double_antenna() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IntegMeasure::has_is_gnss_double_antenna() const {
  return _internal_has_is_gnss_double_antenna();
}
inline void IntegMeasure::clear_is_gnss_double_antenna() {
  _impl_.is_gnss_double_antenna_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool IntegMeasure::_internal_is_gnss_double_antenna() const {
  return _impl_.is_gnss_double_antenna_;
}
inline bool IntegMeasure::is_gnss_double_antenna() const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.is_gnss_double_antenna)
  return _internal_is_gnss_double_antenna();
}
inline void IntegMeasure::_internal_set_is_gnss_double_antenna(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.is_gnss_double_antenna_ = value;
}
inline void IntegMeasure::set_is_gnss_double_antenna(bool value) {
  _internal_set_is_gnss_double_antenna(value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.is_gnss_double_antenna)
}

// repeated double measure_covar = 10 [packed = true];
inline int IntegMeasure::_internal_measure_covar_size() const {
  return _impl_.measure_covar_.size();
}
inline int IntegMeasure::measure_covar_size() const {
  return _internal_measure_covar_size();
}
inline void IntegMeasure::clear_measure_covar() {
  _impl_.measure_covar_.Clear();
}
inline double IntegMeasure::_internal_measure_covar(int index) const {
  return _impl_.measure_covar_.Get(index);
}
inline double IntegMeasure::measure_covar(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.IntegMeasure.measure_covar)
  return _internal_measure_covar(index);
}
inline void IntegMeasure::set_measure_covar(int index, double value) {
  _impl_.measure_covar_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.localization.IntegMeasure.measure_covar)
}
inline void IntegMeasure::_internal_add_measure_covar(double value) {
  _impl_.measure_covar_.Add(value);
}
inline void IntegMeasure::add_measure_covar(double value) {
  _internal_add_measure_covar(value);
  // @@protoc_insertion_point(field_add:apollo.localization.IntegMeasure.measure_covar)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntegMeasure::_internal_measure_covar() const {
  return _impl_.measure_covar_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntegMeasure::measure_covar() const {
  // @@protoc_insertion_point(field_list:apollo.localization.IntegMeasure.measure_covar)
  return _internal_measure_covar();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntegMeasure::_internal_mutable_measure_covar() {
  return &_impl_.measure_covar_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntegMeasure::mutable_measure_covar() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.IntegMeasure.measure_covar)
  return _internal_mutable_measure_covar();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::localization::IntegMeasure_MeasureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::localization::IntegMeasure_MeasureType>() {
  return ::apollo::localization::IntegMeasure_MeasureType_descriptor();
}
template <> struct is_proto_enum< ::apollo::localization::IntegMeasure_FrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::localization::IntegMeasure_FrameType>() {
  return ::apollo::localization::IntegMeasure_FrameType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fmeasure_2eproto
