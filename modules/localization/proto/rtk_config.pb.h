// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/rtk_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto;
namespace apollo {
namespace localization {
namespace rtk_config {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::localization::rtk_config::Config* Arena::CreateMaybeMessage<::apollo::localization::rtk_config::Config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace localization {
namespace rtk_config {

// ===================================================================

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.localization.rtk_config.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.localization.rtk_config.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationTopicFieldNumber = 1,
    kImuTopicFieldNumber = 2,
    kGpsTopicFieldNumber = 3,
    kBroadcastTfFrameIdFieldNumber = 4,
    kBroadcastTfChildFrameIdFieldNumber = 5,
    kLocalizationStatusTopicFieldNumber = 11,
    kGpsStatusTopicFieldNumber = 12,
    kGpsImuTimeDiffThresholdFieldNumber = 7,
    kMapOffsetXFieldNumber = 8,
    kMapOffsetYFieldNumber = 9,
    kMapOffsetZFieldNumber = 10,
    kImuListMaxSizeFieldNumber = 6,
  };
  // optional string localization_topic = 1;
  bool has_localization_topic() const;
  private:
  bool _internal_has_localization_topic() const;
  public:
  void clear_localization_topic();
  const std::string& localization_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_topic();
  PROTOBUF_NODISCARD std::string* release_localization_topic();
  void set_allocated_localization_topic(std::string* localization_topic);
  private:
  const std::string& _internal_localization_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_topic(const std::string& value);
  std::string* _internal_mutable_localization_topic();
  public:

  // optional string imu_topic = 2;
  bool has_imu_topic() const;
  private:
  bool _internal_has_imu_topic() const;
  public:
  void clear_imu_topic();
  const std::string& imu_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imu_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imu_topic();
  PROTOBUF_NODISCARD std::string* release_imu_topic();
  void set_allocated_imu_topic(std::string* imu_topic);
  private:
  const std::string& _internal_imu_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imu_topic(const std::string& value);
  std::string* _internal_mutable_imu_topic();
  public:

  // optional string gps_topic = 3;
  bool has_gps_topic() const;
  private:
  bool _internal_has_gps_topic() const;
  public:
  void clear_gps_topic();
  const std::string& gps_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gps_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gps_topic();
  PROTOBUF_NODISCARD std::string* release_gps_topic();
  void set_allocated_gps_topic(std::string* gps_topic);
  private:
  const std::string& _internal_gps_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gps_topic(const std::string& value);
  std::string* _internal_mutable_gps_topic();
  public:

  // optional string broadcast_tf_frame_id = 4;
  bool has_broadcast_tf_frame_id() const;
  private:
  bool _internal_has_broadcast_tf_frame_id() const;
  public:
  void clear_broadcast_tf_frame_id();
  const std::string& broadcast_tf_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_tf_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_tf_frame_id();
  PROTOBUF_NODISCARD std::string* release_broadcast_tf_frame_id();
  void set_allocated_broadcast_tf_frame_id(std::string* broadcast_tf_frame_id);
  private:
  const std::string& _internal_broadcast_tf_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_tf_frame_id(const std::string& value);
  std::string* _internal_mutable_broadcast_tf_frame_id();
  public:

  // optional string broadcast_tf_child_frame_id = 5;
  bool has_broadcast_tf_child_frame_id() const;
  private:
  bool _internal_has_broadcast_tf_child_frame_id() const;
  public:
  void clear_broadcast_tf_child_frame_id();
  const std::string& broadcast_tf_child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_tf_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_tf_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_broadcast_tf_child_frame_id();
  void set_allocated_broadcast_tf_child_frame_id(std::string* broadcast_tf_child_frame_id);
  private:
  const std::string& _internal_broadcast_tf_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_tf_child_frame_id(const std::string& value);
  std::string* _internal_mutable_broadcast_tf_child_frame_id();
  public:

  // optional string localization_status_topic = 11;
  bool has_localization_status_topic() const;
  private:
  bool _internal_has_localization_status_topic() const;
  public:
  void clear_localization_status_topic();
  const std::string& localization_status_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_status_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_status_topic();
  PROTOBUF_NODISCARD std::string* release_localization_status_topic();
  void set_allocated_localization_status_topic(std::string* localization_status_topic);
  private:
  const std::string& _internal_localization_status_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_status_topic(const std::string& value);
  std::string* _internal_mutable_localization_status_topic();
  public:

  // optional string gps_status_topic = 12;
  bool has_gps_status_topic() const;
  private:
  bool _internal_has_gps_status_topic() const;
  public:
  void clear_gps_status_topic();
  const std::string& gps_status_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gps_status_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gps_status_topic();
  PROTOBUF_NODISCARD std::string* release_gps_status_topic();
  void set_allocated_gps_status_topic(std::string* gps_status_topic);
  private:
  const std::string& _internal_gps_status_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gps_status_topic(const std::string& value);
  std::string* _internal_mutable_gps_status_topic();
  public:

  // optional double gps_imu_time_diff_threshold = 7;
  bool has_gps_imu_time_diff_threshold() const;
  private:
  bool _internal_has_gps_imu_time_diff_threshold() const;
  public:
  void clear_gps_imu_time_diff_threshold();
  double gps_imu_time_diff_threshold() const;
  void set_gps_imu_time_diff_threshold(double value);
  private:
  double _internal_gps_imu_time_diff_threshold() const;
  void _internal_set_gps_imu_time_diff_threshold(double value);
  public:

  // optional double map_offset_x = 8;
  bool has_map_offset_x() const;
  private:
  bool _internal_has_map_offset_x() const;
  public:
  void clear_map_offset_x();
  double map_offset_x() const;
  void set_map_offset_x(double value);
  private:
  double _internal_map_offset_x() const;
  void _internal_set_map_offset_x(double value);
  public:

  // optional double map_offset_y = 9;
  bool has_map_offset_y() const;
  private:
  bool _internal_has_map_offset_y() const;
  public:
  void clear_map_offset_y();
  double map_offset_y() const;
  void set_map_offset_y(double value);
  private:
  double _internal_map_offset_y() const;
  void _internal_set_map_offset_y(double value);
  public:

  // optional double map_offset_z = 10;
  bool has_map_offset_z() const;
  private:
  bool _internal_has_map_offset_z() const;
  public:
  void clear_map_offset_z();
  double map_offset_z() const;
  void set_map_offset_z(double value);
  private:
  double _internal_map_offset_z() const;
  void _internal_set_map_offset_z(double value);
  public:

  // optional int32 imu_list_max_size = 6;
  bool has_imu_list_max_size() const;
  private:
  bool _internal_has_imu_list_max_size() const;
  public:
  void clear_imu_list_max_size();
  int32_t imu_list_max_size() const;
  void set_imu_list_max_size(int32_t value);
  private:
  int32_t _internal_imu_list_max_size() const;
  void _internal_set_imu_list_max_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.localization.rtk_config.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imu_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gps_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_tf_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_tf_child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_status_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gps_status_topic_;
    double gps_imu_time_diff_threshold_;
    double map_offset_x_;
    double map_offset_y_;
    double map_offset_z_;
    int32_t imu_list_max_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// optional string localization_topic = 1;
inline bool Config::_internal_has_localization_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_localization_topic() const {
  return _internal_has_localization_topic();
}
inline void Config::clear_localization_topic() {
  _impl_.localization_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::localization_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.localization_topic)
  return _internal_localization_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_localization_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.localization_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.localization_topic)
}
inline std::string* Config::mutable_localization_topic() {
  std::string* _s = _internal_mutable_localization_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.localization_topic)
  return _s;
}
inline const std::string& Config::_internal_localization_topic() const {
  return _impl_.localization_topic_.Get();
}
inline void Config::_internal_set_localization_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.localization_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_localization_topic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.localization_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_localization_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.localization_topic)
  if (!_internal_has_localization_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.localization_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_localization_topic(std::string* localization_topic) {
  if (localization_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.localization_topic_.SetAllocated(localization_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.localization_topic)
}

// optional string localization_status_topic = 11;
inline bool Config::_internal_has_localization_status_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Config::has_localization_status_topic() const {
  return _internal_has_localization_status_topic();
}
inline void Config::clear_localization_status_topic() {
  _impl_.localization_status_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Config::localization_status_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.localization_status_topic)
  return _internal_localization_status_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_localization_status_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.localization_status_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.localization_status_topic)
}
inline std::string* Config::mutable_localization_status_topic() {
  std::string* _s = _internal_mutable_localization_status_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.localization_status_topic)
  return _s;
}
inline const std::string& Config::_internal_localization_status_topic() const {
  return _impl_.localization_status_topic_.Get();
}
inline void Config::_internal_set_localization_status_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.localization_status_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_localization_status_topic() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.localization_status_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_localization_status_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.localization_status_topic)
  if (!_internal_has_localization_status_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.localization_status_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_status_topic_.IsDefault()) {
    _impl_.localization_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_localization_status_topic(std::string* localization_status_topic) {
  if (localization_status_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.localization_status_topic_.SetAllocated(localization_status_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_status_topic_.IsDefault()) {
    _impl_.localization_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.localization_status_topic)
}

// optional string imu_topic = 2;
inline bool Config::_internal_has_imu_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config::has_imu_topic() const {
  return _internal_has_imu_topic();
}
inline void Config::clear_imu_topic() {
  _impl_.imu_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Config::imu_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.imu_topic)
  return _internal_imu_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_imu_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.imu_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.imu_topic)
}
inline std::string* Config::mutable_imu_topic() {
  std::string* _s = _internal_mutable_imu_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.imu_topic)
  return _s;
}
inline const std::string& Config::_internal_imu_topic() const {
  return _impl_.imu_topic_.Get();
}
inline void Config::_internal_set_imu_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.imu_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_imu_topic() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.imu_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_imu_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.imu_topic)
  if (!_internal_has_imu_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.imu_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imu_topic_.IsDefault()) {
    _impl_.imu_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_imu_topic(std::string* imu_topic) {
  if (imu_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.imu_topic_.SetAllocated(imu_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imu_topic_.IsDefault()) {
    _impl_.imu_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.imu_topic)
}

// optional string gps_topic = 3;
inline bool Config::_internal_has_gps_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Config::has_gps_topic() const {
  return _internal_has_gps_topic();
}
inline void Config::clear_gps_topic() {
  _impl_.gps_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Config::gps_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_topic)
  return _internal_gps_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_gps_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.gps_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_topic)
}
inline std::string* Config::mutable_gps_topic() {
  std::string* _s = _internal_mutable_gps_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.gps_topic)
  return _s;
}
inline const std::string& Config::_internal_gps_topic() const {
  return _impl_.gps_topic_.Get();
}
inline void Config::_internal_set_gps_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gps_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_gps_topic() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.gps_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_gps_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.gps_topic)
  if (!_internal_has_gps_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.gps_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gps_topic_.IsDefault()) {
    _impl_.gps_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_gps_topic(std::string* gps_topic) {
  if (gps_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.gps_topic_.SetAllocated(gps_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gps_topic_.IsDefault()) {
    _impl_.gps_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.gps_topic)
}

// optional string gps_status_topic = 12;
inline bool Config::_internal_has_gps_status_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Config::has_gps_status_topic() const {
  return _internal_has_gps_status_topic();
}
inline void Config::clear_gps_status_topic() {
  _impl_.gps_status_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Config::gps_status_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_status_topic)
  return _internal_gps_status_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_gps_status_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.gps_status_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_status_topic)
}
inline std::string* Config::mutable_gps_status_topic() {
  std::string* _s = _internal_mutable_gps_status_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.gps_status_topic)
  return _s;
}
inline const std::string& Config::_internal_gps_status_topic() const {
  return _impl_.gps_status_topic_.Get();
}
inline void Config::_internal_set_gps_status_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gps_status_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_gps_status_topic() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.gps_status_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_gps_status_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.gps_status_topic)
  if (!_internal_has_gps_status_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.gps_status_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gps_status_topic_.IsDefault()) {
    _impl_.gps_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_gps_status_topic(std::string* gps_status_topic) {
  if (gps_status_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.gps_status_topic_.SetAllocated(gps_status_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gps_status_topic_.IsDefault()) {
    _impl_.gps_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.gps_status_topic)
}

// optional string broadcast_tf_frame_id = 4;
inline bool Config::_internal_has_broadcast_tf_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Config::has_broadcast_tf_frame_id() const {
  return _internal_has_broadcast_tf_frame_id();
}
inline void Config::clear_broadcast_tf_frame_id() {
  _impl_.broadcast_tf_frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Config::broadcast_tf_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  return _internal_broadcast_tf_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_broadcast_tf_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.broadcast_tf_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}
inline std::string* Config::mutable_broadcast_tf_frame_id() {
  std::string* _s = _internal_mutable_broadcast_tf_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  return _s;
}
inline const std::string& Config::_internal_broadcast_tf_frame_id() const {
  return _impl_.broadcast_tf_frame_id_.Get();
}
inline void Config::_internal_set_broadcast_tf_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.broadcast_tf_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_broadcast_tf_frame_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.broadcast_tf_frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_broadcast_tf_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  if (!_internal_has_broadcast_tf_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.broadcast_tf_frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_tf_frame_id_.IsDefault()) {
    _impl_.broadcast_tf_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_broadcast_tf_frame_id(std::string* broadcast_tf_frame_id) {
  if (broadcast_tf_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.broadcast_tf_frame_id_.SetAllocated(broadcast_tf_frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_tf_frame_id_.IsDefault()) {
    _impl_.broadcast_tf_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}

// optional string broadcast_tf_child_frame_id = 5;
inline bool Config::_internal_has_broadcast_tf_child_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Config::has_broadcast_tf_child_frame_id() const {
  return _internal_has_broadcast_tf_child_frame_id();
}
inline void Config::clear_broadcast_tf_child_frame_id() {
  _impl_.broadcast_tf_child_frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Config::broadcast_tf_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  return _internal_broadcast_tf_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_broadcast_tf_child_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.broadcast_tf_child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}
inline std::string* Config::mutable_broadcast_tf_child_frame_id() {
  std::string* _s = _internal_mutable_broadcast_tf_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  return _s;
}
inline const std::string& Config::_internal_broadcast_tf_child_frame_id() const {
  return _impl_.broadcast_tf_child_frame_id_.Get();
}
inline void Config::_internal_set_broadcast_tf_child_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.broadcast_tf_child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_broadcast_tf_child_frame_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.broadcast_tf_child_frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Config::release_broadcast_tf_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  if (!_internal_has_broadcast_tf_child_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.broadcast_tf_child_frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_tf_child_frame_id_.IsDefault()) {
    _impl_.broadcast_tf_child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_broadcast_tf_child_frame_id(std::string* broadcast_tf_child_frame_id) {
  if (broadcast_tf_child_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.broadcast_tf_child_frame_id_.SetAllocated(broadcast_tf_child_frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.broadcast_tf_child_frame_id_.IsDefault()) {
    _impl_.broadcast_tf_child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}

// optional int32 imu_list_max_size = 6;
inline bool Config::_internal_has_imu_list_max_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Config::has_imu_list_max_size() const {
  return _internal_has_imu_list_max_size();
}
inline void Config::clear_imu_list_max_size() {
  _impl_.imu_list_max_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Config::_internal_imu_list_max_size() const {
  return _impl_.imu_list_max_size_;
}
inline int32_t Config::imu_list_max_size() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.imu_list_max_size)
  return _internal_imu_list_max_size();
}
inline void Config::_internal_set_imu_list_max_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.imu_list_max_size_ = value;
}
inline void Config::set_imu_list_max_size(int32_t value) {
  _internal_set_imu_list_max_size(value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.imu_list_max_size)
}

// optional double gps_imu_time_diff_threshold = 7;
inline bool Config::_internal_has_gps_imu_time_diff_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Config::has_gps_imu_time_diff_threshold() const {
  return _internal_has_gps_imu_time_diff_threshold();
}
inline void Config::clear_gps_imu_time_diff_threshold() {
  _impl_.gps_imu_time_diff_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Config::_internal_gps_imu_time_diff_threshold() const {
  return _impl_.gps_imu_time_diff_threshold_;
}
inline double Config::gps_imu_time_diff_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_imu_time_diff_threshold)
  return _internal_gps_imu_time_diff_threshold();
}
inline void Config::_internal_set_gps_imu_time_diff_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gps_imu_time_diff_threshold_ = value;
}
inline void Config::set_gps_imu_time_diff_threshold(double value) {
  _internal_set_gps_imu_time_diff_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_imu_time_diff_threshold)
}

// optional double map_offset_x = 8;
inline bool Config::_internal_has_map_offset_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Config::has_map_offset_x() const {
  return _internal_has_map_offset_x();
}
inline void Config::clear_map_offset_x() {
  _impl_.map_offset_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Config::_internal_map_offset_x() const {
  return _impl_.map_offset_x_;
}
inline double Config::map_offset_x() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_x)
  return _internal_map_offset_x();
}
inline void Config::_internal_set_map_offset_x(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.map_offset_x_ = value;
}
inline void Config::set_map_offset_x(double value) {
  _internal_set_map_offset_x(value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_x)
}

// optional double map_offset_y = 9;
inline bool Config::_internal_has_map_offset_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Config::has_map_offset_y() const {
  return _internal_has_map_offset_y();
}
inline void Config::clear_map_offset_y() {
  _impl_.map_offset_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Config::_internal_map_offset_y() const {
  return _impl_.map_offset_y_;
}
inline double Config::map_offset_y() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_y)
  return _internal_map_offset_y();
}
inline void Config::_internal_set_map_offset_y(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.map_offset_y_ = value;
}
inline void Config::set_map_offset_y(double value) {
  _internal_set_map_offset_y(value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_y)
}

// optional double map_offset_z = 10;
inline bool Config::_internal_has_map_offset_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Config::has_map_offset_z() const {
  return _internal_has_map_offset_z();
}
inline void Config::clear_map_offset_z() {
  _impl_.map_offset_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double Config::_internal_map_offset_z() const {
  return _impl_.map_offset_z_;
}
inline double Config::map_offset_z() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_z)
  return _internal_map_offset_z();
}
inline void Config::_internal_set_map_offset_z(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.map_offset_z_ = value;
}
inline void Config::set_map_offset_z(double value) {
  _internal_set_map_offset_z(value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
