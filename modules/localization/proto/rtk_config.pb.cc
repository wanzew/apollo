// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/rtk_config.proto

#include "modules/localization/proto/rtk_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace localization {
namespace rtk_config {
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localization_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imu_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gps_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_tf_frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_tf_child_frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localization_status_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gps_status_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gps_imu_time_diff_threshold_)*/0
  , /*decltype(_impl_.map_offset_x_)*/0
  , /*decltype(_impl_.map_offset_y_)*/0
  , /*decltype(_impl_.map_offset_z_)*/0
  , /*decltype(_impl_.imu_list_max_size_)*/0} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.localization_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.localization_status_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.imu_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.gps_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.gps_status_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.broadcast_tf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.broadcast_tf_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.imu_list_max_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.gps_imu_time_diff_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.map_offset_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.map_offset_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _impl_.map_offset_z_),
  0,
  5,
  1,
  2,
  6,
  3,
  4,
  11,
  7,
  8,
  9,
  10,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::apollo::localization::rtk_config::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::localization::rtk_config::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/localization/proto/rtk_config."
  "proto\022\036apollo.localization.rtk_config\"\315\002"
  "\n\006Config\022\032\n\022localization_topic\030\001 \001(\t\022!\n\031"
  "localization_status_topic\030\013 \001(\t\022\021\n\timu_t"
  "opic\030\002 \001(\t\022\021\n\tgps_topic\030\003 \001(\t\022\030\n\020gps_sta"
  "tus_topic\030\014 \001(\t\022\035\n\025broadcast_tf_frame_id"
  "\030\004 \001(\t\022#\n\033broadcast_tf_child_frame_id\030\005 "
  "\001(\t\022\031\n\021imu_list_max_size\030\006 \001(\005\022#\n\033gps_im"
  "u_time_diff_threshold\030\007 \001(\001\022\024\n\014map_offse"
  "t_x\030\010 \001(\001\022\024\n\014map_offset_y\030\t \001(\001\022\024\n\014map_o"
  "ffset_z\030\n \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = {
    false, false, 413, descriptor_table_protodef_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto,
    "modules/localization/proto/rtk_config.proto",
    &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto, file_level_enum_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto,
    file_level_service_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto(&descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto);
namespace apollo {
namespace localization {
namespace rtk_config {

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_localization_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization_status_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_imu_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gps_status_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_broadcast_tf_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_broadcast_tf_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imu_list_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gps_imu_time_diff_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_map_offset_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.rtk_config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localization_topic_){}
    , decltype(_impl_.imu_topic_){}
    , decltype(_impl_.gps_topic_){}
    , decltype(_impl_.broadcast_tf_frame_id_){}
    , decltype(_impl_.broadcast_tf_child_frame_id_){}
    , decltype(_impl_.localization_status_topic_){}
    , decltype(_impl_.gps_status_topic_){}
    , decltype(_impl_.gps_imu_time_diff_threshold_){}
    , decltype(_impl_.map_offset_x_){}
    , decltype(_impl_.map_offset_y_){}
    , decltype(_impl_.map_offset_z_){}
    , decltype(_impl_.imu_list_max_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localization_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_topic()) {
    _impl_.localization_topic_.Set(from._internal_localization_topic(), 
      GetArenaForAllocation());
  }
  _impl_.imu_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imu_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imu_topic()) {
    _impl_.imu_topic_.Set(from._internal_imu_topic(), 
      GetArenaForAllocation());
  }
  _impl_.gps_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gps_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gps_topic()) {
    _impl_.gps_topic_.Set(from._internal_gps_topic(), 
      GetArenaForAllocation());
  }
  _impl_.broadcast_tf_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_tf_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_tf_frame_id()) {
    _impl_.broadcast_tf_frame_id_.Set(from._internal_broadcast_tf_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.broadcast_tf_child_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_tf_child_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_tf_child_frame_id()) {
    _impl_.broadcast_tf_child_frame_id_.Set(from._internal_broadcast_tf_child_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.localization_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_status_topic()) {
    _impl_.localization_status_topic_.Set(from._internal_localization_status_topic(), 
      GetArenaForAllocation());
  }
  _impl_.gps_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gps_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gps_status_topic()) {
    _impl_.gps_status_topic_.Set(from._internal_gps_status_topic(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gps_imu_time_diff_threshold_, &from._impl_.gps_imu_time_diff_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.imu_list_max_size_) -
    reinterpret_cast<char*>(&_impl_.gps_imu_time_diff_threshold_)) + sizeof(_impl_.imu_list_max_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.rtk_config.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localization_topic_){}
    , decltype(_impl_.imu_topic_){}
    , decltype(_impl_.gps_topic_){}
    , decltype(_impl_.broadcast_tf_frame_id_){}
    , decltype(_impl_.broadcast_tf_child_frame_id_){}
    , decltype(_impl_.localization_status_topic_){}
    , decltype(_impl_.gps_status_topic_){}
    , decltype(_impl_.gps_imu_time_diff_threshold_){0}
    , decltype(_impl_.map_offset_x_){0}
    , decltype(_impl_.map_offset_y_){0}
    , decltype(_impl_.map_offset_z_){0}
    , decltype(_impl_.imu_list_max_size_){0}
  };
  _impl_.localization_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imu_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imu_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gps_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gps_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_tf_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_tf_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_tf_child_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_tf_child_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localization_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gps_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gps_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.localization.rtk_config.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localization_topic_.Destroy();
  _impl_.imu_topic_.Destroy();
  _impl_.gps_topic_.Destroy();
  _impl_.broadcast_tf_frame_id_.Destroy();
  _impl_.broadcast_tf_child_frame_id_.Destroy();
  _impl_.localization_status_topic_.Destroy();
  _impl_.gps_status_topic_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.rtk_config.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.localization_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imu_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gps_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.broadcast_tf_frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.broadcast_tf_child_frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.localization_status_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.gps_status_topic_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.gps_imu_time_diff_threshold_ = 0;
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.map_offset_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.imu_list_max_size_) -
        reinterpret_cast<char*>(&_impl_.map_offset_x_)) + sizeof(_impl_.imu_list_max_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string localization_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_localization_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.localization_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imu_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imu_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.imu_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gps_topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gps_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.gps_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_tf_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_broadcast_tf_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.broadcast_tf_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_tf_child_frame_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_broadcast_tf_child_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 imu_list_max_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_imu_list_max_size(&has_bits);
          _impl_.imu_list_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gps_imu_time_diff_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_gps_imu_time_diff_threshold(&has_bits);
          _impl_.gps_imu_time_diff_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double map_offset_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_map_offset_x(&has_bits);
          _impl_.map_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double map_offset_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_map_offset_y(&has_bits);
          _impl_.map_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double map_offset_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_map_offset_z(&has_bits);
          _impl_.map_offset_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string localization_status_topic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_localization_status_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.localization_status_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gps_status_topic = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_gps_status_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.localization.rtk_config.Config.gps_status_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.rtk_config.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string localization_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_topic().data(), static_cast<int>(this->_internal_localization_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.localization_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_localization_topic(), target);
  }

  // optional string imu_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imu_topic().data(), static_cast<int>(this->_internal_imu_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.imu_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imu_topic(), target);
  }

  // optional string gps_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gps_topic().data(), static_cast<int>(this->_internal_gps_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.gps_topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gps_topic(), target);
  }

  // optional string broadcast_tf_frame_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.broadcast_tf_frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_broadcast_tf_frame_id(), target);
  }

  // optional string broadcast_tf_child_frame_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_child_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_broadcast_tf_child_frame_id(), target);
  }

  // optional int32 imu_list_max_size = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_imu_list_max_size(), target);
  }

  // optional double gps_imu_time_diff_threshold = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_gps_imu_time_diff_threshold(), target);
  }

  // optional double map_offset_x = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_offset_x(), target);
  }

  // optional double map_offset_y = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_map_offset_y(), target);
  }

  // optional double map_offset_z = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_map_offset_z(), target);
  }

  // optional string localization_status_topic = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_status_topic().data(), static_cast<int>(this->_internal_localization_status_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.localization_status_topic");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_localization_status_topic(), target);
  }

  // optional string gps_status_topic = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gps_status_topic().data(), static_cast<int>(this->_internal_gps_status_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.gps_status_topic");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_gps_status_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.rtk_config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.rtk_config.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string localization_topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_topic());
    }

    // optional string imu_topic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imu_topic());
    }

    // optional string gps_topic = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gps_topic());
    }

    // optional string broadcast_tf_frame_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_frame_id());
    }

    // optional string broadcast_tf_child_frame_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_child_frame_id());
    }

    // optional string localization_status_topic = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_status_topic());
    }

    // optional string gps_status_topic = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gps_status_topic());
    }

    // optional double gps_imu_time_diff_threshold = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double map_offset_x = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double map_offset_y = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double map_offset_z = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 imu_list_max_size = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_imu_list_max_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.rtk_config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_localization_topic(from._internal_localization_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imu_topic(from._internal_imu_topic());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gps_topic(from._internal_gps_topic());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_broadcast_tf_frame_id(from._internal_broadcast_tf_frame_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_broadcast_tf_child_frame_id(from._internal_broadcast_tf_child_frame_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_localization_status_topic(from._internal_localization_status_topic());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_gps_status_topic(from._internal_gps_status_topic());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.gps_imu_time_diff_threshold_ = from._impl_.gps_imu_time_diff_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.map_offset_x_ = from._impl_.map_offset_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.map_offset_y_ = from._impl_.map_offset_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.map_offset_z_ = from._impl_.map_offset_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.imu_list_max_size_ = from._impl_.imu_list_max_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.rtk_config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_topic_, lhs_arena,
      &other->_impl_.localization_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imu_topic_, lhs_arena,
      &other->_impl_.imu_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gps_topic_, lhs_arena,
      &other->_impl_.gps_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_tf_frame_id_, lhs_arena,
      &other->_impl_.broadcast_tf_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_tf_child_frame_id_, lhs_arena,
      &other->_impl_.broadcast_tf_child_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_status_topic_, lhs_arena,
      &other->_impl_.localization_status_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gps_status_topic_, lhs_arena,
      &other->_impl_.gps_status_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.imu_list_max_size_)
      + sizeof(Config::_impl_.imu_list_max_size_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.gps_imu_time_diff_threshold_)>(
          reinterpret_cast<char*>(&_impl_.gps_imu_time_diff_threshold_),
          reinterpret_cast<char*>(&other->_impl_.gps_imu_time_diff_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::rtk_config::Config*
Arena::CreateMaybeMessage< ::apollo::localization::rtk_config::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::rtk_config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
