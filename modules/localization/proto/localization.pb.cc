// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/localization.proto

#include "modules/localization/proto/localization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace localization {
PROTOBUF_CONSTEXPR Uncertainty::Uncertainty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_std_dev_)*/nullptr
  , /*decltype(_impl_.orientation_std_dev_)*/nullptr
  , /*decltype(_impl_.linear_velocity_std_dev_)*/nullptr
  , /*decltype(_impl_.linear_acceleration_std_dev_)*/nullptr
  , /*decltype(_impl_.angular_velocity_std_dev_)*/nullptr} {}
struct UncertaintyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UncertaintyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UncertaintyDefaultTypeInternal() {}
  union {
    Uncertainty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
PROTOBUF_CONSTEXPR LocalizationEstimate::LocalizationEstimate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.uncertainty_)*/nullptr
  , /*decltype(_impl_.measurement_time_)*/0} {}
struct LocalizationEstimateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizationEstimateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizationEstimateDefaultTypeInternal() {}
  union {
    LocalizationEstimate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
PROTOBUF_CONSTEXPR LocalizationStatus::LocalizationStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.fusion_status_)*/0
  , /*decltype(_impl_.gnss_status_)*/0
  , /*decltype(_impl_.measurement_time_)*/0
  , /*decltype(_impl_.lidar_status_)*/0} {}
struct LocalizationStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizationStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizationStatusDefaultTypeInternal() {}
  union {
    LocalizationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
}  // namespace localization
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2flocalization_2fproto_2flocalization_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2flocalization_2fproto_2flocalization_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2flocalization_2eproto = nullptr;

const uint32_t TableStruct_modules_2flocalization_2fproto_2flocalization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_.position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_.orientation_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_.linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_.linear_acceleration_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Uncertainty, _impl_.angular_velocity_std_dev_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_.uncertainty_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationEstimate, _impl_.trajectory_point_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_.fusion_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_.gnss_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_.lidar_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::LocalizationStatus, _impl_.measurement_time_),
  0,
  1,
  2,
  4,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::localization::Uncertainty)},
  { 16, 27, -1, sizeof(::apollo::localization::LocalizationEstimate)},
  { 32, 43, -1, sizeof(::apollo::localization::LocalizationStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::localization::_Uncertainty_default_instance_._instance,
  &::apollo::localization::_LocalizationEstimate_default_instance_._instance,
  &::apollo::localization::_LocalizationStatus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2flocalization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/localization/proto/localizatio"
  "n.proto\022\023apollo.localization\032!modules/co"
  "mmon/proto/header.proto\032%modules/localiz"
  "ation/proto/pose.proto\032#modules/common/p"
  "roto/geometry.proto\032$modules/common/prot"
  "o/pnc_point.proto\"\244\002\n\013Uncertainty\0220\n\020pos"
  "ition_std_dev\030\001 \001(\0132\026.apollo.common.Poin"
  "t3D\0223\n\023orientation_std_dev\030\002 \001(\0132\026.apoll"
  "o.common.Point3D\0227\n\027linear_velocity_std_"
  "dev\030\003 \001(\0132\026.apollo.common.Point3D\022;\n\033lin"
  "ear_acceleration_std_dev\030\004 \001(\0132\026.apollo."
  "common.Point3D\0228\n\030angular_velocity_std_d"
  "ev\030\005 \001(\0132\026.apollo.common.Point3D\"\361\001\n\024Loc"
  "alizationEstimate\022%\n\006header\030\001 \001(\0132\025.apol"
  "lo.common.Header\022\'\n\004pose\030\002 \001(\0132\031.apollo."
  "localization.Pose\0225\n\013uncertainty\030\003 \001(\0132 "
  ".apollo.localization.Uncertainty\022\030\n\020meas"
  "urement_time\030\004 \001(\001\0228\n\020trajectory_point\030\005"
  " \003(\0132\036.apollo.common.TrajectoryPoint\"\200\002\n"
  "\022LocalizationStatus\022%\n\006header\030\001 \001(\0132\025.ap"
  "ollo.common.Header\0228\n\rfusion_status\030\002 \001("
  "\0162!.apollo.localization.MeasureState\0226\n\013"
  "gnss_status\030\003 \001(\0162!.apollo.localization."
  "MeasureState\0227\n\014lidar_status\030\004 \001(\0162!.apo"
  "llo.localization.MeasureState\022\030\n\020measure"
  "ment_time\030\005 \001(\001*@\n\014MeasureState\022\r\n\tNOT_V"
  "ALID\020\000\022\016\n\nNOT_STABLE\020\001\022\006\n\002OK\020\002\022\t\n\005VALID\020"
  "\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_deps[4] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto = {
    false, false, 1081, descriptor_table_protodef_modules_2flocalization_2fproto_2flocalization_2eproto,
    "modules/localization/proto/localization.proto",
    &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_deps, 4, 3,
    schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2flocalization_2eproto::offsets,
    file_level_metadata_modules_2flocalization_2fproto_2flocalization_2eproto, file_level_enum_descriptors_modules_2flocalization_2fproto_2flocalization_2eproto,
    file_level_service_descriptors_modules_2flocalization_2fproto_2flocalization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_getter() {
  return &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2flocalization_2fproto_2flocalization_2eproto(&descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto);
namespace apollo {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasureState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto);
  return file_level_enum_descriptors_modules_2flocalization_2fproto_2flocalization_2eproto[0];
}
bool MeasureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uncertainty::_Internal {
 public:
  using HasBits = decltype(std::declval<Uncertainty>()._impl_._has_bits_);
  static const ::apollo::common::Point3D& position_std_dev(const Uncertainty* msg);
  static void set_has_position_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& orientation_std_dev(const Uncertainty* msg);
  static void set_has_orientation_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& linear_velocity_std_dev(const Uncertainty* msg);
  static void set_has_linear_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_acceleration_std_dev(const Uncertainty* msg);
  static void set_has_linear_acceleration_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& angular_velocity_std_dev(const Uncertainty* msg);
  static void set_has_angular_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Point3D&
Uncertainty::_Internal::position_std_dev(const Uncertainty* msg) {
  return *msg->_impl_.position_std_dev_;
}
const ::apollo::common::Point3D&
Uncertainty::_Internal::orientation_std_dev(const Uncertainty* msg) {
  return *msg->_impl_.orientation_std_dev_;
}
const ::apollo::common::Point3D&
Uncertainty::_Internal::linear_velocity_std_dev(const Uncertainty* msg) {
  return *msg->_impl_.linear_velocity_std_dev_;
}
const ::apollo::common::Point3D&
Uncertainty::_Internal::linear_acceleration_std_dev(const Uncertainty* msg) {
  return *msg->_impl_.linear_acceleration_std_dev_;
}
const ::apollo::common::Point3D&
Uncertainty::_Internal::angular_velocity_std_dev(const Uncertainty* msg) {
  return *msg->_impl_.angular_velocity_std_dev_;
}
void Uncertainty::clear_position_std_dev() {
  if (_impl_.position_std_dev_ != nullptr) _impl_.position_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (_impl_.orientation_std_dev_ != nullptr) _impl_.orientation_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (_impl_.linear_velocity_std_dev_ != nullptr) _impl_.linear_velocity_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (_impl_.linear_acceleration_std_dev_ != nullptr) _impl_.linear_acceleration_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (_impl_.angular_velocity_std_dev_ != nullptr) _impl_.angular_velocity_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Uncertainty::Uncertainty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.orientation_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.linear_acceleration_std_dev_){nullptr}
    , decltype(_impl_.angular_velocity_std_dev_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_std_dev()) {
    _impl_.position_std_dev_ = new ::apollo::common::Point3D(*from._impl_.position_std_dev_);
  }
  if (from._internal_has_orientation_std_dev()) {
    _impl_.orientation_std_dev_ = new ::apollo::common::Point3D(*from._impl_.orientation_std_dev_);
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    _impl_.linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_std_dev_);
  }
  if (from._internal_has_linear_acceleration_std_dev()) {
    _impl_.linear_acceleration_std_dev_ = new ::apollo::common::Point3D(*from._impl_.linear_acceleration_std_dev_);
  }
  if (from._internal_has_angular_velocity_std_dev()) {
    _impl_.angular_velocity_std_dev_ = new ::apollo::common::Point3D(*from._impl_.angular_velocity_std_dev_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Uncertainty)
}

inline void Uncertainty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.orientation_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.linear_acceleration_std_dev_){nullptr}
    , decltype(_impl_.angular_velocity_std_dev_){nullptr}
  };
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:apollo.localization.Uncertainty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uncertainty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_std_dev_;
  if (this != internal_default_instance()) delete _impl_.orientation_std_dev_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_std_dev_;
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_std_dev_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_std_dev_;
}

void Uncertainty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Uncertainty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_std_dev_ != nullptr);
      _impl_.position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_std_dev_ != nullptr);
      _impl_.orientation_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_std_dev_ != nullptr);
      _impl_.linear_velocity_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.linear_acceleration_std_dev_ != nullptr);
      _impl_.linear_acceleration_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.angular_velocity_std_dev_ != nullptr);
      _impl_.angular_velocity_std_dev_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uncertainty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Point3D position_std_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D orientation_std_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uncertainty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Uncertainty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position_std_dev(this),
        _Internal::position_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation_std_dev(this),
        _Internal::orientation_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_velocity_std_dev(this),
        _Internal::linear_velocity_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::linear_acceleration_std_dev(this),
        _Internal::linear_acceleration_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::angular_velocity_std_dev(this),
        _Internal::angular_velocity_std_dev(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Uncertainty)
  return target;
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Uncertainty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Point3D position_std_dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_std_dev_);
    }

    // optional .apollo.common.Point3D orientation_std_dev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_std_dev_);
    }

    // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_acceleration_std_dev_);
    }

    // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angular_velocity_std_dev_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uncertainty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uncertainty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uncertainty::GetClassData() const { return &_class_data_; }

void Uncertainty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uncertainty *>(to)->MergeFrom(
      static_cast<const Uncertainty &>(from));
}


void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_position_std_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_orientation_std_dev());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_acceleration_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration_std_dev());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_angular_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity_std_dev());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::InternalSwap(Uncertainty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uncertainty, _impl_.angular_velocity_std_dev_)
      + sizeof(Uncertainty::_impl_.angular_velocity_std_dev_)
      - PROTOBUF_FIELD_OFFSET(Uncertainty, _impl_.position_std_dev_)>(
          reinterpret_cast<char*>(&_impl_.position_std_dev_),
          reinterpret_cast<char*>(&other->_impl_.position_std_dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uncertainty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2flocalization_2eproto[0]);
}

// ===================================================================

class LocalizationEstimate::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationEstimate>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const LocalizationEstimate* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::localization::Pose& pose(const LocalizationEstimate* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::localization::Uncertainty& uncertainty(const LocalizationEstimate* msg);
  static void set_has_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
LocalizationEstimate::_Internal::header(const LocalizationEstimate* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::localization::Pose&
LocalizationEstimate::_Internal::pose(const LocalizationEstimate* msg) {
  return *msg->_impl_.pose_;
}
const ::apollo::localization::Uncertainty&
LocalizationEstimate::_Internal::uncertainty(const LocalizationEstimate* msg) {
  return *msg->_impl_.uncertainty_;
}
void LocalizationEstimate::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LocalizationEstimate::clear_trajectory_point() {
  _impl_.trajectory_point_.Clear();
}
LocalizationEstimate::LocalizationEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.LocalizationEstimate)
}
LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){from._impl_.trajectory_point_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.uncertainty_){nullptr}
    , decltype(_impl_.measurement_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_pose()) {
    _impl_.pose_ = new ::apollo::localization::Pose(*from._impl_.pose_);
  }
  if (from._internal_has_uncertainty()) {
    _impl_.uncertainty_ = new ::apollo::localization::Uncertainty(*from._impl_.uncertainty_);
  }
  _impl_.measurement_time_ = from._impl_.measurement_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationEstimate)
}

inline void LocalizationEstimate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.uncertainty_){nullptr}
    , decltype(_impl_.measurement_time_){0}
  };
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationEstimate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalizationEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_point_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.uncertainty_;
}

void LocalizationEstimate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationEstimate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.uncertainty_ != nullptr);
      _impl_.uncertainty_->Clear();
    }
  }
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationEstimate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.Uncertainty uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncertainty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalizationEstimate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationEstimate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::uncertainty(this),
        _Internal::uncertainty(this).GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_measurement_time(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationEstimate)
  return target;
}

size_t LocalizationEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationEstimate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->_impl_.trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.localization.Pose pose = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pose_);
    }

    // optional .apollo.localization.Uncertainty uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uncertainty_);
    }

    // optional double measurement_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizationEstimate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalizationEstimate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizationEstimate::GetClassData() const { return &_class_data_; }

void LocalizationEstimate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalizationEstimate *>(to)->MergeFrom(
      static_cast<const LocalizationEstimate &>(from));
}


void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_point_.MergeFrom(from._impl_.trajectory_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::apollo::localization::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uncertainty()->::apollo::localization::Uncertainty::MergeFrom(from._internal_uncertainty());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {
  return true;
}

void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationEstimate, _impl_.measurement_time_)
      + sizeof(LocalizationEstimate::_impl_.measurement_time_)
      - PROTOBUF_FIELD_OFFSET(LocalizationEstimate, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationEstimate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2flocalization_2eproto[1]);
}

// ===================================================================

class LocalizationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const LocalizationStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fusion_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gnss_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lidar_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
LocalizationStatus::_Internal::header(const LocalizationStatus* msg) {
  return *msg->_impl_.header_;
}
void LocalizationStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocalizationStatus::LocalizationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.LocalizationStatus)
}
LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fusion_status_){}
    , decltype(_impl_.gnss_status_){}
    , decltype(_impl_.measurement_time_){}
    , decltype(_impl_.lidar_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.fusion_status_, &from._impl_.fusion_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lidar_status_) -
    reinterpret_cast<char*>(&_impl_.fusion_status_)) + sizeof(_impl_.lidar_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationStatus)
}

inline void LocalizationStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fusion_status_){0}
    , decltype(_impl_.gnss_status_){0}
    , decltype(_impl_.measurement_time_){0}
    , decltype(_impl_.lidar_status_){0}
  };
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalizationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void LocalizationStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalizationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.LocalizationStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.fusion_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lidar_status_) -
        reinterpret_cast<char*>(&_impl_.fusion_status_)) + sizeof(_impl_.lidar_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.MeasureState fusion_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::MeasureState_IsValid(val))) {
            _internal_set_fusion_status(static_cast<::apollo::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.MeasureState gnss_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::MeasureState_IsValid(val))) {
            _internal_set_gnss_status(static_cast<::apollo::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.MeasureState lidar_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::MeasureState_IsValid(val))) {
            _internal_set_lidar_status(static_cast<::apollo::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalizationStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fusion_status(), target);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gnss_status(), target);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_lidar_status(), target);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_measurement_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationStatus)
  return target;
}

size_t LocalizationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.LocalizationStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.localization.MeasureState fusion_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fusion_status());
    }

    // optional .apollo.localization.MeasureState gnss_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_status());
    }

    // optional double measurement_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.MeasureState lidar_status = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lidar_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizationStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalizationStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizationStatus::GetClassData() const { return &_class_data_; }

void LocalizationStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalizationStatus *>(to)->MergeFrom(
      static_cast<const LocalizationStatus &>(from));
}


void LocalizationStatus::MergeFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fusion_status_ = from._impl_.fusion_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gnss_status_ = from._impl_.gnss_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.lidar_status_ = from._impl_.lidar_status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {
  return true;
}

void LocalizationStatus::InternalSwap(LocalizationStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationStatus, _impl_.lidar_status_)
      + sizeof(LocalizationStatus::_impl_.lidar_status_)
      - PROTOBUF_FIELD_OFFSET(LocalizationStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2flocalization_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::Uncertainty*
Arena::CreateMaybeMessage< ::apollo::localization::Uncertainty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::Uncertainty >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::localization::LocalizationEstimate*
Arena::CreateMaybeMessage< ::apollo::localization::LocalizationEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::LocalizationEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::localization::LocalizationStatus*
Arena::CreateMaybeMessage< ::apollo::localization::LocalizationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::LocalizationStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
