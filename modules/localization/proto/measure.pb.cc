// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/measure.proto

#include "modules/localization/proto/measure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace localization {
PROTOBUF_CONSTEXPR IntegMeasure::IntegMeasure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.measure_covar_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.measure_type_)*/0
  , /*decltype(_impl_.frame_type_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.zone_id_)*/0
  , /*decltype(_impl_.is_have_variance_)*/false
  , /*decltype(_impl_.is_gnss_double_antenna_)*/false} {}
struct IntegMeasureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegMeasureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegMeasureDefaultTypeInternal() {}
  union {
    IntegMeasure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegMeasureDefaultTypeInternal _IntegMeasure_default_instance_;
}  // namespace localization
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2flocalization_2fproto_2fmeasure_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto = nullptr;

const uint32_t TableStruct_modules_2flocalization_2fproto_2fmeasure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.measure_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.frame_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.zone_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.is_have_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.is_gnss_double_antenna_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::IntegMeasure, _impl_.measure_covar_),
  0,
  3,
  4,
  1,
  2,
  5,
  6,
  7,
  8,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::apollo::localization::IntegMeasure)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::localization::_IntegMeasure_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2fmeasure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/localization/proto/measure.pro"
  "to\022\023apollo.localization\032!modules/common/"
  "proto/header.proto\032#modules/common/proto"
  "/geometry.proto\"\326\004\n\014IntegMeasure\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022C\n\014measu"
  "re_type\030\002 \001(\0162-.apollo.localization.Inte"
  "gMeasure.MeasureType\022\?\n\nframe_type\030\003 \001(\016"
  "2+.apollo.localization.IntegMeasure.Fram"
  "eType\022(\n\010position\030\004 \001(\0132\026.apollo.common."
  "Point3D\022(\n\010velocity\030\005 \001(\0132\026.apollo.commo"
  "n.Point3D\022\013\n\003yaw\030\006 \001(\001\022\017\n\007zone_id\030\007 \001(\005\022"
  "\030\n\020is_have_variance\030\010 \001(\010\022\036\n\026is_gnss_dou"
  "ble_antenna\030\t \001(\010\022\031\n\rmeasure_covar\030\n \003(\001"
  "B\002\020\001\"\232\001\n\013MeasureType\022\021\n\rGNSS_POS_ONLY\020\000\022"
  "\020\n\014GNSS_POS_VEL\020\001\022\017\n\013GNSS_POS_XY\020\002\022\021\n\rGN"
  "SS_VEL_ONLY\020\003\022\023\n\017POINT_CLOUD_POS\020\004\022\025\n\021OD"
  "OMETER_VEL_ONLY\020\005\022\026\n\022VEHICLE_CONSTRAINT\020"
  "\006\"5\n\tFrameType\022\007\n\003ENU\020\000\022\010\n\004ECEF\020\001\022\007\n\003UTM"
  "\020\002\022\014\n\010ODOMETER\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto = {
    false, false, 736, descriptor_table_protodef_modules_2flocalization_2fproto_2fmeasure_2eproto,
    "modules/localization/proto/measure.proto",
    &descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2fmeasure_2eproto::offsets,
    file_level_metadata_modules_2flocalization_2fproto_2fmeasure_2eproto, file_level_enum_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto,
    file_level_service_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_getter() {
  return &descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2flocalization_2fproto_2fmeasure_2eproto(&descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto);
namespace apollo {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_MeasureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto);
  return file_level_enum_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto[0];
}
bool IntegMeasure_MeasureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IntegMeasure_MeasureType IntegMeasure::GNSS_POS_ONLY;
constexpr IntegMeasure_MeasureType IntegMeasure::GNSS_POS_VEL;
constexpr IntegMeasure_MeasureType IntegMeasure::GNSS_POS_XY;
constexpr IntegMeasure_MeasureType IntegMeasure::GNSS_VEL_ONLY;
constexpr IntegMeasure_MeasureType IntegMeasure::POINT_CLOUD_POS;
constexpr IntegMeasure_MeasureType IntegMeasure::ODOMETER_VEL_ONLY;
constexpr IntegMeasure_MeasureType IntegMeasure::VEHICLE_CONSTRAINT;
constexpr IntegMeasure_MeasureType IntegMeasure::MeasureType_MIN;
constexpr IntegMeasure_MeasureType IntegMeasure::MeasureType_MAX;
constexpr int IntegMeasure::MeasureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_FrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto);
  return file_level_enum_descriptors_modules_2flocalization_2fproto_2fmeasure_2eproto[1];
}
bool IntegMeasure_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IntegMeasure_FrameType IntegMeasure::ENU;
constexpr IntegMeasure_FrameType IntegMeasure::ECEF;
constexpr IntegMeasure_FrameType IntegMeasure::UTM;
constexpr IntegMeasure_FrameType IntegMeasure::ODOMETER;
constexpr IntegMeasure_FrameType IntegMeasure::FrameType_MIN;
constexpr IntegMeasure_FrameType IntegMeasure::FrameType_MAX;
constexpr int IntegMeasure::FrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class IntegMeasure::_Internal {
 public:
  using HasBits = decltype(std::declval<IntegMeasure>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const IntegMeasure* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measure_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& position(const IntegMeasure* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& velocity(const IntegMeasure* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_zone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_have_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_gnss_double_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::common::Header&
IntegMeasure::_Internal::header(const IntegMeasure* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::Point3D&
IntegMeasure::_Internal::position(const IntegMeasure* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
IntegMeasure::_Internal::velocity(const IntegMeasure* msg) {
  return *msg->_impl_.velocity_;
}
void IntegMeasure::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void IntegMeasure::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void IntegMeasure::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
IntegMeasure::IntegMeasure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.IntegMeasure)
}
IntegMeasure::IntegMeasure(const IntegMeasure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.measure_covar_){from._impl_.measure_covar_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.measure_type_){}
    , decltype(_impl_.frame_type_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.zone_id_){}
    , decltype(_impl_.is_have_variance_){}
    , decltype(_impl_.is_gnss_double_antenna_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::common::Point3D(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.measure_type_, &from._impl_.measure_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_gnss_double_antenna_) -
    reinterpret_cast<char*>(&_impl_.measure_type_)) + sizeof(_impl_.is_gnss_double_antenna_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.IntegMeasure)
}

inline void IntegMeasure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.measure_covar_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.measure_type_){0}
    , decltype(_impl_.frame_type_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.zone_id_){0}
    , decltype(_impl_.is_have_variance_){false}
    , decltype(_impl_.is_gnss_double_antenna_){false}
  };
}

IntegMeasure::~IntegMeasure() {
  // @@protoc_insertion_point(destructor:apollo.localization.IntegMeasure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntegMeasure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.measure_covar_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void IntegMeasure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntegMeasure::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.IntegMeasure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.measure_covar_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.measure_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_have_variance_) -
        reinterpret_cast<char*>(&_impl_.measure_type_)) + sizeof(_impl_.is_have_variance_));
  }
  _impl_.is_gnss_double_antenna_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegMeasure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::IntegMeasure_MeasureType_IsValid(val))) {
            _internal_set_measure_type(static_cast<::apollo::localization::IntegMeasure_MeasureType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::IntegMeasure_FrameType_IsValid(val))) {
            _internal_set_frame_type(static_cast<::apollo::localization::IntegMeasure_FrameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_yaw(&has_bits);
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 zone_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_zone_id(&has_bits);
          _impl_.zone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_have_variance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_have_variance(&has_bits);
          _impl_.is_have_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_gnss_double_antenna = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_gnss_double_antenna(&has_bits);
          _impl_.is_gnss_double_antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double measure_covar = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_measure_covar(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_measure_covar(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegMeasure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.IntegMeasure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_measure_type(), target);
  }

  // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_frame_type(), target);
  }

  // optional .apollo.common.Point3D position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional double yaw = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_yaw(), target);
  }

  // optional int32 zone_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_zone_id(), target);
  }

  // optional bool is_have_variance = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_have_variance(), target);
  }

  // optional bool is_gnss_double_antenna = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_gnss_double_antenna(), target);
  }

  // repeated double measure_covar = 10 [packed = true];
  if (this->_internal_measure_covar_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_measure_covar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.IntegMeasure)
  return target;
}

size_t IntegMeasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.IntegMeasure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double measure_covar = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_measure_covar_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.Point3D position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D velocity = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .apollo.localization.IntegMeasure.MeasureType measure_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_measure_type());
    }

    // optional .apollo.localization.IntegMeasure.FrameType frame_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_type());
    }

    // optional double yaw = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 zone_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zone_id());
    }

    // optional bool is_have_variance = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_gnss_double_antenna = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntegMeasure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntegMeasure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntegMeasure::GetClassData() const { return &_class_data_; }

void IntegMeasure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntegMeasure *>(to)->MergeFrom(
      static_cast<const IntegMeasure &>(from));
}


void IntegMeasure::MergeFrom(const IntegMeasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.IntegMeasure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.measure_covar_.MergeFrom(from._impl_.measure_covar_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.measure_type_ = from._impl_.measure_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.frame_type_ = from._impl_.frame_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.yaw_ = from._impl_.yaw_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.zone_id_ = from._impl_.zone_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.is_have_variance_ = from._impl_.is_have_variance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_gnss_double_antenna(from._internal_is_gnss_double_antenna());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntegMeasure::CopyFrom(const IntegMeasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.IntegMeasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegMeasure::IsInitialized() const {
  return true;
}

void IntegMeasure::InternalSwap(IntegMeasure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.measure_covar_.InternalSwap(&other->_impl_.measure_covar_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegMeasure, _impl_.is_gnss_double_antenna_)
      + sizeof(IntegMeasure::_impl_.is_gnss_double_antenna_)
      - PROTOBUF_FIELD_OFFSET(IntegMeasure, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegMeasure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2fmeasure_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2fmeasure_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::IntegMeasure*
Arena::CreateMaybeMessage< ::apollo::localization::IntegMeasure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::IntegMeasure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
