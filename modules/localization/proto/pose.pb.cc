// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/pose.proto

#include "modules/localization/proto/pose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace localization {
PROTOBUF_CONSTEXPR Pose::Pose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.linear_velocity_)*/nullptr
  , /*decltype(_impl_.linear_acceleration_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.linear_acceleration_vrf_)*/nullptr
  , /*decltype(_impl_.angular_velocity_vrf_)*/nullptr
  , /*decltype(_impl_.euler_angles_)*/nullptr
  , /*decltype(_impl_.heading_)*/0} {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2flocalization_2fproto_2fpose_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2flocalization_2fproto_2fpose_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2fpose_2eproto = nullptr;

const uint32_t TableStruct_modules_2flocalization_2fproto_2fpose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.linear_acceleration_vrf_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.angular_velocity_vrf_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::Pose, _impl_.euler_angles_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::localization::Pose)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::localization::_Pose_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2fpose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/localization/proto/pose.proto\022"
  "\023apollo.localization\032#modules/common/pro"
  "to/geometry.proto\"\247\003\n\004Pose\022)\n\010position\030\001"
  " \001(\0132\027.apollo.common.PointENU\022.\n\013orienta"
  "tion\030\002 \001(\0132\031.apollo.common.Quaternion\022/\n"
  "\017linear_velocity\030\003 \001(\0132\026.apollo.common.P"
  "oint3D\0223\n\023linear_acceleration\030\004 \001(\0132\026.ap"
  "ollo.common.Point3D\0220\n\020angular_velocity\030"
  "\005 \001(\0132\026.apollo.common.Point3D\022\017\n\007heading"
  "\030\006 \001(\001\0227\n\027linear_acceleration_vrf\030\007 \001(\0132"
  "\026.apollo.common.Point3D\0224\n\024angular_veloc"
  "ity_vrf\030\010 \001(\0132\026.apollo.common.Point3D\022,\n"
  "\014euler_angles\030\t \001(\0132\026.apollo.common.Poin"
  "t3D"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto = {
    false, false, 523, descriptor_table_protodef_modules_2flocalization_2fproto_2fpose_2eproto,
    "modules/localization/proto/pose.proto",
    &descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2fpose_2eproto::offsets,
    file_level_metadata_modules_2flocalization_2fproto_2fpose_2eproto, file_level_enum_descriptors_modules_2flocalization_2fproto_2fpose_2eproto,
    file_level_service_descriptors_modules_2flocalization_2fproto_2fpose_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_getter() {
  return &descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2flocalization_2fproto_2fpose_2eproto(&descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto);
namespace apollo {
namespace localization {

// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._impl_._has_bits_);
  static const ::apollo::common::PointENU& position(const Pose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Quaternion& orientation(const Pose* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const Pose* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_acceleration(const Pose* msg);
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& angular_velocity(const Pose* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::common::Point3D& linear_acceleration_vrf(const Pose* msg);
  static void set_has_linear_acceleration_vrf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::Point3D& angular_velocity_vrf(const Pose* msg);
  static void set_has_angular_velocity_vrf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::Point3D& euler_angles(const Pose* msg);
  static void set_has_euler_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::common::PointENU&
Pose::_Internal::position(const Pose* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Quaternion&
Pose::_Internal::orientation(const Pose* msg) {
  return *msg->_impl_.orientation_;
}
const ::apollo::common::Point3D&
Pose::_Internal::linear_velocity(const Pose* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::apollo::common::Point3D&
Pose::_Internal::linear_acceleration(const Pose* msg) {
  return *msg->_impl_.linear_acceleration_;
}
const ::apollo::common::Point3D&
Pose::_Internal::angular_velocity(const Pose* msg) {
  return *msg->_impl_.angular_velocity_;
}
const ::apollo::common::Point3D&
Pose::_Internal::linear_acceleration_vrf(const Pose* msg) {
  return *msg->_impl_.linear_acceleration_vrf_;
}
const ::apollo::common::Point3D&
Pose::_Internal::angular_velocity_vrf(const Pose* msg) {
  return *msg->_impl_.angular_velocity_vrf_;
}
const ::apollo::common::Point3D&
Pose::_Internal::euler_angles(const Pose* msg) {
  return *msg->_impl_.euler_angles_;
}
void Pose::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Pose::clear_linear_velocity() {
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Pose::clear_linear_acceleration() {
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Pose::clear_angular_velocity() {
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Pose::clear_linear_acceleration_vrf() {
  if (_impl_.linear_acceleration_vrf_ != nullptr) _impl_.linear_acceleration_vrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Pose::clear_angular_velocity_vrf() {
  if (_impl_.angular_velocity_vrf_ != nullptr) _impl_.angular_velocity_vrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Pose::clear_euler_angles() {
  if (_impl_.euler_angles_ != nullptr) _impl_.euler_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.localization.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_vrf_){nullptr}
    , decltype(_impl_.angular_velocity_vrf_){nullptr}
    , decltype(_impl_.euler_angles_){nullptr}
    , decltype(_impl_.heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointENU(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _impl_.orientation_ = new ::apollo::common::Quaternion(*from._impl_.orientation_);
  }
  if (from._internal_has_linear_velocity()) {
    _impl_.linear_velocity_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_);
  }
  if (from._internal_has_linear_acceleration()) {
    _impl_.linear_acceleration_ = new ::apollo::common::Point3D(*from._impl_.linear_acceleration_);
  }
  if (from._internal_has_angular_velocity()) {
    _impl_.angular_velocity_ = new ::apollo::common::Point3D(*from._impl_.angular_velocity_);
  }
  if (from._internal_has_linear_acceleration_vrf()) {
    _impl_.linear_acceleration_vrf_ = new ::apollo::common::Point3D(*from._impl_.linear_acceleration_vrf_);
  }
  if (from._internal_has_angular_velocity_vrf()) {
    _impl_.angular_velocity_vrf_ = new ::apollo::common::Point3D(*from._impl_.angular_velocity_vrf_);
  }
  if (from._internal_has_euler_angles()) {
    _impl_.euler_angles_ = new ::apollo::common::Point3D(*from._impl_.euler_angles_);
  }
  _impl_.heading_ = from._impl_.heading_;
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Pose)
}

inline void Pose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_vrf_){nullptr}
    , decltype(_impl_.angular_velocity_vrf_){nullptr}
    , decltype(_impl_.euler_angles_){nullptr}
    , decltype(_impl_.heading_){0}
  };
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:apollo.localization.Pose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_vrf_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_vrf_;
  if (this != internal_default_instance()) delete _impl_.euler_angles_;
}

void Pose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.linear_acceleration_vrf_ != nullptr);
      _impl_.linear_acceleration_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.angular_velocity_vrf_ != nullptr);
      _impl_.angular_velocity_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.euler_angles_ != nullptr);
      _impl_.euler_angles_->Clear();
    }
  }
  _impl_.heading_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.PointENU position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity_vrf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D euler_angles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::linear_acceleration(this),
        _Internal::linear_acceleration(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading(), target);
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::linear_acceleration_vrf(this),
        _Internal::linear_acceleration_vrf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::angular_velocity_vrf(this),
        _Internal::angular_velocity_vrf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::euler_angles(this),
        _Internal::euler_angles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.PointENU position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Quaternion orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional .apollo.common.Point3D linear_velocity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_acceleration_);
    }

    // optional .apollo.common.Point3D angular_velocity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angular_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_acceleration_vrf_);
    }

    // optional .apollo.common.Point3D angular_velocity_vrf = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angular_velocity_vrf_);
    }

    // optional .apollo.common.Point3D euler_angles = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.euler_angles_);
    }

  }
  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::PointENU::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation()->::apollo::common::Quaternion::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_linear_acceleration_vrf()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration_vrf());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_angular_velocity_vrf()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity_vrf());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_euler_angles()->::apollo::common::Point3D::MergeFrom(from._internal_euler_angles());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_heading(from._internal_heading());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.heading_)
      + sizeof(Pose::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_getter, &descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto_once,
      file_level_metadata_modules_2flocalization_2fproto_2fpose_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::Pose*
Arena::CreateMaybeMessage< ::apollo::localization::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::localization::Pose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
