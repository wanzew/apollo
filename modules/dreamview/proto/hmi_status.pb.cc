// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_status.proto

#include "modules/dreamview/proto/hmi_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dreamview {
PROTOBUF_CONSTEXPR HMIStatus_ModulesEntry_DoNotUse::HMIStatus_ModulesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIStatus_ModulesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal _HMIStatus_ModulesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIStatus_MonitoredComponentsEntry_DoNotUse::HMIStatus_MonitoredComponentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIStatus_MonitoredComponentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIStatus_OtherComponentsEntry_DoNotUse::HMIStatus_OtherComponentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIStatus_OtherComponentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal _HMIStatus_OtherComponentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIStatus::HMIStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modes_)*/{}
  , /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_.vehicles_)*/{}
  , /*decltype(_impl_.modules_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.monitored_components_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.other_components_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.current_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_vehicle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.docker_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passenger_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.utm_zone_id_)*/0} {}
struct HMIStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIStatusDefaultTypeInternal() {}
  union {
    HMIStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIStatusDefaultTypeInternal _HMIStatus_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.modes_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.current_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.maps_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.current_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.vehicles_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.current_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.monitored_components_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.docker_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.utm_zone_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.passenger_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIStatus, _impl_.other_components_),
  5,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  3,
  6,
  4,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse)},
  { 30, 49, -1, sizeof(::apollo::dreamview::HMIStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dreamview::_HMIStatus_ModulesEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIStatus_OtherComponentsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIStatus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/dreamview/proto/hmi_status.pro"
  "to\022\020apollo.dreamview\032!modules/common/pro"
  "to/header.proto\032)modules/monitor/proto/s"
  "ystem_status.proto\"\250\005\n\tHMIStatus\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022\r\n\005modes"
  "\030\002 \003(\t\022\024\n\014current_mode\030\003 \001(\t\022\014\n\004maps\030\004 \003"
  "(\t\022\023\n\013current_map\030\005 \001(\t\022\020\n\010vehicles\030\006 \003("
  "\t\022\027\n\017current_vehicle\030\007 \001(\t\0229\n\007modules\030\010 "
  "\003(\0132(.apollo.dreamview.HMIStatus.Modules"
  "Entry\022R\n\024monitored_components\030\t \003(\01324.ap"
  "ollo.dreamview.HMIStatus.MonitoredCompon"
  "entsEntry\022\024\n\014docker_image\030\n \001(\t\022\023\n\013utm_z"
  "one_id\030\013 \001(\005\022\025\n\rpassenger_msg\030\014 \001(\t\022J\n\020o"
  "ther_components\030\r \003(\01320.apollo.dreamview"
  ".HMIStatus.OtherComponentsEntry\032.\n\014Modul"
  "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032"
  "[\n\030MonitoredComponentsEntry\022\013\n\003key\030\001 \001(\t"
  "\022.\n\005value\030\002 \001(\0132\037.apollo.monitor.Compone"
  "ntStatus:\0028\001\032W\n\024OtherComponentsEntry\022\013\n\003"
  "key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.apollo.monito"
  "r.ComponentStatus:\0028\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto = {
    false, false, 821, descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto,
    "modules/dreamview/proto/hmi_status.proto",
    &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto);
namespace apollo {
namespace dreamview {

// ===================================================================

HMIStatus_ModulesEntry_DoNotUse::HMIStatus_ModulesEntry_DoNotUse() {}
HMIStatus_ModulesEntry_DoNotUse::HMIStatus_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIStatus_ModulesEntry_DoNotUse::MergeFrom(const HMIStatus_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIStatus_ModulesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[0]);
}

// ===================================================================

HMIStatus_MonitoredComponentsEntry_DoNotUse::HMIStatus_MonitoredComponentsEntry_DoNotUse() {}
HMIStatus_MonitoredComponentsEntry_DoNotUse::HMIStatus_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIStatus_MonitoredComponentsEntry_DoNotUse::MergeFrom(const HMIStatus_MonitoredComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIStatus_MonitoredComponentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[1]);
}

// ===================================================================

HMIStatus_OtherComponentsEntry_DoNotUse::HMIStatus_OtherComponentsEntry_DoNotUse() {}
HMIStatus_OtherComponentsEntry_DoNotUse::HMIStatus_OtherComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIStatus_OtherComponentsEntry_DoNotUse::MergeFrom(const HMIStatus_OtherComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIStatus_OtherComponentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[2]);
}

// ===================================================================

class HMIStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const HMIStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_current_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_docker_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_utm_zone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_passenger_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
HMIStatus::_Internal::header(const HMIStatus* msg) {
  return *msg->_impl_.header_;
}
void HMIStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void HMIStatus::clear_monitored_components() {
  _impl_.monitored_components_.Clear();
}
void HMIStatus::clear_other_components() {
  _impl_.other_components_.Clear();
}
HMIStatus::HMIStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HMIStatus::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.HMIStatus)
}
HMIStatus::HMIStatus(const HMIStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modes_){from._impl_.modes_}
    , decltype(_impl_.maps_){from._impl_.maps_}
    , decltype(_impl_.vehicles_){from._impl_.vehicles_}
    , /*decltype(_impl_.modules_)*/{}
    , /*decltype(_impl_.monitored_components_)*/{}
    , /*decltype(_impl_.other_components_)*/{}
    , decltype(_impl_.current_mode_){}
    , decltype(_impl_.current_map_){}
    , decltype(_impl_.current_vehicle_){}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.passenger_msg_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.utm_zone_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.monitored_components_.MergeFrom(from._impl_.monitored_components_);
  _impl_.other_components_.MergeFrom(from._impl_.other_components_);
  _impl_.current_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_mode()) {
    _impl_.current_mode_.Set(from._internal_current_mode(), 
      GetArenaForAllocation());
  }
  _impl_.current_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_map()) {
    _impl_.current_map_.Set(from._internal_current_map(), 
      GetArenaForAllocation());
  }
  _impl_.current_vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_vehicle()) {
    _impl_.current_vehicle_.Set(from._internal_current_vehicle(), 
      GetArenaForAllocation());
  }
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docker_image()) {
    _impl_.docker_image_.Set(from._internal_docker_image(), 
      GetArenaForAllocation());
  }
  _impl_.passenger_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passenger_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passenger_msg()) {
    _impl_.passenger_msg_.Set(from._internal_passenger_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.utm_zone_id_ = from._impl_.utm_zone_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIStatus)
}

inline void HMIStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modes_){arena}
    , decltype(_impl_.maps_){arena}
    , decltype(_impl_.vehicles_){arena}
    , /*decltype(_impl_.modules_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.monitored_components_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.other_components_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.current_mode_){}
    , decltype(_impl_.current_map_){}
    , decltype(_impl_.current_vehicle_){}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.passenger_msg_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.utm_zone_id_){0}
  };
  _impl_.current_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_vehicle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_vehicle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passenger_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passenger_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMIStatus::~HMIStatus() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HMIStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modes_.~RepeatedPtrField();
  _impl_.maps_.~RepeatedPtrField();
  _impl_.vehicles_.~RepeatedPtrField();
  _impl_.modules_.Destruct();
  _impl_.modules_.~MapField();
  _impl_.monitored_components_.Destruct();
  _impl_.monitored_components_.~MapField();
  _impl_.other_components_.Destruct();
  _impl_.other_components_.~MapField();
  _impl_.current_mode_.Destroy();
  _impl_.current_map_.Destroy();
  _impl_.current_vehicle_.Destroy();
  _impl_.docker_image_.Destroy();
  _impl_.passenger_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void HMIStatus::ArenaDtor(void* object) {
  HMIStatus* _this = reinterpret_cast< HMIStatus* >(object);
  _this->_impl_.modules_.Destruct();
  _this->_impl_.monitored_components_.Destruct();
  _this->_impl_.other_components_.Destruct();
}
void HMIStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMIStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modes_.Clear();
  _impl_.maps_.Clear();
  _impl_.vehicles_.Clear();
  _impl_.modules_.Clear();
  _impl_.monitored_components_.Clear();
  _impl_.other_components_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.current_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.current_map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.current_vehicle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.docker_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.passenger_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_.utm_zone_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string modes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_modes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.modes");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string current_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_current_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.current_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_maps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.maps");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string current_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_current_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.current_map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string vehicles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vehicles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.vehicles");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string current_vehicle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_current_vehicle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.current_vehicle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> modules = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.monitored_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string docker_image = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_docker_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.docker_image");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 utm_zone_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_utm_zone_id(&has_bits);
          _impl_.utm_zone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string passenger_msg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_passenger_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIStatus.passenger_msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.monitor.ComponentStatus> other_components = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.other_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMIStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated string modes = 2;
  for (int i = 0, n = this->_internal_modes_size(); i < n; i++) {
    const auto& s = this->_internal_modes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.modes");
    target = stream->WriteString(2, s, target);
  }

  // optional string current_mode = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_mode().data(), static_cast<int>(this->_internal_current_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.current_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_current_mode(), target);
  }

  // repeated string maps = 4;
  for (int i = 0, n = this->_internal_maps_size(); i < n; i++) {
    const auto& s = this->_internal_maps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.maps");
    target = stream->WriteString(4, s, target);
  }

  // optional string current_map = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_map().data(), static_cast<int>(this->_internal_current_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.current_map");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_current_map(), target);
  }

  // repeated string vehicles = 6;
  for (int i = 0, n = this->_internal_vehicles_size(); i < n; i++) {
    const auto& s = this->_internal_vehicles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.vehicles");
    target = stream->WriteString(6, s, target);
  }

  // optional string current_vehicle = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_vehicle().data(), static_cast<int>(this->_internal_current_vehicle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.current_vehicle");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_current_vehicle(), target);
  }

  // map<string, bool> modules = 8;
  if (!this->_internal_modules().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = HMIStatus_ModulesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modules();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIStatus.ModulesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
  if (!this->_internal_monitored_components().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::monitor::ComponentStatus>;
    using WireHelper = HMIStatus_MonitoredComponentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_monitored_components();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIStatus.MonitoredComponentsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string docker_image = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docker_image().data(), static_cast<int>(this->_internal_docker_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.docker_image");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_docker_image(), target);
  }

  // optional int32 utm_zone_id = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_utm_zone_id(), target);
  }

  // optional string passenger_msg = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passenger_msg().data(), static_cast<int>(this->_internal_passenger_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIStatus.passenger_msg");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_passenger_msg(), target);
  }

  // map<string, .apollo.monitor.ComponentStatus> other_components = 13;
  if (!this->_internal_other_components().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::monitor::ComponentStatus>;
    using WireHelper = HMIStatus_OtherComponentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_other_components();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIStatus.OtherComponentsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIStatus)
  return target;
}

size_t HMIStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string modes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.modes_.size());
  for (int i = 0, n = _impl_.modes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.modes_.Get(i));
  }

  // repeated string maps = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.maps_.size());
  for (int i = 0, n = _impl_.maps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.maps_.Get(i));
  }

  // repeated string vehicles = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.vehicles_.size());
  for (int i = 0, n = _impl_.vehicles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.vehicles_.Get(i));
  }

  // map<string, bool> modules = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += HMIStatus_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_monitored_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >::const_iterator
      it = this->_internal_monitored_components().begin();
      it != this->_internal_monitored_components().end(); ++it) {
    total_size += HMIStatus_MonitoredComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.monitor.ComponentStatus> other_components = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >::const_iterator
      it = this->_internal_other_components().begin();
      it != this->_internal_other_components().end(); ++it) {
    total_size += HMIStatus_OtherComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string current_mode = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_mode());
    }

    // optional string current_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_map());
    }

    // optional string current_vehicle = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_vehicle());
    }

    // optional string docker_image = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docker_image());
    }

    // optional string passenger_msg = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passenger_msg());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional int32 utm_zone_id = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utm_zone_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMIStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HMIStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMIStatus::GetClassData() const { return &_class_data_; }

void HMIStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HMIStatus *>(to)->MergeFrom(
      static_cast<const HMIStatus &>(from));
}


void HMIStatus::MergeFrom(const HMIStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.modes_.MergeFrom(from._impl_.modes_);
  _impl_.maps_.MergeFrom(from._impl_.maps_);
  _impl_.vehicles_.MergeFrom(from._impl_.vehicles_);
  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.monitored_components_.MergeFrom(from._impl_.monitored_components_);
  _impl_.other_components_.MergeFrom(from._impl_.other_components_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_current_mode(from._internal_current_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_current_map(from._internal_current_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_current_vehicle(from._internal_current_vehicle());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_docker_image(from._internal_docker_image());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_passenger_msg(from._internal_passenger_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.utm_zone_id_ = from._impl_.utm_zone_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMIStatus::CopyFrom(const HMIStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIStatus::IsInitialized() const {
  return true;
}

void HMIStatus::InternalSwap(HMIStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.modes_.InternalSwap(&other->_impl_.modes_);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
  _impl_.vehicles_.InternalSwap(&other->_impl_.vehicles_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  _impl_.monitored_components_.InternalSwap(&other->_impl_.monitored_components_);
  _impl_.other_components_.InternalSwap(&other->_impl_.other_components_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_mode_, lhs_arena,
      &other->_impl_.current_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_map_, lhs_arena,
      &other->_impl_.current_map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_vehicle_, lhs_arena,
      &other->_impl_.current_vehicle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docker_image_, lhs_arena,
      &other->_impl_.docker_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passenger_msg_, lhs_arena,
      &other->_impl_.passenger_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HMIStatus, _impl_.utm_zone_id_)
      + sizeof(HMIStatus::_impl_.utm_zone_id_)
      - PROTOBUF_FIELD_OFFSET(HMIStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIStatus*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
