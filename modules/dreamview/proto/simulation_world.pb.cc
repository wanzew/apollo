// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto

#include "modules/dreamview/proto/simulation_world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dreamview {
PROTOBUF_CONSTEXPR PolygonPoint::PolygonPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gaussian_info_)*/nullptr
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct PolygonPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolygonPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolygonPointDefaultTypeInternal() {}
  union {
    PolygonPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolygonPointDefaultTypeInternal _PolygonPoint_default_instance_;
PROTOBUF_CONSTEXPR Prediction::Prediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicted_trajectory_)*/{}
  , /*decltype(_impl_.probability_)*/0} {}
struct PredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionDefaultTypeInternal() {}
  union {
    Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionDefaultTypeInternal _Prediction_default_instance_;
PROTOBUF_CONSTEXPR Decision::Decision(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_point_)*/{}
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.change_lane_type_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.stopreason_)*/1
  , /*decltype(_impl_.length_)*/2.8
  , /*decltype(_impl_.width_)*/1.4
  , /*decltype(_impl_.height_)*/1.8} {}
struct DecisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecisionDefaultTypeInternal() {}
  union {
    Decision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecisionDefaultTypeInternal _Decision_default_instance_;
PROTOBUF_CONSTEXPR Object::Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_point_)*/{}
  , /*decltype(_impl_.signal_set_)*/{}
  , /*decltype(_impl_.decision_)*/{}
  , /*decltype(_impl_.prediction_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_signal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obstacle_priority_)*/nullptr
  , /*decltype(_impl_.v2x_info_)*/nullptr
  , /*decltype(_impl_.interactive_tag_)*/nullptr
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.speed_acceleration_)*/0
  , /*decltype(_impl_.speed_jerk_)*/0
  , /*decltype(_impl_.spin_)*/0
  , /*decltype(_impl_.spin_acceleration_)*/0
  , /*decltype(_impl_.spin_jerk_)*/0
  , /*decltype(_impl_.speed_heading_)*/0
  , /*decltype(_impl_.kappa_)*/0
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.throttle_percentage_)*/0
  , /*decltype(_impl_.brake_percentage_)*/0
  , /*decltype(_impl_.steering_percentage_)*/0
  , /*decltype(_impl_.steering_angle_)*/0
  , /*decltype(_impl_.steering_ratio_)*/0
  , /*decltype(_impl_.disengage_type_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.yielded_obstacle_)*/false
  , /*decltype(_impl_.sub_type_)*/0
  , /*decltype(_impl_.dkappa_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.battery_percentage_)*/0
  , /*decltype(_impl_.gear_location_)*/0
  , /*decltype(_impl_.length_)*/2.8
  , /*decltype(_impl_.width_)*/1.4
  , /*decltype(_impl_.height_)*/1.8
  , /*decltype(_impl_.confidence_)*/1} {}
struct ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDefaultTypeInternal _Object_default_instance_;
PROTOBUF_CONSTEXPR DelaysInMs::DelaysInMs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chassis_)*/0
  , /*decltype(_impl_.localization_)*/0
  , /*decltype(_impl_.perception_obstacle_)*/0
  , /*decltype(_impl_.planning_)*/0
  , /*decltype(_impl_.prediction_)*/0
  , /*decltype(_impl_.traffic_light_)*/0
  , /*decltype(_impl_.control_)*/0} {}
struct DelaysInMsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelaysInMsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelaysInMsDefaultTypeInternal() {}
  union {
    DelaysInMs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelaysInMsDefaultTypeInternal _DelaysInMs_default_instance_;
PROTOBUF_CONSTEXPR RoutePath::RoutePath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutePathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutePathDefaultTypeInternal() {}
  union {
    RoutePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutePathDefaultTypeInternal _RoutePath_default_instance_;
PROTOBUF_CONSTEXPR Latency::Latency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.total_time_ms_)*/0} {}
struct LatencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyDefaultTypeInternal() {}
  union {
    Latency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyDefaultTypeInternal _Latency_default_instance_;
PROTOBUF_CONSTEXPR MapElementIds::MapElementIds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_)*/{}
  , /*decltype(_impl_.crosswalk_)*/{}
  , /*decltype(_impl_.junction_)*/{}
  , /*decltype(_impl_.signal_)*/{}
  , /*decltype(_impl_.stop_sign_)*/{}
  , /*decltype(_impl_.yield_)*/{}
  , /*decltype(_impl_.overlap_)*/{}
  , /*decltype(_impl_.road_)*/{}
  , /*decltype(_impl_.clear_area_)*/{}
  , /*decltype(_impl_.parking_space_)*/{}
  , /*decltype(_impl_.speed_bump_)*/{}
  , /*decltype(_impl_.pnc_junction_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapElementIdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapElementIdsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapElementIdsDefaultTypeInternal() {}
  union {
    MapElementIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapElementIdsDefaultTypeInternal _MapElementIds_default_instance_;
PROTOBUF_CONSTEXPR ControlData::ControlData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_target_point_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.station_error_)*/0
  , /*decltype(_impl_.lateral_error_)*/0
  , /*decltype(_impl_.heading_error_)*/0} {}
struct ControlDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDataDefaultTypeInternal() {}
  union {
    ControlData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDataDefaultTypeInternal _ControlData_default_instance_;
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR SensorMeasurements::SensorMeasurements(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_measurement_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMeasurementsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMeasurementsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMeasurementsDefaultTypeInternal() {}
  union {
    SensorMeasurements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMeasurementsDefaultTypeInternal _SensorMeasurements_default_instance_;
PROTOBUF_CONSTEXPR SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimulationWorld_LatencyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal _SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SimulationWorld_StoriesEntry_DoNotUse::SimulationWorld_StoriesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SimulationWorld_StoriesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationWorld_StoriesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationWorld_StoriesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimulationWorld_StoriesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationWorld_StoriesEntry_DoNotUseDefaultTypeInternal _SimulationWorld_StoriesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SimulationWorld_SensorMeasurementsEntry_DoNotUse::SimulationWorld_SensorMeasurementsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SimulationWorld_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationWorld_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationWorld_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SimulationWorld_SensorMeasurementsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationWorld_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal _SimulationWorld_SensorMeasurementsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SimulationWorld::SimulationWorld(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/{}
  , /*decltype(_impl_.route_path_)*/{}
  , /*decltype(_impl_.planning_trajectory_)*/{}
  , /*decltype(_impl_.notification_)*/{}
  , /*decltype(_impl_.latency_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.navigation_path_)*/{}
  , /*decltype(_impl_.perceived_signal_)*/{}
  , /*decltype(_impl_.stories_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sensor_measurements_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.engage_advice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auto_driving_car_)*/nullptr
  , /*decltype(_impl_.traffic_signal_)*/nullptr
  , /*decltype(_impl_.main_stop_)*/nullptr
  , /*decltype(_impl_.main_decision_)*/nullptr
  , /*decltype(_impl_.delay_)*/nullptr
  , /*decltype(_impl_.monitor_)*/nullptr
  , /*decltype(_impl_.map_element_ids_)*/nullptr
  , /*decltype(_impl_.planning_data_)*/nullptr
  , /*decltype(_impl_.gps_)*/nullptr
  , /*decltype(_impl_.lane_marker_)*/nullptr
  , /*decltype(_impl_.control_data_)*/nullptr
  , /*decltype(_impl_.shadow_localization_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.routing_time_)*/0
  , /*decltype(_impl_.speed_limit_)*/0
  , /*decltype(_impl_.sequence_num_)*/0u
  , /*decltype(_impl_.is_siren_on_)*/false
  , /*decltype(_impl_.map_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.map_radius_)*/0
  , /*decltype(_impl_.is_rss_safe_)*/true} {}
struct SimulationWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationWorldDefaultTypeInternal() {}
  union {
    SimulationWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationWorldDefaultTypeInternal _SimulationWorld_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _impl_.gaussian_info_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _impl_.predicted_trajectory_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.stopreason_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _impl_.change_lane_type_),
  4,
  ~0u,
  0,
  1,
  2,
  3,
  6,
  8,
  9,
  10,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.speed_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.speed_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.spin_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.spin_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.spin_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.speed_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.signal_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.current_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.yielded_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.steering_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.steering_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.battery_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.gear_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.disengage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.prediction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.obstacle_priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _impl_.v2x_info_),
  0,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  32,
  33,
  34,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  28,
  ~0u,
  1,
  18,
  ~0u,
  26,
  19,
  20,
  21,
  22,
  23,
  30,
  31,
  24,
  25,
  27,
  ~0u,
  35,
  2,
  4,
  29,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.planning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.prediction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _impl_.control_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::RoutePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::RoutePath, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _impl_.total_time_ms_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.road_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.parking_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.speed_bump_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _impl_.pnc_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_.station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_.lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_.heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _impl_.current_target_point_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _impl_.item_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SensorMeasurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SensorMeasurements, _impl_.sensor_measurement_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.sequence_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.auto_driving_car_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.traffic_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.route_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.routing_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.planning_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.main_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.main_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.monitor_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.notification_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.map_element_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.map_hash_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.map_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.planning_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.gps_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.control_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.navigation_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.is_rss_safe_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.shadow_localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.perceived_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.stories_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.sensor_measurements_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _impl_.is_siren_on_),
  13,
  16,
  ~0u,
  1,
  2,
  ~0u,
  14,
  ~0u,
  3,
  4,
  15,
  5,
  6,
  ~0u,
  0,
  ~0u,
  7,
  18,
  19,
  8,
  9,
  10,
  11,
  ~0u,
  20,
  12,
  ~0u,
  ~0u,
  ~0u,
  17,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::dreamview::PolygonPoint)},
  { 14, 22, -1, sizeof(::apollo::dreamview::Prediction)},
  { 24, 42, -1, sizeof(::apollo::dreamview::Decision)},
  { 54, 100, -1, sizeof(::apollo::dreamview::Object)},
  { 140, 153, -1, sizeof(::apollo::dreamview::DelaysInMs)},
  { 160, -1, -1, sizeof(::apollo::dreamview::RoutePath)},
  { 167, 175, -1, sizeof(::apollo::dreamview::Latency)},
  { 177, -1, -1, sizeof(::apollo::dreamview::MapElementIds)},
  { 195, 206, -1, sizeof(::apollo::dreamview::ControlData)},
  { 211, 219, -1, sizeof(::apollo::dreamview::Notification)},
  { 221, -1, -1, sizeof(::apollo::dreamview::SensorMeasurements)},
  { 228, 236, -1, sizeof(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse)},
  { 238, 246, -1, sizeof(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse)},
  { 248, 256, -1, sizeof(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse)},
  { 258, 294, -1, sizeof(::apollo::dreamview::SimulationWorld)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dreamview::_PolygonPoint_default_instance_._instance,
  &::apollo::dreamview::_Prediction_default_instance_._instance,
  &::apollo::dreamview::_Decision_default_instance_._instance,
  &::apollo::dreamview::_Object_default_instance_._instance,
  &::apollo::dreamview::_DelaysInMs_default_instance_._instance,
  &::apollo::dreamview::_RoutePath_default_instance_._instance,
  &::apollo::dreamview::_Latency_default_instance_._instance,
  &::apollo::dreamview::_MapElementIds_default_instance_._instance,
  &::apollo::dreamview::_ControlData_default_instance_._instance,
  &::apollo::dreamview::_Notification_default_instance_._instance,
  &::apollo::dreamview::_SensorMeasurements_default_instance_._instance,
  &::apollo::dreamview::_SimulationWorld_LatencyEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_SimulationWorld_StoriesEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_SimulationWorld_SensorMeasurementsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_SimulationWorld_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/dreamview/proto/simulation_wor"
  "ld.proto\022\020apollo.dreamview\032\"modules/canb"
  "us/proto/chassis.proto\0322modules/common/m"
  "onitor_log/proto/monitor_log.proto\032$modu"
  "les/common/proto/pnc_point.proto\0322module"
  "s/perception/proto/perception_obstacle.p"
  "roto\032.modules/planning/proto/planning_in"
  "ternal.proto\032&modules/prediction/proto/f"
  "eature.proto\032#modules/routing/proto/rout"
  "ing.proto\"f\n\014PolygonPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001"
  "y\030\002 \001(\001\022\014\n\001z\030\003 \001(\001:\0010\0222\n\rgaussian_info\030\004"
  " \001(\0132\033.apollo.common.GaussianInfo\"_\n\nPre"
  "diction\022\023\n\013probability\030\001 \001(\001\022<\n\024predicte"
  "d_trajectory\030\002 \003(\0132\036.apollo.dreamview.Po"
  "lygonPoint\"\304\006\n\010Decision\0225\n\004type\030\001 \001(\0162\037."
  "apollo.dreamview.Decision.Type:\006IGNORE\0225"
  "\n\rpolygon_point\030\002 \003(\0132\036.apollo.dreamview"
  ".PolygonPoint\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitu"
  "de\030\004 \001(\001\022\021\n\tlongitude\030\005 \001(\001\022\022\n\nposition_"
  "x\030\006 \001(\001\022\022\n\nposition_y\030\007 \001(\001\022\023\n\006length\030\010 "
  "\001(\001:\0032.8\022\022\n\005width\030\t \001(\001:\0031.4\022\023\n\006height\030\n"
  " \001(\001:\0031.8\022=\n\nstopReason\030\013 \001(\0162).apollo.d"
  "reamview.Decision.StopReasonCode\0228\n\020chan"
  "ge_lane_type\030\014 \001(\0162\036.apollo.routing.Chan"
  "geLaneType\"Z\n\004Type\022\n\n\006IGNORE\020\000\022\010\n\004STOP\020\001"
  "\022\t\n\005NUDGE\020\002\022\t\n\005YIELD\020\003\022\014\n\010OVERTAKE\020\004\022\n\n\006"
  "FOLLOW\020\005\022\014\n\010SIDEPASS\020\006\"\330\002\n\016StopReasonCod"
  "e\022\034\n\030STOP_REASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_"
  "REASON_DESTINATION\020\002\022\032\n\026STOP_REASON_PEDE"
  "STRIAN\020\003\022\030\n\024STOP_REASON_OBSTACLE\020\004\022\026\n\022ST"
  "OP_REASON_SIGNAL\020d\022\031\n\025STOP_REASON_STOP_S"
  "IGN\020e\022\032\n\026STOP_REASON_YIELD_SIGN\020f\022\032\n\026STO"
  "P_REASON_CLEAR_ZONE\020g\022\031\n\025STOP_REASON_CRO"
  "SSWALK\020h\022\031\n\025STOP_REASON_EMERGENCY\020i\022\031\n\025S"
  "TOP_REASON_NOT_READY\020j\022\031\n\025STOP_REASON_PU"
  "LL_OVER\020k\"\314\014\n\006Object\022\n\n\002id\030\001 \001(\t\0225\n\rpoly"
  "gon_point\030\002 \003(\0132\036.apollo.dreamview.Polyg"
  "onPoint\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitude\030\004 \001"
  "(\001\022\021\n\tlongitude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001("
  "\001\022\022\n\nposition_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032"
  ".8\022\022\n\005width\030\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\003"
  "1.8\022\r\n\005speed\030\013 \001(\001\022\032\n\022speed_acceleration"
  "\030\014 \001(\001\022\022\n\nspeed_jerk\030\r \001(\001\022\014\n\004spin\030\016 \001(\001"
  "\022\031\n\021spin_acceleration\030\017 \001(\001\022\021\n\tspin_jerk"
  "\030\020 \001(\001\022\025\n\rspeed_heading\030\021 \001(\001\022\r\n\005kappa\030\022"
  " \001(\001\022\016\n\006dkappa\030# \001(\001\022\022\n\nsignal_set\030\023 \003(\t"
  "\022\026\n\016current_signal\030\024 \001(\t\022\025\n\rtimestamp_se"
  "c\030\025 \001(\001\022,\n\010decision\030\026 \003(\0132\032.apollo.dream"
  "view.Decision\022\037\n\020yielded_obstacle\030  \001(\010:"
  "\005false\022\033\n\023throttle_percentage\030\027 \001(\001\022\030\n\020b"
  "rake_percentage\030\030 \001(\001\022\033\n\023steering_percen"
  "tage\030\031 \001(\001\022\026\n\016steering_angle\030\032 \001(\001\022\026\n\016st"
  "eering_ratio\030\033 \001(\001\022\032\n\022battery_percentage"
  "\030& \001(\005\022:\n\rgear_location\030\' \001(\0162#.apollo.c"
  "anbus.Chassis.GearPosition\022>\n\016disengage_"
  "type\030\034 \001(\0162&.apollo.dreamview.Object.Dis"
  "engageType\022+\n\004type\030\035 \001(\0162\035.apollo.dreamv"
  "iew.Object.Type\022\?\n\010sub_type\030\" \001(\0162-.apol"
  "lo.perception.PerceptionObstacle.SubType"
  "\0220\n\nprediction\030\036 \003(\0132\034.apollo.dreamview."
  "Prediction\022\025\n\nconfidence\030\037 \001(\001:\0011\022>\n\021obs"
  "tacle_priority\030! \001(\0132#.apollo.prediction"
  ".ObstaclePriority\022B\n\017interactive_tag\030( \001"
  "(\0132).apollo.prediction.ObstacleInteracti"
  "veTag\022J\n\006source\030$ \001(\0162,.apollo.perceptio"
  "n.PerceptionObstacle.Source:\014HOST_VEHICL"
  "E\0223\n\010v2x_info\030% \001(\0132!.apollo.perception."
  "V2XInformation\"\304\001\n\rDisengageType\022\022\n\016DISE"
  "NGAGE_NONE\020\000\022\025\n\021DISENGAGE_UNKNOWN\020\001\022\024\n\020D"
  "ISENGAGE_MANUAL\020\002\022\027\n\023DISENGAGE_EMERGENCY"
  "\020\003\022\035\n\031DISENGAGE_AUTO_STEER_ONLY\020\004\022\035\n\031DIS"
  "ENGAGE_AUTO_SPEED_ONLY\020\005\022\033\n\027DISENGAGE_CH"
  "ASSIS_ERROR\020\006\"\200\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017U"
  "NKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022"
  "\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020"
  "\005\022\013\n\007VIRTUAL\020\006\022\010\n\004CIPV\020\007\"\236\001\n\nDelaysInMs\022"
  "\017\n\007chassis\030\001 \001(\001\022\024\n\014localization\030\003 \001(\001\022\033"
  "\n\023perception_obstacle\030\004 \001(\001\022\020\n\010planning\030"
  "\005 \001(\001\022\022\n\nprediction\030\007 \001(\001\022\025\n\rtraffic_lig"
  "ht\030\010 \001(\001\022\017\n\007control\030\t \001(\001\":\n\tRoutePath\022-"
  "\n\005point\030\001 \003(\0132\036.apollo.dreamview.Polygon"
  "Point\"7\n\007Latency\022\025\n\rtimestamp_sec\030\001 \001(\001\022"
  "\025\n\rtotal_time_ms\030\002 \001(\001\"\350\001\n\rMapElementIds"
  "\022\014\n\004lane\030\001 \003(\t\022\021\n\tcrosswalk\030\002 \003(\t\022\020\n\010jun"
  "ction\030\003 \003(\t\022\016\n\006signal\030\004 \003(\t\022\021\n\tstop_sign"
  "\030\005 \003(\t\022\r\n\005yield\030\006 \003(\t\022\017\n\007overlap\030\007 \003(\t\022\014"
  "\n\004road\030\010 \003(\t\022\022\n\nclear_area\030\t \003(\t\022\025\n\rpark"
  "ing_space\030\n \003(\t\022\022\n\nspeed_bump\030\013 \003(\t\022\024\n\014p"
  "nc_junction\030\014 \003(\t\"\247\001\n\013ControlData\022\025\n\rtim"
  "estamp_sec\030\001 \001(\001\022\025\n\rstation_error\030\002 \001(\001\022"
  "\025\n\rlateral_error\030\003 \001(\001\022\025\n\rheading_error\030"
  "\004 \001(\001\022<\n\024current_target_point\030\005 \001(\0132\036.ap"
  "ollo.common.TrajectoryPoint\"^\n\014Notificat"
  "ion\022\025\n\rtimestamp_sec\030\001 \001(\001\0227\n\004item\030\002 \001(\013"
  "2).apollo.common.monitor.MonitorMessageI"
  "tem\"J\n\022SensorMeasurements\0224\n\022sensor_meas"
  "urement\030\001 \003(\0132\030.apollo.dreamview.Object\""
  "\253\014\n\017SimulationWorld\022\021\n\ttimestamp\030\001 \001(\001\022\024"
  "\n\014sequence_num\030\002 \001(\r\022(\n\006object\030\003 \003(\0132\030.a"
  "pollo.dreamview.Object\0222\n\020auto_driving_c"
  "ar\030\004 \001(\0132\030.apollo.dreamview.Object\0220\n\016tr"
  "affic_signal\030\005 \001(\0132\030.apollo.dreamview.Ob"
  "ject\022/\n\nroute_path\030\006 \003(\0132\033.apollo.dreamv"
  "iew.RoutePath\022\024\n\014routing_time\030\007 \001(\001\0225\n\023p"
  "lanning_trajectory\030\010 \003(\0132\030.apollo.dreamv"
  "iew.Object\022/\n\tmain_stop\030\t \001(\0132\030.apollo.d"
  "reamview.ObjectB\002\030\001\022/\n\rmain_decision\030\n \001"
  "(\0132\030.apollo.dreamview.Object\022\023\n\013speed_li"
  "mit\030\013 \001(\001\022+\n\005delay\030\014 \001(\0132\034.apollo.dreamv"
  "iew.DelaysInMs\022:\n\007monitor\030\r \001(\0132%.apollo"
  ".common.monitor.MonitorMessageB\002\030\001\0224\n\014no"
  "tification\030\016 \003(\0132\036.apollo.dreamview.Noti"
  "fication\022\025\n\rengage_advice\030\017 \001(\t\022\?\n\007laten"
  "cy\030\020 \003(\0132..apollo.dreamview.SimulationWo"
  "rld.LatencyEntry\0228\n\017map_element_ids\030\021 \001("
  "\0132\037.apollo.dreamview.MapElementIds\022\020\n\010ma"
  "p_hash\030\022 \001(\004\022\022\n\nmap_radius\030\023 \001(\001\022=\n\rplan"
  "ning_data\030\024 \001(\0132&.apollo.planning_intern"
  "al.PlanningData\022%\n\003gps\030\025 \001(\0132\030.apollo.dr"
  "eamview.Object\0223\n\013lane_marker\030\026 \001(\0132\036.ap"
  "ollo.perception.LaneMarkers\0223\n\014control_d"
  "ata\030\027 \001(\0132\035.apollo.dreamview.ControlData"
  "\022,\n\017navigation_path\030\030 \003(\0132\023.apollo.commo"
  "n.Path\022\031\n\013is_rss_safe\030\031 \001(\010:\004true\0225\n\023sha"
  "dow_localization\030\032 \001(\0132\030.apollo.dreamvie"
  "w.Object\0222\n\020perceived_signal\030\033 \003(\0132\030.apo"
  "llo.dreamview.Object\022\?\n\007stories\030\034 \003(\0132.."
  "apollo.dreamview.SimulationWorld.Stories"
  "Entry\022V\n\023sensor_measurements\030\035 \003(\01329.apo"
  "llo.dreamview.SimulationWorld.SensorMeas"
  "urementsEntry\022\032\n\013is_siren_on\030\036 \001(\010:\005fals"
  "e\032I\n\014LatencyEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030"
  "\002 \001(\0132\031.apollo.dreamview.Latency:\0028\001\032.\n\014"
  "StoriesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010"
  ":\0028\001\032_\n\027SensorMeasurementsEntry\022\013\n\003key\030\001"
  " \001(\t\0223\n\005value\030\002 \001(\0132$.apollo.dreamview.S"
  "ensorMeasurements:\0028\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_deps[7] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto = {
    false, false, 5461, descriptor_table_protodef_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto,
    "modules/dreamview/proto/simulation_world.proto",
    &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_deps, 7, 15,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[0];
}
bool Decision_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Decision_Type Decision::IGNORE;
constexpr Decision_Type Decision::STOP;
constexpr Decision_Type Decision::NUDGE;
constexpr Decision_Type Decision::YIELD;
constexpr Decision_Type Decision::OVERTAKE;
constexpr Decision_Type Decision::FOLLOW;
constexpr Decision_Type Decision::SIDEPASS;
constexpr Decision_Type Decision::Type_MIN;
constexpr Decision_Type Decision::Type_MAX;
constexpr int Decision::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_StopReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[1];
}
bool Decision_StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Decision_StopReasonCode Decision::STOP_REASON_HEAD_VEHICLE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_DESTINATION;
constexpr Decision_StopReasonCode Decision::STOP_REASON_PEDESTRIAN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_OBSTACLE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_SIGNAL;
constexpr Decision_StopReasonCode Decision::STOP_REASON_STOP_SIGN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_YIELD_SIGN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_CLEAR_ZONE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_CROSSWALK;
constexpr Decision_StopReasonCode Decision::STOP_REASON_EMERGENCY;
constexpr Decision_StopReasonCode Decision::STOP_REASON_NOT_READY;
constexpr Decision_StopReasonCode Decision::STOP_REASON_PULL_OVER;
constexpr Decision_StopReasonCode Decision::StopReasonCode_MIN;
constexpr Decision_StopReasonCode Decision::StopReasonCode_MAX;
constexpr int Decision::StopReasonCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_DisengageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[2];
}
bool Object_DisengageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Object_DisengageType Object::DISENGAGE_NONE;
constexpr Object_DisengageType Object::DISENGAGE_UNKNOWN;
constexpr Object_DisengageType Object::DISENGAGE_MANUAL;
constexpr Object_DisengageType Object::DISENGAGE_EMERGENCY;
constexpr Object_DisengageType Object::DISENGAGE_AUTO_STEER_ONLY;
constexpr Object_DisengageType Object::DISENGAGE_AUTO_SPEED_ONLY;
constexpr Object_DisengageType Object::DISENGAGE_CHASSIS_ERROR;
constexpr Object_DisengageType Object::DisengageType_MIN;
constexpr Object_DisengageType Object::DisengageType_MAX;
constexpr int Object::DisengageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[3];
}
bool Object_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Object_Type Object::UNKNOWN;
constexpr Object_Type Object::UNKNOWN_MOVABLE;
constexpr Object_Type Object::UNKNOWN_UNMOVABLE;
constexpr Object_Type Object::PEDESTRIAN;
constexpr Object_Type Object::BICYCLE;
constexpr Object_Type Object::VEHICLE;
constexpr Object_Type Object::VIRTUAL;
constexpr Object_Type Object::CIPV;
constexpr Object_Type Object::Type_MIN;
constexpr Object_Type Object::Type_MAX;
constexpr int Object::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PolygonPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PolygonPoint>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::GaussianInfo& gaussian_info(const PolygonPoint* msg);
  static void set_has_gaussian_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::GaussianInfo&
PolygonPoint::_Internal::gaussian_info(const PolygonPoint* msg) {
  return *msg->_impl_.gaussian_info_;
}
void PolygonPoint::clear_gaussian_info() {
  if (_impl_.gaussian_info_ != nullptr) _impl_.gaussian_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PolygonPoint::PolygonPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.PolygonPoint)
}
PolygonPoint::PolygonPoint(const PolygonPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gaussian_info()) {
    _impl_.gaussian_info_ = new ::apollo::common::GaussianInfo(*from._impl_.gaussian_info_);
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PolygonPoint)
}

inline void PolygonPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

PolygonPoint::~PolygonPoint() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PolygonPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolygonPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gaussian_info_;
}

void PolygonPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolygonPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PolygonPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.gaussian_info_ != nullptr);
    _impl_.gaussian_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.GaussianInfo gaussian_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolygonPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PolygonPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gaussian_info(this),
        _Internal::gaussian_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PolygonPoint)
  return target;
}

size_t PolygonPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PolygonPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.GaussianInfo gaussian_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gaussian_info_);
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolygonPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolygonPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolygonPoint::GetClassData() const { return &_class_data_; }

void PolygonPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolygonPoint *>(to)->MergeFrom(
      static_cast<const PolygonPoint &>(from));
}


void PolygonPoint::MergeFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PolygonPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from._internal_gaussian_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.z_ = from._impl_.z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolygonPoint::CopyFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonPoint::IsInitialized() const {
  return true;
}

void PolygonPoint::InternalSwap(PolygonPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonPoint, _impl_.z_)
      + sizeof(PolygonPoint::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(PolygonPoint, _impl_.gaussian_info_)>(
          reinterpret_cast<char*>(&_impl_.gaussian_info_),
          reinterpret_cast<char*>(&other->_impl_.gaussian_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[0]);
}

// ===================================================================

class Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<Prediction>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Prediction::Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Prediction)
}
Prediction::Prediction(const Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicted_trajectory_){from._impl_.predicted_trajectory_}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Prediction)
}

inline void Prediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicted_trajectory_){arena}
    , decltype(_impl_.probability_){0}
  };
}

Prediction::~Prediction() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Prediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predicted_trajectory_.~RepeatedPtrField();
}

void Prediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Prediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predicted_trajectory_.Clear();
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Prediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Prediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predicted_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_predicted_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Prediction)
  return target;
}

size_t Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Prediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  total_size += 1UL * this->_internal_predicted_trajectory_size();
  for (const auto& msg : this->_impl_.predicted_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Prediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prediction::GetClassData() const { return &_class_data_; }

void Prediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Prediction *>(to)->MergeFrom(
      static_cast<const Prediction &>(from));
}


void Prediction::MergeFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.predicted_trajectory_.MergeFrom(from._impl_.predicted_trajectory_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prediction::CopyFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prediction::IsInitialized() const {
  return true;
}

void Prediction::InternalSwap(Prediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.predicted_trajectory_.InternalSwap(&other->_impl_.predicted_trajectory_);
  swap(_impl_.probability_, other->_impl_.probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[1]);
}

// ===================================================================

class Decision::_Internal {
 public:
  using HasBits = decltype(std::declval<Decision>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stopreason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Decision::Decision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Decision)
}
Decision::Decision(const Decision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){from._impl_.polygon_point_}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.change_lane_type_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.stopreason_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heading_, &from._impl_.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Decision)
}

inline void Decision::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){arena}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.change_lane_type_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.stopreason_){1}
    , decltype(_impl_.length_){2.8}
    , decltype(_impl_.width_){1.4}
    , decltype(_impl_.height_){1.8}
  };
}

Decision::~Decision() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Decision)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_point_.~RepeatedPtrField();
}

void Decision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Decision)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_y_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.position_y_));
    _impl_.stopreason_ = 1;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.length_ = 2.8;
    _impl_.width_ = 1.4;
    _impl_.height_ = 1.8;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decision::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Decision_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::dreamview::Decision_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 8 [default = 2.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 9 [default = 1.4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 10 [default = 1.8];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Decision_StopReasonCode_IsValid(val))) {
            _internal_set_stopreason(static_cast<::apollo::dreamview::Decision_StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decision::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Decision)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_height(), target);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_stopreason(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Decision)
  return target;
}

size_t Decision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Decision)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->_impl_.polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double heading = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

    // optional double position_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stopreason());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double length = 8 [default = 2.8];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Decision::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decision::GetClassData() const { return &_class_data_; }

void Decision::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Decision *>(to)->MergeFrom(
      static_cast<const Decision &>(from));
}


void Decision::MergeFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Decision)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_point_.MergeFrom(from._impl_.polygon_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.longitude_ = from._impl_.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.change_lane_type_ = from._impl_.change_lane_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.stopreason_ = from._impl_.stopreason_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.height_ = from._impl_.height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decision::CopyFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision::IsInitialized() const {
  return true;
}

void Decision::InternalSwap(Decision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polygon_point_.InternalSwap(&other->_impl_.polygon_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decision, _impl_.position_y_)
      + sizeof(Decision::_impl_.position_y_)
      - PROTOBUF_FIELD_OFFSET(Decision, _impl_.heading_)>(
          reinterpret_cast<char*>(&_impl_.heading_),
          reinterpret_cast<char*>(&other->_impl_.heading_));
  swap(_impl_.stopreason_, other->_impl_.stopreason_);
  swap(_impl_.length_, other->_impl_.length_);
  swap(_impl_.width_, other->_impl_.width_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[2]);
}

// ===================================================================

class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_speed_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_speed_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_spin(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_spin_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_spin_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_speed_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_current_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_yielded_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_steering_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_battery_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_disengage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::apollo::prediction::ObstaclePriority& obstacle_priority(const Object* msg);
  static void set_has_obstacle_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag(const Object* msg);
  static void set_has_interactive_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::perception::V2XInformation& v2x_info(const Object* msg);
  static void set_has_v2x_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::ObstaclePriority&
Object::_Internal::obstacle_priority(const Object* msg) {
  return *msg->_impl_.obstacle_priority_;
}
const ::apollo::prediction::ObstacleInteractiveTag&
Object::_Internal::interactive_tag(const Object* msg) {
  return *msg->_impl_.interactive_tag_;
}
const ::apollo::perception::V2XInformation&
Object::_Internal::v2x_info(const Object* msg) {
  return *msg->_impl_.v2x_info_;
}
void Object::clear_obstacle_priority() {
  if (_impl_.obstacle_priority_ != nullptr) _impl_.obstacle_priority_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Object::clear_interactive_tag() {
  if (_impl_.interactive_tag_ != nullptr) _impl_.interactive_tag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Object::clear_v2x_info() {
  if (_impl_.v2x_info_ != nullptr) _impl_.v2x_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){from._impl_.polygon_point_}
    , decltype(_impl_.signal_set_){from._impl_.signal_set_}
    , decltype(_impl_.decision_){from._impl_.decision_}
    , decltype(_impl_.prediction_){from._impl_.prediction_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.current_signal_){}
    , decltype(_impl_.obstacle_priority_){nullptr}
    , decltype(_impl_.v2x_info_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.speed_acceleration_){}
    , decltype(_impl_.speed_jerk_){}
    , decltype(_impl_.spin_){}
    , decltype(_impl_.spin_acceleration_){}
    , decltype(_impl_.spin_jerk_){}
    , decltype(_impl_.speed_heading_){}
    , decltype(_impl_.kappa_){}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.throttle_percentage_){}
    , decltype(_impl_.brake_percentage_){}
    , decltype(_impl_.steering_percentage_){}
    , decltype(_impl_.steering_angle_){}
    , decltype(_impl_.steering_ratio_){}
    , decltype(_impl_.disengage_type_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.yielded_obstacle_){}
    , decltype(_impl_.sub_type_){}
    , decltype(_impl_.dkappa_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.battery_percentage_){}
    , decltype(_impl_.gear_location_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.confidence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.current_signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_signal()) {
    _impl_.current_signal_.Set(from._internal_current_signal(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obstacle_priority()) {
    _impl_.obstacle_priority_ = new ::apollo::prediction::ObstaclePriority(*from._impl_.obstacle_priority_);
  }
  if (from._internal_has_v2x_info()) {
    _impl_.v2x_info_ = new ::apollo::perception::V2XInformation(*from._impl_.v2x_info_);
  }
  if (from._internal_has_interactive_tag()) {
    _impl_.interactive_tag_ = new ::apollo::prediction::ObstacleInteractiveTag(*from._impl_.interactive_tag_);
  }
  ::memcpy(&_impl_.heading_, &from._impl_.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Object)
}

inline void Object::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){arena}
    , decltype(_impl_.signal_set_){arena}
    , decltype(_impl_.decision_){arena}
    , decltype(_impl_.prediction_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.current_signal_){}
    , decltype(_impl_.obstacle_priority_){nullptr}
    , decltype(_impl_.v2x_info_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.speed_acceleration_){0}
    , decltype(_impl_.speed_jerk_){0}
    , decltype(_impl_.spin_){0}
    , decltype(_impl_.spin_acceleration_){0}
    , decltype(_impl_.spin_jerk_){0}
    , decltype(_impl_.speed_heading_){0}
    , decltype(_impl_.kappa_){0}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.throttle_percentage_){0}
    , decltype(_impl_.brake_percentage_){0}
    , decltype(_impl_.steering_percentage_){0}
    , decltype(_impl_.steering_angle_){0}
    , decltype(_impl_.steering_ratio_){0}
    , decltype(_impl_.disengage_type_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.yielded_obstacle_){false}
    , decltype(_impl_.sub_type_){0}
    , decltype(_impl_.dkappa_){0}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.battery_percentage_){0}
    , decltype(_impl_.gear_location_){0}
    , decltype(_impl_.length_){2.8}
    , decltype(_impl_.width_){1.4}
    , decltype(_impl_.height_){1.8}
    , decltype(_impl_.confidence_){1}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_point_.~RepeatedPtrField();
  _impl_.signal_set_.~RepeatedPtrField();
  _impl_.decision_.~RepeatedPtrField();
  _impl_.prediction_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.current_signal_.Destroy();
  if (this != internal_default_instance()) delete _impl_.obstacle_priority_;
  if (this != internal_default_instance()) delete _impl_.v2x_info_;
  if (this != internal_default_instance()) delete _impl_.interactive_tag_;
}

void Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_point_.Clear();
  _impl_.signal_set_.Clear();
  _impl_.decision_.Clear();
  _impl_.prediction_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.current_signal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.obstacle_priority_ != nullptr);
      _impl_.obstacle_priority_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.v2x_info_ != nullptr);
      _impl_.v2x_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.interactive_tag_ != nullptr);
      _impl_.interactive_tag_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.longitude_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.position_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spin_jerk_) -
        reinterpret_cast<char*>(&_impl_.position_x_)) + sizeof(_impl_.spin_jerk_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.speed_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steering_ratio_) -
        reinterpret_cast<char*>(&_impl_.speed_heading_)) + sizeof(_impl_.steering_ratio_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.disengage_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_location_) -
        reinterpret_cast<char*>(&_impl_.disengage_type_)) + sizeof(_impl_.gear_location_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.length_ = 2.8;
    _impl_.width_ = 1.4;
    _impl_.height_ = 1.8;
    _impl_.confidence_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.Object.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&_impl_._has_bits_);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_latitude(&_impl_._has_bits_);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_longitude(&_impl_._has_bits_);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_position_x(&_impl_._has_bits_);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_position_y(&_impl_._has_bits_);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 8 [default = 2.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_length(&_impl_._has_bits_);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 9 [default = 1.4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_width(&_impl_._has_bits_);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 10 [default = 1.8];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_height(&_impl_._has_bits_);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_speed(&_impl_._has_bits_);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_acceleration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_speed_acceleration(&_impl_._has_bits_);
          _impl_.speed_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_jerk = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_speed_jerk(&_impl_._has_bits_);
          _impl_.speed_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double spin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_spin(&_impl_._has_bits_);
          _impl_.spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double spin_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_spin_acceleration(&_impl_._has_bits_);
          _impl_.spin_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double spin_jerk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_spin_jerk(&_impl_._has_bits_);
          _impl_.spin_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_heading = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_speed_heading(&_impl_._has_bits_);
          _impl_.speed_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_kappa(&_impl_._has_bits_);
          _impl_.kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string signal_set = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_signal_set();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.Object.signal_set");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string current_signal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_current_signal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.Object.current_signal");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_sec = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_timestamp_sec(&_impl_._has_bits_);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Decision decision = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_percentage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_throttle_percentage(&_impl_._has_bits_);
          _impl_.throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_percentage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_brake_percentage(&_impl_._has_bits_);
          _impl_.brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_percentage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_steering_percentage(&_impl_._has_bits_);
          _impl_.steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_angle = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_steering_angle(&_impl_._has_bits_);
          _impl_.steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_ratio = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_steering_ratio(&_impl_._has_bits_);
          _impl_.steering_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Object_DisengageType_IsValid(val))) {
            _internal_set_disengage_type(static_cast<::apollo::dreamview::Object_DisengageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object.Type type = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Object_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::dreamview::Object_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Prediction prediction = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_confidence(&_impl_._has_bits_);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool yielded_obstacle = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_yielded_obstacle(&_impl_._has_bits_);
          _impl_.yielded_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::apollo::perception::PerceptionObstacle_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double dkappa = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dkappa(&_impl_._has_bits_);
          _impl_.dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Source_IsValid(val))) {
            _internal_set_source(static_cast<::apollo::perception::PerceptionObstacle_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.V2XInformation v2x_info = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v2x_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 battery_percentage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_battery_percentage(&_impl_._has_bits_);
          _impl_.battery_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(39, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactive_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_position_y(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double speed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_speed(), target);
  }

  // optional double speed_acceleration = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_speed_acceleration(), target);
  }

  // optional double speed_jerk = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_speed_jerk(), target);
  }

  // optional double spin = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_spin(), target);
  }

  // optional double spin_acceleration = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_spin_acceleration(), target);
  }

  // optional double spin_jerk = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_spin_jerk(), target);
  }

  // optional double speed_heading = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_speed_heading(), target);
  }

  // optional double kappa = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_kappa(), target);
  }

  // repeated string signal_set = 19;
  for (int i = 0, n = this->_internal_signal_set_size(); i < n; i++) {
    const auto& s = this->_internal_signal_set(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    target = stream->WriteString(19, s, target);
  }

  // optional string current_signal = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_signal().data(), static_cast<int>(this->_internal_current_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_current_signal(), target);
  }

  // optional double timestamp_sec = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_timestamp_sec(), target);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decision_size()); i < n; i++) {
    const auto& repfield = this->_internal_decision(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double throttle_percentage = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_throttle_percentage(), target);
  }

  // optional double brake_percentage = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_brake_percentage(), target);
  }

  // optional double steering_percentage = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_steering_percentage(), target);
  }

  // optional double steering_angle = 26;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_steering_angle(), target);
  }

  // optional double steering_ratio = 27;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_steering_ratio(), target);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_disengage_type(), target);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_type(), target);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prediction_size()); i < n; i++) {
    const auto& repfield = this->_internal_prediction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double confidence = 31 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_confidence(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool yielded_obstacle = 32 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_yielded_obstacle(), target);
  }

  // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::obstacle_priority(this),
        _Internal::obstacle_priority(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_sub_type(), target);
  }

  // optional double dkappa = 35;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_dkappa(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_source(), target);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::v2x_info(this),
        _Internal::v2x_info(this).GetCachedSize(), target, stream);
  }

  // optional int32 battery_percentage = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_battery_percentage(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      39, this->_internal_gear_location(), target);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::interactive_tag(this),
        _Internal::interactive_tag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->_impl_.polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string signal_set = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.signal_set_.size());
  for (int i = 0, n = _impl_.signal_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.signal_set_.Get(i));
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  total_size += 2UL * this->_internal_decision_size();
  for (const auto& msg : this->_impl_.decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  total_size += 2UL * this->_internal_prediction_size();
  for (const auto& msg : this->_impl_.prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string current_signal = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_signal());
    }

    // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obstacle_priority_);
    }

    // optional .apollo.perception.V2XInformation v2x_info = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.v2x_info_);
    }

    // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactive_tag_);
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double position_x = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double position_y = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double speed_acceleration = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double speed_jerk = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double spin = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double spin_acceleration = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double spin_jerk = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double speed_heading = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double kappa = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_percentage = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double brake_percentage = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double steering_percentage = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double steering_angle = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double steering_ratio = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disengage_type());
    }

    // optional .apollo.dreamview.Object.Type type = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool yielded_obstacle = 32 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
    }

    // optional double dkappa = 35;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

    // optional int32 battery_percentage = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_battery_percentage());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional double length = 8 [default = 2.8];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 31 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Object::GetClassData() const { return &_class_data_; }

void Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Object *>(to)->MergeFrom(
      static_cast<const Object &>(from));
}


void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Object)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_point_.MergeFrom(from._impl_.polygon_point_);
  _impl_.signal_set_.MergeFrom(from._impl_.signal_set_);
  _impl_.decision_.MergeFrom(from._impl_.decision_);
  _impl_.prediction_.MergeFrom(from._impl_.prediction_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_current_signal(from._internal_current_signal());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_obstacle_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_obstacle_priority());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_v2x_info()->::apollo::perception::V2XInformation::MergeFrom(from._internal_v2x_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_interactive_tag()->::apollo::prediction::ObstacleInteractiveTag::MergeFrom(from._internal_interactive_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.longitude_ = from._impl_.longitude_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.speed_acceleration_ = from._impl_.speed_acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.speed_jerk_ = from._impl_.speed_jerk_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.spin_ = from._impl_.spin_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.spin_acceleration_ = from._impl_.spin_acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.spin_jerk_ = from._impl_.spin_jerk_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.speed_heading_ = from._impl_.speed_heading_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.kappa_ = from._impl_.kappa_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.throttle_percentage_ = from._impl_.throttle_percentage_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.brake_percentage_ = from._impl_.brake_percentage_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.steering_percentage_ = from._impl_.steering_percentage_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.steering_angle_ = from._impl_.steering_angle_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.steering_ratio_ = from._impl_.steering_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.disengage_type_ = from._impl_.disengage_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.yielded_obstacle_ = from._impl_.yielded_obstacle_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.sub_type_ = from._impl_.sub_type_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.dkappa_ = from._impl_.dkappa_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.battery_percentage_ = from._impl_.battery_percentage_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.gear_location_ = from._impl_.gear_location_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.polygon_point_.InternalSwap(&other->_impl_.polygon_point_);
  _impl_.signal_set_.InternalSwap(&other->_impl_.signal_set_);
  _impl_.decision_.InternalSwap(&other->_impl_.decision_);
  _impl_.prediction_.InternalSwap(&other->_impl_.prediction_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_signal_, lhs_arena,
      &other->_impl_.current_signal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, _impl_.gear_location_)
      + sizeof(Object::_impl_.gear_location_)
      - PROTOBUF_FIELD_OFFSET(Object, _impl_.obstacle_priority_)>(
          reinterpret_cast<char*>(&_impl_.obstacle_priority_),
          reinterpret_cast<char*>(&other->_impl_.obstacle_priority_));
  swap(_impl_.length_, other->_impl_.length_);
  swap(_impl_.width_, other->_impl_.width_);
  swap(_impl_.height_, other->_impl_.height_);
  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[3]);
}

// ===================================================================

class DelaysInMs::_Internal {
 public:
  using HasBits = decltype(std::declval<DelaysInMs>()._impl_._has_bits_);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_perception_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_planning(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_traffic_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DelaysInMs::DelaysInMs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.DelaysInMs)
}
DelaysInMs::DelaysInMs(const DelaysInMs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chassis_){}
    , decltype(_impl_.localization_){}
    , decltype(_impl_.perception_obstacle_){}
    , decltype(_impl_.planning_){}
    , decltype(_impl_.prediction_){}
    , decltype(_impl_.traffic_light_){}
    , decltype(_impl_.control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chassis_, &from._impl_.chassis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.control_) -
    reinterpret_cast<char*>(&_impl_.chassis_)) + sizeof(_impl_.control_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DelaysInMs)
}

inline void DelaysInMs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chassis_){0}
    , decltype(_impl_.localization_){0}
    , decltype(_impl_.perception_obstacle_){0}
    , decltype(_impl_.planning_){0}
    , decltype(_impl_.prediction_){0}
    , decltype(_impl_.traffic_light_){0}
    , decltype(_impl_.control_){0}
  };
}

DelaysInMs::~DelaysInMs() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DelaysInMs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelaysInMs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelaysInMs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelaysInMs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DelaysInMs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.chassis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.control_) -
        reinterpret_cast<char*>(&_impl_.chassis_)) + sizeof(_impl_.control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelaysInMs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double chassis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chassis(&has_bits);
          _impl_.chassis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double localization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_localization(&has_bits);
          _impl_.localization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double perception_obstacle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_perception_obstacle(&has_bits);
          _impl_.perception_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double planning = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_planning(&has_bits);
          _impl_.planning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double prediction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_prediction(&has_bits);
          _impl_.prediction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traffic_light = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_traffic_light(&has_bits);
          _impl_.traffic_light_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double control = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_control(&has_bits);
          _impl_.control_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelaysInMs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DelaysInMs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double chassis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_chassis(), target);
  }

  // optional double localization = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_localization(), target);
  }

  // optional double perception_obstacle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_perception_obstacle(), target);
  }

  // optional double planning = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_planning(), target);
  }

  // optional double prediction = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_prediction(), target);
  }

  // optional double traffic_light = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_traffic_light(), target);
  }

  // optional double control = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DelaysInMs)
  return target;
}

size_t DelaysInMs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DelaysInMs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double chassis = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double localization = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double planning = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double prediction = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double traffic_light = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double control = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelaysInMs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelaysInMs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelaysInMs::GetClassData() const { return &_class_data_; }

void DelaysInMs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelaysInMs *>(to)->MergeFrom(
      static_cast<const DelaysInMs &>(from));
}


void DelaysInMs::MergeFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DelaysInMs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chassis_ = from._impl_.chassis_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.localization_ = from._impl_.localization_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.perception_obstacle_ = from._impl_.perception_obstacle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.planning_ = from._impl_.planning_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.prediction_ = from._impl_.prediction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.traffic_light_ = from._impl_.traffic_light_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.control_ = from._impl_.control_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelaysInMs::CopyFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelaysInMs::IsInitialized() const {
  return true;
}

void DelaysInMs::InternalSwap(DelaysInMs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelaysInMs, _impl_.control_)
      + sizeof(DelaysInMs::_impl_.control_)
      - PROTOBUF_FIELD_OFFSET(DelaysInMs, _impl_.chassis_)>(
          reinterpret_cast<char*>(&_impl_.chassis_),
          reinterpret_cast<char*>(&other->_impl_.chassis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelaysInMs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[4]);
}

// ===================================================================

class RoutePath::_Internal {
 public:
};

RoutePath::RoutePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.RoutePath)
}
RoutePath::RoutePath(const RoutePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.point_){from._impl_.point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.RoutePath)
}

inline void RoutePath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.RoutePath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
}

void RoutePath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.RoutePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutePath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.PolygonPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.RoutePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.RoutePath)
  return target;
}

size_t RoutePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.RoutePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutePath::GetClassData() const { return &_class_data_; }

void RoutePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutePath *>(to)->MergeFrom(
      static_cast<const RoutePath &>(from));
}


void RoutePath::MergeFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_.MergeFrom(from._impl_.point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutePath::CopyFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {
  return true;
}

void RoutePath::InternalSwap(RoutePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[5]);
}

// ===================================================================

class Latency::_Internal {
 public:
  using HasBits = decltype(std::declval<Latency>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Latency::Latency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Latency)
}
Latency::Latency(const Latency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.total_time_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_time_ms_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.total_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Latency)
}

inline void Latency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.total_time_ms_){0}
  };
}

Latency::~Latency() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Latency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Latency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Latency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Latency::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Latency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_time_ms_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.total_time_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Latency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double total_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_time_ms(&has_bits);
          _impl_.total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Latency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Latency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double total_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Latency)
  return target;
}

size_t Latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Latency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double total_time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Latency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Latency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Latency::GetClassData() const { return &_class_data_; }

void Latency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Latency *>(to)->MergeFrom(
      static_cast<const Latency &>(from));
}


void Latency::MergeFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Latency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.total_time_ms_ = from._impl_.total_time_ms_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Latency::CopyFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latency::IsInitialized() const {
  return true;
}

void Latency::InternalSwap(Latency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Latency, _impl_.total_time_ms_)
      + sizeof(Latency::_impl_.total_time_ms_)
      - PROTOBUF_FIELD_OFFSET(Latency, _impl_.timestamp_sec_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_sec_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Latency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[6]);
}

// ===================================================================

class MapElementIds::_Internal {
 public:
};

MapElementIds::MapElementIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.MapElementIds)
}
MapElementIds::MapElementIds(const MapElementIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.lane_){from._impl_.lane_}
    , decltype(_impl_.crosswalk_){from._impl_.crosswalk_}
    , decltype(_impl_.junction_){from._impl_.junction_}
    , decltype(_impl_.signal_){from._impl_.signal_}
    , decltype(_impl_.stop_sign_){from._impl_.stop_sign_}
    , decltype(_impl_.yield_){from._impl_.yield_}
    , decltype(_impl_.overlap_){from._impl_.overlap_}
    , decltype(_impl_.road_){from._impl_.road_}
    , decltype(_impl_.clear_area_){from._impl_.clear_area_}
    , decltype(_impl_.parking_space_){from._impl_.parking_space_}
    , decltype(_impl_.speed_bump_){from._impl_.speed_bump_}
    , decltype(_impl_.pnc_junction_){from._impl_.pnc_junction_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MapElementIds)
}

inline void MapElementIds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_){arena}
    , decltype(_impl_.crosswalk_){arena}
    , decltype(_impl_.junction_){arena}
    , decltype(_impl_.signal_){arena}
    , decltype(_impl_.stop_sign_){arena}
    , decltype(_impl_.yield_){arena}
    , decltype(_impl_.overlap_){arena}
    , decltype(_impl_.road_){arena}
    , decltype(_impl_.clear_area_){arena}
    , decltype(_impl_.parking_space_){arena}
    , decltype(_impl_.speed_bump_){arena}
    , decltype(_impl_.pnc_junction_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapElementIds::~MapElementIds() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MapElementIds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapElementIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_.~RepeatedPtrField();
  _impl_.crosswalk_.~RepeatedPtrField();
  _impl_.junction_.~RepeatedPtrField();
  _impl_.signal_.~RepeatedPtrField();
  _impl_.stop_sign_.~RepeatedPtrField();
  _impl_.yield_.~RepeatedPtrField();
  _impl_.overlap_.~RepeatedPtrField();
  _impl_.road_.~RepeatedPtrField();
  _impl_.clear_area_.~RepeatedPtrField();
  _impl_.parking_space_.~RepeatedPtrField();
  _impl_.speed_bump_.~RepeatedPtrField();
  _impl_.pnc_junction_.~RepeatedPtrField();
}

void MapElementIds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapElementIds::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MapElementIds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_.Clear();
  _impl_.crosswalk_.Clear();
  _impl_.junction_.Clear();
  _impl_.signal_.Clear();
  _impl_.stop_sign_.Clear();
  _impl_.yield_.Clear();
  _impl_.overlap_.Clear();
  _impl_.road_.Clear();
  _impl_.clear_area_.Clear();
  _impl_.parking_space_.Clear();
  _impl_.speed_bump_.Clear();
  _impl_.pnc_junction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapElementIds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lane();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.lane");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string crosswalk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crosswalk();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.crosswalk");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_junction();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.junction");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string signal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signal();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.signal");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stop_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stop_sign();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.stop_sign");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string yield = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_yield();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.yield");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string overlap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_overlap();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.overlap");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string road = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_road();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.road");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string clear_area = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clear_area();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.clear_area");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string parking_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parking_space();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.parking_space");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string speed_bump = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_speed_bump();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.speed_bump");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string pnc_junction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pnc_junction();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.MapElementIds.pnc_junction");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapElementIds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MapElementIds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane = 1;
  for (int i = 0, n = this->_internal_lane_size(); i < n; i++) {
    const auto& s = this->_internal_lane(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    target = stream->WriteString(1, s, target);
  }

  // repeated string crosswalk = 2;
  for (int i = 0, n = this->_internal_crosswalk_size(); i < n; i++) {
    const auto& s = this->_internal_crosswalk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    target = stream->WriteString(2, s, target);
  }

  // repeated string junction = 3;
  for (int i = 0, n = this->_internal_junction_size(); i < n; i++) {
    const auto& s = this->_internal_junction(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    target = stream->WriteString(3, s, target);
  }

  // repeated string signal = 4;
  for (int i = 0, n = this->_internal_signal_size(); i < n; i++) {
    const auto& s = this->_internal_signal(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    target = stream->WriteString(4, s, target);
  }

  // repeated string stop_sign = 5;
  for (int i = 0, n = this->_internal_stop_sign_size(); i < n; i++) {
    const auto& s = this->_internal_stop_sign(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    target = stream->WriteString(5, s, target);
  }

  // repeated string yield = 6;
  for (int i = 0, n = this->_internal_yield_size(); i < n; i++) {
    const auto& s = this->_internal_yield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    target = stream->WriteString(6, s, target);
  }

  // repeated string overlap = 7;
  for (int i = 0, n = this->_internal_overlap_size(); i < n; i++) {
    const auto& s = this->_internal_overlap(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    target = stream->WriteString(7, s, target);
  }

  // repeated string road = 8;
  for (int i = 0, n = this->_internal_road_size(); i < n; i++) {
    const auto& s = this->_internal_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    target = stream->WriteString(8, s, target);
  }

  // repeated string clear_area = 9;
  for (int i = 0, n = this->_internal_clear_area_size(); i < n; i++) {
    const auto& s = this->_internal_clear_area(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    target = stream->WriteString(9, s, target);
  }

  // repeated string parking_space = 10;
  for (int i = 0, n = this->_internal_parking_space_size(); i < n; i++) {
    const auto& s = this->_internal_parking_space(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.parking_space");
    target = stream->WriteString(10, s, target);
  }

  // repeated string speed_bump = 11;
  for (int i = 0, n = this->_internal_speed_bump_size(); i < n; i++) {
    const auto& s = this->_internal_speed_bump(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.speed_bump");
    target = stream->WriteString(11, s, target);
  }

  // repeated string pnc_junction = 12;
  for (int i = 0, n = this->_internal_pnc_junction_size(); i < n; i++) {
    const auto& s = this->_internal_pnc_junction(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.pnc_junction");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MapElementIds)
  return target;
}

size_t MapElementIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MapElementIds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lane = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lane_.size());
  for (int i = 0, n = _impl_.lane_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lane_.Get(i));
  }

  // repeated string crosswalk = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.crosswalk_.size());
  for (int i = 0, n = _impl_.crosswalk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.crosswalk_.Get(i));
  }

  // repeated string junction = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.junction_.size());
  for (int i = 0, n = _impl_.junction_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.junction_.Get(i));
  }

  // repeated string signal = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.signal_.size());
  for (int i = 0, n = _impl_.signal_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.signal_.Get(i));
  }

  // repeated string stop_sign = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stop_sign_.size());
  for (int i = 0, n = _impl_.stop_sign_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stop_sign_.Get(i));
  }

  // repeated string yield = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.yield_.size());
  for (int i = 0, n = _impl_.yield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.yield_.Get(i));
  }

  // repeated string overlap = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.overlap_.size());
  for (int i = 0, n = _impl_.overlap_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.overlap_.Get(i));
  }

  // repeated string road = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.road_.size());
  for (int i = 0, n = _impl_.road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.road_.Get(i));
  }

  // repeated string clear_area = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.clear_area_.size());
  for (int i = 0, n = _impl_.clear_area_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.clear_area_.Get(i));
  }

  // repeated string parking_space = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.parking_space_.size());
  for (int i = 0, n = _impl_.parking_space_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.parking_space_.Get(i));
  }

  // repeated string speed_bump = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.speed_bump_.size());
  for (int i = 0, n = _impl_.speed_bump_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.speed_bump_.Get(i));
  }

  // repeated string pnc_junction = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pnc_junction_.size());
  for (int i = 0, n = _impl_.pnc_junction_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pnc_junction_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapElementIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapElementIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapElementIds::GetClassData() const { return &_class_data_; }

void MapElementIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapElementIds *>(to)->MergeFrom(
      static_cast<const MapElementIds &>(from));
}


void MapElementIds::MergeFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MapElementIds)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lane_.MergeFrom(from._impl_.lane_);
  _impl_.crosswalk_.MergeFrom(from._impl_.crosswalk_);
  _impl_.junction_.MergeFrom(from._impl_.junction_);
  _impl_.signal_.MergeFrom(from._impl_.signal_);
  _impl_.stop_sign_.MergeFrom(from._impl_.stop_sign_);
  _impl_.yield_.MergeFrom(from._impl_.yield_);
  _impl_.overlap_.MergeFrom(from._impl_.overlap_);
  _impl_.road_.MergeFrom(from._impl_.road_);
  _impl_.clear_area_.MergeFrom(from._impl_.clear_area_);
  _impl_.parking_space_.MergeFrom(from._impl_.parking_space_);
  _impl_.speed_bump_.MergeFrom(from._impl_.speed_bump_);
  _impl_.pnc_junction_.MergeFrom(from._impl_.pnc_junction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapElementIds::CopyFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapElementIds::IsInitialized() const {
  return true;
}

void MapElementIds::InternalSwap(MapElementIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  _impl_.crosswalk_.InternalSwap(&other->_impl_.crosswalk_);
  _impl_.junction_.InternalSwap(&other->_impl_.junction_);
  _impl_.signal_.InternalSwap(&other->_impl_.signal_);
  _impl_.stop_sign_.InternalSwap(&other->_impl_.stop_sign_);
  _impl_.yield_.InternalSwap(&other->_impl_.yield_);
  _impl_.overlap_.InternalSwap(&other->_impl_.overlap_);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  _impl_.clear_area_.InternalSwap(&other->_impl_.clear_area_);
  _impl_.parking_space_.InternalSwap(&other->_impl_.parking_space_);
  _impl_.speed_bump_.InternalSwap(&other->_impl_.speed_bump_);
  _impl_.pnc_junction_.InternalSwap(&other->_impl_.pnc_junction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapElementIds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[7]);
}

// ===================================================================

class ControlData::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlData>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::TrajectoryPoint& current_target_point(const ControlData* msg);
  static void set_has_current_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::TrajectoryPoint&
ControlData::_Internal::current_target_point(const ControlData* msg) {
  return *msg->_impl_.current_target_point_;
}
void ControlData::clear_current_target_point() {
  if (_impl_.current_target_point_ != nullptr) _impl_.current_target_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlData::ControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ControlData)
}
ControlData::ControlData(const ControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_target_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.station_error_){}
    , decltype(_impl_.lateral_error_){}
    , decltype(_impl_.heading_error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_target_point()) {
    _impl_.current_target_point_ = new ::apollo::common::TrajectoryPoint(*from._impl_.current_target_point_);
  }
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heading_error_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.heading_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ControlData)
}

inline void ControlData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_target_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.station_error_){0}
    , decltype(_impl_.lateral_error_){0}
    , decltype(_impl_.heading_error_){0}
  };
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ControlData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.current_target_point_;
}

void ControlData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ControlData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.current_target_point_ != nullptr);
    _impl_.current_target_point_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heading_error_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.heading_error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_station_error(&has_bits);
          _impl_.station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lateral_error(&has_bits);
          _impl_.lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_heading_error(&has_bits);
          _impl_.heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint current_target_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ControlData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double lateral_error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_error(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional .apollo.common.TrajectoryPoint current_target_point = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::current_target_point(this),
        _Internal::current_target_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ControlData)
  return target;
}

size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ControlData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.TrajectoryPoint current_target_point = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.current_target_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlData::GetClassData() const { return &_class_data_; }

void ControlData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlData *>(to)->MergeFrom(
      static_cast<const ControlData &>(from));
}


void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_target_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.station_error_ = from._impl_.station_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.lateral_error_ = from._impl_.lateral_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.heading_error_ = from._impl_.heading_error_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlData, _impl_.heading_error_)
      + sizeof(ControlData::_impl_.heading_error_)
      - PROTOBUF_FIELD_OFFSET(ControlData, _impl_.current_target_point_)>(
          reinterpret_cast<char*>(&_impl_.current_target_point_),
          reinterpret_cast<char*>(&other->_impl_.current_target_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[8]);
}

// ===================================================================

class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::monitor::MonitorMessageItem& item(const Notification* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::monitor::MonitorMessageItem&
Notification::_Internal::item(const Notification* msg) {
  return *msg->_impl_.item_;
}
void Notification::clear_item() {
  if (_impl_.item_ != nullptr) _impl_.item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _impl_.item_ = new ::apollo::common::monitor::MonitorMessageItem(*from._impl_.item_);
  }
  _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
  };
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.item_ != nullptr);
    _impl_.item_->Clear();
  }
  _impl_.timestamp_sec_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.monitor.MonitorMessageItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.monitor.MonitorMessageItem item = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }

void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Notification *>(to)->MergeFrom(
      static_cast<const Notification &>(from));
}


void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item()->::apollo::common::monitor::MonitorMessageItem::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.timestamp_sec_)
      + sizeof(Notification::_impl_.timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[9]);
}

// ===================================================================

class SensorMeasurements::_Internal {
 public:
};

SensorMeasurements::SensorMeasurements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.SensorMeasurements)
}
SensorMeasurements::SensorMeasurements(const SensorMeasurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_measurement_){from._impl_.sensor_measurement_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SensorMeasurements)
}

inline void SensorMeasurements::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_measurement_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMeasurements::~SensorMeasurements() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SensorMeasurements)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMeasurements::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_measurement_.~RepeatedPtrField();
}

void SensorMeasurements::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMeasurements::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SensorMeasurements)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_measurement_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMeasurements::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.Object sensor_measurement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_measurement(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMeasurements::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SensorMeasurements)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object sensor_measurement = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_measurement_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_measurement(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SensorMeasurements)
  return target;
}

size_t SensorMeasurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SensorMeasurements)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object sensor_measurement = 1;
  total_size += 1UL * this->_internal_sensor_measurement_size();
  for (const auto& msg : this->_impl_.sensor_measurement_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMeasurements::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorMeasurements::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMeasurements::GetClassData() const { return &_class_data_; }

void SensorMeasurements::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorMeasurements *>(to)->MergeFrom(
      static_cast<const SensorMeasurements &>(from));
}


void SensorMeasurements::MergeFrom(const SensorMeasurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SensorMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sensor_measurement_.MergeFrom(from._impl_.sensor_measurement_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMeasurements::CopyFrom(const SensorMeasurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SensorMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeasurements::IsInitialized() const {
  return true;
}

void SensorMeasurements::InternalSwap(SensorMeasurements* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensor_measurement_.InternalSwap(&other->_impl_.sensor_measurement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMeasurements::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[10]);
}

// ===================================================================

SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse() {}
SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimulationWorld_LatencyEntry_DoNotUse::MergeFrom(const SimulationWorld_LatencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld_LatencyEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[11]);
}

// ===================================================================

SimulationWorld_StoriesEntry_DoNotUse::SimulationWorld_StoriesEntry_DoNotUse() {}
SimulationWorld_StoriesEntry_DoNotUse::SimulationWorld_StoriesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimulationWorld_StoriesEntry_DoNotUse::MergeFrom(const SimulationWorld_StoriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld_StoriesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[12]);
}

// ===================================================================

SimulationWorld_SensorMeasurementsEntry_DoNotUse::SimulationWorld_SensorMeasurementsEntry_DoNotUse() {}
SimulationWorld_SensorMeasurementsEntry_DoNotUse::SimulationWorld_SensorMeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimulationWorld_SensorMeasurementsEntry_DoNotUse::MergeFrom(const SimulationWorld_SensorMeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld_SensorMeasurementsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[13]);
}

// ===================================================================

class SimulationWorld::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulationWorld>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sequence_num(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::dreamview::Object& auto_driving_car(const SimulationWorld* msg);
  static void set_has_auto_driving_car(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::Object& traffic_signal(const SimulationWorld* msg);
  static void set_has_traffic_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_routing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::dreamview::Object& main_stop(const SimulationWorld* msg);
  static void set_has_main_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::dreamview::Object& main_decision(const SimulationWorld* msg);
  static void set_has_main_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::dreamview::DelaysInMs& delay(const SimulationWorld* msg);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::monitor::MonitorMessage& monitor(const SimulationWorld* msg);
  static void set_has_monitor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::MapElementIds& map_element_ids(const SimulationWorld* msg);
  static void set_has_map_element_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_map_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::planning_internal::PlanningData& planning_data(const SimulationWorld* msg);
  static void set_has_planning_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::dreamview::Object& gps(const SimulationWorld* msg);
  static void set_has_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const SimulationWorld* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::dreamview::ControlData& control_data(const SimulationWorld* msg);
  static void set_has_control_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_rss_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::dreamview::Object& shadow_localization(const SimulationWorld* msg);
  static void set_has_shadow_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_siren_on(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::apollo::dreamview::Object&
SimulationWorld::_Internal::auto_driving_car(const SimulationWorld* msg) {
  return *msg->_impl_.auto_driving_car_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::traffic_signal(const SimulationWorld* msg) {
  return *msg->_impl_.traffic_signal_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::main_stop(const SimulationWorld* msg) {
  return *msg->_impl_.main_stop_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::main_decision(const SimulationWorld* msg) {
  return *msg->_impl_.main_decision_;
}
const ::apollo::dreamview::DelaysInMs&
SimulationWorld::_Internal::delay(const SimulationWorld* msg) {
  return *msg->_impl_.delay_;
}
const ::apollo::common::monitor::MonitorMessage&
SimulationWorld::_Internal::monitor(const SimulationWorld* msg) {
  return *msg->_impl_.monitor_;
}
const ::apollo::dreamview::MapElementIds&
SimulationWorld::_Internal::map_element_ids(const SimulationWorld* msg) {
  return *msg->_impl_.map_element_ids_;
}
const ::apollo::planning_internal::PlanningData&
SimulationWorld::_Internal::planning_data(const SimulationWorld* msg) {
  return *msg->_impl_.planning_data_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::gps(const SimulationWorld* msg) {
  return *msg->_impl_.gps_;
}
const ::apollo::perception::LaneMarkers&
SimulationWorld::_Internal::lane_marker(const SimulationWorld* msg) {
  return *msg->_impl_.lane_marker_;
}
const ::apollo::dreamview::ControlData&
SimulationWorld::_Internal::control_data(const SimulationWorld* msg) {
  return *msg->_impl_.control_data_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::shadow_localization(const SimulationWorld* msg) {
  return *msg->_impl_.shadow_localization_;
}
void SimulationWorld::clear_monitor() {
  if (_impl_.monitor_ != nullptr) _impl_.monitor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SimulationWorld::clear_planning_data() {
  if (_impl_.planning_data_ != nullptr) _impl_.planning_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SimulationWorld::clear_lane_marker() {
  if (_impl_.lane_marker_ != nullptr) _impl_.lane_marker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void SimulationWorld::clear_navigation_path() {
  _impl_.navigation_path_.Clear();
}
SimulationWorld::SimulationWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SimulationWorld::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.SimulationWorld)
}
SimulationWorld::SimulationWorld(const SimulationWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){from._impl_.object_}
    , decltype(_impl_.route_path_){from._impl_.route_path_}
    , decltype(_impl_.planning_trajectory_){from._impl_.planning_trajectory_}
    , decltype(_impl_.notification_){from._impl_.notification_}
    , /*decltype(_impl_.latency_)*/{}
    , decltype(_impl_.navigation_path_){from._impl_.navigation_path_}
    , decltype(_impl_.perceived_signal_){from._impl_.perceived_signal_}
    , /*decltype(_impl_.stories_)*/{}
    , /*decltype(_impl_.sensor_measurements_)*/{}
    , decltype(_impl_.engage_advice_){}
    , decltype(_impl_.auto_driving_car_){nullptr}
    , decltype(_impl_.traffic_signal_){nullptr}
    , decltype(_impl_.main_stop_){nullptr}
    , decltype(_impl_.main_decision_){nullptr}
    , decltype(_impl_.delay_){nullptr}
    , decltype(_impl_.monitor_){nullptr}
    , decltype(_impl_.map_element_ids_){nullptr}
    , decltype(_impl_.planning_data_){nullptr}
    , decltype(_impl_.gps_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.control_data_){nullptr}
    , decltype(_impl_.shadow_localization_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.routing_time_){}
    , decltype(_impl_.speed_limit_){}
    , decltype(_impl_.sequence_num_){}
    , decltype(_impl_.is_siren_on_){}
    , decltype(_impl_.map_hash_){}
    , decltype(_impl_.map_radius_){}
    , decltype(_impl_.is_rss_safe_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.latency_.MergeFrom(from._impl_.latency_);
  _impl_.stories_.MergeFrom(from._impl_.stories_);
  _impl_.sensor_measurements_.MergeFrom(from._impl_.sensor_measurements_);
  _impl_.engage_advice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engage_advice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_engage_advice()) {
    _impl_.engage_advice_.Set(from._internal_engage_advice(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_auto_driving_car()) {
    _impl_.auto_driving_car_ = new ::apollo::dreamview::Object(*from._impl_.auto_driving_car_);
  }
  if (from._internal_has_traffic_signal()) {
    _impl_.traffic_signal_ = new ::apollo::dreamview::Object(*from._impl_.traffic_signal_);
  }
  if (from._internal_has_main_stop()) {
    _impl_.main_stop_ = new ::apollo::dreamview::Object(*from._impl_.main_stop_);
  }
  if (from._internal_has_main_decision()) {
    _impl_.main_decision_ = new ::apollo::dreamview::Object(*from._impl_.main_decision_);
  }
  if (from._internal_has_delay()) {
    _impl_.delay_ = new ::apollo::dreamview::DelaysInMs(*from._impl_.delay_);
  }
  if (from._internal_has_monitor()) {
    _impl_.monitor_ = new ::apollo::common::monitor::MonitorMessage(*from._impl_.monitor_);
  }
  if (from._internal_has_map_element_ids()) {
    _impl_.map_element_ids_ = new ::apollo::dreamview::MapElementIds(*from._impl_.map_element_ids_);
  }
  if (from._internal_has_planning_data()) {
    _impl_.planning_data_ = new ::apollo::planning_internal::PlanningData(*from._impl_.planning_data_);
  }
  if (from._internal_has_gps()) {
    _impl_.gps_ = new ::apollo::dreamview::Object(*from._impl_.gps_);
  }
  if (from._internal_has_lane_marker()) {
    _impl_.lane_marker_ = new ::apollo::perception::LaneMarkers(*from._impl_.lane_marker_);
  }
  if (from._internal_has_control_data()) {
    _impl_.control_data_ = new ::apollo::dreamview::ControlData(*from._impl_.control_data_);
  }
  if (from._internal_has_shadow_localization()) {
    _impl_.shadow_localization_ = new ::apollo::dreamview::Object(*from._impl_.shadow_localization_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_rss_safe_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SimulationWorld)
}

inline void SimulationWorld::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){arena}
    , decltype(_impl_.route_path_){arena}
    , decltype(_impl_.planning_trajectory_){arena}
    , decltype(_impl_.notification_){arena}
    , /*decltype(_impl_.latency_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.navigation_path_){arena}
    , decltype(_impl_.perceived_signal_){arena}
    , /*decltype(_impl_.stories_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.sensor_measurements_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.engage_advice_){}
    , decltype(_impl_.auto_driving_car_){nullptr}
    , decltype(_impl_.traffic_signal_){nullptr}
    , decltype(_impl_.main_stop_){nullptr}
    , decltype(_impl_.main_decision_){nullptr}
    , decltype(_impl_.delay_){nullptr}
    , decltype(_impl_.monitor_){nullptr}
    , decltype(_impl_.map_element_ids_){nullptr}
    , decltype(_impl_.planning_data_){nullptr}
    , decltype(_impl_.gps_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.control_data_){nullptr}
    , decltype(_impl_.shadow_localization_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.routing_time_){0}
    , decltype(_impl_.speed_limit_){0}
    , decltype(_impl_.sequence_num_){0u}
    , decltype(_impl_.is_siren_on_){false}
    , decltype(_impl_.map_hash_){uint64_t{0u}}
    , decltype(_impl_.map_radius_){0}
    , decltype(_impl_.is_rss_safe_){true}
  };
  _impl_.engage_advice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engage_advice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimulationWorld::~SimulationWorld() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SimulationWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SimulationWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_.~RepeatedPtrField();
  _impl_.route_path_.~RepeatedPtrField();
  _impl_.planning_trajectory_.~RepeatedPtrField();
  _impl_.notification_.~RepeatedPtrField();
  _impl_.latency_.Destruct();
  _impl_.latency_.~MapField();
  _impl_.navigation_path_.~RepeatedPtrField();
  _impl_.perceived_signal_.~RepeatedPtrField();
  _impl_.stories_.Destruct();
  _impl_.stories_.~MapField();
  _impl_.sensor_measurements_.Destruct();
  _impl_.sensor_measurements_.~MapField();
  _impl_.engage_advice_.Destroy();
  if (this != internal_default_instance()) delete _impl_.auto_driving_car_;
  if (this != internal_default_instance()) delete _impl_.traffic_signal_;
  if (this != internal_default_instance()) delete _impl_.main_stop_;
  if (this != internal_default_instance()) delete _impl_.main_decision_;
  if (this != internal_default_instance()) delete _impl_.delay_;
  if (this != internal_default_instance()) delete _impl_.monitor_;
  if (this != internal_default_instance()) delete _impl_.map_element_ids_;
  if (this != internal_default_instance()) delete _impl_.planning_data_;
  if (this != internal_default_instance()) delete _impl_.gps_;
  if (this != internal_default_instance()) delete _impl_.lane_marker_;
  if (this != internal_default_instance()) delete _impl_.control_data_;
  if (this != internal_default_instance()) delete _impl_.shadow_localization_;
}

void SimulationWorld::ArenaDtor(void* object) {
  SimulationWorld* _this = reinterpret_cast< SimulationWorld* >(object);
  _this->_impl_.latency_.Destruct();
  _this->_impl_.stories_.Destruct();
  _this->_impl_.sensor_measurements_.Destruct();
}
void SimulationWorld::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulationWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SimulationWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_.Clear();
  _impl_.route_path_.Clear();
  _impl_.planning_trajectory_.Clear();
  _impl_.notification_.Clear();
  _impl_.latency_.Clear();
  _impl_.navigation_path_.Clear();
  _impl_.perceived_signal_.Clear();
  _impl_.stories_.Clear();
  _impl_.sensor_measurements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.engage_advice_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.auto_driving_car_ != nullptr);
      _impl_.auto_driving_car_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.traffic_signal_ != nullptr);
      _impl_.traffic_signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.main_stop_ != nullptr);
      _impl_.main_stop_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.main_decision_ != nullptr);
      _impl_.main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.delay_ != nullptr);
      _impl_.delay_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.monitor_ != nullptr);
      _impl_.monitor_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.map_element_ids_ != nullptr);
      _impl_.map_element_ids_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.planning_data_ != nullptr);
      _impl_.planning_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.gps_ != nullptr);
      _impl_.gps_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.lane_marker_ != nullptr);
      _impl_.lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.control_data_ != nullptr);
      _impl_.control_data_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.shadow_localization_ != nullptr);
      _impl_.shadow_localization_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.speed_limit_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.sequence_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.map_radius_) -
        reinterpret_cast<char*>(&_impl_.sequence_num_)) + sizeof(_impl_.map_radius_));
    _impl_.is_rss_safe_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_num(&has_bits);
          _impl_.sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Object object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object auto_driving_car = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_driving_car(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object traffic_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.RoutePath route_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double routing_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_routing_time(&has_bits);
          _impl_.routing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Object planning_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planning_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object main_decision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_decision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.DelaysInMs delay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_delay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Notification notification = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string engage_advice = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_engage_advice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.SimulationWorld.engage_advice");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Latency> latency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.latency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_element_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 map_hash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_map_hash(&has_bits);
          _impl_.map_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double map_radius = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_map_radius(&has_bits);
          _impl_.map_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.PlanningData planning_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object gps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ControlData control_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Path navigation_path = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_navigation_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rss_safe = 25 [default = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_rss_safe(&has_bits);
          _impl_.is_rss_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object shadow_localization = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Object perceived_signal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_perceived_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> stories = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.stories_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.sensor_measurements_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_siren_on = 30 [default = false];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_is_siren_on(&has_bits);
          _impl_.is_siren_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SimulationWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 sequence_num = 2;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_num(), target);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_object_size()); i < n; i++) {
    const auto& repfield = this->_internal_object(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::auto_driving_car(this),
        _Internal::auto_driving_car(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::traffic_signal(this),
        _Internal::traffic_signal(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_route_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_route_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double routing_time = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_routing_time(), target);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_planning_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_planning_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::main_stop(this),
        _Internal::main_stop(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::main_decision(this),
        _Internal::main_decision(this).GetCachedSize(), target, stream);
  }

  // optional double speed_limit = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_speed_limit(), target);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::delay(this),
        _Internal::delay(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::monitor(this),
        _Internal::monitor(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notification_size()); i < n; i++) {
    const auto& repfield = this->_internal_notification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string engage_advice = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_engage_advice().data(), static_cast<int>(this->_internal_engage_advice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_engage_advice(), target);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->_internal_latency().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::Latency>;
    using WireHelper = SimulationWorld_LatencyEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_latency();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.SimulationWorld.LatencyEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::map_element_ids(this),
        _Internal::map_element_ids(this).GetCachedSize(), target, stream);
  }

  // optional uint64 map_hash = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_map_hash(), target);
  }

  // optional double map_radius = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_map_radius(), target);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::planning_data(this),
        _Internal::planning_data(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::gps(this),
        _Internal::gps(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::lane_marker(this),
        _Internal::lane_marker(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::control_data(this),
        _Internal::control_data(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_navigation_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_navigation_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_rss_safe = 25 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_rss_safe(), target);
  }

  // optional .apollo.dreamview.Object shadow_localization = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::shadow_localization(this),
        _Internal::shadow_localization(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.dreamview.Object perceived_signal = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perceived_signal_size()); i < n; i++) {
    const auto& repfield = this->_internal_perceived_signal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, bool> stories = 28;
  if (!this->_internal_stories().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = SimulationWorld_StoriesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stories();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.SimulationWorld.StoriesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(28, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(28, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
  if (!this->_internal_sensor_measurements().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::SensorMeasurements>;
    using WireHelper = SimulationWorld_SensorMeasurementsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sensor_measurements();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.SimulationWorld.SensorMeasurementsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(29, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(29, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional bool is_siren_on = 30 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_is_siren_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SimulationWorld)
  return target;
}

size_t SimulationWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SimulationWorld)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object object = 3;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->_impl_.object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  total_size += 1UL * this->_internal_route_path_size();
  for (const auto& msg : this->_impl_.route_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  total_size += 1UL * this->_internal_planning_trajectory_size();
  for (const auto& msg : this->_impl_.planning_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  total_size += 1UL * this->_internal_notification_size();
  for (const auto& msg : this->_impl_.notification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::const_iterator
      it = this->_internal_latency().begin();
      it != this->_internal_latency().end(); ++it) {
    total_size += SimulationWorld_LatencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  total_size += 2UL * this->_internal_navigation_path_size();
  for (const auto& msg : this->_impl_.navigation_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Object perceived_signal = 27;
  total_size += 2UL * this->_internal_perceived_signal_size();
  for (const auto& msg : this->_impl_.perceived_signal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, bool> stories = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stories_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_stories().begin();
      it != this->_internal_stories().end(); ++it) {
    total_size += SimulationWorld_StoriesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sensor_measurements_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
      it = this->_internal_sensor_measurements().begin();
      it != this->_internal_sensor_measurements().end(); ++it) {
    total_size += SimulationWorld_SensorMeasurementsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string engage_advice = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_engage_advice());
    }

    // optional .apollo.dreamview.Object auto_driving_car = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.auto_driving_car_);
    }

    // optional .apollo.dreamview.Object traffic_signal = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_signal_);
    }

    // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.main_stop_);
    }

    // optional .apollo.dreamview.Object main_decision = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.main_decision_);
    }

    // optional .apollo.dreamview.DelaysInMs delay = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.delay_);
    }

    // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.monitor_);
    }

    // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.map_element_ids_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.planning_internal.PlanningData planning_data = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_data_);
    }

    // optional .apollo.dreamview.Object gps = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gps_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_marker_);
    }

    // optional .apollo.dreamview.ControlData control_data = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_data_);
    }

    // optional .apollo.dreamview.Object shadow_localization = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shadow_localization_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double routing_time = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 sequence_num = 2;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_num());
    }

    // optional bool is_siren_on = 30 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint64 map_hash = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_map_hash());
    }

    // optional double map_radius = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool is_rss_safe = 25 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulationWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationWorld::GetClassData() const { return &_class_data_; }

void SimulationWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulationWorld *>(to)->MergeFrom(
      static_cast<const SimulationWorld &>(from));
}


void SimulationWorld::MergeFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SimulationWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.object_.MergeFrom(from._impl_.object_);
  _impl_.route_path_.MergeFrom(from._impl_.route_path_);
  _impl_.planning_trajectory_.MergeFrom(from._impl_.planning_trajectory_);
  _impl_.notification_.MergeFrom(from._impl_.notification_);
  _impl_.latency_.MergeFrom(from._impl_.latency_);
  _impl_.navigation_path_.MergeFrom(from._impl_.navigation_path_);
  _impl_.perceived_signal_.MergeFrom(from._impl_.perceived_signal_);
  _impl_.stories_.MergeFrom(from._impl_.stories_);
  _impl_.sensor_measurements_.MergeFrom(from._impl_.sensor_measurements_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_engage_advice(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_auto_driving_car()->::apollo::dreamview::Object::MergeFrom(from._internal_auto_driving_car());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_traffic_signal()->::apollo::dreamview::Object::MergeFrom(from._internal_traffic_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_main_stop()->::apollo::dreamview::Object::MergeFrom(from._internal_main_stop());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_main_decision()->::apollo::dreamview::Object::MergeFrom(from._internal_main_decision());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_delay()->::apollo::dreamview::DelaysInMs::MergeFrom(from._internal_delay());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_monitor()->::apollo::common::monitor::MonitorMessage::MergeFrom(from._internal_monitor());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_map_element_ids()->::apollo::dreamview::MapElementIds::MergeFrom(from._internal_map_element_ids());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from._internal_planning_data());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_gps()->::apollo::dreamview::Object::MergeFrom(from._internal_gps());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_control_data()->::apollo::dreamview::ControlData::MergeFrom(from._internal_control_data());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_shadow_localization()->::apollo::dreamview::Object::MergeFrom(from._internal_shadow_localization());
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.routing_time_ = from._impl_.routing_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.sequence_num_ = from._impl_.sequence_num_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.is_siren_on_ = from._impl_.is_siren_on_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.map_hash_ = from._impl_.map_hash_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.map_radius_ = from._impl_.map_radius_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.is_rss_safe_ = from._impl_.is_rss_safe_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationWorld::CopyFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationWorld::IsInitialized() const {
  return true;
}

void SimulationWorld::InternalSwap(SimulationWorld* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_.InternalSwap(&other->_impl_.object_);
  _impl_.route_path_.InternalSwap(&other->_impl_.route_path_);
  _impl_.planning_trajectory_.InternalSwap(&other->_impl_.planning_trajectory_);
  _impl_.notification_.InternalSwap(&other->_impl_.notification_);
  _impl_.latency_.InternalSwap(&other->_impl_.latency_);
  _impl_.navigation_path_.InternalSwap(&other->_impl_.navigation_path_);
  _impl_.perceived_signal_.InternalSwap(&other->_impl_.perceived_signal_);
  _impl_.stories_.InternalSwap(&other->_impl_.stories_);
  _impl_.sensor_measurements_.InternalSwap(&other->_impl_.sensor_measurements_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.engage_advice_, lhs_arena,
      &other->_impl_.engage_advice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationWorld, _impl_.map_radius_)
      + sizeof(SimulationWorld::_impl_.map_radius_)
      - PROTOBUF_FIELD_OFFSET(SimulationWorld, _impl_.auto_driving_car_)>(
          reinterpret_cast<char*>(&_impl_.auto_driving_car_),
          reinterpret_cast<char*>(&other->_impl_.auto_driving_car_));
  swap(_impl_.is_rss_safe_, other->_impl_.is_rss_safe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::PolygonPoint*
Arena::CreateMaybeMessage< ::apollo::dreamview::PolygonPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::PolygonPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Prediction*
Arena::CreateMaybeMessage< ::apollo::dreamview::Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Decision*
Arena::CreateMaybeMessage< ::apollo::dreamview::Decision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Decision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Object*
Arena::CreateMaybeMessage< ::apollo::dreamview::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DelaysInMs*
Arena::CreateMaybeMessage< ::apollo::dreamview::DelaysInMs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DelaysInMs >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::RoutePath*
Arena::CreateMaybeMessage< ::apollo::dreamview::RoutePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::RoutePath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Latency*
Arena::CreateMaybeMessage< ::apollo::dreamview::Latency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Latency >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::MapElementIds*
Arena::CreateMaybeMessage< ::apollo::dreamview::MapElementIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::MapElementIds >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ControlData*
Arena::CreateMaybeMessage< ::apollo::dreamview::ControlData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Notification*
Arena::CreateMaybeMessage< ::apollo::dreamview::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SensorMeasurements*
Arena::CreateMaybeMessage< ::apollo::dreamview::SensorMeasurements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SensorMeasurements >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld*
Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SimulationWorld >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
