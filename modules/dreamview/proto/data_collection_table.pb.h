// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/data_collection_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
namespace apollo {
namespace dreamview {
class Criterion;
struct CriterionDefaultTypeInternal;
extern CriterionDefaultTypeInternal _Criterion_default_instance_;
class DataCollectionTable;
struct DataCollectionTableDefaultTypeInternal;
extern DataCollectionTableDefaultTypeInternal _DataCollectionTable_default_instance_;
class DataCollectionTable_ScenarioEntry_DoNotUse;
struct DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal;
extern DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal _DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Scenario;
struct ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::Criterion* Arena::CreateMaybeMessage<::apollo::dreamview::Criterion>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Feature* Arena::CreateMaybeMessage<::apollo::dreamview::Feature>(Arena*);
template<> ::apollo::dreamview::Range* Arena::CreateMaybeMessage<::apollo::dreamview::Range>(Arena*);
template<> ::apollo::dreamview::Scenario* Arena::CreateMaybeMessage<::apollo::dreamview::Scenario>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum ComparisonOperator : int {
  EQUAL = 0,
  NOT_EQUAL = 1,
  GREATER_THAN = 2,
  GREATER_THAN_OR_EQUAL = 3,
  LESS_THAN = 4,
  LESS_THAN_OR_EQUAL = 5
};
bool ComparisonOperator_IsValid(int value);
constexpr ComparisonOperator ComparisonOperator_MIN = EQUAL;
constexpr ComparisonOperator ComparisonOperator_MAX = LESS_THAN_OR_EQUAL;
constexpr int ComparisonOperator_ARRAYSIZE = ComparisonOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOperator_descriptor();
template<typename T>
inline const std::string& ComparisonOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComparisonOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComparisonOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComparisonOperator_descriptor(), enum_t_value);
}
inline bool ComparisonOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComparisonOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComparisonOperator>(
    ComparisonOperator_descriptor(), name, value);
}
// ===================================================================

class Criterion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Criterion) */ {
 public:
  inline Criterion() : Criterion(nullptr) {}
  ~Criterion() override;
  explicit PROTOBUF_CONSTEXPR Criterion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Criterion(const Criterion& from);
  Criterion(Criterion&& from) noexcept
    : Criterion() {
    *this = ::std::move(from);
  }

  inline Criterion& operator=(const Criterion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Criterion& operator=(Criterion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Criterion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Criterion* internal_default_instance() {
    return reinterpret_cast<const Criterion*>(
               &_Criterion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Criterion& a, Criterion& b) {
    a.Swap(&b);
  }
  inline void Swap(Criterion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Criterion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Criterion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Criterion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Criterion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Criterion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Criterion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Criterion";
  }
  protected:
  explicit Criterion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kVehicleConfigFieldNumber = 4,
    kComparisonOperatorFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // optional string field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // optional string vehicle_config = 4;
  bool has_vehicle_config() const;
  private:
  bool _internal_has_vehicle_config() const;
  public:
  void clear_vehicle_config();
  const std::string& vehicle_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehicle_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehicle_config();
  PROTOBUF_NODISCARD std::string* release_vehicle_config();
  void set_allocated_vehicle_config(std::string* vehicle_config);
  private:
  const std::string& _internal_vehicle_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_config(const std::string& value);
  std::string* _internal_mutable_vehicle_config();
  public:

  // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
  bool has_comparison_operator() const;
  private:
  bool _internal_has_comparison_operator() const;
  public:
  void clear_comparison_operator();
  ::apollo::dreamview::ComparisonOperator comparison_operator() const;
  void set_comparison_operator(::apollo::dreamview::ComparisonOperator value);
  private:
  ::apollo::dreamview::ComparisonOperator _internal_comparison_operator() const;
  void _internal_set_comparison_operator(::apollo::dreamview::ComparisonOperator value);
  public:

  // optional float value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Criterion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_config_;
    int comparison_operator_;
    float value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit PROTOBUF_CONSTEXPR Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriterionFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .apollo.dreamview.Criterion criterion = 2;
  int criterion_size() const;
  private:
  int _internal_criterion_size() const;
  public:
  void clear_criterion();
  ::apollo::dreamview::Criterion* mutable_criterion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >*
      mutable_criterion();
  private:
  const ::apollo::dreamview::Criterion& _internal_criterion(int index) const;
  ::apollo::dreamview::Criterion* _internal_add_criterion();
  public:
  const ::apollo::dreamview::Criterion& criterion(int index) const;
  ::apollo::dreamview::Criterion* add_criterion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >&
      criterion() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion > criterion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Feature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .apollo.dreamview.Range range = 2;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  ::apollo::dreamview::Range* mutable_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Range >*
      mutable_range();
  private:
  const ::apollo::dreamview::Range& _internal_range(int index) const;
  ::apollo::dreamview::Range* _internal_add_range();
  public:
  const ::apollo::dreamview::Range& range(int index) const;
  ::apollo::dreamview::Range* add_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Range >&
      range() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Range > range_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Scenario final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Scenario) */ {
 public:
  inline Scenario() : Scenario(nullptr) {}
  ~Scenario() override;
  explicit PROTOBUF_CONSTEXPR Scenario(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scenario& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scenario& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Scenario& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Scenario";
  }
  protected:
  explicit Scenario(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // repeated .apollo.dreamview.Feature feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::apollo::dreamview::Feature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Feature >*
      mutable_feature();
  private:
  const ::apollo::dreamview::Feature& _internal_feature(int index) const;
  ::apollo::dreamview::Feature* _internal_add_feature();
  public:
  const ::apollo::dreamview::Feature& feature(int index) const;
  ::apollo::dreamview::Feature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Feature >&
      feature() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Scenario)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Feature > feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class DataCollectionTable_ScenarioEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Scenario,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Scenario,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DataCollectionTable_ScenarioEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DataCollectionTable_ScenarioEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DataCollectionTable_ScenarioEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataCollectionTable_ScenarioEntry_DoNotUse& other);
  static const DataCollectionTable_ScenarioEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataCollectionTable_ScenarioEntry_DoNotUse*>(&_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.DataCollectionTable.ScenarioEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};

// -------------------------------------------------------------------

class DataCollectionTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DataCollectionTable) */ {
 public:
  inline DataCollectionTable() : DataCollectionTable(nullptr) {}
  ~DataCollectionTable() override;
  explicit PROTOBUF_CONSTEXPR DataCollectionTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataCollectionTable(const DataCollectionTable& from);
  DataCollectionTable(DataCollectionTable&& from) noexcept
    : DataCollectionTable() {
    *this = ::std::move(from);
  }

  inline DataCollectionTable& operator=(const DataCollectionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataCollectionTable& operator=(DataCollectionTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataCollectionTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataCollectionTable* internal_default_instance() {
    return reinterpret_cast<const DataCollectionTable*>(
               &_DataCollectionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataCollectionTable& a, DataCollectionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(DataCollectionTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataCollectionTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataCollectionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataCollectionTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataCollectionTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataCollectionTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCollectionTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DataCollectionTable";
  }
  protected:
  explicit DataCollectionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kFrameThresholdFieldNumber = 2,
    kTotalFramesFieldNumber = 3,
  };
  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  int scenario_size() const;
  private:
  int _internal_scenario_size() const;
  public:
  void clear_scenario();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
      _internal_scenario() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
      _internal_mutable_scenario();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
      scenario() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
      mutable_scenario();

  // required uint32 frame_threshold = 2;
  bool has_frame_threshold() const;
  private:
  bool _internal_has_frame_threshold() const;
  public:
  void clear_frame_threshold();
  uint32_t frame_threshold() const;
  void set_frame_threshold(uint32_t value);
  private:
  uint32_t _internal_frame_threshold() const;
  void _internal_set_frame_threshold(uint32_t value);
  public:

  // required uint32 total_frames = 3;
  bool has_total_frames() const;
  private:
  bool _internal_has_total_frames() const;
  public:
  void clear_total_frames();
  uint32_t total_frames() const;
  void set_total_frames(uint32_t value);
  private:
  uint32_t _internal_total_frames() const;
  void _internal_set_total_frames(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DataCollectionTable)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DataCollectionTable_ScenarioEntry_DoNotUse,
        std::string, ::apollo::dreamview::Scenario,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> scenario_;
    uint32_t frame_threshold_;
    uint32_t total_frames_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Criterion

// optional string field = 1;
inline bool Criterion::_internal_has_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Criterion::has_field() const {
  return _internal_has_field();
}
inline void Criterion::clear_field() {
  _impl_.field_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Criterion::field() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Criterion::set_field(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.field)
}
inline std::string* Criterion::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.field)
  return _s;
}
inline const std::string& Criterion::_internal_field() const {
  return _impl_.field_.Get();
}
inline void Criterion::_internal_set_field(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field_.Set(value, GetArenaForAllocation());
}
inline std::string* Criterion::_internal_mutable_field() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.field_.Mutable(GetArenaForAllocation());
}
inline std::string* Criterion::release_field() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.field)
  if (!_internal_has_field()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.field_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_.IsDefault()) {
    _impl_.field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Criterion::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.field_.SetAllocated(field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_.IsDefault()) {
    _impl_.field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.field)
}

// optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
inline bool Criterion::_internal_has_comparison_operator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Criterion::has_comparison_operator() const {
  return _internal_has_comparison_operator();
}
inline void Criterion::clear_comparison_operator() {
  _impl_.comparison_operator_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::dreamview::ComparisonOperator Criterion::_internal_comparison_operator() const {
  return static_cast< ::apollo::dreamview::ComparisonOperator >(_impl_.comparison_operator_);
}
inline ::apollo::dreamview::ComparisonOperator Criterion::comparison_operator() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.comparison_operator)
  return _internal_comparison_operator();
}
inline void Criterion::_internal_set_comparison_operator(::apollo::dreamview::ComparisonOperator value) {
  assert(::apollo::dreamview::ComparisonOperator_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.comparison_operator_ = value;
}
inline void Criterion::set_comparison_operator(::apollo::dreamview::ComparisonOperator value) {
  _internal_set_comparison_operator(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.comparison_operator)
}

// optional float value = 3;
inline bool Criterion::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Criterion::has_value() const {
  return _internal_has_value();
}
inline void Criterion::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Criterion::_internal_value() const {
  return _impl_.value_;
}
inline float Criterion::value() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.value)
  return _internal_value();
}
inline void Criterion::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_ = value;
}
inline void Criterion::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.value)
}

// optional string vehicle_config = 4;
inline bool Criterion::_internal_has_vehicle_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Criterion::has_vehicle_config() const {
  return _internal_has_vehicle_config();
}
inline void Criterion::clear_vehicle_config() {
  _impl_.vehicle_config_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Criterion::vehicle_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.vehicle_config)
  return _internal_vehicle_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Criterion::set_vehicle_config(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.vehicle_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.vehicle_config)
}
inline std::string* Criterion::mutable_vehicle_config() {
  std::string* _s = _internal_mutable_vehicle_config();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.vehicle_config)
  return _s;
}
inline const std::string& Criterion::_internal_vehicle_config() const {
  return _impl_.vehicle_config_.Get();
}
inline void Criterion::_internal_set_vehicle_config(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vehicle_config_.Set(value, GetArenaForAllocation());
}
inline std::string* Criterion::_internal_mutable_vehicle_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.vehicle_config_.Mutable(GetArenaForAllocation());
}
inline std::string* Criterion::release_vehicle_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.vehicle_config)
  if (!_internal_has_vehicle_config()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.vehicle_config_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vehicle_config_.IsDefault()) {
    _impl_.vehicle_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Criterion::set_allocated_vehicle_config(std::string* vehicle_config) {
  if (vehicle_config != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vehicle_config_.SetAllocated(vehicle_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vehicle_config_.IsDefault()) {
    _impl_.vehicle_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.vehicle_config)
}

// -------------------------------------------------------------------

// Range

// optional string name = 1;
inline bool Range::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Range::has_name() const {
  return _internal_has_name();
}
inline void Range::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Range::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Range.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Range.name)
}
inline std::string* Range::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Range.name)
  return _s;
}
inline const std::string& Range::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Range::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Range::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Range.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Range::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Range.name)
}

// repeated .apollo.dreamview.Criterion criterion = 2;
inline int Range::_internal_criterion_size() const {
  return _impl_.criterion_.size();
}
inline int Range::criterion_size() const {
  return _internal_criterion_size();
}
inline void Range::clear_criterion() {
  _impl_.criterion_.Clear();
}
inline ::apollo::dreamview::Criterion* Range::mutable_criterion(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Range.criterion)
  return _impl_.criterion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >*
Range::mutable_criterion() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Range.criterion)
  return &_impl_.criterion_;
}
inline const ::apollo::dreamview::Criterion& Range::_internal_criterion(int index) const {
  return _impl_.criterion_.Get(index);
}
inline const ::apollo::dreamview::Criterion& Range::criterion(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Range.criterion)
  return _internal_criterion(index);
}
inline ::apollo::dreamview::Criterion* Range::_internal_add_criterion() {
  return _impl_.criterion_.Add();
}
inline ::apollo::dreamview::Criterion* Range::add_criterion() {
  ::apollo::dreamview::Criterion* _add = _internal_add_criterion();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Range.criterion)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >&
Range::criterion() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Range.criterion)
  return _impl_.criterion_;
}

// -------------------------------------------------------------------

// Feature

// optional string name = 1;
inline bool Feature::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Feature::has_name() const {
  return _internal_has_name();
}
inline void Feature::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Feature::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Feature.name)
}
inline std::string* Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Feature.name)
  return _s;
}
inline const std::string& Feature::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Feature::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Feature::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Feature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Feature.name)
}

// repeated .apollo.dreamview.Range range = 2;
inline int Feature::_internal_range_size() const {
  return _impl_.range_.size();
}
inline int Feature::range_size() const {
  return _internal_range_size();
}
inline void Feature::clear_range() {
  _impl_.range_.Clear();
}
inline ::apollo::dreamview::Range* Feature::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Feature.range)
  return _impl_.range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Range >*
Feature::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Feature.range)
  return &_impl_.range_;
}
inline const ::apollo::dreamview::Range& Feature::_internal_range(int index) const {
  return _impl_.range_.Get(index);
}
inline const ::apollo::dreamview::Range& Feature::range(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Feature.range)
  return _internal_range(index);
}
inline ::apollo::dreamview::Range* Feature::_internal_add_range() {
  return _impl_.range_.Add();
}
inline ::apollo::dreamview::Range* Feature::add_range() {
  ::apollo::dreamview::Range* _add = _internal_add_range();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Feature.range)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Range >&
Feature::range() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Feature.range)
  return _impl_.range_;
}

// -------------------------------------------------------------------

// Scenario

// repeated .apollo.dreamview.Feature feature = 1;
inline int Scenario::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int Scenario::feature_size() const {
  return _internal_feature_size();
}
inline void Scenario::clear_feature() {
  _impl_.feature_.Clear();
}
inline ::apollo::dreamview::Feature* Scenario::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Scenario.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Feature >*
Scenario::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Scenario.feature)
  return &_impl_.feature_;
}
inline const ::apollo::dreamview::Feature& Scenario::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::apollo::dreamview::Feature& Scenario::feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Scenario.feature)
  return _internal_feature(index);
}
inline ::apollo::dreamview::Feature* Scenario::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::apollo::dreamview::Feature* Scenario::add_feature() {
  ::apollo::dreamview::Feature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Scenario.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Feature >&
Scenario::feature() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Scenario.feature)
  return _impl_.feature_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataCollectionTable

// map<string, .apollo.dreamview.Scenario> scenario = 1;
inline int DataCollectionTable::_internal_scenario_size() const {
  return _impl_.scenario_.size();
}
inline int DataCollectionTable::scenario_size() const {
  return _internal_scenario_size();
}
inline void DataCollectionTable::clear_scenario() {
  _impl_.scenario_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
DataCollectionTable::_internal_scenario() const {
  return _impl_.scenario_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
DataCollectionTable::scenario() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.DataCollectionTable.scenario)
  return _internal_scenario();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
DataCollectionTable::_internal_mutable_scenario() {
  return _impl_.scenario_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
DataCollectionTable::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.DataCollectionTable.scenario)
  return _internal_mutable_scenario();
}

// required uint32 frame_threshold = 2;
inline bool DataCollectionTable::_internal_has_frame_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataCollectionTable::has_frame_threshold() const {
  return _internal_has_frame_threshold();
}
inline void DataCollectionTable::clear_frame_threshold() {
  _impl_.frame_threshold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t DataCollectionTable::_internal_frame_threshold() const {
  return _impl_.frame_threshold_;
}
inline uint32_t DataCollectionTable::frame_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataCollectionTable.frame_threshold)
  return _internal_frame_threshold();
}
inline void DataCollectionTable::_internal_set_frame_threshold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_threshold_ = value;
}
inline void DataCollectionTable::set_frame_threshold(uint32_t value) {
  _internal_set_frame_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataCollectionTable.frame_threshold)
}

// required uint32 total_frames = 3;
inline bool DataCollectionTable::_internal_has_total_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataCollectionTable::has_total_frames() const {
  return _internal_has_total_frames();
}
inline void DataCollectionTable::clear_total_frames() {
  _impl_.total_frames_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DataCollectionTable::_internal_total_frames() const {
  return _impl_.total_frames_;
}
inline uint32_t DataCollectionTable::total_frames() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataCollectionTable.total_frames)
  return _internal_total_frames();
}
inline void DataCollectionTable::_internal_set_total_frames(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.total_frames_ = value;
}
inline void DataCollectionTable::set_total_frames(uint32_t value) {
  _internal_set_total_frames(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataCollectionTable.total_frames)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::ComparisonOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::ComparisonOperator>() {
  return ::apollo::dreamview::ComparisonOperator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
