// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/voice_detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/dreamview/proto/hmi_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
namespace apollo {
namespace dreamview {
class VoiceDetectionConf;
struct VoiceDetectionConfDefaultTypeInternal;
extern VoiceDetectionConfDefaultTypeInternal _VoiceDetectionConf_default_instance_;
class VoiceDetectionConf_SnowboyModel;
struct VoiceDetectionConf_SnowboyModelDefaultTypeInternal;
extern VoiceDetectionConf_SnowboyModelDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_default_instance_;
class VoiceDetectionConf_SnowboyModel_Hotword;
struct VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal;
extern VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_;
class VoiceDetectionRequest;
struct VoiceDetectionRequestDefaultTypeInternal;
extern VoiceDetectionRequestDefaultTypeInternal _VoiceDetectionRequest_default_instance_;
class VoiceDetectionResponse;
struct VoiceDetectionResponseDefaultTypeInternal;
extern VoiceDetectionResponseDefaultTypeInternal _VoiceDetectionResponse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::VoiceDetectionConf* Arena::CreateMaybeMessage<::apollo::dreamview::VoiceDetectionConf>(Arena*);
template<> ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* Arena::CreateMaybeMessage<::apollo::dreamview::VoiceDetectionConf_SnowboyModel>(Arena*);
template<> ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* Arena::CreateMaybeMessage<::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword>(Arena*);
template<> ::apollo::dreamview::VoiceDetectionRequest* Arena::CreateMaybeMessage<::apollo::dreamview::VoiceDetectionRequest>(Arena*);
template<> ::apollo::dreamview::VoiceDetectionResponse* Arena::CreateMaybeMessage<::apollo::dreamview::VoiceDetectionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class VoiceDetectionConf_SnowboyModel_Hotword final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword) */ {
 public:
  inline VoiceDetectionConf_SnowboyModel_Hotword() : VoiceDetectionConf_SnowboyModel_Hotword(nullptr) {}
  ~VoiceDetectionConf_SnowboyModel_Hotword() override;
  explicit PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModel_Hotword(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceDetectionConf_SnowboyModel_Hotword(const VoiceDetectionConf_SnowboyModel_Hotword& from);
  VoiceDetectionConf_SnowboyModel_Hotword(VoiceDetectionConf_SnowboyModel_Hotword&& from) noexcept
    : VoiceDetectionConf_SnowboyModel_Hotword() {
    *this = ::std::move(from);
  }

  inline VoiceDetectionConf_SnowboyModel_Hotword& operator=(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceDetectionConf_SnowboyModel_Hotword& operator=(VoiceDetectionConf_SnowboyModel_Hotword&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceDetectionConf_SnowboyModel_Hotword& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceDetectionConf_SnowboyModel_Hotword* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf_SnowboyModel_Hotword*>(
               &_VoiceDetectionConf_SnowboyModel_Hotword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoiceDetectionConf_SnowboyModel_Hotword& a, VoiceDetectionConf_SnowboyModel_Hotword& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceDetectionConf_SnowboyModel_Hotword* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceDetectionConf_SnowboyModel_Hotword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceDetectionConf_SnowboyModel_Hotword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceDetectionConf_SnowboyModel_Hotword>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceDetectionConf_SnowboyModel_Hotword* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword";
  }
  protected:
  explicit VoiceDetectionConf_SnowboyModel_Hotword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kResponseMessageFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // optional string word = 1;
  bool has_word() const;
  private:
  bool _internal_has_word() const;
  public:
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // optional string response_message = 3;
  bool has_response_message() const;
  private:
  bool _internal_has_response_message() const;
  public:
  void clear_response_message();
  const std::string& response_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_message();
  PROTOBUF_NODISCARD std::string* release_response_message();
  void set_allocated_response_message(std::string* response_message);
  private:
  const std::string& _internal_response_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_message(const std::string& value);
  std::string* _internal_mutable_response_message();
  public:

  // optional .apollo.dreamview.HMIAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::apollo::dreamview::HMIAction action() const;
  void set_action(::apollo::dreamview::HMIAction value);
  private:
  ::apollo::dreamview::HMIAction _internal_action() const;
  void _internal_set_action(::apollo::dreamview::HMIAction value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_message_;
    int action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class VoiceDetectionConf_SnowboyModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VoiceDetectionConf.SnowboyModel) */ {
 public:
  inline VoiceDetectionConf_SnowboyModel() : VoiceDetectionConf_SnowboyModel(nullptr) {}
  ~VoiceDetectionConf_SnowboyModel() override;
  explicit PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceDetectionConf_SnowboyModel(const VoiceDetectionConf_SnowboyModel& from);
  VoiceDetectionConf_SnowboyModel(VoiceDetectionConf_SnowboyModel&& from) noexcept
    : VoiceDetectionConf_SnowboyModel() {
    *this = ::std::move(from);
  }

  inline VoiceDetectionConf_SnowboyModel& operator=(const VoiceDetectionConf_SnowboyModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceDetectionConf_SnowboyModel& operator=(VoiceDetectionConf_SnowboyModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceDetectionConf_SnowboyModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceDetectionConf_SnowboyModel* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf_SnowboyModel*>(
               &_VoiceDetectionConf_SnowboyModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VoiceDetectionConf_SnowboyModel& a, VoiceDetectionConf_SnowboyModel& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceDetectionConf_SnowboyModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceDetectionConf_SnowboyModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceDetectionConf_SnowboyModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceDetectionConf_SnowboyModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceDetectionConf_SnowboyModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoiceDetectionConf_SnowboyModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceDetectionConf_SnowboyModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VoiceDetectionConf.SnowboyModel";
  }
  protected:
  explicit VoiceDetectionConf_SnowboyModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VoiceDetectionConf_SnowboyModel_Hotword Hotword;

  // accessors -------------------------------------------------------

  enum : int {
    kHotwordsFieldNumber = 2,
    kPathFieldNumber = 1,
  };
  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  int hotwords_size() const;
  private:
  int _internal_hotwords_size() const;
  public:
  void clear_hotwords();
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* mutable_hotwords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >*
      mutable_hotwords();
  private:
  const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& _internal_hotwords(int index) const;
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* _internal_add_hotwords();
  public:
  const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& hotwords(int index) const;
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* add_hotwords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >&
      hotwords() const;

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword > hotwords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class VoiceDetectionConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VoiceDetectionConf) */ {
 public:
  inline VoiceDetectionConf() : VoiceDetectionConf(nullptr) {}
  ~VoiceDetectionConf() override;
  explicit PROTOBUF_CONSTEXPR VoiceDetectionConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceDetectionConf(const VoiceDetectionConf& from);
  VoiceDetectionConf(VoiceDetectionConf&& from) noexcept
    : VoiceDetectionConf() {
    *this = ::std::move(from);
  }

  inline VoiceDetectionConf& operator=(const VoiceDetectionConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceDetectionConf& operator=(VoiceDetectionConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceDetectionConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceDetectionConf* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf*>(
               &_VoiceDetectionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VoiceDetectionConf& a, VoiceDetectionConf& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceDetectionConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceDetectionConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceDetectionConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceDetectionConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceDetectionConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoiceDetectionConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceDetectionConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VoiceDetectionConf";
  }
  protected:
  explicit VoiceDetectionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VoiceDetectionConf_SnowboyModel SnowboyModel;

  // accessors -------------------------------------------------------

  enum : int {
    kSnowboyModelsFieldNumber = 4,
    kSnowboyResourceFieldNumber = 1,
    kAudioGainFieldNumber = 2,
    kSensitivityFieldNumber = 3,
  };
  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  int snowboy_models_size() const;
  private:
  int _internal_snowboy_models_size() const;
  public:
  void clear_snowboy_models();
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* mutable_snowboy_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >*
      mutable_snowboy_models();
  private:
  const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel& _internal_snowboy_models(int index) const;
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* _internal_add_snowboy_models();
  public:
  const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel& snowboy_models(int index) const;
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* add_snowboy_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >&
      snowboy_models() const;

  // optional string snowboy_resource = 1 [default = "/usr/local/apollo/snowboy/resources/common.res"];
  bool has_snowboy_resource() const;
  private:
  bool _internal_has_snowboy_resource() const;
  public:
  void clear_snowboy_resource();
  const std::string& snowboy_resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snowboy_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snowboy_resource();
  PROTOBUF_NODISCARD std::string* release_snowboy_resource();
  void set_allocated_snowboy_resource(std::string* snowboy_resource);
  private:
  const std::string& _internal_snowboy_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snowboy_resource(const std::string& value);
  std::string* _internal_mutable_snowboy_resource();
  public:

  // optional float audio_gain = 2 [default = 1];
  bool has_audio_gain() const;
  private:
  bool _internal_has_audio_gain() const;
  public:
  void clear_audio_gain();
  float audio_gain() const;
  void set_audio_gain(float value);
  private:
  float _internal_audio_gain() const;
  void _internal_set_audio_gain(float value);
  public:

  // optional float sensitivity = 3 [default = 0.75];
  bool has_sensitivity() const;
  private:
  bool _internal_has_sensitivity() const;
  public:
  void clear_sensitivity();
  float sensitivity() const;
  void set_sensitivity(float value);
  private:
  float _internal_sensitivity() const;
  void _internal_set_sensitivity(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VoiceDetectionConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel > snowboy_models_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_snowboy_resource_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snowboy_resource_;
    float audio_gain_;
    float sensitivity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class VoiceDetectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VoiceDetectionRequest) */ {
 public:
  inline VoiceDetectionRequest() : VoiceDetectionRequest(nullptr) {}
  ~VoiceDetectionRequest() override;
  explicit PROTOBUF_CONSTEXPR VoiceDetectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceDetectionRequest(const VoiceDetectionRequest& from);
  VoiceDetectionRequest(VoiceDetectionRequest&& from) noexcept
    : VoiceDetectionRequest() {
    *this = ::std::move(from);
  }

  inline VoiceDetectionRequest& operator=(const VoiceDetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceDetectionRequest& operator=(VoiceDetectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceDetectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceDetectionRequest* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionRequest*>(
               &_VoiceDetectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VoiceDetectionRequest& a, VoiceDetectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceDetectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceDetectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceDetectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceDetectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceDetectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoiceDetectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceDetectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VoiceDetectionRequest";
  }
  protected:
  explicit VoiceDetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWavStreamFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional bytes wav_stream = 2;
  bool has_wav_stream() const;
  private:
  bool _internal_has_wav_stream() const;
  public:
  void clear_wav_stream();
  const std::string& wav_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wav_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wav_stream();
  PROTOBUF_NODISCARD std::string* release_wav_stream();
  void set_allocated_wav_stream(std::string* wav_stream);
  private:
  const std::string& _internal_wav_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wav_stream(const std::string& value);
  std::string* _internal_mutable_wav_stream();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VoiceDetectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wav_stream_;
    uint64_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class VoiceDetectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VoiceDetectionResponse) */ {
 public:
  inline VoiceDetectionResponse() : VoiceDetectionResponse(nullptr) {}
  ~VoiceDetectionResponse() override;
  explicit PROTOBUF_CONSTEXPR VoiceDetectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoiceDetectionResponse(const VoiceDetectionResponse& from);
  VoiceDetectionResponse(VoiceDetectionResponse&& from) noexcept
    : VoiceDetectionResponse() {
    *this = ::std::move(from);
  }

  inline VoiceDetectionResponse& operator=(const VoiceDetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceDetectionResponse& operator=(VoiceDetectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoiceDetectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoiceDetectionResponse* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionResponse*>(
               &_VoiceDetectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VoiceDetectionResponse& a, VoiceDetectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceDetectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoiceDetectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoiceDetectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoiceDetectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoiceDetectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VoiceDetectionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceDetectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VoiceDetectionResponse";
  }
  protected:
  explicit VoiceDetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional .apollo.dreamview.HMIAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::apollo::dreamview::HMIAction action() const;
  void set_action(::apollo::dreamview::HMIAction value);
  private:
  ::apollo::dreamview::HMIAction _internal_action() const;
  void _internal_set_action(::apollo::dreamview::HMIAction value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VoiceDetectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t id_;
    int action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoiceDetectionConf_SnowboyModel_Hotword

// optional string word = 1;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::_internal_has_word() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_word() const {
  return _internal_has_word();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_word() {
  _impl_.word_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceDetectionConf_SnowboyModel_Hotword::word() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceDetectionConf_SnowboyModel_Hotword::set_word(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.word_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return _s;
}
inline const std::string& VoiceDetectionConf_SnowboyModel_Hotword::_internal_word() const {
  return _impl_.word_.Get();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::_internal_set_word(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.word_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::_internal_mutable_word() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.word_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_word() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  if (!_internal_has_word()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.word_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.word_.SetAllocated(word, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}

// optional .apollo.dreamview.HMIAction action = 2;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_action() const {
  return _internal_has_action();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::dreamview::HMIAction VoiceDetectionConf_SnowboyModel_Hotword::_internal_action() const {
  return static_cast< ::apollo::dreamview::HMIAction >(_impl_.action_);
}
inline ::apollo::dreamview::HMIAction VoiceDetectionConf_SnowboyModel_Hotword::action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
  return _internal_action();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::_internal_set_action(::apollo::dreamview::HMIAction value) {
  assert(::apollo::dreamview::HMIAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.action_ = value;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_action(::apollo::dreamview::HMIAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
}

// optional string response_message = 3;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::_internal_has_response_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_response_message() const {
  return _internal_has_response_message();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_response_message() {
  _impl_.response_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VoiceDetectionConf_SnowboyModel_Hotword::response_message() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return _internal_response_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.response_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_response_message() {
  std::string* _s = _internal_mutable_response_message();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return _s;
}
inline const std::string& VoiceDetectionConf_SnowboyModel_Hotword::_internal_response_message() const {
  return _impl_.response_message_.Get();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::_internal_set_response_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_message_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::_internal_mutable_response_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.response_message_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_response_message() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  if (!_internal_has_response_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.response_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_message_.IsDefault()) {
    _impl_.response_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_response_message(std::string* response_message) {
  if (response_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.response_message_.SetAllocated(response_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_message_.IsDefault()) {
    _impl_.response_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}

// -------------------------------------------------------------------

// VoiceDetectionConf_SnowboyModel

// optional string path = 1;
inline bool VoiceDetectionConf_SnowboyModel::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceDetectionConf_SnowboyModel::has_path() const {
  return _internal_has_path();
}
inline void VoiceDetectionConf_SnowboyModel::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceDetectionConf_SnowboyModel::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceDetectionConf_SnowboyModel::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
inline std::string* VoiceDetectionConf_SnowboyModel::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return _s;
}
inline const std::string& VoiceDetectionConf_SnowboyModel::_internal_path() const {
  return _impl_.path_.Get();
}
inline void VoiceDetectionConf_SnowboyModel::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf_SnowboyModel::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VoiceDetectionConf.SnowboyModel.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VoiceDetectionConf_SnowboyModel::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VoiceDetectionConf.SnowboyModel.path)
}

// repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
inline int VoiceDetectionConf_SnowboyModel::_internal_hotwords_size() const {
  return _impl_.hotwords_.size();
}
inline int VoiceDetectionConf_SnowboyModel::hotwords_size() const {
  return _internal_hotwords_size();
}
inline void VoiceDetectionConf_SnowboyModel::clear_hotwords() {
  _impl_.hotwords_.Clear();
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::mutable_hotwords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return _impl_.hotwords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >*
VoiceDetectionConf_SnowboyModel::mutable_hotwords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return &_impl_.hotwords_;
}
inline const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& VoiceDetectionConf_SnowboyModel::_internal_hotwords(int index) const {
  return _impl_.hotwords_.Get(index);
}
inline const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& VoiceDetectionConf_SnowboyModel::hotwords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return _internal_hotwords(index);
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::_internal_add_hotwords() {
  return _impl_.hotwords_.Add();
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::add_hotwords() {
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* _add = _internal_add_hotwords();
  // @@protoc_insertion_point(field_add:apollo.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >&
VoiceDetectionConf_SnowboyModel::hotwords() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return _impl_.hotwords_;
}

// -------------------------------------------------------------------

// VoiceDetectionConf

// optional string snowboy_resource = 1 [default = "/usr/local/apollo/snowboy/resources/common.res"];
inline bool VoiceDetectionConf::_internal_has_snowboy_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceDetectionConf::has_snowboy_resource() const {
  return _internal_has_snowboy_resource();
}
inline void VoiceDetectionConf::clear_snowboy_resource() {
  _impl_.snowboy_resource_.ClearToDefault(::apollo::dreamview::VoiceDetectionConf::Impl_::_i_give_permission_to_break_this_code_default_snowboy_resource_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceDetectionConf::snowboy_resource() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.snowboy_resource)
  if (_impl_.snowboy_resource_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_snowboy_resource_.get();
  return _internal_snowboy_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceDetectionConf::set_snowboy_resource(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.snowboy_resource_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.snowboy_resource)
}
inline std::string* VoiceDetectionConf::mutable_snowboy_resource() {
  std::string* _s = _internal_mutable_snowboy_resource();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.snowboy_resource)
  return _s;
}
inline const std::string& VoiceDetectionConf::_internal_snowboy_resource() const {
  return _impl_.snowboy_resource_.Get();
}
inline void VoiceDetectionConf::_internal_set_snowboy_resource(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.snowboy_resource_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf::_internal_mutable_snowboy_resource() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.snowboy_resource_.Mutable(::apollo::dreamview::VoiceDetectionConf::Impl_::_i_give_permission_to_break_this_code_default_snowboy_resource_, GetArenaForAllocation());
}
inline std::string* VoiceDetectionConf::release_snowboy_resource() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VoiceDetectionConf.snowboy_resource)
  if (!_internal_has_snowboy_resource()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.snowboy_resource_.Release();
  return p;
}
inline void VoiceDetectionConf::set_allocated_snowboy_resource(std::string* snowboy_resource) {
  if (snowboy_resource != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.snowboy_resource_.SetAllocated(snowboy_resource, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VoiceDetectionConf.snowboy_resource)
}

// optional float audio_gain = 2 [default = 1];
inline bool VoiceDetectionConf::_internal_has_audio_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceDetectionConf::has_audio_gain() const {
  return _internal_has_audio_gain();
}
inline void VoiceDetectionConf::clear_audio_gain() {
  _impl_.audio_gain_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float VoiceDetectionConf::_internal_audio_gain() const {
  return _impl_.audio_gain_;
}
inline float VoiceDetectionConf::audio_gain() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.audio_gain)
  return _internal_audio_gain();
}
inline void VoiceDetectionConf::_internal_set_audio_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.audio_gain_ = value;
}
inline void VoiceDetectionConf::set_audio_gain(float value) {
  _internal_set_audio_gain(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.audio_gain)
}

// optional float sensitivity = 3 [default = 0.75];
inline bool VoiceDetectionConf::_internal_has_sensitivity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VoiceDetectionConf::has_sensitivity() const {
  return _internal_has_sensitivity();
}
inline void VoiceDetectionConf::clear_sensitivity() {
  _impl_.sensitivity_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float VoiceDetectionConf::_internal_sensitivity() const {
  return _impl_.sensitivity_;
}
inline float VoiceDetectionConf::sensitivity() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.sensitivity)
  return _internal_sensitivity();
}
inline void VoiceDetectionConf::_internal_set_sensitivity(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sensitivity_ = value;
}
inline void VoiceDetectionConf::set_sensitivity(float value) {
  _internal_set_sensitivity(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionConf.sensitivity)
}

// repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
inline int VoiceDetectionConf::_internal_snowboy_models_size() const {
  return _impl_.snowboy_models_.size();
}
inline int VoiceDetectionConf::snowboy_models_size() const {
  return _internal_snowboy_models_size();
}
inline void VoiceDetectionConf::clear_snowboy_models() {
  _impl_.snowboy_models_.Clear();
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::mutable_snowboy_models(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionConf.snowboy_models)
  return _impl_.snowboy_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >*
VoiceDetectionConf::mutable_snowboy_models() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VoiceDetectionConf.snowboy_models)
  return &_impl_.snowboy_models_;
}
inline const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel& VoiceDetectionConf::_internal_snowboy_models(int index) const {
  return _impl_.snowboy_models_.Get(index);
}
inline const ::apollo::dreamview::VoiceDetectionConf_SnowboyModel& VoiceDetectionConf::snowboy_models(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionConf.snowboy_models)
  return _internal_snowboy_models(index);
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::_internal_add_snowboy_models() {
  return _impl_.snowboy_models_.Add();
}
inline ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::add_snowboy_models() {
  ::apollo::dreamview::VoiceDetectionConf_SnowboyModel* _add = _internal_add_snowboy_models();
  // @@protoc_insertion_point(field_add:apollo.dreamview.VoiceDetectionConf.snowboy_models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >&
VoiceDetectionConf::snowboy_models() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VoiceDetectionConf.snowboy_models)
  return _impl_.snowboy_models_;
}

// -------------------------------------------------------------------

// VoiceDetectionRequest

// optional uint64 id = 1;
inline bool VoiceDetectionRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceDetectionRequest::has_id() const {
  return _internal_has_id();
}
inline void VoiceDetectionRequest::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t VoiceDetectionRequest::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t VoiceDetectionRequest::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionRequest.id)
  return _internal_id();
}
inline void VoiceDetectionRequest::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void VoiceDetectionRequest::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionRequest.id)
}

// optional bytes wav_stream = 2;
inline bool VoiceDetectionRequest::_internal_has_wav_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceDetectionRequest::has_wav_stream() const {
  return _internal_has_wav_stream();
}
inline void VoiceDetectionRequest::clear_wav_stream() {
  _impl_.wav_stream_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VoiceDetectionRequest::wav_stream() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionRequest.wav_stream)
  return _internal_wav_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VoiceDetectionRequest::set_wav_stream(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.wav_stream_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionRequest.wav_stream)
}
inline std::string* VoiceDetectionRequest::mutable_wav_stream() {
  std::string* _s = _internal_mutable_wav_stream();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VoiceDetectionRequest.wav_stream)
  return _s;
}
inline const std::string& VoiceDetectionRequest::_internal_wav_stream() const {
  return _impl_.wav_stream_.Get();
}
inline void VoiceDetectionRequest::_internal_set_wav_stream(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wav_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* VoiceDetectionRequest::_internal_mutable_wav_stream() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.wav_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* VoiceDetectionRequest::release_wav_stream() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VoiceDetectionRequest.wav_stream)
  if (!_internal_has_wav_stream()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.wav_stream_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wav_stream_.IsDefault()) {
    _impl_.wav_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VoiceDetectionRequest::set_allocated_wav_stream(std::string* wav_stream) {
  if (wav_stream != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.wav_stream_.SetAllocated(wav_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wav_stream_.IsDefault()) {
    _impl_.wav_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VoiceDetectionRequest.wav_stream)
}

// -------------------------------------------------------------------

// VoiceDetectionResponse

// optional uint64 id = 1;
inline bool VoiceDetectionResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VoiceDetectionResponse::has_id() const {
  return _internal_has_id();
}
inline void VoiceDetectionResponse::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t VoiceDetectionResponse::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t VoiceDetectionResponse::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionResponse.id)
  return _internal_id();
}
inline void VoiceDetectionResponse::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void VoiceDetectionResponse::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionResponse.id)
}

// optional .apollo.dreamview.HMIAction action = 2;
inline bool VoiceDetectionResponse::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VoiceDetectionResponse::has_action() const {
  return _internal_has_action();
}
inline void VoiceDetectionResponse::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::dreamview::HMIAction VoiceDetectionResponse::_internal_action() const {
  return static_cast< ::apollo::dreamview::HMIAction >(_impl_.action_);
}
inline ::apollo::dreamview::HMIAction VoiceDetectionResponse::action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VoiceDetectionResponse.action)
  return _internal_action();
}
inline void VoiceDetectionResponse::_internal_set_action(::apollo::dreamview::HMIAction value) {
  assert(::apollo::dreamview::HMIAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.action_ = value;
}
inline void VoiceDetectionResponse::set_action(::apollo::dreamview::HMIAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.VoiceDetectionResponse.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto
