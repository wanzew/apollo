// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/monitor/proto/system_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto;
namespace apollo {
namespace dreamview {
class HMIStatus;
struct HMIStatusDefaultTypeInternal;
extern HMIStatusDefaultTypeInternal _HMIStatus_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::HMIStatus* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class HMIStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIStatus) */ {
 public:
  inline HMIStatus() : HMIStatus(nullptr) {}
  ~HMIStatus() override;
  explicit PROTOBUF_CONSTEXPR HMIStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIStatus(const HMIStatus& from);
  HMIStatus(HMIStatus&& from) noexcept
    : HMIStatus() {
    *this = ::std::move(from);
  }

  inline HMIStatus& operator=(const HMIStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIStatus& operator=(HMIStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HMIStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIStatus* internal_default_instance() {
    return reinterpret_cast<const HMIStatus*>(
               &_HMIStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HMIStatus& a, HMIStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HMIStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HMIStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HMIStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HMIStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIStatus";
  }
  protected:
  explicit HMIStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentMapFieldNumber = 2,
    kCurrentVehicleFieldNumber = 3,
    kCurrentModeFieldNumber = 4,
    kSystemStatusFieldNumber = 1,
  };
  // optional string current_map = 2;
  bool has_current_map() const;
  private:
  bool _internal_has_current_map() const;
  public:
  void clear_current_map();
  const std::string& current_map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_map();
  PROTOBUF_NODISCARD std::string* release_current_map();
  void set_allocated_current_map(std::string* current_map);
  private:
  const std::string& _internal_current_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_map(const std::string& value);
  std::string* _internal_mutable_current_map();
  public:

  // optional string current_vehicle = 3;
  bool has_current_vehicle() const;
  private:
  bool _internal_has_current_vehicle() const;
  public:
  void clear_current_vehicle();
  const std::string& current_vehicle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_vehicle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_vehicle();
  PROTOBUF_NODISCARD std::string* release_current_vehicle();
  void set_allocated_current_vehicle(std::string* current_vehicle);
  private:
  const std::string& _internal_current_vehicle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_vehicle(const std::string& value);
  std::string* _internal_mutable_current_vehicle();
  public:

  // optional string current_mode = 4 [default = "Standard"];
  bool has_current_mode() const;
  private:
  bool _internal_has_current_mode() const;
  public:
  void clear_current_mode();
  const std::string& current_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_mode();
  PROTOBUF_NODISCARD std::string* release_current_mode();
  void set_allocated_current_mode(std::string* current_mode);
  private:
  const std::string& _internal_current_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_mode(const std::string& value);
  std::string* _internal_mutable_current_mode();
  public:

  // optional .apollo.monitor.SystemStatus system_status = 1;
  bool has_system_status() const;
  private:
  bool _internal_has_system_status() const;
  public:
  void clear_system_status();
  const ::apollo::monitor::SystemStatus& system_status() const;
  PROTOBUF_NODISCARD ::apollo::monitor::SystemStatus* release_system_status();
  ::apollo::monitor::SystemStatus* mutable_system_status();
  void set_allocated_system_status(::apollo::monitor::SystemStatus* system_status);
  private:
  const ::apollo::monitor::SystemStatus& _internal_system_status() const;
  ::apollo::monitor::SystemStatus* _internal_mutable_system_status();
  public:
  void unsafe_arena_set_allocated_system_status(
      ::apollo::monitor::SystemStatus* system_status);
  ::apollo::monitor::SystemStatus* unsafe_arena_release_system_status();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_vehicle_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_current_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_mode_;
    ::apollo::monitor::SystemStatus* system_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HMIStatus

// optional .apollo.monitor.SystemStatus system_status = 1;
inline bool HMIStatus::_internal_has_system_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.system_status_ != nullptr);
  return value;
}
inline bool HMIStatus::has_system_status() const {
  return _internal_has_system_status();
}
inline const ::apollo::monitor::SystemStatus& HMIStatus::_internal_system_status() const {
  const ::apollo::monitor::SystemStatus* p = _impl_.system_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::monitor::SystemStatus&>(
      ::apollo::monitor::_SystemStatus_default_instance_);
}
inline const ::apollo::monitor::SystemStatus& HMIStatus::system_status() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.system_status)
  return _internal_system_status();
}
inline void HMIStatus::unsafe_arena_set_allocated_system_status(
    ::apollo::monitor::SystemStatus* system_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_status_);
  }
  _impl_.system_status_ = system_status;
  if (system_status) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.HMIStatus.system_status)
}
inline ::apollo::monitor::SystemStatus* HMIStatus::release_system_status() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::monitor::SystemStatus* temp = _impl_.system_status_;
  _impl_.system_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::monitor::SystemStatus* HMIStatus::unsafe_arena_release_system_status() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.system_status)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::monitor::SystemStatus* temp = _impl_.system_status_;
  _impl_.system_status_ = nullptr;
  return temp;
}
inline ::apollo::monitor::SystemStatus* HMIStatus::_internal_mutable_system_status() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.system_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::SystemStatus>(GetArenaForAllocation());
    _impl_.system_status_ = p;
  }
  return _impl_.system_status_;
}
inline ::apollo::monitor::SystemStatus* HMIStatus::mutable_system_status() {
  ::apollo::monitor::SystemStatus* _msg = _internal_mutable_system_status();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.system_status)
  return _msg;
}
inline void HMIStatus::set_allocated_system_status(::apollo::monitor::SystemStatus* system_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_status_);
  }
  if (system_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_status));
    if (message_arena != submessage_arena) {
      system_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.system_status_ = system_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.system_status)
}

// optional string current_map = 2;
inline bool HMIStatus::_internal_has_current_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMIStatus::has_current_map() const {
  return _internal_has_current_map();
}
inline void HMIStatus::clear_current_map() {
  _impl_.current_map_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HMIStatus::current_map() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_map)
  return _internal_current_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMIStatus::set_current_map(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.current_map_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_map)
}
inline std::string* HMIStatus::mutable_current_map() {
  std::string* _s = _internal_mutable_current_map();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_map)
  return _s;
}
inline const std::string& HMIStatus::_internal_current_map() const {
  return _impl_.current_map_.Get();
}
inline void HMIStatus::_internal_set_current_map(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_map_.Set(value, GetArenaForAllocation());
}
inline std::string* HMIStatus::_internal_mutable_current_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.current_map_.Mutable(GetArenaForAllocation());
}
inline std::string* HMIStatus::release_current_map() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_map)
  if (!_internal_has_current_map()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.current_map_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_map_.IsDefault()) {
    _impl_.current_map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMIStatus::set_allocated_current_map(std::string* current_map) {
  if (current_map != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_map_.SetAllocated(current_map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_map_.IsDefault()) {
    _impl_.current_map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_map)
}

// optional string current_vehicle = 3;
inline bool HMIStatus::_internal_has_current_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HMIStatus::has_current_vehicle() const {
  return _internal_has_current_vehicle();
}
inline void HMIStatus::clear_current_vehicle() {
  _impl_.current_vehicle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HMIStatus::current_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_vehicle)
  return _internal_current_vehicle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMIStatus::set_current_vehicle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.current_vehicle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_vehicle)
}
inline std::string* HMIStatus::mutable_current_vehicle() {
  std::string* _s = _internal_mutable_current_vehicle();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_vehicle)
  return _s;
}
inline const std::string& HMIStatus::_internal_current_vehicle() const {
  return _impl_.current_vehicle_.Get();
}
inline void HMIStatus::_internal_set_current_vehicle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_vehicle_.Set(value, GetArenaForAllocation());
}
inline std::string* HMIStatus::_internal_mutable_current_vehicle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.current_vehicle_.Mutable(GetArenaForAllocation());
}
inline std::string* HMIStatus::release_current_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_vehicle)
  if (!_internal_has_current_vehicle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.current_vehicle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_vehicle_.IsDefault()) {
    _impl_.current_vehicle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMIStatus::set_allocated_current_vehicle(std::string* current_vehicle) {
  if (current_vehicle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.current_vehicle_.SetAllocated(current_vehicle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_vehicle_.IsDefault()) {
    _impl_.current_vehicle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_vehicle)
}

// optional string current_mode = 4 [default = "Standard"];
inline bool HMIStatus::_internal_has_current_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMIStatus::has_current_mode() const {
  return _internal_has_current_mode();
}
inline void HMIStatus::clear_current_mode() {
  _impl_.current_mode_.ClearToDefault(::apollo::dreamview::HMIStatus::Impl_::_i_give_permission_to_break_this_code_default_current_mode_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HMIStatus::current_mode() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_mode)
  if (_impl_.current_mode_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_current_mode_.get();
  return _internal_current_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMIStatus::set_current_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.current_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_mode)
}
inline std::string* HMIStatus::mutable_current_mode() {
  std::string* _s = _internal_mutable_current_mode();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_mode)
  return _s;
}
inline const std::string& HMIStatus::_internal_current_mode() const {
  return _impl_.current_mode_.Get();
}
inline void HMIStatus::_internal_set_current_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.current_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* HMIStatus::_internal_mutable_current_mode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.current_mode_.Mutable(::apollo::dreamview::HMIStatus::Impl_::_i_give_permission_to_break_this_code_default_current_mode_, GetArenaForAllocation());
}
inline std::string* HMIStatus::release_current_mode() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_mode)
  if (!_internal_has_current_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.current_mode_.Release();
  return p;
}
inline void HMIStatus::set_allocated_current_mode(std::string* current_mode) {
  if (current_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.current_mode_.SetAllocated(current_mode, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
