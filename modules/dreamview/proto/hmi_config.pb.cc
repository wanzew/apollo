// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#include "modules/dreamview/proto/hmi_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dreamview {
PROTOBUF_CONSTEXPR Component_SupportedCommandsEntry_DoNotUse::Component_SupportedCommandsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Component_SupportedCommandsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal _Component_SupportedCommandsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Component::Component(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.supported_commands_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDefaultTypeInternal() {}
  union {
    Component _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDefaultTypeInternal _Component_default_instance_;
PROTOBUF_CONSTEXPR Mode::Mode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.live_modules_)*/{}
  , /*decltype(_impl_.live_hardware_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeDefaultTypeInternal() {}
  union {
    Mode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeDefaultTypeInternal _Mode_default_instance_;
PROTOBUF_CONSTEXPR AudioCapturingConfig::AudioCapturingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_.bits_per_sample_)*/0
  , /*decltype(_impl_.channels_)*/1} {}
struct AudioCapturingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioCapturingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioCapturingConfigDefaultTypeInternal() {}
  union {
    AudioCapturingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioCapturingConfigDefaultTypeInternal _AudioCapturingConfig_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_ModulesEntry_DoNotUse::HMIConfig_ModulesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_ModulesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal _HMIConfig_ModulesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_HardwareEntry_DoNotUse::HMIConfig_HardwareEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_HardwareEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal _HMIConfig_HardwareEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_ToolsEntry_DoNotUse::HMIConfig_ToolsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_ToolsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal _HMIConfig_ToolsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_AvailableMapsEntry_DoNotUse::HMIConfig_AvailableMapsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_AvailableMapsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal _HMIConfig_AvailableMapsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_AvailableVehiclesEntry_DoNotUse::HMIConfig_AvailableVehiclesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_AvailableVehiclesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal _HMIConfig_AvailableVehiclesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HMIConfig_ModesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal _HMIConfig_ModesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HMIConfig::HMIConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modules_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.hardware_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tools_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.available_maps_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.available_vehicles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.modes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.docker_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_capturing_conf_)*/nullptr
  , /*decltype(_impl_.utm_zone_id_)*/0
  , /*decltype(_impl_.chassis_high_beam_action_)*/0} {}
struct HMIConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMIConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMIConfigDefaultTypeInternal() {}
  union {
    HMIConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMIConfigDefaultTypeInternal _HMIConfig_default_instance_;
PROTOBUF_CONSTEXPR VehicleData_DataFile::VehicleData_DataFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dest_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct VehicleData_DataFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleData_DataFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleData_DataFileDefaultTypeInternal() {}
  union {
    VehicleData_DataFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleData_DataFileDefaultTypeInternal _VehicleData_DataFile_default_instance_;
PROTOBUF_CONSTEXPR VehicleData::VehicleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDataDefaultTypeInternal() {}
  union {
    VehicleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Component, _impl_.supported_commands_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Mode, _impl_.live_modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Mode, _impl_.live_hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapturingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapturingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapturingConfig, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapturingConfig, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapturingConfig, _impl_.bits_per_sample_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.docker_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.tools_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.available_maps_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.available_vehicles_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.modes_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.utm_zone_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.audio_capturing_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _impl_.chassis_high_beam_action_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _impl_.source_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _impl_.dest_path_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData, _impl_.data_files_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse)},
  { 10, 19, -1, sizeof(::apollo::dreamview::Component)},
  { 22, -1, -1, sizeof(::apollo::dreamview::Mode)},
  { 30, 39, -1, sizeof(::apollo::dreamview::AudioCapturingConfig)},
  { 42, 50, -1, sizeof(::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse)},
  { 52, 60, -1, sizeof(::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse)},
  { 62, 70, -1, sizeof(::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse)},
  { 72, 80, -1, sizeof(::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse)},
  { 82, 90, -1, sizeof(::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse)},
  { 92, 100, -1, sizeof(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse)},
  { 102, 118, -1, sizeof(::apollo::dreamview::HMIConfig)},
  { 128, 136, -1, sizeof(::apollo::dreamview::VehicleData_DataFile)},
  { 138, -1, -1, sizeof(::apollo::dreamview::VehicleData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dreamview::_Component_SupportedCommandsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_Component_default_instance_._instance,
  &::apollo::dreamview::_Mode_default_instance_._instance,
  &::apollo::dreamview::_AudioCapturingConfig_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_ModulesEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_HardwareEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_ToolsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_AvailableMapsEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_AvailableVehiclesEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_ModesEntry_DoNotUse_default_instance_._instance,
  &::apollo::dreamview::_HMIConfig_default_instance_._instance,
  &::apollo::dreamview::_VehicleData_DataFile_default_instance_._instance,
  &::apollo::dreamview::_VehicleData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/dreamview/proto/hmi_config.pro"
  "to\022\020apollo.dreamview\"\271\001\n\tComponent\022\024\n\014di"
  "splay_name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022N\n\022suppor"
  "ted_commands\030\003 \003(\01322.apollo.dreamview.Co"
  "mponent.SupportedCommandsEntry\0328\n\026Suppor"
  "tedCommandsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"3\n\004Mode\022\024\n\014live_modules\030\001 \003(\t\022\025"
  "\n\rlive_hardware\030\002 \003(\t\"Y\n\024AudioCapturingC"
  "onfig\022\023\n\010channels\030\001 \001(\005:\0011\022\023\n\013sample_rat"
  "e\030\002 \001(\005\022\027\n\017bits_per_sample\030\003 \001(\005\"\325\007\n\tHMI"
  "Config\022\024\n\014docker_image\030\001 \001(\t\0229\n\007modules\030"
  "\002 \003(\0132(.apollo.dreamview.HMIConfig.Modul"
  "esEntry\022;\n\010hardware\030\003 \003(\0132).apollo.dream"
  "view.HMIConfig.HardwareEntry\0225\n\005tools\030\004 "
  "\003(\0132&.apollo.dreamview.HMIConfig.ToolsEn"
  "try\022F\n\016available_maps\030\005 \003(\0132..apollo.dre"
  "amview.HMIConfig.AvailableMapsEntry\022N\n\022a"
  "vailable_vehicles\030\006 \003(\01322.apollo.dreamvi"
  "ew.HMIConfig.AvailableVehiclesEntry\0225\n\005m"
  "odes\030\007 \003(\0132&.apollo.dreamview.HMIConfig."
  "ModesEntry\022\023\n\013utm_zone_id\030\010 \001(\005\022D\n\024audio"
  "_capturing_conf\030\t \001(\0132&.apollo.dreamview"
  ".AudioCapturingConfig\022=\n\030chassis_high_be"
  "am_action\030\n \001(\0162\033.apollo.dreamview.HMIAc"
  "tion\032K\n\014ModulesEntry\022\013\n\003key\030\001 \001(\t\022*\n\005val"
  "ue\030\002 \001(\0132\033.apollo.dreamview.Component:\0028"
  "\001\032L\n\rHardwareEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value"
  "\030\002 \001(\0132\033.apollo.dreamview.Component:\0028\001\032"
  "I\n\nToolsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001("
  "\0132\033.apollo.dreamview.Component:\0028\001\0324\n\022Av"
  "ailableMapsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\0328\n\026AvailableVehiclesEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032D\n\nModesEntry"
  "\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.apollo.dr"
  "eamview.Mode:\0028\001\"}\n\013VehicleData\022:\n\ndata_"
  "files\030\001 \003(\0132&.apollo.dreamview.VehicleDa"
  "ta.DataFile\0322\n\010DataFile\022\023\n\013source_path\030\001"
  " \001(\t\022\021\n\tdest_path\030\002 \001(\t*>\n\tHMIAction\022\010\n\004"
  "NONE\020\000\022\t\n\005SETUP\020\001\022\r\n\tAUTO_MODE\020\002\022\r\n\tDISE"
  "NGAGE\020\003"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto = {
    false, false, 1567, descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto,
    "modules/dreamview/proto/hmi_config.proto",
    &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HMIAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[0];
}
bool HMIAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Component_SupportedCommandsEntry_DoNotUse::Component_SupportedCommandsEntry_DoNotUse() {}
Component_SupportedCommandsEntry_DoNotUse::Component_SupportedCommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Component_SupportedCommandsEntry_DoNotUse::MergeFrom(const Component_SupportedCommandsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Component_SupportedCommandsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[0]);
}

// ===================================================================

class Component::_Internal {
 public:
  using HasBits = decltype(std::declval<Component>()._impl_._has_bits_);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Component::Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Component::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.supported_commands_)*/{}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.supported_commands_.MergeFrom(from._impl_.supported_commands_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    _impl_.display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _impl_.path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Component)
}

inline void Component::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.supported_commands_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.path_){}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Component)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Component::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.supported_commands_.Destruct();
  _impl_.supported_commands_.~MapField();
  _impl_.display_name_.Destroy();
  _impl_.path_.Destroy();
}

void Component::ArenaDtor(void* object) {
  Component* _this = reinterpret_cast< Component* >(object);
  _this->_impl_.supported_commands_.Destruct();
}
void Component::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Component)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supported_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.Component.display_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.Component.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, string> supported_commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.supported_commands_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Component::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Component)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Component.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // map<string, string> supported_commands = 3;
  if (!this->_internal_supported_commands().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Component_SupportedCommandsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_supported_commands();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.Component.SupportedCommandsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.Component.SupportedCommandsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Component)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> supported_commands = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_supported_commands_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_supported_commands().begin();
      it != this->_internal_supported_commands().end(); ++it) {
    total_size += Component_SupportedCommandsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string display_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Component::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Component::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Component::GetClassData() const { return &_class_data_; }

void Component::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Component *>(to)->MergeFrom(
      static_cast<const Component &>(from));
}


void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Component)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.supported_commands_.MergeFrom(from._impl_.supported_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path(from._internal_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.supported_commands_.InternalSwap(&other->_impl_.supported_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[1]);
}

// ===================================================================

class Mode::_Internal {
 public:
};

Mode::Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Mode)
}
Mode::Mode(const Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.live_modules_){from._impl_.live_modules_}
    , decltype(_impl_.live_hardware_){from._impl_.live_hardware_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Mode)
}

inline void Mode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.live_modules_){arena}
    , decltype(_impl_.live_hardware_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Mode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.live_modules_.~RepeatedPtrField();
  _impl_.live_hardware_.~RepeatedPtrField();
}

void Mode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Mode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.live_modules_.Clear();
  _impl_.live_hardware_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string live_modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_live_modules();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.Mode.live_modules");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string live_hardware = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_live_hardware();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.dreamview.Mode.live_hardware");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Mode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string live_modules = 1;
  for (int i = 0, n = this->_internal_live_modules_size(); i < n; i++) {
    const auto& s = this->_internal_live_modules(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_modules");
    target = stream->WriteString(1, s, target);
  }

  // repeated string live_hardware = 2;
  for (int i = 0, n = this->_internal_live_hardware_size(); i < n; i++) {
    const auto& s = this->_internal_live_hardware(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Mode.live_hardware");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Mode)
  return target;
}

size_t Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Mode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string live_modules = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.live_modules_.size());
  for (int i = 0, n = _impl_.live_modules_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.live_modules_.Get(i));
  }

  // repeated string live_hardware = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.live_hardware_.size());
  for (int i = 0, n = _impl_.live_hardware_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.live_hardware_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mode::GetClassData() const { return &_class_data_; }

void Mode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mode *>(to)->MergeFrom(
      static_cast<const Mode &>(from));
}


void Mode::MergeFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.live_modules_.MergeFrom(from._impl_.live_modules_);
  _impl_.live_hardware_.MergeFrom(from._impl_.live_hardware_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mode::CopyFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {
  return true;
}

void Mode::InternalSwap(Mode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.live_modules_.InternalSwap(&other->_impl_.live_modules_);
  _impl_.live_hardware_.InternalSwap(&other->_impl_.live_hardware_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[2]);
}

// ===================================================================

class AudioCapturingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioCapturingConfig>()._impl_._has_bits_);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bits_per_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AudioCapturingConfig::AudioCapturingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.AudioCapturingConfig)
}
AudioCapturingConfig::AudioCapturingConfig(const AudioCapturingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.bits_per_sample_){}
    , decltype(_impl_.channels_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sample_rate_, &from._impl_.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channels_) -
    reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.channels_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.AudioCapturingConfig)
}

inline void AudioCapturingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sample_rate_){0}
    , decltype(_impl_.bits_per_sample_){0}
    , decltype(_impl_.channels_){1}
  };
}

AudioCapturingConfig::~AudioCapturingConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.AudioCapturingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioCapturingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioCapturingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioCapturingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.AudioCapturingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sample_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bits_per_sample_) -
        reinterpret_cast<char*>(&_impl_.sample_rate_)) + sizeof(_impl_.bits_per_sample_));
    _impl_.channels_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioCapturingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 channels = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sample_rate(&has_bits);
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bits_per_sample = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bits_per_sample(&has_bits);
          _impl_.bits_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioCapturingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.AudioCapturingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 channels = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channels(), target);
  }

  // optional int32 sample_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate(), target);
  }

  // optional int32 bits_per_sample = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bits_per_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.AudioCapturingConfig)
  return target;
}

size_t AudioCapturingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.AudioCapturingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 sample_rate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
    }

    // optional int32 bits_per_sample = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bits_per_sample());
    }

    // optional int32 channels = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioCapturingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioCapturingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioCapturingConfig::GetClassData() const { return &_class_data_; }

void AudioCapturingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioCapturingConfig *>(to)->MergeFrom(
      static_cast<const AudioCapturingConfig &>(from));
}


void AudioCapturingConfig::MergeFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.AudioCapturingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bits_per_sample_ = from._impl_.bits_per_sample_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.channels_ = from._impl_.channels_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioCapturingConfig::CopyFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.AudioCapturingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCapturingConfig::IsInitialized() const {
  return true;
}

void AudioCapturingConfig::InternalSwap(AudioCapturingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioCapturingConfig, _impl_.bits_per_sample_)
      + sizeof(AudioCapturingConfig::_impl_.bits_per_sample_)
      - PROTOBUF_FIELD_OFFSET(AudioCapturingConfig, _impl_.sample_rate_)>(
          reinterpret_cast<char*>(&_impl_.sample_rate_),
          reinterpret_cast<char*>(&other->_impl_.sample_rate_));
  swap(_impl_.channels_, other->_impl_.channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioCapturingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[3]);
}

// ===================================================================

HMIConfig_ModulesEntry_DoNotUse::HMIConfig_ModulesEntry_DoNotUse() {}
HMIConfig_ModulesEntry_DoNotUse::HMIConfig_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_ModulesEntry_DoNotUse::MergeFrom(const HMIConfig_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_ModulesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[4]);
}

// ===================================================================

HMIConfig_HardwareEntry_DoNotUse::HMIConfig_HardwareEntry_DoNotUse() {}
HMIConfig_HardwareEntry_DoNotUse::HMIConfig_HardwareEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_HardwareEntry_DoNotUse::MergeFrom(const HMIConfig_HardwareEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_HardwareEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[5]);
}

// ===================================================================

HMIConfig_ToolsEntry_DoNotUse::HMIConfig_ToolsEntry_DoNotUse() {}
HMIConfig_ToolsEntry_DoNotUse::HMIConfig_ToolsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_ToolsEntry_DoNotUse::MergeFrom(const HMIConfig_ToolsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_ToolsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[6]);
}

// ===================================================================

HMIConfig_AvailableMapsEntry_DoNotUse::HMIConfig_AvailableMapsEntry_DoNotUse() {}
HMIConfig_AvailableMapsEntry_DoNotUse::HMIConfig_AvailableMapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_AvailableMapsEntry_DoNotUse::MergeFrom(const HMIConfig_AvailableMapsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_AvailableMapsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[7]);
}

// ===================================================================

HMIConfig_AvailableVehiclesEntry_DoNotUse::HMIConfig_AvailableVehiclesEntry_DoNotUse() {}
HMIConfig_AvailableVehiclesEntry_DoNotUse::HMIConfig_AvailableVehiclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_AvailableVehiclesEntry_DoNotUse::MergeFrom(const HMIConfig_AvailableVehiclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_AvailableVehiclesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[8]);
}

// ===================================================================

HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse() {}
HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_ModesEntry_DoNotUse::MergeFrom(const HMIConfig_ModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_ModesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[9]);
}

// ===================================================================

class HMIConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIConfig>()._impl_._has_bits_);
  static void set_has_docker_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_utm_zone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::dreamview::AudioCapturingConfig& audio_capturing_conf(const HMIConfig* msg);
  static void set_has_audio_capturing_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chassis_high_beam_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::dreamview::AudioCapturingConfig&
HMIConfig::_Internal::audio_capturing_conf(const HMIConfig* msg) {
  return *msg->_impl_.audio_capturing_conf_;
}
HMIConfig::HMIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HMIConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.HMIConfig)
}
HMIConfig::HMIConfig(const HMIConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.modules_)*/{}
    , /*decltype(_impl_.hardware_)*/{}
    , /*decltype(_impl_.tools_)*/{}
    , /*decltype(_impl_.available_maps_)*/{}
    , /*decltype(_impl_.available_vehicles_)*/{}
    , /*decltype(_impl_.modes_)*/{}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.audio_capturing_conf_){nullptr}
    , decltype(_impl_.utm_zone_id_){}
    , decltype(_impl_.chassis_high_beam_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.hardware_.MergeFrom(from._impl_.hardware_);
  _impl_.tools_.MergeFrom(from._impl_.tools_);
  _impl_.available_maps_.MergeFrom(from._impl_.available_maps_);
  _impl_.available_vehicles_.MergeFrom(from._impl_.available_vehicles_);
  _impl_.modes_.MergeFrom(from._impl_.modes_);
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docker_image()) {
    _impl_.docker_image_.Set(from._internal_docker_image(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio_capturing_conf()) {
    _impl_.audio_capturing_conf_ = new ::apollo::dreamview::AudioCapturingConfig(*from._impl_.audio_capturing_conf_);
  }
  ::memcpy(&_impl_.utm_zone_id_, &from._impl_.utm_zone_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chassis_high_beam_action_) -
    reinterpret_cast<char*>(&_impl_.utm_zone_id_)) + sizeof(_impl_.chassis_high_beam_action_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIConfig)
}

inline void HMIConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.modules_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.hardware_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.tools_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.available_maps_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.available_vehicles_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.modes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.audio_capturing_conf_){nullptr}
    , decltype(_impl_.utm_zone_id_){0}
    , decltype(_impl_.chassis_high_beam_action_){0}
  };
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMIConfig::~HMIConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HMIConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.Destruct();
  _impl_.modules_.~MapField();
  _impl_.hardware_.Destruct();
  _impl_.hardware_.~MapField();
  _impl_.tools_.Destruct();
  _impl_.tools_.~MapField();
  _impl_.available_maps_.Destruct();
  _impl_.available_maps_.~MapField();
  _impl_.available_vehicles_.Destruct();
  _impl_.available_vehicles_.~MapField();
  _impl_.modes_.Destruct();
  _impl_.modes_.~MapField();
  _impl_.docker_image_.Destroy();
  if (this != internal_default_instance()) delete _impl_.audio_capturing_conf_;
}

void HMIConfig::ArenaDtor(void* object) {
  HMIConfig* _this = reinterpret_cast< HMIConfig* >(object);
  _this->_impl_.modules_.Destruct();
  _this->_impl_.hardware_.Destruct();
  _this->_impl_.tools_.Destruct();
  _this->_impl_.available_maps_.Destruct();
  _this->_impl_.available_vehicles_.Destruct();
  _this->_impl_.modes_.Destruct();
}
void HMIConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _impl_.hardware_.Clear();
  _impl_.tools_.Clear();
  _impl_.available_maps_.Clear();
  _impl_.available_vehicles_.Clear();
  _impl_.modes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.docker_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.audio_capturing_conf_ != nullptr);
      _impl_.audio_capturing_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.utm_zone_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chassis_high_beam_action_) -
        reinterpret_cast<char*>(&_impl_.utm_zone_id_)) + sizeof(_impl_.chassis_high_beam_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string docker_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docker_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.HMIConfig.docker_image");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Component> modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Component> hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.hardware_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Component> tools = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tools_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> available_maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.available_maps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> available_vehicles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.available_vehicles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Mode> modes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.modes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 utm_zone_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_utm_zone_id(&has_bits);
          _impl_.utm_zone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_capturing_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::HMIAction_IsValid(val))) {
            _internal_set_chassis_high_beam_action(static_cast<::apollo::dreamview::HMIAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMIConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string docker_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docker_image().data(), static_cast<int>(this->_internal_docker_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIConfig.docker_image");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docker_image(), target);
  }

  // map<string, .apollo.dreamview.Component> modules = 2;
  if (!this->_internal_modules().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::Component>;
    using WireHelper = HMIConfig_ModulesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modules();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.ModulesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> hardware = 3;
  if (!this->_internal_hardware().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::Component>;
    using WireHelper = HMIConfig_HardwareEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hardware();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.HardwareEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.dreamview.Component> tools = 4;
  if (!this->_internal_tools().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::Component>;
    using WireHelper = HMIConfig_ToolsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tools();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.ToolsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> available_maps = 5;
  if (!this->_internal_available_maps().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HMIConfig_AvailableMapsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_available_maps();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.AvailableMapsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.AvailableMapsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> available_vehicles = 6;
  if (!this->_internal_available_vehicles().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HMIConfig_AvailableVehiclesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_available_vehicles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.dreamview.Mode> modes = 7;
  if (!this->_internal_modes().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::dreamview::Mode>;
    using WireHelper = HMIConfig_ModesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.dreamview.HMIConfig.ModesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional int32 utm_zone_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_utm_zone_id(), target);
  }

  // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::audio_capturing_conf(this),
        _Internal::audio_capturing_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_chassis_high_beam_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIConfig)
  return target;
}

size_t HMIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Component> modules = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += HMIConfig_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.Component> hardware = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hardware_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >::const_iterator
      it = this->_internal_hardware().begin();
      it != this->_internal_hardware().end(); ++it) {
    total_size += HMIConfig_HardwareEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.Component> tools = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tools_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >::const_iterator
      it = this->_internal_tools().begin();
      it != this->_internal_tools().end(); ++it) {
    total_size += HMIConfig_ToolsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> available_maps = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_available_maps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_available_maps().begin();
      it != this->_internal_available_maps().end(); ++it) {
    total_size += HMIConfig_AvailableMapsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> available_vehicles = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_available_vehicles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_available_vehicles().begin();
      it != this->_internal_available_vehicles().end(); ++it) {
    total_size += HMIConfig_AvailableVehiclesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.Mode> modes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >::const_iterator
      it = this->_internal_modes().begin();
      it != this->_internal_modes().end(); ++it) {
    total_size += HMIConfig_ModesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string docker_image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docker_image());
    }

    // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.audio_capturing_conf_);
    }

    // optional int32 utm_zone_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utm_zone_id());
    }

    // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chassis_high_beam_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMIConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HMIConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMIConfig::GetClassData() const { return &_class_data_; }

void HMIConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HMIConfig *>(to)->MergeFrom(
      static_cast<const HMIConfig &>(from));
}


void HMIConfig::MergeFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.hardware_.MergeFrom(from._impl_.hardware_);
  _impl_.tools_.MergeFrom(from._impl_.tools_);
  _impl_.available_maps_.MergeFrom(from._impl_.available_maps_);
  _impl_.available_vehicles_.MergeFrom(from._impl_.available_vehicles_);
  _impl_.modes_.MergeFrom(from._impl_.modes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_docker_image(from._internal_docker_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_audio_capturing_conf()->::apollo::dreamview::AudioCapturingConfig::MergeFrom(from._internal_audio_capturing_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.utm_zone_id_ = from._impl_.utm_zone_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.chassis_high_beam_action_ = from._impl_.chassis_high_beam_action_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMIConfig::CopyFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIConfig::IsInitialized() const {
  return true;
}

void HMIConfig::InternalSwap(HMIConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  _impl_.hardware_.InternalSwap(&other->_impl_.hardware_);
  _impl_.tools_.InternalSwap(&other->_impl_.tools_);
  _impl_.available_maps_.InternalSwap(&other->_impl_.available_maps_);
  _impl_.available_vehicles_.InternalSwap(&other->_impl_.available_vehicles_);
  _impl_.modes_.InternalSwap(&other->_impl_.modes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docker_image_, lhs_arena,
      &other->_impl_.docker_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HMIConfig, _impl_.chassis_high_beam_action_)
      + sizeof(HMIConfig::_impl_.chassis_high_beam_action_)
      - PROTOBUF_FIELD_OFFSET(HMIConfig, _impl_.audio_capturing_conf_)>(
          reinterpret_cast<char*>(&_impl_.audio_capturing_conf_),
          reinterpret_cast<char*>(&other->_impl_.audio_capturing_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[10]);
}

// ===================================================================

class VehicleData_DataFile::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleData_DataFile>()._impl_._has_bits_);
  static void set_has_source_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dest_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VehicleData_DataFile::VehicleData_DataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VehicleData.DataFile)
}
VehicleData_DataFile::VehicleData_DataFile(const VehicleData_DataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.dest_path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_path()) {
    _impl_.source_path_.Set(from._internal_source_path(), 
      GetArenaForAllocation());
  }
  _impl_.dest_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dest_path()) {
    _impl_.dest_path_.Set(from._internal_dest_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData.DataFile)
}

inline void VehicleData_DataFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.dest_path_){}
  };
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dest_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleData_DataFile::~VehicleData_DataFile() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData.DataFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleData_DataFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_path_.Destroy();
  _impl_.dest_path_.Destroy();
}

void VehicleData_DataFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleData_DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData.DataFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dest_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleData_DataFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VehicleData.DataFile.source_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dest_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dest_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VehicleData.DataFile.dest_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleData_DataFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData.DataFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_path().data(), static_cast<int>(this->_internal_source_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_path(), target);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dest_path().data(), static_cast<int>(this->_internal_dest_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dest_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData.DataFile)
  return target;
}

size_t VehicleData_DataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData.DataFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_path());
    }

    // optional string dest_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dest_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleData_DataFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleData_DataFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleData_DataFile::GetClassData() const { return &_class_data_; }

void VehicleData_DataFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleData_DataFile *>(to)->MergeFrom(
      static_cast<const VehicleData_DataFile &>(from));
}


void VehicleData_DataFile::MergeFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_path(from._internal_source_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dest_path(from._internal_dest_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleData_DataFile::CopyFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData_DataFile::IsInitialized() const {
  return true;
}

void VehicleData_DataFile::InternalSwap(VehicleData_DataFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_path_, lhs_arena,
      &other->_impl_.source_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dest_path_, lhs_arena,
      &other->_impl_.dest_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData_DataFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[11]);
}

// ===================================================================

class VehicleData::_Internal {
 public:
};

VehicleData::VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_files_){from._impl_.data_files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData)
}

inline void VehicleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_files_.~RepeatedPtrField();
}

void VehicleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  total_size += 1UL * this->_internal_data_files_size();
  for (const auto& msg : this->_impl_.data_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleData::GetClassData() const { return &_class_data_; }

void VehicleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleData *>(to)->MergeFrom(
      static_cast<const VehicleData &>(from));
}


void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_files_.MergeFrom(from._impl_.data_files_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::InternalSwap(VehicleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_files_.InternalSwap(&other->_impl_.data_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Component*
Arena::CreateMaybeMessage< ::apollo::dreamview::Component >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Mode*
Arena::CreateMaybeMessage< ::apollo::dreamview::Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::AudioCapturingConfig*
Arena::CreateMaybeMessage< ::apollo::dreamview::AudioCapturingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::AudioCapturingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig*
Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VehicleData_DataFile*
Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData_DataFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VehicleData_DataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VehicleData*
Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VehicleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
