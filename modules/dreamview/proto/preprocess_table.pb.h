// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/preprocess_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
namespace apollo {
namespace dreamview {
class CameraConfig;
struct CameraConfigDefaultTypeInternal;
extern CameraConfigDefaultTypeInternal _CameraConfig_default_instance_;
class LidarConfig;
struct LidarConfigDefaultTypeInternal;
extern LidarConfigDefaultTypeInternal _LidarConfig_default_instance_;
class PreprocessTable;
struct PreprocessTableDefaultTypeInternal;
extern PreprocessTableDefaultTypeInternal _PreprocessTable_default_instance_;
class Progress;
struct ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class Translation;
struct TranslationDefaultTypeInternal;
extern TranslationDefaultTypeInternal _Translation_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::CameraConfig* Arena::CreateMaybeMessage<::apollo::dreamview::CameraConfig>(Arena*);
template<> ::apollo::dreamview::LidarConfig* Arena::CreateMaybeMessage<::apollo::dreamview::LidarConfig>(Arena*);
template<> ::apollo::dreamview::PreprocessTable* Arena::CreateMaybeMessage<::apollo::dreamview::PreprocessTable>(Arena*);
template<> ::apollo::dreamview::Progress* Arena::CreateMaybeMessage<::apollo::dreamview::Progress>(Arena*);
template<> ::apollo::dreamview::Translation* Arena::CreateMaybeMessage<::apollo::dreamview::Translation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum Status : int {
  SUCCESS = 0,
  FAIL = 1,
  UNKNOWN = 2
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = SUCCESS;
constexpr Status Status_MAX = UNKNOWN;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Translation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Translation) */ {
 public:
  inline Translation() : Translation(nullptr) {}
  ~Translation() override;
  explicit PROTOBUF_CONSTEXPR Translation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Translation(const Translation& from);
  Translation(Translation&& from) noexcept
    : Translation() {
    *this = ::std::move(from);
  }

  inline Translation& operator=(const Translation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Translation& operator=(Translation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Translation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Translation* internal_default_instance() {
    return reinterpret_cast<const Translation*>(
               &_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Translation& a, Translation& b) {
    a.Swap(&b);
  }
  inline void Swap(Translation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Translation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Translation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Translation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Translation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Translation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Translation";
  }
  protected:
  explicit Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Translation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
};
// -------------------------------------------------------------------

class LidarConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.LidarConfig) */ {
 public:
  inline LidarConfig() : LidarConfig(nullptr) {}
  ~LidarConfig() override;
  explicit PROTOBUF_CONSTEXPR LidarConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LidarConfig(const LidarConfig& from);
  LidarConfig(LidarConfig&& from) noexcept
    : LidarConfig() {
    *this = ::std::move(from);
  }

  inline LidarConfig& operator=(const LidarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarConfig& operator=(LidarConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarConfig* internal_default_instance() {
    return reinterpret_cast<const LidarConfig*>(
               &_LidarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LidarConfig& a, LidarConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LidarConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LidarConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LidarConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.LidarConfig";
  }
  protected:
  explicit LidarConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 1,
    kTranslationFieldNumber = 2,
  };
  // optional string sensor_name = 1;
  bool has_sensor_name() const;
  private:
  bool _internal_has_sensor_name() const;
  public:
  void clear_sensor_name();
  const std::string& sensor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* sensor_name);
  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(const std::string& value);
  std::string* _internal_mutable_sensor_name();
  public:

  // optional .apollo.dreamview.Translation translation = 2;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::apollo::dreamview::Translation& translation() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::Translation* release_translation();
  ::apollo::dreamview::Translation* mutable_translation();
  void set_allocated_translation(::apollo::dreamview::Translation* translation);
  private:
  const ::apollo::dreamview::Translation& _internal_translation() const;
  ::apollo::dreamview::Translation* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::apollo::dreamview::Translation* translation);
  ::apollo::dreamview::Translation* unsafe_arena_release_translation();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.LidarConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_name_;
    ::apollo::dreamview::Translation* translation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
};
// -------------------------------------------------------------------

class CameraConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CameraConfig) */ {
 public:
  inline CameraConfig() : CameraConfig(nullptr) {}
  ~CameraConfig() override;
  explicit PROTOBUF_CONSTEXPR CameraConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraConfig(const CameraConfig& from);
  CameraConfig(CameraConfig&& from) noexcept
    : CameraConfig() {
    *this = ::std::move(from);
  }

  inline CameraConfig& operator=(const CameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraConfig& operator=(CameraConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraConfig* internal_default_instance() {
    return reinterpret_cast<const CameraConfig*>(
               &_CameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraConfig& a, CameraConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.CameraConfig";
  }
  protected:
  explicit CameraConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 2,
    kKFieldNumber = 3,
    kTranslationFieldNumber = 1,
  };
  // repeated float D = 2;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  private:
  float _internal_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_d() const;
  void _internal_add_d(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_d();
  public:
  float d(int index) const;
  void set_d(int index, float value);
  void add_d(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_d();

  // repeated float K = 3;
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  private:
  float _internal_k(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_k() const;
  void _internal_add_k(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_k();
  public:
  float k(int index) const;
  void set_k(int index, float value);
  void add_k(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      k() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_k();

  // optional .apollo.dreamview.Translation translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::apollo::dreamview::Translation& translation() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::Translation* release_translation();
  ::apollo::dreamview::Translation* mutable_translation();
  void set_allocated_translation(::apollo::dreamview::Translation* translation);
  private:
  const ::apollo::dreamview::Translation& _internal_translation() const;
  ::apollo::dreamview::Translation* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::apollo::dreamview::Translation* translation);
  ::apollo::dreamview::Translation* unsafe_arena_release_translation();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CameraConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > d_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > k_;
    ::apollo::dreamview::Translation* translation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Progress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Progress) */ {
 public:
  inline Progress() : Progress(nullptr) {}
  ~Progress() override;
  explicit PROTOBUF_CONSTEXPR Progress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Progress(const Progress& from);
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Progress& operator=(Progress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Progress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(Progress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Progress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Progress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Progress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Progress";
  }
  protected:
  explicit Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogStringFieldNumber = 2,
    kPercentageFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // optional string log_string = 2;
  bool has_log_string() const;
  private:
  bool _internal_has_log_string() const;
  public:
  void clear_log_string();
  const std::string& log_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_string();
  PROTOBUF_NODISCARD std::string* release_log_string();
  void set_allocated_log_string(std::string* log_string);
  private:
  const std::string& _internal_log_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_string(const std::string& value);
  std::string* _internal_mutable_log_string();
  public:

  // optional float percentage = 1;
  bool has_percentage() const;
  private:
  bool _internal_has_percentage() const;
  public:
  void clear_percentage();
  float percentage() const;
  void set_percentage(float value);
  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);
  public:

  // optional .apollo.dreamview.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::apollo::dreamview::Status status() const;
  void set_status(::apollo::dreamview::Status value);
  private:
  ::apollo::dreamview::Status _internal_status() const;
  void _internal_set_status(::apollo::dreamview::Status value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Progress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_string_;
    float percentage_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
};
// -------------------------------------------------------------------

class PreprocessTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.PreprocessTable) */ {
 public:
  inline PreprocessTable() : PreprocessTable(nullptr) {}
  ~PreprocessTable() override;
  explicit PROTOBUF_CONSTEXPR PreprocessTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreprocessTable(const PreprocessTable& from);
  PreprocessTable(PreprocessTable&& from) noexcept
    : PreprocessTable() {
    *this = ::std::move(from);
  }

  inline PreprocessTable& operator=(const PreprocessTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreprocessTable& operator=(PreprocessTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreprocessTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreprocessTable* internal_default_instance() {
    return reinterpret_cast<const PreprocessTable*>(
               &_PreprocessTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PreprocessTable& a, PreprocessTable& b) {
    a.Swap(&b);
  }
  inline void Swap(PreprocessTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreprocessTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreprocessTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreprocessTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreprocessTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreprocessTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreprocessTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.PreprocessTable";
  }
  protected:
  explicit PreprocessTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLidarConfigFieldNumber = 1,
    kMainSensorFieldNumber = 3,
    kCameraConfigFieldNumber = 2,
    kProgressFieldNumber = 4,
  };
  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  int lidar_config_size() const;
  private:
  int _internal_lidar_config_size() const;
  public:
  void clear_lidar_config();
  ::apollo::dreamview::LidarConfig* mutable_lidar_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::LidarConfig >*
      mutable_lidar_config();
  private:
  const ::apollo::dreamview::LidarConfig& _internal_lidar_config(int index) const;
  ::apollo::dreamview::LidarConfig* _internal_add_lidar_config();
  public:
  const ::apollo::dreamview::LidarConfig& lidar_config(int index) const;
  ::apollo::dreamview::LidarConfig* add_lidar_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::LidarConfig >&
      lidar_config() const;

  // optional string main_sensor = 3;
  bool has_main_sensor() const;
  private:
  bool _internal_has_main_sensor() const;
  public:
  void clear_main_sensor();
  const std::string& main_sensor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_sensor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_sensor();
  PROTOBUF_NODISCARD std::string* release_main_sensor();
  void set_allocated_main_sensor(std::string* main_sensor);
  private:
  const std::string& _internal_main_sensor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_sensor(const std::string& value);
  std::string* _internal_mutable_main_sensor();
  public:

  // optional .apollo.dreamview.CameraConfig camera_config = 2;
  bool has_camera_config() const;
  private:
  bool _internal_has_camera_config() const;
  public:
  void clear_camera_config();
  const ::apollo::dreamview::CameraConfig& camera_config() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::CameraConfig* release_camera_config();
  ::apollo::dreamview::CameraConfig* mutable_camera_config();
  void set_allocated_camera_config(::apollo::dreamview::CameraConfig* camera_config);
  private:
  const ::apollo::dreamview::CameraConfig& _internal_camera_config() const;
  ::apollo::dreamview::CameraConfig* _internal_mutable_camera_config();
  public:
  void unsafe_arena_set_allocated_camera_config(
      ::apollo::dreamview::CameraConfig* camera_config);
  ::apollo::dreamview::CameraConfig* unsafe_arena_release_camera_config();

  // optional .apollo.dreamview.Progress progress = 4;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::apollo::dreamview::Progress& progress() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::Progress* release_progress();
  ::apollo::dreamview::Progress* mutable_progress();
  void set_allocated_progress(::apollo::dreamview::Progress* progress);
  private:
  const ::apollo::dreamview::Progress& _internal_progress() const;
  ::apollo::dreamview::Progress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::apollo::dreamview::Progress* progress);
  ::apollo::dreamview::Progress* unsafe_arena_release_progress();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.PreprocessTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::LidarConfig > lidar_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_sensor_;
    ::apollo::dreamview::CameraConfig* camera_config_;
    ::apollo::dreamview::Progress* progress_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Translation

// optional float x = 1;
inline bool Translation::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Translation::has_x() const {
  return _internal_has_x();
}
inline void Translation::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Translation::_internal_x() const {
  return _impl_.x_;
}
inline float Translation::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.x)
  return _internal_x();
}
inline void Translation::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Translation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.x)
}

// optional float y = 2;
inline bool Translation::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Translation::has_y() const {
  return _internal_has_y();
}
inline void Translation::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Translation::_internal_y() const {
  return _impl_.y_;
}
inline float Translation::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.y)
  return _internal_y();
}
inline void Translation::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Translation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.y)
}

// optional float z = 3;
inline bool Translation::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Translation::has_z() const {
  return _internal_has_z();
}
inline void Translation::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Translation::_internal_z() const {
  return _impl_.z_;
}
inline float Translation::z() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.z)
  return _internal_z();
}
inline void Translation::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Translation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.z)
}

// -------------------------------------------------------------------

// LidarConfig

// optional string sensor_name = 1;
inline bool LidarConfig::_internal_has_sensor_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarConfig::has_sensor_name() const {
  return _internal_has_sensor_name();
}
inline void LidarConfig::clear_sensor_name() {
  _impl_.sensor_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarConfig::sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.LidarConfig.sensor_name)
  return _internal_sensor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarConfig::set_sensor_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sensor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.LidarConfig.sensor_name)
}
inline std::string* LidarConfig::mutable_sensor_name() {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.LidarConfig.sensor_name)
  return _s;
}
inline const std::string& LidarConfig::_internal_sensor_name() const {
  return _impl_.sensor_name_.Get();
}
inline void LidarConfig::_internal_set_sensor_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sensor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarConfig::_internal_mutable_sensor_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sensor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarConfig::release_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.LidarConfig.sensor_name)
  if (!_internal_has_sensor_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sensor_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_name_.IsDefault()) {
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarConfig::set_allocated_sensor_name(std::string* sensor_name) {
  if (sensor_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sensor_name_.SetAllocated(sensor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_name_.IsDefault()) {
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.LidarConfig.sensor_name)
}

// optional .apollo.dreamview.Translation translation = 2;
inline bool LidarConfig::_internal_has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline bool LidarConfig::has_translation() const {
  return _internal_has_translation();
}
inline void LidarConfig::clear_translation() {
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::Translation& LidarConfig::_internal_translation() const {
  const ::apollo::dreamview::Translation* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Translation&>(
      ::apollo::dreamview::_Translation_default_instance_);
}
inline const ::apollo::dreamview::Translation& LidarConfig::translation() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.LidarConfig.translation)
  return _internal_translation();
}
inline void LidarConfig::unsafe_arena_set_allocated_translation(
    ::apollo::dreamview::Translation* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.LidarConfig.translation)
}
inline ::apollo::dreamview::Translation* LidarConfig::release_translation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Translation* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Translation* LidarConfig::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.LidarConfig.translation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Translation* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Translation* LidarConfig::_internal_mutable_translation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Translation>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::apollo::dreamview::Translation* LidarConfig::mutable_translation() {
  ::apollo::dreamview::Translation* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.LidarConfig.translation)
  return _msg;
}
inline void LidarConfig::set_allocated_translation(::apollo::dreamview::Translation* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.LidarConfig.translation)
}

// -------------------------------------------------------------------

// CameraConfig

// optional .apollo.dreamview.Translation translation = 1;
inline bool CameraConfig::_internal_has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline bool CameraConfig::has_translation() const {
  return _internal_has_translation();
}
inline void CameraConfig::clear_translation() {
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::dreamview::Translation& CameraConfig::_internal_translation() const {
  const ::apollo::dreamview::Translation* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Translation&>(
      ::apollo::dreamview::_Translation_default_instance_);
}
inline const ::apollo::dreamview::Translation& CameraConfig::translation() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.translation)
  return _internal_translation();
}
inline void CameraConfig::unsafe_arena_set_allocated_translation(
    ::apollo::dreamview::Translation* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.CameraConfig.translation)
}
inline ::apollo::dreamview::Translation* CameraConfig::release_translation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Translation* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Translation* CameraConfig::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CameraConfig.translation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Translation* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Translation* CameraConfig::_internal_mutable_translation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Translation>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::apollo::dreamview::Translation* CameraConfig::mutable_translation() {
  ::apollo::dreamview::Translation* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CameraConfig.translation)
  return _msg;
}
inline void CameraConfig::set_allocated_translation(::apollo::dreamview::Translation* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CameraConfig.translation)
}

// repeated float D = 2;
inline int CameraConfig::_internal_d_size() const {
  return _impl_.d_.size();
}
inline int CameraConfig::d_size() const {
  return _internal_d_size();
}
inline void CameraConfig::clear_d() {
  _impl_.d_.Clear();
}
inline float CameraConfig::_internal_d(int index) const {
  return _impl_.d_.Get(index);
}
inline float CameraConfig::d(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.D)
  return _internal_d(index);
}
inline void CameraConfig::set_d(int index, float value) {
  _impl_.d_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraConfig.D)
}
inline void CameraConfig::_internal_add_d(float value) {
  _impl_.d_.Add(value);
}
inline void CameraConfig::add_d(float value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraConfig.D)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraConfig::_internal_d() const {
  return _impl_.d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraConfig::d() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraConfig.D)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraConfig::_internal_mutable_d() {
  return &_impl_.d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraConfig::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraConfig.D)
  return _internal_mutable_d();
}

// repeated float K = 3;
inline int CameraConfig::_internal_k_size() const {
  return _impl_.k_.size();
}
inline int CameraConfig::k_size() const {
  return _internal_k_size();
}
inline void CameraConfig::clear_k() {
  _impl_.k_.Clear();
}
inline float CameraConfig::_internal_k(int index) const {
  return _impl_.k_.Get(index);
}
inline float CameraConfig::k(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.K)
  return _internal_k(index);
}
inline void CameraConfig::set_k(int index, float value) {
  _impl_.k_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraConfig.K)
}
inline void CameraConfig::_internal_add_k(float value) {
  _impl_.k_.Add(value);
}
inline void CameraConfig::add_k(float value) {
  _internal_add_k(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraConfig.K)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraConfig::_internal_k() const {
  return _impl_.k_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraConfig::k() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraConfig.K)
  return _internal_k();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraConfig::_internal_mutable_k() {
  return &_impl_.k_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraConfig::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraConfig.K)
  return _internal_mutable_k();
}

// -------------------------------------------------------------------

// Progress

// optional float percentage = 1;
inline bool Progress::_internal_has_percentage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Progress::has_percentage() const {
  return _internal_has_percentage();
}
inline void Progress::clear_percentage() {
  _impl_.percentage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Progress::_internal_percentage() const {
  return _impl_.percentage_;
}
inline float Progress::percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.percentage)
  return _internal_percentage();
}
inline void Progress::_internal_set_percentage(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.percentage_ = value;
}
inline void Progress::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.percentage)
}

// optional string log_string = 2;
inline bool Progress::_internal_has_log_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Progress::has_log_string() const {
  return _internal_has_log_string();
}
inline void Progress::clear_log_string() {
  _impl_.log_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Progress::log_string() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.log_string)
  return _internal_log_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Progress::set_log_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.log_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.log_string)
}
inline std::string* Progress::mutable_log_string() {
  std::string* _s = _internal_mutable_log_string();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Progress.log_string)
  return _s;
}
inline const std::string& Progress::_internal_log_string() const {
  return _impl_.log_string_.Get();
}
inline void Progress::_internal_set_log_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.log_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Progress::_internal_mutable_log_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.log_string_.Mutable(GetArenaForAllocation());
}
inline std::string* Progress::release_log_string() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Progress.log_string)
  if (!_internal_has_log_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.log_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_string_.IsDefault()) {
    _impl_.log_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Progress::set_allocated_log_string(std::string* log_string) {
  if (log_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.log_string_.SetAllocated(log_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_string_.IsDefault()) {
    _impl_.log_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Progress.log_string)
}

// optional .apollo.dreamview.Status status = 3;
inline bool Progress::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Progress::has_status() const {
  return _internal_has_status();
}
inline void Progress::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::dreamview::Status Progress::_internal_status() const {
  return static_cast< ::apollo::dreamview::Status >(_impl_.status_);
}
inline ::apollo::dreamview::Status Progress::status() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.status)
  return _internal_status();
}
inline void Progress::_internal_set_status(::apollo::dreamview::Status value) {
  assert(::apollo::dreamview::Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void Progress::set_status(::apollo::dreamview::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.status)
}

// -------------------------------------------------------------------

// PreprocessTable

// repeated .apollo.dreamview.LidarConfig lidar_config = 1;
inline int PreprocessTable::_internal_lidar_config_size() const {
  return _impl_.lidar_config_.size();
}
inline int PreprocessTable::lidar_config_size() const {
  return _internal_lidar_config_size();
}
inline void PreprocessTable::clear_lidar_config() {
  _impl_.lidar_config_.Clear();
}
inline ::apollo::dreamview::LidarConfig* PreprocessTable::mutable_lidar_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.lidar_config)
  return _impl_.lidar_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::LidarConfig >*
PreprocessTable::mutable_lidar_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.PreprocessTable.lidar_config)
  return &_impl_.lidar_config_;
}
inline const ::apollo::dreamview::LidarConfig& PreprocessTable::_internal_lidar_config(int index) const {
  return _impl_.lidar_config_.Get(index);
}
inline const ::apollo::dreamview::LidarConfig& PreprocessTable::lidar_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.lidar_config)
  return _internal_lidar_config(index);
}
inline ::apollo::dreamview::LidarConfig* PreprocessTable::_internal_add_lidar_config() {
  return _impl_.lidar_config_.Add();
}
inline ::apollo::dreamview::LidarConfig* PreprocessTable::add_lidar_config() {
  ::apollo::dreamview::LidarConfig* _add = _internal_add_lidar_config();
  // @@protoc_insertion_point(field_add:apollo.dreamview.PreprocessTable.lidar_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::LidarConfig >&
PreprocessTable::lidar_config() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.PreprocessTable.lidar_config)
  return _impl_.lidar_config_;
}

// optional .apollo.dreamview.CameraConfig camera_config = 2;
inline bool PreprocessTable::_internal_has_camera_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camera_config_ != nullptr);
  return value;
}
inline bool PreprocessTable::has_camera_config() const {
  return _internal_has_camera_config();
}
inline void PreprocessTable::clear_camera_config() {
  if (_impl_.camera_config_ != nullptr) _impl_.camera_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::CameraConfig& PreprocessTable::_internal_camera_config() const {
  const ::apollo::dreamview::CameraConfig* p = _impl_.camera_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::CameraConfig&>(
      ::apollo::dreamview::_CameraConfig_default_instance_);
}
inline const ::apollo::dreamview::CameraConfig& PreprocessTable::camera_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.camera_config)
  return _internal_camera_config();
}
inline void PreprocessTable::unsafe_arena_set_allocated_camera_config(
    ::apollo::dreamview::CameraConfig* camera_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camera_config_);
  }
  _impl_.camera_config_ = camera_config;
  if (camera_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.PreprocessTable.camera_config)
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::release_camera_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::CameraConfig* temp = _impl_.camera_config_;
  _impl_.camera_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::unsafe_arena_release_camera_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.camera_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::CameraConfig* temp = _impl_.camera_config_;
  _impl_.camera_config_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::_internal_mutable_camera_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.camera_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::CameraConfig>(GetArenaForAllocation());
    _impl_.camera_config_ = p;
  }
  return _impl_.camera_config_;
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::mutable_camera_config() {
  ::apollo::dreamview::CameraConfig* _msg = _internal_mutable_camera_config();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.camera_config)
  return _msg;
}
inline void PreprocessTable::set_allocated_camera_config(::apollo::dreamview::CameraConfig* camera_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camera_config_;
  }
  if (camera_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_config);
    if (message_arena != submessage_arena) {
      camera_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.camera_config_ = camera_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.camera_config)
}

// optional string main_sensor = 3;
inline bool PreprocessTable::_internal_has_main_sensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreprocessTable::has_main_sensor() const {
  return _internal_has_main_sensor();
}
inline void PreprocessTable::clear_main_sensor() {
  _impl_.main_sensor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreprocessTable::main_sensor() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.main_sensor)
  return _internal_main_sensor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreprocessTable::set_main_sensor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.main_sensor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.PreprocessTable.main_sensor)
}
inline std::string* PreprocessTable::mutable_main_sensor() {
  std::string* _s = _internal_mutable_main_sensor();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.main_sensor)
  return _s;
}
inline const std::string& PreprocessTable::_internal_main_sensor() const {
  return _impl_.main_sensor_.Get();
}
inline void PreprocessTable::_internal_set_main_sensor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.main_sensor_.Set(value, GetArenaForAllocation());
}
inline std::string* PreprocessTable::_internal_mutable_main_sensor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.main_sensor_.Mutable(GetArenaForAllocation());
}
inline std::string* PreprocessTable::release_main_sensor() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.main_sensor)
  if (!_internal_has_main_sensor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.main_sensor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_.IsDefault()) {
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreprocessTable::set_allocated_main_sensor(std::string* main_sensor) {
  if (main_sensor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.main_sensor_.SetAllocated(main_sensor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_.IsDefault()) {
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.main_sensor)
}

// optional .apollo.dreamview.Progress progress = 4;
inline bool PreprocessTable::_internal_has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_ != nullptr);
  return value;
}
inline bool PreprocessTable::has_progress() const {
  return _internal_has_progress();
}
inline void PreprocessTable::clear_progress() {
  if (_impl_.progress_ != nullptr) _impl_.progress_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::Progress& PreprocessTable::_internal_progress() const {
  const ::apollo::dreamview::Progress* p = _impl_.progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Progress&>(
      ::apollo::dreamview::_Progress_default_instance_);
}
inline const ::apollo::dreamview::Progress& PreprocessTable::progress() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.progress)
  return _internal_progress();
}
inline void PreprocessTable::unsafe_arena_set_allocated_progress(
    ::apollo::dreamview::Progress* progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progress_);
  }
  _impl_.progress_ = progress;
  if (progress) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.PreprocessTable.progress)
}
inline ::apollo::dreamview::Progress* PreprocessTable::release_progress() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::Progress* temp = _impl_.progress_;
  _impl_.progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Progress* PreprocessTable::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.progress)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::Progress* temp = _impl_.progress_;
  _impl_.progress_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Progress* PreprocessTable::_internal_mutable_progress() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Progress>(GetArenaForAllocation());
    _impl_.progress_ = p;
  }
  return _impl_.progress_;
}
inline ::apollo::dreamview::Progress* PreprocessTable::mutable_progress() {
  ::apollo::dreamview::Progress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.progress)
  return _msg;
}
inline void PreprocessTable::set_allocated_progress(::apollo::dreamview::Progress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Status>() {
  return ::apollo::dreamview::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
