// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/preprocess_table.proto

#include "modules/dreamview/proto/preprocess_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dreamview {
PROTOBUF_CONSTEXPR Translation::Translation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct TranslationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslationDefaultTypeInternal() {}
  union {
    Translation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslationDefaultTypeInternal _Translation_default_instance_;
PROTOBUF_CONSTEXPR LidarConfig::LidarConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translation_)*/nullptr} {}
struct LidarConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarConfigDefaultTypeInternal() {}
  union {
    LidarConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarConfigDefaultTypeInternal _LidarConfig_default_instance_;
PROTOBUF_CONSTEXPR CameraConfig::CameraConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.d_)*/{}
  , /*decltype(_impl_.k_)*/{}
  , /*decltype(_impl_.translation_)*/nullptr} {}
struct CameraConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraConfigDefaultTypeInternal() {}
  union {
    CameraConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraConfigDefaultTypeInternal _CameraConfig_default_instance_;
PROTOBUF_CONSTEXPR Progress::Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.log_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.percentage_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressDefaultTypeInternal() {}
  union {
    Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressDefaultTypeInternal _Progress_default_instance_;
PROTOBUF_CONSTEXPR PreprocessTable::PreprocessTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lidar_config_)*/{}
  , /*decltype(_impl_.main_sensor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera_config_)*/nullptr
  , /*decltype(_impl_.progress_)*/nullptr} {}
struct PreprocessTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreprocessTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreprocessTableDefaultTypeInternal() {}
  union {
    PreprocessTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreprocessTableDefaultTypeInternal _PreprocessTable_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Translation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Translation, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Translation, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Translation, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _impl_.sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _impl_.translation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _impl_.d_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _impl_.k_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Progress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Progress, _impl_.percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Progress, _impl_.log_string_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Progress, _impl_.status_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _impl_.lidar_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _impl_.camera_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _impl_.main_sensor_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _impl_.progress_),
  ~0u,
  1,
  0,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::dreamview::Translation)},
  { 12, 20, -1, sizeof(::apollo::dreamview::LidarConfig)},
  { 22, 31, -1, sizeof(::apollo::dreamview::CameraConfig)},
  { 34, 43, -1, sizeof(::apollo::dreamview::Progress)},
  { 46, 56, -1, sizeof(::apollo::dreamview::PreprocessTable)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dreamview::_Translation_default_instance_._instance,
  &::apollo::dreamview::_LidarConfig_default_instance_._instance,
  &::apollo::dreamview::_CameraConfig_default_instance_._instance,
  &::apollo::dreamview::_Progress_default_instance_._instance,
  &::apollo::dreamview::_PreprocessTable_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/dreamview/proto/preprocess_tab"
  "le.proto\022\020apollo.dreamview\".\n\013Translatio"
  "n\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"V\n\013Li"
  "darConfig\022\023\n\013sensor_name\030\001 \001(\t\0222\n\013transl"
  "ation\030\002 \001(\0132\035.apollo.dreamview.Translati"
  "on\"X\n\014CameraConfig\0222\n\013translation\030\001 \001(\0132"
  "\035.apollo.dreamview.Translation\022\t\n\001D\030\002 \003("
  "\002\022\t\n\001K\030\003 \003(\002\"\\\n\010Progress\022\022\n\npercentage\030\001"
  " \001(\002\022\022\n\nlog_string\030\002 \001(\t\022(\n\006status\030\003 \001(\016"
  "2\030.apollo.dreamview.Status\"\300\001\n\017Preproces"
  "sTable\0223\n\014lidar_config\030\001 \003(\0132\035.apollo.dr"
  "eamview.LidarConfig\0225\n\rcamera_config\030\002 \001"
  "(\0132\036.apollo.dreamview.CameraConfig\022\023\n\013ma"
  "in_sensor\030\003 \001(\t\022,\n\010progress\030\004 \001(\0132\032.apol"
  "lo.dreamview.Progress*,\n\006Status\022\013\n\007SUCCE"
  "SS\020\000\022\010\n\004FAIL\020\001\022\013\n\007UNKNOWN\020\002"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto = {
    false, false, 627, descriptor_table_protodef_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto,
    "modules/dreamview/proto/preprocess_table.proto",
    &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Translation::_Internal {
 public:
  using HasBits = decltype(std::declval<Translation>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Translation::Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Translation)
}
Translation::Translation(const Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Translation)
}

inline void Translation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Translation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Translation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Translation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Translation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Translation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Translation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Translation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Translation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Translation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Translation::GetClassData() const { return &_class_data_; }

void Translation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Translation *>(to)->MergeFrom(
      static_cast<const Translation &>(from));
}


void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::InternalSwap(Translation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Translation, _impl_.z_)
      + sizeof(Translation::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Translation, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Translation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[0]);
}

// ===================================================================

class LidarConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarConfig>()._impl_._has_bits_);
  static void set_has_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::Translation& translation(const LidarConfig* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::dreamview::Translation&
LidarConfig::_Internal::translation(const LidarConfig* msg) {
  return *msg->_impl_.translation_;
}
LidarConfig::LidarConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.LidarConfig)
}
LidarConfig::LidarConfig(const LidarConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_name_){}
    , decltype(_impl_.translation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_name()) {
    _impl_.sensor_name_.Set(from._internal_sensor_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_translation()) {
    _impl_.translation_ = new ::apollo::dreamview::Translation(*from._impl_.translation_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.LidarConfig)
}

inline void LidarConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_name_){}
    , decltype(_impl_.translation_){nullptr}
  };
  _impl_.sensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LidarConfig::~LidarConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.LidarConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LidarConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.translation_;
}

void LidarConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LidarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.LidarConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sensor_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.LidarConfig.sensor_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Translation translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LidarConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.LidarConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.LidarConfig.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // optional .apollo.dreamview.Translation translation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.LidarConfig)
  return target;
}

size_t LidarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.LidarConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_name());
    }

    // optional .apollo.dreamview.Translation translation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LidarConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarConfig::GetClassData() const { return &_class_data_; }

void LidarConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LidarConfig *>(to)->MergeFrom(
      static_cast<const LidarConfig &>(from));
}


void LidarConfig::MergeFrom(const LidarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.LidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sensor_name(from._internal_sensor_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_translation()->::apollo::dreamview::Translation::MergeFrom(from._internal_translation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarConfig::CopyFrom(const LidarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.LidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarConfig::IsInitialized() const {
  return true;
}

void LidarConfig::InternalSwap(LidarConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_name_, lhs_arena,
      &other->_impl_.sensor_name_, rhs_arena
  );
  swap(_impl_.translation_, other->_impl_.translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[1]);
}

// ===================================================================

class CameraConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraConfig>()._impl_._has_bits_);
  static const ::apollo::dreamview::Translation& translation(const CameraConfig* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::dreamview::Translation&
CameraConfig::_Internal::translation(const CameraConfig* msg) {
  return *msg->_impl_.translation_;
}
CameraConfig::CameraConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.CameraConfig)
}
CameraConfig::CameraConfig(const CameraConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){from._impl_.d_}
    , decltype(_impl_.k_){from._impl_.k_}
    , decltype(_impl_.translation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _impl_.translation_ = new ::apollo::dreamview::Translation(*from._impl_.translation_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.CameraConfig)
}

inline void CameraConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.d_){arena}
    , decltype(_impl_.k_){arena}
    , decltype(_impl_.translation_){nullptr}
  };
}

CameraConfig::~CameraConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.CameraConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.d_.~RepeatedField();
  _impl_.k_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.translation_;
}

void CameraConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.CameraConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_.Clear();
  _impl_.k_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.translation_ != nullptr);
    _impl_.translation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.dreamview.Translation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float D = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float K = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_k(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.CameraConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.dreamview.Translation translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // repeated float D = 2;
  for (int i = 0, n = this->_internal_d_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_d(i), target);
  }

  // repeated float K = 3;
  for (int i = 0, n = this->_internal_k_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_k(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.CameraConfig)
  return target;
}

size_t CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.CameraConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float D = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_d_size());
    total_size += data_size;
  }

  // repeated float K = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_k_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_k_size());
    total_size += data_size;
  }

  // optional .apollo.dreamview.Translation translation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraConfig::GetClassData() const { return &_class_data_; }

void CameraConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraConfig *>(to)->MergeFrom(
      static_cast<const CameraConfig &>(from));
}


void CameraConfig::MergeFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.d_.MergeFrom(from._impl_.d_);
  _impl_.k_.MergeFrom(from._impl_.k_);
  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::apollo::dreamview::Translation::MergeFrom(from._internal_translation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraConfig::CopyFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraConfig::IsInitialized() const {
  return true;
}

void CameraConfig::InternalSwap(CameraConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  _impl_.k_.InternalSwap(&other->_impl_.k_);
  swap(_impl_.translation_, other->_impl_.translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[2]);
}

// ===================================================================

class Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<Progress>()._impl_._has_bits_);
  static void set_has_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Progress::Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_string_){}
    , decltype(_impl_.percentage_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log_string()) {
    _impl_.log_string_.Set(from._internal_log_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.percentage_, &from._impl_.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.percentage_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Progress)
}

inline void Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_string_){}
    , decltype(_impl_.percentage_){0}
    , decltype(_impl_.status_){0}
  };
  _impl_.log_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_string_.Destroy();
}

void Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.log_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.percentage_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_percentage(&has_bits);
          _impl_.percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string log_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_log_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.Progress.log_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::dreamview::Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float percentage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_percentage(), target);
  }

  // optional string log_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_log_string().data(), static_cast<int>(this->_internal_log_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Progress.log_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_string(), target);
  }

  // optional .apollo.dreamview.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string log_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_string());
    }

    // optional float percentage = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .apollo.dreamview.Status status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress::GetClassData() const { return &_class_data_; }

void Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Progress *>(to)->MergeFrom(
      static_cast<const Progress &>(from));
}


void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_log_string(from._internal_log_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.percentage_ = from._impl_.percentage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.status_ = from._impl_.status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_string_, lhs_arena,
      &other->_impl_.log_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Progress, _impl_.status_)
      + sizeof(Progress::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Progress, _impl_.percentage_)>(
          reinterpret_cast<char*>(&_impl_.percentage_),
          reinterpret_cast<char*>(&other->_impl_.percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[3]);
}

// ===================================================================

class PreprocessTable::_Internal {
 public:
  using HasBits = decltype(std::declval<PreprocessTable>()._impl_._has_bits_);
  static const ::apollo::dreamview::CameraConfig& camera_config(const PreprocessTable* msg);
  static void set_has_camera_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_main_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::Progress& progress(const PreprocessTable* msg);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::dreamview::CameraConfig&
PreprocessTable::_Internal::camera_config(const PreprocessTable* msg) {
  return *msg->_impl_.camera_config_;
}
const ::apollo::dreamview::Progress&
PreprocessTable::_Internal::progress(const PreprocessTable* msg) {
  return *msg->_impl_.progress_;
}
PreprocessTable::PreprocessTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.PreprocessTable)
}
PreprocessTable::PreprocessTable(const PreprocessTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lidar_config_){from._impl_.lidar_config_}
    , decltype(_impl_.main_sensor_){}
    , decltype(_impl_.camera_config_){nullptr}
    , decltype(_impl_.progress_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.main_sensor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_main_sensor()) {
    _impl_.main_sensor_.Set(from._internal_main_sensor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_camera_config()) {
    _impl_.camera_config_ = new ::apollo::dreamview::CameraConfig(*from._impl_.camera_config_);
  }
  if (from._internal_has_progress()) {
    _impl_.progress_ = new ::apollo::dreamview::Progress(*from._impl_.progress_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PreprocessTable)
}

inline void PreprocessTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lidar_config_){arena}
    , decltype(_impl_.main_sensor_){}
    , decltype(_impl_.camera_config_){nullptr}
    , decltype(_impl_.progress_){nullptr}
  };
  _impl_.main_sensor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreprocessTable::~PreprocessTable() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PreprocessTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreprocessTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lidar_config_.~RepeatedPtrField();
  _impl_.main_sensor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.camera_config_;
  if (this != internal_default_instance()) delete _impl_.progress_;
}

void PreprocessTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreprocessTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PreprocessTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lidar_config_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.main_sensor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.camera_config_ != nullptr);
      _impl_.camera_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.progress_ != nullptr);
      _impl_.progress_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreprocessTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lidar_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.CameraConfig camera_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string main_sensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_main_sensor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.PreprocessTable.main_sensor");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Progress progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreprocessTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PreprocessTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lidar_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_lidar_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.dreamview.CameraConfig camera_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::camera_config(this),
        _Internal::camera_config(this).GetCachedSize(), target, stream);
  }

  // optional string main_sensor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_sensor().data(), static_cast<int>(this->_internal_main_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PreprocessTable.main_sensor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_main_sensor(), target);
  }

  // optional .apollo.dreamview.Progress progress = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PreprocessTable)
  return target;
}

size_t PreprocessTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PreprocessTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  total_size += 1UL * this->_internal_lidar_config_size();
  for (const auto& msg : this->_impl_.lidar_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string main_sensor = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_sensor());
    }

    // optional .apollo.dreamview.CameraConfig camera_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camera_config_);
    }

    // optional .apollo.dreamview.Progress progress = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.progress_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreprocessTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreprocessTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreprocessTable::GetClassData() const { return &_class_data_; }

void PreprocessTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreprocessTable *>(to)->MergeFrom(
      static_cast<const PreprocessTable &>(from));
}


void PreprocessTable::MergeFrom(const PreprocessTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PreprocessTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lidar_config_.MergeFrom(from._impl_.lidar_config_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_main_sensor(from._internal_main_sensor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_camera_config()->::apollo::dreamview::CameraConfig::MergeFrom(from._internal_camera_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_progress()->::apollo::dreamview::Progress::MergeFrom(from._internal_progress());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreprocessTable::CopyFrom(const PreprocessTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PreprocessTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessTable::IsInitialized() const {
  return true;
}

void PreprocessTable::InternalSwap(PreprocessTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lidar_config_.InternalSwap(&other->_impl_.lidar_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_sensor_, lhs_arena,
      &other->_impl_.main_sensor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreprocessTable, _impl_.progress_)
      + sizeof(PreprocessTable::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(PreprocessTable, _impl_.camera_config_)>(
          reinterpret_cast<char*>(&_impl_.camera_config_),
          reinterpret_cast<char*>(&other->_impl_.camera_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreprocessTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Translation*
Arena::CreateMaybeMessage< ::apollo::dreamview::Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::LidarConfig*
Arena::CreateMaybeMessage< ::apollo::dreamview::LidarConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::LidarConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::CameraConfig*
Arena::CreateMaybeMessage< ::apollo::dreamview::CameraConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::CameraConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Progress*
Arena::CreateMaybeMessage< ::apollo::dreamview::Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::PreprocessTable*
Arena::CreateMaybeMessage< ::apollo::dreamview::PreprocessTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::PreprocessTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
