// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/camera_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto;
namespace apollo {
namespace dreamview {
class CameraUpdate;
struct CameraUpdateDefaultTypeInternal;
extern CameraUpdateDefaultTypeInternal _CameraUpdate_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::CameraUpdate* Arena::CreateMaybeMessage<::apollo::dreamview::CameraUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class CameraUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CameraUpdate) */ {
 public:
  inline CameraUpdate() : CameraUpdate(nullptr) {}
  ~CameraUpdate() override;
  explicit PROTOBUF_CONSTEXPR CameraUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraUpdate(const CameraUpdate& from);
  CameraUpdate(CameraUpdate&& from) noexcept
    : CameraUpdate() {
    *this = ::std::move(from);
  }

  inline CameraUpdate& operator=(const CameraUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraUpdate& operator=(CameraUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraUpdate* internal_default_instance() {
    return reinterpret_cast<const CameraUpdate*>(
               &_CameraUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraUpdate& a, CameraUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.CameraUpdate";
  }
  protected:
  explicit CameraUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationFieldNumber = 1,
    kLocalization2CameraTfFieldNumber = 2,
    kImageFieldNumber = 3,
    kImageAspectRatioFieldNumber = 4,
  };
  // repeated double localization = 1;
  int localization_size() const;
  private:
  int _internal_localization_size() const;
  public:
  void clear_localization();
  private:
  double _internal_localization(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_localization() const;
  void _internal_add_localization(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_localization();
  public:
  double localization(int index) const;
  void set_localization(int index, double value);
  void add_localization(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      localization() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_localization();

  // repeated double localization2camera_tf = 2;
  int localization2camera_tf_size() const;
  private:
  int _internal_localization2camera_tf_size() const;
  public:
  void clear_localization2camera_tf();
  private:
  double _internal_localization2camera_tf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_localization2camera_tf() const;
  void _internal_add_localization2camera_tf(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_localization2camera_tf();
  public:
  double localization2camera_tf(int index) const;
  void set_localization2camera_tf(int index, double value);
  void add_localization2camera_tf(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      localization2camera_tf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_localization2camera_tf();

  // optional bytes image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // optional double image_aspect_ratio = 4;
  bool has_image_aspect_ratio() const;
  private:
  bool _internal_has_image_aspect_ratio() const;
  public:
  void clear_image_aspect_ratio();
  double image_aspect_ratio() const;
  void set_image_aspect_ratio(double value);
  private:
  double _internal_image_aspect_ratio() const;
  void _internal_set_image_aspect_ratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CameraUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > localization_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > localization2camera_tf_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    double image_aspect_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraUpdate

// repeated double localization = 1;
inline int CameraUpdate::_internal_localization_size() const {
  return _impl_.localization_.size();
}
inline int CameraUpdate::localization_size() const {
  return _internal_localization_size();
}
inline void CameraUpdate::clear_localization() {
  _impl_.localization_.Clear();
}
inline double CameraUpdate::_internal_localization(int index) const {
  return _impl_.localization_.Get(index);
}
inline double CameraUpdate::localization(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.localization)
  return _internal_localization(index);
}
inline void CameraUpdate::set_localization(int index, double value) {
  _impl_.localization_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.localization)
}
inline void CameraUpdate::_internal_add_localization(double value) {
  _impl_.localization_.Add(value);
}
inline void CameraUpdate::add_localization(double value) {
  _internal_add_localization(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.localization)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::_internal_localization() const {
  return _impl_.localization_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::localization() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.localization)
  return _internal_localization();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::_internal_mutable_localization() {
  return &_impl_.localization_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::mutable_localization() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.localization)
  return _internal_mutable_localization();
}

// repeated double localization2camera_tf = 2;
inline int CameraUpdate::_internal_localization2camera_tf_size() const {
  return _impl_.localization2camera_tf_.size();
}
inline int CameraUpdate::localization2camera_tf_size() const {
  return _internal_localization2camera_tf_size();
}
inline void CameraUpdate::clear_localization2camera_tf() {
  _impl_.localization2camera_tf_.Clear();
}
inline double CameraUpdate::_internal_localization2camera_tf(int index) const {
  return _impl_.localization2camera_tf_.Get(index);
}
inline double CameraUpdate::localization2camera_tf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_localization2camera_tf(index);
}
inline void CameraUpdate::set_localization2camera_tf(int index, double value) {
  _impl_.localization2camera_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.localization2camera_tf)
}
inline void CameraUpdate::_internal_add_localization2camera_tf(double value) {
  _impl_.localization2camera_tf_.Add(value);
}
inline void CameraUpdate::add_localization2camera_tf(double value) {
  _internal_add_localization2camera_tf(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.localization2camera_tf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::_internal_localization2camera_tf() const {
  return _impl_.localization2camera_tf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::localization2camera_tf() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_localization2camera_tf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::_internal_mutable_localization2camera_tf() {
  return &_impl_.localization2camera_tf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::mutable_localization2camera_tf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_mutable_localization2camera_tf();
}

// optional bytes image = 3;
inline bool CameraUpdate::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraUpdate::has_image() const {
  return _internal_has_image();
}
inline void CameraUpdate::clear_image() {
  _impl_.image_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraUpdate::image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraUpdate::set_image(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.image)
}
inline std::string* CameraUpdate::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CameraUpdate.image)
  return _s;
}
inline const std::string& CameraUpdate::_internal_image() const {
  return _impl_.image_.Get();
}
inline void CameraUpdate::_internal_set_image(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraUpdate::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraUpdate::release_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CameraUpdate.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.image_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraUpdate::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CameraUpdate.image)
}

// optional double image_aspect_ratio = 4;
inline bool CameraUpdate::_internal_has_image_aspect_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraUpdate::has_image_aspect_ratio() const {
  return _internal_has_image_aspect_ratio();
}
inline void CameraUpdate::clear_image_aspect_ratio() {
  _impl_.image_aspect_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CameraUpdate::_internal_image_aspect_ratio() const {
  return _impl_.image_aspect_ratio_;
}
inline double CameraUpdate::image_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.image_aspect_ratio)
  return _internal_image_aspect_ratio();
}
inline void CameraUpdate::_internal_set_image_aspect_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.image_aspect_ratio_ = value;
}
inline void CameraUpdate::set_image_aspect_ratio(double value) {
  _internal_set_image_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.image_aspect_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
