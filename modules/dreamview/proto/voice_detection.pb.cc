// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/voice_detection.proto

#include "modules/dreamview/proto/voice_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dreamview {
PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModel_Hotword::VoiceDetectionConf_SnowboyModel_Hotword(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.word_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/0} {}
struct VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal() {}
  union {
    VoiceDetectionConf_SnowboyModel_Hotword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_;
PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModel::VoiceDetectionConf_SnowboyModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hotwords_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct VoiceDetectionConf_SnowboyModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDetectionConf_SnowboyModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDetectionConf_SnowboyModelDefaultTypeInternal() {}
  union {
    VoiceDetectionConf_SnowboyModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDetectionConf_SnowboyModelDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_default_instance_;
PROTOBUF_CONSTEXPR VoiceDetectionConf::VoiceDetectionConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.snowboy_models_)*/{}
  , /*decltype(_impl_.snowboy_resource_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_gain_)*/1
  , /*decltype(_impl_.sensitivity_)*/0.75f} {}
struct VoiceDetectionConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDetectionConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDetectionConfDefaultTypeInternal() {}
  union {
    VoiceDetectionConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDetectionConfDefaultTypeInternal _VoiceDetectionConf_default_instance_;
PROTOBUF_CONSTEXPR VoiceDetectionRequest::VoiceDetectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wav_stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}} {}
struct VoiceDetectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDetectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDetectionRequestDefaultTypeInternal() {}
  union {
    VoiceDetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDetectionRequestDefaultTypeInternal _VoiceDetectionRequest_default_instance_;
PROTOBUF_CONSTEXPR VoiceDetectionResponse::VoiceDetectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.action_)*/0} {}
struct VoiceDetectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoiceDetectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoiceDetectionResponseDefaultTypeInternal() {}
  union {
    VoiceDetectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoiceDetectionResponseDefaultTypeInternal _VoiceDetectionResponse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword, _impl_.word_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword, _impl_.response_message_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf_SnowboyModel, _impl_.hotwords_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _impl_.snowboy_resource_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _impl_.audio_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _impl_.sensitivity_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionConf, _impl_.snowboy_models_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionRequest, _impl_.wav_stream_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VoiceDetectionResponse, _impl_.action_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword)},
  { 12, 20, -1, sizeof(::apollo::dreamview::VoiceDetectionConf_SnowboyModel)},
  { 22, 32, -1, sizeof(::apollo::dreamview::VoiceDetectionConf)},
  { 36, 44, -1, sizeof(::apollo::dreamview::VoiceDetectionRequest)},
  { 46, 54, -1, sizeof(::apollo::dreamview::VoiceDetectionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dreamview::_VoiceDetectionConf_SnowboyModel_Hotword_default_instance_._instance,
  &::apollo::dreamview::_VoiceDetectionConf_SnowboyModel_default_instance_._instance,
  &::apollo::dreamview::_VoiceDetectionConf_default_instance_._instance,
  &::apollo::dreamview::_VoiceDetectionRequest_default_instance_._instance,
  &::apollo::dreamview::_VoiceDetectionResponse_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/dreamview/proto/voice_detectio"
  "n.proto\022\020apollo.dreamview\032(modules/dream"
  "view/proto/hmi_config.proto\"\247\003\n\022VoiceDet"
  "ectionConf\022H\n\020snowboy_resource\030\001 \001(\t:./u"
  "sr/local/apollo/snowboy/resources/common"
  ".res\022\025\n\naudio_gain\030\002 \001(\002:\0011\022\031\n\013sensitivi"
  "ty\030\003 \001(\002:\0040.75\022I\n\016snowboy_models\030\004 \003(\01321"
  ".apollo.dreamview.VoiceDetectionConf.Sno"
  "wboyModel\032\311\001\n\014SnowboyModel\022\014\n\004path\030\001 \001(\t"
  "\022K\n\010hotwords\030\002 \003(\01329.apollo.dreamview.Vo"
  "iceDetectionConf.SnowboyModel.Hotword\032^\n"
  "\007Hotword\022\014\n\004word\030\001 \001(\t\022+\n\006action\030\002 \001(\0162\033"
  ".apollo.dreamview.HMIAction\022\030\n\020response_"
  "message\030\003 \001(\t\"7\n\025VoiceDetectionRequest\022\n"
  "\n\002id\030\001 \001(\004\022\022\n\nwav_stream\030\002 \001(\014\"Q\n\026VoiceD"
  "etectionResponse\022\n\n\002id\030\001 \001(\004\022+\n\006action\030\002"
  " \001(\0162\033.apollo.dreamview.HMIAction"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto = {
    false, false, 673, descriptor_table_protodef_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto,
    "modules/dreamview/proto/voice_detection.proto",
    &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto);
namespace apollo {
namespace dreamview {

// ===================================================================

class VoiceDetectionConf_SnowboyModel_Hotword::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceDetectionConf_SnowboyModel_Hotword>()._impl_._has_bits_);
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VoiceDetectionConf_SnowboyModel_Hotword::VoiceDetectionConf_SnowboyModel_Hotword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
}
VoiceDetectionConf_SnowboyModel_Hotword::VoiceDetectionConf_SnowboyModel_Hotword(const VoiceDetectionConf_SnowboyModel_Hotword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.word_){}
    , decltype(_impl_.response_message_){}
    , decltype(_impl_.action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_word()) {
    _impl_.word_.Set(from._internal_word(), 
      GetArenaForAllocation());
  }
  _impl_.response_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response_message()) {
    _impl_.response_message_.Set(from._internal_response_message(), 
      GetArenaForAllocation());
  }
  _impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
}

inline void VoiceDetectionConf_SnowboyModel_Hotword::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.word_){}
    , decltype(_impl_.response_message_){}
    , decltype(_impl_.action_){0}
  };
  _impl_.word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VoiceDetectionConf_SnowboyModel_Hotword::~VoiceDetectionConf_SnowboyModel_Hotword() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceDetectionConf_SnowboyModel_Hotword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_.Destroy();
  _impl_.response_message_.Destroy();
}

void VoiceDetectionConf_SnowboyModel_Hotword::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceDetectionConf_SnowboyModel_Hotword::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.word_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.response_message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.action_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceDetectionConf_SnowboyModel_Hotword::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.HMIAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::HMIAction_IsValid(val))) {
            _internal_set_action(static_cast<::apollo::dreamview::HMIAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string response_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_response_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceDetectionConf_SnowboyModel_Hotword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // optional .apollo.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // optional string response_message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response_message().data(), static_cast<int>(this->_internal_response_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_response_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  return target;
}

size_t VoiceDetectionConf_SnowboyModel_Hotword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string word = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_word());
    }

    // optional string response_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_message());
    }

    // optional .apollo.dreamview.HMIAction action = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceDetectionConf_SnowboyModel_Hotword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoiceDetectionConf_SnowboyModel_Hotword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceDetectionConf_SnowboyModel_Hotword::GetClassData() const { return &_class_data_; }

void VoiceDetectionConf_SnowboyModel_Hotword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoiceDetectionConf_SnowboyModel_Hotword *>(to)->MergeFrom(
      static_cast<const VoiceDetectionConf_SnowboyModel_Hotword &>(from));
}


void VoiceDetectionConf_SnowboyModel_Hotword::MergeFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_word(from._internal_word());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_response_message(from._internal_response_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.action_ = from._impl_.action_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceDetectionConf_SnowboyModel_Hotword::CopyFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf_SnowboyModel_Hotword::IsInitialized() const {
  return true;
}

void VoiceDetectionConf_SnowboyModel_Hotword::InternalSwap(VoiceDetectionConf_SnowboyModel_Hotword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.word_, lhs_arena,
      &other->_impl_.word_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_message_, lhs_arena,
      &other->_impl_.response_message_, rhs_arena
  );
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceDetectionConf_SnowboyModel_Hotword::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[0]);
}

// ===================================================================

class VoiceDetectionConf_SnowboyModel::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceDetectionConf_SnowboyModel>()._impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VoiceDetectionConf_SnowboyModel::VoiceDetectionConf_SnowboyModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
}
VoiceDetectionConf_SnowboyModel::VoiceDetectionConf_SnowboyModel(const VoiceDetectionConf_SnowboyModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hotwords_){from._impl_.hotwords_}
    , decltype(_impl_.path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _impl_.path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
}

inline void VoiceDetectionConf_SnowboyModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hotwords_){arena}
    , decltype(_impl_.path_){}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VoiceDetectionConf_SnowboyModel::~VoiceDetectionConf_SnowboyModel() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceDetectionConf_SnowboyModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hotwords_.~RepeatedPtrField();
  _impl_.path_.Destroy();
}

void VoiceDetectionConf_SnowboyModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceDetectionConf_SnowboyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hotwords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceDetectionConf_SnowboyModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VoiceDetectionConf.SnowboyModel.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hotwords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceDetectionConf_SnowboyModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VoiceDetectionConf.SnowboyModel.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hotwords_size()); i < n; i++) {
    const auto& repfield = this->_internal_hotwords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  return target;
}

size_t VoiceDetectionConf_SnowboyModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  total_size += 1UL * this->_internal_hotwords_size();
  for (const auto& msg : this->_impl_.hotwords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string path = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceDetectionConf_SnowboyModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoiceDetectionConf_SnowboyModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceDetectionConf_SnowboyModel::GetClassData() const { return &_class_data_; }

void VoiceDetectionConf_SnowboyModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoiceDetectionConf_SnowboyModel *>(to)->MergeFrom(
      static_cast<const VoiceDetectionConf_SnowboyModel &>(from));
}


void VoiceDetectionConf_SnowboyModel::MergeFrom(const VoiceDetectionConf_SnowboyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.hotwords_.MergeFrom(from._impl_.hotwords_);
  if (from._internal_has_path()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceDetectionConf_SnowboyModel::CopyFrom(const VoiceDetectionConf_SnowboyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VoiceDetectionConf.SnowboyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf_SnowboyModel::IsInitialized() const {
  return true;
}

void VoiceDetectionConf_SnowboyModel::InternalSwap(VoiceDetectionConf_SnowboyModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hotwords_.InternalSwap(&other->_impl_.hotwords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceDetectionConf_SnowboyModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[1]);
}

// ===================================================================

class VoiceDetectionConf::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceDetectionConf>()._impl_._has_bits_);
  static void set_has_snowboy_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audio_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString VoiceDetectionConf::Impl_::_i_give_permission_to_break_this_code_default_snowboy_resource_{{{"/usr/local/apollo/snowboy/resources/common.res", 46}}, {nullptr}};
VoiceDetectionConf::VoiceDetectionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VoiceDetectionConf)
}
VoiceDetectionConf::VoiceDetectionConf(const VoiceDetectionConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snowboy_models_){from._impl_.snowboy_models_}
    , decltype(_impl_.snowboy_resource_){}
    , decltype(_impl_.audio_gain_){}
    , decltype(_impl_.sensitivity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snowboy_resource_.InitDefault();
  if (from._internal_has_snowboy_resource()) {
    _impl_.snowboy_resource_.Set(from._internal_snowboy_resource(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.audio_gain_, &from._impl_.audio_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sensitivity_) -
    reinterpret_cast<char*>(&_impl_.audio_gain_)) + sizeof(_impl_.sensitivity_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VoiceDetectionConf)
}

inline void VoiceDetectionConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.snowboy_models_){arena}
    , decltype(_impl_.snowboy_resource_){}
    , decltype(_impl_.audio_gain_){1}
    , decltype(_impl_.sensitivity_){0.75f}
  };
  _impl_.snowboy_resource_.InitDefault();
}

VoiceDetectionConf::~VoiceDetectionConf() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VoiceDetectionConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceDetectionConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snowboy_models_.~RepeatedPtrField();
  _impl_.snowboy_resource_.Destroy();
}

void VoiceDetectionConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceDetectionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VoiceDetectionConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snowboy_models_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.snowboy_resource_.ClearToDefault(::apollo::dreamview::VoiceDetectionConf::Impl_::_i_give_permission_to_break_this_code_default_snowboy_resource_, GetArenaForAllocation());
       }
    _impl_.audio_gain_ = 1;
    _impl_.sensitivity_ = 0.75f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceDetectionConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string snowboy_resource = 1 [default = "/usr/local/apollo/snowboy/resources/common.res"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_snowboy_resource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dreamview.VoiceDetectionConf.snowboy_resource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float audio_gain = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_audio_gain(&has_bits);
          _impl_.audio_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sensitivity = 3 [default = 0.75];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_sensitivity(&has_bits);
          _impl_.sensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snowboy_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceDetectionConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VoiceDetectionConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string snowboy_resource = 1 [default = "/usr/local/apollo/snowboy/resources/common.res"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snowboy_resource().data(), static_cast<int>(this->_internal_snowboy_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VoiceDetectionConf.snowboy_resource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snowboy_resource(), target);
  }

  // optional float audio_gain = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_audio_gain(), target);
  }

  // optional float sensitivity = 3 [default = 0.75];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_sensitivity(), target);
  }

  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_snowboy_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_snowboy_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VoiceDetectionConf)
  return target;
}

size_t VoiceDetectionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VoiceDetectionConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  total_size += 1UL * this->_internal_snowboy_models_size();
  for (const auto& msg : this->_impl_.snowboy_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string snowboy_resource = 1 [default = "/usr/local/apollo/snowboy/resources/common.res"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snowboy_resource());
    }

    // optional float audio_gain = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float sensitivity = 3 [default = 0.75];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceDetectionConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoiceDetectionConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceDetectionConf::GetClassData() const { return &_class_data_; }

void VoiceDetectionConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoiceDetectionConf *>(to)->MergeFrom(
      static_cast<const VoiceDetectionConf &>(from));
}


void VoiceDetectionConf::MergeFrom(const VoiceDetectionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VoiceDetectionConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.snowboy_models_.MergeFrom(from._impl_.snowboy_models_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_snowboy_resource(from._internal_snowboy_resource());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.audio_gain_ = from._impl_.audio_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sensitivity_ = from._impl_.sensitivity_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceDetectionConf::CopyFrom(const VoiceDetectionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VoiceDetectionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf::IsInitialized() const {
  return true;
}

void VoiceDetectionConf::InternalSwap(VoiceDetectionConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.snowboy_models_.InternalSwap(&other->_impl_.snowboy_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snowboy_resource_, lhs_arena,
      &other->_impl_.snowboy_resource_, rhs_arena
  );
  swap(_impl_.audio_gain_, other->_impl_.audio_gain_);
  swap(_impl_.sensitivity_, other->_impl_.sensitivity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceDetectionConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[2]);
}

// ===================================================================

class VoiceDetectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceDetectionRequest>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wav_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VoiceDetectionRequest::VoiceDetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VoiceDetectionRequest)
}
VoiceDetectionRequest::VoiceDetectionRequest(const VoiceDetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wav_stream_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wav_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wav_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wav_stream()) {
    _impl_.wav_stream_.Set(from._internal_wav_stream(), 
      GetArenaForAllocation());
  }
  _impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VoiceDetectionRequest)
}

inline void VoiceDetectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wav_stream_){}
    , decltype(_impl_.id_){uint64_t{0u}}
  };
  _impl_.wav_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wav_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VoiceDetectionRequest::~VoiceDetectionRequest() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VoiceDetectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceDetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wav_stream_.Destroy();
}

void VoiceDetectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceDetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VoiceDetectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.wav_stream_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceDetectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes wav_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wav_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceDetectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VoiceDetectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional bytes wav_stream = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_wav_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VoiceDetectionRequest)
  return target;
}

size_t VoiceDetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VoiceDetectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes wav_stream = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_wav_stream());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceDetectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoiceDetectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceDetectionRequest::GetClassData() const { return &_class_data_; }

void VoiceDetectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoiceDetectionRequest *>(to)->MergeFrom(
      static_cast<const VoiceDetectionRequest &>(from));
}


void VoiceDetectionRequest::MergeFrom(const VoiceDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VoiceDetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_wav_stream(from._internal_wav_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_ = from._impl_.id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceDetectionRequest::CopyFrom(const VoiceDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VoiceDetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionRequest::IsInitialized() const {
  return true;
}

void VoiceDetectionRequest::InternalSwap(VoiceDetectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wav_stream_, lhs_arena,
      &other->_impl_.wav_stream_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceDetectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[3]);
}

// ===================================================================

class VoiceDetectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceDetectionResponse>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VoiceDetectionResponse::VoiceDetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.VoiceDetectionResponse)
}
VoiceDetectionResponse::VoiceDetectionResponse(const VoiceDetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VoiceDetectionResponse)
}

inline void VoiceDetectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.action_){0}
  };
}

VoiceDetectionResponse::~VoiceDetectionResponse() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VoiceDetectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoiceDetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoiceDetectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoiceDetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VoiceDetectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceDetectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.HMIAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::HMIAction_IsValid(val))) {
            _internal_set_action(static_cast<::apollo::dreamview::HMIAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoiceDetectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VoiceDetectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VoiceDetectionResponse)
  return target;
}

size_t VoiceDetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VoiceDetectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional .apollo.dreamview.HMIAction action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoiceDetectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoiceDetectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoiceDetectionResponse::GetClassData() const { return &_class_data_; }

void VoiceDetectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoiceDetectionResponse *>(to)->MergeFrom(
      static_cast<const VoiceDetectionResponse &>(from));
}


void VoiceDetectionResponse::MergeFrom(const VoiceDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VoiceDetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.action_ = from._impl_.action_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoiceDetectionResponse::CopyFrom(const VoiceDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VoiceDetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionResponse::IsInitialized() const {
  return true;
}

void VoiceDetectionResponse::InternalSwap(VoiceDetectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoiceDetectionResponse, _impl_.action_)
      + sizeof(VoiceDetectionResponse::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(VoiceDetectionResponse, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceDetectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword*
Arena::CreateMaybeMessage< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VoiceDetectionConf_SnowboyModel*
Arena::CreateMaybeMessage< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VoiceDetectionConf_SnowboyModel >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VoiceDetectionConf*
Arena::CreateMaybeMessage< ::apollo::dreamview::VoiceDetectionConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VoiceDetectionConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VoiceDetectionRequest*
Arena::CreateMaybeMessage< ::apollo::dreamview::VoiceDetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VoiceDetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VoiceDetectionResponse*
Arena::CreateMaybeMessage< ::apollo::dreamview::VoiceDetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::VoiceDetectionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
