// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
namespace apollo {
namespace dreamview {
class AudioCapturingConfig;
struct AudioCapturingConfigDefaultTypeInternal;
extern AudioCapturingConfigDefaultTypeInternal _AudioCapturingConfig_default_instance_;
class Component;
struct ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Component_SupportedCommandsEntry_DoNotUse;
struct Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal;
extern Component_SupportedCommandsEntry_DoNotUseDefaultTypeInternal _Component_SupportedCommandsEntry_DoNotUse_default_instance_;
class HMIConfig;
struct HMIConfigDefaultTypeInternal;
extern HMIConfigDefaultTypeInternal _HMIConfig_default_instance_;
class HMIConfig_AvailableMapsEntry_DoNotUse;
struct HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_AvailableMapsEntry_DoNotUseDefaultTypeInternal _HMIConfig_AvailableMapsEntry_DoNotUse_default_instance_;
class HMIConfig_AvailableVehiclesEntry_DoNotUse;
struct HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_AvailableVehiclesEntry_DoNotUseDefaultTypeInternal _HMIConfig_AvailableVehiclesEntry_DoNotUse_default_instance_;
class HMIConfig_HardwareEntry_DoNotUse;
struct HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_HardwareEntry_DoNotUseDefaultTypeInternal _HMIConfig_HardwareEntry_DoNotUse_default_instance_;
class HMIConfig_ModesEntry_DoNotUse;
struct HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal _HMIConfig_ModesEntry_DoNotUse_default_instance_;
class HMIConfig_ModulesEntry_DoNotUse;
struct HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_ModulesEntry_DoNotUseDefaultTypeInternal _HMIConfig_ModulesEntry_DoNotUse_default_instance_;
class HMIConfig_ToolsEntry_DoNotUse;
struct HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_ToolsEntry_DoNotUseDefaultTypeInternal _HMIConfig_ToolsEntry_DoNotUse_default_instance_;
class Mode;
struct ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class VehicleData;
struct VehicleDataDefaultTypeInternal;
extern VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
class VehicleData_DataFile;
struct VehicleData_DataFileDefaultTypeInternal;
extern VehicleData_DataFileDefaultTypeInternal _VehicleData_DataFile_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::AudioCapturingConfig* Arena::CreateMaybeMessage<::apollo::dreamview::AudioCapturingConfig>(Arena*);
template<> ::apollo::dreamview::Component* Arena::CreateMaybeMessage<::apollo::dreamview::Component>(Arena*);
template<> ::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::Component_SupportedCommandsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig>(Arena*);
template<> ::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_AvailableMapsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_AvailableVehiclesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_HardwareEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_ToolsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Mode* Arena::CreateMaybeMessage<::apollo::dreamview::Mode>(Arena*);
template<> ::apollo::dreamview::VehicleData* Arena::CreateMaybeMessage<::apollo::dreamview::VehicleData>(Arena*);
template<> ::apollo::dreamview::VehicleData_DataFile* Arena::CreateMaybeMessage<::apollo::dreamview::VehicleData_DataFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum HMIAction : int {
  NONE = 0,
  SETUP = 1,
  AUTO_MODE = 2,
  DISENGAGE = 3
};
bool HMIAction_IsValid(int value);
constexpr HMIAction HMIAction_MIN = NONE;
constexpr HMIAction HMIAction_MAX = DISENGAGE;
constexpr int HMIAction_ARRAYSIZE = HMIAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HMIAction_descriptor();
template<typename T>
inline const std::string& HMIAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HMIAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HMIAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HMIAction_descriptor(), enum_t_value);
}
inline bool HMIAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HMIAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HMIAction>(
    HMIAction_descriptor(), name, value);
}
// ===================================================================

class Component_SupportedCommandsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Component_SupportedCommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Component_SupportedCommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Component_SupportedCommandsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Component_SupportedCommandsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Component_SupportedCommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Component_SupportedCommandsEntry_DoNotUse& other);
  static const Component_SupportedCommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Component_SupportedCommandsEntry_DoNotUse*>(&_Component_SupportedCommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Component.SupportedCommandsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Component.SupportedCommandsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class Component final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  ~Component() override;
  explicit PROTOBUF_CONSTEXPR Component(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Component& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Component& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSupportedCommandsFieldNumber = 3,
    kDisplayNameFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // map<string, string> supported_commands = 3;
  int supported_commands_size() const;
  private:
  int _internal_supported_commands_size() const;
  public:
  void clear_supported_commands();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_supported_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_supported_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      supported_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_supported_commands();

  // optional string display_name = 1;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Component_SupportedCommandsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> supported_commands_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Mode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Mode) */ {
 public:
  inline Mode() : Mode(nullptr) {}
  ~Mode() override;
  explicit PROTOBUF_CONSTEXPR Mode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mode(const Mode& from);
  Mode(Mode&& from) noexcept
    : Mode() {
    *this = ::std::move(from);
  }

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mode& operator=(Mode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mode* internal_default_instance() {
    return reinterpret_cast<const Mode*>(
               &_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mode& a, Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(Mode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Mode";
  }
  protected:
  explicit Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveModulesFieldNumber = 1,
    kLiveHardwareFieldNumber = 2,
  };
  // repeated string live_modules = 1;
  int live_modules_size() const;
  private:
  int _internal_live_modules_size() const;
  public:
  void clear_live_modules();
  const std::string& live_modules(int index) const;
  std::string* mutable_live_modules(int index);
  void set_live_modules(int index, const std::string& value);
  void set_live_modules(int index, std::string&& value);
  void set_live_modules(int index, const char* value);
  void set_live_modules(int index, const char* value, size_t size);
  std::string* add_live_modules();
  void add_live_modules(const std::string& value);
  void add_live_modules(std::string&& value);
  void add_live_modules(const char* value);
  void add_live_modules(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& live_modules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_live_modules();
  private:
  const std::string& _internal_live_modules(int index) const;
  std::string* _internal_add_live_modules();
  public:

  // repeated string live_hardware = 2;
  int live_hardware_size() const;
  private:
  int _internal_live_hardware_size() const;
  public:
  void clear_live_hardware();
  const std::string& live_hardware(int index) const;
  std::string* mutable_live_hardware(int index);
  void set_live_hardware(int index, const std::string& value);
  void set_live_hardware(int index, std::string&& value);
  void set_live_hardware(int index, const char* value);
  void set_live_hardware(int index, const char* value, size_t size);
  std::string* add_live_hardware();
  void add_live_hardware(const std::string& value);
  void add_live_hardware(std::string&& value);
  void add_live_hardware(const char* value);
  void add_live_hardware(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& live_hardware() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_live_hardware();
  private:
  const std::string& _internal_live_hardware(int index) const;
  std::string* _internal_add_live_hardware();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> live_modules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> live_hardware_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AudioCapturingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.AudioCapturingConfig) */ {
 public:
  inline AudioCapturingConfig() : AudioCapturingConfig(nullptr) {}
  ~AudioCapturingConfig() override;
  explicit PROTOBUF_CONSTEXPR AudioCapturingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioCapturingConfig(const AudioCapturingConfig& from);
  AudioCapturingConfig(AudioCapturingConfig&& from) noexcept
    : AudioCapturingConfig() {
    *this = ::std::move(from);
  }

  inline AudioCapturingConfig& operator=(const AudioCapturingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioCapturingConfig& operator=(AudioCapturingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioCapturingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioCapturingConfig* internal_default_instance() {
    return reinterpret_cast<const AudioCapturingConfig*>(
               &_AudioCapturingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioCapturingConfig& a, AudioCapturingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioCapturingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioCapturingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioCapturingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioCapturingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioCapturingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioCapturingConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioCapturingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.AudioCapturingConfig";
  }
  protected:
  explicit AudioCapturingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 2,
    kBitsPerSampleFieldNumber = 3,
    kChannelsFieldNumber = 1,
  };
  // optional int32 sample_rate = 2;
  bool has_sample_rate() const;
  private:
  bool _internal_has_sample_rate() const;
  public:
  void clear_sample_rate();
  int32_t sample_rate() const;
  void set_sample_rate(int32_t value);
  private:
  int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(int32_t value);
  public:

  // optional int32 bits_per_sample = 3;
  bool has_bits_per_sample() const;
  private:
  bool _internal_has_bits_per_sample() const;
  public:
  void clear_bits_per_sample();
  int32_t bits_per_sample() const;
  void set_bits_per_sample(int32_t value);
  private:
  int32_t _internal_bits_per_sample() const;
  void _internal_set_bits_per_sample(int32_t value);
  public:

  // optional int32 channels = 1 [default = 1];
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.AudioCapturingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t sample_rate_;
    int32_t bits_per_sample_;
    int32_t channels_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class HMIConfig_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIConfig_ModulesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_ModulesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_ModulesEntry_DoNotUse& other);
  static const HMIConfig_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_ModulesEntry_DoNotUse*>(&_HMIConfig_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.ModulesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_HardwareEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_HardwareEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_HardwareEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIConfig_HardwareEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_HardwareEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_HardwareEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_HardwareEntry_DoNotUse& other);
  static const HMIConfig_HardwareEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_HardwareEntry_DoNotUse*>(&_HMIConfig_HardwareEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.HardwareEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_ToolsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ToolsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ToolsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIConfig_ToolsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_ToolsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_ToolsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_ToolsEntry_DoNotUse& other);
  static const HMIConfig_ToolsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_ToolsEntry_DoNotUse*>(&_HMIConfig_ToolsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.ToolsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_AvailableMapsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_AvailableMapsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_AvailableMapsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HMIConfig_AvailableMapsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_AvailableMapsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_AvailableMapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_AvailableMapsEntry_DoNotUse& other);
  static const HMIConfig_AvailableMapsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_AvailableMapsEntry_DoNotUse*>(&_HMIConfig_AvailableMapsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.AvailableMapsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.AvailableMapsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_AvailableVehiclesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_AvailableVehiclesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_AvailableVehiclesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HMIConfig_AvailableVehiclesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_AvailableVehiclesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_AvailableVehiclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_AvailableVehiclesEntry_DoNotUse& other);
  static const HMIConfig_AvailableVehiclesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_AvailableVehiclesEntry_DoNotUse*>(&_HMIConfig_AvailableVehiclesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.AvailableVehiclesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_ModesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Mode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Mode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIConfig_ModesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_ModesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_ModesEntry_DoNotUse& other);
  static const HMIConfig_ModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_ModesEntry_DoNotUse*>(&_HMIConfig_ModesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.ModesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIConfig) */ {
 public:
  inline HMIConfig() : HMIConfig(nullptr) {}
  ~HMIConfig() override;
  explicit PROTOBUF_CONSTEXPR HMIConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIConfig(const HMIConfig& from);
  HMIConfig(HMIConfig&& from) noexcept
    : HMIConfig() {
    *this = ::std::move(from);
  }

  inline HMIConfig& operator=(const HMIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIConfig& operator=(HMIConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HMIConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIConfig* internal_default_instance() {
    return reinterpret_cast<const HMIConfig*>(
               &_HMIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HMIConfig& a, HMIConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HMIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HMIConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HMIConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HMIConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIConfig";
  }
  protected:
  explicit HMIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 2,
    kHardwareFieldNumber = 3,
    kToolsFieldNumber = 4,
    kAvailableMapsFieldNumber = 5,
    kAvailableVehiclesFieldNumber = 6,
    kModesFieldNumber = 7,
    kDockerImageFieldNumber = 1,
    kAudioCapturingConfFieldNumber = 9,
    kUtmZoneIdFieldNumber = 8,
    kChassisHighBeamActionFieldNumber = 10,
  };
  // map<string, .apollo.dreamview.Component> modules = 2;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      mutable_modules();

  // map<string, .apollo.dreamview.Component> hardware = 3;
  int hardware_size() const;
  private:
  int _internal_hardware_size() const;
  public:
  void clear_hardware();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      _internal_hardware() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      _internal_mutable_hardware();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      hardware() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      mutable_hardware();

  // map<string, .apollo.dreamview.Component> tools = 4;
  int tools_size() const;
  private:
  int _internal_tools_size() const;
  public:
  void clear_tools();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      _internal_tools() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      _internal_mutable_tools();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
      tools() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
      mutable_tools();

  // map<string, string> available_maps = 5;
  int available_maps_size() const;
  private:
  int _internal_available_maps_size() const;
  public:
  void clear_available_maps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_available_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_available_maps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      available_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_available_maps();

  // map<string, string> available_vehicles = 6;
  int available_vehicles_size() const;
  private:
  int _internal_available_vehicles_size() const;
  public:
  void clear_available_vehicles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_available_vehicles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_available_vehicles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      available_vehicles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_available_vehicles();

  // map<string, .apollo.dreamview.Mode> modes = 7;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >&
      _internal_modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >*
      _internal_mutable_modes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >&
      modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >*
      mutable_modes();

  // optional string docker_image = 1;
  bool has_docker_image() const;
  private:
  bool _internal_has_docker_image() const;
  public:
  void clear_docker_image();
  const std::string& docker_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_docker_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_docker_image();
  PROTOBUF_NODISCARD std::string* release_docker_image();
  void set_allocated_docker_image(std::string* docker_image);
  private:
  const std::string& _internal_docker_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_docker_image(const std::string& value);
  std::string* _internal_mutable_docker_image();
  public:

  // optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  bool has_audio_capturing_conf() const;
  private:
  bool _internal_has_audio_capturing_conf() const;
  public:
  void clear_audio_capturing_conf();
  const ::apollo::dreamview::AudioCapturingConfig& audio_capturing_conf() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::AudioCapturingConfig* release_audio_capturing_conf();
  ::apollo::dreamview::AudioCapturingConfig* mutable_audio_capturing_conf();
  void set_allocated_audio_capturing_conf(::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf);
  private:
  const ::apollo::dreamview::AudioCapturingConfig& _internal_audio_capturing_conf() const;
  ::apollo::dreamview::AudioCapturingConfig* _internal_mutable_audio_capturing_conf();
  public:
  void unsafe_arena_set_allocated_audio_capturing_conf(
      ::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf);
  ::apollo::dreamview::AudioCapturingConfig* unsafe_arena_release_audio_capturing_conf();

  // optional int32 utm_zone_id = 8;
  bool has_utm_zone_id() const;
  private:
  bool _internal_has_utm_zone_id() const;
  public:
  void clear_utm_zone_id();
  int32_t utm_zone_id() const;
  void set_utm_zone_id(int32_t value);
  private:
  int32_t _internal_utm_zone_id() const;
  void _internal_set_utm_zone_id(int32_t value);
  public:

  // optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
  bool has_chassis_high_beam_action() const;
  private:
  bool _internal_has_chassis_high_beam_action() const;
  public:
  void clear_chassis_high_beam_action();
  ::apollo::dreamview::HMIAction chassis_high_beam_action() const;
  void set_chassis_high_beam_action(::apollo::dreamview::HMIAction value);
  private:
  ::apollo::dreamview::HMIAction _internal_chassis_high_beam_action() const;
  void _internal_set_chassis_high_beam_action(::apollo::dreamview::HMIAction value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_ModulesEntry_DoNotUse,
        std::string, ::apollo::dreamview::Component,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modules_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_HardwareEntry_DoNotUse,
        std::string, ::apollo::dreamview::Component,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> hardware_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_ToolsEntry_DoNotUse,
        std::string, ::apollo::dreamview::Component,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tools_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_AvailableMapsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> available_maps_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_AvailableVehiclesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> available_vehicles_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_ModesEntry_DoNotUse,
        std::string, ::apollo::dreamview::Mode,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docker_image_;
    ::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf_;
    int32_t utm_zone_id_;
    int chassis_high_beam_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleData_DataFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData.DataFile) */ {
 public:
  inline VehicleData_DataFile() : VehicleData_DataFile(nullptr) {}
  ~VehicleData_DataFile() override;
  explicit PROTOBUF_CONSTEXPR VehicleData_DataFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleData_DataFile(const VehicleData_DataFile& from);
  VehicleData_DataFile(VehicleData_DataFile&& from) noexcept
    : VehicleData_DataFile() {
    *this = ::std::move(from);
  }

  inline VehicleData_DataFile& operator=(const VehicleData_DataFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleData_DataFile& operator=(VehicleData_DataFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleData_DataFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleData_DataFile* internal_default_instance() {
    return reinterpret_cast<const VehicleData_DataFile*>(
               &_VehicleData_DataFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VehicleData_DataFile& a, VehicleData_DataFile& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleData_DataFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleData_DataFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleData_DataFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleData_DataFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleData_DataFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleData_DataFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleData_DataFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VehicleData.DataFile";
  }
  protected:
  explicit VehicleData_DataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePathFieldNumber = 1,
    kDestPathFieldNumber = 2,
  };
  // optional string source_path = 1;
  bool has_source_path() const;
  private:
  bool _internal_has_source_path() const;
  public:
  void clear_source_path();
  const std::string& source_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_path();
  PROTOBUF_NODISCARD std::string* release_source_path();
  void set_allocated_source_path(std::string* source_path);
  private:
  const std::string& _internal_source_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_path(const std::string& value);
  std::string* _internal_mutable_source_path();
  public:

  // optional string dest_path = 2;
  bool has_dest_path() const;
  private:
  bool _internal_has_dest_path() const;
  public:
  void clear_dest_path();
  const std::string& dest_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dest_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dest_path();
  PROTOBUF_NODISCARD std::string* release_dest_path();
  void set_allocated_dest_path(std::string* dest_path);
  private:
  const std::string& _internal_dest_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_path(const std::string& value);
  std::string* _internal_mutable_dest_path();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData.DataFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData) */ {
 public:
  inline VehicleData() : VehicleData(nullptr) {}
  ~VehicleData() override;
  explicit PROTOBUF_CONSTEXPR VehicleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleData(const VehicleData& from);
  VehicleData(VehicleData&& from) noexcept
    : VehicleData() {
    *this = ::std::move(from);
  }

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleData& operator=(VehicleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleData* internal_default_instance() {
    return reinterpret_cast<const VehicleData*>(
               &_VehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VehicleData& a, VehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VehicleData";
  }
  protected:
  explicit VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleData_DataFile DataFile;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFilesFieldNumber = 1,
  };
  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  int data_files_size() const;
  private:
  int _internal_data_files_size() const;
  public:
  void clear_data_files();
  ::apollo::dreamview::VehicleData_DataFile* mutable_data_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
      mutable_data_files();
  private:
  const ::apollo::dreamview::VehicleData_DataFile& _internal_data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* _internal_add_data_files();
  public:
  const ::apollo::dreamview::VehicleData_DataFile& data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* add_data_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
      data_files() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile > data_files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Component

// optional string display_name = 1;
inline bool Component::_internal_has_display_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Component::has_display_name() const {
  return _internal_has_display_name();
}
inline void Component::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Component::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_display_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.display_name)
}
inline std::string* Component::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.display_name)
  return _s;
}
inline const std::string& Component::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void Component::_internal_set_display_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_display_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_display_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Component::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.display_name)
}

// optional string path = 2;
inline bool Component::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Component::has_path() const {
  return _internal_has_path();
}
inline void Component::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Component::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Component.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Component.path)
}
inline std::string* Component::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Component.path)
  return _s;
}
inline const std::string& Component::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Component::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Component.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Component::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Component.path)
}

// map<string, string> supported_commands = 3;
inline int Component::_internal_supported_commands_size() const {
  return _impl_.supported_commands_.size();
}
inline int Component::supported_commands_size() const {
  return _internal_supported_commands_size();
}
inline void Component::clear_supported_commands() {
  _impl_.supported_commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Component::_internal_supported_commands() const {
  return _impl_.supported_commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Component::supported_commands() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Component.supported_commands)
  return _internal_supported_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Component::_internal_mutable_supported_commands() {
  return _impl_.supported_commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Component::mutable_supported_commands() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Component.supported_commands)
  return _internal_mutable_supported_commands();
}

// -------------------------------------------------------------------

// Mode

// repeated string live_modules = 1;
inline int Mode::_internal_live_modules_size() const {
  return _impl_.live_modules_.size();
}
inline int Mode::live_modules_size() const {
  return _internal_live_modules_size();
}
inline void Mode::clear_live_modules() {
  _impl_.live_modules_.Clear();
}
inline std::string* Mode::add_live_modules() {
  std::string* _s = _internal_add_live_modules();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_modules)
  return _s;
}
inline const std::string& Mode::_internal_live_modules(int index) const {
  return _impl_.live_modules_.Get(index);
}
inline const std::string& Mode::live_modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_modules)
  return _internal_live_modules(index);
}
inline std::string* Mode::mutable_live_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_modules)
  return _impl_.live_modules_.Mutable(index);
}
inline void Mode::set_live_modules(int index, const std::string& value) {
  _impl_.live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
}
inline void Mode::set_live_modules(int index, std::string&& value) {
  _impl_.live_modules_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_modules)
}
inline void Mode::set_live_modules(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::set_live_modules(int index, const char* value, size_t size) {
  _impl_.live_modules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_modules)
}
inline std::string* Mode::_internal_add_live_modules() {
  return _impl_.live_modules_.Add();
}
inline void Mode::add_live_modules(const std::string& value) {
  _impl_.live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(std::string&& value) {
  _impl_.live_modules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_modules)
}
inline void Mode::add_live_modules(const char* value, size_t size) {
  _impl_.live_modules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_modules)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mode::live_modules() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_modules)
  return _impl_.live_modules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mode::mutable_live_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_modules)
  return &_impl_.live_modules_;
}

// repeated string live_hardware = 2;
inline int Mode::_internal_live_hardware_size() const {
  return _impl_.live_hardware_.size();
}
inline int Mode::live_hardware_size() const {
  return _internal_live_hardware_size();
}
inline void Mode::clear_live_hardware() {
  _impl_.live_hardware_.Clear();
}
inline std::string* Mode::add_live_hardware() {
  std::string* _s = _internal_add_live_hardware();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Mode.live_hardware)
  return _s;
}
inline const std::string& Mode::_internal_live_hardware(int index) const {
  return _impl_.live_hardware_.Get(index);
}
inline const std::string& Mode::live_hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Mode.live_hardware)
  return _internal_live_hardware(index);
}
inline std::string* Mode::mutable_live_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Mode.live_hardware)
  return _impl_.live_hardware_.Mutable(index);
}
inline void Mode::set_live_hardware(int index, const std::string& value) {
  _impl_.live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::set_live_hardware(int index, std::string&& value) {
  _impl_.live_hardware_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::set_live_hardware(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::set_live_hardware(int index, const char* value, size_t size) {
  _impl_.live_hardware_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Mode.live_hardware)
}
inline std::string* Mode::_internal_add_live_hardware() {
  return _impl_.live_hardware_.Add();
}
inline void Mode::add_live_hardware(const std::string& value) {
  _impl_.live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(std::string&& value) {
  _impl_.live_hardware_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Mode.live_hardware)
}
inline void Mode::add_live_hardware(const char* value, size_t size) {
  _impl_.live_hardware_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Mode.live_hardware)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mode::live_hardware() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Mode.live_hardware)
  return _impl_.live_hardware_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mode::mutable_live_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Mode.live_hardware)
  return &_impl_.live_hardware_;
}

// -------------------------------------------------------------------

// AudioCapturingConfig

// optional int32 channels = 1 [default = 1];
inline bool AudioCapturingConfig::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AudioCapturingConfig::has_channels() const {
  return _internal_has_channels();
}
inline void AudioCapturingConfig::clear_channels() {
  _impl_.channels_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AudioCapturingConfig::_internal_channels() const {
  return _impl_.channels_;
}
inline int32_t AudioCapturingConfig::channels() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.channels)
  return _internal_channels();
}
inline void AudioCapturingConfig::_internal_set_channels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channels_ = value;
}
inline void AudioCapturingConfig::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.channels)
}

// optional int32 sample_rate = 2;
inline bool AudioCapturingConfig::_internal_has_sample_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AudioCapturingConfig::has_sample_rate() const {
  return _internal_has_sample_rate();
}
inline void AudioCapturingConfig::clear_sample_rate() {
  _impl_.sample_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t AudioCapturingConfig::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline int32_t AudioCapturingConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.sample_rate)
  return _internal_sample_rate();
}
inline void AudioCapturingConfig::_internal_set_sample_rate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sample_rate_ = value;
}
inline void AudioCapturingConfig::set_sample_rate(int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.sample_rate)
}

// optional int32 bits_per_sample = 3;
inline bool AudioCapturingConfig::_internal_has_bits_per_sample() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AudioCapturingConfig::has_bits_per_sample() const {
  return _internal_has_bits_per_sample();
}
inline void AudioCapturingConfig::clear_bits_per_sample() {
  _impl_.bits_per_sample_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t AudioCapturingConfig::_internal_bits_per_sample() const {
  return _impl_.bits_per_sample_;
}
inline int32_t AudioCapturingConfig::bits_per_sample() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
  return _internal_bits_per_sample();
}
inline void AudioCapturingConfig::_internal_set_bits_per_sample(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bits_per_sample_ = value;
}
inline void AudioCapturingConfig::set_bits_per_sample(int32_t value) {
  _internal_set_bits_per_sample(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.AudioCapturingConfig.bits_per_sample)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIConfig

// optional string docker_image = 1;
inline bool HMIConfig::_internal_has_docker_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMIConfig::has_docker_image() const {
  return _internal_has_docker_image();
}
inline void HMIConfig::clear_docker_image() {
  _impl_.docker_image_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HMIConfig::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.docker_image)
  return _internal_docker_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMIConfig::set_docker_image(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.docker_image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.docker_image)
}
inline std::string* HMIConfig::mutable_docker_image() {
  std::string* _s = _internal_mutable_docker_image();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.docker_image)
  return _s;
}
inline const std::string& HMIConfig::_internal_docker_image() const {
  return _impl_.docker_image_.Get();
}
inline void HMIConfig::_internal_set_docker_image(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.docker_image_.Set(value, GetArenaForAllocation());
}
inline std::string* HMIConfig::_internal_mutable_docker_image() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.docker_image_.Mutable(GetArenaForAllocation());
}
inline std::string* HMIConfig::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.docker_image)
  if (!_internal_has_docker_image()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.docker_image_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.docker_image_.IsDefault()) {
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMIConfig::set_allocated_docker_image(std::string* docker_image) {
  if (docker_image != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.docker_image_.SetAllocated(docker_image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.docker_image_.IsDefault()) {
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.docker_image)
}

// map<string, .apollo.dreamview.Component> modules = 2;
inline int HMIConfig::_internal_modules_size() const {
  return _impl_.modules_.size();
}
inline int HMIConfig::modules_size() const {
  return _internal_modules_size();
}
inline void HMIConfig::clear_modules() {
  _impl_.modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::_internal_modules() const {
  return _impl_.modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::_internal_mutable_modules() {
  return _impl_.modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modules)
  return _internal_mutable_modules();
}

// map<string, .apollo.dreamview.Component> hardware = 3;
inline int HMIConfig::_internal_hardware_size() const {
  return _impl_.hardware_.size();
}
inline int HMIConfig::hardware_size() const {
  return _internal_hardware_size();
}
inline void HMIConfig::clear_hardware() {
  _impl_.hardware_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::_internal_hardware() const {
  return _impl_.hardware_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::hardware() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.hardware)
  return _internal_hardware();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::_internal_mutable_hardware() {
  return _impl_.hardware_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.hardware)
  return _internal_mutable_hardware();
}

// map<string, .apollo.dreamview.Component> tools = 4;
inline int HMIConfig::_internal_tools_size() const {
  return _impl_.tools_.size();
}
inline int HMIConfig::tools_size() const {
  return _internal_tools_size();
}
inline void HMIConfig::clear_tools() {
  _impl_.tools_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::_internal_tools() const {
  return _impl_.tools_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >&
HMIConfig::tools() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.tools)
  return _internal_tools();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::_internal_mutable_tools() {
  return _impl_.tools_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Component >*
HMIConfig::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.tools)
  return _internal_mutable_tools();
}

// map<string, string> available_maps = 5;
inline int HMIConfig::_internal_available_maps_size() const {
  return _impl_.available_maps_.size();
}
inline int HMIConfig::available_maps_size() const {
  return _internal_available_maps_size();
}
inline void HMIConfig::clear_available_maps() {
  _impl_.available_maps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::_internal_available_maps() const {
  return _impl_.available_maps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::available_maps() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_maps)
  return _internal_available_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::_internal_mutable_available_maps() {
  return _impl_.available_maps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::mutable_available_maps() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_maps)
  return _internal_mutable_available_maps();
}

// map<string, string> available_vehicles = 6;
inline int HMIConfig::_internal_available_vehicles_size() const {
  return _impl_.available_vehicles_.size();
}
inline int HMIConfig::available_vehicles_size() const {
  return _internal_available_vehicles_size();
}
inline void HMIConfig::clear_available_vehicles() {
  _impl_.available_vehicles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::_internal_available_vehicles() const {
  return _impl_.available_vehicles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::available_vehicles() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.available_vehicles)
  return _internal_available_vehicles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::_internal_mutable_available_vehicles() {
  return _impl_.available_vehicles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::mutable_available_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.available_vehicles)
  return _internal_mutable_available_vehicles();
}

// map<string, .apollo.dreamview.Mode> modes = 7;
inline int HMIConfig::_internal_modes_size() const {
  return _impl_.modes_.size();
}
inline int HMIConfig::modes_size() const {
  return _internal_modes_size();
}
inline void HMIConfig::clear_modes() {
  _impl_.modes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >&
HMIConfig::_internal_modes() const {
  return _impl_.modes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modes)
  return _internal_modes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >*
HMIConfig::_internal_mutable_modes() {
  return _impl_.modes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Mode >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modes)
  return _internal_mutable_modes();
}

// optional int32 utm_zone_id = 8;
inline bool HMIConfig::_internal_has_utm_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMIConfig::has_utm_zone_id() const {
  return _internal_has_utm_zone_id();
}
inline void HMIConfig::clear_utm_zone_id() {
  _impl_.utm_zone_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t HMIConfig::_internal_utm_zone_id() const {
  return _impl_.utm_zone_id_;
}
inline int32_t HMIConfig::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.utm_zone_id)
  return _internal_utm_zone_id();
}
inline void HMIConfig::_internal_set_utm_zone_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.utm_zone_id_ = value;
}
inline void HMIConfig::set_utm_zone_id(int32_t value) {
  _internal_set_utm_zone_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.utm_zone_id)
}

// optional .apollo.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
inline bool HMIConfig::_internal_has_audio_capturing_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_capturing_conf_ != nullptr);
  return value;
}
inline bool HMIConfig::has_audio_capturing_conf() const {
  return _internal_has_audio_capturing_conf();
}
inline void HMIConfig::clear_audio_capturing_conf() {
  if (_impl_.audio_capturing_conf_ != nullptr) _impl_.audio_capturing_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::AudioCapturingConfig& HMIConfig::_internal_audio_capturing_conf() const {
  const ::apollo::dreamview::AudioCapturingConfig* p = _impl_.audio_capturing_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::AudioCapturingConfig&>(
      ::apollo::dreamview::_AudioCapturingConfig_default_instance_);
}
inline const ::apollo::dreamview::AudioCapturingConfig& HMIConfig::audio_capturing_conf() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return _internal_audio_capturing_conf();
}
inline void HMIConfig::unsafe_arena_set_allocated_audio_capturing_conf(
    ::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audio_capturing_conf_);
  }
  _impl_.audio_capturing_conf_ = audio_capturing_conf;
  if (audio_capturing_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.HMIConfig.audio_capturing_conf)
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::release_audio_capturing_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::AudioCapturingConfig* temp = _impl_.audio_capturing_conf_;
  _impl_.audio_capturing_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::unsafe_arena_release_audio_capturing_conf() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIConfig.audio_capturing_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::AudioCapturingConfig* temp = _impl_.audio_capturing_conf_;
  _impl_.audio_capturing_conf_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::_internal_mutable_audio_capturing_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.audio_capturing_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::AudioCapturingConfig>(GetArenaForAllocation());
    _impl_.audio_capturing_conf_ = p;
  }
  return _impl_.audio_capturing_conf_;
}
inline ::apollo::dreamview::AudioCapturingConfig* HMIConfig::mutable_audio_capturing_conf() {
  ::apollo::dreamview::AudioCapturingConfig* _msg = _internal_mutable_audio_capturing_conf();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIConfig.audio_capturing_conf)
  return _msg;
}
inline void HMIConfig::set_allocated_audio_capturing_conf(::apollo::dreamview::AudioCapturingConfig* audio_capturing_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.audio_capturing_conf_;
  }
  if (audio_capturing_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio_capturing_conf);
    if (message_arena != submessage_arena) {
      audio_capturing_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_capturing_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.audio_capturing_conf_ = audio_capturing_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIConfig.audio_capturing_conf)
}

// optional .apollo.dreamview.HMIAction chassis_high_beam_action = 10;
inline bool HMIConfig::_internal_has_chassis_high_beam_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HMIConfig::has_chassis_high_beam_action() const {
  return _internal_has_chassis_high_beam_action();
}
inline void HMIConfig::clear_chassis_high_beam_action() {
  _impl_.chassis_high_beam_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::dreamview::HMIAction HMIConfig::_internal_chassis_high_beam_action() const {
  return static_cast< ::apollo::dreamview::HMIAction >(_impl_.chassis_high_beam_action_);
}
inline ::apollo::dreamview::HMIAction HMIConfig::chassis_high_beam_action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIConfig.chassis_high_beam_action)
  return _internal_chassis_high_beam_action();
}
inline void HMIConfig::_internal_set_chassis_high_beam_action(::apollo::dreamview::HMIAction value) {
  assert(::apollo::dreamview::HMIAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.chassis_high_beam_action_ = value;
}
inline void HMIConfig::set_chassis_high_beam_action(::apollo::dreamview::HMIAction value) {
  _internal_set_chassis_high_beam_action(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIConfig.chassis_high_beam_action)
}

// -------------------------------------------------------------------

// VehicleData_DataFile

// optional string source_path = 1;
inline bool VehicleData_DataFile::_internal_has_source_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleData_DataFile::has_source_path() const {
  return _internal_has_source_path();
}
inline void VehicleData_DataFile::clear_source_path() {
  _impl_.source_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.source_path)
  return _internal_source_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData_DataFile::set_source_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline std::string* VehicleData_DataFile::mutable_source_path() {
  std::string* _s = _internal_mutable_source_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.source_path)
  return _s;
}
inline const std::string& VehicleData_DataFile::_internal_source_path() const {
  return _impl_.source_path_.Get();
}
inline void VehicleData_DataFile::_internal_set_source_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_path_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::_internal_mutable_source_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_path_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.source_path)
  if (!_internal_has_source_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_path_.IsDefault()) {
    _impl_.source_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VehicleData_DataFile::set_allocated_source_path(std::string* source_path) {
  if (source_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_path_.SetAllocated(source_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_path_.IsDefault()) {
    _impl_.source_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
inline bool VehicleData_DataFile::_internal_has_dest_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleData_DataFile::has_dest_path() const {
  return _internal_has_dest_path();
}
inline void VehicleData_DataFile::clear_dest_path() {
  _impl_.dest_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.dest_path)
  return _internal_dest_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData_DataFile::set_dest_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.dest_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline std::string* VehicleData_DataFile::mutable_dest_path() {
  std::string* _s = _internal_mutable_dest_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.dest_path)
  return _s;
}
inline const std::string& VehicleData_DataFile::_internal_dest_path() const {
  return _impl_.dest_path_.Get();
}
inline void VehicleData_DataFile::_internal_set_dest_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dest_path_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::_internal_mutable_dest_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dest_path_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.dest_path)
  if (!_internal_has_dest_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.dest_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dest_path_.IsDefault()) {
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VehicleData_DataFile::set_allocated_dest_path(std::string* dest_path) {
  if (dest_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dest_path_.SetAllocated(dest_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dest_path_.IsDefault()) {
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.dest_path)
}

// -------------------------------------------------------------------

// VehicleData

// repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
inline int VehicleData::_internal_data_files_size() const {
  return _impl_.data_files_.size();
}
inline int VehicleData::data_files_size() const {
  return _internal_data_files_size();
}
inline void VehicleData::clear_data_files() {
  _impl_.data_files_.Clear();
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.data_files)
  return _impl_.data_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VehicleData.data_files)
  return &_impl_.data_files_;
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::_internal_data_files(int index) const {
  return _impl_.data_files_.Get(index);
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.data_files)
  return _internal_data_files(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::_internal_add_data_files() {
  return _impl_.data_files_.Add();
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  ::apollo::dreamview::VehicleData_DataFile* _add = _internal_add_data_files();
  // @@protoc_insertion_point(field_add:apollo.dreamview.VehicleData.data_files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VehicleData.data_files)
  return _impl_.data_files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::HMIAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::HMIAction>() {
  return ::apollo::dreamview::HMIAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
