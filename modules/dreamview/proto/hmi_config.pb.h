// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
namespace apollo {
namespace dreamview {
class HMIConfig;
struct HMIConfigDefaultTypeInternal;
extern HMIConfigDefaultTypeInternal _HMIConfig_default_instance_;
class HMIConfig_MapsEntry_DoNotUse;
struct HMIConfig_MapsEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_MapsEntry_DoNotUseDefaultTypeInternal _HMIConfig_MapsEntry_DoNotUse_default_instance_;
class HMIConfig_ModesEntry_DoNotUse;
struct HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal _HMIConfig_ModesEntry_DoNotUse_default_instance_;
class HMIConfig_VehiclesEntry_DoNotUse;
struct HMIConfig_VehiclesEntry_DoNotUseDefaultTypeInternal;
extern HMIConfig_VehiclesEntry_DoNotUseDefaultTypeInternal _HMIConfig_VehiclesEntry_DoNotUse_default_instance_;
class VehicleData;
struct VehicleDataDefaultTypeInternal;
extern VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
class VehicleData_DataFile;
struct VehicleData_DataFileDefaultTypeInternal;
extern VehicleData_DataFileDefaultTypeInternal _VehicleData_DataFile_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::HMIConfig* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig>(Arena*);
template<> ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::VehicleData* Arena::CreateMaybeMessage<::apollo::dreamview::VehicleData>(Arena*);
template<> ::apollo::dreamview::VehicleData_DataFile* Arena::CreateMaybeMessage<::apollo::dreamview::VehicleData_DataFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum HMIAction : int {
  NONE = 0,
  SETUP_MODE = 1,
  RESET_MODE = 2,
  ENTER_AUTO_MODE = 3,
  DISENGAGE = 4,
  CHANGE_MODE = 5,
  CHANGE_MAP = 6,
  CHANGE_VEHICLE = 7,
  START_MODULE = 8,
  STOP_MODULE = 9
};
bool HMIAction_IsValid(int value);
constexpr HMIAction HMIAction_MIN = NONE;
constexpr HMIAction HMIAction_MAX = STOP_MODULE;
constexpr int HMIAction_ARRAYSIZE = HMIAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HMIAction_descriptor();
template<typename T>
inline const std::string& HMIAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HMIAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HMIAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HMIAction_descriptor(), enum_t_value);
}
inline bool HMIAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HMIAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HMIAction>(
    HMIAction_descriptor(), name, value);
}
// ===================================================================

class HMIConfig_ModesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_ModesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HMIConfig_ModesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_ModesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_ModesEntry_DoNotUse& other);
  static const HMIConfig_ModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_ModesEntry_DoNotUse*>(&_HMIConfig_ModesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.ModesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.ModesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_MapsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_MapsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_MapsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HMIConfig_MapsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_MapsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_MapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_MapsEntry_DoNotUse& other);
  static const HMIConfig_MapsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_MapsEntry_DoNotUse*>(&_HMIConfig_MapsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.MapsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.MapsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig_VehiclesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_VehiclesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIConfig_VehiclesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  HMIConfig_VehiclesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIConfig_VehiclesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIConfig_VehiclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIConfig_VehiclesEntry_DoNotUse& other);
  static const HMIConfig_VehiclesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIConfig_VehiclesEntry_DoNotUse*>(&_HMIConfig_VehiclesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.VehiclesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIConfig.VehiclesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};

// -------------------------------------------------------------------

class HMIConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIConfig) */ {
 public:
  inline HMIConfig() : HMIConfig(nullptr) {}
  ~HMIConfig() override;
  explicit PROTOBUF_CONSTEXPR HMIConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIConfig(const HMIConfig& from);
  HMIConfig(HMIConfig&& from) noexcept
    : HMIConfig() {
    *this = ::std::move(from);
  }

  inline HMIConfig& operator=(const HMIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIConfig& operator=(HMIConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HMIConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIConfig* internal_default_instance() {
    return reinterpret_cast<const HMIConfig*>(
               &_HMIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HMIConfig& a, HMIConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HMIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HMIConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HMIConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HMIConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIConfig";
  }
  protected:
  explicit HMIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 1,
    kMapsFieldNumber = 2,
    kVehiclesFieldNumber = 3,
  };
  // map<string, string> modes = 1;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_modes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_modes();

  // map<string, string> maps = 2;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_maps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_maps();

  // map<string, string> vehicles = 3;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_vehicles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_vehicles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      vehicles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_vehicles();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_ModesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> modes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_MapsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> maps_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIConfig_VehiclesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vehicles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleData_DataFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData.DataFile) */ {
 public:
  inline VehicleData_DataFile() : VehicleData_DataFile(nullptr) {}
  ~VehicleData_DataFile() override;
  explicit PROTOBUF_CONSTEXPR VehicleData_DataFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleData_DataFile(const VehicleData_DataFile& from);
  VehicleData_DataFile(VehicleData_DataFile&& from) noexcept
    : VehicleData_DataFile() {
    *this = ::std::move(from);
  }

  inline VehicleData_DataFile& operator=(const VehicleData_DataFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleData_DataFile& operator=(VehicleData_DataFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleData_DataFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleData_DataFile* internal_default_instance() {
    return reinterpret_cast<const VehicleData_DataFile*>(
               &_VehicleData_DataFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleData_DataFile& a, VehicleData_DataFile& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleData_DataFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleData_DataFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleData_DataFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleData_DataFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleData_DataFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleData_DataFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleData_DataFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VehicleData.DataFile";
  }
  protected:
  explicit VehicleData_DataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePathFieldNumber = 1,
    kDestPathFieldNumber = 2,
  };
  // optional string source_path = 1;
  bool has_source_path() const;
  private:
  bool _internal_has_source_path() const;
  public:
  void clear_source_path();
  const std::string& source_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_path();
  PROTOBUF_NODISCARD std::string* release_source_path();
  void set_allocated_source_path(std::string* source_path);
  private:
  const std::string& _internal_source_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_path(const std::string& value);
  std::string* _internal_mutable_source_path();
  public:

  // optional string dest_path = 2;
  bool has_dest_path() const;
  private:
  bool _internal_has_dest_path() const;
  public:
  void clear_dest_path();
  const std::string& dest_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dest_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dest_path();
  PROTOBUF_NODISCARD std::string* release_dest_path();
  void set_allocated_dest_path(std::string* dest_path);
  private:
  const std::string& _internal_dest_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_path(const std::string& value);
  std::string* _internal_mutable_dest_path();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData.DataFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.VehicleData) */ {
 public:
  inline VehicleData() : VehicleData(nullptr) {}
  ~VehicleData() override;
  explicit PROTOBUF_CONSTEXPR VehicleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleData(const VehicleData& from);
  VehicleData(VehicleData&& from) noexcept
    : VehicleData() {
    *this = ::std::move(from);
  }

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleData& operator=(VehicleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleData* internal_default_instance() {
    return reinterpret_cast<const VehicleData*>(
               &_VehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VehicleData& a, VehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.VehicleData";
  }
  protected:
  explicit VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleData_DataFile DataFile;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFilesFieldNumber = 1,
  };
  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  int data_files_size() const;
  private:
  int _internal_data_files_size() const;
  public:
  void clear_data_files();
  ::apollo::dreamview::VehicleData_DataFile* mutable_data_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
      mutable_data_files();
  private:
  const ::apollo::dreamview::VehicleData_DataFile& _internal_data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* _internal_add_data_files();
  public:
  const ::apollo::dreamview::VehicleData_DataFile& data_files(int index) const;
  ::apollo::dreamview::VehicleData_DataFile* add_data_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
      data_files() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.VehicleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile > data_files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIConfig

// map<string, string> modes = 1;
inline int HMIConfig::_internal_modes_size() const {
  return _impl_.modes_.size();
}
inline int HMIConfig::modes_size() const {
  return _internal_modes_size();
}
inline void HMIConfig::clear_modes() {
  _impl_.modes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::_internal_modes() const {
  return _impl_.modes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.modes)
  return _internal_modes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::_internal_mutable_modes() {
  return _impl_.modes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.modes)
  return _internal_mutable_modes();
}

// map<string, string> maps = 2;
inline int HMIConfig::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int HMIConfig::maps_size() const {
  return _internal_maps_size();
}
inline void HMIConfig::clear_maps() {
  _impl_.maps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::_internal_maps() const {
  return _impl_.maps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::maps() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.maps)
  return _internal_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::_internal_mutable_maps() {
  return _impl_.maps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.maps)
  return _internal_mutable_maps();
}

// map<string, string> vehicles = 3;
inline int HMIConfig::_internal_vehicles_size() const {
  return _impl_.vehicles_.size();
}
inline int HMIConfig::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void HMIConfig::clear_vehicles() {
  _impl_.vehicles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::_internal_vehicles() const {
  return _impl_.vehicles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HMIConfig::vehicles() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIConfig.vehicles)
  return _internal_vehicles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::_internal_mutable_vehicles() {
  return _impl_.vehicles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HMIConfig::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIConfig.vehicles)
  return _internal_mutable_vehicles();
}

// -------------------------------------------------------------------

// VehicleData_DataFile

// optional string source_path = 1;
inline bool VehicleData_DataFile::_internal_has_source_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleData_DataFile::has_source_path() const {
  return _internal_has_source_path();
}
inline void VehicleData_DataFile::clear_source_path() {
  _impl_.source_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.source_path)
  return _internal_source_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData_DataFile::set_source_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.source_path)
}
inline std::string* VehicleData_DataFile::mutable_source_path() {
  std::string* _s = _internal_mutable_source_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.source_path)
  return _s;
}
inline const std::string& VehicleData_DataFile::_internal_source_path() const {
  return _impl_.source_path_.Get();
}
inline void VehicleData_DataFile::_internal_set_source_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_path_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::_internal_mutable_source_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_path_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.source_path)
  if (!_internal_has_source_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_path_.IsDefault()) {
    _impl_.source_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VehicleData_DataFile::set_allocated_source_path(std::string* source_path) {
  if (source_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_path_.SetAllocated(source_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_path_.IsDefault()) {
    _impl_.source_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
inline bool VehicleData_DataFile::_internal_has_dest_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleData_DataFile::has_dest_path() const {
  return _internal_has_dest_path();
}
inline void VehicleData_DataFile::clear_dest_path() {
  _impl_.dest_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.DataFile.dest_path)
  return _internal_dest_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData_DataFile::set_dest_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.dest_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.VehicleData.DataFile.dest_path)
}
inline std::string* VehicleData_DataFile::mutable_dest_path() {
  std::string* _s = _internal_mutable_dest_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.DataFile.dest_path)
  return _s;
}
inline const std::string& VehicleData_DataFile::_internal_dest_path() const {
  return _impl_.dest_path_.Get();
}
inline void VehicleData_DataFile::_internal_set_dest_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dest_path_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::_internal_mutable_dest_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.dest_path_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.VehicleData.DataFile.dest_path)
  if (!_internal_has_dest_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.dest_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dest_path_.IsDefault()) {
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VehicleData_DataFile::set_allocated_dest_path(std::string* dest_path) {
  if (dest_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dest_path_.SetAllocated(dest_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dest_path_.IsDefault()) {
    _impl_.dest_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.VehicleData.DataFile.dest_path)
}

// -------------------------------------------------------------------

// VehicleData

// repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
inline int VehicleData::_internal_data_files_size() const {
  return _impl_.data_files_.size();
}
inline int VehicleData::data_files_size() const {
  return _internal_data_files_size();
}
inline void VehicleData::clear_data_files() {
  _impl_.data_files_.Clear();
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.VehicleData.data_files)
  return _impl_.data_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.VehicleData.data_files)
  return &_impl_.data_files_;
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::_internal_data_files(int index) const {
  return _impl_.data_files_.Get(index);
}
inline const ::apollo::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.VehicleData.data_files)
  return _internal_data_files(index);
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::_internal_add_data_files() {
  return _impl_.data_files_.Add();
}
inline ::apollo::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  ::apollo::dreamview::VehicleData_DataFile* _add = _internal_add_data_files();
  // @@protoc_insertion_point(field_add:apollo.dreamview.VehicleData.data_files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.VehicleData.data_files)
  return _impl_.data_files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::HMIAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::HMIAction>() {
  return ::apollo::dreamview::HMIAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
