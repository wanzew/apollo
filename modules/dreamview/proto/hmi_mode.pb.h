// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
namespace apollo {
namespace dreamview {
class ChannelMonitorConfig;
struct ChannelMonitorConfigDefaultTypeInternal;
extern ChannelMonitorConfigDefaultTypeInternal _ChannelMonitorConfig_default_instance_;
class CyberModule;
struct CyberModuleDefaultTypeInternal;
extern CyberModuleDefaultTypeInternal _CyberModule_default_instance_;
class HMIMode;
struct HMIModeDefaultTypeInternal;
extern HMIModeDefaultTypeInternal _HMIMode_default_instance_;
class HMIMode_CyberModulesEntry_DoNotUse;
struct HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
class HMIMode_ModulesEntry_DoNotUse;
struct HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_ModulesEntry_DoNotUse_default_instance_;
class HMIMode_MonitoredComponentsEntry_DoNotUse;
struct HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
class HMIMode_OtherComponentsEntry_DoNotUse;
struct HMIMode_OtherComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_OtherComponentsEntry_DoNotUseDefaultTypeInternal _HMIMode_OtherComponentsEntry_DoNotUse_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class ModuleMonitorConfig;
struct ModuleMonitorConfigDefaultTypeInternal;
extern ModuleMonitorConfigDefaultTypeInternal _ModuleMonitorConfig_default_instance_;
class MonitoredComponent;
struct MonitoredComponentDefaultTypeInternal;
extern MonitoredComponentDefaultTypeInternal _MonitoredComponent_default_instance_;
class ProcessMonitorConfig;
struct ProcessMonitorConfigDefaultTypeInternal;
extern ProcessMonitorConfigDefaultTypeInternal _ProcessMonitorConfig_default_instance_;
class ResourceMonitorConfig;
struct ResourceMonitorConfigDefaultTypeInternal;
extern ResourceMonitorConfigDefaultTypeInternal _ResourceMonitorConfig_default_instance_;
class ResourceMonitorConfig_CPUUsage;
struct ResourceMonitorConfig_CPUUsageDefaultTypeInternal;
extern ResourceMonitorConfig_CPUUsageDefaultTypeInternal _ResourceMonitorConfig_CPUUsage_default_instance_;
class ResourceMonitorConfig_DiskLoad;
struct ResourceMonitorConfig_DiskLoadDefaultTypeInternal;
extern ResourceMonitorConfig_DiskLoadDefaultTypeInternal _ResourceMonitorConfig_DiskLoad_default_instance_;
class ResourceMonitorConfig_DiskSpace;
struct ResourceMonitorConfig_DiskSpaceDefaultTypeInternal;
extern ResourceMonitorConfig_DiskSpaceDefaultTypeInternal _ResourceMonitorConfig_DiskSpace_default_instance_;
class ResourceMonitorConfig_MemoryUsage;
struct ResourceMonitorConfig_MemoryUsageDefaultTypeInternal;
extern ResourceMonitorConfig_MemoryUsageDefaultTypeInternal _ResourceMonitorConfig_MemoryUsage_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::ChannelMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(Arena*);
template<> ::apollo::dreamview::CyberModule* Arena::CreateMaybeMessage<::apollo::dreamview::CyberModule>(Arena*);
template<> ::apollo::dreamview::HMIMode* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode>(Arena*);
template<> ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Module* Arena::CreateMaybeMessage<::apollo::dreamview::Module>(Arena*);
template<> ::apollo::dreamview::ModuleMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ModuleMonitorConfig>(Arena*);
template<> ::apollo::dreamview::MonitoredComponent* Arena::CreateMaybeMessage<::apollo::dreamview::MonitoredComponent>(Arena*);
template<> ::apollo::dreamview::ProcessMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_CPUUsage>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_DiskLoad>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_DiskSpace>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_MemoryUsage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class ProcessMonitorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ProcessMonitorConfig) */ {
 public:
  inline ProcessMonitorConfig() : ProcessMonitorConfig(nullptr) {}
  ~ProcessMonitorConfig() override;
  explicit PROTOBUF_CONSTEXPR ProcessMonitorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessMonitorConfig(const ProcessMonitorConfig& from);
  ProcessMonitorConfig(ProcessMonitorConfig&& from) noexcept
    : ProcessMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ProcessMonitorConfig& operator=(const ProcessMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMonitorConfig& operator=(ProcessMonitorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessMonitorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ProcessMonitorConfig*>(
               &_ProcessMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessMonitorConfig& a, ProcessMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMonitorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessMonitorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessMonitorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessMonitorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessMonitorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMonitorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ProcessMonitorConfig";
  }
  protected:
  explicit ProcessMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandKeywordsFieldNumber = 1,
  };
  // repeated string command_keywords = 1;
  int command_keywords_size() const;
  private:
  int _internal_command_keywords_size() const;
  public:
  void clear_command_keywords();
  const std::string& command_keywords(int index) const;
  std::string* mutable_command_keywords(int index);
  void set_command_keywords(int index, const std::string& value);
  void set_command_keywords(int index, std::string&& value);
  void set_command_keywords(int index, const char* value);
  void set_command_keywords(int index, const char* value, size_t size);
  std::string* add_command_keywords();
  void add_command_keywords(const std::string& value);
  void add_command_keywords(std::string&& value);
  void add_command_keywords(const char* value);
  void add_command_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_keywords();
  private:
  const std::string& _internal_command_keywords(int index) const;
  std::string* _internal_add_command_keywords();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ProcessMonitorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_keywords_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ModuleMonitorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ModuleMonitorConfig) */ {
 public:
  inline ModuleMonitorConfig() : ModuleMonitorConfig(nullptr) {}
  ~ModuleMonitorConfig() override;
  explicit PROTOBUF_CONSTEXPR ModuleMonitorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleMonitorConfig(const ModuleMonitorConfig& from);
  ModuleMonitorConfig(ModuleMonitorConfig&& from) noexcept
    : ModuleMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ModuleMonitorConfig& operator=(const ModuleMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleMonitorConfig& operator=(ModuleMonitorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleMonitorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ModuleMonitorConfig*>(
               &_ModuleMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleMonitorConfig& a, ModuleMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleMonitorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleMonitorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleMonitorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleMonitorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleMonitorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMonitorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ModuleMonitorConfig";
  }
  protected:
  explicit ModuleMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
  };
  // repeated string node_name = 1;
  int node_name_size() const;
  private:
  int _internal_node_name_size() const;
  public:
  void clear_node_name();
  const std::string& node_name(int index) const;
  std::string* mutable_node_name(int index);
  void set_node_name(int index, const std::string& value);
  void set_node_name(int index, std::string&& value);
  void set_node_name(int index, const char* value);
  void set_node_name(int index, const char* value, size_t size);
  std::string* add_node_name();
  void add_node_name(const std::string& value);
  void add_node_name(std::string&& value);
  void add_node_name(const char* value);
  void add_node_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& node_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_node_name();
  private:
  const std::string& _internal_node_name(int index) const;
  std::string* _internal_add_node_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ModuleMonitorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> node_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ChannelMonitorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ChannelMonitorConfig) */ {
 public:
  inline ChannelMonitorConfig() : ChannelMonitorConfig(nullptr) {}
  ~ChannelMonitorConfig() override;
  explicit PROTOBUF_CONSTEXPR ChannelMonitorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelMonitorConfig(const ChannelMonitorConfig& from);
  ChannelMonitorConfig(ChannelMonitorConfig&& from) noexcept
    : ChannelMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ChannelMonitorConfig& operator=(const ChannelMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMonitorConfig& operator=(ChannelMonitorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelMonitorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitorConfig*>(
               &_ChannelMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelMonitorConfig& a, ChannelMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMonitorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelMonitorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelMonitorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelMonitorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelMonitorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMonitorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ChannelMonitorConfig";
  }
  protected:
  explicit ChannelMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMandatoryFieldsFieldNumber = 3,
    kNameFieldNumber = 1,
    kMinFrequencyAllowedFieldNumber = 4,
    kDelayFatalFieldNumber = 2,
    kMaxFrequencyAllowedFieldNumber = 5,
  };
  // repeated string mandatory_fields = 3;
  int mandatory_fields_size() const;
  private:
  int _internal_mandatory_fields_size() const;
  public:
  void clear_mandatory_fields();
  const std::string& mandatory_fields(int index) const;
  std::string* mutable_mandatory_fields(int index);
  void set_mandatory_fields(int index, const std::string& value);
  void set_mandatory_fields(int index, std::string&& value);
  void set_mandatory_fields(int index, const char* value);
  void set_mandatory_fields(int index, const char* value, size_t size);
  std::string* add_mandatory_fields();
  void add_mandatory_fields(const std::string& value);
  void add_mandatory_fields(std::string&& value);
  void add_mandatory_fields(const char* value);
  void add_mandatory_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mandatory_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mandatory_fields();
  private:
  const std::string& _internal_mandatory_fields(int index) const;
  std::string* _internal_add_mandatory_fields();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double min_frequency_allowed = 4 [default = 0];
  bool has_min_frequency_allowed() const;
  private:
  bool _internal_has_min_frequency_allowed() const;
  public:
  void clear_min_frequency_allowed();
  double min_frequency_allowed() const;
  void set_min_frequency_allowed(double value);
  private:
  double _internal_min_frequency_allowed() const;
  void _internal_set_min_frequency_allowed(double value);
  public:

  // optional double delay_fatal = 2 [default = 3];
  bool has_delay_fatal() const;
  private:
  bool _internal_has_delay_fatal() const;
  public:
  void clear_delay_fatal();
  double delay_fatal() const;
  void set_delay_fatal(double value);
  private:
  double _internal_delay_fatal() const;
  void _internal_set_delay_fatal(double value);
  public:

  // optional double max_frequency_allowed = 5 [default = 1000];
  bool has_max_frequency_allowed() const;
  private:
  bool _internal_has_max_frequency_allowed() const;
  public:
  void clear_max_frequency_allowed();
  double max_frequency_allowed() const;
  void set_max_frequency_allowed(double value);
  private:
  double _internal_max_frequency_allowed() const;
  void _internal_set_max_frequency_allowed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ChannelMonitorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mandatory_fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double min_frequency_allowed_;
    double delay_fatal_;
    double max_frequency_allowed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_DiskSpace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.DiskSpace) */ {
 public:
  inline ResourceMonitorConfig_DiskSpace() : ResourceMonitorConfig_DiskSpace(nullptr) {}
  ~ResourceMonitorConfig_DiskSpace() override;
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_DiskSpace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceMonitorConfig_DiskSpace(const ResourceMonitorConfig_DiskSpace& from);
  ResourceMonitorConfig_DiskSpace(ResourceMonitorConfig_DiskSpace&& from) noexcept
    : ResourceMonitorConfig_DiskSpace() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_DiskSpace& operator=(const ResourceMonitorConfig_DiskSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig_DiskSpace& operator=(ResourceMonitorConfig_DiskSpace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig_DiskSpace& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig_DiskSpace* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_DiskSpace*>(
               &_ResourceMonitorConfig_DiskSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResourceMonitorConfig_DiskSpace& a, ResourceMonitorConfig_DiskSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig_DiskSpace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig_DiskSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig_DiskSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskSpace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig_DiskSpace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig_DiskSpace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_DiskSpace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig.DiskSpace";
  }
  protected:
  explicit ResourceMonitorConfig_DiskSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kInsufficientSpaceWarningFieldNumber = 2,
    kInsufficientSpaceErrorFieldNumber = 3,
  };
  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional int32 insufficient_space_warning = 2;
  bool has_insufficient_space_warning() const;
  private:
  bool _internal_has_insufficient_space_warning() const;
  public:
  void clear_insufficient_space_warning();
  int32_t insufficient_space_warning() const;
  void set_insufficient_space_warning(int32_t value);
  private:
  int32_t _internal_insufficient_space_warning() const;
  void _internal_set_insufficient_space_warning(int32_t value);
  public:

  // optional int32 insufficient_space_error = 3;
  bool has_insufficient_space_error() const;
  private:
  bool _internal_has_insufficient_space_error() const;
  public:
  void clear_insufficient_space_error();
  int32_t insufficient_space_error() const;
  void set_insufficient_space_error(int32_t value);
  private:
  int32_t _internal_insufficient_space_error() const;
  void _internal_set_insufficient_space_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int32_t insufficient_space_warning_;
    int32_t insufficient_space_error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_CPUUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.CPUUsage) */ {
 public:
  inline ResourceMonitorConfig_CPUUsage() : ResourceMonitorConfig_CPUUsage(nullptr) {}
  ~ResourceMonitorConfig_CPUUsage() override;
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_CPUUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceMonitorConfig_CPUUsage(const ResourceMonitorConfig_CPUUsage& from);
  ResourceMonitorConfig_CPUUsage(ResourceMonitorConfig_CPUUsage&& from) noexcept
    : ResourceMonitorConfig_CPUUsage() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_CPUUsage& operator=(const ResourceMonitorConfig_CPUUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig_CPUUsage& operator=(ResourceMonitorConfig_CPUUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig_CPUUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig_CPUUsage* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_CPUUsage*>(
               &_ResourceMonitorConfig_CPUUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceMonitorConfig_CPUUsage& a, ResourceMonitorConfig_CPUUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig_CPUUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig_CPUUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig_CPUUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_CPUUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig_CPUUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig_CPUUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_CPUUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig.CPUUsage";
  }
  protected:
  explicit ResourceMonitorConfig_CPUUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessDagPathFieldNumber = 3,
    kHighCpuUsageWarningFieldNumber = 1,
    kHighCpuUsageErrorFieldNumber = 2,
  };
  // optional string process_dag_path = 3;
  bool has_process_dag_path() const;
  private:
  bool _internal_has_process_dag_path() const;
  public:
  void clear_process_dag_path();
  const std::string& process_dag_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_dag_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_dag_path();
  PROTOBUF_NODISCARD std::string* release_process_dag_path();
  void set_allocated_process_dag_path(std::string* process_dag_path);
  private:
  const std::string& _internal_process_dag_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_dag_path(const std::string& value);
  std::string* _internal_mutable_process_dag_path();
  public:

  // optional float high_cpu_usage_warning = 1;
  bool has_high_cpu_usage_warning() const;
  private:
  bool _internal_has_high_cpu_usage_warning() const;
  public:
  void clear_high_cpu_usage_warning();
  float high_cpu_usage_warning() const;
  void set_high_cpu_usage_warning(float value);
  private:
  float _internal_high_cpu_usage_warning() const;
  void _internal_set_high_cpu_usage_warning(float value);
  public:

  // optional float high_cpu_usage_error = 2;
  bool has_high_cpu_usage_error() const;
  private:
  bool _internal_has_high_cpu_usage_error() const;
  public:
  void clear_high_cpu_usage_error();
  float high_cpu_usage_error() const;
  void set_high_cpu_usage_error(float value);
  private:
  float _internal_high_cpu_usage_error() const;
  void _internal_set_high_cpu_usage_error(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_dag_path_;
    float high_cpu_usage_warning_;
    float high_cpu_usage_error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_MemoryUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.MemoryUsage) */ {
 public:
  inline ResourceMonitorConfig_MemoryUsage() : ResourceMonitorConfig_MemoryUsage(nullptr) {}
  ~ResourceMonitorConfig_MemoryUsage() override;
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_MemoryUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceMonitorConfig_MemoryUsage(const ResourceMonitorConfig_MemoryUsage& from);
  ResourceMonitorConfig_MemoryUsage(ResourceMonitorConfig_MemoryUsage&& from) noexcept
    : ResourceMonitorConfig_MemoryUsage() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_MemoryUsage& operator=(const ResourceMonitorConfig_MemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig_MemoryUsage& operator=(ResourceMonitorConfig_MemoryUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig_MemoryUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig_MemoryUsage* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_MemoryUsage*>(
               &_ResourceMonitorConfig_MemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceMonitorConfig_MemoryUsage& a, ResourceMonitorConfig_MemoryUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig_MemoryUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig_MemoryUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig_MemoryUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_MemoryUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig_MemoryUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig_MemoryUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_MemoryUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig.MemoryUsage";
  }
  protected:
  explicit ResourceMonitorConfig_MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessDagPathFieldNumber = 3,
    kHighMemoryUsageWarningFieldNumber = 1,
    kHighMemoryUsageErrorFieldNumber = 2,
  };
  // optional string process_dag_path = 3;
  bool has_process_dag_path() const;
  private:
  bool _internal_has_process_dag_path() const;
  public:
  void clear_process_dag_path();
  const std::string& process_dag_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_dag_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_dag_path();
  PROTOBUF_NODISCARD std::string* release_process_dag_path();
  void set_allocated_process_dag_path(std::string* process_dag_path);
  private:
  const std::string& _internal_process_dag_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_dag_path(const std::string& value);
  std::string* _internal_mutable_process_dag_path();
  public:

  // optional int32 high_memory_usage_warning = 1;
  bool has_high_memory_usage_warning() const;
  private:
  bool _internal_has_high_memory_usage_warning() const;
  public:
  void clear_high_memory_usage_warning();
  int32_t high_memory_usage_warning() const;
  void set_high_memory_usage_warning(int32_t value);
  private:
  int32_t _internal_high_memory_usage_warning() const;
  void _internal_set_high_memory_usage_warning(int32_t value);
  public:

  // optional int32 high_memory_usage_error = 2;
  bool has_high_memory_usage_error() const;
  private:
  bool _internal_has_high_memory_usage_error() const;
  public:
  void clear_high_memory_usage_error();
  int32_t high_memory_usage_error() const;
  void set_high_memory_usage_error(int32_t value);
  private:
  int32_t _internal_high_memory_usage_error() const;
  void _internal_set_high_memory_usage_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_dag_path_;
    int32_t high_memory_usage_warning_;
    int32_t high_memory_usage_error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_DiskLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.DiskLoad) */ {
 public:
  inline ResourceMonitorConfig_DiskLoad() : ResourceMonitorConfig_DiskLoad(nullptr) {}
  ~ResourceMonitorConfig_DiskLoad() override;
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_DiskLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceMonitorConfig_DiskLoad(const ResourceMonitorConfig_DiskLoad& from);
  ResourceMonitorConfig_DiskLoad(ResourceMonitorConfig_DiskLoad&& from) noexcept
    : ResourceMonitorConfig_DiskLoad() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_DiskLoad& operator=(const ResourceMonitorConfig_DiskLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig_DiskLoad& operator=(ResourceMonitorConfig_DiskLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig_DiskLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig_DiskLoad* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_DiskLoad*>(
               &_ResourceMonitorConfig_DiskLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResourceMonitorConfig_DiskLoad& a, ResourceMonitorConfig_DiskLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig_DiskLoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig_DiskLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig_DiskLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskLoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig_DiskLoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig_DiskLoad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_DiskLoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig.DiskLoad";
  }
  protected:
  explicit ResourceMonitorConfig_DiskLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kHighDiskLoadWarningFieldNumber = 1,
    kHighDiskLoadErrorFieldNumber = 2,
  };
  // optional string device_name = 3;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional int32 high_disk_load_warning = 1;
  bool has_high_disk_load_warning() const;
  private:
  bool _internal_has_high_disk_load_warning() const;
  public:
  void clear_high_disk_load_warning();
  int32_t high_disk_load_warning() const;
  void set_high_disk_load_warning(int32_t value);
  private:
  int32_t _internal_high_disk_load_warning() const;
  void _internal_set_high_disk_load_warning(int32_t value);
  public:

  // optional int32 high_disk_load_error = 2;
  bool has_high_disk_load_error() const;
  private:
  bool _internal_has_high_disk_load_error() const;
  public:
  void clear_high_disk_load_error();
  int32_t high_disk_load_error() const;
  void set_high_disk_load_error(int32_t value);
  private:
  int32_t _internal_high_disk_load_error() const;
  void _internal_set_high_disk_load_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    int32_t high_disk_load_warning_;
    int32_t high_disk_load_error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig) */ {
 public:
  inline ResourceMonitorConfig() : ResourceMonitorConfig(nullptr) {}
  ~ResourceMonitorConfig() override;
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceMonitorConfig(const ResourceMonitorConfig& from);
  ResourceMonitorConfig(ResourceMonitorConfig&& from) noexcept
    : ResourceMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig& operator=(const ResourceMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig& operator=(ResourceMonitorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig*>(
               &_ResourceMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResourceMonitorConfig& a, ResourceMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceMonitorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig";
  }
  protected:
  explicit ResourceMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResourceMonitorConfig_DiskSpace DiskSpace;
  typedef ResourceMonitorConfig_CPUUsage CPUUsage;
  typedef ResourceMonitorConfig_MemoryUsage MemoryUsage;
  typedef ResourceMonitorConfig_DiskLoad DiskLoad;

  // accessors -------------------------------------------------------

  enum : int {
    kDiskSpacesFieldNumber = 1,
    kCpuUsagesFieldNumber = 2,
    kMemoryUsagesFieldNumber = 3,
    kDiskLoadUsagesFieldNumber = 4,
  };
  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  int disk_spaces_size() const;
  private:
  int _internal_disk_spaces_size() const;
  public:
  void clear_disk_spaces();
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* mutable_disk_spaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
      mutable_disk_spaces();
  private:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& _internal_disk_spaces(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* _internal_add_disk_spaces();
  public:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& disk_spaces(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* add_disk_spaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
      disk_spaces() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
  int cpu_usages_size() const;
  private:
  int _internal_cpu_usages_size() const;
  public:
  void clear_cpu_usages();
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* mutable_cpu_usages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >*
      mutable_cpu_usages();
  private:
  const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& _internal_cpu_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* _internal_add_cpu_usages();
  public:
  const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& cpu_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* add_cpu_usages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >&
      cpu_usages() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
  int memory_usages_size() const;
  private:
  int _internal_memory_usages_size() const;
  public:
  void clear_memory_usages();
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* mutable_memory_usages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >*
      mutable_memory_usages();
  private:
  const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& _internal_memory_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* _internal_add_memory_usages();
  public:
  const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& memory_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* add_memory_usages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >&
      memory_usages() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
  int disk_load_usages_size() const;
  private:
  int _internal_disk_load_usages_size() const;
  public:
  void clear_disk_load_usages();
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* mutable_disk_load_usages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >*
      mutable_disk_load_usages();
  private:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& _internal_disk_load_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* _internal_add_disk_load_usages();
  public:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& disk_load_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* add_disk_load_usages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >&
      disk_load_usages() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace > disk_spaces_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage > cpu_usages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage > memory_usages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad > disk_load_usages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class MonitoredComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.MonitoredComponent) */ {
 public:
  inline MonitoredComponent() : MonitoredComponent(nullptr) {}
  ~MonitoredComponent() override;
  explicit PROTOBUF_CONSTEXPR MonitoredComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitoredComponent(const MonitoredComponent& from);
  MonitoredComponent(MonitoredComponent&& from) noexcept
    : MonitoredComponent() {
    *this = ::std::move(from);
  }

  inline MonitoredComponent& operator=(const MonitoredComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoredComponent& operator=(MonitoredComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoredComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoredComponent* internal_default_instance() {
    return reinterpret_cast<const MonitoredComponent*>(
               &_MonitoredComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MonitoredComponent& a, MonitoredComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoredComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoredComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoredComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoredComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitoredComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitoredComponent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.MonitoredComponent";
  }
  protected:
  explicit MonitoredComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
    kChannelFieldNumber = 2,
    kResourceFieldNumber = 3,
    kModuleFieldNumber = 5,
    kRequiredForSafetyFieldNumber = 4,
  };
  // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::apollo::dreamview::ProcessMonitorConfig& process() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::ProcessMonitorConfig* release_process();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process();
  void set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process);
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process() const;
  ::apollo::dreamview::ProcessMonitorConfig* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::apollo::dreamview::ProcessMonitorConfig* process);
  ::apollo::dreamview::ProcessMonitorConfig* unsafe_arena_release_process();

  // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::apollo::dreamview::ChannelMonitorConfig& channel() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::ChannelMonitorConfig* release_channel();
  ::apollo::dreamview::ChannelMonitorConfig* mutable_channel();
  void set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel);
  private:
  const ::apollo::dreamview::ChannelMonitorConfig& _internal_channel() const;
  ::apollo::dreamview::ChannelMonitorConfig* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::apollo::dreamview::ChannelMonitorConfig* channel);
  ::apollo::dreamview::ChannelMonitorConfig* unsafe_arena_release_channel();

  // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::apollo::dreamview::ResourceMonitorConfig& resource() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::ResourceMonitorConfig* release_resource();
  ::apollo::dreamview::ResourceMonitorConfig* mutable_resource();
  void set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource);
  private:
  const ::apollo::dreamview::ResourceMonitorConfig& _internal_resource() const;
  ::apollo::dreamview::ResourceMonitorConfig* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::apollo::dreamview::ResourceMonitorConfig* resource);
  ::apollo::dreamview::ResourceMonitorConfig* unsafe_arena_release_resource();

  // optional .apollo.dreamview.ModuleMonitorConfig module = 5;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const ::apollo::dreamview::ModuleMonitorConfig& module() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::ModuleMonitorConfig* release_module();
  ::apollo::dreamview::ModuleMonitorConfig* mutable_module();
  void set_allocated_module(::apollo::dreamview::ModuleMonitorConfig* module);
  private:
  const ::apollo::dreamview::ModuleMonitorConfig& _internal_module() const;
  ::apollo::dreamview::ModuleMonitorConfig* _internal_mutable_module();
  public:
  void unsafe_arena_set_allocated_module(
      ::apollo::dreamview::ModuleMonitorConfig* module);
  ::apollo::dreamview::ModuleMonitorConfig* unsafe_arena_release_module();

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.MonitoredComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::dreamview::ProcessMonitorConfig* process_;
    ::apollo::dreamview::ChannelMonitorConfig* channel_;
    ::apollo::dreamview::ResourceMonitorConfig* resource_;
    ::apollo::dreamview::ModuleMonitorConfig* module_;
    bool required_for_safety_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Module& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartCommandFieldNumber = 1,
    kStopCommandFieldNumber = 2,
    kProcessMonitorConfigFieldNumber = 3,
    kRequiredForSafetyFieldNumber = 4,
  };
  // optional string start_command = 1;
  bool has_start_command() const;
  private:
  bool _internal_has_start_command() const;
  public:
  void clear_start_command();
  const std::string& start_command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_command();
  PROTOBUF_NODISCARD std::string* release_start_command();
  void set_allocated_start_command(std::string* start_command);
  private:
  const std::string& _internal_start_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_command(const std::string& value);
  std::string* _internal_mutable_start_command();
  public:

  // optional string stop_command = 2;
  bool has_stop_command() const;
  private:
  bool _internal_has_stop_command() const;
  public:
  void clear_stop_command();
  const std::string& stop_command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_command();
  PROTOBUF_NODISCARD std::string* release_stop_command();
  void set_allocated_stop_command(std::string* stop_command);
  private:
  const std::string& _internal_stop_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_command(const std::string& value);
  std::string* _internal_mutable_stop_command();
  public:

  // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
  bool has_process_monitor_config() const;
  private:
  bool _internal_has_process_monitor_config() const;
  public:
  void clear_process_monitor_config();
  const ::apollo::dreamview::ProcessMonitorConfig& process_monitor_config() const;
  PROTOBUF_NODISCARD ::apollo::dreamview::ProcessMonitorConfig* release_process_monitor_config();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process_monitor_config();
  void set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config);
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process_monitor_config() const;
  ::apollo::dreamview::ProcessMonitorConfig* _internal_mutable_process_monitor_config();
  public:
  void unsafe_arena_set_allocated_process_monitor_config(
      ::apollo::dreamview::ProcessMonitorConfig* process_monitor_config);
  ::apollo::dreamview::ProcessMonitorConfig* unsafe_arena_release_process_monitor_config();

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_command_;
    ::apollo::dreamview::ProcessMonitorConfig* process_monitor_config_;
    bool required_for_safety_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class CyberModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CyberModule) */ {
 public:
  inline CyberModule() : CyberModule(nullptr) {}
  ~CyberModule() override;
  explicit PROTOBUF_CONSTEXPR CyberModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CyberModule(const CyberModule& from);
  CyberModule(CyberModule&& from) noexcept
    : CyberModule() {
    *this = ::std::move(from);
  }

  inline CyberModule& operator=(const CyberModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CyberModule& operator=(CyberModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CyberModule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CyberModule* internal_default_instance() {
    return reinterpret_cast<const CyberModule*>(
               &_CyberModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CyberModule& a, CyberModule& b) {
    a.Swap(&b);
  }
  inline void Swap(CyberModule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CyberModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CyberModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CyberModule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CyberModule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CyberModule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CyberModule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.CyberModule";
  }
  protected:
  explicit CyberModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDagFilesFieldNumber = 1,
    kProcessGroupFieldNumber = 3,
    kRequiredForSafetyFieldNumber = 2,
  };
  // repeated string dag_files = 1;
  int dag_files_size() const;
  private:
  int _internal_dag_files_size() const;
  public:
  void clear_dag_files();
  const std::string& dag_files(int index) const;
  std::string* mutable_dag_files(int index);
  void set_dag_files(int index, const std::string& value);
  void set_dag_files(int index, std::string&& value);
  void set_dag_files(int index, const char* value);
  void set_dag_files(int index, const char* value, size_t size);
  std::string* add_dag_files();
  void add_dag_files(const std::string& value);
  void add_dag_files(std::string&& value);
  void add_dag_files(const char* value);
  void add_dag_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dag_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dag_files();
  private:
  const std::string& _internal_dag_files(int index) const;
  std::string* _internal_add_dag_files();
  public:

  // optional string process_group = 3;
  bool has_process_group() const;
  private:
  bool _internal_has_process_group() const;
  public:
  void clear_process_group();
  const std::string& process_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_group();
  PROTOBUF_NODISCARD std::string* release_process_group();
  void set_allocated_process_group(std::string* process_group);
  private:
  const std::string& _internal_process_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_group(const std::string& value);
  std::string* _internal_mutable_process_group();
  public:

  // optional bool required_for_safety = 2 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CyberModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dag_files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_group_;
    bool required_for_safety_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class HMIMode_CyberModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::CyberModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::CyberModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIMode_CyberModulesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIMode_CyberModulesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIMode_CyberModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_CyberModulesEntry_DoNotUse& other);
  static const HMIMode_CyberModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_CyberModulesEntry_DoNotUse*>(&_HMIMode_CyberModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.CyberModulesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};

// -------------------------------------------------------------------

class HMIMode_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIMode_ModulesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIMode_ModulesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIMode_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_ModulesEntry_DoNotUse& other);
  static const HMIMode_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_ModulesEntry_DoNotUse*>(&_HMIMode_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.ModulesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};

// -------------------------------------------------------------------

class HMIMode_MonitoredComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::MonitoredComponent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::MonitoredComponent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIMode_MonitoredComponentsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIMode_MonitoredComponentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIMode_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_MonitoredComponentsEntry_DoNotUse& other);
  static const HMIMode_MonitoredComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_MonitoredComponentsEntry_DoNotUse*>(&_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.MonitoredComponentsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};

// -------------------------------------------------------------------

class HMIMode_OtherComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_OtherComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::ProcessMonitorConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_OtherComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::ProcessMonitorConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HMIMode_OtherComponentsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR HMIMode_OtherComponentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HMIMode_OtherComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_OtherComponentsEntry_DoNotUse& other);
  static const HMIMode_OtherComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_OtherComponentsEntry_DoNotUse*>(&_HMIMode_OtherComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.OtherComponentsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};

// -------------------------------------------------------------------

class HMIMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIMode) */ {
 public:
  inline HMIMode() : HMIMode(nullptr) {}
  ~HMIMode() override;
  explicit PROTOBUF_CONSTEXPR HMIMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIMode(const HMIMode& from);
  HMIMode(HMIMode&& from) noexcept
    : HMIMode() {
    *this = ::std::move(from);
  }

  inline HMIMode& operator=(const HMIMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIMode& operator=(HMIMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HMIMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIMode* internal_default_instance() {
    return reinterpret_cast<const HMIMode*>(
               &_HMIMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HMIMode& a, HMIMode& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HMIMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HMIMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HMIMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HMIMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIMode";
  }
  protected:
  explicit HMIMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCyberModulesFieldNumber = 1,
    kModulesFieldNumber = 2,
    kMonitoredComponentsFieldNumber = 3,
    kOtherComponentsFieldNumber = 4,
  };
  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  int cyber_modules_size() const;
  private:
  int _internal_cyber_modules_size() const;
  public:
  void clear_cyber_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
      _internal_cyber_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
      _internal_mutable_cyber_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
      cyber_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
      mutable_cyber_modules();

  // map<string, .apollo.dreamview.Module> modules = 2;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
      mutable_modules();

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  int monitored_components_size() const;
  private:
  int _internal_monitored_components_size() const;
  public:
  void clear_monitored_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
      _internal_monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
      _internal_mutable_monitored_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
      monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
      mutable_monitored_components();

  // map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
  int other_components_size() const;
  private:
  int _internal_other_components_size() const;
  public:
  void clear_other_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >&
      _internal_other_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >*
      _internal_mutable_other_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >&
      other_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >*
      mutable_other_components();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIMode_CyberModulesEntry_DoNotUse,
        std::string, ::apollo::dreamview::CyberModule,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> cyber_modules_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIMode_ModulesEntry_DoNotUse,
        std::string, ::apollo::dreamview::Module,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modules_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIMode_MonitoredComponentsEntry_DoNotUse,
        std::string, ::apollo::dreamview::MonitoredComponent,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> monitored_components_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        HMIMode_OtherComponentsEntry_DoNotUse,
        std::string, ::apollo::dreamview::ProcessMonitorConfig,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> other_components_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessMonitorConfig

// repeated string command_keywords = 1;
inline int ProcessMonitorConfig::_internal_command_keywords_size() const {
  return _impl_.command_keywords_.size();
}
inline int ProcessMonitorConfig::command_keywords_size() const {
  return _internal_command_keywords_size();
}
inline void ProcessMonitorConfig::clear_command_keywords() {
  _impl_.command_keywords_.Clear();
}
inline std::string* ProcessMonitorConfig::add_command_keywords() {
  std::string* _s = _internal_add_command_keywords();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _s;
}
inline const std::string& ProcessMonitorConfig::_internal_command_keywords(int index) const {
  return _impl_.command_keywords_.Get(index);
}
inline const std::string& ProcessMonitorConfig::command_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _internal_command_keywords(index);
}
inline std::string* ProcessMonitorConfig::mutable_command_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _impl_.command_keywords_.Mutable(index);
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const std::string& value) {
  _impl_.command_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::set_command_keywords(int index, std::string&& value) {
  _impl_.command_keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.command_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value, size_t size) {
  _impl_.command_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline std::string* ProcessMonitorConfig::_internal_add_command_keywords() {
  return _impl_.command_keywords_.Add();
}
inline void ProcessMonitorConfig::add_command_keywords(const std::string& value) {
  _impl_.command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(std::string&& value) {
  _impl_.command_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(const char* value, size_t size) {
  _impl_.command_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessMonitorConfig::command_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _impl_.command_keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessMonitorConfig::mutable_command_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return &_impl_.command_keywords_;
}

// -------------------------------------------------------------------

// ModuleMonitorConfig

// repeated string node_name = 1;
inline int ModuleMonitorConfig::_internal_node_name_size() const {
  return _impl_.node_name_.size();
}
inline int ModuleMonitorConfig::node_name_size() const {
  return _internal_node_name_size();
}
inline void ModuleMonitorConfig::clear_node_name() {
  _impl_.node_name_.Clear();
}
inline std::string* ModuleMonitorConfig::add_node_name() {
  std::string* _s = _internal_add_node_name();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ModuleMonitorConfig.node_name)
  return _s;
}
inline const std::string& ModuleMonitorConfig::_internal_node_name(int index) const {
  return _impl_.node_name_.Get(index);
}
inline const std::string& ModuleMonitorConfig::node_name(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ModuleMonitorConfig.node_name)
  return _internal_node_name(index);
}
inline std::string* ModuleMonitorConfig::mutable_node_name(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ModuleMonitorConfig.node_name)
  return _impl_.node_name_.Mutable(index);
}
inline void ModuleMonitorConfig::set_node_name(int index, const std::string& value) {
  _impl_.node_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::set_node_name(int index, std::string&& value) {
  _impl_.node_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::set_node_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.node_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::set_node_name(int index, const char* value, size_t size) {
  _impl_.node_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline std::string* ModuleMonitorConfig::_internal_add_node_name() {
  return _impl_.node_name_.Add();
}
inline void ModuleMonitorConfig::add_node_name(const std::string& value) {
  _impl_.node_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::add_node_name(std::string&& value) {
  _impl_.node_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::add_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.node_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::add_node_name(const char* value, size_t size) {
  _impl_.node_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleMonitorConfig::node_name() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ModuleMonitorConfig.node_name)
  return _impl_.node_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModuleMonitorConfig::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ModuleMonitorConfig.node_name)
  return &_impl_.node_name_;
}

// -------------------------------------------------------------------

// ChannelMonitorConfig

// optional string name = 1;
inline bool ChannelMonitorConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_name() const {
  return _internal_has_name();
}
inline void ChannelMonitorConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelMonitorConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelMonitorConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.name)
}
inline std::string* ChannelMonitorConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelMonitorConfig.name)
  return _s;
}
inline const std::string& ChannelMonitorConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChannelMonitorConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelMonitorConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelMonitorConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelMonitorConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelMonitorConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelMonitorConfig.name)
}

// optional double delay_fatal = 2 [default = 3];
inline bool ChannelMonitorConfig::_internal_has_delay_fatal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_delay_fatal() const {
  return _internal_has_delay_fatal();
}
inline void ChannelMonitorConfig::clear_delay_fatal() {
  _impl_.delay_fatal_ = 3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ChannelMonitorConfig::_internal_delay_fatal() const {
  return _impl_.delay_fatal_;
}
inline double ChannelMonitorConfig::delay_fatal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
  return _internal_delay_fatal();
}
inline void ChannelMonitorConfig::_internal_set_delay_fatal(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delay_fatal_ = value;
}
inline void ChannelMonitorConfig::set_delay_fatal(double value) {
  _internal_set_delay_fatal(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
}

// repeated string mandatory_fields = 3;
inline int ChannelMonitorConfig::_internal_mandatory_fields_size() const {
  return _impl_.mandatory_fields_.size();
}
inline int ChannelMonitorConfig::mandatory_fields_size() const {
  return _internal_mandatory_fields_size();
}
inline void ChannelMonitorConfig::clear_mandatory_fields() {
  _impl_.mandatory_fields_.Clear();
}
inline std::string* ChannelMonitorConfig::add_mandatory_fields() {
  std::string* _s = _internal_add_mandatory_fields();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return _s;
}
inline const std::string& ChannelMonitorConfig::_internal_mandatory_fields(int index) const {
  return _impl_.mandatory_fields_.Get(index);
}
inline const std::string& ChannelMonitorConfig::mandatory_fields(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return _internal_mandatory_fields(index);
}
inline std::string* ChannelMonitorConfig::mutable_mandatory_fields(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return _impl_.mandatory_fields_.Mutable(index);
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const std::string& value) {
  _impl_.mandatory_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, std::string&& value) {
  _impl_.mandatory_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.mandatory_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const char* value, size_t size) {
  _impl_.mandatory_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline std::string* ChannelMonitorConfig::_internal_add_mandatory_fields() {
  return _impl_.mandatory_fields_.Add();
}
inline void ChannelMonitorConfig::add_mandatory_fields(const std::string& value) {
  _impl_.mandatory_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::add_mandatory_fields(std::string&& value) {
  _impl_.mandatory_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::add_mandatory_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.mandatory_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::add_mandatory_fields(const char* value, size_t size) {
  _impl_.mandatory_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChannelMonitorConfig::mandatory_fields() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return _impl_.mandatory_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChannelMonitorConfig::mutable_mandatory_fields() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return &_impl_.mandatory_fields_;
}

// optional double min_frequency_allowed = 4 [default = 0];
inline bool ChannelMonitorConfig::_internal_has_min_frequency_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_min_frequency_allowed() const {
  return _internal_has_min_frequency_allowed();
}
inline void ChannelMonitorConfig::clear_min_frequency_allowed() {
  _impl_.min_frequency_allowed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ChannelMonitorConfig::_internal_min_frequency_allowed() const {
  return _impl_.min_frequency_allowed_;
}
inline double ChannelMonitorConfig::min_frequency_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.min_frequency_allowed)
  return _internal_min_frequency_allowed();
}
inline void ChannelMonitorConfig::_internal_set_min_frequency_allowed(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_frequency_allowed_ = value;
}
inline void ChannelMonitorConfig::set_min_frequency_allowed(double value) {
  _internal_set_min_frequency_allowed(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.min_frequency_allowed)
}

// optional double max_frequency_allowed = 5 [default = 1000];
inline bool ChannelMonitorConfig::_internal_has_max_frequency_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_max_frequency_allowed() const {
  return _internal_has_max_frequency_allowed();
}
inline void ChannelMonitorConfig::clear_max_frequency_allowed() {
  _impl_.max_frequency_allowed_ = 1000;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ChannelMonitorConfig::_internal_max_frequency_allowed() const {
  return _impl_.max_frequency_allowed_;
}
inline double ChannelMonitorConfig::max_frequency_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.max_frequency_allowed)
  return _internal_max_frequency_allowed();
}
inline void ChannelMonitorConfig::_internal_set_max_frequency_allowed(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_frequency_allowed_ = value;
}
inline void ChannelMonitorConfig::set_max_frequency_allowed(double value) {
  _internal_set_max_frequency_allowed(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.max_frequency_allowed)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_DiskSpace

// optional string path = 1;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_path() const {
  return _internal_has_path();
}
inline void ResourceMonitorConfig_DiskSpace::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMonitorConfig_DiskSpace::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceMonitorConfig_DiskSpace::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline std::string* ResourceMonitorConfig_DiskSpace::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return _s;
}
inline const std::string& ResourceMonitorConfig_DiskSpace::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_DiskSpace::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_DiskSpace::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceMonitorConfig_DiskSpace::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}

// optional int32 insufficient_space_warning = 2;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_insufficient_space_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_warning() const {
  return _internal_has_insufficient_space_warning();
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_warning() {
  _impl_.insufficient_space_warning_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ResourceMonitorConfig_DiskSpace::_internal_insufficient_space_warning() const {
  return _impl_.insufficient_space_warning_;
}
inline int32_t ResourceMonitorConfig_DiskSpace::insufficient_space_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
  return _internal_insufficient_space_warning();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_insufficient_space_warning(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.insufficient_space_warning_ = value;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_warning(int32_t value) {
  _internal_set_insufficient_space_warning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
}

// optional int32 insufficient_space_error = 3;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_insufficient_space_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_error() const {
  return _internal_has_insufficient_space_error();
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_error() {
  _impl_.insufficient_space_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ResourceMonitorConfig_DiskSpace::_internal_insufficient_space_error() const {
  return _impl_.insufficient_space_error_;
}
inline int32_t ResourceMonitorConfig_DiskSpace::insufficient_space_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
  return _internal_insufficient_space_error();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_insufficient_space_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.insufficient_space_error_ = value;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_error(int32_t value) {
  _internal_set_insufficient_space_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_CPUUsage

// optional float high_cpu_usage_warning = 1;
inline bool ResourceMonitorConfig_CPUUsage::_internal_has_high_cpu_usage_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_CPUUsage::has_high_cpu_usage_warning() const {
  return _internal_has_high_cpu_usage_warning();
}
inline void ResourceMonitorConfig_CPUUsage::clear_high_cpu_usage_warning() {
  _impl_.high_cpu_usage_warning_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ResourceMonitorConfig_CPUUsage::_internal_high_cpu_usage_warning() const {
  return _impl_.high_cpu_usage_warning_;
}
inline float ResourceMonitorConfig_CPUUsage::high_cpu_usage_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_warning)
  return _internal_high_cpu_usage_warning();
}
inline void ResourceMonitorConfig_CPUUsage::_internal_set_high_cpu_usage_warning(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.high_cpu_usage_warning_ = value;
}
inline void ResourceMonitorConfig_CPUUsage::set_high_cpu_usage_warning(float value) {
  _internal_set_high_cpu_usage_warning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_warning)
}

// optional float high_cpu_usage_error = 2;
inline bool ResourceMonitorConfig_CPUUsage::_internal_has_high_cpu_usage_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_CPUUsage::has_high_cpu_usage_error() const {
  return _internal_has_high_cpu_usage_error();
}
inline void ResourceMonitorConfig_CPUUsage::clear_high_cpu_usage_error() {
  _impl_.high_cpu_usage_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ResourceMonitorConfig_CPUUsage::_internal_high_cpu_usage_error() const {
  return _impl_.high_cpu_usage_error_;
}
inline float ResourceMonitorConfig_CPUUsage::high_cpu_usage_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_error)
  return _internal_high_cpu_usage_error();
}
inline void ResourceMonitorConfig_CPUUsage::_internal_set_high_cpu_usage_error(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.high_cpu_usage_error_ = value;
}
inline void ResourceMonitorConfig_CPUUsage::set_high_cpu_usage_error(float value) {
  _internal_set_high_cpu_usage_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_error)
}

// optional string process_dag_path = 3;
inline bool ResourceMonitorConfig_CPUUsage::_internal_has_process_dag_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_CPUUsage::has_process_dag_path() const {
  return _internal_has_process_dag_path();
}
inline void ResourceMonitorConfig_CPUUsage::clear_process_dag_path() {
  _impl_.process_dag_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMonitorConfig_CPUUsage::process_dag_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  return _internal_process_dag_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceMonitorConfig_CPUUsage::set_process_dag_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.process_dag_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}
inline std::string* ResourceMonitorConfig_CPUUsage::mutable_process_dag_path() {
  std::string* _s = _internal_mutable_process_dag_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  return _s;
}
inline const std::string& ResourceMonitorConfig_CPUUsage::_internal_process_dag_path() const {
  return _impl_.process_dag_path_.Get();
}
inline void ResourceMonitorConfig_CPUUsage::_internal_set_process_dag_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.process_dag_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_CPUUsage::_internal_mutable_process_dag_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.process_dag_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_CPUUsage::release_process_dag_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  if (!_internal_has_process_dag_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.process_dag_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_dag_path_.IsDefault()) {
    _impl_.process_dag_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceMonitorConfig_CPUUsage::set_allocated_process_dag_path(std::string* process_dag_path) {
  if (process_dag_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.process_dag_path_.SetAllocated(process_dag_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_dag_path_.IsDefault()) {
    _impl_.process_dag_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_MemoryUsage

// optional int32 high_memory_usage_warning = 1;
inline bool ResourceMonitorConfig_MemoryUsage::_internal_has_high_memory_usage_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_MemoryUsage::has_high_memory_usage_warning() const {
  return _internal_has_high_memory_usage_warning();
}
inline void ResourceMonitorConfig_MemoryUsage::clear_high_memory_usage_warning() {
  _impl_.high_memory_usage_warning_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ResourceMonitorConfig_MemoryUsage::_internal_high_memory_usage_warning() const {
  return _impl_.high_memory_usage_warning_;
}
inline int32_t ResourceMonitorConfig_MemoryUsage::high_memory_usage_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_warning)
  return _internal_high_memory_usage_warning();
}
inline void ResourceMonitorConfig_MemoryUsage::_internal_set_high_memory_usage_warning(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.high_memory_usage_warning_ = value;
}
inline void ResourceMonitorConfig_MemoryUsage::set_high_memory_usage_warning(int32_t value) {
  _internal_set_high_memory_usage_warning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_warning)
}

// optional int32 high_memory_usage_error = 2;
inline bool ResourceMonitorConfig_MemoryUsage::_internal_has_high_memory_usage_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_MemoryUsage::has_high_memory_usage_error() const {
  return _internal_has_high_memory_usage_error();
}
inline void ResourceMonitorConfig_MemoryUsage::clear_high_memory_usage_error() {
  _impl_.high_memory_usage_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ResourceMonitorConfig_MemoryUsage::_internal_high_memory_usage_error() const {
  return _impl_.high_memory_usage_error_;
}
inline int32_t ResourceMonitorConfig_MemoryUsage::high_memory_usage_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_error)
  return _internal_high_memory_usage_error();
}
inline void ResourceMonitorConfig_MemoryUsage::_internal_set_high_memory_usage_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.high_memory_usage_error_ = value;
}
inline void ResourceMonitorConfig_MemoryUsage::set_high_memory_usage_error(int32_t value) {
  _internal_set_high_memory_usage_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_error)
}

// optional string process_dag_path = 3;
inline bool ResourceMonitorConfig_MemoryUsage::_internal_has_process_dag_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_MemoryUsage::has_process_dag_path() const {
  return _internal_has_process_dag_path();
}
inline void ResourceMonitorConfig_MemoryUsage::clear_process_dag_path() {
  _impl_.process_dag_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMonitorConfig_MemoryUsage::process_dag_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  return _internal_process_dag_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceMonitorConfig_MemoryUsage::set_process_dag_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.process_dag_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}
inline std::string* ResourceMonitorConfig_MemoryUsage::mutable_process_dag_path() {
  std::string* _s = _internal_mutable_process_dag_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  return _s;
}
inline const std::string& ResourceMonitorConfig_MemoryUsage::_internal_process_dag_path() const {
  return _impl_.process_dag_path_.Get();
}
inline void ResourceMonitorConfig_MemoryUsage::_internal_set_process_dag_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.process_dag_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_MemoryUsage::_internal_mutable_process_dag_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.process_dag_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_MemoryUsage::release_process_dag_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  if (!_internal_has_process_dag_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.process_dag_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_dag_path_.IsDefault()) {
    _impl_.process_dag_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceMonitorConfig_MemoryUsage::set_allocated_process_dag_path(std::string* process_dag_path) {
  if (process_dag_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.process_dag_path_.SetAllocated(process_dag_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_dag_path_.IsDefault()) {
    _impl_.process_dag_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_DiskLoad

// optional int32 high_disk_load_warning = 1;
inline bool ResourceMonitorConfig_DiskLoad::_internal_has_high_disk_load_warning() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskLoad::has_high_disk_load_warning() const {
  return _internal_has_high_disk_load_warning();
}
inline void ResourceMonitorConfig_DiskLoad::clear_high_disk_load_warning() {
  _impl_.high_disk_load_warning_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ResourceMonitorConfig_DiskLoad::_internal_high_disk_load_warning() const {
  return _impl_.high_disk_load_warning_;
}
inline int32_t ResourceMonitorConfig_DiskLoad::high_disk_load_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_warning)
  return _internal_high_disk_load_warning();
}
inline void ResourceMonitorConfig_DiskLoad::_internal_set_high_disk_load_warning(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.high_disk_load_warning_ = value;
}
inline void ResourceMonitorConfig_DiskLoad::set_high_disk_load_warning(int32_t value) {
  _internal_set_high_disk_load_warning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_warning)
}

// optional int32 high_disk_load_error = 2;
inline bool ResourceMonitorConfig_DiskLoad::_internal_has_high_disk_load_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskLoad::has_high_disk_load_error() const {
  return _internal_has_high_disk_load_error();
}
inline void ResourceMonitorConfig_DiskLoad::clear_high_disk_load_error() {
  _impl_.high_disk_load_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ResourceMonitorConfig_DiskLoad::_internal_high_disk_load_error() const {
  return _impl_.high_disk_load_error_;
}
inline int32_t ResourceMonitorConfig_DiskLoad::high_disk_load_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_error)
  return _internal_high_disk_load_error();
}
inline void ResourceMonitorConfig_DiskLoad::_internal_set_high_disk_load_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.high_disk_load_error_ = value;
}
inline void ResourceMonitorConfig_DiskLoad::set_high_disk_load_error(int32_t value) {
  _internal_set_high_disk_load_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_error)
}

// optional string device_name = 3;
inline bool ResourceMonitorConfig_DiskLoad::_internal_has_device_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskLoad::has_device_name() const {
  return _internal_has_device_name();
}
inline void ResourceMonitorConfig_DiskLoad::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMonitorConfig_DiskLoad::device_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceMonitorConfig_DiskLoad::set_device_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}
inline std::string* ResourceMonitorConfig_DiskLoad::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  return _s;
}
inline const std::string& ResourceMonitorConfig_DiskLoad::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void ResourceMonitorConfig_DiskLoad::_internal_set_device_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_DiskLoad::_internal_mutable_device_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceMonitorConfig_DiskLoad::release_device_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.device_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceMonitorConfig_DiskLoad::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig

// repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
inline int ResourceMonitorConfig::_internal_disk_spaces_size() const {
  return _impl_.disk_spaces_.size();
}
inline int ResourceMonitorConfig::disk_spaces_size() const {
  return _internal_disk_spaces_size();
}
inline void ResourceMonitorConfig::clear_disk_spaces() {
  _impl_.disk_spaces_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::mutable_disk_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _impl_.disk_spaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
ResourceMonitorConfig::mutable_disk_spaces() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return &_impl_.disk_spaces_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig::_internal_disk_spaces(int index) const {
  return _impl_.disk_spaces_.Get(index);
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig::disk_spaces(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _internal_disk_spaces(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::_internal_add_disk_spaces() {
  return _impl_.disk_spaces_.Add();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::add_disk_spaces() {
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* _add = _internal_add_disk_spaces();
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
ResourceMonitorConfig::disk_spaces() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _impl_.disk_spaces_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
inline int ResourceMonitorConfig::_internal_cpu_usages_size() const {
  return _impl_.cpu_usages_.size();
}
inline int ResourceMonitorConfig::cpu_usages_size() const {
  return _internal_cpu_usages_size();
}
inline void ResourceMonitorConfig::clear_cpu_usages() {
  _impl_.cpu_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* ResourceMonitorConfig::mutable_cpu_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return _impl_.cpu_usages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >*
ResourceMonitorConfig::mutable_cpu_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return &_impl_.cpu_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& ResourceMonitorConfig::_internal_cpu_usages(int index) const {
  return _impl_.cpu_usages_.Get(index);
}
inline const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& ResourceMonitorConfig::cpu_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return _internal_cpu_usages(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* ResourceMonitorConfig::_internal_add_cpu_usages() {
  return _impl_.cpu_usages_.Add();
}
inline ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* ResourceMonitorConfig::add_cpu_usages() {
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* _add = _internal_add_cpu_usages();
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >&
ResourceMonitorConfig::cpu_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return _impl_.cpu_usages_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
inline int ResourceMonitorConfig::_internal_memory_usages_size() const {
  return _impl_.memory_usages_.size();
}
inline int ResourceMonitorConfig::memory_usages_size() const {
  return _internal_memory_usages_size();
}
inline void ResourceMonitorConfig::clear_memory_usages() {
  _impl_.memory_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* ResourceMonitorConfig::mutable_memory_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return _impl_.memory_usages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >*
ResourceMonitorConfig::mutable_memory_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return &_impl_.memory_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& ResourceMonitorConfig::_internal_memory_usages(int index) const {
  return _impl_.memory_usages_.Get(index);
}
inline const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& ResourceMonitorConfig::memory_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return _internal_memory_usages(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* ResourceMonitorConfig::_internal_add_memory_usages() {
  return _impl_.memory_usages_.Add();
}
inline ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* ResourceMonitorConfig::add_memory_usages() {
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* _add = _internal_add_memory_usages();
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >&
ResourceMonitorConfig::memory_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return _impl_.memory_usages_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
inline int ResourceMonitorConfig::_internal_disk_load_usages_size() const {
  return _impl_.disk_load_usages_.size();
}
inline int ResourceMonitorConfig::disk_load_usages_size() const {
  return _internal_disk_load_usages_size();
}
inline void ResourceMonitorConfig::clear_disk_load_usages() {
  _impl_.disk_load_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* ResourceMonitorConfig::mutable_disk_load_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return _impl_.disk_load_usages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >*
ResourceMonitorConfig::mutable_disk_load_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return &_impl_.disk_load_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& ResourceMonitorConfig::_internal_disk_load_usages(int index) const {
  return _impl_.disk_load_usages_.Get(index);
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& ResourceMonitorConfig::disk_load_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return _internal_disk_load_usages(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* ResourceMonitorConfig::_internal_add_disk_load_usages() {
  return _impl_.disk_load_usages_.Add();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* ResourceMonitorConfig::add_disk_load_usages() {
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* _add = _internal_add_disk_load_usages();
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >&
ResourceMonitorConfig::disk_load_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return _impl_.disk_load_usages_;
}

// -------------------------------------------------------------------

// MonitoredComponent

// optional .apollo.dreamview.ProcessMonitorConfig process = 1;
inline bool MonitoredComponent::_internal_has_process() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_process() const {
  return _internal_has_process();
}
inline void MonitoredComponent::clear_process() {
  if (_impl_.process_ != nullptr) _impl_.process_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::_internal_process() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = _impl_.process_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig&>(
      ::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::process() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.process)
  return _internal_process();
}
inline void MonitoredComponent::unsafe_arena_set_allocated_process(
    ::apollo::dreamview::ProcessMonitorConfig* process) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_);
  }
  _impl_.process_ = process;
  if (process) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.MonitoredComponent.process)
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::release_process() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = _impl_.process_;
  _impl_.process_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.process)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = _impl_.process_;
  _impl_.process_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::_internal_mutable_process() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.process_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaForAllocation());
    _impl_.process_ = p;
  }
  return _impl_.process_;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::mutable_process() {
  ::apollo::dreamview::ProcessMonitorConfig* _msg = _internal_mutable_process();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.process)
  return _msg;
}
inline void MonitoredComponent::set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.process_ = process;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.process)
}

// optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
inline bool MonitoredComponent::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.channel_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_channel() const {
  return _internal_has_channel();
}
inline void MonitoredComponent::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::_internal_channel() const {
  const ::apollo::dreamview::ChannelMonitorConfig* p = _impl_.channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::ChannelMonitorConfig&>(
      ::apollo::dreamview::_ChannelMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::channel() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.channel)
  return _internal_channel();
}
inline void MonitoredComponent::unsafe_arena_set_allocated_channel(
    ::apollo::dreamview::ChannelMonitorConfig* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channel_);
  }
  _impl_.channel_ = channel;
  if (channel) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.MonitoredComponent.channel)
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::release_channel() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::ChannelMonitorConfig* temp = _impl_.channel_;
  _impl_.channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.channel)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::ChannelMonitorConfig* temp = _impl_.channel_;
  _impl_.channel_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::_internal_mutable_channel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(GetArenaForAllocation());
    _impl_.channel_ = p;
  }
  return _impl_.channel_;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::mutable_channel() {
  ::apollo::dreamview::ChannelMonitorConfig* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.channel)
  return _msg;
}
inline void MonitoredComponent::set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.channel)
}

// optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
inline bool MonitoredComponent::_internal_has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_resource() const {
  return _internal_has_resource();
}
inline void MonitoredComponent::clear_resource() {
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::_internal_resource() const {
  const ::apollo::dreamview::ResourceMonitorConfig* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::ResourceMonitorConfig&>(
      ::apollo::dreamview::_ResourceMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::resource() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.resource)
  return _internal_resource();
}
inline void MonitoredComponent::unsafe_arena_set_allocated_resource(
    ::apollo::dreamview::ResourceMonitorConfig* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.MonitoredComponent.resource)
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ResourceMonitorConfig* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.resource)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ResourceMonitorConfig* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::mutable_resource() {
  ::apollo::dreamview::ResourceMonitorConfig* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.resource)
  return _msg;
}
inline void MonitoredComponent::set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.resource)
}

// optional bool required_for_safety = 4 [default = true];
inline bool MonitoredComponent::_internal_has_required_for_safety() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MonitoredComponent::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void MonitoredComponent::clear_required_for_safety() {
  _impl_.required_for_safety_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool MonitoredComponent::_internal_required_for_safety() const {
  return _impl_.required_for_safety_;
}
inline bool MonitoredComponent::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.required_for_safety)
  return _internal_required_for_safety();
}
inline void MonitoredComponent::_internal_set_required_for_safety(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.required_for_safety_ = value;
}
inline void MonitoredComponent::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.MonitoredComponent.required_for_safety)
}

// optional .apollo.dreamview.ModuleMonitorConfig module = 5;
inline bool MonitoredComponent::_internal_has_module() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.module_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_module() const {
  return _internal_has_module();
}
inline void MonitoredComponent::clear_module() {
  if (_impl_.module_ != nullptr) _impl_.module_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::dreamview::ModuleMonitorConfig& MonitoredComponent::_internal_module() const {
  const ::apollo::dreamview::ModuleMonitorConfig* p = _impl_.module_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::ModuleMonitorConfig&>(
      ::apollo::dreamview::_ModuleMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ModuleMonitorConfig& MonitoredComponent::module() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.module)
  return _internal_module();
}
inline void MonitoredComponent::unsafe_arena_set_allocated_module(
    ::apollo::dreamview::ModuleMonitorConfig* module) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.module_);
  }
  _impl_.module_ = module;
  if (module) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.MonitoredComponent.module)
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::release_module() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::dreamview::ModuleMonitorConfig* temp = _impl_.module_;
  _impl_.module_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::unsafe_arena_release_module() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.module)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::dreamview::ModuleMonitorConfig* temp = _impl_.module_;
  _impl_.module_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::_internal_mutable_module() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.module_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ModuleMonitorConfig>(GetArenaForAllocation());
    _impl_.module_ = p;
  }
  return _impl_.module_;
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::mutable_module() {
  ::apollo::dreamview::ModuleMonitorConfig* _msg = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.module)
  return _msg;
}
inline void MonitoredComponent::set_allocated_module(::apollo::dreamview::ModuleMonitorConfig* module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.module_;
  }
  if (module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(module);
    if (message_arena != submessage_arena) {
      module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.module_ = module;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.module)
}

// -------------------------------------------------------------------

// Module

// optional string start_command = 1;
inline bool Module::_internal_has_start_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Module::has_start_command() const {
  return _internal_has_start_command();
}
inline void Module::clear_start_command() {
  _impl_.start_command_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Module::start_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.start_command)
  return _internal_start_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_start_command(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.start_command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.start_command)
}
inline std::string* Module::mutable_start_command() {
  std::string* _s = _internal_mutable_start_command();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.start_command)
  return _s;
}
inline const std::string& Module::_internal_start_command() const {
  return _impl_.start_command_.Get();
}
inline void Module::_internal_set_start_command(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_command_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_start_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.start_command_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_start_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.start_command)
  if (!_internal_has_start_command()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.start_command_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_command_.IsDefault()) {
    _impl_.start_command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Module::set_allocated_start_command(std::string* start_command) {
  if (start_command != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_command_.SetAllocated(start_command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_command_.IsDefault()) {
    _impl_.start_command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.start_command)
}

// optional string stop_command = 2;
inline bool Module::_internal_has_stop_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Module::has_stop_command() const {
  return _internal_has_stop_command();
}
inline void Module::clear_stop_command() {
  _impl_.stop_command_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Module::stop_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.stop_command)
  return _internal_stop_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_stop_command(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.stop_command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.stop_command)
}
inline std::string* Module::mutable_stop_command() {
  std::string* _s = _internal_mutable_stop_command();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.stop_command)
  return _s;
}
inline const std::string& Module::_internal_stop_command() const {
  return _impl_.stop_command_.Get();
}
inline void Module::_internal_set_stop_command(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stop_command_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_stop_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.stop_command_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_stop_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.stop_command)
  if (!_internal_has_stop_command()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.stop_command_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_command_.IsDefault()) {
    _impl_.stop_command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Module::set_allocated_stop_command(std::string* stop_command) {
  if (stop_command != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stop_command_.SetAllocated(stop_command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_command_.IsDefault()) {
    _impl_.stop_command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.stop_command)
}

// optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
inline bool Module::_internal_has_process_monitor_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_monitor_config_ != nullptr);
  return value;
}
inline bool Module::has_process_monitor_config() const {
  return _internal_has_process_monitor_config();
}
inline void Module::clear_process_monitor_config() {
  if (_impl_.process_monitor_config_ != nullptr) _impl_.process_monitor_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::_internal_process_monitor_config() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = _impl_.process_monitor_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig&>(
      ::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::process_monitor_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.process_monitor_config)
  return _internal_process_monitor_config();
}
inline void Module::unsafe_arena_set_allocated_process_monitor_config(
    ::apollo::dreamview::ProcessMonitorConfig* process_monitor_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_monitor_config_);
  }
  _impl_.process_monitor_config_ = process_monitor_config;
  if (process_monitor_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.Module.process_monitor_config)
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::release_process_monitor_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = _impl_.process_monitor_config_;
  _impl_.process_monitor_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::unsafe_arena_release_process_monitor_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.process_monitor_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = _impl_.process_monitor_config_;
  _impl_.process_monitor_config_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::_internal_mutable_process_monitor_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.process_monitor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaForAllocation());
    _impl_.process_monitor_config_ = p;
  }
  return _impl_.process_monitor_config_;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::mutable_process_monitor_config() {
  ::apollo::dreamview::ProcessMonitorConfig* _msg = _internal_mutable_process_monitor_config();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.process_monitor_config)
  return _msg;
}
inline void Module::set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.process_monitor_config_;
  }
  if (process_monitor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_monitor_config);
    if (message_arena != submessage_arena) {
      process_monitor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_monitor_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.process_monitor_config_ = process_monitor_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.process_monitor_config)
}

// optional bool required_for_safety = 4 [default = true];
inline bool Module::_internal_has_required_for_safety() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Module::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void Module::clear_required_for_safety() {
  _impl_.required_for_safety_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Module::_internal_required_for_safety() const {
  return _impl_.required_for_safety_;
}
inline bool Module::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.required_for_safety)
  return _internal_required_for_safety();
}
inline void Module::_internal_set_required_for_safety(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.required_for_safety_ = value;
}
inline void Module::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.required_for_safety)
}

// -------------------------------------------------------------------

// CyberModule

// repeated string dag_files = 1;
inline int CyberModule::_internal_dag_files_size() const {
  return _impl_.dag_files_.size();
}
inline int CyberModule::dag_files_size() const {
  return _internal_dag_files_size();
}
inline void CyberModule::clear_dag_files() {
  _impl_.dag_files_.Clear();
}
inline std::string* CyberModule::add_dag_files() {
  std::string* _s = _internal_add_dag_files();
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.CyberModule.dag_files)
  return _s;
}
inline const std::string& CyberModule::_internal_dag_files(int index) const {
  return _impl_.dag_files_.Get(index);
}
inline const std::string& CyberModule::dag_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.dag_files)
  return _internal_dag_files(index);
}
inline std::string* CyberModule::mutable_dag_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.dag_files)
  return _impl_.dag_files_.Mutable(index);
}
inline void CyberModule::set_dag_files(int index, const std::string& value) {
  _impl_.dag_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::set_dag_files(int index, std::string&& value) {
  _impl_.dag_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::set_dag_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dag_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::set_dag_files(int index, const char* value, size_t size) {
  _impl_.dag_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline std::string* CyberModule::_internal_add_dag_files() {
  return _impl_.dag_files_.Add();
}
inline void CyberModule::add_dag_files(const std::string& value) {
  _impl_.dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(std::string&& value) {
  _impl_.dag_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(const char* value, size_t size) {
  _impl_.dag_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CyberModule::dag_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CyberModule.dag_files)
  return _impl_.dag_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CyberModule::mutable_dag_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CyberModule.dag_files)
  return &_impl_.dag_files_;
}

// optional bool required_for_safety = 2 [default = true];
inline bool CyberModule::_internal_has_required_for_safety() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CyberModule::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void CyberModule::clear_required_for_safety() {
  _impl_.required_for_safety_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CyberModule::_internal_required_for_safety() const {
  return _impl_.required_for_safety_;
}
inline bool CyberModule::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.required_for_safety)
  return _internal_required_for_safety();
}
inline void CyberModule::_internal_set_required_for_safety(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.required_for_safety_ = value;
}
inline void CyberModule::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.required_for_safety)
}

// optional string process_group = 3;
inline bool CyberModule::_internal_has_process_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CyberModule::has_process_group() const {
  return _internal_has_process_group();
}
inline void CyberModule::clear_process_group() {
  _impl_.process_group_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CyberModule::process_group() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.process_group)
  return _internal_process_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CyberModule::set_process_group(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.process_group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.process_group)
}
inline std::string* CyberModule::mutable_process_group() {
  std::string* _s = _internal_mutable_process_group();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.process_group)
  return _s;
}
inline const std::string& CyberModule::_internal_process_group() const {
  return _impl_.process_group_.Get();
}
inline void CyberModule::_internal_set_process_group(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.process_group_.Set(value, GetArenaForAllocation());
}
inline std::string* CyberModule::_internal_mutable_process_group() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.process_group_.Mutable(GetArenaForAllocation());
}
inline std::string* CyberModule::release_process_group() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CyberModule.process_group)
  if (!_internal_has_process_group()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.process_group_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_group_.IsDefault()) {
    _impl_.process_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CyberModule::set_allocated_process_group(std::string* process_group) {
  if (process_group != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.process_group_.SetAllocated(process_group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_group_.IsDefault()) {
    _impl_.process_group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CyberModule.process_group)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIMode

// map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
inline int HMIMode::_internal_cyber_modules_size() const {
  return _impl_.cyber_modules_.size();
}
inline int HMIMode::cyber_modules_size() const {
  return _internal_cyber_modules_size();
}
inline void HMIMode::clear_cyber_modules() {
  _impl_.cyber_modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
HMIMode::_internal_cyber_modules() const {
  return _impl_.cyber_modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
HMIMode::cyber_modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.cyber_modules)
  return _internal_cyber_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
HMIMode::_internal_mutable_cyber_modules() {
  return _impl_.cyber_modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
HMIMode::mutable_cyber_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.cyber_modules)
  return _internal_mutable_cyber_modules();
}

// map<string, .apollo.dreamview.Module> modules = 2;
inline int HMIMode::_internal_modules_size() const {
  return _impl_.modules_.size();
}
inline int HMIMode::modules_size() const {
  return _internal_modules_size();
}
inline void HMIMode::clear_modules() {
  _impl_.modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
HMIMode::_internal_modules() const {
  return _impl_.modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
HMIMode::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
HMIMode::_internal_mutable_modules() {
  return _impl_.modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
HMIMode::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.modules)
  return _internal_mutable_modules();
}

// map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
inline int HMIMode::_internal_monitored_components_size() const {
  return _impl_.monitored_components_.size();
}
inline int HMIMode::monitored_components_size() const {
  return _internal_monitored_components_size();
}
inline void HMIMode::clear_monitored_components() {
  _impl_.monitored_components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
HMIMode::_internal_monitored_components() const {
  return _impl_.monitored_components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
HMIMode::monitored_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.monitored_components)
  return _internal_monitored_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
HMIMode::_internal_mutable_monitored_components() {
  return _impl_.monitored_components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
HMIMode::mutable_monitored_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.monitored_components)
  return _internal_mutable_monitored_components();
}

// map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
inline int HMIMode::_internal_other_components_size() const {
  return _impl_.other_components_.size();
}
inline int HMIMode::other_components_size() const {
  return _internal_other_components_size();
}
inline void HMIMode::clear_other_components() {
  _impl_.other_components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >&
HMIMode::_internal_other_components() const {
  return _impl_.other_components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >&
HMIMode::other_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.other_components)
  return _internal_other_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >*
HMIMode::_internal_mutable_other_components() {
  return _impl_.other_components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >*
HMIMode::mutable_other_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.other_components)
  return _internal_mutable_other_components();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
