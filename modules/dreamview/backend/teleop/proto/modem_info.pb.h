// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/modem_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto;
namespace modules {
namespace teleop {
namespace modem {
class ModemInfo;
struct ModemInfoDefaultTypeInternal;
extern ModemInfoDefaultTypeInternal _ModemInfo_default_instance_;
}  // namespace modem
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> ::modules::teleop::modem::ModemInfo* Arena::CreateMaybeMessage<::modules::teleop::modem::ModemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace modules {
namespace teleop {
namespace modem {

// ===================================================================

class ModemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:modules.teleop.modem.ModemInfo) */ {
 public:
  inline ModemInfo() : ModemInfo(nullptr) {}
  ~ModemInfo() override;
  explicit PROTOBUF_CONSTEXPR ModemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModemInfo(const ModemInfo& from);
  ModemInfo(ModemInfo&& from) noexcept
    : ModemInfo() {
    *this = ::std::move(from);
  }

  inline ModemInfo& operator=(const ModemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModemInfo& operator=(ModemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModemInfo* internal_default_instance() {
    return reinterpret_cast<const ModemInfo*>(
               &_ModemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModemInfo& a, ModemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "modules.teleop.modem.ModemInfo";
  }
  protected:
  explicit ModemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 2,
    kIpFieldNumber = 3,
    kGatewayFieldNumber = 5,
    kPortFieldNumber = 6,
    kDevFieldNumber = 7,
    kPingFieldNumber = 10,
    kSmoniFieldNumber = 11,
    kTechnologyFieldNumber = 12,
    kConnectionFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kTxFieldNumber = 8,
    kRxFieldNumber = 9,
    kIpCountFieldNumber = 4,
    kSignalFieldNumber = 14,
    kQualityFieldNumber = 15,
    kBandwidthUlFieldNumber = 16,
    kBandwidthDlFieldNumber = 17,
    kCaAggregationFieldNumber = 18,
    kRankFieldNumber = 19,
  };
  // optional string provider = 2;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // optional string ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string gateway = 5;
  bool has_gateway() const;
  private:
  bool _internal_has_gateway() const;
  public:
  void clear_gateway();
  const std::string& gateway() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway();
  PROTOBUF_NODISCARD std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // optional string port = 6;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // optional string dev = 7;
  bool has_dev() const;
  private:
  bool _internal_has_dev() const;
  public:
  void clear_dev();
  const std::string& dev() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dev(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dev();
  PROTOBUF_NODISCARD std::string* release_dev();
  void set_allocated_dev(std::string* dev);
  private:
  const std::string& _internal_dev() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dev(const std::string& value);
  std::string* _internal_mutable_dev();
  public:

  // optional string ping = 10;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const std::string& ping() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ping(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ping();
  PROTOBUF_NODISCARD std::string* release_ping();
  void set_allocated_ping(std::string* ping);
  private:
  const std::string& _internal_ping() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ping(const std::string& value);
  std::string* _internal_mutable_ping();
  public:

  // optional string smoni = 11;
  bool has_smoni() const;
  private:
  bool _internal_has_smoni() const;
  public:
  void clear_smoni();
  const std::string& smoni() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smoni(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smoni();
  PROTOBUF_NODISCARD std::string* release_smoni();
  void set_allocated_smoni(std::string* smoni);
  private:
  const std::string& _internal_smoni() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smoni(const std::string& value);
  std::string* _internal_mutable_smoni();
  public:

  // optional string technology = 12;
  bool has_technology() const;
  private:
  bool _internal_has_technology() const;
  public:
  void clear_technology();
  const std::string& technology() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_technology(ArgT0&& arg0, ArgT... args);
  std::string* mutable_technology();
  PROTOBUF_NODISCARD std::string* release_technology();
  void set_allocated_technology(std::string* technology);
  private:
  const std::string& _internal_technology() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_technology(const std::string& value);
  std::string* _internal_mutable_technology();
  public:

  // optional string connection = 13;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const std::string& connection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection();
  PROTOBUF_NODISCARD std::string* release_connection();
  void set_allocated_connection(std::string* connection);
  private:
  const std::string& _internal_connection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection(const std::string& value);
  std::string* _internal_mutable_connection();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional uint64 tx = 8;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  uint64_t tx() const;
  void set_tx(uint64_t value);
  private:
  uint64_t _internal_tx() const;
  void _internal_set_tx(uint64_t value);
  public:

  // optional uint64 rx = 9;
  bool has_rx() const;
  private:
  bool _internal_has_rx() const;
  public:
  void clear_rx();
  uint64_t rx() const;
  void set_rx(uint64_t value);
  private:
  uint64_t _internal_rx() const;
  void _internal_set_rx(uint64_t value);
  public:

  // optional int32 ip_count = 4;
  bool has_ip_count() const;
  private:
  bool _internal_has_ip_count() const;
  public:
  void clear_ip_count();
  int32_t ip_count() const;
  void set_ip_count(int32_t value);
  private:
  int32_t _internal_ip_count() const;
  void _internal_set_ip_count(int32_t value);
  public:

  // optional int32 signal = 14;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  int32_t signal() const;
  void set_signal(int32_t value);
  private:
  int32_t _internal_signal() const;
  void _internal_set_signal(int32_t value);
  public:

  // optional int32 quality = 15;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // optional int32 bandwidth_ul = 16;
  bool has_bandwidth_ul() const;
  private:
  bool _internal_has_bandwidth_ul() const;
  public:
  void clear_bandwidth_ul();
  int32_t bandwidth_ul() const;
  void set_bandwidth_ul(int32_t value);
  private:
  int32_t _internal_bandwidth_ul() const;
  void _internal_set_bandwidth_ul(int32_t value);
  public:

  // optional int32 bandwidth_dl = 17;
  bool has_bandwidth_dl() const;
  private:
  bool _internal_has_bandwidth_dl() const;
  public:
  void clear_bandwidth_dl();
  int32_t bandwidth_dl() const;
  void set_bandwidth_dl(int32_t value);
  private:
  int32_t _internal_bandwidth_dl() const;
  void _internal_set_bandwidth_dl(int32_t value);
  public:

  // optional bool ca_aggregation = 18;
  bool has_ca_aggregation() const;
  private:
  bool _internal_has_ca_aggregation() const;
  public:
  void clear_ca_aggregation();
  bool ca_aggregation() const;
  void set_ca_aggregation(bool value);
  private:
  bool _internal_ca_aggregation() const;
  void _internal_set_ca_aggregation(bool value);
  public:

  // optional int32 rank = 19;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:modules.teleop.modem.ModemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ping_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smoni_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr technology_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_;
    ::apollo::common::Header* header_;
    uint64_t tx_;
    uint64_t rx_;
    int32_t ip_count_;
    int32_t signal_;
    int32_t quality_;
    int32_t bandwidth_ul_;
    int32_t bandwidth_dl_;
    bool ca_aggregation_;
    int32_t rank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModemInfo

// optional .apollo.common.Header header = 1;
inline bool ModemInfo::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool ModemInfo::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ModemInfo::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ModemInfo::header() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.header)
  return _internal_header();
}
inline void ModemInfo::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modules.teleop.modem.ModemInfo.header)
}
inline ::apollo::common::Header* ModemInfo::release_header() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* ModemInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.header)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ModemInfo::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* ModemInfo::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.header)
  return _msg;
}
inline void ModemInfo::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.header)
}

// optional string provider = 2;
inline bool ModemInfo::_internal_has_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModemInfo::has_provider() const {
  return _internal_has_provider();
}
inline void ModemInfo::clear_provider() {
  _impl_.provider_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModemInfo::provider() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_provider(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.provider_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.provider)
}
inline std::string* ModemInfo::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.provider)
  return _s;
}
inline const std::string& ModemInfo::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void ModemInfo::_internal_set_provider(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_provider() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.provider_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_provider() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.provider)
  if (!_internal_has_provider()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.provider_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_.IsDefault()) {
    _impl_.provider_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.provider_.SetAllocated(provider, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_.IsDefault()) {
    _impl_.provider_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.provider)
}

// optional string ip = 3;
inline bool ModemInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModemInfo::has_ip() const {
  return _internal_has_ip();
}
inline void ModemInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModemInfo::ip() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.ip)
}
inline std::string* ModemInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.ip)
  return _s;
}
inline const std::string& ModemInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ModemInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_ip() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.ip)
}

// optional int32 ip_count = 4;
inline bool ModemInfo::_internal_has_ip_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModemInfo::has_ip_count() const {
  return _internal_has_ip_count();
}
inline void ModemInfo::clear_ip_count() {
  _impl_.ip_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t ModemInfo::_internal_ip_count() const {
  return _impl_.ip_count_;
}
inline int32_t ModemInfo::ip_count() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.ip_count)
  return _internal_ip_count();
}
inline void ModemInfo::_internal_set_ip_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ip_count_ = value;
}
inline void ModemInfo::set_ip_count(int32_t value) {
  _internal_set_ip_count(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.ip_count)
}

// optional string gateway = 5;
inline bool ModemInfo::_internal_has_gateway() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModemInfo::has_gateway() const {
  return _internal_has_gateway();
}
inline void ModemInfo::clear_gateway() {
  _impl_.gateway_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModemInfo::gateway() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.gateway)
  return _internal_gateway();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_gateway(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.gateway_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.gateway)
}
inline std::string* ModemInfo::mutable_gateway() {
  std::string* _s = _internal_mutable_gateway();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.gateway)
  return _s;
}
inline const std::string& ModemInfo::_internal_gateway() const {
  return _impl_.gateway_.Get();
}
inline void ModemInfo::_internal_set_gateway(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gateway_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_gateway() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.gateway_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_gateway() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.gateway)
  if (!_internal_has_gateway()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.gateway_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gateway_.IsDefault()) {
    _impl_.gateway_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.gateway_.SetAllocated(gateway, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gateway_.IsDefault()) {
    _impl_.gateway_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.gateway)
}

// optional string port = 6;
inline bool ModemInfo::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModemInfo::has_port() const {
  return _internal_has_port();
}
inline void ModemInfo::clear_port() {
  _impl_.port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModemInfo::port() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_port(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.port)
}
inline std::string* ModemInfo::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.port)
  return _s;
}
inline const std::string& ModemInfo::_internal_port() const {
  return _impl_.port_.Get();
}
inline void ModemInfo::_internal_set_port(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_port() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.port_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_port() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.port)
  if (!_internal_has_port()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.port_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.port)
}

// optional string dev = 7;
inline bool ModemInfo::_internal_has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModemInfo::has_dev() const {
  return _internal_has_dev();
}
inline void ModemInfo::clear_dev() {
  _impl_.dev_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ModemInfo::dev() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.dev)
  return _internal_dev();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_dev(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.dev_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.dev)
}
inline std::string* ModemInfo::mutable_dev() {
  std::string* _s = _internal_mutable_dev();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.dev)
  return _s;
}
inline const std::string& ModemInfo::_internal_dev() const {
  return _impl_.dev_.Get();
}
inline void ModemInfo::_internal_set_dev(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dev_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_dev() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.dev_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_dev() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.dev)
  if (!_internal_has_dev()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.dev_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dev_.IsDefault()) {
    _impl_.dev_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_dev(std::string* dev) {
  if (dev != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.dev_.SetAllocated(dev, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dev_.IsDefault()) {
    _impl_.dev_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.dev)
}

// optional uint64 tx = 8;
inline bool ModemInfo::_internal_has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModemInfo::has_tx() const {
  return _internal_has_tx();
}
inline void ModemInfo::clear_tx() {
  _impl_.tx_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t ModemInfo::_internal_tx() const {
  return _impl_.tx_;
}
inline uint64_t ModemInfo::tx() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.tx)
  return _internal_tx();
}
inline void ModemInfo::_internal_set_tx(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tx_ = value;
}
inline void ModemInfo::set_tx(uint64_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.tx)
}

// optional uint64 rx = 9;
inline bool ModemInfo::_internal_has_rx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModemInfo::has_rx() const {
  return _internal_has_rx();
}
inline void ModemInfo::clear_rx() {
  _impl_.rx_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t ModemInfo::_internal_rx() const {
  return _impl_.rx_;
}
inline uint64_t ModemInfo::rx() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.rx)
  return _internal_rx();
}
inline void ModemInfo::_internal_set_rx(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.rx_ = value;
}
inline void ModemInfo::set_rx(uint64_t value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.rx)
}

// optional string ping = 10;
inline bool ModemInfo::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModemInfo::has_ping() const {
  return _internal_has_ping();
}
inline void ModemInfo::clear_ping() {
  _impl_.ping_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ModemInfo::ping() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.ping)
  return _internal_ping();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_ping(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.ping_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.ping)
}
inline std::string* ModemInfo::mutable_ping() {
  std::string* _s = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.ping)
  return _s;
}
inline const std::string& ModemInfo::_internal_ping() const {
  return _impl_.ping_.Get();
}
inline void ModemInfo::_internal_set_ping(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ping_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_ping() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.ping_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_ping() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.ping)
  if (!_internal_has_ping()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.ping_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ping_.IsDefault()) {
    _impl_.ping_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_ping(std::string* ping) {
  if (ping != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.ping_.SetAllocated(ping, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ping_.IsDefault()) {
    _impl_.ping_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.ping)
}

// optional string smoni = 11;
inline bool ModemInfo::_internal_has_smoni() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModemInfo::has_smoni() const {
  return _internal_has_smoni();
}
inline void ModemInfo::clear_smoni() {
  _impl_.smoni_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ModemInfo::smoni() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.smoni)
  return _internal_smoni();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_smoni(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.smoni_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.smoni)
}
inline std::string* ModemInfo::mutable_smoni() {
  std::string* _s = _internal_mutable_smoni();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.smoni)
  return _s;
}
inline const std::string& ModemInfo::_internal_smoni() const {
  return _impl_.smoni_.Get();
}
inline void ModemInfo::_internal_set_smoni(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.smoni_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_smoni() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.smoni_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_smoni() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.smoni)
  if (!_internal_has_smoni()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.smoni_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smoni_.IsDefault()) {
    _impl_.smoni_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_smoni(std::string* smoni) {
  if (smoni != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.smoni_.SetAllocated(smoni, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smoni_.IsDefault()) {
    _impl_.smoni_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.smoni)
}

// optional string technology = 12;
inline bool ModemInfo::_internal_has_technology() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModemInfo::has_technology() const {
  return _internal_has_technology();
}
inline void ModemInfo::clear_technology() {
  _impl_.technology_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ModemInfo::technology() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.technology)
  return _internal_technology();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_technology(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.technology_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.technology)
}
inline std::string* ModemInfo::mutable_technology() {
  std::string* _s = _internal_mutable_technology();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.technology)
  return _s;
}
inline const std::string& ModemInfo::_internal_technology() const {
  return _impl_.technology_.Get();
}
inline void ModemInfo::_internal_set_technology(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.technology_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_technology() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.technology_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_technology() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.technology)
  if (!_internal_has_technology()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.technology_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.technology_.IsDefault()) {
    _impl_.technology_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_technology(std::string* technology) {
  if (technology != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.technology_.SetAllocated(technology, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.technology_.IsDefault()) {
    _impl_.technology_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.technology)
}

// optional string connection = 13;
inline bool ModemInfo::_internal_has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModemInfo::has_connection() const {
  return _internal_has_connection();
}
inline void ModemInfo::clear_connection() {
  _impl_.connection_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ModemInfo::connection() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.connection)
  return _internal_connection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModemInfo::set_connection(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.connection_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.connection)
}
inline std::string* ModemInfo::mutable_connection() {
  std::string* _s = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:modules.teleop.modem.ModemInfo.connection)
  return _s;
}
inline const std::string& ModemInfo::_internal_connection() const {
  return _impl_.connection_.Get();
}
inline void ModemInfo::_internal_set_connection(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.connection_.Set(value, GetArenaForAllocation());
}
inline std::string* ModemInfo::_internal_mutable_connection() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.connection_.Mutable(GetArenaForAllocation());
}
inline std::string* ModemInfo::release_connection() {
  // @@protoc_insertion_point(field_release:modules.teleop.modem.ModemInfo.connection)
  if (!_internal_has_connection()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.connection_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connection_.IsDefault()) {
    _impl_.connection_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModemInfo::set_allocated_connection(std::string* connection) {
  if (connection != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.connection_.SetAllocated(connection, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connection_.IsDefault()) {
    _impl_.connection_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.modem.ModemInfo.connection)
}

// optional int32 signal = 14;
inline bool ModemInfo::_internal_has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModemInfo::has_signal() const {
  return _internal_has_signal();
}
inline void ModemInfo::clear_signal() {
  _impl_.signal_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t ModemInfo::_internal_signal() const {
  return _impl_.signal_;
}
inline int32_t ModemInfo::signal() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.signal)
  return _internal_signal();
}
inline void ModemInfo::_internal_set_signal(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.signal_ = value;
}
inline void ModemInfo::set_signal(int32_t value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.signal)
}

// optional int32 quality = 15;
inline bool ModemInfo::_internal_has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModemInfo::has_quality() const {
  return _internal_has_quality();
}
inline void ModemInfo::clear_quality() {
  _impl_.quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t ModemInfo::_internal_quality() const {
  return _impl_.quality_;
}
inline int32_t ModemInfo::quality() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.quality)
  return _internal_quality();
}
inline void ModemInfo::_internal_set_quality(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.quality_ = value;
}
inline void ModemInfo::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.quality)
}

// optional int32 bandwidth_ul = 16;
inline bool ModemInfo::_internal_has_bandwidth_ul() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModemInfo::has_bandwidth_ul() const {
  return _internal_has_bandwidth_ul();
}
inline void ModemInfo::clear_bandwidth_ul() {
  _impl_.bandwidth_ul_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t ModemInfo::_internal_bandwidth_ul() const {
  return _impl_.bandwidth_ul_;
}
inline int32_t ModemInfo::bandwidth_ul() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.bandwidth_ul)
  return _internal_bandwidth_ul();
}
inline void ModemInfo::_internal_set_bandwidth_ul(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.bandwidth_ul_ = value;
}
inline void ModemInfo::set_bandwidth_ul(int32_t value) {
  _internal_set_bandwidth_ul(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.bandwidth_ul)
}

// optional int32 bandwidth_dl = 17;
inline bool ModemInfo::_internal_has_bandwidth_dl() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModemInfo::has_bandwidth_dl() const {
  return _internal_has_bandwidth_dl();
}
inline void ModemInfo::clear_bandwidth_dl() {
  _impl_.bandwidth_dl_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t ModemInfo::_internal_bandwidth_dl() const {
  return _impl_.bandwidth_dl_;
}
inline int32_t ModemInfo::bandwidth_dl() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.bandwidth_dl)
  return _internal_bandwidth_dl();
}
inline void ModemInfo::_internal_set_bandwidth_dl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.bandwidth_dl_ = value;
}
inline void ModemInfo::set_bandwidth_dl(int32_t value) {
  _internal_set_bandwidth_dl(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.bandwidth_dl)
}

// optional bool ca_aggregation = 18;
inline bool ModemInfo::_internal_has_ca_aggregation() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModemInfo::has_ca_aggregation() const {
  return _internal_has_ca_aggregation();
}
inline void ModemInfo::clear_ca_aggregation() {
  _impl_.ca_aggregation_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool ModemInfo::_internal_ca_aggregation() const {
  return _impl_.ca_aggregation_;
}
inline bool ModemInfo::ca_aggregation() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.ca_aggregation)
  return _internal_ca_aggregation();
}
inline void ModemInfo::_internal_set_ca_aggregation(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.ca_aggregation_ = value;
}
inline void ModemInfo::set_ca_aggregation(bool value) {
  _internal_set_ca_aggregation(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.ca_aggregation)
}

// optional int32 rank = 19;
inline bool ModemInfo::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModemInfo::has_rank() const {
  return _internal_has_rank();
}
inline void ModemInfo::clear_rank() {
  _impl_.rank_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t ModemInfo::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t ModemInfo::rank() const {
  // @@protoc_insertion_point(field_get:modules.teleop.modem.ModemInfo.rank)
  return _internal_rank();
}
inline void ModemInfo::_internal_set_rank(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.rank_ = value;
}
inline void ModemInfo::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:modules.teleop.modem.ModemInfo.rank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace modem
}  // namespace teleop
}  // namespace modules

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto
