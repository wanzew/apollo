// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/daemon_cmd.proto

#include "modules/dreamview/backend/teleop/proto/daemon_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace modules {
namespace teleop {
namespace daemon {
PROTOBUF_CONSTEXPR DaemonCmd::DaemonCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct DaemonCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DaemonCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DaemonCmdDefaultTypeInternal() {}
  union {
    DaemonCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DaemonCmdDefaultTypeInternal _DaemonCmd_default_instance_;
}  // namespace daemon
}  // namespace teleop
}  // namespace modules
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _impl_.cmd_),
  2,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::modules::teleop::daemon::DaemonCmd)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::modules::teleop::daemon::_DaemonCmd_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/dreamview/backend/teleop/proto"
  "/daemon_cmd.proto\022\025modules.teleop.daemon"
  "\032!modules/common/proto/header.proto\"Y\n\tD"
  "aemonCmd\022%\n\006header\030\001 \001(\0132\025.apollo.common"
  ".Header\022\021\n\007service\030\002 \001(\t:\000\022\022\n\003cmd\030\003 \001(\t:"
  "\005start"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = {
    false, false, 206, descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto,
    "modules/dreamview/backend/teleop/proto/daemon_cmd.proto",
    &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_once, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto(&descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto);
namespace modules {
namespace teleop {
namespace daemon {

// ===================================================================

class DaemonCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<DaemonCmd>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const DaemonCmd* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
DaemonCmd::_Internal::header(const DaemonCmd* msg) {
  return *msg->_impl_.header_;
}
void DaemonCmd::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DaemonCmd::Impl_::_i_give_permission_to_break_this_code_default_cmd_{{{"start", 5}}, {nullptr}};
DaemonCmd::DaemonCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:modules.teleop.daemon.DaemonCmd)
}
DaemonCmd::DaemonCmd(const DaemonCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service()) {
    _impl_.service_.Set(from._internal_service(), 
      GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  if (from._internal_has_cmd()) {
    _impl_.cmd_.Set(from._internal_cmd(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:modules.teleop.daemon.DaemonCmd)
}

inline void DaemonCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.header_){nullptr}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
}

DaemonCmd::~DaemonCmd() {
  // @@protoc_insertion_point(destructor:modules.teleop.daemon.DaemonCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DaemonCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_.Destroy();
  _impl_.cmd_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void DaemonCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DaemonCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:modules.teleop.daemon.DaemonCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.service_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearToDefault(::modules::teleop::daemon::DaemonCmd::Impl_::_i_give_permission_to_break_this_code_default_cmd_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaemonCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string service = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.daemon.DaemonCmd.service");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 3 [default = "start"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.daemon.DaemonCmd.cmd");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DaemonCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modules.teleop.daemon.DaemonCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string service = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.daemon.DaemonCmd.service");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service(), target);
  }

  // optional string cmd = 3 [default = "start"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.daemon.DaemonCmd.cmd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modules.teleop.daemon.DaemonCmd)
  return target;
}

size_t DaemonCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modules.teleop.daemon.DaemonCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string service = 2 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service());
    }

    // optional string cmd = 3 [default = "start"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DaemonCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DaemonCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DaemonCmd::GetClassData() const { return &_class_data_; }

void DaemonCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DaemonCmd *>(to)->MergeFrom(
      static_cast<const DaemonCmd &>(from));
}


void DaemonCmd::MergeFrom(const DaemonCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:modules.teleop.daemon.DaemonCmd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service(from._internal_service());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DaemonCmd::CopyFrom(const DaemonCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modules.teleop.daemon.DaemonCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaemonCmd::IsInitialized() const {
  return true;
}

void DaemonCmd::InternalSwap(DaemonCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DaemonCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_getter, &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace daemon
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::modules::teleop::daemon::DaemonCmd*
Arena::CreateMaybeMessage< ::modules::teleop::daemon::DaemonCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::modules::teleop::daemon::DaemonCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
