// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/modem_info.proto

#include "modules/dreamview/backend/teleop/proto/modem_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace modules {
namespace teleop {
namespace modem {
PROTOBUF_CONSTEXPR ModemInfo::ModemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.provider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gateway_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ping_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.smoni_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.technology_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connection_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.tx_)*/uint64_t{0u}
  , /*decltype(_impl_.rx_)*/uint64_t{0u}
  , /*decltype(_impl_.ip_count_)*/0
  , /*decltype(_impl_.signal_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.bandwidth_ul_)*/0
  , /*decltype(_impl_.bandwidth_dl_)*/0
  , /*decltype(_impl_.ca_aggregation_)*/false
  , /*decltype(_impl_.rank_)*/0} {}
struct ModemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModemInfoDefaultTypeInternal() {}
  union {
    ModemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModemInfoDefaultTypeInternal _ModemInfo_default_instance_;
}  // namespace modem
}  // namespace teleop
}  // namespace modules
static ::_pb::Metadata file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.ip_count_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.gateway_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.dev_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.smoni_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.technology_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.bandwidth_ul_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.bandwidth_dl_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.ca_aggregation_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _impl_.rank_),
  9,
  0,
  1,
  12,
  2,
  3,
  4,
  10,
  11,
  5,
  6,
  7,
  8,
  13,
  14,
  15,
  16,
  17,
  18,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, -1, sizeof(::modules::teleop::modem::ModemInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::modules::teleop::modem::_ModemInfo_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/dreamview/backend/teleop/proto"
  "/modem_info.proto\022\024modules.teleop.modem\032"
  "!modules/common/proto/header.proto\"\336\002\n\tM"
  "odemInfo\022%\n\006header\030\001 \001(\0132\025.apollo.common"
  ".Header\022\020\n\010provider\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\020\n"
  "\010ip_count\030\004 \001(\005\022\017\n\007gateway\030\005 \001(\t\022\014\n\004port"
  "\030\006 \001(\t\022\013\n\003dev\030\007 \001(\t\022\n\n\002tx\030\010 \001(\004\022\n\n\002rx\030\t "
  "\001(\004\022\014\n\004ping\030\n \001(\t\022\r\n\005smoni\030\013 \001(\t\022\022\n\ntech"
  "nology\030\014 \001(\t\022\022\n\nconnection\030\r \001(\t\022\016\n\006sign"
  "al\030\016 \001(\005\022\017\n\007quality\030\017 \001(\005\022\024\n\014bandwidth_u"
  "l\030\020 \001(\005\022\024\n\014bandwidth_dl\030\021 \001(\005\022\026\n\016ca_aggr"
  "egation\030\022 \001(\010\022\014\n\004rank\030\023 \001(\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = {
    false, false, 467, descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto,
    "modules/dreamview/backend/teleop/proto/modem_info.proto",
    &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_once, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto::offsets,
    file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto,
    file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto(&descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto);
namespace modules {
namespace teleop {
namespace modem {

// ===================================================================

class ModemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ModemInfo>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const ModemInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gateway(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_smoni(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_technology(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bandwidth_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bandwidth_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ca_aggregation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::apollo::common::Header&
ModemInfo::_Internal::header(const ModemInfo* msg) {
  return *msg->_impl_.header_;
}
void ModemInfo::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
ModemInfo::ModemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:modules.teleop.modem.ModemInfo)
}
ModemInfo::ModemInfo(const ModemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.smoni_){}
    , decltype(_impl_.technology_){}
    , decltype(_impl_.connection_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ip_count_){}
    , decltype(_impl_.signal_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.bandwidth_ul_){}
    , decltype(_impl_.bandwidth_dl_){}
    , decltype(_impl_.ca_aggregation_){}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_provider()) {
    _impl_.provider_.Set(from._internal_provider(), 
      GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _impl_.ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gateway()) {
    _impl_.gateway_.Set(from._internal_gateway(), 
      GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_port()) {
    _impl_.port_.Set(from._internal_port(), 
      GetArenaForAllocation());
  }
  _impl_.dev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dev()) {
    _impl_.dev_.Set(from._internal_dev(), 
      GetArenaForAllocation());
  }
  _impl_.ping_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ping_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ping()) {
    _impl_.ping_.Set(from._internal_ping(), 
      GetArenaForAllocation());
  }
  _impl_.smoni_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smoni_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_smoni()) {
    _impl_.smoni_.Set(from._internal_smoni(), 
      GetArenaForAllocation());
  }
  _impl_.technology_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.technology_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_technology()) {
    _impl_.technology_.Set(from._internal_technology(), 
      GetArenaForAllocation());
  }
  _impl_.connection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection()) {
    _impl_.connection_.Set(from._internal_connection(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.tx_, &from._impl_.tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.tx_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:modules.teleop.modem.ModemInfo)
}

inline void ModemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.smoni_){}
    , decltype(_impl_.technology_){}
    , decltype(_impl_.connection_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.tx_){uint64_t{0u}}
    , decltype(_impl_.rx_){uint64_t{0u}}
    , decltype(_impl_.ip_count_){0}
    , decltype(_impl_.signal_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.bandwidth_ul_){0}
    , decltype(_impl_.bandwidth_dl_){0}
    , decltype(_impl_.ca_aggregation_){false}
    , decltype(_impl_.rank_){0}
  };
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ping_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ping_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smoni_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smoni_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.technology_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.technology_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModemInfo::~ModemInfo() {
  // @@protoc_insertion_point(destructor:modules.teleop.modem.ModemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.gateway_.Destroy();
  _impl_.port_.Destroy();
  _impl_.dev_.Destroy();
  _impl_.ping_.Destroy();
  _impl_.smoni_.Destroy();
  _impl_.technology_.Destroy();
  _impl_.connection_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ModemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:modules.teleop.modem.ModemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.provider_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gateway_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.port_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ping_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.smoni_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.technology_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.connection_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bandwidth_ul_) -
        reinterpret_cast<char*>(&_impl_.tx_)) + sizeof(_impl_.bandwidth_ul_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.bandwidth_dl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_) -
        reinterpret_cast<char*>(&_impl_.bandwidth_dl_)) + sizeof(_impl_.rank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string provider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.provider");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 ip_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ip_count(&has_bits);
          _impl_.ip_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gateway = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gateway();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.gateway");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.port");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dev();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.dev");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tx(&has_bits);
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_rx(&has_bits);
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ping = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ping();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.ping");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string smoni = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_smoni();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.smoni");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string technology = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_technology();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.technology");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string connection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_connection();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.connection");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 signal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_signal(&has_bits);
          _impl_.signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bandwidth_ul = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bandwidth_ul(&has_bits);
          _impl_.bandwidth_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bandwidth_dl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bandwidth_dl(&has_bits);
          _impl_.bandwidth_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ca_aggregation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ca_aggregation(&has_bits);
          _impl_.ca_aggregation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modules.teleop.modem.ModemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string provider = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.provider");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider(), target);
  }

  // optional string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // optional int32 ip_count = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ip_count(), target);
  }

  // optional string gateway = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.gateway");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gateway(), target);
  }

  // optional string port = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.port");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_port(), target);
  }

  // optional string dev = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dev().data(), static_cast<int>(this->_internal_dev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.dev");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dev(), target);
  }

  // optional uint64 tx = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tx(), target);
  }

  // optional uint64 rx = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_rx(), target);
  }

  // optional string ping = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ping().data(), static_cast<int>(this->_internal_ping().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.ping");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ping(), target);
  }

  // optional string smoni = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_smoni().data(), static_cast<int>(this->_internal_smoni().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.smoni");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_smoni(), target);
  }

  // optional string technology = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technology().data(), static_cast<int>(this->_internal_technology().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.technology");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_technology(), target);
  }

  // optional string connection = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection().data(), static_cast<int>(this->_internal_connection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.connection");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_connection(), target);
  }

  // optional int32 signal = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_signal(), target);
  }

  // optional int32 quality = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_quality(), target);
  }

  // optional int32 bandwidth_ul = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_bandwidth_ul(), target);
  }

  // optional int32 bandwidth_dl = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_bandwidth_dl(), target);
  }

  // optional bool ca_aggregation = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_ca_aggregation(), target);
  }

  // optional int32 rank = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modules.teleop.modem.ModemInfo)
  return target;
}

size_t ModemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modules.teleop.modem.ModemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string provider = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provider());
    }

    // optional string ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional string gateway = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gateway());
    }

    // optional string port = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port());
    }

    // optional string dev = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev());
    }

    // optional string ping = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ping());
    }

    // optional string smoni = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smoni());
    }

    // optional string technology = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technology());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string connection = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional uint64 tx = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx());
    }

    // optional uint64 rx = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rx());
    }

    // optional int32 ip_count = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ip_count());
    }

    // optional int32 signal = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signal());
    }

    // optional int32 quality = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional int32 bandwidth_ul = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bandwidth_ul());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 bandwidth_dl = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bandwidth_dl());
    }

    // optional bool ca_aggregation = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 rank = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_rank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModemInfo::GetClassData() const { return &_class_data_; }

void ModemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModemInfo *>(to)->MergeFrom(
      static_cast<const ModemInfo &>(from));
}


void ModemInfo::MergeFrom(const ModemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:modules.teleop.modem.ModemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_provider(from._internal_provider());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gateway(from._internal_gateway());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dev(from._internal_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_ping(from._internal_ping());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_smoni(from._internal_smoni());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_technology(from._internal_technology());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_connection(from._internal_connection());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.tx_ = from._impl_.tx_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.rx_ = from._impl_.rx_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.ip_count_ = from._impl_.ip_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.signal_ = from._impl_.signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.bandwidth_ul_ = from._impl_.bandwidth_ul_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.bandwidth_dl_ = from._impl_.bandwidth_dl_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.ca_aggregation_ = from._impl_.ca_aggregation_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.rank_ = from._impl_.rank_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModemInfo::CopyFrom(const ModemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modules.teleop.modem.ModemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModemInfo::IsInitialized() const {
  return true;
}

void ModemInfo::InternalSwap(ModemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_, lhs_arena,
      &other->_impl_.provider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_, lhs_arena,
      &other->_impl_.gateway_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dev_, lhs_arena,
      &other->_impl_.dev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ping_, lhs_arena,
      &other->_impl_.ping_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.smoni_, lhs_arena,
      &other->_impl_.smoni_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.technology_, lhs_arena,
      &other->_impl_.technology_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connection_, lhs_arena,
      &other->_impl_.connection_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModemInfo, _impl_.rank_)
      + sizeof(ModemInfo::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(ModemInfo, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_getter, &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace modem
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::modules::teleop::modem::ModemInfo*
Arena::CreateMaybeMessage< ::modules::teleop::modem::ModemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::modules::teleop::modem::ModemInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
