// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/daemon_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto;
namespace modules {
namespace teleop {
namespace daemon {
class DaemonCmd;
struct DaemonCmdDefaultTypeInternal;
extern DaemonCmdDefaultTypeInternal _DaemonCmd_default_instance_;
}  // namespace daemon
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> ::modules::teleop::daemon::DaemonCmd* Arena::CreateMaybeMessage<::modules::teleop::daemon::DaemonCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace modules {
namespace teleop {
namespace daemon {

// ===================================================================

class DaemonCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:modules.teleop.daemon.DaemonCmd) */ {
 public:
  inline DaemonCmd() : DaemonCmd(nullptr) {}
  ~DaemonCmd() override;
  explicit PROTOBUF_CONSTEXPR DaemonCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DaemonCmd(const DaemonCmd& from);
  DaemonCmd(DaemonCmd&& from) noexcept
    : DaemonCmd() {
    *this = ::std::move(from);
  }

  inline DaemonCmd& operator=(const DaemonCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaemonCmd& operator=(DaemonCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DaemonCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DaemonCmd* internal_default_instance() {
    return reinterpret_cast<const DaemonCmd*>(
               &_DaemonCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DaemonCmd& a, DaemonCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DaemonCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaemonCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DaemonCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DaemonCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DaemonCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DaemonCmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaemonCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "modules.teleop.daemon.DaemonCmd";
  }
  protected:
  explicit DaemonCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 2,
    kCmdFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // optional string service = 2 [default = ""];
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // optional string cmd = 3 [default = "start"];
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:modules.teleop.daemon.DaemonCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_cmd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    ::apollo::common::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DaemonCmd

// optional .apollo.common.Header header = 1;
inline bool DaemonCmd::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool DaemonCmd::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& DaemonCmd::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& DaemonCmd::header() const {
  // @@protoc_insertion_point(field_get:modules.teleop.daemon.DaemonCmd.header)
  return _internal_header();
}
inline void DaemonCmd::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modules.teleop.daemon.DaemonCmd.header)
}
inline ::apollo::common::Header* DaemonCmd::release_header() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* DaemonCmd::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:modules.teleop.daemon.DaemonCmd.header)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* DaemonCmd::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* DaemonCmd::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:modules.teleop.daemon.DaemonCmd.header)
  return _msg;
}
inline void DaemonCmd::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.daemon.DaemonCmd.header)
}

// optional string service = 2 [default = ""];
inline bool DaemonCmd::_internal_has_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DaemonCmd::has_service() const {
  return _internal_has_service();
}
inline void DaemonCmd::clear_service() {
  _impl_.service_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DaemonCmd::service() const {
  // @@protoc_insertion_point(field_get:modules.teleop.daemon.DaemonCmd.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DaemonCmd::set_service(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.daemon.DaemonCmd.service)
}
inline std::string* DaemonCmd::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:modules.teleop.daemon.DaemonCmd.service)
  return _s;
}
inline const std::string& DaemonCmd::_internal_service() const {
  return _impl_.service_.Get();
}
inline void DaemonCmd::_internal_set_service(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* DaemonCmd::_internal_mutable_service() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* DaemonCmd::release_service() {
  // @@protoc_insertion_point(field_release:modules.teleop.daemon.DaemonCmd.service)
  if (!_internal_has_service()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.service_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DaemonCmd::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.daemon.DaemonCmd.service)
}

// optional string cmd = 3 [default = "start"];
inline bool DaemonCmd::_internal_has_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DaemonCmd::has_cmd() const {
  return _internal_has_cmd();
}
inline void DaemonCmd::clear_cmd() {
  _impl_.cmd_.ClearToDefault(::modules::teleop::daemon::DaemonCmd::Impl_::_i_give_permission_to_break_this_code_default_cmd_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DaemonCmd::cmd() const {
  // @@protoc_insertion_point(field_get:modules.teleop.daemon.DaemonCmd.cmd)
  if (_impl_.cmd_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_cmd_.get();
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DaemonCmd::set_cmd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.cmd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:modules.teleop.daemon.DaemonCmd.cmd)
}
inline std::string* DaemonCmd::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:modules.teleop.daemon.DaemonCmd.cmd)
  return _s;
}
inline const std::string& DaemonCmd::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void DaemonCmd::_internal_set_cmd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* DaemonCmd::_internal_mutable_cmd() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cmd_.Mutable(::modules::teleop::daemon::DaemonCmd::Impl_::_i_give_permission_to_break_this_code_default_cmd_, GetArenaForAllocation());
}
inline std::string* DaemonCmd::release_cmd() {
  // @@protoc_insertion_point(field_release:modules.teleop.daemon.DaemonCmd.cmd)
  if (!_internal_has_cmd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.cmd_.Release();
  return p;
}
inline void DaemonCmd::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cmd_.SetAllocated(cmd, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:modules.teleop.daemon.DaemonCmd.cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace daemon
}  // namespace teleop
}  // namespace modules

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto
