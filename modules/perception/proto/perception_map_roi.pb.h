// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_map_roi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/map/proto/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto;
namespace apollo {
namespace perception {
class PerceptionMapROI;
struct PerceptionMapROIDefaultTypeInternal;
extern PerceptionMapROIDefaultTypeInternal _PerceptionMapROI_default_instance_;
class PerceptionMapROI_Region;
struct PerceptionMapROI_RegionDefaultTypeInternal;
extern PerceptionMapROI_RegionDefaultTypeInternal _PerceptionMapROI_Region_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::PerceptionMapROI* Arena::CreateMaybeMessage<::apollo::perception::PerceptionMapROI>(Arena*);
template<> ::apollo::perception::PerceptionMapROI_Region* Arena::CreateMaybeMessage<::apollo::perception::PerceptionMapROI_Region>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

// ===================================================================

class PerceptionMapROI_Region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionMapROI.Region) */ {
 public:
  inline PerceptionMapROI_Region() : PerceptionMapROI_Region(nullptr) {}
  ~PerceptionMapROI_Region() override;
  explicit PROTOBUF_CONSTEXPR PerceptionMapROI_Region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionMapROI_Region(const PerceptionMapROI_Region& from);
  PerceptionMapROI_Region(PerceptionMapROI_Region&& from) noexcept
    : PerceptionMapROI_Region() {
    *this = ::std::move(from);
  }

  inline PerceptionMapROI_Region& operator=(const PerceptionMapROI_Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionMapROI_Region& operator=(PerceptionMapROI_Region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionMapROI_Region& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionMapROI_Region* internal_default_instance() {
    return reinterpret_cast<const PerceptionMapROI_Region*>(
               &_PerceptionMapROI_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerceptionMapROI_Region& a, PerceptionMapROI_Region& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionMapROI_Region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionMapROI_Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerceptionMapROI_Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerceptionMapROI_Region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerceptionMapROI_Region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerceptionMapROI_Region& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionMapROI_Region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionMapROI.Region";
  }
  protected:
  explicit PerceptionMapROI_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartXFieldNumber = 1,
    kEndXFieldNumber = 2,
    kStartYFieldNumber = 3,
    kEndYFieldNumber = 4,
    kExtensionDistanceFieldNumber = 5,
  };
  // optional int32 start_x = 1;
  bool has_start_x() const;
  private:
  bool _internal_has_start_x() const;
  public:
  void clear_start_x();
  int32_t start_x() const;
  void set_start_x(int32_t value);
  private:
  int32_t _internal_start_x() const;
  void _internal_set_start_x(int32_t value);
  public:

  // optional int32 end_x = 2;
  bool has_end_x() const;
  private:
  bool _internal_has_end_x() const;
  public:
  void clear_end_x();
  int32_t end_x() const;
  void set_end_x(int32_t value);
  private:
  int32_t _internal_end_x() const;
  void _internal_set_end_x(int32_t value);
  public:

  // optional int32 start_y = 3;
  bool has_start_y() const;
  private:
  bool _internal_has_start_y() const;
  public:
  void clear_start_y();
  int32_t start_y() const;
  void set_start_y(int32_t value);
  private:
  int32_t _internal_start_y() const;
  void _internal_set_start_y(int32_t value);
  public:

  // optional int32 end_y = 4;
  bool has_end_y() const;
  private:
  bool _internal_has_end_y() const;
  public:
  void clear_end_y();
  int32_t end_y() const;
  void set_end_y(int32_t value);
  private:
  int32_t _internal_end_y() const;
  void _internal_set_end_y(int32_t value);
  public:

  // optional int32 extension_distance = 5;
  bool has_extension_distance() const;
  private:
  bool _internal_has_extension_distance() const;
  public:
  void clear_extension_distance();
  int32_t extension_distance() const;
  void set_extension_distance(int32_t value);
  private:
  int32_t _internal_extension_distance() const;
  void _internal_set_extension_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionMapROI.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t start_x_;
    int32_t end_x_;
    int32_t start_y_;
    int32_t end_y_;
    int32_t extension_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto;
};
// -------------------------------------------------------------------

class PerceptionMapROI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionMapROI) */ {
 public:
  inline PerceptionMapROI() : PerceptionMapROI(nullptr) {}
  ~PerceptionMapROI() override;
  explicit PROTOBUF_CONSTEXPR PerceptionMapROI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionMapROI(const PerceptionMapROI& from);
  PerceptionMapROI(PerceptionMapROI&& from) noexcept
    : PerceptionMapROI() {
    *this = ::std::move(from);
  }

  inline PerceptionMapROI& operator=(const PerceptionMapROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionMapROI& operator=(PerceptionMapROI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionMapROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionMapROI* internal_default_instance() {
    return reinterpret_cast<const PerceptionMapROI*>(
               &_PerceptionMapROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerceptionMapROI& a, PerceptionMapROI& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionMapROI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionMapROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerceptionMapROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerceptionMapROI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerceptionMapROI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerceptionMapROI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionMapROI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionMapROI";
  }
  protected:
  explicit PerceptionMapROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerceptionMapROI_Region Region;

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kHdmapHeaderFieldNumber = 8,
    kOriginXFieldNumber = 2,
    kOriginYFieldNumber = 3,
    kGridSizeFieldNumber = 4,
    kNumRowsFieldNumber = 5,
    kNumColumnsFieldNumber = 6,
  };
  // repeated .apollo.perception.PerceptionMapROI.Region region = 7;
  int region_size() const;
  private:
  int _internal_region_size() const;
  public:
  void clear_region();
  ::apollo::perception::PerceptionMapROI_Region* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionMapROI_Region >*
      mutable_region();
  private:
  const ::apollo::perception::PerceptionMapROI_Region& _internal_region(int index) const;
  ::apollo::perception::PerceptionMapROI_Region* _internal_add_region();
  public:
  const ::apollo::perception::PerceptionMapROI_Region& region(int index) const;
  ::apollo::perception::PerceptionMapROI_Region* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionMapROI_Region >&
      region() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.hdmap.Header hdmap_header = 8;
  bool has_hdmap_header() const;
  private:
  bool _internal_has_hdmap_header() const;
  public:
  void clear_hdmap_header();
  const ::apollo::hdmap::Header& hdmap_header() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Header* release_hdmap_header();
  ::apollo::hdmap::Header* mutable_hdmap_header();
  void set_allocated_hdmap_header(::apollo::hdmap::Header* hdmap_header);
  private:
  const ::apollo::hdmap::Header& _internal_hdmap_header() const;
  ::apollo::hdmap::Header* _internal_mutable_hdmap_header();
  public:
  void unsafe_arena_set_allocated_hdmap_header(
      ::apollo::hdmap::Header* hdmap_header);
  ::apollo::hdmap::Header* unsafe_arena_release_hdmap_header();

  // optional double origin_x = 2;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  double origin_x() const;
  void set_origin_x(double value);
  private:
  double _internal_origin_x() const;
  void _internal_set_origin_x(double value);
  public:

  // optional double origin_y = 3;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  double origin_y() const;
  void set_origin_y(double value);
  private:
  double _internal_origin_y() const;
  void _internal_set_origin_y(double value);
  public:

  // optional double grid_size = 4;
  bool has_grid_size() const;
  private:
  bool _internal_has_grid_size() const;
  public:
  void clear_grid_size();
  double grid_size() const;
  void set_grid_size(double value);
  private:
  double _internal_grid_size() const;
  void _internal_set_grid_size(double value);
  public:

  // optional int32 num_rows = 5;
  bool has_num_rows() const;
  private:
  bool _internal_has_num_rows() const;
  public:
  void clear_num_rows();
  int32_t num_rows() const;
  void set_num_rows(int32_t value);
  private:
  int32_t _internal_num_rows() const;
  void _internal_set_num_rows(int32_t value);
  public:

  // optional int32 num_columns = 6;
  bool has_num_columns() const;
  private:
  bool _internal_has_num_columns() const;
  public:
  void clear_num_columns();
  int32_t num_columns() const;
  void set_num_columns(int32_t value);
  private:
  int32_t _internal_num_columns() const;
  void _internal_set_num_columns(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionMapROI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionMapROI_Region > region_;
    ::apollo::common::Header* header_;
    ::apollo::hdmap::Header* hdmap_header_;
    double origin_x_;
    double origin_y_;
    double grid_size_;
    int32_t num_rows_;
    int32_t num_columns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerceptionMapROI_Region

// optional int32 start_x = 1;
inline bool PerceptionMapROI_Region::_internal_has_start_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerceptionMapROI_Region::has_start_x() const {
  return _internal_has_start_x();
}
inline void PerceptionMapROI_Region::clear_start_x() {
  _impl_.start_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t PerceptionMapROI_Region::_internal_start_x() const {
  return _impl_.start_x_;
}
inline int32_t PerceptionMapROI_Region::start_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.Region.start_x)
  return _internal_start_x();
}
inline void PerceptionMapROI_Region::_internal_set_start_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_x_ = value;
}
inline void PerceptionMapROI_Region::set_start_x(int32_t value) {
  _internal_set_start_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.Region.start_x)
}

// optional int32 end_x = 2;
inline bool PerceptionMapROI_Region::_internal_has_end_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerceptionMapROI_Region::has_end_x() const {
  return _internal_has_end_x();
}
inline void PerceptionMapROI_Region::clear_end_x() {
  _impl_.end_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PerceptionMapROI_Region::_internal_end_x() const {
  return _impl_.end_x_;
}
inline int32_t PerceptionMapROI_Region::end_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.Region.end_x)
  return _internal_end_x();
}
inline void PerceptionMapROI_Region::_internal_set_end_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_x_ = value;
}
inline void PerceptionMapROI_Region::set_end_x(int32_t value) {
  _internal_set_end_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.Region.end_x)
}

// optional int32 start_y = 3;
inline bool PerceptionMapROI_Region::_internal_has_start_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerceptionMapROI_Region::has_start_y() const {
  return _internal_has_start_y();
}
inline void PerceptionMapROI_Region::clear_start_y() {
  _impl_.start_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PerceptionMapROI_Region::_internal_start_y() const {
  return _impl_.start_y_;
}
inline int32_t PerceptionMapROI_Region::start_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.Region.start_y)
  return _internal_start_y();
}
inline void PerceptionMapROI_Region::_internal_set_start_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_y_ = value;
}
inline void PerceptionMapROI_Region::set_start_y(int32_t value) {
  _internal_set_start_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.Region.start_y)
}

// optional int32 end_y = 4;
inline bool PerceptionMapROI_Region::_internal_has_end_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionMapROI_Region::has_end_y() const {
  return _internal_has_end_y();
}
inline void PerceptionMapROI_Region::clear_end_y() {
  _impl_.end_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t PerceptionMapROI_Region::_internal_end_y() const {
  return _impl_.end_y_;
}
inline int32_t PerceptionMapROI_Region::end_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.Region.end_y)
  return _internal_end_y();
}
inline void PerceptionMapROI_Region::_internal_set_end_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_y_ = value;
}
inline void PerceptionMapROI_Region::set_end_y(int32_t value) {
  _internal_set_end_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.Region.end_y)
}

// optional int32 extension_distance = 5;
inline bool PerceptionMapROI_Region::_internal_has_extension_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerceptionMapROI_Region::has_extension_distance() const {
  return _internal_has_extension_distance();
}
inline void PerceptionMapROI_Region::clear_extension_distance() {
  _impl_.extension_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t PerceptionMapROI_Region::_internal_extension_distance() const {
  return _impl_.extension_distance_;
}
inline int32_t PerceptionMapROI_Region::extension_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.Region.extension_distance)
  return _internal_extension_distance();
}
inline void PerceptionMapROI_Region::_internal_set_extension_distance(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.extension_distance_ = value;
}
inline void PerceptionMapROI_Region::set_extension_distance(int32_t value) {
  _internal_set_extension_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.Region.extension_distance)
}

// -------------------------------------------------------------------

// PerceptionMapROI

// optional .apollo.common.Header header = 1;
inline bool PerceptionMapROI::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PerceptionMapROI::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PerceptionMapROI::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PerceptionMapROI::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.header)
  return _internal_header();
}
inline void PerceptionMapROI::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionMapROI.header)
}
inline ::apollo::common::Header* PerceptionMapROI::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* PerceptionMapROI::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionMapROI.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PerceptionMapROI::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* PerceptionMapROI::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionMapROI.header)
  return _msg;
}
inline void PerceptionMapROI::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionMapROI.header)
}

// optional .apollo.hdmap.Header hdmap_header = 8;
inline bool PerceptionMapROI::_internal_has_hdmap_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdmap_header_ != nullptr);
  return value;
}
inline bool PerceptionMapROI::has_hdmap_header() const {
  return _internal_has_hdmap_header();
}
inline const ::apollo::hdmap::Header& PerceptionMapROI::_internal_hdmap_header() const {
  const ::apollo::hdmap::Header* p = _impl_.hdmap_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Header&>(
      ::apollo::hdmap::_Header_default_instance_);
}
inline const ::apollo::hdmap::Header& PerceptionMapROI::hdmap_header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.hdmap_header)
  return _internal_hdmap_header();
}
inline void PerceptionMapROI::unsafe_arena_set_allocated_hdmap_header(
    ::apollo::hdmap::Header* hdmap_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdmap_header_);
  }
  _impl_.hdmap_header_ = hdmap_header;
  if (hdmap_header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionMapROI.hdmap_header)
}
inline ::apollo::hdmap::Header* PerceptionMapROI::release_hdmap_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Header* temp = _impl_.hdmap_header_;
  _impl_.hdmap_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Header* PerceptionMapROI::unsafe_arena_release_hdmap_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionMapROI.hdmap_header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Header* temp = _impl_.hdmap_header_;
  _impl_.hdmap_header_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Header* PerceptionMapROI::_internal_mutable_hdmap_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.hdmap_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Header>(GetArenaForAllocation());
    _impl_.hdmap_header_ = p;
  }
  return _impl_.hdmap_header_;
}
inline ::apollo::hdmap::Header* PerceptionMapROI::mutable_hdmap_header() {
  ::apollo::hdmap::Header* _msg = _internal_mutable_hdmap_header();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionMapROI.hdmap_header)
  return _msg;
}
inline void PerceptionMapROI::set_allocated_hdmap_header(::apollo::hdmap::Header* hdmap_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdmap_header_);
  }
  if (hdmap_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdmap_header));
    if (message_arena != submessage_arena) {
      hdmap_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdmap_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hdmap_header_ = hdmap_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionMapROI.hdmap_header)
}

// optional double origin_x = 2;
inline bool PerceptionMapROI::_internal_has_origin_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerceptionMapROI::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void PerceptionMapROI::clear_origin_x() {
  _impl_.origin_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PerceptionMapROI::_internal_origin_x() const {
  return _impl_.origin_x_;
}
inline double PerceptionMapROI::origin_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.origin_x)
  return _internal_origin_x();
}
inline void PerceptionMapROI::_internal_set_origin_x(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.origin_x_ = value;
}
inline void PerceptionMapROI::set_origin_x(double value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.origin_x)
}

// optional double origin_y = 3;
inline bool PerceptionMapROI::_internal_has_origin_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionMapROI::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void PerceptionMapROI::clear_origin_y() {
  _impl_.origin_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PerceptionMapROI::_internal_origin_y() const {
  return _impl_.origin_y_;
}
inline double PerceptionMapROI::origin_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.origin_y)
  return _internal_origin_y();
}
inline void PerceptionMapROI::_internal_set_origin_y(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.origin_y_ = value;
}
inline void PerceptionMapROI::set_origin_y(double value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.origin_y)
}

// optional double grid_size = 4;
inline bool PerceptionMapROI::_internal_has_grid_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerceptionMapROI::has_grid_size() const {
  return _internal_has_grid_size();
}
inline void PerceptionMapROI::clear_grid_size() {
  _impl_.grid_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PerceptionMapROI::_internal_grid_size() const {
  return _impl_.grid_size_;
}
inline double PerceptionMapROI::grid_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.grid_size)
  return _internal_grid_size();
}
inline void PerceptionMapROI::_internal_set_grid_size(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.grid_size_ = value;
}
inline void PerceptionMapROI::set_grid_size(double value) {
  _internal_set_grid_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.grid_size)
}

// optional int32 num_rows = 5;
inline bool PerceptionMapROI::_internal_has_num_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerceptionMapROI::has_num_rows() const {
  return _internal_has_num_rows();
}
inline void PerceptionMapROI::clear_num_rows() {
  _impl_.num_rows_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t PerceptionMapROI::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int32_t PerceptionMapROI::num_rows() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.num_rows)
  return _internal_num_rows();
}
inline void PerceptionMapROI::_internal_set_num_rows(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_rows_ = value;
}
inline void PerceptionMapROI::set_num_rows(int32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.num_rows)
}

// optional int32 num_columns = 6;
inline bool PerceptionMapROI::_internal_has_num_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerceptionMapROI::has_num_columns() const {
  return _internal_has_num_columns();
}
inline void PerceptionMapROI::clear_num_columns() {
  _impl_.num_columns_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t PerceptionMapROI::_internal_num_columns() const {
  return _impl_.num_columns_;
}
inline int32_t PerceptionMapROI::num_columns() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.num_columns)
  return _internal_num_columns();
}
inline void PerceptionMapROI::_internal_set_num_columns(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.num_columns_ = value;
}
inline void PerceptionMapROI::set_num_columns(int32_t value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionMapROI.num_columns)
}

// repeated .apollo.perception.PerceptionMapROI.Region region = 7;
inline int PerceptionMapROI::_internal_region_size() const {
  return _impl_.region_.size();
}
inline int PerceptionMapROI::region_size() const {
  return _internal_region_size();
}
inline void PerceptionMapROI::clear_region() {
  _impl_.region_.Clear();
}
inline ::apollo::perception::PerceptionMapROI_Region* PerceptionMapROI::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionMapROI.region)
  return _impl_.region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionMapROI_Region >*
PerceptionMapROI::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionMapROI.region)
  return &_impl_.region_;
}
inline const ::apollo::perception::PerceptionMapROI_Region& PerceptionMapROI::_internal_region(int index) const {
  return _impl_.region_.Get(index);
}
inline const ::apollo::perception::PerceptionMapROI_Region& PerceptionMapROI::region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionMapROI.region)
  return _internal_region(index);
}
inline ::apollo::perception::PerceptionMapROI_Region* PerceptionMapROI::_internal_add_region() {
  return _impl_.region_.Add();
}
inline ::apollo::perception::PerceptionMapROI_Region* PerceptionMapROI::add_region() {
  ::apollo::perception::PerceptionMapROI_Region* _add = _internal_add_region();
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionMapROI.region)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionMapROI_Region >&
PerceptionMapROI::region() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionMapROI.region)
  return _impl_.region_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto
