// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#include "modules/perception/proto/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
PROTOBUF_CONSTEXPR TrafficLightBox::TrafficLightBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.selected_)*/false} {}
struct TrafficLightBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightBoxDefaultTypeInternal() {}
  union {
    TrafficLightBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightBoxDefaultTypeInternal _TrafficLightBox_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightDebug::TrafficLightDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.box_)*/{}
  , /*decltype(_impl_.crop_roi_)*/{}
  , /*decltype(_impl_.projected_roi_)*/{}
  , /*decltype(_impl_.rectified_roi_)*/{}
  , /*decltype(_impl_.debug_roi_)*/{}
  , /*decltype(_impl_.cropbox_)*/nullptr
  , /*decltype(_impl_.signal_num_)*/0
  , /*decltype(_impl_.valid_pos_)*/0
  , /*decltype(_impl_.ts_diff_pos_)*/0
  , /*decltype(_impl_.ts_diff_sys_)*/0
  , /*decltype(_impl_.distance_to_stop_line_)*/0
  , /*decltype(_impl_.project_error_)*/0
  , /*decltype(_impl_.camera_id_)*/0} {}
struct TrafficLightDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDebugDefaultTypeInternal() {}
  union {
    TrafficLightDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDebugDefaultTypeInternal _TrafficLightDebug_default_instance_;
PROTOBUF_CONSTEXPR TrafficLight::TrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.blink_)*/false
  , /*decltype(_impl_.tracking_time_)*/0
  , /*decltype(_impl_.remaining_time_)*/0
  , /*decltype(_impl_.confidence_)*/1} {}
struct TrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightDetection::TrafficLightDetection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.traffic_light_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.traffic_light_debug_)*/nullptr
  , /*decltype(_impl_.contain_lights_)*/false
  , /*decltype(_impl_.camera_id_)*/0} {}
struct TrafficLightDetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDetectionDefaultTypeInternal() {}
  union {
    TrafficLightDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDetectionDefaultTypeInternal _TrafficLightDetection_default_instance_;
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.selected_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _impl_.camera_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.cropbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.box_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.signal_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.valid_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.ts_diff_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.ts_diff_sys_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.project_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.distance_to_stop_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.crop_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.projected_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.rectified_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _impl_.debug_roi_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.blink_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _impl_.remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_.traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_.traffic_light_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_.contain_lights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _impl_.camera_id_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::perception::TrafficLightBox)},
  { 20, 39, -1, sizeof(::apollo::perception::TrafficLightDebug)},
  { 52, 64, -1, sizeof(::apollo::perception::TrafficLight)},
  { 70, 81, -1, sizeof(::apollo::perception::TrafficLightDetection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::_TrafficLightBox_default_instance_._instance,
  &::apollo::perception::_TrafficLightDebug_default_instance_._instance,
  &::apollo::perception::_TrafficLight_default_instance_._instance,
  &::apollo::perception::_TrafficLightDetection_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/perception/proto/traffic_light"
  "_detection.proto\022\021apollo.perception\032!mod"
  "ules/common/proto/header.proto\"\243\001\n\017Traff"
  "icLightBox\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005widt"
  "h\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\0224\n\005color\030\005 \001(\0162%"
  ".apollo.perception.TrafficLight.Color\022\020\n"
  "\010selected\030\006 \001(\010\022\023\n\013camera_name\030\007 \001(\t\"\372\003\n"
  "\021TrafficLightDebug\0223\n\007cropbox\030\001 \001(\0132\".ap"
  "ollo.perception.TrafficLightBox\022/\n\003box\030\002"
  " \003(\0132\".apollo.perception.TrafficLightBox"
  "\022\022\n\nsignal_num\030\003 \001(\005\022\021\n\tvalid_pos\030\004 \001(\005\022"
  "\023\n\013ts_diff_pos\030\005 \001(\001\022\023\n\013ts_diff_sys\030\006 \001("
  "\001\022\025\n\rproject_error\030\007 \001(\005\022\035\n\025distance_to_"
  "stop_line\030\010 \001(\001\022\025\n\tcamera_id\030\t \001(\005B\002\030\001\0224"
  "\n\010crop_roi\030\n \003(\0132\".apollo.perception.Tra"
  "fficLightBox\0229\n\rprojected_roi\030\013 \003(\0132\".ap"
  "ollo.perception.TrafficLightBox\0229\n\rrecti"
  "fied_roi\030\014 \003(\0132\".apollo.perception.Traff"
  "icLightBox\0225\n\tdebug_roi\030\r \003(\0132\".apollo.p"
  "erception.TrafficLightBox\"\346\001\n\014TrafficLig"
  "ht\0224\n\005color\030\001 \001(\0162%.apollo.perception.Tr"
  "afficLight.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfiden"
  "ce\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005bl"
  "ink\030\005 \001(\010\022\026\n\016remaining_time\030\006 \001(\001\"\?\n\005Col"
  "or\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005"
  "GREEN\020\003\022\t\n\005BLACK\020\004\"\202\003\n\025TrafficLightDetec"
  "tion\022%\n\006header\030\002 \001(\0132\025.apollo.common.Hea"
  "der\0226\n\rtraffic_light\030\001 \003(\0132\037.apollo.perc"
  "eption.TrafficLight\022A\n\023traffic_light_deb"
  "ug\030\003 \001(\0132$.apollo.perception.TrafficLigh"
  "tDebug\022\026\n\016contain_lights\030\004 \001(\010\022D\n\tcamera"
  "_id\030\005 \001(\01621.apollo.perception.TrafficLig"
  "htDetection.CameraID\"i\n\010CameraID\022\025\n\021CAME"
  "RA_FRONT_LONG\020\000\022\027\n\023CAMERA_FRONT_NARROW\020\001"
  "\022\026\n\022CAMERA_FRONT_SHORT\020\002\022\025\n\021CAMERA_FRONT"
  "_WIDE\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto = {
    false, false, 1407, descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
    "modules/perception/proto/traffic_light_detection.proto",
    &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once, descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[0];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficLight_Color TrafficLight::UNKNOWN;
constexpr TrafficLight_Color TrafficLight::RED;
constexpr TrafficLight_Color TrafficLight::YELLOW;
constexpr TrafficLight_Color TrafficLight::GREEN;
constexpr TrafficLight_Color TrafficLight::BLACK;
constexpr TrafficLight_Color TrafficLight::Color_MIN;
constexpr TrafficLight_Color TrafficLight::Color_MAX;
constexpr int TrafficLight::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightDetection_CameraID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[1];
}
bool TrafficLightDetection_CameraID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_LONG;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_NARROW;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_SHORT;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_WIDE;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MIN;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MAX;
constexpr int TrafficLightDetection::CameraID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TrafficLightBox::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightBox>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficLightBox::TrafficLightBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.TrafficLightBox)
}
TrafficLightBox::TrafficLightBox(const TrafficLightBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.selected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_name()) {
    _impl_.camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selected_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.selected_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightBox)
}

inline void TrafficLightBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.selected_){false}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficLightBox::~TrafficLightBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
}

void TrafficLightBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.camera_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selected_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.selected_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLight.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool selected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_selected(&has_bits);
          _impl_.selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.TrafficLightBox.camera_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_color(), target);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_selected(), target);
  }

  // optional string camera_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLightBox.camera_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_camera_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightBox)
  return target;
}

size_t TrafficLightBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string camera_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_name());
    }

    // optional int32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional .apollo.perception.TrafficLight.Color color = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool selected = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightBox::GetClassData() const { return &_class_data_; }

void TrafficLightBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightBox *>(to)->MergeFrom(
      static_cast<const TrafficLightBox &>(from));
}


void TrafficLightBox::MergeFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_name(from._internal_camera_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.selected_ = from._impl_.selected_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightBox::CopyFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBox::IsInitialized() const {
  return true;
}

void TrafficLightBox::InternalSwap(TrafficLightBox* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_name_, lhs_arena,
      &other->_impl_.camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightBox, _impl_.selected_)
      + sizeof(TrafficLightBox::_impl_.selected_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightBox, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[0]);
}

// ===================================================================

class TrafficLightDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDebug>()._impl_._has_bits_);
  static const ::apollo::perception::TrafficLightBox& cropbox(const TrafficLightDebug* msg);
  static void set_has_cropbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signal_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ts_diff_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ts_diff_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_project_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_distance_to_stop_line(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::TrafficLightBox&
TrafficLightDebug::_Internal::cropbox(const TrafficLightDebug* msg) {
  return *msg->_impl_.cropbox_;
}
TrafficLightDebug::TrafficLightDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.TrafficLightDebug)
}
TrafficLightDebug::TrafficLightDebug(const TrafficLightDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.box_){from._impl_.box_}
    , decltype(_impl_.crop_roi_){from._impl_.crop_roi_}
    , decltype(_impl_.projected_roi_){from._impl_.projected_roi_}
    , decltype(_impl_.rectified_roi_){from._impl_.rectified_roi_}
    , decltype(_impl_.debug_roi_){from._impl_.debug_roi_}
    , decltype(_impl_.cropbox_){nullptr}
    , decltype(_impl_.signal_num_){}
    , decltype(_impl_.valid_pos_){}
    , decltype(_impl_.ts_diff_pos_){}
    , decltype(_impl_.ts_diff_sys_){}
    , decltype(_impl_.distance_to_stop_line_){}
    , decltype(_impl_.project_error_){}
    , decltype(_impl_.camera_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cropbox()) {
    _impl_.cropbox_ = new ::apollo::perception::TrafficLightBox(*from._impl_.cropbox_);
  }
  ::memcpy(&_impl_.signal_num_, &from._impl_.signal_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camera_id_) -
    reinterpret_cast<char*>(&_impl_.signal_num_)) + sizeof(_impl_.camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDebug)
}

inline void TrafficLightDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.box_){arena}
    , decltype(_impl_.crop_roi_){arena}
    , decltype(_impl_.projected_roi_){arena}
    , decltype(_impl_.rectified_roi_){arena}
    , decltype(_impl_.debug_roi_){arena}
    , decltype(_impl_.cropbox_){nullptr}
    , decltype(_impl_.signal_num_){0}
    , decltype(_impl_.valid_pos_){0}
    , decltype(_impl_.ts_diff_pos_){0}
    , decltype(_impl_.ts_diff_sys_){0}
    , decltype(_impl_.distance_to_stop_line_){0}
    , decltype(_impl_.project_error_){0}
    , decltype(_impl_.camera_id_){0}
  };
}

TrafficLightDebug::~TrafficLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.box_.~RepeatedPtrField();
  _impl_.crop_roi_.~RepeatedPtrField();
  _impl_.projected_roi_.~RepeatedPtrField();
  _impl_.rectified_roi_.~RepeatedPtrField();
  _impl_.debug_roi_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cropbox_;
}

void TrafficLightDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.box_.Clear();
  _impl_.crop_roi_.Clear();
  _impl_.projected_roi_.Clear();
  _impl_.rectified_roi_.Clear();
  _impl_.debug_roi_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cropbox_ != nullptr);
    _impl_.cropbox_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.signal_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.camera_id_) -
        reinterpret_cast<char*>(&_impl_.signal_num_)) + sizeof(_impl_.camera_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLightBox cropbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cropbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 signal_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_signal_num(&has_bits);
          _impl_.signal_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 valid_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_valid_pos(&has_bits);
          _impl_.valid_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ts_diff_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_ts_diff_pos(&has_bits);
          _impl_.ts_diff_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ts_diff_sys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_ts_diff_sys(&has_bits);
          _impl_.ts_diff_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 project_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_project_error(&has_bits);
          _impl_.project_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance_to_stop_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_distance_to_stop_line(&has_bits);
          _impl_.distance_to_stop_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 camera_id = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crop_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projected_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rectified_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cropbox(this),
        _Internal::cropbox(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_box_size()); i < n; i++) {
    const auto& repfield = this->_internal_box(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_signal_num(), target);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_valid_pos(), target);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_ts_diff_pos(), target);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_ts_diff_sys(), target);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_project_error(), target);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_distance_to_stop_line(), target);
  }

  // optional int32 camera_id = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_camera_id(), target);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crop_roi_size()); i < n; i++) {
    const auto& repfield = this->_internal_crop_roi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_projected_roi_size()); i < n; i++) {
    const auto& repfield = this->_internal_projected_roi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rectified_roi_size()); i < n; i++) {
    const auto& repfield = this->_internal_rectified_roi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_roi_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_roi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDebug)
  return target;
}

size_t TrafficLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLightBox box = 2;
  total_size += 1UL * this->_internal_box_size();
  for (const auto& msg : this->_impl_.box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  total_size += 1UL * this->_internal_crop_roi_size();
  for (const auto& msg : this->_impl_.crop_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  total_size += 1UL * this->_internal_projected_roi_size();
  for (const auto& msg : this->_impl_.projected_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  total_size += 1UL * this->_internal_rectified_roi_size();
  for (const auto& msg : this->_impl_.rectified_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  total_size += 1UL * this->_internal_debug_roi_size();
  for (const auto& msg : this->_impl_.debug_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.TrafficLightBox cropbox = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cropbox_);
    }

    // optional int32 signal_num = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signal_num());
    }

    // optional int32 valid_pos = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_valid_pos());
    }

    // optional double ts_diff_pos = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ts_diff_sys = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double distance_to_stop_line = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 project_error = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_project_error());
    }

    // optional int32 camera_id = 9 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camera_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightDebug::GetClassData() const { return &_class_data_; }

void TrafficLightDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightDebug *>(to)->MergeFrom(
      static_cast<const TrafficLightDebug &>(from));
}


void TrafficLightDebug::MergeFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.box_.MergeFrom(from._impl_.box_);
  _impl_.crop_roi_.MergeFrom(from._impl_.crop_roi_);
  _impl_.projected_roi_.MergeFrom(from._impl_.projected_roi_);
  _impl_.rectified_roi_.MergeFrom(from._impl_.rectified_roi_);
  _impl_.debug_roi_.MergeFrom(from._impl_.debug_roi_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cropbox()->::apollo::perception::TrafficLightBox::MergeFrom(from._internal_cropbox());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signal_num_ = from._impl_.signal_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.valid_pos_ = from._impl_.valid_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ts_diff_pos_ = from._impl_.ts_diff_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ts_diff_sys_ = from._impl_.ts_diff_sys_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.distance_to_stop_line_ = from._impl_.distance_to_stop_line_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.project_error_ = from._impl_.project_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.camera_id_ = from._impl_.camera_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightDebug::CopyFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDebug::IsInitialized() const {
  return true;
}

void TrafficLightDebug::InternalSwap(TrafficLightDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.box_.InternalSwap(&other->_impl_.box_);
  _impl_.crop_roi_.InternalSwap(&other->_impl_.crop_roi_);
  _impl_.projected_roi_.InternalSwap(&other->_impl_.projected_roi_);
  _impl_.rectified_roi_.InternalSwap(&other->_impl_.rectified_roi_);
  _impl_.debug_roi_.InternalSwap(&other->_impl_.debug_roi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightDebug, _impl_.camera_id_)
      + sizeof(TrafficLightDebug::_impl_.camera_id_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightDebug, _impl_.cropbox_)>(
          reinterpret_cast<char*>(&_impl_.cropbox_),
          reinterpret_cast<char*>(&other->_impl_.cropbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[1]);
}

// ===================================================================

class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.blink_){}
    , decltype(_impl_.tracking_time_){}
    , decltype(_impl_.remaining_time_){}
    , decltype(_impl_.confidence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLight)
}

inline void TrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.blink_){false}
    , decltype(_impl_.tracking_time_){0}
    , decltype(_impl_.remaining_time_){0}
    , decltype(_impl_.confidence_){1}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void TrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remaining_time_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.remaining_time_));
    _impl_.confidence_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.TrafficLight.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_tracking_time(&has_bits);
          _impl_.tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool blink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_blink(&has_bits);
          _impl_.blink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double remaining_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_remaining_time(&has_bits);
          _impl_.remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool blink = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight::GetClassData() const { return &_class_data_; }

void TrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLight *>(to)->MergeFrom(
      static_cast<const TrafficLight &>(from));
}


void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.blink_ = from._impl_.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tracking_time_ = from._impl_.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.remaining_time_ = from._impl_.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_)
      + sizeof(TrafficLight::_impl_.remaining_time_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[2]);
}

// ===================================================================

class TrafficLightDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDetection>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const TrafficLightDetection* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::TrafficLightDebug& traffic_light_debug(const TrafficLightDetection* msg);
  static void set_has_traffic_light_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contain_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
TrafficLightDetection::_Internal::header(const TrafficLightDetection* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::perception::TrafficLightDebug&
TrafficLightDetection::_Internal::traffic_light_debug(const TrafficLightDetection* msg) {
  return *msg->_impl_.traffic_light_debug_;
}
void TrafficLightDetection::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TrafficLightDetection::TrafficLightDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_){from._impl_.traffic_light_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.traffic_light_debug_){nullptr}
    , decltype(_impl_.contain_lights_){}
    , decltype(_impl_.camera_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_traffic_light_debug()) {
    _impl_.traffic_light_debug_ = new ::apollo::perception::TrafficLightDebug(*from._impl_.traffic_light_debug_);
  }
  ::memcpy(&_impl_.contain_lights_, &from._impl_.contain_lights_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camera_id_) -
    reinterpret_cast<char*>(&_impl_.contain_lights_)) + sizeof(_impl_.camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDetection)
}

inline void TrafficLightDetection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.traffic_light_debug_){nullptr}
    , decltype(_impl_.contain_lights_){false}
    , decltype(_impl_.camera_id_){0}
  };
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDetection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traffic_light_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.traffic_light_debug_;
}

void TrafficLightDetection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDetection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traffic_light_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.traffic_light_debug_ != nullptr);
      _impl_.traffic_light_debug_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.contain_lights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.camera_id_) -
        reinterpret_cast<char*>(&_impl_.contain_lights_)) + sizeof(_impl_.camera_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightDetection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.TrafficLight traffic_light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contain_lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_contain_lights(&has_bits);
          _impl_.contain_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLightDetection_CameraID_IsValid(val))) {
            _internal_set_camera_id(static_cast<::apollo::perception::TrafficLightDetection_CameraID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightDetection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDetection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_light_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_light(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::traffic_light_debug(this),
        _Internal::traffic_light_debug(this).GetCachedSize(), target, stream);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_contain_lights(), target);
  }

  // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDetection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  total_size += 1UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->_impl_.traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_light_debug_);
    }

    // optional bool contain_lights = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_camera_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightDetection::GetClassData() const { return &_class_data_; }

void TrafficLightDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightDetection *>(to)->MergeFrom(
      static_cast<const TrafficLightDetection &>(from));
}


void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.traffic_light_.MergeFrom(from._impl_.traffic_light_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_traffic_light_debug()->::apollo::perception::TrafficLightDebug::MergeFrom(from._internal_traffic_light_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.contain_lights_ = from._impl_.contain_lights_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.camera_id_ = from._impl_.camera_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traffic_light_.InternalSwap(&other->_impl_.traffic_light_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightDetection, _impl_.camera_id_)
      + sizeof(TrafficLightDetection::_impl_.camera_id_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightDetection, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDetection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightBox*
Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::TrafficLightBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightDebug*
Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::TrafficLightDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLight*
Arena::CreateMaybeMessage< ::apollo::perception::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightDetection*
Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::TrafficLightDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
