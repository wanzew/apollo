// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/map/proto/map_lane.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
namespace apollo {
namespace perception {
class CIPVInfo;
struct CIPVInfoDefaultTypeInternal;
extern CIPVInfoDefaultTypeInternal _CIPVInfo_default_instance_;
class LaneMarker;
struct LaneMarkerDefaultTypeInternal;
extern LaneMarkerDefaultTypeInternal _LaneMarker_default_instance_;
class LaneMarkers;
struct LaneMarkersDefaultTypeInternal;
extern LaneMarkersDefaultTypeInternal _LaneMarkers_default_instance_;
class PerceptionObstacle;
struct PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
struct PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::CIPVInfo* Arena::CreateMaybeMessage<::apollo::perception::CIPVInfo>(Arena*);
template<> ::apollo::perception::LaneMarker* Arena::CreateMaybeMessage<::apollo::perception::LaneMarker>(Arena*);
template<> ::apollo::perception::LaneMarkers* Arena::CreateMaybeMessage<::apollo::perception::LaneMarkers>(Arena*);
template<> ::apollo::perception::PerceptionObstacle* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(Arena*);
template<> ::apollo::perception::PerceptionObstacles* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacles>(Arena*);
template<> ::apollo::perception::Point* Arena::CreateMaybeMessage<::apollo::perception::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

enum PerceptionObstacle_Type : int {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5
};
bool PerceptionObstacle_Type_IsValid(int value);
constexpr PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
constexpr PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
constexpr int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_Type_descriptor();
template<typename T>
inline const std::string& PerceptionObstacle_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionObstacle_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionObstacle_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), enum_t_value);
}
inline bool PerceptionObstacle_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerceptionObstacle_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionObstacle_ConfidenceType : int {
  PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN = 0,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN = 1,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR = 2
};
bool PerceptionObstacle_ConfidenceType_IsValid(int value);
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MIN = PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MAX = PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
constexpr int PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE = PerceptionObstacle_ConfidenceType_ConfidenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor();
template<typename T>
inline const std::string& PerceptionObstacle_ConfidenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionObstacle_ConfidenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionObstacle_ConfidenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionObstacle_ConfidenceType_descriptor(), enum_t_value);
}
inline bool PerceptionObstacle_ConfidenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerceptionObstacle_ConfidenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionObstacle_ConfidenceType>(
    PerceptionObstacle_ConfidenceType_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PerceptionObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacle) */ {
 public:
  inline PerceptionObstacle() : PerceptionObstacle(nullptr) {}
  ~PerceptionObstacle() override;
  explicit PROTOBUF_CONSTEXPR PerceptionObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionObstacle(const PerceptionObstacle& from);
  PerceptionObstacle(PerceptionObstacle&& from) noexcept
    : PerceptionObstacle() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionObstacle& operator=(PerceptionObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerceptionObstacle& a, PerceptionObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerceptionObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerceptionObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerceptionObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerceptionObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionObstacle";
  }
  protected:
  explicit PerceptionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static constexpr Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static constexpr Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static constexpr Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static constexpr Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static constexpr Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static constexpr Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PerceptionObstacle_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  typedef PerceptionObstacle_ConfidenceType ConfidenceType;
  static constexpr ConfidenceType CONFIDENCE_UNKNOWN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
  static constexpr ConfidenceType CONFIDENCE_CNN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN;
  static constexpr ConfidenceType CONFIDENCE_RADAR =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
  static inline bool ConfidenceType_IsValid(int value) {
    return PerceptionObstacle_ConfidenceType_IsValid(value);
  }
  static constexpr ConfidenceType ConfidenceType_MIN =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MIN;
  static constexpr ConfidenceType ConfidenceType_MAX =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MAX;
  static constexpr int ConfidenceType_ARRAYSIZE =
    PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConfidenceType_descriptor() {
    return PerceptionObstacle_ConfidenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConfidenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConfidenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConfidenceType_Name.");
    return PerceptionObstacle_ConfidenceType_Name(enum_t_value);
  }
  static inline bool ConfidenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConfidenceType* value) {
    return PerceptionObstacle_ConfidenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 8,
    kPointCloudFieldNumber = 12,
    kDropsFieldNumber = 15,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 4,
    kThetaFieldNumber = 3,
    kLengthFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 10,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kTrackingTimeFieldNumber = 9,
    kTimestampFieldNumber = 11,
    kConfidenceTypeFieldNumber = 14,
    kConfidenceFieldNumber = 13,
  };
  // repeated .apollo.perception.Point polygon_point = 8;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::perception::Point* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >*
      mutable_polygon_point();
  private:
  const ::apollo::perception::Point& _internal_polygon_point(int index) const;
  ::apollo::perception::Point* _internal_add_polygon_point();
  public:
  const ::apollo::perception::Point& polygon_point(int index) const;
  ::apollo::perception::Point* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >&
      polygon_point() const;

  // repeated double point_cloud = 12 [packed = true];
  int point_cloud_size() const;
  private:
  int _internal_point_cloud_size() const;
  public:
  void clear_point_cloud();
  private:
  double _internal_point_cloud(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_point_cloud() const;
  void _internal_add_point_cloud(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_point_cloud();
  public:
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      point_cloud() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_point_cloud();

  // repeated .apollo.perception.Point drops = 15;
  int drops_size() const;
  private:
  int _internal_drops_size() const;
  public:
  void clear_drops();
  ::apollo::perception::Point* mutable_drops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >*
      mutable_drops();
  private:
  const ::apollo::perception::Point& _internal_drops(int index) const;
  ::apollo::perception::Point* _internal_add_drops();
  public:
  const ::apollo::perception::Point& drops(int index) const;
  ::apollo::perception::Point* add_drops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >&
      drops() const;

  // optional .apollo.perception.Point position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::perception::Point& position() const;
  PROTOBUF_NODISCARD ::apollo::perception::Point* release_position();
  ::apollo::perception::Point* mutable_position();
  void set_allocated_position(::apollo::perception::Point* position);
  private:
  const ::apollo::perception::Point& _internal_position() const;
  ::apollo::perception::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::perception::Point* position);
  ::apollo::perception::Point* unsafe_arena_release_position();

  // optional .apollo.perception.Point velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::perception::Point& velocity() const;
  PROTOBUF_NODISCARD ::apollo::perception::Point* release_velocity();
  ::apollo::perception::Point* mutable_velocity();
  void set_allocated_velocity(::apollo::perception::Point* velocity);
  private:
  const ::apollo::perception::Point& _internal_velocity() const;
  ::apollo::perception::Point* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::perception::Point* velocity);
  ::apollo::perception::Point* unsafe_arena_release_velocity();

  // optional double theta = 3;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 5;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double tracking_time = 9;
  bool has_tracking_time() const;
  private:
  bool _internal_has_tracking_time() const;
  public:
  void clear_tracking_time();
  double tracking_time() const;
  void set_tracking_time(double value);
  private:
  double _internal_tracking_time() const;
  void _internal_set_tracking_time(double value);
  public:

  // optional double timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  bool has_confidence_type() const;
  private:
  bool _internal_has_confidence_type() const;
  public:
  void clear_confidence_type();
  ::apollo::perception::PerceptionObstacle_ConfidenceType confidence_type() const;
  void set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value);
  private:
  ::apollo::perception::PerceptionObstacle_ConfidenceType _internal_confidence_type() const;
  void _internal_set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value);
  public:

  // optional double confidence = 13 [default = 1];
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point > polygon_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > point_cloud_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point > drops_;
    ::apollo::perception::Point* position_;
    ::apollo::perception::Point* velocity_;
    double theta_;
    double length_;
    int32_t id_;
    int type_;
    double width_;
    double height_;
    double tracking_time_;
    double timestamp_;
    int confidence_type_;
    double confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class CIPVInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.CIPVInfo) */ {
 public:
  inline CIPVInfo() : CIPVInfo(nullptr) {}
  ~CIPVInfo() override;
  explicit PROTOBUF_CONSTEXPR CIPVInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CIPVInfo(const CIPVInfo& from);
  CIPVInfo(CIPVInfo&& from) noexcept
    : CIPVInfo() {
    *this = ::std::move(from);
  }

  inline CIPVInfo& operator=(const CIPVInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIPVInfo& operator=(CIPVInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CIPVInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CIPVInfo* internal_default_instance() {
    return reinterpret_cast<const CIPVInfo*>(
               &_CIPVInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CIPVInfo& a, CIPVInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CIPVInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIPVInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CIPVInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CIPVInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CIPVInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CIPVInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CIPVInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.CIPVInfo";
  }
  protected:
  explicit CIPVInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPotentialCipvIdFieldNumber = 2,
    kCipvIdFieldNumber = 1,
  };
  // repeated int32 potential_cipv_id = 2;
  int potential_cipv_id_size() const;
  private:
  int _internal_potential_cipv_id_size() const;
  public:
  void clear_potential_cipv_id();
  private:
  int32_t _internal_potential_cipv_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_potential_cipv_id() const;
  void _internal_add_potential_cipv_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_potential_cipv_id();
  public:
  int32_t potential_cipv_id(int index) const;
  void set_potential_cipv_id(int index, int32_t value);
  void add_potential_cipv_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      potential_cipv_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_potential_cipv_id();

  // optional int32 cipv_id = 1;
  bool has_cipv_id() const;
  private:
  bool _internal_has_cipv_id() const;
  public:
  void clear_cipv_id();
  int32_t cipv_id() const;
  void set_cipv_id(int32_t value);
  private:
  int32_t _internal_cipv_id() const;
  void _internal_set_cipv_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.CIPVInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > potential_cipv_id_;
    int32_t cipv_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LaneMarker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarker) */ {
 public:
  inline LaneMarker() : LaneMarker(nullptr) {}
  ~LaneMarker() override;
  explicit PROTOBUF_CONSTEXPR LaneMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneMarker(const LaneMarker& from);
  LaneMarker(LaneMarker&& from) noexcept
    : LaneMarker() {
    *this = ::std::move(from);
  }

  inline LaneMarker& operator=(const LaneMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarker& operator=(LaneMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneMarker* internal_default_instance() {
    return reinterpret_cast<const LaneMarker*>(
               &_LaneMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaneMarker& a, LaneMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneMarker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneMarker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.LaneMarker";
  }
  protected:
  explicit LaneMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualityFieldNumber = 2,
    kLaneTypeFieldNumber = 1,
    kModelDegreeFieldNumber = 3,
    kC0PositionFieldNumber = 4,
    kC1HeadingAngleFieldNumber = 5,
    kC2CurvatureFieldNumber = 6,
    kC3CurvatureDerivativeFieldNumber = 7,
    kViewRangeFieldNumber = 8,
    kLongitudeStartFieldNumber = 9,
    kLongitudeEndFieldNumber = 10,
  };
  // optional double quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  double quality() const;
  void set_quality(double value);
  private:
  double _internal_quality() const;
  void _internal_set_quality(double value);
  public:

  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::apollo::hdmap::LaneBoundaryType_Type lane_type() const;
  void set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value);
  private:
  ::apollo::hdmap::LaneBoundaryType_Type _internal_lane_type() const;
  void _internal_set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value);
  public:

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  private:
  bool _internal_has_model_degree() const;
  public:
  void clear_model_degree();
  int32_t model_degree() const;
  void set_model_degree(int32_t value);
  private:
  int32_t _internal_model_degree() const;
  void _internal_set_model_degree(int32_t value);
  public:

  // optional double c0_position = 4;
  bool has_c0_position() const;
  private:
  bool _internal_has_c0_position() const;
  public:
  void clear_c0_position();
  double c0_position() const;
  void set_c0_position(double value);
  private:
  double _internal_c0_position() const;
  void _internal_set_c0_position(double value);
  public:

  // optional double c1_heading_angle = 5;
  bool has_c1_heading_angle() const;
  private:
  bool _internal_has_c1_heading_angle() const;
  public:
  void clear_c1_heading_angle();
  double c1_heading_angle() const;
  void set_c1_heading_angle(double value);
  private:
  double _internal_c1_heading_angle() const;
  void _internal_set_c1_heading_angle(double value);
  public:

  // optional double c2_curvature = 6;
  bool has_c2_curvature() const;
  private:
  bool _internal_has_c2_curvature() const;
  public:
  void clear_c2_curvature();
  double c2_curvature() const;
  void set_c2_curvature(double value);
  private:
  double _internal_c2_curvature() const;
  void _internal_set_c2_curvature(double value);
  public:

  // optional double c3_curvature_derivative = 7;
  bool has_c3_curvature_derivative() const;
  private:
  bool _internal_has_c3_curvature_derivative() const;
  public:
  void clear_c3_curvature_derivative();
  double c3_curvature_derivative() const;
  void set_c3_curvature_derivative(double value);
  private:
  double _internal_c3_curvature_derivative() const;
  void _internal_set_c3_curvature_derivative(double value);
  public:

  // optional double view_range = 8;
  bool has_view_range() const;
  private:
  bool _internal_has_view_range() const;
  public:
  void clear_view_range();
  double view_range() const;
  void set_view_range(double value);
  private:
  double _internal_view_range() const;
  void _internal_set_view_range(double value);
  public:

  // optional double longitude_start = 9;
  bool has_longitude_start() const;
  private:
  bool _internal_has_longitude_start() const;
  public:
  void clear_longitude_start();
  double longitude_start() const;
  void set_longitude_start(double value);
  private:
  double _internal_longitude_start() const;
  void _internal_set_longitude_start(double value);
  public:

  // optional double longitude_end = 10;
  bool has_longitude_end() const;
  private:
  bool _internal_has_longitude_end() const;
  public:
  void clear_longitude_end();
  double longitude_end() const;
  void set_longitude_end(double value);
  private:
  double _internal_longitude_end() const;
  void _internal_set_longitude_end(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double quality_;
    int lane_type_;
    int32_t model_degree_;
    double c0_position_;
    double c1_heading_angle_;
    double c2_curvature_;
    double c3_curvature_derivative_;
    double view_range_;
    double longitude_start_;
    double longitude_end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LaneMarkers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarkers) */ {
 public:
  inline LaneMarkers() : LaneMarkers(nullptr) {}
  ~LaneMarkers() override;
  explicit PROTOBUF_CONSTEXPR LaneMarkers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneMarkers(const LaneMarkers& from);
  LaneMarkers(LaneMarkers&& from) noexcept
    : LaneMarkers() {
    *this = ::std::move(from);
  }

  inline LaneMarkers& operator=(const LaneMarkers& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkers& operator=(LaneMarkers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneMarkers& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneMarkers* internal_default_instance() {
    return reinterpret_cast<const LaneMarkers*>(
               &_LaneMarkers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LaneMarkers& a, LaneMarkers& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneMarkers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneMarkers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneMarkers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneMarkers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneMarkers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.LaneMarkers";
  }
  protected:
  explicit LaneMarkers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextLeftLaneMarkerFieldNumber = 3,
    kNextRightLaneMarkerFieldNumber = 4,
    kLeftLaneMarkerFieldNumber = 1,
    kRightLaneMarkerFieldNumber = 2,
  };
  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  int next_left_lane_marker_size() const;
  private:
  int _internal_next_left_lane_marker_size() const;
  public:
  void clear_next_left_lane_marker();
  ::apollo::perception::LaneMarker* mutable_next_left_lane_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_left_lane_marker();
  private:
  const ::apollo::perception::LaneMarker& _internal_next_left_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* _internal_add_next_left_lane_marker();
  public:
  const ::apollo::perception::LaneMarker& next_left_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* add_next_left_lane_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_left_lane_marker() const;

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  int next_right_lane_marker_size() const;
  private:
  int _internal_next_right_lane_marker_size() const;
  public:
  void clear_next_right_lane_marker();
  ::apollo::perception::LaneMarker* mutable_next_right_lane_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_right_lane_marker();
  private:
  const ::apollo::perception::LaneMarker& _internal_next_right_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* _internal_add_next_right_lane_marker();
  public:
  const ::apollo::perception::LaneMarker& next_right_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* add_next_right_lane_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_right_lane_marker() const;

  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  bool has_left_lane_marker() const;
  private:
  bool _internal_has_left_lane_marker() const;
  public:
  void clear_left_lane_marker();
  const ::apollo::perception::LaneMarker& left_lane_marker() const;
  PROTOBUF_NODISCARD ::apollo::perception::LaneMarker* release_left_lane_marker();
  ::apollo::perception::LaneMarker* mutable_left_lane_marker();
  void set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker);
  private:
  const ::apollo::perception::LaneMarker& _internal_left_lane_marker() const;
  ::apollo::perception::LaneMarker* _internal_mutable_left_lane_marker();
  public:
  void unsafe_arena_set_allocated_left_lane_marker(
      ::apollo::perception::LaneMarker* left_lane_marker);
  ::apollo::perception::LaneMarker* unsafe_arena_release_left_lane_marker();

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  bool has_right_lane_marker() const;
  private:
  bool _internal_has_right_lane_marker() const;
  public:
  void clear_right_lane_marker();
  const ::apollo::perception::LaneMarker& right_lane_marker() const;
  PROTOBUF_NODISCARD ::apollo::perception::LaneMarker* release_right_lane_marker();
  ::apollo::perception::LaneMarker* mutable_right_lane_marker();
  void set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker);
  private:
  const ::apollo::perception::LaneMarker& _internal_right_lane_marker() const;
  ::apollo::perception::LaneMarker* _internal_mutable_right_lane_marker();
  public:
  void unsafe_arena_set_allocated_right_lane_marker(
      ::apollo::perception::LaneMarker* right_lane_marker);
  ::apollo::perception::LaneMarker* unsafe_arena_release_right_lane_marker();

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarkers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker > next_left_lane_marker_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker > next_right_lane_marker_;
    ::apollo::perception::LaneMarker* left_lane_marker_;
    ::apollo::perception::LaneMarker* right_lane_marker_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PerceptionObstacles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacles) */ {
 public:
  inline PerceptionObstacles() : PerceptionObstacles(nullptr) {}
  ~PerceptionObstacles() override;
  explicit PROTOBUF_CONSTEXPR PerceptionObstacles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionObstacles(const PerceptionObstacles& from);
  PerceptionObstacles(PerceptionObstacles&& from) noexcept
    : PerceptionObstacles() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionObstacles& operator=(PerceptionObstacles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionObstacles& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionObstacles* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacles*>(
               &_PerceptionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PerceptionObstacles& a, PerceptionObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionObstacles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionObstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerceptionObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerceptionObstacles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerceptionObstacles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerceptionObstacles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionObstacles";
  }
  protected:
  explicit PerceptionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerceptionObstacleFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kLaneMarkerFieldNumber = 4,
    kCipvInfoFieldNumber = 5,
    kErrorCodeFieldNumber = 3,
  };
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  private:
  int _internal_perception_obstacle_size() const;
  public:
  void clear_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
      mutable_perception_obstacle();
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* _internal_add_perception_obstacle();
  public:
  const ::apollo::perception::PerceptionObstacle& perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* add_perception_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
      perception_obstacle() const;

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  bool has_lane_marker() const;
  private:
  bool _internal_has_lane_marker() const;
  public:
  void clear_lane_marker();
  const ::apollo::perception::LaneMarkers& lane_marker() const;
  PROTOBUF_NODISCARD ::apollo::perception::LaneMarkers* release_lane_marker();
  ::apollo::perception::LaneMarkers* mutable_lane_marker();
  void set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker);
  private:
  const ::apollo::perception::LaneMarkers& _internal_lane_marker() const;
  ::apollo::perception::LaneMarkers* _internal_mutable_lane_marker();
  public:
  void unsafe_arena_set_allocated_lane_marker(
      ::apollo::perception::LaneMarkers* lane_marker);
  ::apollo::perception::LaneMarkers* unsafe_arena_release_lane_marker();

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  bool has_cipv_info() const;
  private:
  bool _internal_has_cipv_info() const;
  public:
  void clear_cipv_info();
  const ::apollo::perception::CIPVInfo& cipv_info() const;
  PROTOBUF_NODISCARD ::apollo::perception::CIPVInfo* release_cipv_info();
  ::apollo::perception::CIPVInfo* mutable_cipv_info();
  void set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info);
  private:
  const ::apollo::perception::CIPVInfo& _internal_cipv_info() const;
  ::apollo::perception::CIPVInfo* _internal_mutable_cipv_info();
  public:
  void unsafe_arena_set_allocated_cipv_info(
      ::apollo::perception::CIPVInfo* cipv_info);
  ::apollo::perception::CIPVInfo* unsafe_arena_release_cipv_info();

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle > perception_obstacle_;
    ::apollo::common::Header* header_;
    ::apollo::perception::LaneMarkers* lane_marker_;
    ::apollo::perception::CIPVInfo* cipv_info_;
    int error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// optional double x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.Point.x)
}

// optional double y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.Point.y)
}

// optional double z = 3;
inline bool Point::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_z() const {
  return _internal_has_z();
}
inline void Point::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Point::_internal_z() const {
  return _impl_.z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.perception.Point.z)
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_id() const {
  return _internal_has_id();
}
inline void PerceptionObstacle::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t PerceptionObstacle::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return _internal_id();
}
inline void PerceptionObstacle::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void PerceptionObstacle::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.perception.Point position = 2;
inline bool PerceptionObstacle::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_position() const {
  return _internal_has_position();
}
inline void PerceptionObstacle::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_position() const {
  const ::apollo::perception::Point* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::Point&>(
      ::apollo::perception::_Point_default_instance_);
}
inline const ::apollo::perception::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return _internal_position();
}
inline void PerceptionObstacle::unsafe_arena_set_allocated_position(
    ::apollo::perception::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionObstacle.position)
}
inline ::apollo::perception::Point* PerceptionObstacle::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::Point>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_position() {
  ::apollo::perception::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return _msg;
}
inline void PerceptionObstacle::set_allocated_position(::apollo::perception::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
inline bool PerceptionObstacle::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_theta() const {
  return _internal_has_theta();
}
inline void PerceptionObstacle::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PerceptionObstacle::_internal_theta() const {
  return _impl_.theta_;
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return _internal_theta();
}
inline void PerceptionObstacle::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.theta_ = value;
}
inline void PerceptionObstacle::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.perception.Point velocity = 4;
inline bool PerceptionObstacle::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_velocity() const {
  return _internal_has_velocity();
}
inline void PerceptionObstacle::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_velocity() const {
  const ::apollo::perception::Point* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::Point&>(
      ::apollo::perception::_Point_default_instance_);
}
inline const ::apollo::perception::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return _internal_velocity();
}
inline void PerceptionObstacle::unsafe_arena_set_allocated_velocity(
    ::apollo::perception::Point* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}
inline ::apollo::perception::Point* PerceptionObstacle::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::Point* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::Point* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::apollo::perception::Point* PerceptionObstacle::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::Point>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_velocity() {
  ::apollo::perception::Point* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return _msg;
}
inline void PerceptionObstacle::set_allocated_velocity(::apollo::perception::Point* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
inline bool PerceptionObstacle::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_length() const {
  return _internal_has_length();
}
inline void PerceptionObstacle::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PerceptionObstacle::_internal_length() const {
  return _impl_.length_;
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return _internal_length();
}
inline void PerceptionObstacle::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.length_ = value;
}
inline void PerceptionObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
inline bool PerceptionObstacle::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_width() const {
  return _internal_has_width();
}
inline void PerceptionObstacle::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PerceptionObstacle::_internal_width() const {
  return _impl_.width_;
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return _internal_width();
}
inline void PerceptionObstacle::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.width_ = value;
}
inline void PerceptionObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
inline bool PerceptionObstacle::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_height() const {
  return _internal_has_height();
}
inline void PerceptionObstacle::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PerceptionObstacle::_internal_height() const {
  return _impl_.height_;
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return _internal_height();
}
inline void PerceptionObstacle::_internal_set_height(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.height_ = value;
}
inline void PerceptionObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.perception.Point polygon_point = 8;
inline int PerceptionObstacle::_internal_polygon_point_size() const {
  return _impl_.polygon_point_.size();
}
inline int PerceptionObstacle::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline void PerceptionObstacle::clear_polygon_point() {
  _impl_.polygon_point_.Clear();
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return _impl_.polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &_impl_.polygon_point_;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_polygon_point(int index) const {
  return _impl_.polygon_point_.Get(index);
}
inline const ::apollo::perception::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::perception::Point* PerceptionObstacle::_internal_add_polygon_point() {
  return _impl_.polygon_point_.Add();
}
inline ::apollo::perception::Point* PerceptionObstacle::add_polygon_point() {
  ::apollo::perception::Point* _add = _internal_add_polygon_point();
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return _impl_.polygon_point_;
}

// optional double tracking_time = 9;
inline bool PerceptionObstacle::_internal_has_tracking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_tracking_time() const {
  return _internal_has_tracking_time();
}
inline void PerceptionObstacle::clear_tracking_time() {
  _impl_.tracking_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double PerceptionObstacle::_internal_tracking_time() const {
  return _impl_.tracking_time_;
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return _internal_tracking_time();
}
inline void PerceptionObstacle::_internal_set_tracking_time(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tracking_time_ = value;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
inline bool PerceptionObstacle::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_type() const {
  return _internal_has_type();
}
inline void PerceptionObstacle::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::_internal_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(_impl_.type_);
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return _internal_type();
}
inline void PerceptionObstacle::_internal_set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}
inline void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
inline bool PerceptionObstacle::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PerceptionObstacle::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double PerceptionObstacle::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return _internal_timestamp();
}
inline void PerceptionObstacle::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.timestamp_ = value;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
inline int PerceptionObstacle::_internal_point_cloud_size() const {
  return _impl_.point_cloud_.size();
}
inline int PerceptionObstacle::point_cloud_size() const {
  return _internal_point_cloud_size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  _impl_.point_cloud_.Clear();
}
inline double PerceptionObstacle::_internal_point_cloud(int index) const {
  return _impl_.point_cloud_.Get(index);
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_point_cloud(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  _impl_.point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::_internal_add_point_cloud(double value) {
  _impl_.point_cloud_.Add(value);
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  _internal_add_point_cloud(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::_internal_point_cloud() const {
  return _impl_.point_cloud_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_point_cloud();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::_internal_mutable_point_cloud() {
  return &_impl_.point_cloud_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_mutable_point_cloud();
}

// optional double confidence = 13 [default = 1];
inline bool PerceptionObstacle::_internal_has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_confidence() const {
  return _internal_has_confidence();
}
inline void PerceptionObstacle::clear_confidence() {
  _impl_.confidence_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double PerceptionObstacle::_internal_confidence() const {
  return _impl_.confidence_;
}
inline double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence)
  return _internal_confidence();
}
inline void PerceptionObstacle::_internal_set_confidence(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.confidence_ = value;
}
inline void PerceptionObstacle::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence)
}

// optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
inline bool PerceptionObstacle::_internal_has_confidence_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_confidence_type() const {
  return _internal_has_confidence_type();
}
inline void PerceptionObstacle::clear_confidence_type() {
  _impl_.confidence_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::_internal_confidence_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(_impl_.confidence_type_);
}
inline ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence_type)
  return _internal_confidence_type();
}
inline void PerceptionObstacle::_internal_set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.confidence_type_ = value;
}
inline void PerceptionObstacle::set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  _internal_set_confidence_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence_type)
}

// repeated .apollo.perception.Point drops = 15;
inline int PerceptionObstacle::_internal_drops_size() const {
  return _impl_.drops_.size();
}
inline int PerceptionObstacle::drops_size() const {
  return _internal_drops_size();
}
inline void PerceptionObstacle::clear_drops() {
  _impl_.drops_.Clear();
}
inline ::apollo::perception::Point* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.drops)
  return _impl_.drops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.drops)
  return &_impl_.drops_;
}
inline const ::apollo::perception::Point& PerceptionObstacle::_internal_drops(int index) const {
  return _impl_.drops_.Get(index);
}
inline const ::apollo::perception::Point& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.drops)
  return _internal_drops(index);
}
inline ::apollo::perception::Point* PerceptionObstacle::_internal_add_drops() {
  return _impl_.drops_.Add();
}
inline ::apollo::perception::Point* PerceptionObstacle::add_drops() {
  ::apollo::perception::Point* _add = _internal_add_drops();
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.drops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::Point >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.drops)
  return _impl_.drops_;
}

// -------------------------------------------------------------------

// CIPVInfo

// optional int32 cipv_id = 1;
inline bool CIPVInfo::_internal_has_cipv_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CIPVInfo::has_cipv_id() const {
  return _internal_has_cipv_id();
}
inline void CIPVInfo::clear_cipv_id() {
  _impl_.cipv_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CIPVInfo::_internal_cipv_id() const {
  return _impl_.cipv_id_;
}
inline int32_t CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.cipv_id)
  return _internal_cipv_id();
}
inline void CIPVInfo::_internal_set_cipv_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cipv_id_ = value;
}
inline void CIPVInfo::set_cipv_id(int32_t value) {
  _internal_set_cipv_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
inline int CIPVInfo::_internal_potential_cipv_id_size() const {
  return _impl_.potential_cipv_id_.size();
}
inline int CIPVInfo::potential_cipv_id_size() const {
  return _internal_potential_cipv_id_size();
}
inline void CIPVInfo::clear_potential_cipv_id() {
  _impl_.potential_cipv_id_.Clear();
}
inline int32_t CIPVInfo::_internal_potential_cipv_id(int index) const {
  return _impl_.potential_cipv_id_.Get(index);
}
inline int32_t CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_potential_cipv_id(index);
}
inline void CIPVInfo::set_potential_cipv_id(int index, int32_t value) {
  _impl_.potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline void CIPVInfo::_internal_add_potential_cipv_id(int32_t value) {
  _impl_.potential_cipv_id_.Add(value);
}
inline void CIPVInfo::add_potential_cipv_id(int32_t value) {
  _internal_add_potential_cipv_id(value);
  // @@protoc_insertion_point(field_add:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CIPVInfo::_internal_potential_cipv_id() const {
  return _impl_.potential_cipv_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_potential_cipv_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CIPVInfo::_internal_mutable_potential_cipv_id() {
  return &_impl_.potential_cipv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_mutable_potential_cipv_id();
}

// -------------------------------------------------------------------

// LaneMarker

// optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
inline bool LaneMarker::_internal_has_lane_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneMarker::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void LaneMarker::clear_lane_type() {
  _impl_.lane_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::_internal_lane_type() const {
  return static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(_impl_.lane_type_);
}
inline ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.lane_type)
  return _internal_lane_type();
}
inline void LaneMarker::_internal_set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  assert(::apollo::hdmap::LaneBoundaryType_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_type_ = value;
}
inline void LaneMarker::set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.lane_type)
}

// optional double quality = 2;
inline bool LaneMarker::_internal_has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneMarker::has_quality() const {
  return _internal_has_quality();
}
inline void LaneMarker::clear_quality() {
  _impl_.quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LaneMarker::_internal_quality() const {
  return _impl_.quality_;
}
inline double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.quality)
  return _internal_quality();
}
inline void LaneMarker::_internal_set_quality(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.quality_ = value;
}
inline void LaneMarker::set_quality(double value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.quality)
}

// optional int32 model_degree = 3;
inline bool LaneMarker::_internal_has_model_degree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneMarker::has_model_degree() const {
  return _internal_has_model_degree();
}
inline void LaneMarker::clear_model_degree() {
  _impl_.model_degree_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t LaneMarker::_internal_model_degree() const {
  return _impl_.model_degree_;
}
inline int32_t LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.model_degree)
  return _internal_model_degree();
}
inline void LaneMarker::_internal_set_model_degree(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.model_degree_ = value;
}
inline void LaneMarker::set_model_degree(int32_t value) {
  _internal_set_model_degree(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.model_degree)
}

// optional double c0_position = 4;
inline bool LaneMarker::_internal_has_c0_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneMarker::has_c0_position() const {
  return _internal_has_c0_position();
}
inline void LaneMarker::clear_c0_position() {
  _impl_.c0_position_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LaneMarker::_internal_c0_position() const {
  return _impl_.c0_position_;
}
inline double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c0_position)
  return _internal_c0_position();
}
inline void LaneMarker::_internal_set_c0_position(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.c0_position_ = value;
}
inline void LaneMarker::set_c0_position(double value) {
  _internal_set_c0_position(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
inline bool LaneMarker::_internal_has_c1_heading_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneMarker::has_c1_heading_angle() const {
  return _internal_has_c1_heading_angle();
}
inline void LaneMarker::clear_c1_heading_angle() {
  _impl_.c1_heading_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LaneMarker::_internal_c1_heading_angle() const {
  return _impl_.c1_heading_angle_;
}
inline double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c1_heading_angle)
  return _internal_c1_heading_angle();
}
inline void LaneMarker::_internal_set_c1_heading_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.c1_heading_angle_ = value;
}
inline void LaneMarker::set_c1_heading_angle(double value) {
  _internal_set_c1_heading_angle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
inline bool LaneMarker::_internal_has_c2_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneMarker::has_c2_curvature() const {
  return _internal_has_c2_curvature();
}
inline void LaneMarker::clear_c2_curvature() {
  _impl_.c2_curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LaneMarker::_internal_c2_curvature() const {
  return _impl_.c2_curvature_;
}
inline double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c2_curvature)
  return _internal_c2_curvature();
}
inline void LaneMarker::_internal_set_c2_curvature(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.c2_curvature_ = value;
}
inline void LaneMarker::set_c2_curvature(double value) {
  _internal_set_c2_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
inline bool LaneMarker::_internal_has_c3_curvature_derivative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaneMarker::has_c3_curvature_derivative() const {
  return _internal_has_c3_curvature_derivative();
}
inline void LaneMarker::clear_c3_curvature_derivative() {
  _impl_.c3_curvature_derivative_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double LaneMarker::_internal_c3_curvature_derivative() const {
  return _impl_.c3_curvature_derivative_;
}
inline double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c3_curvature_derivative)
  return _internal_c3_curvature_derivative();
}
inline void LaneMarker::_internal_set_c3_curvature_derivative(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.c3_curvature_derivative_ = value;
}
inline void LaneMarker::set_c3_curvature_derivative(double value) {
  _internal_set_c3_curvature_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
inline bool LaneMarker::_internal_has_view_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LaneMarker::has_view_range() const {
  return _internal_has_view_range();
}
inline void LaneMarker::clear_view_range() {
  _impl_.view_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double LaneMarker::_internal_view_range() const {
  return _impl_.view_range_;
}
inline double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.view_range)
  return _internal_view_range();
}
inline void LaneMarker::_internal_set_view_range(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.view_range_ = value;
}
inline void LaneMarker::set_view_range(double value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.view_range)
}

// optional double longitude_start = 9;
inline bool LaneMarker::_internal_has_longitude_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LaneMarker::has_longitude_start() const {
  return _internal_has_longitude_start();
}
inline void LaneMarker::clear_longitude_start() {
  _impl_.longitude_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double LaneMarker::_internal_longitude_start() const {
  return _impl_.longitude_start_;
}
inline double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_start)
  return _internal_longitude_start();
}
inline void LaneMarker::_internal_set_longitude_start(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.longitude_start_ = value;
}
inline void LaneMarker::set_longitude_start(double value) {
  _internal_set_longitude_start(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
inline bool LaneMarker::_internal_has_longitude_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LaneMarker::has_longitude_end() const {
  return _internal_has_longitude_end();
}
inline void LaneMarker::clear_longitude_end() {
  _impl_.longitude_end_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double LaneMarker::_internal_longitude_end() const {
  return _impl_.longitude_end_;
}
inline double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_end)
  return _internal_longitude_end();
}
inline void LaneMarker::_internal_set_longitude_end(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.longitude_end_ = value;
}
inline void LaneMarker::set_longitude_end(double value) {
  _internal_set_longitude_end(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_end)
}

// -------------------------------------------------------------------

// LaneMarkers

// optional .apollo.perception.LaneMarker left_lane_marker = 1;
inline bool LaneMarkers::_internal_has_left_lane_marker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_lane_marker_ != nullptr);
  return value;
}
inline bool LaneMarkers::has_left_lane_marker() const {
  return _internal_has_left_lane_marker();
}
inline void LaneMarkers::clear_left_lane_marker() {
  if (_impl_.left_lane_marker_ != nullptr) _impl_.left_lane_marker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_left_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = _impl_.left_lane_marker_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::LaneMarker&>(
      ::apollo::perception::_LaneMarker_default_instance_);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.left_lane_marker)
  return _internal_left_lane_marker();
}
inline void LaneMarkers::unsafe_arena_set_allocated_left_lane_marker(
    ::apollo::perception::LaneMarker* left_lane_marker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_lane_marker_);
  }
  _impl_.left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_left_lane_marker() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::LaneMarker* temp = _impl_.left_lane_marker_;
  _impl_.left_lane_marker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::unsafe_arena_release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.left_lane_marker)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::LaneMarker* temp = _impl_.left_lane_marker_;
  _impl_.left_lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_mutable_left_lane_marker() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.left_lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarker>(GetArenaForAllocation());
    _impl_.left_lane_marker_ = p;
  }
  return _impl_.left_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  ::apollo::perception::LaneMarker* _msg = _internal_mutable_left_lane_marker();
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.left_lane_marker)
  return _msg;
}
inline void LaneMarkers::set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_lane_marker_;
  }
  if (left_lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left_lane_marker);
    if (message_arena != submessage_arena) {
      left_lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_lane_marker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_lane_marker_ = left_lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}

// optional .apollo.perception.LaneMarker right_lane_marker = 2;
inline bool LaneMarkers::_internal_has_right_lane_marker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_lane_marker_ != nullptr);
  return value;
}
inline bool LaneMarkers::has_right_lane_marker() const {
  return _internal_has_right_lane_marker();
}
inline void LaneMarkers::clear_right_lane_marker() {
  if (_impl_.right_lane_marker_ != nullptr) _impl_.right_lane_marker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_right_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = _impl_.right_lane_marker_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::LaneMarker&>(
      ::apollo::perception::_LaneMarker_default_instance_);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.right_lane_marker)
  return _internal_right_lane_marker();
}
inline void LaneMarkers::unsafe_arena_set_allocated_right_lane_marker(
    ::apollo::perception::LaneMarker* right_lane_marker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_lane_marker_);
  }
  _impl_.right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_right_lane_marker() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarker* temp = _impl_.right_lane_marker_;
  _impl_.right_lane_marker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::unsafe_arena_release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.right_lane_marker)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarker* temp = _impl_.right_lane_marker_;
  _impl_.right_lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_mutable_right_lane_marker() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.right_lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarker>(GetArenaForAllocation());
    _impl_.right_lane_marker_ = p;
  }
  return _impl_.right_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  ::apollo::perception::LaneMarker* _msg = _internal_mutable_right_lane_marker();
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.right_lane_marker)
  return _msg;
}
inline void LaneMarkers::set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_lane_marker_;
  }
  if (right_lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right_lane_marker);
    if (message_arena != submessage_arena) {
      right_lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_lane_marker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.right_lane_marker_ = right_lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}

// repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
inline int LaneMarkers::_internal_next_left_lane_marker_size() const {
  return _impl_.next_left_lane_marker_.size();
}
inline int LaneMarkers::next_left_lane_marker_size() const {
  return _internal_next_left_lane_marker_size();
}
inline void LaneMarkers::clear_next_left_lane_marker() {
  _impl_.next_left_lane_marker_.Clear();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _impl_.next_left_lane_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return &_impl_.next_left_lane_marker_;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_next_left_lane_marker(int index) const {
  return _impl_.next_left_lane_marker_.Get(index);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _internal_next_left_lane_marker(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_add_next_left_lane_marker() {
  return _impl_.next_left_lane_marker_.Add();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  ::apollo::perception::LaneMarker* _add = _internal_add_next_left_lane_marker();
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _impl_.next_left_lane_marker_;
}

// repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
inline int LaneMarkers::_internal_next_right_lane_marker_size() const {
  return _impl_.next_right_lane_marker_.size();
}
inline int LaneMarkers::next_right_lane_marker_size() const {
  return _internal_next_right_lane_marker_size();
}
inline void LaneMarkers::clear_next_right_lane_marker() {
  _impl_.next_right_lane_marker_.Clear();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _impl_.next_right_lane_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return &_impl_.next_right_lane_marker_;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_next_right_lane_marker(int index) const {
  return _impl_.next_right_lane_marker_.Get(index);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _internal_next_right_lane_marker(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_add_next_right_lane_marker() {
  return _impl_.next_right_lane_marker_.Add();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  ::apollo::perception::LaneMarker* _add = _internal_add_next_right_lane_marker();
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _impl_.next_right_lane_marker_;
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::_internal_perception_obstacle_size() const {
  return _impl_.perception_obstacle_.size();
}
inline int PerceptionObstacles::perception_obstacle_size() const {
  return _internal_perception_obstacle_size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  _impl_.perception_obstacle_.Clear();
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _impl_.perception_obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &_impl_.perception_obstacle_;
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::_internal_perception_obstacle(int index) const {
  return _impl_.perception_obstacle_.Get(index);
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _internal_perception_obstacle(index);
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::_internal_add_perception_obstacle() {
  return _impl_.perception_obstacle_.Add();
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  ::apollo::perception::PerceptionObstacle* _add = _internal_add_perception_obstacle();
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _impl_.perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
inline bool PerceptionObstacles::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PerceptionObstacles::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return _internal_header();
}
inline void PerceptionObstacles::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionObstacles.header)
}
inline ::apollo::common::Header* PerceptionObstacles::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* PerceptionObstacles::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PerceptionObstacles::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* PerceptionObstacles::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return _msg;
}
inline void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool PerceptionObstacles::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionObstacles::has_error_code() const {
  return _internal_has_error_code();
}
inline void PerceptionObstacles::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::common::ErrorCode PerceptionObstacles::_internal_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(_impl_.error_code_);
}
inline ::apollo::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return _internal_error_code();
}
inline void PerceptionObstacles::_internal_set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.error_code_ = value;
}
inline void PerceptionObstacles::set_error_code(::apollo::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
inline bool PerceptionObstacles::_internal_has_lane_marker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_marker_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_lane_marker() const {
  return _internal_has_lane_marker();
}
inline void PerceptionObstacles::clear_lane_marker() {
  if (_impl_.lane_marker_ != nullptr) _impl_.lane_marker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::LaneMarkers& PerceptionObstacles::_internal_lane_marker() const {
  const ::apollo::perception::LaneMarkers* p = _impl_.lane_marker_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::LaneMarkers&>(
      ::apollo::perception::_LaneMarkers_default_instance_);
}
inline const ::apollo::perception::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.lane_marker)
  return _internal_lane_marker();
}
inline void PerceptionObstacles::unsafe_arena_set_allocated_lane_marker(
    ::apollo::perception::LaneMarkers* lane_marker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_marker_);
  }
  _impl_.lane_marker_ = lane_marker;
  if (lane_marker) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarkers* temp = _impl_.lane_marker_;
  _impl_.lane_marker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::unsafe_arena_release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.lane_marker)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarkers* temp = _impl_.lane_marker_;
  _impl_.lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::_internal_mutable_lane_marker() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarkers>(GetArenaForAllocation());
    _impl_.lane_marker_ = p;
  }
  return _impl_.lane_marker_;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  ::apollo::perception::LaneMarkers* _msg = _internal_mutable_lane_marker();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.lane_marker)
  return _msg;
}
inline void PerceptionObstacles::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_marker_;
  }
  if (lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_marker);
    if (message_arena != submessage_arena) {
      lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_marker, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lane_marker_ = lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}

// optional .apollo.perception.CIPVInfo cipv_info = 5;
inline bool PerceptionObstacles::_internal_has_cipv_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cipv_info_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_cipv_info() const {
  return _internal_has_cipv_info();
}
inline void PerceptionObstacles::clear_cipv_info() {
  if (_impl_.cipv_info_ != nullptr) _impl_.cipv_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::CIPVInfo& PerceptionObstacles::_internal_cipv_info() const {
  const ::apollo::perception::CIPVInfo* p = _impl_.cipv_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::CIPVInfo&>(
      ::apollo::perception::_CIPVInfo_default_instance_);
}
inline const ::apollo::perception::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.cipv_info)
  return _internal_cipv_info();
}
inline void PerceptionObstacles::unsafe_arena_set_allocated_cipv_info(
    ::apollo::perception::CIPVInfo* cipv_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cipv_info_);
  }
  _impl_.cipv_info_ = cipv_info;
  if (cipv_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::CIPVInfo* temp = _impl_.cipv_info_;
  _impl_.cipv_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::unsafe_arena_release_cipv_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.cipv_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::CIPVInfo* temp = _impl_.cipv_info_;
  _impl_.cipv_info_ = nullptr;
  return temp;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::_internal_mutable_cipv_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cipv_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::CIPVInfo>(GetArenaForAllocation());
    _impl_.cipv_info_ = p;
  }
  return _impl_.cipv_info_;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  ::apollo::perception::CIPVInfo* _msg = _internal_mutable_cipv_info();
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.cipv_info)
  return _msg;
}
inline void PerceptionObstacles::set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cipv_info_;
  }
  if (cipv_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cipv_info);
    if (message_arena != submessage_arena) {
      cipv_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cipv_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cipv_info_ = cipv_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_Type>() {
  return ::apollo::perception::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_ConfidenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_ConfidenceType>() {
  return ::apollo::perception::PerceptionObstacle_ConfidenceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
