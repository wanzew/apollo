// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/modest_radar_detector_config.proto

#include "modules/perception/proto/modest_radar_detector_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace modest_radar_detector_config {
PROTOBUF_CONSTEXPR ModelConfigs::ModelConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_theta_)*/30
  , /*decltype(_impl_.use_had_map_)*/true
  , /*decltype(_impl_.use_fp_filter_)*/true
  , /*decltype(_impl_.delay_frames_)*/4
  , /*decltype(_impl_.probexist_vehicle_)*/0.9
  , /*decltype(_impl_.probexist_pedestrian_)*/0.25
  , /*decltype(_impl_.probexist_bicycle_)*/0.25
  , /*decltype(_impl_.probexist_unknown_)*/0.99
  , /*decltype(_impl_.lo_vel_rms_vehicle_)*/0.2
  , /*decltype(_impl_.la_vel_rms_vehicle_)*/0.3
  , /*decltype(_impl_.lo_dist_rms_vehicle_)*/0.15
  , /*decltype(_impl_.la_dist_rms_vehicle_)*/0.2
  , /*decltype(_impl_.lo_vel_rms_pedestrian_)*/0.5
  , /*decltype(_impl_.la_vel_rms_pedestrian_)*/0.8
  , /*decltype(_impl_.lo_dist_rms_pedestrian_)*/0.5
  , /*decltype(_impl_.la_dist_rms_pedestrian_)*/0.8
  , /*decltype(_impl_.lo_vel_rms_bicycle_)*/0.5
  , /*decltype(_impl_.la_vel_rms_bicycle_)*/0.8
  , /*decltype(_impl_.lo_dist_rms_bicycle_)*/0.5
  , /*decltype(_impl_.la_dist_rms_bicycle_)*/0.8
  , /*decltype(_impl_.lo_vel_rms_unknown_)*/0.2
  , /*decltype(_impl_.la_vel_rms_unknown_)*/0.3
  , /*decltype(_impl_.lo_dist_rms_unknown_)*/0.2
  , /*decltype(_impl_.la_dist_rms_unknown_)*/0.3} {}
struct ModelConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigsDefaultTypeInternal() {}
  union {
    ModelConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.use_had_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.max_theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.delay_frames_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.use_fp_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.probexist_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.probexist_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.probexist_bicycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.probexist_unknown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_vel_rms_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_vel_rms_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_dist_rms_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_dist_rms_vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_vel_rms_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_vel_rms_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_dist_rms_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_dist_rms_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_vel_rms_bicycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_vel_rms_bicycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_dist_rms_bicycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_dist_rms_bicycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_vel_rms_unknown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_vel_rms_unknown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.lo_dist_rms_unknown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::modest_radar_detector_config::ModelConfigs, _impl_.la_dist_rms_unknown_),
  0,
  1,
  3,
  2,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, -1, sizeof(::apollo::perception::modest_radar_detector_config::ModelConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::modest_radar_detector_config::_ModelConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/perception/proto/modest_radar_"
  "detector_config.proto\022.apollo.perception"
  ".modest_radar_detector_config\"\334\006\n\014ModelC"
  "onfigs\022!\n\004name\030\001 \001(\t:\023ModestRadarDetecto"
  "r\022\026\n\007version\030\002 \001(\t:\0051.0.0\022\031\n\013use_had_map"
  "\030\003 \001(\010:\004true\022\025\n\tmax_theta\030\004 \001(\001:\00230\022\027\n\014d"
  "elay_frames\030\005 \001(\005:\0014\022\033\n\ruse_fp_filter\030\006 "
  "\001(\010:\004true\022\036\n\021probexist_vehicle\030\007 \001(\001:\0030."
  "9\022\"\n\024probexist_pedestrian\030\010 \001(\001:\0040.25\022\037\n"
  "\021probexist_bicycle\030\t \001(\001:\0040.25\022\037\n\021probex"
  "ist_unknown\030\n \001(\001:\0040.99\022\037\n\022lo_vel_rms_ve"
  "hicle\030\013 \001(\001:\0030.2\022\037\n\022la_vel_rms_vehicle\030\014"
  " \001(\001:\0030.3\022!\n\023lo_dist_rms_vehicle\030\r \001(\001:\004"
  "0.15\022 \n\023la_dist_rms_vehicle\030\016 \001(\001:\0030.2\022\""
  "\n\025lo_vel_rms_pedestrian\030\017 \001(\001:\0030.5\022\"\n\025la"
  "_vel_rms_pedestrian\030\020 \001(\001:\0030.8\022#\n\026lo_dis"
  "t_rms_pedestrian\030\021 \001(\001:\0030.5\022#\n\026la_dist_r"
  "ms_pedestrian\030\022 \001(\001:\0030.8\022\037\n\022lo_vel_rms_b"
  "icycle\030\023 \001(\001:\0030.5\022\037\n\022la_vel_rms_bicycle\030"
  "\024 \001(\001:\0030.8\022 \n\023lo_dist_rms_bicycle\030\025 \001(\001:"
  "\0030.5\022 \n\023la_dist_rms_bicycle\030\026 \001(\001:\0030.8\022\037"
  "\n\022lo_vel_rms_unknown\030\027 \001(\001:\0030.2\022\037\n\022la_ve"
  "l_rms_unknown\030\030 \001(\001:\0030.3\022 \n\023lo_dist_rms_"
  "unknown\030\031 \001(\001:\0030.2\022 \n\023la_dist_rms_unknow"
  "n\030\032 \001(\001:\0030.3"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto = {
    false, false, 972, descriptor_table_protodef_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto,
    "modules/perception/proto/modest_radar_detector_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace modest_radar_detector_config {

// ===================================================================

class ModelConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelConfigs>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_had_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delay_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_fp_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_probexist_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_probexist_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_probexist_bicycle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_probexist_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lo_vel_rms_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_la_vel_rms_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lo_dist_rms_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_la_dist_rms_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lo_vel_rms_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_la_vel_rms_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lo_dist_rms_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_la_dist_rms_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lo_vel_rms_bicycle(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_la_vel_rms_bicycle(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lo_dist_rms_bicycle(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_la_dist_rms_bicycle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_lo_vel_rms_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_la_vel_rms_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_lo_dist_rms_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_la_dist_rms_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"ModestRadarDetector", 19}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
ModelConfigs::ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.max_theta_){}
    , decltype(_impl_.use_had_map_){}
    , decltype(_impl_.use_fp_filter_){}
    , decltype(_impl_.delay_frames_){}
    , decltype(_impl_.probexist_vehicle_){}
    , decltype(_impl_.probexist_pedestrian_){}
    , decltype(_impl_.probexist_bicycle_){}
    , decltype(_impl_.probexist_unknown_){}
    , decltype(_impl_.lo_vel_rms_vehicle_){}
    , decltype(_impl_.la_vel_rms_vehicle_){}
    , decltype(_impl_.lo_dist_rms_vehicle_){}
    , decltype(_impl_.la_dist_rms_vehicle_){}
    , decltype(_impl_.lo_vel_rms_pedestrian_){}
    , decltype(_impl_.la_vel_rms_pedestrian_){}
    , decltype(_impl_.lo_dist_rms_pedestrian_){}
    , decltype(_impl_.la_dist_rms_pedestrian_){}
    , decltype(_impl_.lo_vel_rms_bicycle_){}
    , decltype(_impl_.la_vel_rms_bicycle_){}
    , decltype(_impl_.lo_dist_rms_bicycle_){}
    , decltype(_impl_.la_dist_rms_bicycle_){}
    , decltype(_impl_.lo_vel_rms_unknown_){}
    , decltype(_impl_.la_vel_rms_unknown_){}
    , decltype(_impl_.lo_dist_rms_unknown_){}
    , decltype(_impl_.la_dist_rms_unknown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_theta_, &from._impl_.max_theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.la_dist_rms_unknown_) -
    reinterpret_cast<char*>(&_impl_.max_theta_)) + sizeof(_impl_.la_dist_rms_unknown_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
}

inline void ModelConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.max_theta_){30}
    , decltype(_impl_.use_had_map_){true}
    , decltype(_impl_.use_fp_filter_){true}
    , decltype(_impl_.delay_frames_){4}
    , decltype(_impl_.probexist_vehicle_){0.9}
    , decltype(_impl_.probexist_pedestrian_){0.25}
    , decltype(_impl_.probexist_bicycle_){0.25}
    , decltype(_impl_.probexist_unknown_){0.99}
    , decltype(_impl_.lo_vel_rms_vehicle_){0.2}
    , decltype(_impl_.la_vel_rms_vehicle_){0.3}
    , decltype(_impl_.lo_dist_rms_vehicle_){0.15}
    , decltype(_impl_.la_dist_rms_vehicle_){0.2}
    , decltype(_impl_.lo_vel_rms_pedestrian_){0.5}
    , decltype(_impl_.la_vel_rms_pedestrian_){0.8}
    , decltype(_impl_.lo_dist_rms_pedestrian_){0.5}
    , decltype(_impl_.la_dist_rms_pedestrian_){0.8}
    , decltype(_impl_.lo_vel_rms_bicycle_){0.5}
    , decltype(_impl_.la_vel_rms_bicycle_){0.8}
    , decltype(_impl_.lo_dist_rms_bicycle_){0.5}
    , decltype(_impl_.la_dist_rms_bicycle_){0.8}
    , decltype(_impl_.lo_vel_rms_unknown_){0.2}
    , decltype(_impl_.la_vel_rms_unknown_){0.3}
    , decltype(_impl_.lo_dist_rms_unknown_){0.2}
    , decltype(_impl_.la_dist_rms_unknown_){0.3}
  };
  _impl_.name_.InitDefault();
  _impl_.version_.InitDefault();
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void ModelConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
    _impl_.max_theta_ = 30;
    _impl_.use_had_map_ = true;
    _impl_.use_fp_filter_ = true;
    _impl_.delay_frames_ = 4;
    _impl_.probexist_vehicle_ = 0.9;
    _impl_.probexist_pedestrian_ = 0.25;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.probexist_bicycle_ = 0.25;
    _impl_.probexist_unknown_ = 0.99;
    _impl_.lo_vel_rms_vehicle_ = 0.2;
    _impl_.la_vel_rms_vehicle_ = 0.3;
    _impl_.lo_dist_rms_vehicle_ = 0.15;
    _impl_.la_dist_rms_vehicle_ = 0.2;
    _impl_.lo_vel_rms_pedestrian_ = 0.5;
    _impl_.la_vel_rms_pedestrian_ = 0.8;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.lo_dist_rms_pedestrian_ = 0.5;
    _impl_.la_dist_rms_pedestrian_ = 0.8;
    _impl_.lo_vel_rms_bicycle_ = 0.5;
    _impl_.la_vel_rms_bicycle_ = 0.8;
    _impl_.lo_dist_rms_bicycle_ = 0.5;
    _impl_.la_dist_rms_bicycle_ = 0.8;
    _impl_.lo_vel_rms_unknown_ = 0.2;
    _impl_.la_vel_rms_unknown_ = 0.3;
  }
  if (cached_has_bits & 0x03000000u) {
    _impl_.lo_dist_rms_unknown_ = 0.2;
    _impl_.la_dist_rms_unknown_ = 0.3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = "ModestRadarDetector"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.modest_radar_detector_config.ModelConfigs.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2 [default = "1.0.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.modest_radar_detector_config.ModelConfigs.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_had_map = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_had_map(&has_bits);
          _impl_.use_had_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_theta = 4 [default = 30];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_theta(&has_bits);
          _impl_.max_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delay_frames = 5 [default = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_delay_frames(&has_bits);
          _impl_.delay_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_fp_filter = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_fp_filter(&has_bits);
          _impl_.use_fp_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double probexist_vehicle = 7 [default = 0.9];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_probexist_vehicle(&has_bits);
          _impl_.probexist_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double probexist_pedestrian = 8 [default = 0.25];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_probexist_pedestrian(&has_bits);
          _impl_.probexist_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double probexist_bicycle = 9 [default = 0.25];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_probexist_bicycle(&has_bits);
          _impl_.probexist_bicycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double probexist_unknown = 10 [default = 0.99];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_probexist_unknown(&has_bits);
          _impl_.probexist_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_lo_vel_rms_vehicle(&has_bits);
          _impl_.lo_vel_rms_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_vel_rms_vehicle = 12 [default = 0.3];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_la_vel_rms_vehicle(&has_bits);
          _impl_.la_vel_rms_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_lo_dist_rms_vehicle(&has_bits);
          _impl_.lo_dist_rms_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_dist_rms_vehicle = 14 [default = 0.2];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_la_dist_rms_vehicle(&has_bits);
          _impl_.la_dist_rms_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_lo_vel_rms_pedestrian(&has_bits);
          _impl_.lo_vel_rms_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_la_vel_rms_pedestrian(&has_bits);
          _impl_.la_vel_rms_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_lo_dist_rms_pedestrian(&has_bits);
          _impl_.lo_dist_rms_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_la_dist_rms_pedestrian(&has_bits);
          _impl_.la_dist_rms_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_lo_vel_rms_bicycle(&has_bits);
          _impl_.lo_vel_rms_bicycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_vel_rms_bicycle = 20 [default = 0.8];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_la_vel_rms_bicycle(&has_bits);
          _impl_.la_vel_rms_bicycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_lo_dist_rms_bicycle(&has_bits);
          _impl_.lo_dist_rms_bicycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_dist_rms_bicycle = 22 [default = 0.8];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_la_dist_rms_bicycle(&has_bits);
          _impl_.la_dist_rms_bicycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_vel_rms_unknown = 23 [default = 0.2];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_lo_vel_rms_unknown(&has_bits);
          _impl_.lo_vel_rms_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_vel_rms_unknown = 24 [default = 0.3];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_la_vel_rms_unknown(&has_bits);
          _impl_.la_vel_rms_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lo_dist_rms_unknown = 25 [default = 0.2];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_lo_dist_rms_unknown(&has_bits);
          _impl_.lo_dist_rms_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double la_dist_rms_unknown = 26 [default = 0.3];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_la_dist_rms_unknown(&has_bits);
          _impl_.la_dist_rms_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = "ModestRadarDetector"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.modest_radar_detector_config.ModelConfigs.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional bool use_had_map = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_use_had_map(), target);
  }

  // optional double max_theta = 4 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_theta(), target);
  }

  // optional int32 delay_frames = 5 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_delay_frames(), target);
  }

  // optional bool use_fp_filter = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_fp_filter(), target);
  }

  // optional double probexist_vehicle = 7 [default = 0.9];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_probexist_vehicle(), target);
  }

  // optional double probexist_pedestrian = 8 [default = 0.25];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_probexist_pedestrian(), target);
  }

  // optional double probexist_bicycle = 9 [default = 0.25];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_probexist_bicycle(), target);
  }

  // optional double probexist_unknown = 10 [default = 0.99];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_probexist_unknown(), target);
  }

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_lo_vel_rms_vehicle(), target);
  }

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_la_vel_rms_vehicle(), target);
  }

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_lo_dist_rms_vehicle(), target);
  }

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_la_dist_rms_vehicle(), target);
  }

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_lo_vel_rms_pedestrian(), target);
  }

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_la_vel_rms_pedestrian(), target);
  }

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_lo_dist_rms_pedestrian(), target);
  }

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_la_dist_rms_pedestrian(), target);
  }

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_lo_vel_rms_bicycle(), target);
  }

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_la_vel_rms_bicycle(), target);
  }

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_lo_dist_rms_bicycle(), target);
  }

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_la_dist_rms_bicycle(), target);
  }

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_lo_vel_rms_unknown(), target);
  }

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_la_vel_rms_unknown(), target);
  }

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_lo_dist_rms_unknown(), target);
  }

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_la_dist_rms_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.modest_radar_detector_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1 [default = "ModestRadarDetector"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional double max_theta = 4 [default = 30];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool use_had_map = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_fp_filter = 6 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 delay_frames = 5 [default = 4];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay_frames());
    }

    // optional double probexist_vehicle = 7 [default = 0.9];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double probexist_pedestrian = 8 [default = 0.25];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double probexist_bicycle = 9 [default = 0.25];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double probexist_unknown = 10 [default = 0.99];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_vehicle = 12 [default = 0.3];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double la_dist_rms_vehicle = 14 [default = 0.2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_bicycle = 20 [default = 0.8];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_bicycle = 22 [default = 0.8];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_unknown = 23 [default = 0.2];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_unknown = 24 [default = 0.3];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional double lo_dist_rms_unknown = 25 [default = 0.2];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_unknown = 26 [default = 0.3];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigs::GetClassData() const { return &_class_data_; }

void ModelConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelConfigs *>(to)->MergeFrom(
      static_cast<const ModelConfigs &>(from));
}


void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_theta_ = from._impl_.max_theta_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.use_had_map_ = from._impl_.use_had_map_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.use_fp_filter_ = from._impl_.use_fp_filter_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.delay_frames_ = from._impl_.delay_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.probexist_vehicle_ = from._impl_.probexist_vehicle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.probexist_pedestrian_ = from._impl_.probexist_pedestrian_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.probexist_bicycle_ = from._impl_.probexist_bicycle_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.probexist_unknown_ = from._impl_.probexist_unknown_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.lo_vel_rms_vehicle_ = from._impl_.lo_vel_rms_vehicle_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.la_vel_rms_vehicle_ = from._impl_.la_vel_rms_vehicle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.lo_dist_rms_vehicle_ = from._impl_.lo_dist_rms_vehicle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.la_dist_rms_vehicle_ = from._impl_.la_dist_rms_vehicle_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.lo_vel_rms_pedestrian_ = from._impl_.lo_vel_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.la_vel_rms_pedestrian_ = from._impl_.la_vel_rms_pedestrian_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.lo_dist_rms_pedestrian_ = from._impl_.lo_dist_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.la_dist_rms_pedestrian_ = from._impl_.la_dist_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.lo_vel_rms_bicycle_ = from._impl_.lo_vel_rms_bicycle_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.la_vel_rms_bicycle_ = from._impl_.la_vel_rms_bicycle_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.lo_dist_rms_bicycle_ = from._impl_.lo_dist_rms_bicycle_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.la_dist_rms_bicycle_ = from._impl_.la_dist_rms_bicycle_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.lo_vel_rms_unknown_ = from._impl_.lo_vel_rms_unknown_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.la_vel_rms_unknown_ = from._impl_.la_vel_rms_unknown_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.lo_dist_rms_unknown_ = from._impl_.lo_dist_rms_unknown_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.la_dist_rms_unknown_ = from._impl_.la_dist_rms_unknown_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.modest_radar_detector_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::InternalSwap(ModelConfigs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.max_theta_, other->_impl_.max_theta_);
  swap(_impl_.use_had_map_, other->_impl_.use_had_map_);
  swap(_impl_.use_fp_filter_, other->_impl_.use_fp_filter_);
  swap(_impl_.delay_frames_, other->_impl_.delay_frames_);
  swap(_impl_.probexist_vehicle_, other->_impl_.probexist_vehicle_);
  swap(_impl_.probexist_pedestrian_, other->_impl_.probexist_pedestrian_);
  swap(_impl_.probexist_bicycle_, other->_impl_.probexist_bicycle_);
  swap(_impl_.probexist_unknown_, other->_impl_.probexist_unknown_);
  swap(_impl_.lo_vel_rms_vehicle_, other->_impl_.lo_vel_rms_vehicle_);
  swap(_impl_.la_vel_rms_vehicle_, other->_impl_.la_vel_rms_vehicle_);
  swap(_impl_.lo_dist_rms_vehicle_, other->_impl_.lo_dist_rms_vehicle_);
  swap(_impl_.la_dist_rms_vehicle_, other->_impl_.la_dist_rms_vehicle_);
  swap(_impl_.lo_vel_rms_pedestrian_, other->_impl_.lo_vel_rms_pedestrian_);
  swap(_impl_.la_vel_rms_pedestrian_, other->_impl_.la_vel_rms_pedestrian_);
  swap(_impl_.lo_dist_rms_pedestrian_, other->_impl_.lo_dist_rms_pedestrian_);
  swap(_impl_.la_dist_rms_pedestrian_, other->_impl_.la_dist_rms_pedestrian_);
  swap(_impl_.lo_vel_rms_bicycle_, other->_impl_.lo_vel_rms_bicycle_);
  swap(_impl_.la_vel_rms_bicycle_, other->_impl_.la_vel_rms_bicycle_);
  swap(_impl_.lo_dist_rms_bicycle_, other->_impl_.lo_dist_rms_bicycle_);
  swap(_impl_.la_dist_rms_bicycle_, other->_impl_.la_dist_rms_bicycle_);
  swap(_impl_.lo_vel_rms_unknown_, other->_impl_.lo_vel_rms_unknown_);
  swap(_impl_.la_vel_rms_unknown_, other->_impl_.la_vel_rms_unknown_);
  swap(_impl_.lo_dist_rms_unknown_, other->_impl_.lo_dist_rms_unknown_);
  swap(_impl_.la_dist_rms_unknown_, other->_impl_.la_dist_rms_unknown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::modest_radar_detector_config::ModelConfigs*
Arena::CreateMaybeMessage< ::apollo::perception::modest_radar_detector_config::ModelConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::modest_radar_detector_config::ModelConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
