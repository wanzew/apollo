// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/lane_post_process_config.proto

#include "modules/perception/proto/lane_post_process_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace lane_post_process_config {
PROTOBUF_CONSTEXPR ModelConfigs::ModelConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roi_)*/{}
  , /*decltype(_impl_.non_mask_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.space_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.assoc_method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_width_)*/0
  , /*decltype(_impl_.image_height_)*/0
  , /*decltype(_impl_.use_non_mask_)*/false
  , /*decltype(_impl_.lane_map_height_)*/384
  , /*decltype(_impl_.lane_map_confidence_thresh_)*/0.95f
  , /*decltype(_impl_.cc_split_siz_)*/50
  , /*decltype(_impl_.cc_split_len_)*/25
  , /*decltype(_impl_.min_cc_pixel_num_)*/10
  , /*decltype(_impl_.min_cc_size_)*/5
  , /*decltype(_impl_.min_y_search_offset_)*/0.5f
  , /*decltype(_impl_.min_y_search_offset_image_)*/0.5f
  , /*decltype(_impl_.assoc_min_distance_)*/-0.5f
  , /*decltype(_impl_.assoc_min_distance_image_)*/-3
  , /*decltype(_impl_.assoc_max_distance_)*/60
  , /*decltype(_impl_.assoc_max_distance_image_)*/400
  , /*decltype(_impl_.assoc_distance_weight_)*/0.4f
  , /*decltype(_impl_.assoc_max_deviation_angle_)*/15
  , /*decltype(_impl_.assoc_max_deviation_angle_image_)*/45
  , /*decltype(_impl_.assoc_deviation_angle_weight_)*/0.2f
  , /*decltype(_impl_.assoc_max_departure_distance_)*/3
  , /*decltype(_impl_.assoc_max_departure_distance_image_)*/80
  , /*decltype(_impl_.assoc_departure_distance_weight_)*/0.2f
  , /*decltype(_impl_.assoc_max_relative_orie_)*/15
  , /*decltype(_impl_.assoc_max_relative_orie_image_)*/45
  , /*decltype(_impl_.assoc_relative_orie_weight_)*/0.2f
  , /*decltype(_impl_.assoc_min_orientation_estimation_size_)*/3
  , /*decltype(_impl_.assoc_min_orientation_estimation_size_image_)*/10
  , /*decltype(_impl_.max_cc_marker_match_num_)*/1
  , /*decltype(_impl_.slide_window_size_)*/15
  , /*decltype(_impl_.slide_window_size_image_)*/200
  , /*decltype(_impl_.slide_window_max_point_num_)*/3
  , /*decltype(_impl_.max_group_prediction_marker_num_)*/3
  , /*decltype(_impl_.orientation_estimation_skip_marker_num_)*/1
  , /*decltype(_impl_.lane_interval_distance_)*/4
  , /*decltype(_impl_.min_instance_size_prefiltered_)*/3
  , /*decltype(_impl_.min_instance_size_prefiltered_image_)*/20
  , /*decltype(_impl_.max_size_to_fit_straight_line_)*/10
  , /*decltype(_impl_.max_size_to_fit_straight_line_image_)*/300
  , /*decltype(_impl_.online_pitch_angle_)*/-2.5f
  , /*decltype(_impl_.ground_height_)*/1.6f
  , /*decltype(_impl_.max_distance_to_see_for_transformer_)*/500
  , /*decltype(_impl_.lane_map_scale_)*/2
  , /*decltype(_impl_.start_y_pos_)*/312
  , /*decltype(_impl_.lane_map_width_)*/960} {}
struct ModelConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigsDefaultTypeInternal() {}
  union {
    ModelConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.space_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.image_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.image_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.use_non_mask_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.non_mask_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.lane_map_confidence_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.cc_split_siz_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.cc_split_len_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_cc_pixel_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_cc_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_y_search_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_y_search_offset_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_min_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_min_distance_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_distance_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_deviation_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_deviation_angle_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_deviation_angle_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_departure_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_departure_distance_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_departure_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_relative_orie_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_max_relative_orie_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_relative_orie_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_min_orientation_estimation_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.assoc_min_orientation_estimation_size_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.max_cc_marker_match_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.slide_window_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.slide_window_size_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.slide_window_max_point_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.max_group_prediction_marker_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.orientation_estimation_skip_marker_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.lane_interval_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_instance_size_prefiltered_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.min_instance_size_prefiltered_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.max_size_to_fit_straight_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.max_size_to_fit_straight_line_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.online_pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.ground_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.max_distance_to_see_for_transformer_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.lane_map_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.start_y_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.lane_map_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lane_post_process_config::ModelConfigs, _impl_.lane_map_height_),
  0,
  1,
  2,
  4,
  5,
  ~0u,
  6,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  3,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 56, -1, sizeof(::apollo::perception::lane_post_process_config::ModelConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::lane_post_process_config::_ModelConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/perception/proto/lane_post_pro"
  "cess_config.proto\022*apollo.perception.lan"
  "e_post_process_config\"\334\r\n\014ModelConfigs\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\022\n\nspace_t"
  "ype\030\003 \001(\t\022\023\n\013image_width\030\004 \001(\005\022\024\n\014image_"
  "height\030\005 \001(\005\022\013\n\003roi\030\006 \003(\002\022\024\n\014use_non_mas"
  "k\030\007 \001(\010\022\020\n\010non_mask\030\010 \003(\002\022(\n\032lane_map_co"
  "nfidence_thresh\030\t \001(\002:\0040.95\022\030\n\014cc_split_"
  "siz\030\n \001(\002:\00250\022\030\n\014cc_split_len\030\013 \001(\005:\00225\022"
  "\034\n\020min_cc_pixel_num\030\014 \001(\005:\00210\022\026\n\013min_cc_"
  "size\030\r \001(\005:\0015\022 \n\023min_y_search_offset\030\016 \001"
  "(\002:\0030.5\022&\n\031min_y_search_offset_image\030\017 \001"
  "(\002:\0030.5\022\024\n\014assoc_method\030\020 \001(\t\022 \n\022assoc_m"
  "in_distance\030\021 \001(\002:\004-0.5\022$\n\030assoc_min_dis"
  "tance_image\030\022 \001(\002:\002-3\022\036\n\022assoc_max_dista"
  "nce\030\023 \001(\002:\00260\022%\n\030assoc_max_distance_imag"
  "e\030\024 \001(\002:\003400\022\"\n\025assoc_distance_weight\030\025 "
  "\001(\002:\0030.4\022%\n\031assoc_max_deviation_angle\030\026 "
  "\001(\002:\00215\022+\n\037assoc_max_deviation_angle_ima"
  "ge\030\027 \001(\002:\00245\022)\n\034assoc_deviation_angle_we"
  "ight\030\030 \001(\002:\0030.2\022\'\n\034assoc_max_departure_d"
  "istance\030\031 \001(\002:\0013\022.\n\"assoc_max_departure_"
  "distance_image\030\032 \001(\002:\00280\022,\n\037assoc_depart"
  "ure_distance_weight\030\033 \001(\002:\0030.2\022#\n\027assoc_"
  "max_relative_orie\030\034 \001(\002:\00215\022)\n\035assoc_max"
  "_relative_orie_image\030\035 \001(\002:\00245\022\'\n\032assoc_"
  "relative_orie_weight\030\036 \001(\002:\0030.2\0220\n%assoc"
  "_min_orientation_estimation_size\030\037 \001(\002:\001"
  "3\0227\n+assoc_min_orientation_estimation_si"
  "ze_image\030  \001(\002:\00210\022\"\n\027max_cc_marker_matc"
  "h_num\030! \001(\005:\0011\022\035\n\021slide_window_size\030\" \001("
  "\002:\00215\022$\n\027slide_window_size_image\030# \001(\002:\003"
  "200\022%\n\032slide_window_max_point_num\030$ \001(\005:"
  "\0013\022*\n\037max_group_prediction_marker_num\030% "
  "\001(\005:\0013\0221\n&orientation_estimation_skip_ma"
  "rker_num\030& \001(\005:\0011\022!\n\026lane_interval_dista"
  "nce\030\' \001(\002:\0014\022(\n\035min_instance_size_prefil"
  "tered\030( \001(\002:\0013\022/\n#min_instance_size_pref"
  "iltered_image\030) \001(\002:\00220\022)\n\035max_size_to_f"
  "it_straight_line\030* \001(\002:\00210\0220\n#max_size_t"
  "o_fit_straight_line_image\030+ \001(\002:\003300\022 \n\022"
  "online_pitch_angle\030, \001(\002:\004-2.5\022\032\n\rground"
  "_height\030- \001(\002:\0031.6\0220\n#max_distance_to_se"
  "e_for_transformer\030. \001(\002:\003500\022\031\n\016lane_map"
  "_scale\030/ \001(\002:\0012\022\030\n\013start_y_pos\0300 \001(\005:\00331"
  "2\022\033\n\016lane_map_width\0301 \001(\005:\003960\022\034\n\017lane_m"
  "ap_height\0302 \001(\005:\003384"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto = {
    false, false, 1860, descriptor_table_protodef_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto,
    "modules/perception/proto/lane_post_process_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace lane_post_process_config {

// ===================================================================

class ModelConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelConfigs>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_space_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_non_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_map_confidence_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cc_split_siz(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cc_split_len(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_cc_pixel_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_cc_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_y_search_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_y_search_offset_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_assoc_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assoc_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_assoc_min_distance_image(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_assoc_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_assoc_max_distance_image(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_assoc_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_assoc_max_deviation_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_assoc_max_deviation_angle_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_assoc_deviation_angle_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_assoc_max_departure_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_assoc_max_departure_distance_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_assoc_departure_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_assoc_max_relative_orie(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_assoc_max_relative_orie_image(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_assoc_relative_orie_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_assoc_min_orientation_estimation_size(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_assoc_min_orientation_estimation_size_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_max_cc_marker_match_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_slide_window_size(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_slide_window_size_image(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_slide_window_max_point_num(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_max_group_prediction_marker_num(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_orientation_estimation_skip_marker_num(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_lane_interval_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_min_instance_size_prefiltered(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_min_instance_size_prefiltered_image(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_max_size_to_fit_straight_line(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_max_size_to_fit_straight_line_image(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_online_pitch_angle(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ground_height(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_max_distance_to_see_for_transformer(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_lane_map_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_start_y_pos(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_lane_map_width(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_lane_map_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ModelConfigs::ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lane_post_process_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_){from._impl_.roi_}
    , decltype(_impl_.non_mask_){from._impl_.non_mask_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.space_type_){}
    , decltype(_impl_.assoc_method_){}
    , decltype(_impl_.image_width_){}
    , decltype(_impl_.image_height_){}
    , decltype(_impl_.use_non_mask_){}
    , decltype(_impl_.lane_map_height_){}
    , decltype(_impl_.lane_map_confidence_thresh_){}
    , decltype(_impl_.cc_split_siz_){}
    , decltype(_impl_.cc_split_len_){}
    , decltype(_impl_.min_cc_pixel_num_){}
    , decltype(_impl_.min_cc_size_){}
    , decltype(_impl_.min_y_search_offset_){}
    , decltype(_impl_.min_y_search_offset_image_){}
    , decltype(_impl_.assoc_min_distance_){}
    , decltype(_impl_.assoc_min_distance_image_){}
    , decltype(_impl_.assoc_max_distance_){}
    , decltype(_impl_.assoc_max_distance_image_){}
    , decltype(_impl_.assoc_distance_weight_){}
    , decltype(_impl_.assoc_max_deviation_angle_){}
    , decltype(_impl_.assoc_max_deviation_angle_image_){}
    , decltype(_impl_.assoc_deviation_angle_weight_){}
    , decltype(_impl_.assoc_max_departure_distance_){}
    , decltype(_impl_.assoc_max_departure_distance_image_){}
    , decltype(_impl_.assoc_departure_distance_weight_){}
    , decltype(_impl_.assoc_max_relative_orie_){}
    , decltype(_impl_.assoc_max_relative_orie_image_){}
    , decltype(_impl_.assoc_relative_orie_weight_){}
    , decltype(_impl_.assoc_min_orientation_estimation_size_){}
    , decltype(_impl_.assoc_min_orientation_estimation_size_image_){}
    , decltype(_impl_.max_cc_marker_match_num_){}
    , decltype(_impl_.slide_window_size_){}
    , decltype(_impl_.slide_window_size_image_){}
    , decltype(_impl_.slide_window_max_point_num_){}
    , decltype(_impl_.max_group_prediction_marker_num_){}
    , decltype(_impl_.orientation_estimation_skip_marker_num_){}
    , decltype(_impl_.lane_interval_distance_){}
    , decltype(_impl_.min_instance_size_prefiltered_){}
    , decltype(_impl_.min_instance_size_prefiltered_image_){}
    , decltype(_impl_.max_size_to_fit_straight_line_){}
    , decltype(_impl_.max_size_to_fit_straight_line_image_){}
    , decltype(_impl_.online_pitch_angle_){}
    , decltype(_impl_.ground_height_){}
    , decltype(_impl_.max_distance_to_see_for_transformer_){}
    , decltype(_impl_.lane_map_scale_){}
    , decltype(_impl_.start_y_pos_){}
    , decltype(_impl_.lane_map_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  _impl_.space_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_space_type()) {
    _impl_.space_type_.Set(from._internal_space_type(), 
      GetArenaForAllocation());
  }
  _impl_.assoc_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assoc_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assoc_method()) {
    _impl_.assoc_method_.Set(from._internal_assoc_method(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.image_width_, &from._impl_.image_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_map_width_) -
    reinterpret_cast<char*>(&_impl_.image_width_)) + sizeof(_impl_.lane_map_width_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lane_post_process_config.ModelConfigs)
}

inline void ModelConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_){arena}
    , decltype(_impl_.non_mask_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.space_type_){}
    , decltype(_impl_.assoc_method_){}
    , decltype(_impl_.image_width_){0}
    , decltype(_impl_.image_height_){0}
    , decltype(_impl_.use_non_mask_){false}
    , decltype(_impl_.lane_map_height_){384}
    , decltype(_impl_.lane_map_confidence_thresh_){0.95f}
    , decltype(_impl_.cc_split_siz_){50}
    , decltype(_impl_.cc_split_len_){25}
    , decltype(_impl_.min_cc_pixel_num_){10}
    , decltype(_impl_.min_cc_size_){5}
    , decltype(_impl_.min_y_search_offset_){0.5f}
    , decltype(_impl_.min_y_search_offset_image_){0.5f}
    , decltype(_impl_.assoc_min_distance_){-0.5f}
    , decltype(_impl_.assoc_min_distance_image_){-3}
    , decltype(_impl_.assoc_max_distance_){60}
    , decltype(_impl_.assoc_max_distance_image_){400}
    , decltype(_impl_.assoc_distance_weight_){0.4f}
    , decltype(_impl_.assoc_max_deviation_angle_){15}
    , decltype(_impl_.assoc_max_deviation_angle_image_){45}
    , decltype(_impl_.assoc_deviation_angle_weight_){0.2f}
    , decltype(_impl_.assoc_max_departure_distance_){3}
    , decltype(_impl_.assoc_max_departure_distance_image_){80}
    , decltype(_impl_.assoc_departure_distance_weight_){0.2f}
    , decltype(_impl_.assoc_max_relative_orie_){15}
    , decltype(_impl_.assoc_max_relative_orie_image_){45}
    , decltype(_impl_.assoc_relative_orie_weight_){0.2f}
    , decltype(_impl_.assoc_min_orientation_estimation_size_){3}
    , decltype(_impl_.assoc_min_orientation_estimation_size_image_){10}
    , decltype(_impl_.max_cc_marker_match_num_){1}
    , decltype(_impl_.slide_window_size_){15}
    , decltype(_impl_.slide_window_size_image_){200}
    , decltype(_impl_.slide_window_max_point_num_){3}
    , decltype(_impl_.max_group_prediction_marker_num_){3}
    , decltype(_impl_.orientation_estimation_skip_marker_num_){1}
    , decltype(_impl_.lane_interval_distance_){4}
    , decltype(_impl_.min_instance_size_prefiltered_){3}
    , decltype(_impl_.min_instance_size_prefiltered_image_){20}
    , decltype(_impl_.max_size_to_fit_straight_line_){10}
    , decltype(_impl_.max_size_to_fit_straight_line_image_){300}
    , decltype(_impl_.online_pitch_angle_){-2.5f}
    , decltype(_impl_.ground_height_){1.6f}
    , decltype(_impl_.max_distance_to_see_for_transformer_){500}
    , decltype(_impl_.lane_map_scale_){2}
    , decltype(_impl_.start_y_pos_){312}
    , decltype(_impl_.lane_map_width_){960}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.space_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.assoc_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assoc_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.lane_post_process_config.ModelConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roi_.~RepeatedField();
  _impl_.non_mask_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.space_type_.Destroy();
  _impl_.assoc_method_.Destroy();
}

void ModelConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lane_post_process_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roi_.Clear();
  _impl_.non_mask_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.space_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.assoc_method_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.image_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_non_mask_) -
        reinterpret_cast<char*>(&_impl_.image_width_)) + sizeof(_impl_.use_non_mask_));
    _impl_.lane_map_height_ = 384;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.lane_map_confidence_thresh_ = 0.95f;
    _impl_.cc_split_siz_ = 50;
    _impl_.cc_split_len_ = 25;
    _impl_.min_cc_pixel_num_ = 10;
    _impl_.min_cc_size_ = 5;
    _impl_.min_y_search_offset_ = 0.5f;
    _impl_.min_y_search_offset_image_ = 0.5f;
    _impl_.assoc_min_distance_ = -0.5f;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.assoc_min_distance_image_ = -3;
    _impl_.assoc_max_distance_ = 60;
    _impl_.assoc_max_distance_image_ = 400;
    _impl_.assoc_distance_weight_ = 0.4f;
    _impl_.assoc_max_deviation_angle_ = 15;
    _impl_.assoc_max_deviation_angle_image_ = 45;
    _impl_.assoc_deviation_angle_weight_ = 0.2f;
    _impl_.assoc_max_departure_distance_ = 3;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.assoc_max_departure_distance_image_ = 80;
    _impl_.assoc_departure_distance_weight_ = 0.2f;
    _impl_.assoc_max_relative_orie_ = 15;
    _impl_.assoc_max_relative_orie_image_ = 45;
    _impl_.assoc_relative_orie_weight_ = 0.2f;
    _impl_.assoc_min_orientation_estimation_size_ = 3;
    _impl_.assoc_min_orientation_estimation_size_image_ = 10;
    _impl_.max_cc_marker_match_num_ = 1;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.slide_window_size_ = 15;
    _impl_.slide_window_size_image_ = 200;
    _impl_.slide_window_max_point_num_ = 3;
    _impl_.max_group_prediction_marker_num_ = 3;
    _impl_.orientation_estimation_skip_marker_num_ = 1;
    _impl_.lane_interval_distance_ = 4;
    _impl_.min_instance_size_prefiltered_ = 3;
    _impl_.min_instance_size_prefiltered_image_ = 20;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.max_size_to_fit_straight_line_ = 10;
    _impl_.max_size_to_fit_straight_line_image_ = 300;
    _impl_.online_pitch_angle_ = -2.5f;
    _impl_.ground_height_ = 1.6f;
    _impl_.max_distance_to_see_for_transformer_ = 500;
    _impl_.lane_map_scale_ = 2;
    _impl_.start_y_pos_ = 312;
    _impl_.lane_map_width_ = 960;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lane_post_process_config.ModelConfigs.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lane_post_process_config.ModelConfigs.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string space_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_space_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lane_post_process_config.ModelConfigs.space_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_image_width(&_impl_._has_bits_);
          _impl_.image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_image_height(&_impl_._has_bits_);
          _impl_.image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float roi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_roi(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_roi(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_non_mask = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_use_non_mask(&_impl_._has_bits_);
          _impl_.use_non_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float non_mask = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_non_mask(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_non_mask(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float lane_map_confidence_thresh = 9 [default = 0.95];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_lane_map_confidence_thresh(&_impl_._has_bits_);
          _impl_.lane_map_confidence_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cc_split_siz = 10 [default = 50];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_cc_split_siz(&_impl_._has_bits_);
          _impl_.cc_split_siz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cc_split_len = 11 [default = 25];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cc_split_len(&_impl_._has_bits_);
          _impl_.cc_split_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_cc_pixel_num = 12 [default = 10];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_min_cc_pixel_num(&_impl_._has_bits_);
          _impl_.min_cc_pixel_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_cc_size = 13 [default = 5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_min_cc_size(&_impl_._has_bits_);
          _impl_.min_cc_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_y_search_offset = 14 [default = 0.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_min_y_search_offset(&_impl_._has_bits_);
          _impl_.min_y_search_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_y_search_offset_image = 15 [default = 0.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_min_y_search_offset_image(&_impl_._has_bits_);
          _impl_.min_y_search_offset_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string assoc_method = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_assoc_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lane_post_process_config.ModelConfigs.assoc_method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_min_distance = 17 [default = -0.5];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_assoc_min_distance(&_impl_._has_bits_);
          _impl_.assoc_min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_min_distance_image = 18 [default = -3];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_assoc_min_distance_image(&_impl_._has_bits_);
          _impl_.assoc_min_distance_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_distance = 19 [default = 60];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_assoc_max_distance(&_impl_._has_bits_);
          _impl_.assoc_max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_distance_image = 20 [default = 400];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_assoc_max_distance_image(&_impl_._has_bits_);
          _impl_.assoc_max_distance_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_distance_weight = 21 [default = 0.4];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_assoc_distance_weight(&_impl_._has_bits_);
          _impl_.assoc_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_deviation_angle = 22 [default = 15];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_assoc_max_deviation_angle(&_impl_._has_bits_);
          _impl_.assoc_max_deviation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_deviation_angle_image = 23 [default = 45];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_assoc_max_deviation_angle_image(&_impl_._has_bits_);
          _impl_.assoc_max_deviation_angle_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_assoc_deviation_angle_weight(&_impl_._has_bits_);
          _impl_.assoc_deviation_angle_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_departure_distance = 25 [default = 3];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_assoc_max_departure_distance(&_impl_._has_bits_);
          _impl_.assoc_max_departure_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_departure_distance_image = 26 [default = 80];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_assoc_max_departure_distance_image(&_impl_._has_bits_);
          _impl_.assoc_max_departure_distance_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_departure_distance_weight = 27 [default = 0.2];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_assoc_departure_distance_weight(&_impl_._has_bits_);
          _impl_.assoc_departure_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_relative_orie = 28 [default = 15];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_assoc_max_relative_orie(&_impl_._has_bits_);
          _impl_.assoc_max_relative_orie_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_max_relative_orie_image = 29 [default = 45];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_assoc_max_relative_orie_image(&_impl_._has_bits_);
          _impl_.assoc_max_relative_orie_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_relative_orie_weight = 30 [default = 0.2];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_assoc_relative_orie_weight(&_impl_._has_bits_);
          _impl_.assoc_relative_orie_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_assoc_min_orientation_estimation_size(&_impl_._has_bits_);
          _impl_.assoc_min_orientation_estimation_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_assoc_min_orientation_estimation_size_image(&_impl_._has_bits_);
          _impl_.assoc_min_orientation_estimation_size_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_cc_marker_match_num = 33 [default = 1];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_cc_marker_match_num(&_impl_._has_bits_);
          _impl_.max_cc_marker_match_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float slide_window_size = 34 [default = 15];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_slide_window_size(&_impl_._has_bits_);
          _impl_.slide_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float slide_window_size_image = 35 [default = 200];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_slide_window_size_image(&_impl_._has_bits_);
          _impl_.slide_window_size_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slide_window_max_point_num = 36 [default = 3];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_slide_window_max_point_num(&_impl_._has_bits_);
          _impl_.slide_window_max_point_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_group_prediction_marker_num = 37 [default = 3];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_group_prediction_marker_num(&_impl_._has_bits_);
          _impl_.max_group_prediction_marker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_orientation_estimation_skip_marker_num(&_impl_._has_bits_);
          _impl_.orientation_estimation_skip_marker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float lane_interval_distance = 39 [default = 4];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_lane_interval_distance(&_impl_._has_bits_);
          _impl_.lane_interval_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_instance_size_prefiltered = 40 [default = 3];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_min_instance_size_prefiltered(&_impl_._has_bits_);
          _impl_.min_instance_size_prefiltered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_instance_size_prefiltered_image = 41 [default = 20];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_min_instance_size_prefiltered_image(&_impl_._has_bits_);
          _impl_.min_instance_size_prefiltered_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_size_to_fit_straight_line = 42 [default = 10];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_max_size_to_fit_straight_line(&_impl_._has_bits_);
          _impl_.max_size_to_fit_straight_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_max_size_to_fit_straight_line_image(&_impl_._has_bits_);
          _impl_.max_size_to_fit_straight_line_image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float online_pitch_angle = 44 [default = -2.5];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_online_pitch_angle(&_impl_._has_bits_);
          _impl_.online_pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ground_height = 45 [default = 1.6];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_ground_height(&_impl_._has_bits_);
          _impl_.ground_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_distance_to_see_for_transformer = 46 [default = 500];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_max_distance_to_see_for_transformer(&_impl_._has_bits_);
          _impl_.max_distance_to_see_for_transformer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float lane_map_scale = 47 [default = 2];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_lane_map_scale(&_impl_._has_bits_);
          _impl_.lane_map_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 start_y_pos = 48 [default = 312];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_start_y_pos(&_impl_._has_bits_);
          _impl_.start_y_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_map_width = 49 [default = 960];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_lane_map_width(&_impl_._has_bits_);
          _impl_.lane_map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_map_height = 50 [default = 384];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_lane_map_height(&_impl_._has_bits_);
          _impl_.lane_map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lane_post_process_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string space_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_space_type().data(), static_cast<int>(this->_internal_space_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.space_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_space_type(), target);
  }

  // optional int32 image_width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_image_width(), target);
  }

  // optional int32 image_height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_image_height(), target);
  }

  // repeated float roi = 6;
  for (int i = 0, n = this->_internal_roi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_roi(i), target);
  }

  // optional bool use_non_mask = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_use_non_mask(), target);
  }

  // repeated float non_mask = 8;
  for (int i = 0, n = this->_internal_non_mask_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_non_mask(i), target);
  }

  // optional float lane_map_confidence_thresh = 9 [default = 0.95];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_lane_map_confidence_thresh(), target);
  }

  // optional float cc_split_siz = 10 [default = 50];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_cc_split_siz(), target);
  }

  // optional int32 cc_split_len = 11 [default = 25];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_cc_split_len(), target);
  }

  // optional int32 min_cc_pixel_num = 12 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_min_cc_pixel_num(), target);
  }

  // optional int32 min_cc_size = 13 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_min_cc_size(), target);
  }

  // optional float min_y_search_offset = 14 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_min_y_search_offset(), target);
  }

  // optional float min_y_search_offset_image = 15 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_min_y_search_offset_image(), target);
  }

  // optional string assoc_method = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assoc_method().data(), static_cast<int>(this->_internal_assoc_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lane_post_process_config.ModelConfigs.assoc_method");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_assoc_method(), target);
  }

  // optional float assoc_min_distance = 17 [default = -0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_assoc_min_distance(), target);
  }

  // optional float assoc_min_distance_image = 18 [default = -3];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_assoc_min_distance_image(), target);
  }

  // optional float assoc_max_distance = 19 [default = 60];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_assoc_max_distance(), target);
  }

  // optional float assoc_max_distance_image = 20 [default = 400];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_assoc_max_distance_image(), target);
  }

  // optional float assoc_distance_weight = 21 [default = 0.4];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_assoc_distance_weight(), target);
  }

  // optional float assoc_max_deviation_angle = 22 [default = 15];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_assoc_max_deviation_angle(), target);
  }

  // optional float assoc_max_deviation_angle_image = 23 [default = 45];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_assoc_max_deviation_angle_image(), target);
  }

  // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_assoc_deviation_angle_weight(), target);
  }

  // optional float assoc_max_departure_distance = 25 [default = 3];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_assoc_max_departure_distance(), target);
  }

  // optional float assoc_max_departure_distance_image = 26 [default = 80];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_assoc_max_departure_distance_image(), target);
  }

  // optional float assoc_departure_distance_weight = 27 [default = 0.2];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_assoc_departure_distance_weight(), target);
  }

  // optional float assoc_max_relative_orie = 28 [default = 15];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_assoc_max_relative_orie(), target);
  }

  // optional float assoc_max_relative_orie_image = 29 [default = 45];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_assoc_max_relative_orie_image(), target);
  }

  // optional float assoc_relative_orie_weight = 30 [default = 0.2];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_assoc_relative_orie_weight(), target);
  }

  // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_assoc_min_orientation_estimation_size(), target);
  }

  // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_assoc_min_orientation_estimation_size_image(), target);
  }

  // optional int32 max_cc_marker_match_num = 33 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_max_cc_marker_match_num(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float slide_window_size = 34 [default = 15];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_slide_window_size(), target);
  }

  // optional float slide_window_size_image = 35 [default = 200];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_slide_window_size_image(), target);
  }

  // optional int32 slide_window_max_point_num = 36 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_slide_window_max_point_num(), target);
  }

  // optional int32 max_group_prediction_marker_num = 37 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_max_group_prediction_marker_num(), target);
  }

  // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_orientation_estimation_skip_marker_num(), target);
  }

  // optional float lane_interval_distance = 39 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(39, this->_internal_lane_interval_distance(), target);
  }

  // optional float min_instance_size_prefiltered = 40 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_min_instance_size_prefiltered(), target);
  }

  // optional float min_instance_size_prefiltered_image = 41 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_min_instance_size_prefiltered_image(), target);
  }

  // optional float max_size_to_fit_straight_line = 42 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_max_size_to_fit_straight_line(), target);
  }

  // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_max_size_to_fit_straight_line_image(), target);
  }

  // optional float online_pitch_angle = 44 [default = -2.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_online_pitch_angle(), target);
  }

  // optional float ground_height = 45 [default = 1.6];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_ground_height(), target);
  }

  // optional float max_distance_to_see_for_transformer = 46 [default = 500];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(46, this->_internal_max_distance_to_see_for_transformer(), target);
  }

  // optional float lane_map_scale = 47 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(47, this->_internal_lane_map_scale(), target);
  }

  // optional int32 start_y_pos = 48 [default = 312];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_start_y_pos(), target);
  }

  // optional int32 lane_map_width = 49 [default = 960];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_lane_map_width(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 lane_map_height = 50 [default = 384];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_lane_map_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lane_post_process_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lane_post_process_config.ModelConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float roi = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_roi_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_roi_size());
    total_size += data_size;
  }

  // repeated float non_mask = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_non_mask_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_non_mask_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string space_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_space_type());
    }

    // optional string assoc_method = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_assoc_method());
    }

    // optional int32 image_width = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_width());
    }

    // optional int32 image_height = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_height());
    }

    // optional bool use_non_mask = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 lane_map_height = 50 [default = 384];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_lane_map_height());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float lane_map_confidence_thresh = 9 [default = 0.95];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float cc_split_siz = 10 [default = 50];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 cc_split_len = 11 [default = 25];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cc_split_len());
    }

    // optional int32 min_cc_pixel_num = 12 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_cc_pixel_num());
    }

    // optional int32 min_cc_size = 13 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_cc_size());
    }

    // optional float min_y_search_offset = 14 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float min_y_search_offset_image = 15 [default = 0.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float assoc_min_distance = 17 [default = -0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float assoc_min_distance_image = 18 [default = -3];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_distance = 19 [default = 60];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_distance_image = 20 [default = 400];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_distance_weight = 21 [default = 0.4];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_deviation_angle = 22 [default = 15];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_deviation_angle_image = 23 [default = 45];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_departure_distance = 25 [default = 3];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float assoc_max_departure_distance_image = 26 [default = 80];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_departure_distance_weight = 27 [default = 0.2];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_relative_orie = 28 [default = 15];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_max_relative_orie_image = 29 [default = 45];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_relative_orie_weight = 30 [default = 0.2];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional int32 max_cc_marker_match_num = 33 [default = 1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_cc_marker_match_num());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float slide_window_size = 34 [default = 15];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float slide_window_size_image = 35 [default = 200];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 slide_window_max_point_num = 36 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_slide_window_max_point_num());
    }

    // optional int32 max_group_prediction_marker_num = 37 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_group_prediction_marker_num());
    }

    // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_orientation_estimation_skip_marker_num());
    }

    // optional float lane_interval_distance = 39 [default = 4];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float min_instance_size_prefiltered = 40 [default = 3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float min_instance_size_prefiltered_image = 41 [default = 20];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float max_size_to_fit_straight_line = 42 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float online_pitch_angle = 44 [default = -2.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float ground_height = 45 [default = 1.6];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float max_distance_to_see_for_transformer = 46 [default = 500];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float lane_map_scale = 47 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 start_y_pos = 48 [default = 312];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_start_y_pos());
    }

    // optional int32 lane_map_width = 49 [default = 960];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_lane_map_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigs::GetClassData() const { return &_class_data_; }

void ModelConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelConfigs *>(to)->MergeFrom(
      static_cast<const ModelConfigs &>(from));
}


void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.roi_.MergeFrom(from._impl_.roi_);
  _impl_.non_mask_.MergeFrom(from._impl_.non_mask_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_space_type(from._internal_space_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_assoc_method(from._internal_assoc_method());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.image_width_ = from._impl_.image_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.image_height_ = from._impl_.image_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.use_non_mask_ = from._impl_.use_non_mask_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.lane_map_height_ = from._impl_.lane_map_height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.lane_map_confidence_thresh_ = from._impl_.lane_map_confidence_thresh_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.cc_split_siz_ = from._impl_.cc_split_siz_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.cc_split_len_ = from._impl_.cc_split_len_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.min_cc_pixel_num_ = from._impl_.min_cc_pixel_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.min_cc_size_ = from._impl_.min_cc_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.min_y_search_offset_ = from._impl_.min_y_search_offset_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.min_y_search_offset_image_ = from._impl_.min_y_search_offset_image_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.assoc_min_distance_ = from._impl_.assoc_min_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.assoc_min_distance_image_ = from._impl_.assoc_min_distance_image_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.assoc_max_distance_ = from._impl_.assoc_max_distance_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.assoc_max_distance_image_ = from._impl_.assoc_max_distance_image_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.assoc_distance_weight_ = from._impl_.assoc_distance_weight_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.assoc_max_deviation_angle_ = from._impl_.assoc_max_deviation_angle_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.assoc_max_deviation_angle_image_ = from._impl_.assoc_max_deviation_angle_image_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.assoc_deviation_angle_weight_ = from._impl_.assoc_deviation_angle_weight_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.assoc_max_departure_distance_ = from._impl_.assoc_max_departure_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.assoc_max_departure_distance_image_ = from._impl_.assoc_max_departure_distance_image_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.assoc_departure_distance_weight_ = from._impl_.assoc_departure_distance_weight_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.assoc_max_relative_orie_ = from._impl_.assoc_max_relative_orie_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.assoc_max_relative_orie_image_ = from._impl_.assoc_max_relative_orie_image_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.assoc_relative_orie_weight_ = from._impl_.assoc_relative_orie_weight_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.assoc_min_orientation_estimation_size_ = from._impl_.assoc_min_orientation_estimation_size_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.assoc_min_orientation_estimation_size_image_ = from._impl_.assoc_min_orientation_estimation_size_image_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.max_cc_marker_match_num_ = from._impl_.max_cc_marker_match_num_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.slide_window_size_ = from._impl_.slide_window_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.slide_window_size_image_ = from._impl_.slide_window_size_image_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.slide_window_max_point_num_ = from._impl_.slide_window_max_point_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_group_prediction_marker_num_ = from._impl_.max_group_prediction_marker_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.orientation_estimation_skip_marker_num_ = from._impl_.orientation_estimation_skip_marker_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.lane_interval_distance_ = from._impl_.lane_interval_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.min_instance_size_prefiltered_ = from._impl_.min_instance_size_prefiltered_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.min_instance_size_prefiltered_image_ = from._impl_.min_instance_size_prefiltered_image_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.max_size_to_fit_straight_line_ = from._impl_.max_size_to_fit_straight_line_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.max_size_to_fit_straight_line_image_ = from._impl_.max_size_to_fit_straight_line_image_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.online_pitch_angle_ = from._impl_.online_pitch_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.ground_height_ = from._impl_.ground_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.max_distance_to_see_for_transformer_ = from._impl_.max_distance_to_see_for_transformer_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.lane_map_scale_ = from._impl_.lane_map_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.start_y_pos_ = from._impl_.start_y_pos_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.lane_map_width_ = from._impl_.lane_map_width_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lane_post_process_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::InternalSwap(ModelConfigs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.roi_.InternalSwap(&other->_impl_.roi_);
  _impl_.non_mask_.InternalSwap(&other->_impl_.non_mask_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.space_type_, lhs_arena,
      &other->_impl_.space_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assoc_method_, lhs_arena,
      &other->_impl_.assoc_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.use_non_mask_)
      + sizeof(ModelConfigs::_impl_.use_non_mask_)
      - PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.image_width_)>(
          reinterpret_cast<char*>(&_impl_.image_width_),
          reinterpret_cast<char*>(&other->_impl_.image_width_));
  swap(_impl_.lane_map_height_, other->_impl_.lane_map_height_);
  swap(_impl_.lane_map_confidence_thresh_, other->_impl_.lane_map_confidence_thresh_);
  swap(_impl_.cc_split_siz_, other->_impl_.cc_split_siz_);
  swap(_impl_.cc_split_len_, other->_impl_.cc_split_len_);
  swap(_impl_.min_cc_pixel_num_, other->_impl_.min_cc_pixel_num_);
  swap(_impl_.min_cc_size_, other->_impl_.min_cc_size_);
  swap(_impl_.min_y_search_offset_, other->_impl_.min_y_search_offset_);
  swap(_impl_.min_y_search_offset_image_, other->_impl_.min_y_search_offset_image_);
  swap(_impl_.assoc_min_distance_, other->_impl_.assoc_min_distance_);
  swap(_impl_.assoc_min_distance_image_, other->_impl_.assoc_min_distance_image_);
  swap(_impl_.assoc_max_distance_, other->_impl_.assoc_max_distance_);
  swap(_impl_.assoc_max_distance_image_, other->_impl_.assoc_max_distance_image_);
  swap(_impl_.assoc_distance_weight_, other->_impl_.assoc_distance_weight_);
  swap(_impl_.assoc_max_deviation_angle_, other->_impl_.assoc_max_deviation_angle_);
  swap(_impl_.assoc_max_deviation_angle_image_, other->_impl_.assoc_max_deviation_angle_image_);
  swap(_impl_.assoc_deviation_angle_weight_, other->_impl_.assoc_deviation_angle_weight_);
  swap(_impl_.assoc_max_departure_distance_, other->_impl_.assoc_max_departure_distance_);
  swap(_impl_.assoc_max_departure_distance_image_, other->_impl_.assoc_max_departure_distance_image_);
  swap(_impl_.assoc_departure_distance_weight_, other->_impl_.assoc_departure_distance_weight_);
  swap(_impl_.assoc_max_relative_orie_, other->_impl_.assoc_max_relative_orie_);
  swap(_impl_.assoc_max_relative_orie_image_, other->_impl_.assoc_max_relative_orie_image_);
  swap(_impl_.assoc_relative_orie_weight_, other->_impl_.assoc_relative_orie_weight_);
  swap(_impl_.assoc_min_orientation_estimation_size_, other->_impl_.assoc_min_orientation_estimation_size_);
  swap(_impl_.assoc_min_orientation_estimation_size_image_, other->_impl_.assoc_min_orientation_estimation_size_image_);
  swap(_impl_.max_cc_marker_match_num_, other->_impl_.max_cc_marker_match_num_);
  swap(_impl_.slide_window_size_, other->_impl_.slide_window_size_);
  swap(_impl_.slide_window_size_image_, other->_impl_.slide_window_size_image_);
  swap(_impl_.slide_window_max_point_num_, other->_impl_.slide_window_max_point_num_);
  swap(_impl_.max_group_prediction_marker_num_, other->_impl_.max_group_prediction_marker_num_);
  swap(_impl_.orientation_estimation_skip_marker_num_, other->_impl_.orientation_estimation_skip_marker_num_);
  swap(_impl_.lane_interval_distance_, other->_impl_.lane_interval_distance_);
  swap(_impl_.min_instance_size_prefiltered_, other->_impl_.min_instance_size_prefiltered_);
  swap(_impl_.min_instance_size_prefiltered_image_, other->_impl_.min_instance_size_prefiltered_image_);
  swap(_impl_.max_size_to_fit_straight_line_, other->_impl_.max_size_to_fit_straight_line_);
  swap(_impl_.max_size_to_fit_straight_line_image_, other->_impl_.max_size_to_fit_straight_line_image_);
  swap(_impl_.online_pitch_angle_, other->_impl_.online_pitch_angle_);
  swap(_impl_.ground_height_, other->_impl_.ground_height_);
  swap(_impl_.max_distance_to_see_for_transformer_, other->_impl_.max_distance_to_see_for_transformer_);
  swap(_impl_.lane_map_scale_, other->_impl_.lane_map_scale_);
  swap(_impl_.start_y_pos_, other->_impl_.start_y_pos_);
  swap(_impl_.lane_map_width_, other->_impl_.lane_map_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lane_post_process_config::ModelConfigs*
Arena::CreateMaybeMessage< ::apollo::perception::lane_post_process_config::ModelConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lane_post_process_config::ModelConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
