// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/sensor_meta_schema.proto

#include "modules/perception/proto/sensor_meta_schema.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
PROTOBUF_CONSTEXPR SensorMeta::SensorMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_.type_)*/-1} {}
struct SensorMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMetaDefaultTypeInternal() {}
  union {
    SensorMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMetaDefaultTypeInternal _SensorMeta_default_instance_;
PROTOBUF_CONSTEXPR MultiSensorMeta::MultiSensorMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_meta_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiSensorMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSensorMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSensorMetaDefaultTypeInternal() {}
  union {
    MultiSensorMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSensorMetaDefaultTypeInternal _MultiSensorMeta_default_instance_;
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _impl_.orientation_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MultiSensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MultiSensorMeta, _impl_.sensor_meta_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::SensorMeta)},
  { 12, -1, -1, sizeof(::apollo::perception::MultiSensorMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::_SensorMeta_default_instance_._instance,
  &::apollo::perception::_MultiSensorMeta_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/perception/proto/sensor_meta_s"
  "chema.proto\022\021apollo.perception\"\255\004\n\nSenso"
  "rMeta\022\014\n\004name\030\001 \001(\t\0226\n\004type\030\002 \001(\0162(.apol"
  "lo.perception.SensorMeta.SensorType\022D\n\013o"
  "rientation\030\003 \001(\0162/.apollo.perception.Sen"
  "sorMeta.SensorOrientation\"\367\001\n\nSensorType"
  "\022 \n\023UNKNOWN_SENSOR_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013VE"
  "LODYNE_64\020\000\022\017\n\013VELODYNE_32\020\001\022\017\n\013VELODYNE"
  "_16\020\002\022\r\n\tLDLIDAR_4\020\003\022\r\n\tLDLIDAR_1\020\004\022\025\n\021S"
  "HORT_RANGE_RADAR\020\005\022\024\n\020LONG_RANGE_RADAR\020\006"
  "\022\024\n\020MONOCULAR_CAMERA\020\007\022\021\n\rSTEREO_CAMERA\020"
  "\010\022\016\n\nULTRASONIC\020\t\022\020\n\014VELODYNE_128\020\n\"\230\001\n\021"
  "SensorOrientation\022\t\n\005FRONT\020\000\022\020\n\014LEFT_FOR"
  "WARD\020\001\022\010\n\004LEFT\020\002\022\021\n\rLEFT_BACKWARD\020\003\022\010\n\004R"
  "EAR\020\004\022\022\n\016RIGHT_BACKWARD\020\005\022\t\n\005RIGHT\020\006\022\021\n\r"
  "RIGHT_FORWARD\020\007\022\r\n\tPANORAMIC\020\010\"E\n\017MultiS"
  "ensorMeta\0222\n\013sensor_meta\030\001 \003(\0132\035.apollo."
  "perception.SensorMeta"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto = {
    false, false, 701, descriptor_table_protodef_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto,
    "modules/perception/proto/sensor_meta_schema.proto",
    &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMeta_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[0];
}
bool SensorMeta_SensorType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorMeta_SensorType SensorMeta::UNKNOWN_SENSOR_TYPE;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_64;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_32;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_16;
constexpr SensorMeta_SensorType SensorMeta::LDLIDAR_4;
constexpr SensorMeta_SensorType SensorMeta::LDLIDAR_1;
constexpr SensorMeta_SensorType SensorMeta::SHORT_RANGE_RADAR;
constexpr SensorMeta_SensorType SensorMeta::LONG_RANGE_RADAR;
constexpr SensorMeta_SensorType SensorMeta::MONOCULAR_CAMERA;
constexpr SensorMeta_SensorType SensorMeta::STEREO_CAMERA;
constexpr SensorMeta_SensorType SensorMeta::ULTRASONIC;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_128;
constexpr SensorMeta_SensorType SensorMeta::SensorType_MIN;
constexpr SensorMeta_SensorType SensorMeta::SensorType_MAX;
constexpr int SensorMeta::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMeta_SensorOrientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[1];
}
bool SensorMeta_SensorOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorMeta_SensorOrientation SensorMeta::FRONT;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT_FORWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT_BACKWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::REAR;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT_BACKWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT_FORWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::PANORAMIC;
constexpr SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MIN;
constexpr SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MAX;
constexpr int SensorMeta::SensorOrientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SensorMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorMeta>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorMeta::SensorMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.SensorMeta)
}
SensorMeta::SensorMeta(const SensorMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.orientation_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.orientation_, &from._impl_.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.orientation_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.SensorMeta)
}

inline void SensorMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.orientation_){0}
    , decltype(_impl_.type_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorMeta::~SensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.SensorMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SensorMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.SensorMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.orientation_ = 0;
    _impl_.type_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.SensorMeta.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.SensorMeta.SensorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::SensorMeta_SensorType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::SensorMeta_SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::SensorMeta_SensorOrientation_IsValid(val))) {
            _internal_set_orientation(static_cast<::apollo::perception::SensorMeta_SensorOrientation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.SensorMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.SensorMeta)
  return target;
}

size_t SensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.SensorMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_orientation());
    }

    // optional .apollo.perception.SensorMeta.SensorType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMeta::GetClassData() const { return &_class_data_; }

void SensorMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorMeta *>(to)->MergeFrom(
      static_cast<const SensorMeta &>(from));
}


void SensorMeta::MergeFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.SensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.orientation_ = from._impl_.orientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMeta::CopyFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.SensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeta::IsInitialized() const {
  return true;
}

void SensorMeta::InternalSwap(SensorMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.orientation_, other->_impl_.orientation_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[0]);
}

// ===================================================================

class MultiSensorMeta::_Internal {
 public:
};

MultiSensorMeta::MultiSensorMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.MultiSensorMeta)
}
MultiSensorMeta::MultiSensorMeta(const MultiSensorMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_meta_){from._impl_.sensor_meta_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.MultiSensorMeta)
}

inline void MultiSensorMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_meta_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiSensorMeta::~MultiSensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.MultiSensorMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiSensorMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_meta_.~RepeatedPtrField();
}

void MultiSensorMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiSensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.MultiSensorMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_meta_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSensorMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.SensorMeta sensor_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiSensorMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.MultiSensorMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_meta_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_meta(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.MultiSensorMeta)
  return target;
}

size_t MultiSensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.MultiSensorMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  total_size += 1UL * this->_internal_sensor_meta_size();
  for (const auto& msg : this->_impl_.sensor_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiSensorMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiSensorMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiSensorMeta::GetClassData() const { return &_class_data_; }

void MultiSensorMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiSensorMeta *>(to)->MergeFrom(
      static_cast<const MultiSensorMeta &>(from));
}


void MultiSensorMeta::MergeFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.MultiSensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sensor_meta_.MergeFrom(from._impl_.sensor_meta_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSensorMeta::CopyFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.MultiSensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSensorMeta::IsInitialized() const {
  return true;
}

void MultiSensorMeta::InternalSwap(MultiSensorMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensor_meta_.InternalSwap(&other->_impl_.sensor_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSensorMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::SensorMeta*
Arena::CreateMaybeMessage< ::apollo::perception::SensorMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::SensorMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::MultiSensorMeta*
Arena::CreateMaybeMessage< ::apollo::perception::MultiSensorMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::MultiSensorMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
