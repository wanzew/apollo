// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/motion_service.proto

#include "modules/perception/proto/motion_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
PROTOBUF_CONSTEXPR MotionType::MotionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m00_)*/0
  , /*decltype(_impl_.m01_)*/0
  , /*decltype(_impl_.m02_)*/0
  , /*decltype(_impl_.m03_)*/0
  , /*decltype(_impl_.m10_)*/0
  , /*decltype(_impl_.m11_)*/0
  , /*decltype(_impl_.m12_)*/0
  , /*decltype(_impl_.m13_)*/0
  , /*decltype(_impl_.m20_)*/0
  , /*decltype(_impl_.m21_)*/0
  , /*decltype(_impl_.m22_)*/0
  , /*decltype(_impl_.m23_)*/0
  , /*decltype(_impl_.m30_)*/0
  , /*decltype(_impl_.m31_)*/0
  , /*decltype(_impl_.m32_)*/0
  , /*decltype(_impl_.m33_)*/0} {}
struct MotionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionTypeDefaultTypeInternal() {}
  union {
    MotionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionTypeDefaultTypeInternal _MotionType_default_instance_;
PROTOBUF_CONSTEXPR VehicleStatus::VehicleStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motion_)*/nullptr
  , /*decltype(_impl_.roll_rate_)*/0
  , /*decltype(_impl_.pitch_rate_)*/0
  , /*decltype(_impl_.yaw_rate_)*/0
  , /*decltype(_impl_.velocity_)*/0
  , /*decltype(_impl_.velocity_x_)*/0
  , /*decltype(_impl_.velocity_y_)*/0
  , /*decltype(_impl_.time_ts_)*/0
  , /*decltype(_impl_.time_d_)*/0
  , /*decltype(_impl_.velocity_z_)*/0} {}
struct VehicleStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleStatusDefaultTypeInternal() {}
  union {
    VehicleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleStatusDefaultTypeInternal _VehicleStatus_default_instance_;
PROTOBUF_CONSTEXPR Motion_Service::Motion_Service(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_status_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct Motion_ServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Motion_ServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Motion_ServiceDefaultTypeInternal() {}
  union {
    Motion_Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Motion_ServiceDefaultTypeInternal _Motion_Service_default_instance_;
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m00_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m01_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m02_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m03_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m10_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m11_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m12_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m13_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m20_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m21_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m22_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m23_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m30_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m31_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m32_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _impl_.m33_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.roll_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.velocity_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.velocity_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.velocity_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.time_ts_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.time_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _impl_.motion_),
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _impl_.vehicle_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _impl_.header_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::apollo::perception::MotionType)},
  { 38, 54, -1, sizeof(::apollo::perception::VehicleStatus)},
  { 64, 72, -1, sizeof(::apollo::perception::Motion_Service)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::_MotionType_default_instance_._instance,
  &::apollo::perception::_VehicleStatus_default_instance_._instance,
  &::apollo::perception::_Motion_Service_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/perception/proto/motion_servic"
  "e.proto\022\021apollo.perception\032!modules/comm"
  "on/proto/header.proto\"\334\001\n\nMotionType\022\013\n\003"
  "m00\030\001 \001(\002\022\013\n\003m01\030\002 \001(\002\022\013\n\003m02\030\003 \001(\002\022\013\n\003m"
  "03\030\004 \001(\002\022\013\n\003m10\030\005 \001(\002\022\013\n\003m11\030\006 \001(\002\022\013\n\003m1"
  "2\030\007 \001(\002\022\013\n\003m13\030\010 \001(\002\022\013\n\003m20\030\t \001(\002\022\013\n\003m21"
  "\030\n \001(\002\022\013\n\003m22\030\013 \001(\002\022\013\n\003m23\030\014 \001(\002\022\013\n\003m30\030"
  "\r \001(\002\022\013\n\003m31\030\016 \001(\002\022\013\n\003m32\030\017 \001(\002\022\013\n\003m33\030\020"
  " \001(\002\"\346\001\n\rVehicleStatus\022\021\n\troll_rate\030\001 \001("
  "\002\022\022\n\npitch_rate\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001(\002\022"
  "\020\n\010velocity\030\004 \001(\002\022\022\n\nvelocity_x\030\005 \001(\002\022\022\n"
  "\nvelocity_y\030\006 \001(\002\022\022\n\nvelocity_z\030\007 \001(\002\022\017\n"
  "\007time_ts\030\010 \001(\001\022\016\n\006time_d\030\t \001(\001\022-\n\006motion"
  "\030\n \001(\0132\035.apollo.perception.MotionType\"q\n"
  "\016Motion_Service\0228\n\016vehicle_status\030\001 \003(\0132"
  " .apollo.perception.VehicleStatus\022%\n\006hea"
  "der\030\002 \001(\0132\025.apollo.common.Header"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = {
    false, false, 672, descriptor_table_protodef_modules_2fperception_2fproto_2fmotion_5fservice_2eproto,
    "modules/perception/proto/motion_service.proto",
    &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fmotion_5fservice_2eproto(&descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto);
namespace apollo {
namespace perception {

// ===================================================================

class MotionType::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionType>()._impl_._has_bits_);
  static void set_has_m00(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m01(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m02(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m03(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m10(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m11(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m12(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_m13(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_m20(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_m21(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_m22(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_m23(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_m30(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_m31(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_m32(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_m33(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

MotionType::MotionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.MotionType)
}
MotionType::MotionType(const MotionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m00_){}
    , decltype(_impl_.m01_){}
    , decltype(_impl_.m02_){}
    , decltype(_impl_.m03_){}
    , decltype(_impl_.m10_){}
    , decltype(_impl_.m11_){}
    , decltype(_impl_.m12_){}
    , decltype(_impl_.m13_){}
    , decltype(_impl_.m20_){}
    , decltype(_impl_.m21_){}
    , decltype(_impl_.m22_){}
    , decltype(_impl_.m23_){}
    , decltype(_impl_.m30_){}
    , decltype(_impl_.m31_){}
    , decltype(_impl_.m32_){}
    , decltype(_impl_.m33_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m00_, &from._impl_.m00_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m33_) -
    reinterpret_cast<char*>(&_impl_.m00_)) + sizeof(_impl_.m33_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.MotionType)
}

inline void MotionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m00_){0}
    , decltype(_impl_.m01_){0}
    , decltype(_impl_.m02_){0}
    , decltype(_impl_.m03_){0}
    , decltype(_impl_.m10_){0}
    , decltype(_impl_.m11_){0}
    , decltype(_impl_.m12_){0}
    , decltype(_impl_.m13_){0}
    , decltype(_impl_.m20_){0}
    , decltype(_impl_.m21_){0}
    , decltype(_impl_.m22_){0}
    , decltype(_impl_.m23_){0}
    , decltype(_impl_.m30_){0}
    , decltype(_impl_.m31_){0}
    , decltype(_impl_.m32_){0}
    , decltype(_impl_.m33_){0}
  };
}

MotionType::~MotionType() {
  // @@protoc_insertion_point(destructor:apollo.perception.MotionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.MotionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.m00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m13_) -
        reinterpret_cast<char*>(&_impl_.m00_)) + sizeof(_impl_.m13_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.m20_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m33_) -
        reinterpret_cast<char*>(&_impl_.m20_)) + sizeof(_impl_.m33_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float m00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_m00(&has_bits);
          _impl_.m00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_m01(&has_bits);
          _impl_.m01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_m02(&has_bits);
          _impl_.m02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m03 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_m03(&has_bits);
          _impl_.m03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m10 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_m10(&has_bits);
          _impl_.m10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m11 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_m11(&has_bits);
          _impl_.m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m12 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_m12(&has_bits);
          _impl_.m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m13 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_m13(&has_bits);
          _impl_.m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m20 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_m20(&has_bits);
          _impl_.m20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m21 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_m21(&has_bits);
          _impl_.m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m22 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_m22(&has_bits);
          _impl_.m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m23 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_m23(&has_bits);
          _impl_.m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m30 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_m30(&has_bits);
          _impl_.m30_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m31 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_m31(&has_bits);
          _impl_.m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m32 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_m32(&has_bits);
          _impl_.m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float m33 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_m33(&has_bits);
          _impl_.m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.MotionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float m00 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_m00(), target);
  }

  // optional float m01 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_m01(), target);
  }

  // optional float m02 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_m02(), target);
  }

  // optional float m03 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_m03(), target);
  }

  // optional float m10 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_m10(), target);
  }

  // optional float m11 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_m11(), target);
  }

  // optional float m12 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_m12(), target);
  }

  // optional float m13 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_m13(), target);
  }

  // optional float m20 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_m20(), target);
  }

  // optional float m21 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_m21(), target);
  }

  // optional float m22 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_m22(), target);
  }

  // optional float m23 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_m23(), target);
  }

  // optional float m30 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_m30(), target);
  }

  // optional float m31 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_m31(), target);
  }

  // optional float m32 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_m32(), target);
  }

  // optional float m33 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_m33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.MotionType)
  return target;
}

size_t MotionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.MotionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float m00 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float m01 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float m02 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float m03 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float m10 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float m11 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float m12 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float m13 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float m20 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float m21 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float m22 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float m23 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float m30 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float m31 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float m32 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float m33 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionType::GetClassData() const { return &_class_data_; }

void MotionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionType *>(to)->MergeFrom(
      static_cast<const MotionType &>(from));
}


void MotionType::MergeFrom(const MotionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.MotionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m00_ = from._impl_.m00_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m01_ = from._impl_.m01_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.m02_ = from._impl_.m02_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.m03_ = from._impl_.m03_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.m10_ = from._impl_.m10_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.m11_ = from._impl_.m11_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.m12_ = from._impl_.m12_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.m13_ = from._impl_.m13_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.m20_ = from._impl_.m20_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.m21_ = from._impl_.m21_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.m22_ = from._impl_.m22_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.m23_ = from._impl_.m23_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.m30_ = from._impl_.m30_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.m31_ = from._impl_.m31_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.m32_ = from._impl_.m32_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.m33_ = from._impl_.m33_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionType::CopyFrom(const MotionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.MotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionType::IsInitialized() const {
  return true;
}

void MotionType::InternalSwap(MotionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionType, _impl_.m33_)
      + sizeof(MotionType::_impl_.m33_)
      - PROTOBUF_FIELD_OFFSET(MotionType, _impl_.m00_)>(
          reinterpret_cast<char*>(&_impl_.m00_),
          reinterpret_cast<char*>(&other->_impl_.m00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[0]);
}

// ===================================================================

class VehicleStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleStatus>()._impl_._has_bits_);
  static void set_has_roll_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pitch_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_velocity_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_velocity_z(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_d(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::MotionType& motion(const VehicleStatus* msg);
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::MotionType&
VehicleStatus::_Internal::motion(const VehicleStatus* msg) {
  return *msg->_impl_.motion_;
}
VehicleStatus::VehicleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.VehicleStatus)
}
VehicleStatus::VehicleStatus(const VehicleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_){nullptr}
    , decltype(_impl_.roll_rate_){}
    , decltype(_impl_.pitch_rate_){}
    , decltype(_impl_.yaw_rate_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.velocity_x_){}
    , decltype(_impl_.velocity_y_){}
    , decltype(_impl_.time_ts_){}
    , decltype(_impl_.time_d_){}
    , decltype(_impl_.velocity_z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motion()) {
    _impl_.motion_ = new ::apollo::perception::MotionType(*from._impl_.motion_);
  }
  ::memcpy(&_impl_.roll_rate_, &from._impl_.roll_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.velocity_z_) -
    reinterpret_cast<char*>(&_impl_.roll_rate_)) + sizeof(_impl_.velocity_z_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.VehicleStatus)
}

inline void VehicleStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_){nullptr}
    , decltype(_impl_.roll_rate_){0}
    , decltype(_impl_.pitch_rate_){0}
    , decltype(_impl_.yaw_rate_){0}
    , decltype(_impl_.velocity_){0}
    , decltype(_impl_.velocity_x_){0}
    , decltype(_impl_.velocity_y_){0}
    , decltype(_impl_.time_ts_){0}
    , decltype(_impl_.time_d_){0}
    , decltype(_impl_.velocity_z_){0}
  };
}

VehicleStatus::~VehicleStatus() {
  // @@protoc_insertion_point(destructor:apollo.perception.VehicleStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.motion_;
}

void VehicleStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.VehicleStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.motion_ != nullptr);
    _impl_.motion_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.roll_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_ts_) -
        reinterpret_cast<char*>(&_impl_.roll_rate_)) + sizeof(_impl_.time_ts_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.time_d_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.velocity_z_) -
        reinterpret_cast<char*>(&_impl_.time_d_)) + sizeof(_impl_.velocity_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float roll_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_roll_rate(&has_bits);
          _impl_.roll_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pitch_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_pitch_rate(&has_bits);
          _impl_.pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yaw_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_yaw_rate(&has_bits);
          _impl_.yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_velocity(&has_bits);
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_velocity_x(&has_bits);
          _impl_.velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_velocity_y(&has_bits);
          _impl_.velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_velocity_z(&has_bits);
          _impl_.velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double time_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_time_ts(&has_bits);
          _impl_.time_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_d = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_time_d(&has_bits);
          _impl_.time_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.MotionType motion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.VehicleStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float roll_rate = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rate(), target);
  }

  // optional float pitch_rate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rate(), target);
  }

  // optional float yaw_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rate(), target);
  }

  // optional float velocity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_velocity(), target);
  }

  // optional float velocity_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_velocity_x(), target);
  }

  // optional float velocity_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_velocity_y(), target);
  }

  // optional float velocity_z = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_velocity_z(), target);
  }

  // optional double time_ts = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_time_ts(), target);
  }

  // optional double time_d = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_time_d(), target);
  }

  // optional .apollo.perception.MotionType motion = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::motion(this),
        _Internal::motion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.VehicleStatus)
  return target;
}

size_t VehicleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.VehicleStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.MotionType motion = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.motion_);
    }

    // optional float roll_rate = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pitch_rate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float velocity = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float velocity_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float velocity_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional double time_ts = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double time_d = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional float velocity_z = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleStatus::GetClassData() const { return &_class_data_; }

void VehicleStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleStatus *>(to)->MergeFrom(
      static_cast<const VehicleStatus &>(from));
}


void VehicleStatus::MergeFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.VehicleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_motion()->::apollo::perception::MotionType::MergeFrom(from._internal_motion());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.roll_rate_ = from._impl_.roll_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pitch_rate_ = from._impl_.pitch_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.yaw_rate_ = from._impl_.yaw_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.velocity_ = from._impl_.velocity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.velocity_x_ = from._impl_.velocity_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.velocity_y_ = from._impl_.velocity_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.time_ts_ = from._impl_.time_ts_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.time_d_ = from._impl_.time_d_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.velocity_z_ = from._impl_.velocity_z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleStatus::CopyFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.VehicleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleStatus::IsInitialized() const {
  return true;
}

void VehicleStatus::InternalSwap(VehicleStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleStatus, _impl_.velocity_z_)
      + sizeof(VehicleStatus::_impl_.velocity_z_)
      - PROTOBUF_FIELD_OFFSET(VehicleStatus, _impl_.motion_)>(
          reinterpret_cast<char*>(&_impl_.motion_),
          reinterpret_cast<char*>(&other->_impl_.motion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[1]);
}

// ===================================================================

class Motion_Service::_Internal {
 public:
  using HasBits = decltype(std::declval<Motion_Service>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Motion_Service* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
Motion_Service::_Internal::header(const Motion_Service* msg) {
  return *msg->_impl_.header_;
}
void Motion_Service::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Motion_Service::Motion_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.Motion_Service)
}
Motion_Service::Motion_Service(const Motion_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_status_){from._impl_.vehicle_status_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Motion_Service)
}

inline void Motion_Service::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_status_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

Motion_Service::~Motion_Service() {
  // @@protoc_insertion_point(destructor:apollo.perception.Motion_Service)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motion_Service::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vehicle_status_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Motion_Service::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motion_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Motion_Service)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicle_status_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motion_Service::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motion_Service::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Motion_Service)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vehicle_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_vehicle_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Motion_Service)
  return target;
}

size_t Motion_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Motion_Service)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
  total_size += 1UL * this->_internal_vehicle_status_size();
  for (const auto& msg : this->_impl_.vehicle_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.common.Header header = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motion_Service::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Motion_Service::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motion_Service::GetClassData() const { return &_class_data_; }

void Motion_Service::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Motion_Service *>(to)->MergeFrom(
      static_cast<const Motion_Service &>(from));
}


void Motion_Service::MergeFrom(const Motion_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Motion_Service)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.vehicle_status_.MergeFrom(from._impl_.vehicle_status_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motion_Service::CopyFrom(const Motion_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Motion_Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_Service::IsInitialized() const {
  return true;
}

void Motion_Service::InternalSwap(Motion_Service* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vehicle_status_.InternalSwap(&other->_impl_.vehicle_status_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion_Service::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::MotionType*
Arena::CreateMaybeMessage< ::apollo::perception::MotionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::MotionType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::VehicleStatus*
Arena::CreateMaybeMessage< ::apollo::perception::VehicleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::VehicleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::Motion_Service*
Arena::CreateMaybeMessage< ::apollo::perception::Motion_Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::Motion_Service >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
