// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/dst_existence_fusion_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto;
namespace apollo {
namespace perception {
class CameraValidDist;
struct CameraValidDistDefaultTypeInternal;
extern CameraValidDistDefaultTypeInternal _CameraValidDist_default_instance_;
class DstExistenceFusionConfig;
struct DstExistenceFusionConfigDefaultTypeInternal;
extern DstExistenceFusionConfigDefaultTypeInternal _DstExistenceFusionConfig_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::CameraValidDist* Arena::CreateMaybeMessage<::apollo::perception::CameraValidDist>(Arena*);
template<> ::apollo::perception::DstExistenceFusionConfig* Arena::CreateMaybeMessage<::apollo::perception::DstExistenceFusionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

// ===================================================================

class CameraValidDist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.CameraValidDist) */ {
 public:
  inline CameraValidDist() : CameraValidDist(nullptr) {}
  ~CameraValidDist() override;
  explicit PROTOBUF_CONSTEXPR CameraValidDist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraValidDist(const CameraValidDist& from);
  CameraValidDist(CameraValidDist&& from) noexcept
    : CameraValidDist() {
    *this = ::std::move(from);
  }

  inline CameraValidDist& operator=(const CameraValidDist& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraValidDist& operator=(CameraValidDist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraValidDist& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraValidDist* internal_default_instance() {
    return reinterpret_cast<const CameraValidDist*>(
               &_CameraValidDist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraValidDist& a, CameraValidDist& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraValidDist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraValidDist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraValidDist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraValidDist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraValidDist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraValidDist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraValidDist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.CameraValidDist";
  }
  protected:
  explicit CameraValidDist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNameFieldNumber = 1,
    kValidDistFieldNumber = 2,
  };
  // optional string camera_name = 1 [default = ""];
  bool has_camera_name() const;
  private:
  bool _internal_has_camera_name() const;
  public:
  void clear_camera_name();
  const std::string& camera_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_name();
  PROTOBUF_NODISCARD std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // optional double valid_dist = 2 [default = 0];
  bool has_valid_dist() const;
  private:
  bool _internal_has_valid_dist() const;
  public:
  void clear_valid_dist();
  double valid_dist() const;
  void set_valid_dist(double value);
  private:
  double _internal_valid_dist() const;
  void _internal_set_valid_dist(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.CameraValidDist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
    double valid_dist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DstExistenceFusionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DstExistenceFusionConfig) */ {
 public:
  inline DstExistenceFusionConfig() : DstExistenceFusionConfig(nullptr) {}
  ~DstExistenceFusionConfig() override;
  explicit PROTOBUF_CONSTEXPR DstExistenceFusionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DstExistenceFusionConfig(const DstExistenceFusionConfig& from);
  DstExistenceFusionConfig(DstExistenceFusionConfig&& from) noexcept
    : DstExistenceFusionConfig() {
    *this = ::std::move(from);
  }

  inline DstExistenceFusionConfig& operator=(const DstExistenceFusionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DstExistenceFusionConfig& operator=(DstExistenceFusionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DstExistenceFusionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DstExistenceFusionConfig* internal_default_instance() {
    return reinterpret_cast<const DstExistenceFusionConfig*>(
               &_DstExistenceFusionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DstExistenceFusionConfig& a, DstExistenceFusionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DstExistenceFusionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DstExistenceFusionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DstExistenceFusionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DstExistenceFusionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DstExistenceFusionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DstExistenceFusionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DstExistenceFusionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DstExistenceFusionConfig";
  }
  protected:
  explicit DstExistenceFusionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraValidDistFieldNumber = 2,
    kTrackObjectMaxMatchDistanceFieldNumber = 1,
  };
  // repeated .apollo.perception.CameraValidDist camera_valid_dist = 2;
  int camera_valid_dist_size() const;
  private:
  int _internal_camera_valid_dist_size() const;
  public:
  void clear_camera_valid_dist();
  ::apollo::perception::CameraValidDist* mutable_camera_valid_dist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::CameraValidDist >*
      mutable_camera_valid_dist();
  private:
  const ::apollo::perception::CameraValidDist& _internal_camera_valid_dist(int index) const;
  ::apollo::perception::CameraValidDist* _internal_add_camera_valid_dist();
  public:
  const ::apollo::perception::CameraValidDist& camera_valid_dist(int index) const;
  ::apollo::perception::CameraValidDist* add_camera_valid_dist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::CameraValidDist >&
      camera_valid_dist() const;

  // optional double track_object_max_match_distance = 1 [default = 4];
  bool has_track_object_max_match_distance() const;
  private:
  bool _internal_has_track_object_max_match_distance() const;
  public:
  void clear_track_object_max_match_distance();
  double track_object_max_match_distance() const;
  void set_track_object_max_match_distance(double value);
  private:
  double _internal_track_object_max_match_distance() const;
  void _internal_set_track_object_max_match_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.DstExistenceFusionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::CameraValidDist > camera_valid_dist_;
    double track_object_max_match_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraValidDist

// optional string camera_name = 1 [default = ""];
inline bool CameraValidDist::_internal_has_camera_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraValidDist::has_camera_name() const {
  return _internal_has_camera_name();
}
inline void CameraValidDist::clear_camera_name() {
  _impl_.camera_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraValidDist::camera_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CameraValidDist.camera_name)
  return _internal_camera_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraValidDist::set_camera_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.camera_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.CameraValidDist.camera_name)
}
inline std::string* CameraValidDist::mutable_camera_name() {
  std::string* _s = _internal_mutable_camera_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.CameraValidDist.camera_name)
  return _s;
}
inline const std::string& CameraValidDist::_internal_camera_name() const {
  return _impl_.camera_name_.Get();
}
inline void CameraValidDist::_internal_set_camera_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.camera_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraValidDist::_internal_mutable_camera_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.camera_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraValidDist::release_camera_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.CameraValidDist.camera_name)
  if (!_internal_has_camera_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.camera_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_name_.IsDefault()) {
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraValidDist::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.camera_name_.SetAllocated(camera_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_name_.IsDefault()) {
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.CameraValidDist.camera_name)
}

// optional double valid_dist = 2 [default = 0];
inline bool CameraValidDist::_internal_has_valid_dist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraValidDist::has_valid_dist() const {
  return _internal_has_valid_dist();
}
inline void CameraValidDist::clear_valid_dist() {
  _impl_.valid_dist_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CameraValidDist::_internal_valid_dist() const {
  return _impl_.valid_dist_;
}
inline double CameraValidDist::valid_dist() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CameraValidDist.valid_dist)
  return _internal_valid_dist();
}
inline void CameraValidDist::_internal_set_valid_dist(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.valid_dist_ = value;
}
inline void CameraValidDist::set_valid_dist(double value) {
  _internal_set_valid_dist(value);
  // @@protoc_insertion_point(field_set:apollo.perception.CameraValidDist.valid_dist)
}

// -------------------------------------------------------------------

// DstExistenceFusionConfig

// optional double track_object_max_match_distance = 1 [default = 4];
inline bool DstExistenceFusionConfig::_internal_has_track_object_max_match_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DstExistenceFusionConfig::has_track_object_max_match_distance() const {
  return _internal_has_track_object_max_match_distance();
}
inline void DstExistenceFusionConfig::clear_track_object_max_match_distance() {
  _impl_.track_object_max_match_distance_ = 4;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double DstExistenceFusionConfig::_internal_track_object_max_match_distance() const {
  return _impl_.track_object_max_match_distance_;
}
inline double DstExistenceFusionConfig::track_object_max_match_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DstExistenceFusionConfig.track_object_max_match_distance)
  return _internal_track_object_max_match_distance();
}
inline void DstExistenceFusionConfig::_internal_set_track_object_max_match_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.track_object_max_match_distance_ = value;
}
inline void DstExistenceFusionConfig::set_track_object_max_match_distance(double value) {
  _internal_set_track_object_max_match_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DstExistenceFusionConfig.track_object_max_match_distance)
}

// repeated .apollo.perception.CameraValidDist camera_valid_dist = 2;
inline int DstExistenceFusionConfig::_internal_camera_valid_dist_size() const {
  return _impl_.camera_valid_dist_.size();
}
inline int DstExistenceFusionConfig::camera_valid_dist_size() const {
  return _internal_camera_valid_dist_size();
}
inline void DstExistenceFusionConfig::clear_camera_valid_dist() {
  _impl_.camera_valid_dist_.Clear();
}
inline ::apollo::perception::CameraValidDist* DstExistenceFusionConfig::mutable_camera_valid_dist(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DstExistenceFusionConfig.camera_valid_dist)
  return _impl_.camera_valid_dist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::CameraValidDist >*
DstExistenceFusionConfig::mutable_camera_valid_dist() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DstExistenceFusionConfig.camera_valid_dist)
  return &_impl_.camera_valid_dist_;
}
inline const ::apollo::perception::CameraValidDist& DstExistenceFusionConfig::_internal_camera_valid_dist(int index) const {
  return _impl_.camera_valid_dist_.Get(index);
}
inline const ::apollo::perception::CameraValidDist& DstExistenceFusionConfig::camera_valid_dist(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DstExistenceFusionConfig.camera_valid_dist)
  return _internal_camera_valid_dist(index);
}
inline ::apollo::perception::CameraValidDist* DstExistenceFusionConfig::_internal_add_camera_valid_dist() {
  return _impl_.camera_valid_dist_.Add();
}
inline ::apollo::perception::CameraValidDist* DstExistenceFusionConfig::add_camera_valid_dist() {
  ::apollo::perception::CameraValidDist* _add = _internal_add_camera_valid_dist();
  // @@protoc_insertion_point(field_add:apollo.perception.DstExistenceFusionConfig.camera_valid_dist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::CameraValidDist >&
DstExistenceFusionConfig::camera_valid_dist() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DstExistenceFusionConfig.camera_valid_dist)
  return _impl_.camera_valid_dist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fdst_5fexistence_5ffusion_5fconfig_2eproto
