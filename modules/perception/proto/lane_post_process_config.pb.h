// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/lane_post_process_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lane_post_process_config {
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lane_post_process_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::lane_post_process_config::ModelConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lane_post_process_config {

// ===================================================================

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lane_post_process_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lane_post_process_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiFieldNumber = 6,
    kNonMaskFieldNumber = 8,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSpaceTypeFieldNumber = 3,
    kAssocMethodFieldNumber = 16,
    kImageWidthFieldNumber = 4,
    kImageHeightFieldNumber = 5,
    kUseNonMaskFieldNumber = 7,
    kLaneMapHeightFieldNumber = 50,
    kLaneMapConfidenceThreshFieldNumber = 9,
    kCcSplitSizFieldNumber = 10,
    kCcSplitLenFieldNumber = 11,
    kMinCcPixelNumFieldNumber = 12,
    kMinCcSizeFieldNumber = 13,
    kMinYSearchOffsetFieldNumber = 14,
    kMinYSearchOffsetImageFieldNumber = 15,
    kAssocMinDistanceFieldNumber = 17,
    kAssocMinDistanceImageFieldNumber = 18,
    kAssocMaxDistanceFieldNumber = 19,
    kAssocMaxDistanceImageFieldNumber = 20,
    kAssocDistanceWeightFieldNumber = 21,
    kAssocMaxDeviationAngleFieldNumber = 22,
    kAssocMaxDeviationAngleImageFieldNumber = 23,
    kAssocDeviationAngleWeightFieldNumber = 24,
    kAssocMaxDepartureDistanceFieldNumber = 25,
    kAssocMaxDepartureDistanceImageFieldNumber = 26,
    kAssocDepartureDistanceWeightFieldNumber = 27,
    kAssocMaxRelativeOrieFieldNumber = 28,
    kAssocMaxRelativeOrieImageFieldNumber = 29,
    kAssocRelativeOrieWeightFieldNumber = 30,
    kAssocMinOrientationEstimationSizeFieldNumber = 31,
    kAssocMinOrientationEstimationSizeImageFieldNumber = 32,
    kMaxCcMarkerMatchNumFieldNumber = 33,
    kSlideWindowSizeFieldNumber = 34,
    kSlideWindowSizeImageFieldNumber = 35,
    kSlideWindowMaxPointNumFieldNumber = 36,
    kMaxGroupPredictionMarkerNumFieldNumber = 37,
    kOrientationEstimationSkipMarkerNumFieldNumber = 38,
    kLaneIntervalDistanceFieldNumber = 39,
    kMinInstanceSizePrefilteredFieldNumber = 40,
    kMinInstanceSizePrefilteredImageFieldNumber = 41,
    kMaxSizeToFitStraightLineFieldNumber = 42,
    kMaxSizeToFitStraightLineImageFieldNumber = 43,
    kOnlinePitchAngleFieldNumber = 44,
    kGroundHeightFieldNumber = 45,
    kMaxDistanceToSeeForTransformerFieldNumber = 46,
    kLaneMapScaleFieldNumber = 47,
    kStartYPosFieldNumber = 48,
    kLaneMapWidthFieldNumber = 49,
  };
  // repeated float roi = 6;
  int roi_size() const;
  private:
  int _internal_roi_size() const;
  public:
  void clear_roi();
  private:
  float _internal_roi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_roi() const;
  void _internal_add_roi(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_roi();
  public:
  float roi(int index) const;
  void set_roi(int index, float value);
  void add_roi(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      roi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_roi();

  // repeated float non_mask = 8;
  int non_mask_size() const;
  private:
  int _internal_non_mask_size() const;
  public:
  void clear_non_mask();
  private:
  float _internal_non_mask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_non_mask() const;
  void _internal_add_non_mask(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_non_mask();
  public:
  float non_mask(int index) const;
  void set_non_mask(int index, float value);
  void add_non_mask(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      non_mask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_non_mask();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string space_type = 3;
  bool has_space_type() const;
  private:
  bool _internal_has_space_type() const;
  public:
  void clear_space_type();
  const std::string& space_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_space_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_space_type();
  PROTOBUF_NODISCARD std::string* release_space_type();
  void set_allocated_space_type(std::string* space_type);
  private:
  const std::string& _internal_space_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_space_type(const std::string& value);
  std::string* _internal_mutable_space_type();
  public:

  // optional string assoc_method = 16;
  bool has_assoc_method() const;
  private:
  bool _internal_has_assoc_method() const;
  public:
  void clear_assoc_method();
  const std::string& assoc_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assoc_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assoc_method();
  PROTOBUF_NODISCARD std::string* release_assoc_method();
  void set_allocated_assoc_method(std::string* assoc_method);
  private:
  const std::string& _internal_assoc_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assoc_method(const std::string& value);
  std::string* _internal_mutable_assoc_method();
  public:

  // optional int32 image_width = 4;
  bool has_image_width() const;
  private:
  bool _internal_has_image_width() const;
  public:
  void clear_image_width();
  int32_t image_width() const;
  void set_image_width(int32_t value);
  private:
  int32_t _internal_image_width() const;
  void _internal_set_image_width(int32_t value);
  public:

  // optional int32 image_height = 5;
  bool has_image_height() const;
  private:
  bool _internal_has_image_height() const;
  public:
  void clear_image_height();
  int32_t image_height() const;
  void set_image_height(int32_t value);
  private:
  int32_t _internal_image_height() const;
  void _internal_set_image_height(int32_t value);
  public:

  // optional bool use_non_mask = 7;
  bool has_use_non_mask() const;
  private:
  bool _internal_has_use_non_mask() const;
  public:
  void clear_use_non_mask();
  bool use_non_mask() const;
  void set_use_non_mask(bool value);
  private:
  bool _internal_use_non_mask() const;
  void _internal_set_use_non_mask(bool value);
  public:

  // optional int32 lane_map_height = 50 [default = 384];
  bool has_lane_map_height() const;
  private:
  bool _internal_has_lane_map_height() const;
  public:
  void clear_lane_map_height();
  int32_t lane_map_height() const;
  void set_lane_map_height(int32_t value);
  private:
  int32_t _internal_lane_map_height() const;
  void _internal_set_lane_map_height(int32_t value);
  public:

  // optional float lane_map_confidence_thresh = 9 [default = 0.95];
  bool has_lane_map_confidence_thresh() const;
  private:
  bool _internal_has_lane_map_confidence_thresh() const;
  public:
  void clear_lane_map_confidence_thresh();
  float lane_map_confidence_thresh() const;
  void set_lane_map_confidence_thresh(float value);
  private:
  float _internal_lane_map_confidence_thresh() const;
  void _internal_set_lane_map_confidence_thresh(float value);
  public:

  // optional float cc_split_siz = 10 [default = 50];
  bool has_cc_split_siz() const;
  private:
  bool _internal_has_cc_split_siz() const;
  public:
  void clear_cc_split_siz();
  float cc_split_siz() const;
  void set_cc_split_siz(float value);
  private:
  float _internal_cc_split_siz() const;
  void _internal_set_cc_split_siz(float value);
  public:

  // optional int32 cc_split_len = 11 [default = 25];
  bool has_cc_split_len() const;
  private:
  bool _internal_has_cc_split_len() const;
  public:
  void clear_cc_split_len();
  int32_t cc_split_len() const;
  void set_cc_split_len(int32_t value);
  private:
  int32_t _internal_cc_split_len() const;
  void _internal_set_cc_split_len(int32_t value);
  public:

  // optional int32 min_cc_pixel_num = 12 [default = 10];
  bool has_min_cc_pixel_num() const;
  private:
  bool _internal_has_min_cc_pixel_num() const;
  public:
  void clear_min_cc_pixel_num();
  int32_t min_cc_pixel_num() const;
  void set_min_cc_pixel_num(int32_t value);
  private:
  int32_t _internal_min_cc_pixel_num() const;
  void _internal_set_min_cc_pixel_num(int32_t value);
  public:

  // optional int32 min_cc_size = 13 [default = 5];
  bool has_min_cc_size() const;
  private:
  bool _internal_has_min_cc_size() const;
  public:
  void clear_min_cc_size();
  int32_t min_cc_size() const;
  void set_min_cc_size(int32_t value);
  private:
  int32_t _internal_min_cc_size() const;
  void _internal_set_min_cc_size(int32_t value);
  public:

  // optional float min_y_search_offset = 14 [default = 0.5];
  bool has_min_y_search_offset() const;
  private:
  bool _internal_has_min_y_search_offset() const;
  public:
  void clear_min_y_search_offset();
  float min_y_search_offset() const;
  void set_min_y_search_offset(float value);
  private:
  float _internal_min_y_search_offset() const;
  void _internal_set_min_y_search_offset(float value);
  public:

  // optional float min_y_search_offset_image = 15 [default = 0.5];
  bool has_min_y_search_offset_image() const;
  private:
  bool _internal_has_min_y_search_offset_image() const;
  public:
  void clear_min_y_search_offset_image();
  float min_y_search_offset_image() const;
  void set_min_y_search_offset_image(float value);
  private:
  float _internal_min_y_search_offset_image() const;
  void _internal_set_min_y_search_offset_image(float value);
  public:

  // optional float assoc_min_distance = 17 [default = -0.5];
  bool has_assoc_min_distance() const;
  private:
  bool _internal_has_assoc_min_distance() const;
  public:
  void clear_assoc_min_distance();
  float assoc_min_distance() const;
  void set_assoc_min_distance(float value);
  private:
  float _internal_assoc_min_distance() const;
  void _internal_set_assoc_min_distance(float value);
  public:

  // optional float assoc_min_distance_image = 18 [default = -3];
  bool has_assoc_min_distance_image() const;
  private:
  bool _internal_has_assoc_min_distance_image() const;
  public:
  void clear_assoc_min_distance_image();
  float assoc_min_distance_image() const;
  void set_assoc_min_distance_image(float value);
  private:
  float _internal_assoc_min_distance_image() const;
  void _internal_set_assoc_min_distance_image(float value);
  public:

  // optional float assoc_max_distance = 19 [default = 60];
  bool has_assoc_max_distance() const;
  private:
  bool _internal_has_assoc_max_distance() const;
  public:
  void clear_assoc_max_distance();
  float assoc_max_distance() const;
  void set_assoc_max_distance(float value);
  private:
  float _internal_assoc_max_distance() const;
  void _internal_set_assoc_max_distance(float value);
  public:

  // optional float assoc_max_distance_image = 20 [default = 400];
  bool has_assoc_max_distance_image() const;
  private:
  bool _internal_has_assoc_max_distance_image() const;
  public:
  void clear_assoc_max_distance_image();
  float assoc_max_distance_image() const;
  void set_assoc_max_distance_image(float value);
  private:
  float _internal_assoc_max_distance_image() const;
  void _internal_set_assoc_max_distance_image(float value);
  public:

  // optional float assoc_distance_weight = 21 [default = 0.4];
  bool has_assoc_distance_weight() const;
  private:
  bool _internal_has_assoc_distance_weight() const;
  public:
  void clear_assoc_distance_weight();
  float assoc_distance_weight() const;
  void set_assoc_distance_weight(float value);
  private:
  float _internal_assoc_distance_weight() const;
  void _internal_set_assoc_distance_weight(float value);
  public:

  // optional float assoc_max_deviation_angle = 22 [default = 15];
  bool has_assoc_max_deviation_angle() const;
  private:
  bool _internal_has_assoc_max_deviation_angle() const;
  public:
  void clear_assoc_max_deviation_angle();
  float assoc_max_deviation_angle() const;
  void set_assoc_max_deviation_angle(float value);
  private:
  float _internal_assoc_max_deviation_angle() const;
  void _internal_set_assoc_max_deviation_angle(float value);
  public:

  // optional float assoc_max_deviation_angle_image = 23 [default = 45];
  bool has_assoc_max_deviation_angle_image() const;
  private:
  bool _internal_has_assoc_max_deviation_angle_image() const;
  public:
  void clear_assoc_max_deviation_angle_image();
  float assoc_max_deviation_angle_image() const;
  void set_assoc_max_deviation_angle_image(float value);
  private:
  float _internal_assoc_max_deviation_angle_image() const;
  void _internal_set_assoc_max_deviation_angle_image(float value);
  public:

  // optional float assoc_deviation_angle_weight = 24 [default = 0.2];
  bool has_assoc_deviation_angle_weight() const;
  private:
  bool _internal_has_assoc_deviation_angle_weight() const;
  public:
  void clear_assoc_deviation_angle_weight();
  float assoc_deviation_angle_weight() const;
  void set_assoc_deviation_angle_weight(float value);
  private:
  float _internal_assoc_deviation_angle_weight() const;
  void _internal_set_assoc_deviation_angle_weight(float value);
  public:

  // optional float assoc_max_departure_distance = 25 [default = 3];
  bool has_assoc_max_departure_distance() const;
  private:
  bool _internal_has_assoc_max_departure_distance() const;
  public:
  void clear_assoc_max_departure_distance();
  float assoc_max_departure_distance() const;
  void set_assoc_max_departure_distance(float value);
  private:
  float _internal_assoc_max_departure_distance() const;
  void _internal_set_assoc_max_departure_distance(float value);
  public:

  // optional float assoc_max_departure_distance_image = 26 [default = 80];
  bool has_assoc_max_departure_distance_image() const;
  private:
  bool _internal_has_assoc_max_departure_distance_image() const;
  public:
  void clear_assoc_max_departure_distance_image();
  float assoc_max_departure_distance_image() const;
  void set_assoc_max_departure_distance_image(float value);
  private:
  float _internal_assoc_max_departure_distance_image() const;
  void _internal_set_assoc_max_departure_distance_image(float value);
  public:

  // optional float assoc_departure_distance_weight = 27 [default = 0.2];
  bool has_assoc_departure_distance_weight() const;
  private:
  bool _internal_has_assoc_departure_distance_weight() const;
  public:
  void clear_assoc_departure_distance_weight();
  float assoc_departure_distance_weight() const;
  void set_assoc_departure_distance_weight(float value);
  private:
  float _internal_assoc_departure_distance_weight() const;
  void _internal_set_assoc_departure_distance_weight(float value);
  public:

  // optional float assoc_max_relative_orie = 28 [default = 15];
  bool has_assoc_max_relative_orie() const;
  private:
  bool _internal_has_assoc_max_relative_orie() const;
  public:
  void clear_assoc_max_relative_orie();
  float assoc_max_relative_orie() const;
  void set_assoc_max_relative_orie(float value);
  private:
  float _internal_assoc_max_relative_orie() const;
  void _internal_set_assoc_max_relative_orie(float value);
  public:

  // optional float assoc_max_relative_orie_image = 29 [default = 45];
  bool has_assoc_max_relative_orie_image() const;
  private:
  bool _internal_has_assoc_max_relative_orie_image() const;
  public:
  void clear_assoc_max_relative_orie_image();
  float assoc_max_relative_orie_image() const;
  void set_assoc_max_relative_orie_image(float value);
  private:
  float _internal_assoc_max_relative_orie_image() const;
  void _internal_set_assoc_max_relative_orie_image(float value);
  public:

  // optional float assoc_relative_orie_weight = 30 [default = 0.2];
  bool has_assoc_relative_orie_weight() const;
  private:
  bool _internal_has_assoc_relative_orie_weight() const;
  public:
  void clear_assoc_relative_orie_weight();
  float assoc_relative_orie_weight() const;
  void set_assoc_relative_orie_weight(float value);
  private:
  float _internal_assoc_relative_orie_weight() const;
  void _internal_set_assoc_relative_orie_weight(float value);
  public:

  // optional float assoc_min_orientation_estimation_size = 31 [default = 3];
  bool has_assoc_min_orientation_estimation_size() const;
  private:
  bool _internal_has_assoc_min_orientation_estimation_size() const;
  public:
  void clear_assoc_min_orientation_estimation_size();
  float assoc_min_orientation_estimation_size() const;
  void set_assoc_min_orientation_estimation_size(float value);
  private:
  float _internal_assoc_min_orientation_estimation_size() const;
  void _internal_set_assoc_min_orientation_estimation_size(float value);
  public:

  // optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
  bool has_assoc_min_orientation_estimation_size_image() const;
  private:
  bool _internal_has_assoc_min_orientation_estimation_size_image() const;
  public:
  void clear_assoc_min_orientation_estimation_size_image();
  float assoc_min_orientation_estimation_size_image() const;
  void set_assoc_min_orientation_estimation_size_image(float value);
  private:
  float _internal_assoc_min_orientation_estimation_size_image() const;
  void _internal_set_assoc_min_orientation_estimation_size_image(float value);
  public:

  // optional int32 max_cc_marker_match_num = 33 [default = 1];
  bool has_max_cc_marker_match_num() const;
  private:
  bool _internal_has_max_cc_marker_match_num() const;
  public:
  void clear_max_cc_marker_match_num();
  int32_t max_cc_marker_match_num() const;
  void set_max_cc_marker_match_num(int32_t value);
  private:
  int32_t _internal_max_cc_marker_match_num() const;
  void _internal_set_max_cc_marker_match_num(int32_t value);
  public:

  // optional float slide_window_size = 34 [default = 15];
  bool has_slide_window_size() const;
  private:
  bool _internal_has_slide_window_size() const;
  public:
  void clear_slide_window_size();
  float slide_window_size() const;
  void set_slide_window_size(float value);
  private:
  float _internal_slide_window_size() const;
  void _internal_set_slide_window_size(float value);
  public:

  // optional float slide_window_size_image = 35 [default = 200];
  bool has_slide_window_size_image() const;
  private:
  bool _internal_has_slide_window_size_image() const;
  public:
  void clear_slide_window_size_image();
  float slide_window_size_image() const;
  void set_slide_window_size_image(float value);
  private:
  float _internal_slide_window_size_image() const;
  void _internal_set_slide_window_size_image(float value);
  public:

  // optional int32 slide_window_max_point_num = 36 [default = 3];
  bool has_slide_window_max_point_num() const;
  private:
  bool _internal_has_slide_window_max_point_num() const;
  public:
  void clear_slide_window_max_point_num();
  int32_t slide_window_max_point_num() const;
  void set_slide_window_max_point_num(int32_t value);
  private:
  int32_t _internal_slide_window_max_point_num() const;
  void _internal_set_slide_window_max_point_num(int32_t value);
  public:

  // optional int32 max_group_prediction_marker_num = 37 [default = 3];
  bool has_max_group_prediction_marker_num() const;
  private:
  bool _internal_has_max_group_prediction_marker_num() const;
  public:
  void clear_max_group_prediction_marker_num();
  int32_t max_group_prediction_marker_num() const;
  void set_max_group_prediction_marker_num(int32_t value);
  private:
  int32_t _internal_max_group_prediction_marker_num() const;
  void _internal_set_max_group_prediction_marker_num(int32_t value);
  public:

  // optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
  bool has_orientation_estimation_skip_marker_num() const;
  private:
  bool _internal_has_orientation_estimation_skip_marker_num() const;
  public:
  void clear_orientation_estimation_skip_marker_num();
  int32_t orientation_estimation_skip_marker_num() const;
  void set_orientation_estimation_skip_marker_num(int32_t value);
  private:
  int32_t _internal_orientation_estimation_skip_marker_num() const;
  void _internal_set_orientation_estimation_skip_marker_num(int32_t value);
  public:

  // optional float lane_interval_distance = 39 [default = 4];
  bool has_lane_interval_distance() const;
  private:
  bool _internal_has_lane_interval_distance() const;
  public:
  void clear_lane_interval_distance();
  float lane_interval_distance() const;
  void set_lane_interval_distance(float value);
  private:
  float _internal_lane_interval_distance() const;
  void _internal_set_lane_interval_distance(float value);
  public:

  // optional float min_instance_size_prefiltered = 40 [default = 3];
  bool has_min_instance_size_prefiltered() const;
  private:
  bool _internal_has_min_instance_size_prefiltered() const;
  public:
  void clear_min_instance_size_prefiltered();
  float min_instance_size_prefiltered() const;
  void set_min_instance_size_prefiltered(float value);
  private:
  float _internal_min_instance_size_prefiltered() const;
  void _internal_set_min_instance_size_prefiltered(float value);
  public:

  // optional float min_instance_size_prefiltered_image = 41 [default = 20];
  bool has_min_instance_size_prefiltered_image() const;
  private:
  bool _internal_has_min_instance_size_prefiltered_image() const;
  public:
  void clear_min_instance_size_prefiltered_image();
  float min_instance_size_prefiltered_image() const;
  void set_min_instance_size_prefiltered_image(float value);
  private:
  float _internal_min_instance_size_prefiltered_image() const;
  void _internal_set_min_instance_size_prefiltered_image(float value);
  public:

  // optional float max_size_to_fit_straight_line = 42 [default = 10];
  bool has_max_size_to_fit_straight_line() const;
  private:
  bool _internal_has_max_size_to_fit_straight_line() const;
  public:
  void clear_max_size_to_fit_straight_line();
  float max_size_to_fit_straight_line() const;
  void set_max_size_to_fit_straight_line(float value);
  private:
  float _internal_max_size_to_fit_straight_line() const;
  void _internal_set_max_size_to_fit_straight_line(float value);
  public:

  // optional float max_size_to_fit_straight_line_image = 43 [default = 300];
  bool has_max_size_to_fit_straight_line_image() const;
  private:
  bool _internal_has_max_size_to_fit_straight_line_image() const;
  public:
  void clear_max_size_to_fit_straight_line_image();
  float max_size_to_fit_straight_line_image() const;
  void set_max_size_to_fit_straight_line_image(float value);
  private:
  float _internal_max_size_to_fit_straight_line_image() const;
  void _internal_set_max_size_to_fit_straight_line_image(float value);
  public:

  // optional float online_pitch_angle = 44 [default = -2.5];
  bool has_online_pitch_angle() const;
  private:
  bool _internal_has_online_pitch_angle() const;
  public:
  void clear_online_pitch_angle();
  float online_pitch_angle() const;
  void set_online_pitch_angle(float value);
  private:
  float _internal_online_pitch_angle() const;
  void _internal_set_online_pitch_angle(float value);
  public:

  // optional float ground_height = 45 [default = 1.6];
  bool has_ground_height() const;
  private:
  bool _internal_has_ground_height() const;
  public:
  void clear_ground_height();
  float ground_height() const;
  void set_ground_height(float value);
  private:
  float _internal_ground_height() const;
  void _internal_set_ground_height(float value);
  public:

  // optional float max_distance_to_see_for_transformer = 46 [default = 500];
  bool has_max_distance_to_see_for_transformer() const;
  private:
  bool _internal_has_max_distance_to_see_for_transformer() const;
  public:
  void clear_max_distance_to_see_for_transformer();
  float max_distance_to_see_for_transformer() const;
  void set_max_distance_to_see_for_transformer(float value);
  private:
  float _internal_max_distance_to_see_for_transformer() const;
  void _internal_set_max_distance_to_see_for_transformer(float value);
  public:

  // optional float lane_map_scale = 47 [default = 2];
  bool has_lane_map_scale() const;
  private:
  bool _internal_has_lane_map_scale() const;
  public:
  void clear_lane_map_scale();
  float lane_map_scale() const;
  void set_lane_map_scale(float value);
  private:
  float _internal_lane_map_scale() const;
  void _internal_set_lane_map_scale(float value);
  public:

  // optional int32 start_y_pos = 48 [default = 312];
  bool has_start_y_pos() const;
  private:
  bool _internal_has_start_y_pos() const;
  public:
  void clear_start_y_pos();
  int32_t start_y_pos() const;
  void set_start_y_pos(int32_t value);
  private:
  int32_t _internal_start_y_pos() const;
  void _internal_set_start_y_pos(int32_t value);
  public:

  // optional int32 lane_map_width = 49 [default = 960];
  bool has_lane_map_width() const;
  private:
  bool _internal_has_lane_map_width() const;
  public:
  void clear_lane_map_width();
  int32_t lane_map_width() const;
  void set_lane_map_width(int32_t value);
  private:
  int32_t _internal_lane_map_width() const;
  void _internal_set_lane_map_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lane_post_process_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > roi_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > non_mask_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assoc_method_;
    int32_t image_width_;
    int32_t image_height_;
    bool use_non_mask_;
    int32_t lane_map_height_;
    float lane_map_confidence_thresh_;
    float cc_split_siz_;
    int32_t cc_split_len_;
    int32_t min_cc_pixel_num_;
    int32_t min_cc_size_;
    float min_y_search_offset_;
    float min_y_search_offset_image_;
    float assoc_min_distance_;
    float assoc_min_distance_image_;
    float assoc_max_distance_;
    float assoc_max_distance_image_;
    float assoc_distance_weight_;
    float assoc_max_deviation_angle_;
    float assoc_max_deviation_angle_image_;
    float assoc_deviation_angle_weight_;
    float assoc_max_departure_distance_;
    float assoc_max_departure_distance_image_;
    float assoc_departure_distance_weight_;
    float assoc_max_relative_orie_;
    float assoc_max_relative_orie_image_;
    float assoc_relative_orie_weight_;
    float assoc_min_orientation_estimation_size_;
    float assoc_min_orientation_estimation_size_image_;
    int32_t max_cc_marker_match_num_;
    float slide_window_size_;
    float slide_window_size_image_;
    int32_t slide_window_max_point_num_;
    int32_t max_group_prediction_marker_num_;
    int32_t orientation_estimation_skip_marker_num_;
    float lane_interval_distance_;
    float min_instance_size_prefiltered_;
    float min_instance_size_prefiltered_image_;
    float max_size_to_fit_straight_line_;
    float max_size_to_fit_straight_line_image_;
    float online_pitch_angle_;
    float ground_height_;
    float max_distance_to_see_for_transformer_;
    float lane_map_scale_;
    int32_t start_y_pos_;
    int32_t lane_map_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConfigs

// optional string name = 1;
inline bool ModelConfigs::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelConfigs::has_name() const {
  return _internal_has_name();
}
inline void ModelConfigs::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.name)
}
inline std::string* ModelConfigs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.name)
  return _s;
}
inline const std::string& ModelConfigs::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelConfigs::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelConfigs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.name)
}

// optional string version = 2;
inline bool ModelConfigs::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelConfigs::has_version() const {
  return _internal_has_version();
}
inline void ModelConfigs::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.version)
}
inline std::string* ModelConfigs::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.version)
  return _s;
}
inline const std::string& ModelConfigs::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ModelConfigs::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelConfigs::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.version)
}

// optional string space_type = 3;
inline bool ModelConfigs::_internal_has_space_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelConfigs::has_space_type() const {
  return _internal_has_space_type();
}
inline void ModelConfigs::clear_space_type() {
  _impl_.space_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelConfigs::space_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return _internal_space_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_space_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.space_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}
inline std::string* ModelConfigs::mutable_space_type() {
  std::string* _s = _internal_mutable_space_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  return _s;
}
inline const std::string& ModelConfigs::_internal_space_type() const {
  return _impl_.space_type_.Get();
}
inline void ModelConfigs::_internal_set_space_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.space_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_space_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.space_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_space_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
  if (!_internal_has_space_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.space_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.space_type_.IsDefault()) {
    _impl_.space_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelConfigs::set_allocated_space_type(std::string* space_type) {
  if (space_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.space_type_.SetAllocated(space_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.space_type_.IsDefault()) {
    _impl_.space_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.space_type)
}

// optional int32 image_width = 4;
inline bool ModelConfigs::_internal_has_image_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelConfigs::has_image_width() const {
  return _internal_has_image_width();
}
inline void ModelConfigs::clear_image_width() {
  _impl_.image_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ModelConfigs::_internal_image_width() const {
  return _impl_.image_width_;
}
inline int32_t ModelConfigs::image_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
  return _internal_image_width();
}
inline void ModelConfigs::_internal_set_image_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.image_width_ = value;
}
inline void ModelConfigs::set_image_width(int32_t value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_width)
}

// optional int32 image_height = 5;
inline bool ModelConfigs::_internal_has_image_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelConfigs::has_image_height() const {
  return _internal_has_image_height();
}
inline void ModelConfigs::clear_image_height() {
  _impl_.image_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ModelConfigs::_internal_image_height() const {
  return _impl_.image_height_;
}
inline int32_t ModelConfigs::image_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
  return _internal_image_height();
}
inline void ModelConfigs::_internal_set_image_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.image_height_ = value;
}
inline void ModelConfigs::set_image_height(int32_t value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.image_height)
}

// repeated float roi = 6;
inline int ModelConfigs::_internal_roi_size() const {
  return _impl_.roi_.size();
}
inline int ModelConfigs::roi_size() const {
  return _internal_roi_size();
}
inline void ModelConfigs::clear_roi() {
  _impl_.roi_.Clear();
}
inline float ModelConfigs::_internal_roi(int index) const {
  return _impl_.roi_.Get(index);
}
inline float ModelConfigs::roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return _internal_roi(index);
}
inline void ModelConfigs::set_roi(int index, float value) {
  _impl_.roi_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
inline void ModelConfigs::_internal_add_roi(float value) {
  _impl_.roi_.Add(value);
}
inline void ModelConfigs::add_roi(float value) {
  _internal_add_roi(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.roi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelConfigs::_internal_roi() const {
  return _impl_.roi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelConfigs::roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return _internal_roi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelConfigs::_internal_mutable_roi() {
  return &_impl_.roi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelConfigs::mutable_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.roi)
  return _internal_mutable_roi();
}

// optional bool use_non_mask = 7;
inline bool ModelConfigs::_internal_has_use_non_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelConfigs::has_use_non_mask() const {
  return _internal_has_use_non_mask();
}
inline void ModelConfigs::clear_use_non_mask() {
  _impl_.use_non_mask_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ModelConfigs::_internal_use_non_mask() const {
  return _impl_.use_non_mask_;
}
inline bool ModelConfigs::use_non_mask() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
  return _internal_use_non_mask();
}
inline void ModelConfigs::_internal_set_use_non_mask(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.use_non_mask_ = value;
}
inline void ModelConfigs::set_use_non_mask(bool value) {
  _internal_set_use_non_mask(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.use_non_mask)
}

// repeated float non_mask = 8;
inline int ModelConfigs::_internal_non_mask_size() const {
  return _impl_.non_mask_.size();
}
inline int ModelConfigs::non_mask_size() const {
  return _internal_non_mask_size();
}
inline void ModelConfigs::clear_non_mask() {
  _impl_.non_mask_.Clear();
}
inline float ModelConfigs::_internal_non_mask(int index) const {
  return _impl_.non_mask_.Get(index);
}
inline float ModelConfigs::non_mask(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return _internal_non_mask(index);
}
inline void ModelConfigs::set_non_mask(int index, float value) {
  _impl_.non_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
inline void ModelConfigs::_internal_add_non_mask(float value) {
  _impl_.non_mask_.Add(value);
}
inline void ModelConfigs::add_non_mask(float value) {
  _internal_add_non_mask(value);
  // @@protoc_insertion_point(field_add:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelConfigs::_internal_non_mask() const {
  return _impl_.non_mask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelConfigs::non_mask() const {
  // @@protoc_insertion_point(field_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return _internal_non_mask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelConfigs::_internal_mutable_non_mask() {
  return &_impl_.non_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelConfigs::mutable_non_mask() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.lane_post_process_config.ModelConfigs.non_mask)
  return _internal_mutable_non_mask();
}

// optional float lane_map_confidence_thresh = 9 [default = 0.95];
inline bool ModelConfigs::_internal_has_lane_map_confidence_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelConfigs::has_lane_map_confidence_thresh() const {
  return _internal_has_lane_map_confidence_thresh();
}
inline void ModelConfigs::clear_lane_map_confidence_thresh() {
  _impl_.lane_map_confidence_thresh_ = 0.95f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float ModelConfigs::_internal_lane_map_confidence_thresh() const {
  return _impl_.lane_map_confidence_thresh_;
}
inline float ModelConfigs::lane_map_confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
  return _internal_lane_map_confidence_thresh();
}
inline void ModelConfigs::_internal_set_lane_map_confidence_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lane_map_confidence_thresh_ = value;
}
inline void ModelConfigs::set_lane_map_confidence_thresh(float value) {
  _internal_set_lane_map_confidence_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_confidence_thresh)
}

// optional float cc_split_siz = 10 [default = 50];
inline bool ModelConfigs::_internal_has_cc_split_siz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelConfigs::has_cc_split_siz() const {
  return _internal_has_cc_split_siz();
}
inline void ModelConfigs::clear_cc_split_siz() {
  _impl_.cc_split_siz_ = 50;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ModelConfigs::_internal_cc_split_siz() const {
  return _impl_.cc_split_siz_;
}
inline float ModelConfigs::cc_split_siz() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
  return _internal_cc_split_siz();
}
inline void ModelConfigs::_internal_set_cc_split_siz(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cc_split_siz_ = value;
}
inline void ModelConfigs::set_cc_split_siz(float value) {
  _internal_set_cc_split_siz(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_siz)
}

// optional int32 cc_split_len = 11 [default = 25];
inline bool ModelConfigs::_internal_has_cc_split_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelConfigs::has_cc_split_len() const {
  return _internal_has_cc_split_len();
}
inline void ModelConfigs::clear_cc_split_len() {
  _impl_.cc_split_len_ = 25;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t ModelConfigs::_internal_cc_split_len() const {
  return _impl_.cc_split_len_;
}
inline int32_t ModelConfigs::cc_split_len() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
  return _internal_cc_split_len();
}
inline void ModelConfigs::_internal_set_cc_split_len(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cc_split_len_ = value;
}
inline void ModelConfigs::set_cc_split_len(int32_t value) {
  _internal_set_cc_split_len(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.cc_split_len)
}

// optional int32 min_cc_pixel_num = 12 [default = 10];
inline bool ModelConfigs::_internal_has_min_cc_pixel_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_cc_pixel_num() const {
  return _internal_has_min_cc_pixel_num();
}
inline void ModelConfigs::clear_min_cc_pixel_num() {
  _impl_.min_cc_pixel_num_ = 10;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t ModelConfigs::_internal_min_cc_pixel_num() const {
  return _impl_.min_cc_pixel_num_;
}
inline int32_t ModelConfigs::min_cc_pixel_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
  return _internal_min_cc_pixel_num();
}
inline void ModelConfigs::_internal_set_min_cc_pixel_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.min_cc_pixel_num_ = value;
}
inline void ModelConfigs::set_min_cc_pixel_num(int32_t value) {
  _internal_set_min_cc_pixel_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_pixel_num)
}

// optional int32 min_cc_size = 13 [default = 5];
inline bool ModelConfigs::_internal_has_min_cc_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_cc_size() const {
  return _internal_has_min_cc_size();
}
inline void ModelConfigs::clear_min_cc_size() {
  _impl_.min_cc_size_ = 5;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t ModelConfigs::_internal_min_cc_size() const {
  return _impl_.min_cc_size_;
}
inline int32_t ModelConfigs::min_cc_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
  return _internal_min_cc_size();
}
inline void ModelConfigs::_internal_set_min_cc_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.min_cc_size_ = value;
}
inline void ModelConfigs::set_min_cc_size(int32_t value) {
  _internal_set_min_cc_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_cc_size)
}

// optional float min_y_search_offset = 14 [default = 0.5];
inline bool ModelConfigs::_internal_has_min_y_search_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_y_search_offset() const {
  return _internal_has_min_y_search_offset();
}
inline void ModelConfigs::clear_min_y_search_offset() {
  _impl_.min_y_search_offset_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float ModelConfigs::_internal_min_y_search_offset() const {
  return _impl_.min_y_search_offset_;
}
inline float ModelConfigs::min_y_search_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
  return _internal_min_y_search_offset();
}
inline void ModelConfigs::_internal_set_min_y_search_offset(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.min_y_search_offset_ = value;
}
inline void ModelConfigs::set_min_y_search_offset(float value) {
  _internal_set_min_y_search_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset)
}

// optional float min_y_search_offset_image = 15 [default = 0.5];
inline bool ModelConfigs::_internal_has_min_y_search_offset_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_y_search_offset_image() const {
  return _internal_has_min_y_search_offset_image();
}
inline void ModelConfigs::clear_min_y_search_offset_image() {
  _impl_.min_y_search_offset_image_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float ModelConfigs::_internal_min_y_search_offset_image() const {
  return _impl_.min_y_search_offset_image_;
}
inline float ModelConfigs::min_y_search_offset_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
  return _internal_min_y_search_offset_image();
}
inline void ModelConfigs::_internal_set_min_y_search_offset_image(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.min_y_search_offset_image_ = value;
}
inline void ModelConfigs::set_min_y_search_offset_image(float value) {
  _internal_set_min_y_search_offset_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_y_search_offset_image)
}

// optional string assoc_method = 16;
inline bool ModelConfigs::_internal_has_assoc_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_method() const {
  return _internal_has_assoc_method();
}
inline void ModelConfigs::clear_assoc_method() {
  _impl_.assoc_method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelConfigs::assoc_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return _internal_assoc_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_assoc_method(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.assoc_method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}
inline std::string* ModelConfigs::mutable_assoc_method() {
  std::string* _s = _internal_mutable_assoc_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  return _s;
}
inline const std::string& ModelConfigs::_internal_assoc_method() const {
  return _impl_.assoc_method_.Get();
}
inline void ModelConfigs::_internal_set_assoc_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.assoc_method_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_assoc_method() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.assoc_method_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_assoc_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
  if (!_internal_has_assoc_method()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.assoc_method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assoc_method_.IsDefault()) {
    _impl_.assoc_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelConfigs::set_allocated_assoc_method(std::string* assoc_method) {
  if (assoc_method != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.assoc_method_.SetAllocated(assoc_method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assoc_method_.IsDefault()) {
    _impl_.assoc_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lane_post_process_config.ModelConfigs.assoc_method)
}

// optional float assoc_min_distance = 17 [default = -0.5];
inline bool ModelConfigs::_internal_has_assoc_min_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_min_distance() const {
  return _internal_has_assoc_min_distance();
}
inline void ModelConfigs::clear_assoc_min_distance() {
  _impl_.assoc_min_distance_ = -0.5f;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ModelConfigs::_internal_assoc_min_distance() const {
  return _impl_.assoc_min_distance_;
}
inline float ModelConfigs::assoc_min_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
  return _internal_assoc_min_distance();
}
inline void ModelConfigs::_internal_set_assoc_min_distance(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.assoc_min_distance_ = value;
}
inline void ModelConfigs::set_assoc_min_distance(float value) {
  _internal_set_assoc_min_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance)
}

// optional float assoc_min_distance_image = 18 [default = -3];
inline bool ModelConfigs::_internal_has_assoc_min_distance_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_min_distance_image() const {
  return _internal_has_assoc_min_distance_image();
}
inline void ModelConfigs::clear_assoc_min_distance_image() {
  _impl_.assoc_min_distance_image_ = -3;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ModelConfigs::_internal_assoc_min_distance_image() const {
  return _impl_.assoc_min_distance_image_;
}
inline float ModelConfigs::assoc_min_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
  return _internal_assoc_min_distance_image();
}
inline void ModelConfigs::_internal_set_assoc_min_distance_image(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.assoc_min_distance_image_ = value;
}
inline void ModelConfigs::set_assoc_min_distance_image(float value) {
  _internal_set_assoc_min_distance_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_distance_image)
}

// optional float assoc_max_distance = 19 [default = 60];
inline bool ModelConfigs::_internal_has_assoc_max_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_distance() const {
  return _internal_has_assoc_max_distance();
}
inline void ModelConfigs::clear_assoc_max_distance() {
  _impl_.assoc_max_distance_ = 60;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ModelConfigs::_internal_assoc_max_distance() const {
  return _impl_.assoc_max_distance_;
}
inline float ModelConfigs::assoc_max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
  return _internal_assoc_max_distance();
}
inline void ModelConfigs::_internal_set_assoc_max_distance(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.assoc_max_distance_ = value;
}
inline void ModelConfigs::set_assoc_max_distance(float value) {
  _internal_set_assoc_max_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance)
}

// optional float assoc_max_distance_image = 20 [default = 400];
inline bool ModelConfigs::_internal_has_assoc_max_distance_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_distance_image() const {
  return _internal_has_assoc_max_distance_image();
}
inline void ModelConfigs::clear_assoc_max_distance_image() {
  _impl_.assoc_max_distance_image_ = 400;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float ModelConfigs::_internal_assoc_max_distance_image() const {
  return _impl_.assoc_max_distance_image_;
}
inline float ModelConfigs::assoc_max_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
  return _internal_assoc_max_distance_image();
}
inline void ModelConfigs::_internal_set_assoc_max_distance_image(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.assoc_max_distance_image_ = value;
}
inline void ModelConfigs::set_assoc_max_distance_image(float value) {
  _internal_set_assoc_max_distance_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_distance_image)
}

// optional float assoc_distance_weight = 21 [default = 0.4];
inline bool ModelConfigs::_internal_has_assoc_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_distance_weight() const {
  return _internal_has_assoc_distance_weight();
}
inline void ModelConfigs::clear_assoc_distance_weight() {
  _impl_.assoc_distance_weight_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float ModelConfigs::_internal_assoc_distance_weight() const {
  return _impl_.assoc_distance_weight_;
}
inline float ModelConfigs::assoc_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
  return _internal_assoc_distance_weight();
}
inline void ModelConfigs::_internal_set_assoc_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.assoc_distance_weight_ = value;
}
inline void ModelConfigs::set_assoc_distance_weight(float value) {
  _internal_set_assoc_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_distance_weight)
}

// optional float assoc_max_deviation_angle = 22 [default = 15];
inline bool ModelConfigs::_internal_has_assoc_max_deviation_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_deviation_angle() const {
  return _internal_has_assoc_max_deviation_angle();
}
inline void ModelConfigs::clear_assoc_max_deviation_angle() {
  _impl_.assoc_max_deviation_angle_ = 15;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float ModelConfigs::_internal_assoc_max_deviation_angle() const {
  return _impl_.assoc_max_deviation_angle_;
}
inline float ModelConfigs::assoc_max_deviation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
  return _internal_assoc_max_deviation_angle();
}
inline void ModelConfigs::_internal_set_assoc_max_deviation_angle(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.assoc_max_deviation_angle_ = value;
}
inline void ModelConfigs::set_assoc_max_deviation_angle(float value) {
  _internal_set_assoc_max_deviation_angle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle)
}

// optional float assoc_max_deviation_angle_image = 23 [default = 45];
inline bool ModelConfigs::_internal_has_assoc_max_deviation_angle_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_deviation_angle_image() const {
  return _internal_has_assoc_max_deviation_angle_image();
}
inline void ModelConfigs::clear_assoc_max_deviation_angle_image() {
  _impl_.assoc_max_deviation_angle_image_ = 45;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float ModelConfigs::_internal_assoc_max_deviation_angle_image() const {
  return _impl_.assoc_max_deviation_angle_image_;
}
inline float ModelConfigs::assoc_max_deviation_angle_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
  return _internal_assoc_max_deviation_angle_image();
}
inline void ModelConfigs::_internal_set_assoc_max_deviation_angle_image(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.assoc_max_deviation_angle_image_ = value;
}
inline void ModelConfigs::set_assoc_max_deviation_angle_image(float value) {
  _internal_set_assoc_max_deviation_angle_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_deviation_angle_image)
}

// optional float assoc_deviation_angle_weight = 24 [default = 0.2];
inline bool ModelConfigs::_internal_has_assoc_deviation_angle_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_deviation_angle_weight() const {
  return _internal_has_assoc_deviation_angle_weight();
}
inline void ModelConfigs::clear_assoc_deviation_angle_weight() {
  _impl_.assoc_deviation_angle_weight_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float ModelConfigs::_internal_assoc_deviation_angle_weight() const {
  return _impl_.assoc_deviation_angle_weight_;
}
inline float ModelConfigs::assoc_deviation_angle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
  return _internal_assoc_deviation_angle_weight();
}
inline void ModelConfigs::_internal_set_assoc_deviation_angle_weight(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.assoc_deviation_angle_weight_ = value;
}
inline void ModelConfigs::set_assoc_deviation_angle_weight(float value) {
  _internal_set_assoc_deviation_angle_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_deviation_angle_weight)
}

// optional float assoc_max_departure_distance = 25 [default = 3];
inline bool ModelConfigs::_internal_has_assoc_max_departure_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_departure_distance() const {
  return _internal_has_assoc_max_departure_distance();
}
inline void ModelConfigs::clear_assoc_max_departure_distance() {
  _impl_.assoc_max_departure_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float ModelConfigs::_internal_assoc_max_departure_distance() const {
  return _impl_.assoc_max_departure_distance_;
}
inline float ModelConfigs::assoc_max_departure_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
  return _internal_assoc_max_departure_distance();
}
inline void ModelConfigs::_internal_set_assoc_max_departure_distance(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.assoc_max_departure_distance_ = value;
}
inline void ModelConfigs::set_assoc_max_departure_distance(float value) {
  _internal_set_assoc_max_departure_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance)
}

// optional float assoc_max_departure_distance_image = 26 [default = 80];
inline bool ModelConfigs::_internal_has_assoc_max_departure_distance_image() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_departure_distance_image() const {
  return _internal_has_assoc_max_departure_distance_image();
}
inline void ModelConfigs::clear_assoc_max_departure_distance_image() {
  _impl_.assoc_max_departure_distance_image_ = 80;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float ModelConfigs::_internal_assoc_max_departure_distance_image() const {
  return _impl_.assoc_max_departure_distance_image_;
}
inline float ModelConfigs::assoc_max_departure_distance_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
  return _internal_assoc_max_departure_distance_image();
}
inline void ModelConfigs::_internal_set_assoc_max_departure_distance_image(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.assoc_max_departure_distance_image_ = value;
}
inline void ModelConfigs::set_assoc_max_departure_distance_image(float value) {
  _internal_set_assoc_max_departure_distance_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_departure_distance_image)
}

// optional float assoc_departure_distance_weight = 27 [default = 0.2];
inline bool ModelConfigs::_internal_has_assoc_departure_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_departure_distance_weight() const {
  return _internal_has_assoc_departure_distance_weight();
}
inline void ModelConfigs::clear_assoc_departure_distance_weight() {
  _impl_.assoc_departure_distance_weight_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float ModelConfigs::_internal_assoc_departure_distance_weight() const {
  return _impl_.assoc_departure_distance_weight_;
}
inline float ModelConfigs::assoc_departure_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
  return _internal_assoc_departure_distance_weight();
}
inline void ModelConfigs::_internal_set_assoc_departure_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.assoc_departure_distance_weight_ = value;
}
inline void ModelConfigs::set_assoc_departure_distance_weight(float value) {
  _internal_set_assoc_departure_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_departure_distance_weight)
}

// optional float assoc_max_relative_orie = 28 [default = 15];
inline bool ModelConfigs::_internal_has_assoc_max_relative_orie() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_relative_orie() const {
  return _internal_has_assoc_max_relative_orie();
}
inline void ModelConfigs::clear_assoc_max_relative_orie() {
  _impl_.assoc_max_relative_orie_ = 15;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float ModelConfigs::_internal_assoc_max_relative_orie() const {
  return _impl_.assoc_max_relative_orie_;
}
inline float ModelConfigs::assoc_max_relative_orie() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
  return _internal_assoc_max_relative_orie();
}
inline void ModelConfigs::_internal_set_assoc_max_relative_orie(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.assoc_max_relative_orie_ = value;
}
inline void ModelConfigs::set_assoc_max_relative_orie(float value) {
  _internal_set_assoc_max_relative_orie(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie)
}

// optional float assoc_max_relative_orie_image = 29 [default = 45];
inline bool ModelConfigs::_internal_has_assoc_max_relative_orie_image() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_max_relative_orie_image() const {
  return _internal_has_assoc_max_relative_orie_image();
}
inline void ModelConfigs::clear_assoc_max_relative_orie_image() {
  _impl_.assoc_max_relative_orie_image_ = 45;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float ModelConfigs::_internal_assoc_max_relative_orie_image() const {
  return _impl_.assoc_max_relative_orie_image_;
}
inline float ModelConfigs::assoc_max_relative_orie_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
  return _internal_assoc_max_relative_orie_image();
}
inline void ModelConfigs::_internal_set_assoc_max_relative_orie_image(float value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.assoc_max_relative_orie_image_ = value;
}
inline void ModelConfigs::set_assoc_max_relative_orie_image(float value) {
  _internal_set_assoc_max_relative_orie_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_max_relative_orie_image)
}

// optional float assoc_relative_orie_weight = 30 [default = 0.2];
inline bool ModelConfigs::_internal_has_assoc_relative_orie_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_relative_orie_weight() const {
  return _internal_has_assoc_relative_orie_weight();
}
inline void ModelConfigs::clear_assoc_relative_orie_weight() {
  _impl_.assoc_relative_orie_weight_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float ModelConfigs::_internal_assoc_relative_orie_weight() const {
  return _impl_.assoc_relative_orie_weight_;
}
inline float ModelConfigs::assoc_relative_orie_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
  return _internal_assoc_relative_orie_weight();
}
inline void ModelConfigs::_internal_set_assoc_relative_orie_weight(float value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.assoc_relative_orie_weight_ = value;
}
inline void ModelConfigs::set_assoc_relative_orie_weight(float value) {
  _internal_set_assoc_relative_orie_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_relative_orie_weight)
}

// optional float assoc_min_orientation_estimation_size = 31 [default = 3];
inline bool ModelConfigs::_internal_has_assoc_min_orientation_estimation_size() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_min_orientation_estimation_size() const {
  return _internal_has_assoc_min_orientation_estimation_size();
}
inline void ModelConfigs::clear_assoc_min_orientation_estimation_size() {
  _impl_.assoc_min_orientation_estimation_size_ = 3;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float ModelConfigs::_internal_assoc_min_orientation_estimation_size() const {
  return _impl_.assoc_min_orientation_estimation_size_;
}
inline float ModelConfigs::assoc_min_orientation_estimation_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
  return _internal_assoc_min_orientation_estimation_size();
}
inline void ModelConfigs::_internal_set_assoc_min_orientation_estimation_size(float value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.assoc_min_orientation_estimation_size_ = value;
}
inline void ModelConfigs::set_assoc_min_orientation_estimation_size(float value) {
  _internal_set_assoc_min_orientation_estimation_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size)
}

// optional float assoc_min_orientation_estimation_size_image = 32 [default = 10];
inline bool ModelConfigs::_internal_has_assoc_min_orientation_estimation_size_image() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_assoc_min_orientation_estimation_size_image() const {
  return _internal_has_assoc_min_orientation_estimation_size_image();
}
inline void ModelConfigs::clear_assoc_min_orientation_estimation_size_image() {
  _impl_.assoc_min_orientation_estimation_size_image_ = 10;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float ModelConfigs::_internal_assoc_min_orientation_estimation_size_image() const {
  return _impl_.assoc_min_orientation_estimation_size_image_;
}
inline float ModelConfigs::assoc_min_orientation_estimation_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
  return _internal_assoc_min_orientation_estimation_size_image();
}
inline void ModelConfigs::_internal_set_assoc_min_orientation_estimation_size_image(float value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.assoc_min_orientation_estimation_size_image_ = value;
}
inline void ModelConfigs::set_assoc_min_orientation_estimation_size_image(float value) {
  _internal_set_assoc_min_orientation_estimation_size_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.assoc_min_orientation_estimation_size_image)
}

// optional int32 max_cc_marker_match_num = 33 [default = 1];
inline bool ModelConfigs::_internal_has_max_cc_marker_match_num() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_cc_marker_match_num() const {
  return _internal_has_max_cc_marker_match_num();
}
inline void ModelConfigs::clear_max_cc_marker_match_num() {
  _impl_.max_cc_marker_match_num_ = 1;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline int32_t ModelConfigs::_internal_max_cc_marker_match_num() const {
  return _impl_.max_cc_marker_match_num_;
}
inline int32_t ModelConfigs::max_cc_marker_match_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
  return _internal_max_cc_marker_match_num();
}
inline void ModelConfigs::_internal_set_max_cc_marker_match_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.max_cc_marker_match_num_ = value;
}
inline void ModelConfigs::set_max_cc_marker_match_num(int32_t value) {
  _internal_set_max_cc_marker_match_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_cc_marker_match_num)
}

// optional float slide_window_size = 34 [default = 15];
inline bool ModelConfigs::_internal_has_slide_window_size() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ModelConfigs::has_slide_window_size() const {
  return _internal_has_slide_window_size();
}
inline void ModelConfigs::clear_slide_window_size() {
  _impl_.slide_window_size_ = 15;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float ModelConfigs::_internal_slide_window_size() const {
  return _impl_.slide_window_size_;
}
inline float ModelConfigs::slide_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
  return _internal_slide_window_size();
}
inline void ModelConfigs::_internal_set_slide_window_size(float value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.slide_window_size_ = value;
}
inline void ModelConfigs::set_slide_window_size(float value) {
  _internal_set_slide_window_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size)
}

// optional float slide_window_size_image = 35 [default = 200];
inline bool ModelConfigs::_internal_has_slide_window_size_image() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ModelConfigs::has_slide_window_size_image() const {
  return _internal_has_slide_window_size_image();
}
inline void ModelConfigs::clear_slide_window_size_image() {
  _impl_.slide_window_size_image_ = 200;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline float ModelConfigs::_internal_slide_window_size_image() const {
  return _impl_.slide_window_size_image_;
}
inline float ModelConfigs::slide_window_size_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
  return _internal_slide_window_size_image();
}
inline void ModelConfigs::_internal_set_slide_window_size_image(float value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.slide_window_size_image_ = value;
}
inline void ModelConfigs::set_slide_window_size_image(float value) {
  _internal_set_slide_window_size_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_size_image)
}

// optional int32 slide_window_max_point_num = 36 [default = 3];
inline bool ModelConfigs::_internal_has_slide_window_max_point_num() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ModelConfigs::has_slide_window_max_point_num() const {
  return _internal_has_slide_window_max_point_num();
}
inline void ModelConfigs::clear_slide_window_max_point_num() {
  _impl_.slide_window_max_point_num_ = 3;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline int32_t ModelConfigs::_internal_slide_window_max_point_num() const {
  return _impl_.slide_window_max_point_num_;
}
inline int32_t ModelConfigs::slide_window_max_point_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
  return _internal_slide_window_max_point_num();
}
inline void ModelConfigs::_internal_set_slide_window_max_point_num(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.slide_window_max_point_num_ = value;
}
inline void ModelConfigs::set_slide_window_max_point_num(int32_t value) {
  _internal_set_slide_window_max_point_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.slide_window_max_point_num)
}

// optional int32 max_group_prediction_marker_num = 37 [default = 3];
inline bool ModelConfigs::_internal_has_max_group_prediction_marker_num() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_group_prediction_marker_num() const {
  return _internal_has_max_group_prediction_marker_num();
}
inline void ModelConfigs::clear_max_group_prediction_marker_num() {
  _impl_.max_group_prediction_marker_num_ = 3;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline int32_t ModelConfigs::_internal_max_group_prediction_marker_num() const {
  return _impl_.max_group_prediction_marker_num_;
}
inline int32_t ModelConfigs::max_group_prediction_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
  return _internal_max_group_prediction_marker_num();
}
inline void ModelConfigs::_internal_set_max_group_prediction_marker_num(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.max_group_prediction_marker_num_ = value;
}
inline void ModelConfigs::set_max_group_prediction_marker_num(int32_t value) {
  _internal_set_max_group_prediction_marker_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_group_prediction_marker_num)
}

// optional int32 orientation_estimation_skip_marker_num = 38 [default = 1];
inline bool ModelConfigs::_internal_has_orientation_estimation_skip_marker_num() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ModelConfigs::has_orientation_estimation_skip_marker_num() const {
  return _internal_has_orientation_estimation_skip_marker_num();
}
inline void ModelConfigs::clear_orientation_estimation_skip_marker_num() {
  _impl_.orientation_estimation_skip_marker_num_ = 1;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t ModelConfigs::_internal_orientation_estimation_skip_marker_num() const {
  return _impl_.orientation_estimation_skip_marker_num_;
}
inline int32_t ModelConfigs::orientation_estimation_skip_marker_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
  return _internal_orientation_estimation_skip_marker_num();
}
inline void ModelConfigs::_internal_set_orientation_estimation_skip_marker_num(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.orientation_estimation_skip_marker_num_ = value;
}
inline void ModelConfigs::set_orientation_estimation_skip_marker_num(int32_t value) {
  _internal_set_orientation_estimation_skip_marker_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.orientation_estimation_skip_marker_num)
}

// optional float lane_interval_distance = 39 [default = 4];
inline bool ModelConfigs::_internal_has_lane_interval_distance() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ModelConfigs::has_lane_interval_distance() const {
  return _internal_has_lane_interval_distance();
}
inline void ModelConfigs::clear_lane_interval_distance() {
  _impl_.lane_interval_distance_ = 4;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline float ModelConfigs::_internal_lane_interval_distance() const {
  return _impl_.lane_interval_distance_;
}
inline float ModelConfigs::lane_interval_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
  return _internal_lane_interval_distance();
}
inline void ModelConfigs::_internal_set_lane_interval_distance(float value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.lane_interval_distance_ = value;
}
inline void ModelConfigs::set_lane_interval_distance(float value) {
  _internal_set_lane_interval_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_interval_distance)
}

// optional float min_instance_size_prefiltered = 40 [default = 3];
inline bool ModelConfigs::_internal_has_min_instance_size_prefiltered() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_instance_size_prefiltered() const {
  return _internal_has_min_instance_size_prefiltered();
}
inline void ModelConfigs::clear_min_instance_size_prefiltered() {
  _impl_.min_instance_size_prefiltered_ = 3;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline float ModelConfigs::_internal_min_instance_size_prefiltered() const {
  return _impl_.min_instance_size_prefiltered_;
}
inline float ModelConfigs::min_instance_size_prefiltered() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
  return _internal_min_instance_size_prefiltered();
}
inline void ModelConfigs::_internal_set_min_instance_size_prefiltered(float value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.min_instance_size_prefiltered_ = value;
}
inline void ModelConfigs::set_min_instance_size_prefiltered(float value) {
  _internal_set_min_instance_size_prefiltered(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered)
}

// optional float min_instance_size_prefiltered_image = 41 [default = 20];
inline bool ModelConfigs::_internal_has_min_instance_size_prefiltered_image() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ModelConfigs::has_min_instance_size_prefiltered_image() const {
  return _internal_has_min_instance_size_prefiltered_image();
}
inline void ModelConfigs::clear_min_instance_size_prefiltered_image() {
  _impl_.min_instance_size_prefiltered_image_ = 20;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline float ModelConfigs::_internal_min_instance_size_prefiltered_image() const {
  return _impl_.min_instance_size_prefiltered_image_;
}
inline float ModelConfigs::min_instance_size_prefiltered_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
  return _internal_min_instance_size_prefiltered_image();
}
inline void ModelConfigs::_internal_set_min_instance_size_prefiltered_image(float value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.min_instance_size_prefiltered_image_ = value;
}
inline void ModelConfigs::set_min_instance_size_prefiltered_image(float value) {
  _internal_set_min_instance_size_prefiltered_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.min_instance_size_prefiltered_image)
}

// optional float max_size_to_fit_straight_line = 42 [default = 10];
inline bool ModelConfigs::_internal_has_max_size_to_fit_straight_line() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_size_to_fit_straight_line() const {
  return _internal_has_max_size_to_fit_straight_line();
}
inline void ModelConfigs::clear_max_size_to_fit_straight_line() {
  _impl_.max_size_to_fit_straight_line_ = 10;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline float ModelConfigs::_internal_max_size_to_fit_straight_line() const {
  return _impl_.max_size_to_fit_straight_line_;
}
inline float ModelConfigs::max_size_to_fit_straight_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
  return _internal_max_size_to_fit_straight_line();
}
inline void ModelConfigs::_internal_set_max_size_to_fit_straight_line(float value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.max_size_to_fit_straight_line_ = value;
}
inline void ModelConfigs::set_max_size_to_fit_straight_line(float value) {
  _internal_set_max_size_to_fit_straight_line(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line)
}

// optional float max_size_to_fit_straight_line_image = 43 [default = 300];
inline bool ModelConfigs::_internal_has_max_size_to_fit_straight_line_image() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_size_to_fit_straight_line_image() const {
  return _internal_has_max_size_to_fit_straight_line_image();
}
inline void ModelConfigs::clear_max_size_to_fit_straight_line_image() {
  _impl_.max_size_to_fit_straight_line_image_ = 300;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline float ModelConfigs::_internal_max_size_to_fit_straight_line_image() const {
  return _impl_.max_size_to_fit_straight_line_image_;
}
inline float ModelConfigs::max_size_to_fit_straight_line_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
  return _internal_max_size_to_fit_straight_line_image();
}
inline void ModelConfigs::_internal_set_max_size_to_fit_straight_line_image(float value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.max_size_to_fit_straight_line_image_ = value;
}
inline void ModelConfigs::set_max_size_to_fit_straight_line_image(float value) {
  _internal_set_max_size_to_fit_straight_line_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_size_to_fit_straight_line_image)
}

// optional float online_pitch_angle = 44 [default = -2.5];
inline bool ModelConfigs::_internal_has_online_pitch_angle() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ModelConfigs::has_online_pitch_angle() const {
  return _internal_has_online_pitch_angle();
}
inline void ModelConfigs::clear_online_pitch_angle() {
  _impl_.online_pitch_angle_ = -2.5f;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline float ModelConfigs::_internal_online_pitch_angle() const {
  return _impl_.online_pitch_angle_;
}
inline float ModelConfigs::online_pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
  return _internal_online_pitch_angle();
}
inline void ModelConfigs::_internal_set_online_pitch_angle(float value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.online_pitch_angle_ = value;
}
inline void ModelConfigs::set_online_pitch_angle(float value) {
  _internal_set_online_pitch_angle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.online_pitch_angle)
}

// optional float ground_height = 45 [default = 1.6];
inline bool ModelConfigs::_internal_has_ground_height() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ModelConfigs::has_ground_height() const {
  return _internal_has_ground_height();
}
inline void ModelConfigs::clear_ground_height() {
  _impl_.ground_height_ = 1.6f;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline float ModelConfigs::_internal_ground_height() const {
  return _impl_.ground_height_;
}
inline float ModelConfigs::ground_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
  return _internal_ground_height();
}
inline void ModelConfigs::_internal_set_ground_height(float value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.ground_height_ = value;
}
inline void ModelConfigs::set_ground_height(float value) {
  _internal_set_ground_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.ground_height)
}

// optional float max_distance_to_see_for_transformer = 46 [default = 500];
inline bool ModelConfigs::_internal_has_max_distance_to_see_for_transformer() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_distance_to_see_for_transformer() const {
  return _internal_has_max_distance_to_see_for_transformer();
}
inline void ModelConfigs::clear_max_distance_to_see_for_transformer() {
  _impl_.max_distance_to_see_for_transformer_ = 500;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline float ModelConfigs::_internal_max_distance_to_see_for_transformer() const {
  return _impl_.max_distance_to_see_for_transformer_;
}
inline float ModelConfigs::max_distance_to_see_for_transformer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
  return _internal_max_distance_to_see_for_transformer();
}
inline void ModelConfigs::_internal_set_max_distance_to_see_for_transformer(float value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.max_distance_to_see_for_transformer_ = value;
}
inline void ModelConfigs::set_max_distance_to_see_for_transformer(float value) {
  _internal_set_max_distance_to_see_for_transformer(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.max_distance_to_see_for_transformer)
}

// optional float lane_map_scale = 47 [default = 2];
inline bool ModelConfigs::_internal_has_lane_map_scale() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lane_map_scale() const {
  return _internal_has_lane_map_scale();
}
inline void ModelConfigs::clear_lane_map_scale() {
  _impl_.lane_map_scale_ = 2;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline float ModelConfigs::_internal_lane_map_scale() const {
  return _impl_.lane_map_scale_;
}
inline float ModelConfigs::lane_map_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
  return _internal_lane_map_scale();
}
inline void ModelConfigs::_internal_set_lane_map_scale(float value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.lane_map_scale_ = value;
}
inline void ModelConfigs::set_lane_map_scale(float value) {
  _internal_set_lane_map_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_scale)
}

// optional int32 start_y_pos = 48 [default = 312];
inline bool ModelConfigs::_internal_has_start_y_pos() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ModelConfigs::has_start_y_pos() const {
  return _internal_has_start_y_pos();
}
inline void ModelConfigs::clear_start_y_pos() {
  _impl_.start_y_pos_ = 312;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline int32_t ModelConfigs::_internal_start_y_pos() const {
  return _impl_.start_y_pos_;
}
inline int32_t ModelConfigs::start_y_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
  return _internal_start_y_pos();
}
inline void ModelConfigs::_internal_set_start_y_pos(int32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.start_y_pos_ = value;
}
inline void ModelConfigs::set_start_y_pos(int32_t value) {
  _internal_set_start_y_pos(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.start_y_pos)
}

// optional int32 lane_map_width = 49 [default = 960];
inline bool ModelConfigs::_internal_has_lane_map_width() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lane_map_width() const {
  return _internal_has_lane_map_width();
}
inline void ModelConfigs::clear_lane_map_width() {
  _impl_.lane_map_width_ = 960;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline int32_t ModelConfigs::_internal_lane_map_width() const {
  return _impl_.lane_map_width_;
}
inline int32_t ModelConfigs::lane_map_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
  return _internal_lane_map_width();
}
inline void ModelConfigs::_internal_set_lane_map_width(int32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.lane_map_width_ = value;
}
inline void ModelConfigs::set_lane_map_width(int32_t value) {
  _internal_set_lane_map_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_width)
}

// optional int32 lane_map_height = 50 [default = 384];
inline bool ModelConfigs::_internal_has_lane_map_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelConfigs::has_lane_map_height() const {
  return _internal_has_lane_map_height();
}
inline void ModelConfigs::clear_lane_map_height() {
  _impl_.lane_map_height_ = 384;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ModelConfigs::_internal_lane_map_height() const {
  return _impl_.lane_map_height_;
}
inline int32_t ModelConfigs::lane_map_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
  return _internal_lane_map_height();
}
inline void ModelConfigs::_internal_set_lane_map_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.lane_map_height_ = value;
}
inline void ModelConfigs::set_lane_map_height(int32_t value) {
  _internal_set_lane_map_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lane_post_process_config.ModelConfigs.lane_map_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lane_post_process_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2flane_5fpost_5fprocess_5fconfig_2eproto
