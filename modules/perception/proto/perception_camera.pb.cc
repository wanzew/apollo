// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_camera.proto

#include "modules/perception/proto/perception_camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
PROTOBUF_CONSTEXPR LaneLineCubicCurve::LaneLineCubicCurve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.longitude_min_)*/0
  , /*decltype(_impl_.longitude_max_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.c_)*/0
  , /*decltype(_impl_.d_)*/0} {}
struct LaneLineCubicCurveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneLineCubicCurveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneLineCubicCurveDefaultTypeInternal() {}
  union {
    LaneLineCubicCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneLineCubicCurveDefaultTypeInternal _LaneLineCubicCurve_default_instance_;
PROTOBUF_CONSTEXPR EndPoints::EndPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr} {}
struct EndPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndPointsDefaultTypeInternal() {}
  union {
    EndPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndPointsDefaultTypeInternal _EndPoints_default_instance_;
PROTOBUF_CONSTEXPR CameraLaneLine::CameraLaneLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.curve_camera_point_set_)*/{}
  , /*decltype(_impl_.curve_image_point_set_)*/{}
  , /*decltype(_impl_.image_end_point_set_)*/{}
  , /*decltype(_impl_.curve_camera_coord_)*/nullptr
  , /*decltype(_impl_.curve_image_coord_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.track_id_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.use_type_)*/0
  , /*decltype(_impl_.pos_type_)*/-5} {}
struct CameraLaneLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraLaneLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraLaneLineDefaultTypeInternal() {}
  union {
    CameraLaneLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraLaneLineDefaultTypeInternal _CameraLaneLine_default_instance_;
PROTOBUF_CONSTEXPR CameraCalibrator::CameraCalibrator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pitch_angle_)*/0
  , /*decltype(_impl_.camera_height_)*/0} {}
struct CameraCalibratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraCalibratorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraCalibratorDefaultTypeInternal() {}
  union {
    CameraCalibrator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraCalibratorDefaultTypeInternal _CameraCalibrator_default_instance_;
PROTOBUF_CONSTEXPR CameraObstacle::CameraObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_probs_)*/{}
  , /*decltype(_impl_.key_points_)*/{}
  , /*decltype(_impl_.debug_message_)*/{}
  , /*decltype(_impl_.obstacle_)*/nullptr
  , /*decltype(_impl_.upper_left_)*/nullptr
  , /*decltype(_impl_.lower_right_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct CameraObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraObstacleDefaultTypeInternal() {}
  union {
    CameraObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraObstacleDefaultTypeInternal _CameraObstacle_default_instance_;
PROTOBUF_CONSTEXPR CameraDebug::CameraDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_laneline_)*/{}
  , /*decltype(_impl_.camera_obstacle_)*/{}
  , /*decltype(_impl_.source_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.camera_calibrator_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0} {}
struct CameraDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDebugDefaultTypeInternal() {}
  union {
    CameraDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDebugDefaultTypeInternal _CameraDebug_default_instance_;
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.longitude_min_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.longitude_max_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _impl_.d_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _impl_.end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.pos_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.curve_camera_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.curve_image_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.curve_camera_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.curve_image_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.image_end_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.track_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _impl_.use_type_),
  2,
  6,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _impl_.pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _impl_.camera_height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.type_probs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.upper_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.lower_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.key_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _impl_.debug_message_),
  0,
  3,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.source_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.camera_calibrator_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.camera_laneline_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _impl_.camera_obstacle_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::perception::camera::LaneLineCubicCurve)},
  { 18, 26, -1, sizeof(::apollo::perception::camera::EndPoints)},
  { 28, 44, -1, sizeof(::apollo::perception::camera::CameraLaneLine)},
  { 54, 62, -1, sizeof(::apollo::perception::camera::CameraCalibrator)},
  { 64, 77, -1, sizeof(::apollo::perception::camera::CameraObstacle)},
  { 84, 96, -1, sizeof(::apollo::perception::camera::CameraDebug)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::_LaneLineCubicCurve_default_instance_._instance,
  &::apollo::perception::camera::_EndPoints_default_instance_._instance,
  &::apollo::perception::camera::_CameraLaneLine_default_instance_._instance,
  &::apollo::perception::camera::_CameraCalibrator_default_instance_._instance,
  &::apollo::perception::camera::_CameraObstacle_default_instance_._instance,
  &::apollo::perception::camera::_CameraDebug_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/perception/proto/perception_ca"
  "mera.proto\022\030apollo.perception.camera\032#mo"
  "dules/common/proto/geometry.proto\032!modul"
  "es/common/proto/header.proto\0322modules/pe"
  "rception/proto/perception_obstacle.proto"
  "\"n\n\022LaneLineCubicCurve\022\025\n\rlongitude_min\030"
  "\001 \001(\002\022\025\n\rlongitude_max\030\002 \001(\002\022\t\n\001a\030\003 \001(\002\022"
  "\t\n\001b\030\004 \001(\002\022\t\n\001c\030\005 \001(\002\022\t\n\001d\030\006 \001(\002\"W\n\tEndP"
  "oints\022%\n\005start\030\001 \001(\0132\026.apollo.common.Poi"
  "nt2D\022#\n\003end\030\002 \001(\0132\026.apollo.common.Point2"
  "D\"\257\004\n\016CameraLaneLine\0224\n\004type\030\001 \001(\0162&.apo"
  "llo.perception.camera.LaneLineType\022@\n\010po"
  "s_type\030\002 \001(\0162..apollo.perception.camera."
  "LaneLinePositionType\022H\n\022curve_camera_coo"
  "rd\030\003 \001(\0132,.apollo.perception.camera.Lane"
  "LineCubicCurve\022G\n\021curve_image_coord\030\004 \001("
  "\0132,.apollo.perception.camera.LaneLineCub"
  "icCurve\0226\n\026curve_camera_point_set\030\005 \003(\0132"
  "\026.apollo.common.Point3D\0225\n\025curve_image_p"
  "oint_set\030\006 \003(\0132\026.apollo.common.Point2D\022@"
  "\n\023image_end_point_set\030\007 \003(\0132#.apollo.per"
  "ception.camera.EndPoints\022\020\n\010track_id\030\010 \001"
  "(\005\022\022\n\nconfidence\030\t \001(\002\022;\n\010use_type\030\n \001(\016"
  "2).apollo.perception.camera.LaneLineUseT"
  "ype\">\n\020CameraCalibrator\022\023\n\013pitch_angle\030\001"
  " \001(\002\022\025\n\rcamera_height\030\002 \001(\002\"\255\003\n\016CameraOb"
  "stacle\0227\n\010obstacle\030\001 \001(\0132%.apollo.percep"
  "tion.PerceptionObstacle\022A\n\004type\030\025 \001(\01623."
  "apollo.perception.camera.CameraObstacle."
  "CameraType\022\022\n\ntype_probs\030\026 \003(\002\022*\n\nupper_"
  "left\030\027 \001(\0132\026.apollo.common.Point2D\022+\n\013lo"
  "wer_right\030\030 \001(\0132\026.apollo.common.Point2D\022"
  "*\n\nkey_points\030\031 \003(\0132\026.apollo.common.Poin"
  "t2D\022\025\n\rdebug_message\030\032 \003(\t\"o\n\nCameraType"
  "\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UN"
  "KNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BIC"
  "YCLE\020\004\022\013\n\007VEHICLE\020\005\"\342\002\n\013CameraDebug\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022\024\n\014so"
  "urce_topic\030\002 \001(\t\022I\n\nerror_code\030\003 \001(\0162).a"
  "pollo.perception.camera.CameraErrorCode:"
  "\nERROR_NONE\022E\n\021camera_calibrator\030\004 \001(\0132*"
  ".apollo.perception.camera.CameraCalibrat"
  "or\022A\n\017camera_laneline\030\005 \003(\0132(.apollo.per"
  "ception.camera.CameraLaneLine\022A\n\017camera_"
  "obstacle\030\006 \003(\0132(.apollo.perception.camer"
  "a.CameraObstacle*4\n\017CameraErrorCode\022\016\n\nE"
  "RROR_NONE\020\000\022\021\n\rERROR_UNKNOWN\020\001*V\n\014LaneLi"
  "neType\022\020\n\014WHITE_DASHED\020\000\022\017\n\013WHITE_SOLID\020"
  "\001\022\021\n\rYELLOW_DASHED\020\002\022\020\n\014YELLOW_SOLID\020\003*\210"
  "\002\n\024LaneLinePositionType\022\031\n\014BOLLARD_LEFT\020"
  "\373\377\377\377\377\377\377\377\377\001\022\030\n\013FOURTH_LEFT\020\374\377\377\377\377\377\377\377\377\001\022\027\n\n"
  "THIRD_LEFT\020\375\377\377\377\377\377\377\377\377\001\022\032\n\rADJACENT_LEFT\020\376"
  "\377\377\377\377\377\377\377\377\001\022\025\n\010EGO_LEFT\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tEGO_"
  "RIGHT\020\001\022\022\n\016ADJACENT_RIGHT\020\002\022\017\n\013THIRD_RIG"
  "HT\020\003\022\020\n\014FOURTH_RIGHT\020\004\022\021\n\rBOLLARD_RIGHT\020"
  "\005\022\t\n\005OTHER\020\006\022\013\n\007UNKNOWN\020\007*(\n\017LaneLineUse"
  "Type\022\010\n\004REAL\020\000\022\013\n\007VIRTUAL\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = {
    false, false, 2267, descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto,
    "modules/perception/proto/perception_camera.proto",
    &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fperception_5fcamera_2eproto(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
namespace apollo {
namespace perception {
namespace camera {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraObstacle_CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[0];
}
bool CameraObstacle_CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_MOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_UNMOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::PEDESTRIAN;
constexpr CameraObstacle_CameraType CameraObstacle::BICYCLE;
constexpr CameraObstacle_CameraType CameraObstacle::VEHICLE;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MIN;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MAX;
constexpr int CameraObstacle::CameraType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[1];
}
bool CameraErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[2];
}
bool LaneLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLinePositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[3];
}
bool LaneLinePositionType_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineUseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[4];
}
bool LaneLineUseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LaneLineCubicCurve::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneLineCubicCurve>()._impl_._has_bits_);
  static void set_has_longitude_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LaneLineCubicCurve::LaneLineCubicCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.LaneLineCubicCurve)
}
LaneLineCubicCurve::LaneLineCubicCurve(const LaneLineCubicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.longitude_min_){}
    , decltype(_impl_.longitude_max_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.d_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_min_, &from._impl_.longitude_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.d_) -
    reinterpret_cast<char*>(&_impl_.longitude_min_)) + sizeof(_impl_.d_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.LaneLineCubicCurve)
}

inline void LaneLineCubicCurve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.longitude_min_){0}
    , decltype(_impl_.longitude_max_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.c_){0}
    , decltype(_impl_.d_){0}
  };
}

LaneLineCubicCurve::~LaneLineCubicCurve() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.LaneLineCubicCurve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneLineCubicCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneLineCubicCurve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneLineCubicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.LaneLineCubicCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.longitude_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.d_) -
        reinterpret_cast<char*>(&_impl_.longitude_min_)) + sizeof(_impl_.d_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneLineCubicCurve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float longitude_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_longitude_min(&has_bits);
          _impl_.longitude_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float longitude_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_longitude_max(&has_bits);
          _impl_.longitude_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_c(&has_bits);
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_d(&has_bits);
          _impl_.d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneLineCubicCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.LaneLineCubicCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float longitude_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude_min(), target);
  }

  // optional float longitude_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude_max(), target);
  }

  // optional float a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a(), target);
  }

  // optional float b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_b(), target);
  }

  // optional float c = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_c(), target);
  }

  // optional float d = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.LaneLineCubicCurve)
  return target;
}

size_t LaneLineCubicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.LaneLineCubicCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float longitude_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float longitude_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float b = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float c = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float d = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneLineCubicCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneLineCubicCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneLineCubicCurve::GetClassData() const { return &_class_data_; }

void LaneLineCubicCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneLineCubicCurve *>(to)->MergeFrom(
      static_cast<const LaneLineCubicCurve &>(from));
}


void LaneLineCubicCurve::MergeFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.LaneLineCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.longitude_min_ = from._impl_.longitude_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitude_max_ = from._impl_.longitude_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.c_ = from._impl_.c_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.d_ = from._impl_.d_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneLineCubicCurve::CopyFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.LaneLineCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLineCubicCurve::IsInitialized() const {
  return true;
}

void LaneLineCubicCurve::InternalSwap(LaneLineCubicCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneLineCubicCurve, _impl_.d_)
      + sizeof(LaneLineCubicCurve::_impl_.d_)
      - PROTOBUF_FIELD_OFFSET(LaneLineCubicCurve, _impl_.longitude_min_)>(
          reinterpret_cast<char*>(&_impl_.longitude_min_),
          reinterpret_cast<char*>(&other->_impl_.longitude_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneLineCubicCurve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[0]);
}

// ===================================================================

class EndPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<EndPoints>()._impl_._has_bits_);
  static const ::apollo::common::Point2D& start(const EndPoints* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point2D& end(const EndPoints* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Point2D&
EndPoints::_Internal::start(const EndPoints* msg) {
  return *msg->_impl_.start_;
}
const ::apollo::common::Point2D&
EndPoints::_Internal::end(const EndPoints* msg) {
  return *msg->_impl_.end_;
}
void EndPoints::clear_start() {
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EndPoints::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
EndPoints::EndPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.EndPoints)
}
EndPoints::EndPoints(const EndPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _impl_.start_ = new ::apollo::common::Point2D(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _impl_.end_ = new ::apollo::common::Point2D(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.EndPoints)
}

inline void EndPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
  };
}

EndPoints::~EndPoints() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.EndPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void EndPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.EndPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Point2D start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.EndPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Point2D start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point2D end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.EndPoints)
  return target;
}

size_t EndPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.EndPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Point2D start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_);
    }

    // optional .apollo.common.Point2D end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndPoints::GetClassData() const { return &_class_data_; }

void EndPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndPoints *>(to)->MergeFrom(
      static_cast<const EndPoints &>(from));
}


void EndPoints::MergeFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.EndPoints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::apollo::common::Point2D::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::apollo::common::Point2D::MergeFrom(from._internal_end());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndPoints::CopyFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.EndPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoints::IsInitialized() const {
  return true;
}

void EndPoints::InternalSwap(EndPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndPoints, _impl_.end_)
      + sizeof(EndPoints::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(EndPoints, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[1]);
}

// ===================================================================

class CameraLaneLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraLaneLine>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_camera_coord(const CameraLaneLine* msg);
  static void set_has_curve_camera_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_image_coord(const CameraLaneLine* msg);
  static void set_has_curve_image_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::_Internal::curve_camera_coord(const CameraLaneLine* msg) {
  return *msg->_impl_.curve_camera_coord_;
}
const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::_Internal::curve_image_coord(const CameraLaneLine* msg) {
  return *msg->_impl_.curve_image_coord_;
}
void CameraLaneLine::clear_curve_camera_point_set() {
  _impl_.curve_camera_point_set_.Clear();
}
void CameraLaneLine::clear_curve_image_point_set() {
  _impl_.curve_image_point_set_.Clear();
}
CameraLaneLine::CameraLaneLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraLaneLine)
}
CameraLaneLine::CameraLaneLine(const CameraLaneLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curve_camera_point_set_){from._impl_.curve_camera_point_set_}
    , decltype(_impl_.curve_image_point_set_){from._impl_.curve_image_point_set_}
    , decltype(_impl_.image_end_point_set_){from._impl_.image_end_point_set_}
    , decltype(_impl_.curve_camera_coord_){nullptr}
    , decltype(_impl_.curve_image_coord_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.track_id_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.use_type_){}
    , decltype(_impl_.pos_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve_camera_coord()) {
    _impl_.curve_camera_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from._impl_.curve_camera_coord_);
  }
  if (from._internal_has_curve_image_coord()) {
    _impl_.curve_image_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from._impl_.curve_image_coord_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_type_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.pos_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraLaneLine)
}

inline void CameraLaneLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curve_camera_point_set_){arena}
    , decltype(_impl_.curve_image_point_set_){arena}
    , decltype(_impl_.image_end_point_set_){arena}
    , decltype(_impl_.curve_camera_coord_){nullptr}
    , decltype(_impl_.curve_image_coord_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.track_id_){0}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.use_type_){0}
    , decltype(_impl_.pos_type_){-5}
  };
}

CameraLaneLine::~CameraLaneLine() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraLaneLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraLaneLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.curve_camera_point_set_.~RepeatedPtrField();
  _impl_.curve_image_point_set_.~RepeatedPtrField();
  _impl_.image_end_point_set_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.curve_camera_coord_;
  if (this != internal_default_instance()) delete _impl_.curve_image_coord_;
}

void CameraLaneLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraLaneLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraLaneLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.curve_camera_point_set_.Clear();
  _impl_.curve_image_point_set_.Clear();
  _impl_.image_end_point_set_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.curve_camera_coord_ != nullptr);
      _impl_.curve_camera_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.curve_image_coord_ != nullptr);
      _impl_.curve_image_coord_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_type_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.use_type_));
    _impl_.pos_type_ = -5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraLaneLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.LaneLineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::camera::LaneLineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLinePositionType_IsValid(val))) {
            _internal_set_pos_type(static_cast<::apollo::perception::camera::LaneLinePositionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_camera_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_image_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D curve_camera_point_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_camera_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D curve_image_point_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_image_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_end_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 track_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_track_id(&has_bits);
          _impl_.track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineUseType_IsValid(val))) {
            _internal_set_use_type(static_cast<::apollo::perception::camera::LaneLineUseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraLaneLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraLaneLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.LaneLineType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pos_type(), target);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::curve_camera_coord(this),
        _Internal::curve_camera_coord(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::curve_image_coord(this),
        _Internal::curve_image_coord(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_curve_camera_point_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_curve_camera_point_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_curve_image_point_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_curve_image_point_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_end_point_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_end_point_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 track_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_track_id(), target);
  }

  // optional float confidence = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence(), target);
  }

  // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_use_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraLaneLine)
  return target;
}

size_t CameraLaneLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraLaneLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  total_size += 1UL * this->_internal_curve_camera_point_set_size();
  for (const auto& msg : this->_impl_.curve_camera_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  total_size += 1UL * this->_internal_curve_image_point_set_size();
  for (const auto& msg : this->_impl_.curve_image_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  total_size += 1UL * this->_internal_image_end_point_set_size();
  for (const auto& msg : this->_impl_.image_end_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.curve_camera_coord_);
    }

    // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.curve_image_coord_);
    }

    // optional .apollo.perception.camera.LaneLineType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 track_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_track_id());
    }

    // optional float confidence = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_use_type());
    }

    // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pos_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraLaneLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraLaneLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraLaneLine::GetClassData() const { return &_class_data_; }

void CameraLaneLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraLaneLine *>(to)->MergeFrom(
      static_cast<const CameraLaneLine &>(from));
}


void CameraLaneLine::MergeFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraLaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.curve_camera_point_set_.MergeFrom(from._impl_.curve_camera_point_set_);
  _impl_.curve_image_point_set_.MergeFrom(from._impl_.curve_image_point_set_);
  _impl_.image_end_point_set_.MergeFrom(from._impl_.image_end_point_set_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve_camera_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from._internal_curve_camera_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_curve_image_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from._internal_curve_image_coord());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.track_id_ = from._impl_.track_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.use_type_ = from._impl_.use_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.pos_type_ = from._impl_.pos_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraLaneLine::CopyFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraLaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLaneLine::IsInitialized() const {
  return true;
}

void CameraLaneLine::InternalSwap(CameraLaneLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.curve_camera_point_set_.InternalSwap(&other->_impl_.curve_camera_point_set_);
  _impl_.curve_image_point_set_.InternalSwap(&other->_impl_.curve_image_point_set_);
  _impl_.image_end_point_set_.InternalSwap(&other->_impl_.image_end_point_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraLaneLine, _impl_.use_type_)
      + sizeof(CameraLaneLine::_impl_.use_type_)
      - PROTOBUF_FIELD_OFFSET(CameraLaneLine, _impl_.curve_camera_coord_)>(
          reinterpret_cast<char*>(&_impl_.curve_camera_coord_),
          reinterpret_cast<char*>(&other->_impl_.curve_camera_coord_));
  swap(_impl_.pos_type_, other->_impl_.pos_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraLaneLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[2]);
}

// ===================================================================

class CameraCalibrator::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraCalibrator>()._impl_._has_bits_);
  static void set_has_pitch_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CameraCalibrator::CameraCalibrator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraCalibrator)
}
CameraCalibrator::CameraCalibrator(const CameraCalibrator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pitch_angle_){}
    , decltype(_impl_.camera_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pitch_angle_, &from._impl_.pitch_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camera_height_) -
    reinterpret_cast<char*>(&_impl_.pitch_angle_)) + sizeof(_impl_.camera_height_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraCalibrator)
}

inline void CameraCalibrator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pitch_angle_){0}
    , decltype(_impl_.camera_height_){0}
  };
}

CameraCalibrator::~CameraCalibrator() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraCalibrator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraCalibrator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraCalibrator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraCalibrator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraCalibrator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.pitch_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.camera_height_) -
        reinterpret_cast<char*>(&_impl_.pitch_angle_)) + sizeof(_impl_.camera_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float pitch_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_pitch_angle(&has_bits);
          _impl_.pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float camera_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_camera_height(&has_bits);
          _impl_.camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraCalibrator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraCalibrator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float pitch_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch_angle(), target);
  }

  // optional float camera_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_camera_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraCalibrator)
  return target;
}

size_t CameraCalibrator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraCalibrator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float pitch_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float camera_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraCalibrator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraCalibrator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraCalibrator::GetClassData() const { return &_class_data_; }

void CameraCalibrator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraCalibrator *>(to)->MergeFrom(
      static_cast<const CameraCalibrator &>(from));
}


void CameraCalibrator::MergeFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraCalibrator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pitch_angle_ = from._impl_.pitch_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.camera_height_ = from._impl_.camera_height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraCalibrator::CopyFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraCalibrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrator::IsInitialized() const {
  return true;
}

void CameraCalibrator::InternalSwap(CameraCalibrator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibrator, _impl_.camera_height_)
      + sizeof(CameraCalibrator::_impl_.camera_height_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibrator, _impl_.pitch_angle_)>(
          reinterpret_cast<char*>(&_impl_.pitch_angle_),
          reinterpret_cast<char*>(&other->_impl_.pitch_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[3]);
}

// ===================================================================

class CameraObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraObstacle>()._impl_._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& obstacle(const CameraObstacle* msg);
  static void set_has_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point2D& upper_left(const CameraObstacle* msg);
  static void set_has_upper_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point2D& lower_right(const CameraObstacle* msg);
  static void set_has_lower_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::PerceptionObstacle&
CameraObstacle::_Internal::obstacle(const CameraObstacle* msg) {
  return *msg->_impl_.obstacle_;
}
const ::apollo::common::Point2D&
CameraObstacle::_Internal::upper_left(const CameraObstacle* msg) {
  return *msg->_impl_.upper_left_;
}
const ::apollo::common::Point2D&
CameraObstacle::_Internal::lower_right(const CameraObstacle* msg) {
  return *msg->_impl_.lower_right_;
}
void CameraObstacle::clear_obstacle() {
  if (_impl_.obstacle_ != nullptr) _impl_.obstacle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CameraObstacle::clear_upper_left() {
  if (_impl_.upper_left_ != nullptr) _impl_.upper_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CameraObstacle::clear_lower_right() {
  if (_impl_.lower_right_ != nullptr) _impl_.lower_right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CameraObstacle::clear_key_points() {
  _impl_.key_points_.Clear();
}
CameraObstacle::CameraObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraObstacle)
}
CameraObstacle::CameraObstacle(const CameraObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_probs_){from._impl_.type_probs_}
    , decltype(_impl_.key_points_){from._impl_.key_points_}
    , decltype(_impl_.debug_message_){from._impl_.debug_message_}
    , decltype(_impl_.obstacle_){nullptr}
    , decltype(_impl_.upper_left_){nullptr}
    , decltype(_impl_.lower_right_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle()) {
    _impl_.obstacle_ = new ::apollo::perception::PerceptionObstacle(*from._impl_.obstacle_);
  }
  if (from._internal_has_upper_left()) {
    _impl_.upper_left_ = new ::apollo::common::Point2D(*from._impl_.upper_left_);
  }
  if (from._internal_has_lower_right()) {
    _impl_.lower_right_ = new ::apollo::common::Point2D(*from._impl_.lower_right_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraObstacle)
}

inline void CameraObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_probs_){arena}
    , decltype(_impl_.key_points_){arena}
    , decltype(_impl_.debug_message_){arena}
    , decltype(_impl_.obstacle_){nullptr}
    , decltype(_impl_.upper_left_){nullptr}
    , decltype(_impl_.lower_right_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

CameraObstacle::~CameraObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_probs_.~RepeatedField();
  _impl_.key_points_.~RepeatedPtrField();
  _impl_.debug_message_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.obstacle_;
  if (this != internal_default_instance()) delete _impl_.upper_left_;
  if (this != internal_default_instance()) delete _impl_.lower_right_;
}

void CameraObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_probs_.Clear();
  _impl_.key_points_.Clear();
  _impl_.debug_message_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.obstacle_ != nullptr);
      _impl_.obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.upper_left_ != nullptr);
      _impl_.upper_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lower_right_ != nullptr);
      _impl_.lower_right_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraObstacle_CameraType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::camera::CameraObstacle_CameraType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated float type_probs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_type_probs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<181>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_type_probs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D upper_left = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D lower_right = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D key_points = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_key_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string debug_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_debug_message();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.camera.CameraObstacle.debug_message");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obstacle(this),
        _Internal::obstacle(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_type(), target);
  }

  // repeated float type_probs = 22;
  for (int i = 0, n = this->_internal_type_probs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_type_probs(i), target);
  }

  // optional .apollo.common.Point2D upper_left = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::upper_left(this),
        _Internal::upper_left(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point2D lower_right = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::lower_right(this),
        _Internal::lower_right(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.Point2D key_points = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_key_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string debug_message = 26;
  for (int i = 0, n = this->_internal_debug_message_size(); i < n; i++) {
    const auto& s = this->_internal_debug_message(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraObstacle.debug_message");
    target = stream->WriteString(26, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraObstacle)
  return target;
}

size_t CameraObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float type_probs = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_type_probs_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_type_probs_size());
    total_size += data_size;
  }

  // repeated .apollo.common.Point2D key_points = 25;
  total_size += 2UL * this->_internal_key_points_size();
  for (const auto& msg : this->_impl_.key_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string debug_message = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.debug_message_.size());
  for (int i = 0, n = _impl_.debug_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.debug_message_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.PerceptionObstacle obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obstacle_);
    }

    // optional .apollo.common.Point2D upper_left = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upper_left_);
    }

    // optional .apollo.common.Point2D lower_right = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lower_right_);
    }

    // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraObstacle::GetClassData() const { return &_class_data_; }

void CameraObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraObstacle *>(to)->MergeFrom(
      static_cast<const CameraObstacle &>(from));
}


void CameraObstacle::MergeFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.type_probs_.MergeFrom(from._impl_.type_probs_);
  _impl_.key_points_.MergeFrom(from._impl_.key_points_);
  _impl_.debug_message_.MergeFrom(from._impl_.debug_message_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_upper_left()->::apollo::common::Point2D::MergeFrom(from._internal_upper_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lower_right()->::apollo::common::Point2D::MergeFrom(from._internal_lower_right());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraObstacle::CopyFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraObstacle::IsInitialized() const {
  return true;
}

void CameraObstacle::InternalSwap(CameraObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.type_probs_.InternalSwap(&other->_impl_.type_probs_);
  _impl_.key_points_.InternalSwap(&other->_impl_.key_points_);
  _impl_.debug_message_.InternalSwap(&other->_impl_.debug_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraObstacle, _impl_.type_)
      + sizeof(CameraObstacle::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CameraObstacle, _impl_.obstacle_)>(
          reinterpret_cast<char*>(&_impl_.obstacle_),
          reinterpret_cast<char*>(&other->_impl_.obstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[4]);
}

// ===================================================================

class CameraDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDebug>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const CameraDebug* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::camera::CameraCalibrator& camera_calibrator(const CameraDebug* msg);
  static void set_has_camera_calibrator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
CameraDebug::_Internal::header(const CameraDebug* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::perception::camera::CameraCalibrator&
CameraDebug::_Internal::camera_calibrator(const CameraDebug* msg) {
  return *msg->_impl_.camera_calibrator_;
}
void CameraDebug::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CameraDebug::CameraDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraDebug)
}
CameraDebug::CameraDebug(const CameraDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_laneline_){from._impl_.camera_laneline_}
    , decltype(_impl_.camera_obstacle_){from._impl_.camera_obstacle_}
    , decltype(_impl_.source_topic_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.camera_calibrator_){nullptr}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_topic()) {
    _impl_.source_topic_.Set(from._internal_source_topic(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_camera_calibrator()) {
    _impl_.camera_calibrator_ = new ::apollo::perception::camera::CameraCalibrator(*from._impl_.camera_calibrator_);
  }
  _impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraDebug)
}

inline void CameraDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_laneline_){arena}
    , decltype(_impl_.camera_obstacle_){arena}
    , decltype(_impl_.source_topic_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.camera_calibrator_){nullptr}
    , decltype(_impl_.error_code_){0}
  };
  _impl_.source_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraDebug::~CameraDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_laneline_.~RepeatedPtrField();
  _impl_.camera_obstacle_.~RepeatedPtrField();
  _impl_.source_topic_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.camera_calibrator_;
}

void CameraDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_laneline_.Clear();
  _impl_.camera_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.camera_calibrator_ != nullptr);
      _impl_.camera_calibrator_->Clear();
    }
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.CameraDebug.source_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::perception::camera::CameraErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_calibrator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_laneline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string source_topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_topic().data(), static_cast<int>(this->_internal_source_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraDebug.source_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_topic(), target);
  }

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::camera_calibrator(this),
        _Internal::camera_calibrator(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_laneline_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_laneline(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraDebug)
  return target;
}

size_t CameraDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  total_size += 1UL * this->_internal_camera_laneline_size();
  for (const auto& msg : this->_impl_.camera_laneline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  total_size += 1UL * this->_internal_camera_obstacle_size();
  for (const auto& msg : this->_impl_.camera_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string source_topic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_topic());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camera_calibrator_);
    }

    // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDebug::GetClassData() const { return &_class_data_; }

void CameraDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraDebug *>(to)->MergeFrom(
      static_cast<const CameraDebug &>(from));
}


void CameraDebug::MergeFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.camera_laneline_.MergeFrom(from._impl_.camera_laneline_);
  _impl_.camera_obstacle_.MergeFrom(from._impl_.camera_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_topic(from._internal_source_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_camera_calibrator()->::apollo::perception::camera::CameraCalibrator::MergeFrom(from._internal_camera_calibrator());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDebug::CopyFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDebug::IsInitialized() const {
  return true;
}

void CameraDebug::InternalSwap(CameraDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.camera_laneline_.InternalSwap(&other->_impl_.camera_laneline_);
  _impl_.camera_obstacle_.InternalSwap(&other->_impl_.camera_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_topic_, lhs_arena,
      &other->_impl_.source_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDebug, _impl_.error_code_)
      + sizeof(CameraDebug::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CameraDebug, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::LaneLineCubicCurve*
Arena::CreateMaybeMessage< ::apollo::perception::camera::LaneLineCubicCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::LaneLineCubicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::EndPoints*
Arena::CreateMaybeMessage< ::apollo::perception::camera::EndPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::EndPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraLaneLine*
Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraLaneLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraLaneLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraCalibrator*
Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraCalibrator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraCalibrator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraObstacle*
Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraDebug*
Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
