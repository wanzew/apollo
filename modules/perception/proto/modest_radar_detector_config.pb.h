// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/modest_radar_detector_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace modest_radar_detector_config {
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::modest_radar_detector_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::modest_radar_detector_config::ModelConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace modest_radar_detector_config {

// ===================================================================

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.modest_radar_detector_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.modest_radar_detector_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kMaxThetaFieldNumber = 4,
    kUseHadMapFieldNumber = 3,
    kUseFpFilterFieldNumber = 6,
    kDelayFramesFieldNumber = 5,
    kProbexistVehicleFieldNumber = 7,
    kProbexistPedestrianFieldNumber = 8,
    kProbexistBicycleFieldNumber = 9,
    kProbexistUnknownFieldNumber = 10,
    kLoVelRmsVehicleFieldNumber = 11,
    kLaVelRmsVehicleFieldNumber = 12,
    kLoDistRmsVehicleFieldNumber = 13,
    kLaDistRmsVehicleFieldNumber = 14,
    kLoVelRmsPedestrianFieldNumber = 15,
    kLaVelRmsPedestrianFieldNumber = 16,
    kLoDistRmsPedestrianFieldNumber = 17,
    kLaDistRmsPedestrianFieldNumber = 18,
    kLoVelRmsBicycleFieldNumber = 19,
    kLaVelRmsBicycleFieldNumber = 20,
    kLoDistRmsBicycleFieldNumber = 21,
    kLaDistRmsBicycleFieldNumber = 22,
    kLoVelRmsUnknownFieldNumber = 23,
    kLaVelRmsUnknownFieldNumber = 24,
    kLoDistRmsUnknownFieldNumber = 25,
    kLaDistRmsUnknownFieldNumber = 26,
  };
  // optional string name = 1 [default = "ModestRadarDetector"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional double max_theta = 4 [default = 30];
  bool has_max_theta() const;
  private:
  bool _internal_has_max_theta() const;
  public:
  void clear_max_theta();
  double max_theta() const;
  void set_max_theta(double value);
  private:
  double _internal_max_theta() const;
  void _internal_set_max_theta(double value);
  public:

  // optional bool use_had_map = 3 [default = true];
  bool has_use_had_map() const;
  private:
  bool _internal_has_use_had_map() const;
  public:
  void clear_use_had_map();
  bool use_had_map() const;
  void set_use_had_map(bool value);
  private:
  bool _internal_use_had_map() const;
  void _internal_set_use_had_map(bool value);
  public:

  // optional bool use_fp_filter = 6 [default = true];
  bool has_use_fp_filter() const;
  private:
  bool _internal_has_use_fp_filter() const;
  public:
  void clear_use_fp_filter();
  bool use_fp_filter() const;
  void set_use_fp_filter(bool value);
  private:
  bool _internal_use_fp_filter() const;
  void _internal_set_use_fp_filter(bool value);
  public:

  // optional int32 delay_frames = 5 [default = 4];
  bool has_delay_frames() const;
  private:
  bool _internal_has_delay_frames() const;
  public:
  void clear_delay_frames();
  int32_t delay_frames() const;
  void set_delay_frames(int32_t value);
  private:
  int32_t _internal_delay_frames() const;
  void _internal_set_delay_frames(int32_t value);
  public:

  // optional double probexist_vehicle = 7 [default = 0.9];
  bool has_probexist_vehicle() const;
  private:
  bool _internal_has_probexist_vehicle() const;
  public:
  void clear_probexist_vehicle();
  double probexist_vehicle() const;
  void set_probexist_vehicle(double value);
  private:
  double _internal_probexist_vehicle() const;
  void _internal_set_probexist_vehicle(double value);
  public:

  // optional double probexist_pedestrian = 8 [default = 0.25];
  bool has_probexist_pedestrian() const;
  private:
  bool _internal_has_probexist_pedestrian() const;
  public:
  void clear_probexist_pedestrian();
  double probexist_pedestrian() const;
  void set_probexist_pedestrian(double value);
  private:
  double _internal_probexist_pedestrian() const;
  void _internal_set_probexist_pedestrian(double value);
  public:

  // optional double probexist_bicycle = 9 [default = 0.25];
  bool has_probexist_bicycle() const;
  private:
  bool _internal_has_probexist_bicycle() const;
  public:
  void clear_probexist_bicycle();
  double probexist_bicycle() const;
  void set_probexist_bicycle(double value);
  private:
  double _internal_probexist_bicycle() const;
  void _internal_set_probexist_bicycle(double value);
  public:

  // optional double probexist_unknown = 10 [default = 0.99];
  bool has_probexist_unknown() const;
  private:
  bool _internal_has_probexist_unknown() const;
  public:
  void clear_probexist_unknown();
  double probexist_unknown() const;
  void set_probexist_unknown(double value);
  private:
  double _internal_probexist_unknown() const;
  void _internal_set_probexist_unknown(double value);
  public:

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  bool has_lo_vel_rms_vehicle() const;
  private:
  bool _internal_has_lo_vel_rms_vehicle() const;
  public:
  void clear_lo_vel_rms_vehicle();
  double lo_vel_rms_vehicle() const;
  void set_lo_vel_rms_vehicle(double value);
  private:
  double _internal_lo_vel_rms_vehicle() const;
  void _internal_set_lo_vel_rms_vehicle(double value);
  public:

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  bool has_la_vel_rms_vehicle() const;
  private:
  bool _internal_has_la_vel_rms_vehicle() const;
  public:
  void clear_la_vel_rms_vehicle();
  double la_vel_rms_vehicle() const;
  void set_la_vel_rms_vehicle(double value);
  private:
  double _internal_la_vel_rms_vehicle() const;
  void _internal_set_la_vel_rms_vehicle(double value);
  public:

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  bool has_lo_dist_rms_vehicle() const;
  private:
  bool _internal_has_lo_dist_rms_vehicle() const;
  public:
  void clear_lo_dist_rms_vehicle();
  double lo_dist_rms_vehicle() const;
  void set_lo_dist_rms_vehicle(double value);
  private:
  double _internal_lo_dist_rms_vehicle() const;
  void _internal_set_lo_dist_rms_vehicle(double value);
  public:

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  bool has_la_dist_rms_vehicle() const;
  private:
  bool _internal_has_la_dist_rms_vehicle() const;
  public:
  void clear_la_dist_rms_vehicle();
  double la_dist_rms_vehicle() const;
  void set_la_dist_rms_vehicle(double value);
  private:
  double _internal_la_dist_rms_vehicle() const;
  void _internal_set_la_dist_rms_vehicle(double value);
  public:

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  bool has_lo_vel_rms_pedestrian() const;
  private:
  bool _internal_has_lo_vel_rms_pedestrian() const;
  public:
  void clear_lo_vel_rms_pedestrian();
  double lo_vel_rms_pedestrian() const;
  void set_lo_vel_rms_pedestrian(double value);
  private:
  double _internal_lo_vel_rms_pedestrian() const;
  void _internal_set_lo_vel_rms_pedestrian(double value);
  public:

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  bool has_la_vel_rms_pedestrian() const;
  private:
  bool _internal_has_la_vel_rms_pedestrian() const;
  public:
  void clear_la_vel_rms_pedestrian();
  double la_vel_rms_pedestrian() const;
  void set_la_vel_rms_pedestrian(double value);
  private:
  double _internal_la_vel_rms_pedestrian() const;
  void _internal_set_la_vel_rms_pedestrian(double value);
  public:

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  bool has_lo_dist_rms_pedestrian() const;
  private:
  bool _internal_has_lo_dist_rms_pedestrian() const;
  public:
  void clear_lo_dist_rms_pedestrian();
  double lo_dist_rms_pedestrian() const;
  void set_lo_dist_rms_pedestrian(double value);
  private:
  double _internal_lo_dist_rms_pedestrian() const;
  void _internal_set_lo_dist_rms_pedestrian(double value);
  public:

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  bool has_la_dist_rms_pedestrian() const;
  private:
  bool _internal_has_la_dist_rms_pedestrian() const;
  public:
  void clear_la_dist_rms_pedestrian();
  double la_dist_rms_pedestrian() const;
  void set_la_dist_rms_pedestrian(double value);
  private:
  double _internal_la_dist_rms_pedestrian() const;
  void _internal_set_la_dist_rms_pedestrian(double value);
  public:

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  bool has_lo_vel_rms_bicycle() const;
  private:
  bool _internal_has_lo_vel_rms_bicycle() const;
  public:
  void clear_lo_vel_rms_bicycle();
  double lo_vel_rms_bicycle() const;
  void set_lo_vel_rms_bicycle(double value);
  private:
  double _internal_lo_vel_rms_bicycle() const;
  void _internal_set_lo_vel_rms_bicycle(double value);
  public:

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  bool has_la_vel_rms_bicycle() const;
  private:
  bool _internal_has_la_vel_rms_bicycle() const;
  public:
  void clear_la_vel_rms_bicycle();
  double la_vel_rms_bicycle() const;
  void set_la_vel_rms_bicycle(double value);
  private:
  double _internal_la_vel_rms_bicycle() const;
  void _internal_set_la_vel_rms_bicycle(double value);
  public:

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  bool has_lo_dist_rms_bicycle() const;
  private:
  bool _internal_has_lo_dist_rms_bicycle() const;
  public:
  void clear_lo_dist_rms_bicycle();
  double lo_dist_rms_bicycle() const;
  void set_lo_dist_rms_bicycle(double value);
  private:
  double _internal_lo_dist_rms_bicycle() const;
  void _internal_set_lo_dist_rms_bicycle(double value);
  public:

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  bool has_la_dist_rms_bicycle() const;
  private:
  bool _internal_has_la_dist_rms_bicycle() const;
  public:
  void clear_la_dist_rms_bicycle();
  double la_dist_rms_bicycle() const;
  void set_la_dist_rms_bicycle(double value);
  private:
  double _internal_la_dist_rms_bicycle() const;
  void _internal_set_la_dist_rms_bicycle(double value);
  public:

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  bool has_lo_vel_rms_unknown() const;
  private:
  bool _internal_has_lo_vel_rms_unknown() const;
  public:
  void clear_lo_vel_rms_unknown();
  double lo_vel_rms_unknown() const;
  void set_lo_vel_rms_unknown(double value);
  private:
  double _internal_lo_vel_rms_unknown() const;
  void _internal_set_lo_vel_rms_unknown(double value);
  public:

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  bool has_la_vel_rms_unknown() const;
  private:
  bool _internal_has_la_vel_rms_unknown() const;
  public:
  void clear_la_vel_rms_unknown();
  double la_vel_rms_unknown() const;
  void set_la_vel_rms_unknown(double value);
  private:
  double _internal_la_vel_rms_unknown() const;
  void _internal_set_la_vel_rms_unknown(double value);
  public:

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  bool has_lo_dist_rms_unknown() const;
  private:
  bool _internal_has_lo_dist_rms_unknown() const;
  public:
  void clear_lo_dist_rms_unknown();
  double lo_dist_rms_unknown() const;
  void set_lo_dist_rms_unknown(double value);
  private:
  double _internal_lo_dist_rms_unknown() const;
  void _internal_set_lo_dist_rms_unknown(double value);
  public:

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  bool has_la_dist_rms_unknown() const;
  private:
  bool _internal_has_la_dist_rms_unknown() const;
  public:
  void clear_la_dist_rms_unknown();
  double la_dist_rms_unknown() const;
  void set_la_dist_rms_unknown(double value);
  private:
  double _internal_la_dist_rms_unknown() const;
  void _internal_set_la_dist_rms_unknown(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.modest_radar_detector_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    double max_theta_;
    bool use_had_map_;
    bool use_fp_filter_;
    int32_t delay_frames_;
    double probexist_vehicle_;
    double probexist_pedestrian_;
    double probexist_bicycle_;
    double probexist_unknown_;
    double lo_vel_rms_vehicle_;
    double la_vel_rms_vehicle_;
    double lo_dist_rms_vehicle_;
    double la_dist_rms_vehicle_;
    double lo_vel_rms_pedestrian_;
    double la_vel_rms_pedestrian_;
    double lo_dist_rms_pedestrian_;
    double la_dist_rms_pedestrian_;
    double lo_vel_rms_bicycle_;
    double la_vel_rms_bicycle_;
    double lo_dist_rms_bicycle_;
    double la_dist_rms_bicycle_;
    double lo_vel_rms_unknown_;
    double la_vel_rms_unknown_;
    double lo_dist_rms_unknown_;
    double la_dist_rms_unknown_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConfigs

// optional string name = 1 [default = "ModestRadarDetector"];
inline bool ModelConfigs::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelConfigs::has_name() const {
  return _internal_has_name();
}
inline void ModelConfigs::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}
inline std::string* ModelConfigs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  return _s;
}
inline const std::string& ModelConfigs::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelConfigs::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool ModelConfigs::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelConfigs::has_version() const {
  return _internal_has_version();
}
inline void ModelConfigs::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}
inline std::string* ModelConfigs::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  return _s;
}
inline const std::string& ModelConfigs::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ModelConfigs::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::modest_radar_detector_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.modest_radar_detector_config.ModelConfigs.version)
}

// optional bool use_had_map = 3 [default = true];
inline bool ModelConfigs::_internal_has_use_had_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelConfigs::has_use_had_map() const {
  return _internal_has_use_had_map();
}
inline void ModelConfigs::clear_use_had_map() {
  _impl_.use_had_map_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ModelConfigs::_internal_use_had_map() const {
  return _impl_.use_had_map_;
}
inline bool ModelConfigs::use_had_map() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
  return _internal_use_had_map();
}
inline void ModelConfigs::_internal_set_use_had_map(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_had_map_ = value;
}
inline void ModelConfigs::set_use_had_map(bool value) {
  _internal_set_use_had_map(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
}

// optional double max_theta = 4 [default = 30];
inline bool ModelConfigs::_internal_has_max_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_theta() const {
  return _internal_has_max_theta();
}
inline void ModelConfigs::clear_max_theta() {
  _impl_.max_theta_ = 30;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ModelConfigs::_internal_max_theta() const {
  return _impl_.max_theta_;
}
inline double ModelConfigs::max_theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
  return _internal_max_theta();
}
inline void ModelConfigs::_internal_set_max_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_theta_ = value;
}
inline void ModelConfigs::set_max_theta(double value) {
  _internal_set_max_theta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.max_theta)
}

// optional int32 delay_frames = 5 [default = 4];
inline bool ModelConfigs::_internal_has_delay_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelConfigs::has_delay_frames() const {
  return _internal_has_delay_frames();
}
inline void ModelConfigs::clear_delay_frames() {
  _impl_.delay_frames_ = 4;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ModelConfigs::_internal_delay_frames() const {
  return _impl_.delay_frames_;
}
inline int32_t ModelConfigs::delay_frames() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
  return _internal_delay_frames();
}
inline void ModelConfigs::_internal_set_delay_frames(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.delay_frames_ = value;
}
inline void ModelConfigs::set_delay_frames(int32_t value) {
  _internal_set_delay_frames(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
}

// optional bool use_fp_filter = 6 [default = true];
inline bool ModelConfigs::_internal_has_use_fp_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelConfigs::has_use_fp_filter() const {
  return _internal_has_use_fp_filter();
}
inline void ModelConfigs::clear_use_fp_filter() {
  _impl_.use_fp_filter_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ModelConfigs::_internal_use_fp_filter() const {
  return _impl_.use_fp_filter_;
}
inline bool ModelConfigs::use_fp_filter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
  return _internal_use_fp_filter();
}
inline void ModelConfigs::_internal_set_use_fp_filter(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.use_fp_filter_ = value;
}
inline void ModelConfigs::set_use_fp_filter(bool value) {
  _internal_set_use_fp_filter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
}

// optional double probexist_vehicle = 7 [default = 0.9];
inline bool ModelConfigs::_internal_has_probexist_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelConfigs::has_probexist_vehicle() const {
  return _internal_has_probexist_vehicle();
}
inline void ModelConfigs::clear_probexist_vehicle() {
  _impl_.probexist_vehicle_ = 0.9;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ModelConfigs::_internal_probexist_vehicle() const {
  return _impl_.probexist_vehicle_;
}
inline double ModelConfigs::probexist_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
  return _internal_probexist_vehicle();
}
inline void ModelConfigs::_internal_set_probexist_vehicle(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.probexist_vehicle_ = value;
}
inline void ModelConfigs::set_probexist_vehicle(double value) {
  _internal_set_probexist_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
}

// optional double probexist_pedestrian = 8 [default = 0.25];
inline bool ModelConfigs::_internal_has_probexist_pedestrian() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelConfigs::has_probexist_pedestrian() const {
  return _internal_has_probexist_pedestrian();
}
inline void ModelConfigs::clear_probexist_pedestrian() {
  _impl_.probexist_pedestrian_ = 0.25;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ModelConfigs::_internal_probexist_pedestrian() const {
  return _impl_.probexist_pedestrian_;
}
inline double ModelConfigs::probexist_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
  return _internal_probexist_pedestrian();
}
inline void ModelConfigs::_internal_set_probexist_pedestrian(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.probexist_pedestrian_ = value;
}
inline void ModelConfigs::set_probexist_pedestrian(double value) {
  _internal_set_probexist_pedestrian(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
}

// optional double probexist_bicycle = 9 [default = 0.25];
inline bool ModelConfigs::_internal_has_probexist_bicycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelConfigs::has_probexist_bicycle() const {
  return _internal_has_probexist_bicycle();
}
inline void ModelConfigs::clear_probexist_bicycle() {
  _impl_.probexist_bicycle_ = 0.25;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ModelConfigs::_internal_probexist_bicycle() const {
  return _impl_.probexist_bicycle_;
}
inline double ModelConfigs::probexist_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
  return _internal_probexist_bicycle();
}
inline void ModelConfigs::_internal_set_probexist_bicycle(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.probexist_bicycle_ = value;
}
inline void ModelConfigs::set_probexist_bicycle(double value) {
  _internal_set_probexist_bicycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
}

// optional double probexist_unknown = 10 [default = 0.99];
inline bool ModelConfigs::_internal_has_probexist_unknown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelConfigs::has_probexist_unknown() const {
  return _internal_has_probexist_unknown();
}
inline void ModelConfigs::clear_probexist_unknown() {
  _impl_.probexist_unknown_ = 0.99;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ModelConfigs::_internal_probexist_unknown() const {
  return _impl_.probexist_unknown_;
}
inline double ModelConfigs::probexist_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
  return _internal_probexist_unknown();
}
inline void ModelConfigs::_internal_set_probexist_unknown(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.probexist_unknown_ = value;
}
inline void ModelConfigs::set_probexist_unknown(double value) {
  _internal_set_probexist_unknown(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
}

// optional double lo_vel_rms_vehicle = 11 [default = 0.2];
inline bool ModelConfigs::_internal_has_lo_vel_rms_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_vel_rms_vehicle() const {
  return _internal_has_lo_vel_rms_vehicle();
}
inline void ModelConfigs::clear_lo_vel_rms_vehicle() {
  _impl_.lo_vel_rms_vehicle_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ModelConfigs::_internal_lo_vel_rms_vehicle() const {
  return _impl_.lo_vel_rms_vehicle_;
}
inline double ModelConfigs::lo_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
  return _internal_lo_vel_rms_vehicle();
}
inline void ModelConfigs::_internal_set_lo_vel_rms_vehicle(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lo_vel_rms_vehicle_ = value;
}
inline void ModelConfigs::set_lo_vel_rms_vehicle(double value) {
  _internal_set_lo_vel_rms_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
}

// optional double la_vel_rms_vehicle = 12 [default = 0.3];
inline bool ModelConfigs::_internal_has_la_vel_rms_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_vel_rms_vehicle() const {
  return _internal_has_la_vel_rms_vehicle();
}
inline void ModelConfigs::clear_la_vel_rms_vehicle() {
  _impl_.la_vel_rms_vehicle_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ModelConfigs::_internal_la_vel_rms_vehicle() const {
  return _impl_.la_vel_rms_vehicle_;
}
inline double ModelConfigs::la_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
  return _internal_la_vel_rms_vehicle();
}
inline void ModelConfigs::_internal_set_la_vel_rms_vehicle(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.la_vel_rms_vehicle_ = value;
}
inline void ModelConfigs::set_la_vel_rms_vehicle(double value) {
  _internal_set_la_vel_rms_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
}

// optional double lo_dist_rms_vehicle = 13 [default = 0.15];
inline bool ModelConfigs::_internal_has_lo_dist_rms_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_dist_rms_vehicle() const {
  return _internal_has_lo_dist_rms_vehicle();
}
inline void ModelConfigs::clear_lo_dist_rms_vehicle() {
  _impl_.lo_dist_rms_vehicle_ = 0.15;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ModelConfigs::_internal_lo_dist_rms_vehicle() const {
  return _impl_.lo_dist_rms_vehicle_;
}
inline double ModelConfigs::lo_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
  return _internal_lo_dist_rms_vehicle();
}
inline void ModelConfigs::_internal_set_lo_dist_rms_vehicle(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.lo_dist_rms_vehicle_ = value;
}
inline void ModelConfigs::set_lo_dist_rms_vehicle(double value) {
  _internal_set_lo_dist_rms_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
}

// optional double la_dist_rms_vehicle = 14 [default = 0.2];
inline bool ModelConfigs::_internal_has_la_dist_rms_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_dist_rms_vehicle() const {
  return _internal_has_la_dist_rms_vehicle();
}
inline void ModelConfigs::clear_la_dist_rms_vehicle() {
  _impl_.la_dist_rms_vehicle_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double ModelConfigs::_internal_la_dist_rms_vehicle() const {
  return _impl_.la_dist_rms_vehicle_;
}
inline double ModelConfigs::la_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
  return _internal_la_dist_rms_vehicle();
}
inline void ModelConfigs::_internal_set_la_dist_rms_vehicle(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.la_dist_rms_vehicle_ = value;
}
inline void ModelConfigs::set_la_dist_rms_vehicle(double value) {
  _internal_set_la_dist_rms_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
}

// optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
inline bool ModelConfigs::_internal_has_lo_vel_rms_pedestrian() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_vel_rms_pedestrian() const {
  return _internal_has_lo_vel_rms_pedestrian();
}
inline void ModelConfigs::clear_lo_vel_rms_pedestrian() {
  _impl_.lo_vel_rms_pedestrian_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double ModelConfigs::_internal_lo_vel_rms_pedestrian() const {
  return _impl_.lo_vel_rms_pedestrian_;
}
inline double ModelConfigs::lo_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
  return _internal_lo_vel_rms_pedestrian();
}
inline void ModelConfigs::_internal_set_lo_vel_rms_pedestrian(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.lo_vel_rms_pedestrian_ = value;
}
inline void ModelConfigs::set_lo_vel_rms_pedestrian(double value) {
  _internal_set_lo_vel_rms_pedestrian(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
}

// optional double la_vel_rms_pedestrian = 16 [default = 0.8];
inline bool ModelConfigs::_internal_has_la_vel_rms_pedestrian() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_vel_rms_pedestrian() const {
  return _internal_has_la_vel_rms_pedestrian();
}
inline void ModelConfigs::clear_la_vel_rms_pedestrian() {
  _impl_.la_vel_rms_pedestrian_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double ModelConfigs::_internal_la_vel_rms_pedestrian() const {
  return _impl_.la_vel_rms_pedestrian_;
}
inline double ModelConfigs::la_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
  return _internal_la_vel_rms_pedestrian();
}
inline void ModelConfigs::_internal_set_la_vel_rms_pedestrian(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.la_vel_rms_pedestrian_ = value;
}
inline void ModelConfigs::set_la_vel_rms_pedestrian(double value) {
  _internal_set_la_vel_rms_pedestrian(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
}

// optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
inline bool ModelConfigs::_internal_has_lo_dist_rms_pedestrian() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_dist_rms_pedestrian() const {
  return _internal_has_lo_dist_rms_pedestrian();
}
inline void ModelConfigs::clear_lo_dist_rms_pedestrian() {
  _impl_.lo_dist_rms_pedestrian_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double ModelConfigs::_internal_lo_dist_rms_pedestrian() const {
  return _impl_.lo_dist_rms_pedestrian_;
}
inline double ModelConfigs::lo_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
  return _internal_lo_dist_rms_pedestrian();
}
inline void ModelConfigs::_internal_set_lo_dist_rms_pedestrian(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.lo_dist_rms_pedestrian_ = value;
}
inline void ModelConfigs::set_lo_dist_rms_pedestrian(double value) {
  _internal_set_lo_dist_rms_pedestrian(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
}

// optional double la_dist_rms_pedestrian = 18 [default = 0.8];
inline bool ModelConfigs::_internal_has_la_dist_rms_pedestrian() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_dist_rms_pedestrian() const {
  return _internal_has_la_dist_rms_pedestrian();
}
inline void ModelConfigs::clear_la_dist_rms_pedestrian() {
  _impl_.la_dist_rms_pedestrian_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double ModelConfigs::_internal_la_dist_rms_pedestrian() const {
  return _impl_.la_dist_rms_pedestrian_;
}
inline double ModelConfigs::la_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
  return _internal_la_dist_rms_pedestrian();
}
inline void ModelConfigs::_internal_set_la_dist_rms_pedestrian(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.la_dist_rms_pedestrian_ = value;
}
inline void ModelConfigs::set_la_dist_rms_pedestrian(double value) {
  _internal_set_la_dist_rms_pedestrian(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
}

// optional double lo_vel_rms_bicycle = 19 [default = 0.5];
inline bool ModelConfigs::_internal_has_lo_vel_rms_bicycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_vel_rms_bicycle() const {
  return _internal_has_lo_vel_rms_bicycle();
}
inline void ModelConfigs::clear_lo_vel_rms_bicycle() {
  _impl_.lo_vel_rms_bicycle_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double ModelConfigs::_internal_lo_vel_rms_bicycle() const {
  return _impl_.lo_vel_rms_bicycle_;
}
inline double ModelConfigs::lo_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
  return _internal_lo_vel_rms_bicycle();
}
inline void ModelConfigs::_internal_set_lo_vel_rms_bicycle(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.lo_vel_rms_bicycle_ = value;
}
inline void ModelConfigs::set_lo_vel_rms_bicycle(double value) {
  _internal_set_lo_vel_rms_bicycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
}

// optional double la_vel_rms_bicycle = 20 [default = 0.8];
inline bool ModelConfigs::_internal_has_la_vel_rms_bicycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_vel_rms_bicycle() const {
  return _internal_has_la_vel_rms_bicycle();
}
inline void ModelConfigs::clear_la_vel_rms_bicycle() {
  _impl_.la_vel_rms_bicycle_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double ModelConfigs::_internal_la_vel_rms_bicycle() const {
  return _impl_.la_vel_rms_bicycle_;
}
inline double ModelConfigs::la_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
  return _internal_la_vel_rms_bicycle();
}
inline void ModelConfigs::_internal_set_la_vel_rms_bicycle(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.la_vel_rms_bicycle_ = value;
}
inline void ModelConfigs::set_la_vel_rms_bicycle(double value) {
  _internal_set_la_vel_rms_bicycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
}

// optional double lo_dist_rms_bicycle = 21 [default = 0.5];
inline bool ModelConfigs::_internal_has_lo_dist_rms_bicycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_dist_rms_bicycle() const {
  return _internal_has_lo_dist_rms_bicycle();
}
inline void ModelConfigs::clear_lo_dist_rms_bicycle() {
  _impl_.lo_dist_rms_bicycle_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double ModelConfigs::_internal_lo_dist_rms_bicycle() const {
  return _impl_.lo_dist_rms_bicycle_;
}
inline double ModelConfigs::lo_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
  return _internal_lo_dist_rms_bicycle();
}
inline void ModelConfigs::_internal_set_lo_dist_rms_bicycle(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.lo_dist_rms_bicycle_ = value;
}
inline void ModelConfigs::set_lo_dist_rms_bicycle(double value) {
  _internal_set_lo_dist_rms_bicycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
}

// optional double la_dist_rms_bicycle = 22 [default = 0.8];
inline bool ModelConfigs::_internal_has_la_dist_rms_bicycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_dist_rms_bicycle() const {
  return _internal_has_la_dist_rms_bicycle();
}
inline void ModelConfigs::clear_la_dist_rms_bicycle() {
  _impl_.la_dist_rms_bicycle_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double ModelConfigs::_internal_la_dist_rms_bicycle() const {
  return _impl_.la_dist_rms_bicycle_;
}
inline double ModelConfigs::la_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
  return _internal_la_dist_rms_bicycle();
}
inline void ModelConfigs::_internal_set_la_dist_rms_bicycle(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.la_dist_rms_bicycle_ = value;
}
inline void ModelConfigs::set_la_dist_rms_bicycle(double value) {
  _internal_set_la_dist_rms_bicycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
}

// optional double lo_vel_rms_unknown = 23 [default = 0.2];
inline bool ModelConfigs::_internal_has_lo_vel_rms_unknown() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_vel_rms_unknown() const {
  return _internal_has_lo_vel_rms_unknown();
}
inline void ModelConfigs::clear_lo_vel_rms_unknown() {
  _impl_.lo_vel_rms_unknown_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double ModelConfigs::_internal_lo_vel_rms_unknown() const {
  return _impl_.lo_vel_rms_unknown_;
}
inline double ModelConfigs::lo_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
  return _internal_lo_vel_rms_unknown();
}
inline void ModelConfigs::_internal_set_lo_vel_rms_unknown(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.lo_vel_rms_unknown_ = value;
}
inline void ModelConfigs::set_lo_vel_rms_unknown(double value) {
  _internal_set_lo_vel_rms_unknown(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
}

// optional double la_vel_rms_unknown = 24 [default = 0.3];
inline bool ModelConfigs::_internal_has_la_vel_rms_unknown() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_vel_rms_unknown() const {
  return _internal_has_la_vel_rms_unknown();
}
inline void ModelConfigs::clear_la_vel_rms_unknown() {
  _impl_.la_vel_rms_unknown_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double ModelConfigs::_internal_la_vel_rms_unknown() const {
  return _impl_.la_vel_rms_unknown_;
}
inline double ModelConfigs::la_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
  return _internal_la_vel_rms_unknown();
}
inline void ModelConfigs::_internal_set_la_vel_rms_unknown(double value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.la_vel_rms_unknown_ = value;
}
inline void ModelConfigs::set_la_vel_rms_unknown(double value) {
  _internal_set_la_vel_rms_unknown(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
}

// optional double lo_dist_rms_unknown = 25 [default = 0.2];
inline bool ModelConfigs::_internal_has_lo_dist_rms_unknown() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_lo_dist_rms_unknown() const {
  return _internal_has_lo_dist_rms_unknown();
}
inline void ModelConfigs::clear_lo_dist_rms_unknown() {
  _impl_.lo_dist_rms_unknown_ = 0.2;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double ModelConfigs::_internal_lo_dist_rms_unknown() const {
  return _impl_.lo_dist_rms_unknown_;
}
inline double ModelConfigs::lo_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
  return _internal_lo_dist_rms_unknown();
}
inline void ModelConfigs::_internal_set_lo_dist_rms_unknown(double value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.lo_dist_rms_unknown_ = value;
}
inline void ModelConfigs::set_lo_dist_rms_unknown(double value) {
  _internal_set_lo_dist_rms_unknown(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
}

// optional double la_dist_rms_unknown = 26 [default = 0.3];
inline bool ModelConfigs::_internal_has_la_dist_rms_unknown() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ModelConfigs::has_la_dist_rms_unknown() const {
  return _internal_has_la_dist_rms_unknown();
}
inline void ModelConfigs::clear_la_dist_rms_unknown() {
  _impl_.la_dist_rms_unknown_ = 0.3;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double ModelConfigs::_internal_la_dist_rms_unknown() const {
  return _impl_.la_dist_rms_unknown_;
}
inline double ModelConfigs::la_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
  return _internal_la_dist_rms_unknown();
}
inline void ModelConfigs::_internal_set_la_dist_rms_unknown(double value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.la_dist_rms_unknown_ = value;
}
inline void ModelConfigs::set_la_dist_rms_unknown(double value) {
  _internal_set_la_dist_rms_unknown(value);
  // @@protoc_insertion_point(field_set:apollo.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto
