// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/rt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2frt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2frt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2frt_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2frt_2eproto;
namespace apollo {
namespace perception {
namespace inference {
class AccuracyParameter;
struct AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class AnchorBox;
struct AnchorBoxDefaultTypeInternal;
extern AnchorBoxDefaultTypeInternal _AnchorBox_default_instance_;
class AnnotatedDataParameter;
struct AnnotatedDataParameterDefaultTypeInternal;
extern AnnotatedDataParameterDefaultTypeInternal _AnnotatedDataParameter_default_instance_;
class AnnotatedDatum;
struct AnnotatedDatumDefaultTypeInternal;
extern AnnotatedDatumDefaultTypeInternal _AnnotatedDatum_default_instance_;
class Annotation;
struct AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class AnnotationGroup;
struct AnnotationGroupDefaultTypeInternal;
extern AnnotationGroupDefaultTypeInternal _AnnotationGroup_default_instance_;
class ArgMaxParameter;
struct ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BBox3D;
struct BBox3DDefaultTypeInternal;
extern BBox3DDefaultTypeInternal _BBox3D_default_instance_;
class BBoxRegParameter;
struct BBoxRegParameterDefaultTypeInternal;
extern BBoxRegParameterDefaultTypeInternal _BBoxRegParameter_default_instance_;
class BatchNormParameter;
struct BatchNormParameterDefaultTypeInternal;
extern BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
class BatchSampler;
struct BatchSamplerDefaultTypeInternal;
extern BatchSamplerDefaultTypeInternal _BatchSampler_default_instance_;
class BiasParameter;
struct BiasParameterDefaultTypeInternal;
extern BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
class BlobProto;
struct BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobShape;
struct BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class ConcatParameter;
struct ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ContrastiveLossParameter;
struct ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
struct ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class CropParameter;
struct CropParameterDefaultTypeInternal;
extern CropParameterDefaultTypeInternal _CropParameter_default_instance_;
class DFMBPSROIAlignParameter;
struct DFMBPSROIAlignParameterDefaultTypeInternal;
extern DFMBPSROIAlignParameterDefaultTypeInternal _DFMBPSROIAlignParameter_default_instance_;
class DataParameter;
struct DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class DatasetParameter;
struct DatasetParameterDefaultTypeInternal;
extern DatasetParameterDefaultTypeInternal _DatasetParameter_default_instance_;
class Datum;
struct DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DetectionEvaluateParameter;
struct DetectionEvaluateParameterDefaultTypeInternal;
extern DetectionEvaluateParameterDefaultTypeInternal _DetectionEvaluateParameter_default_instance_;
class DetectionOutputParameter;
struct DetectionOutputParameterDefaultTypeInternal;
extern DetectionOutputParameterDefaultTypeInternal _DetectionOutputParameter_default_instance_;
class DetectionOutputSSDParameter;
struct DetectionOutputSSDParameterDefaultTypeInternal;
extern DetectionOutputSSDParameterDefaultTypeInternal _DetectionOutputSSDParameter_default_instance_;
class DimensionStatistics;
struct DimensionStatisticsDefaultTypeInternal;
extern DimensionStatisticsDefaultTypeInternal _DimensionStatistics_default_instance_;
class DistortionParameter;
struct DistortionParameterDefaultTypeInternal;
extern DistortionParameterDefaultTypeInternal _DistortionParameter_default_instance_;
class DropoutParameter;
struct DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
struct DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class ELUParameter;
struct ELUParameterDefaultTypeInternal;
extern ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
class EltwiseParameter;
struct EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EmbedParameter;
struct EmbedParameterDefaultTypeInternal;
extern EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
class EmitConstraint;
struct EmitConstraintDefaultTypeInternal;
extern EmitConstraintDefaultTypeInternal _EmitConstraint_default_instance_;
class ExpParameter;
struct ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class ExpansionParameter;
struct ExpansionParameterDefaultTypeInternal;
extern ExpansionParameterDefaultTypeInternal _ExpansionParameter_default_instance_;
class FillerParameter;
struct FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FlattenParameter;
struct FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class GenAnchorParameter;
struct GenAnchorParameterDefaultTypeInternal;
extern GenAnchorParameterDefaultTypeInternal _GenAnchorParameter_default_instance_;
class HDF5DataParameter;
struct HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
struct HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
struct HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class ImageDataParameter;
struct ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfogainLossParameter;
struct InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
struct InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InputParameter;
struct InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class LRNParameter;
struct LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LabelMap;
struct LabelMapDefaultTypeInternal;
extern LabelMapDefaultTypeInternal _LabelMap_default_instance_;
class LabelMapItem;
struct LabelMapItemDefaultTypeInternal;
extern LabelMapItemDefaultTypeInternal _LabelMapItem_default_instance_;
class LayerParameter;
struct LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LogParameter;
struct LogParameterDefaultTypeInternal;
extern LogParameterDefaultTypeInternal _LogParameter_default_instance_;
class LossParameter;
struct LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MVNParameter;
struct MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class MemoryDataParameter;
struct MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class MultiBoxLossParameter;
struct MultiBoxLossParameterDefaultTypeInternal;
extern MultiBoxLossParameterDefaultTypeInternal _MultiBoxLossParameter_default_instance_;
class NMSSSDParameter;
struct NMSSSDParameterDefaultTypeInternal;
extern NMSSSDParameterDefaultTypeInternal _NMSSSDParameter_default_instance_;
class NetParameter;
struct NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
struct NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
struct NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class NoiseParameter;
struct NoiseParameterDefaultTypeInternal;
extern NoiseParameterDefaultTypeInternal _NoiseParameter_default_instance_;
class NonMaximumSuppressionParameter;
struct NonMaximumSuppressionParameterDefaultTypeInternal;
extern NonMaximumSuppressionParameterDefaultTypeInternal _NonMaximumSuppressionParameter_default_instance_;
class NormalizeParameter;
struct NormalizeParameterDefaultTypeInternal;
extern NormalizeParameterDefaultTypeInternal _NormalizeParameter_default_instance_;
class NormalizedBBox;
struct NormalizedBBoxDefaultTypeInternal;
extern NormalizedBBoxDefaultTypeInternal _NormalizedBBox_default_instance_;
class PReLUParameter;
struct PReLUParameterDefaultTypeInternal;
extern PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
class PaddingParameter;
struct PaddingParameterDefaultTypeInternal;
extern PaddingParameterDefaultTypeInternal _PaddingParameter_default_instance_;
class ParamSpec;
struct ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class ParameterParameter;
struct ParameterParameterDefaultTypeInternal;
extern ParameterParameterDefaultTypeInternal _ParameterParameter_default_instance_;
class PermuteParameter;
struct PermuteParameterDefaultTypeInternal;
extern PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
class PoolingParameter;
struct PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
struct PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class PriorBoxParameter;
struct PriorBoxParameterDefaultTypeInternal;
extern PriorBoxParameterDefaultTypeInternal _PriorBoxParameter_default_instance_;
class PythonParameter;
struct PythonParameterDefaultTypeInternal;
extern PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
class ROIPoolingParameter;
struct ROIPoolingParameterDefaultTypeInternal;
extern ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
class ReLUParameter;
struct ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class RecurrentParameter;
struct RecurrentParameterDefaultTypeInternal;
extern RecurrentParameterDefaultTypeInternal _RecurrentParameter_default_instance_;
class ReductionParameter;
struct ReductionParameterDefaultTypeInternal;
extern ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
class RegionOutputParameter;
struct RegionOutputParameterDefaultTypeInternal;
extern RegionOutputParameterDefaultTypeInternal _RegionOutputParameter_default_instance_;
class RegionParameter;
struct RegionParameterDefaultTypeInternal;
extern RegionParameterDefaultTypeInternal _RegionParameter_default_instance_;
class RegionProposalParameter;
struct RegionProposalParameterDefaultTypeInternal;
extern RegionProposalParameterDefaultTypeInternal _RegionProposalParameter_default_instance_;
class ReorgParameter;
struct ReorgParameterDefaultTypeInternal;
extern ReorgParameterDefaultTypeInternal _ReorgParameter_default_instance_;
class RepeatedList;
struct RepeatedListDefaultTypeInternal;
extern RepeatedListDefaultTypeInternal _RepeatedList_default_instance_;
class ReshapeParameter;
struct ReshapeParameterDefaultTypeInternal;
extern ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
class ResizeParameter;
struct ResizeParameterDefaultTypeInternal;
extern ResizeParameterDefaultTypeInternal _ResizeParameter_default_instance_;
class SPPParameter;
struct SPPParameterDefaultTypeInternal;
extern SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
class SaltPepperParameter;
struct SaltPepperParameterDefaultTypeInternal;
extern SaltPepperParameterDefaultTypeInternal _SaltPepperParameter_default_instance_;
class SampleConstraint;
struct SampleConstraintDefaultTypeInternal;
extern SampleConstraintDefaultTypeInternal _SampleConstraint_default_instance_;
class Sampler;
struct SamplerDefaultTypeInternal;
extern SamplerDefaultTypeInternal _Sampler_default_instance_;
class SaveOutputParameter;
struct SaveOutputParameterDefaultTypeInternal;
extern SaveOutputParameterDefaultTypeInternal _SaveOutputParameter_default_instance_;
class ScaleParameter;
struct ScaleParameterDefaultTypeInternal;
extern ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
class SigmoidParameter;
struct SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class SliceParameter;
struct SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SoftmaxParameter;
struct SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class TanHParameter;
struct TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
struct ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TileParameter;
struct TileParameterDefaultTypeInternal;
extern TileParameterDefaultTypeInternal _TileParameter_default_instance_;
class TransformationParameter;
struct TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class V0LayerParameter;
struct V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class V1LayerParameter;
struct V1LayerParameterDefaultTypeInternal;
extern V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
class VideoDataParameter;
struct VideoDataParameterDefaultTypeInternal;
extern VideoDataParameterDefaultTypeInternal _VideoDataParameter_default_instance_;
class WindowDataParameter;
struct WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
class YoloAnchorsParameter;
struct YoloAnchorsParameterDefaultTypeInternal;
extern YoloAnchorsParameterDefaultTypeInternal _YoloAnchorsParameter_default_instance_;
class YoloDumpParameter;
struct YoloDumpParameterDefaultTypeInternal;
extern YoloDumpParameterDefaultTypeInternal _YoloDumpParameter_default_instance_;
class YoloLossParameter;
struct YoloLossParameterDefaultTypeInternal;
extern YoloLossParameterDefaultTypeInternal _YoloLossParameter_default_instance_;
class YoloTargetParameter;
struct YoloTargetParameterDefaultTypeInternal;
extern YoloTargetParameterDefaultTypeInternal _YoloTargetParameter_default_instance_;
}  // namespace inference
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::inference::AccuracyParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::AccuracyParameter>(Arena*);
template<> ::apollo::perception::inference::AnchorBox* Arena::CreateMaybeMessage<::apollo::perception::inference::AnchorBox>(Arena*);
template<> ::apollo::perception::inference::AnnotatedDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::AnnotatedDataParameter>(Arena*);
template<> ::apollo::perception::inference::AnnotatedDatum* Arena::CreateMaybeMessage<::apollo::perception::inference::AnnotatedDatum>(Arena*);
template<> ::apollo::perception::inference::Annotation* Arena::CreateMaybeMessage<::apollo::perception::inference::Annotation>(Arena*);
template<> ::apollo::perception::inference::AnnotationGroup* Arena::CreateMaybeMessage<::apollo::perception::inference::AnnotationGroup>(Arena*);
template<> ::apollo::perception::inference::ArgMaxParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ArgMaxParameter>(Arena*);
template<> ::apollo::perception::inference::BBox3D* Arena::CreateMaybeMessage<::apollo::perception::inference::BBox3D>(Arena*);
template<> ::apollo::perception::inference::BBoxRegParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::BBoxRegParameter>(Arena*);
template<> ::apollo::perception::inference::BatchNormParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::BatchNormParameter>(Arena*);
template<> ::apollo::perception::inference::BatchSampler* Arena::CreateMaybeMessage<::apollo::perception::inference::BatchSampler>(Arena*);
template<> ::apollo::perception::inference::BiasParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::BiasParameter>(Arena*);
template<> ::apollo::perception::inference::BlobProto* Arena::CreateMaybeMessage<::apollo::perception::inference::BlobProto>(Arena*);
template<> ::apollo::perception::inference::BlobShape* Arena::CreateMaybeMessage<::apollo::perception::inference::BlobShape>(Arena*);
template<> ::apollo::perception::inference::ConcatParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ConcatParameter>(Arena*);
template<> ::apollo::perception::inference::ContrastiveLossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ContrastiveLossParameter>(Arena*);
template<> ::apollo::perception::inference::ConvolutionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ConvolutionParameter>(Arena*);
template<> ::apollo::perception::inference::CropParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::CropParameter>(Arena*);
template<> ::apollo::perception::inference::DFMBPSROIAlignParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DFMBPSROIAlignParameter>(Arena*);
template<> ::apollo::perception::inference::DataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DataParameter>(Arena*);
template<> ::apollo::perception::inference::DatasetParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DatasetParameter>(Arena*);
template<> ::apollo::perception::inference::Datum* Arena::CreateMaybeMessage<::apollo::perception::inference::Datum>(Arena*);
template<> ::apollo::perception::inference::DetectionEvaluateParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DetectionEvaluateParameter>(Arena*);
template<> ::apollo::perception::inference::DetectionOutputParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DetectionOutputParameter>(Arena*);
template<> ::apollo::perception::inference::DetectionOutputSSDParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DetectionOutputSSDParameter>(Arena*);
template<> ::apollo::perception::inference::DimensionStatistics* Arena::CreateMaybeMessage<::apollo::perception::inference::DimensionStatistics>(Arena*);
template<> ::apollo::perception::inference::DistortionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DistortionParameter>(Arena*);
template<> ::apollo::perception::inference::DropoutParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DropoutParameter>(Arena*);
template<> ::apollo::perception::inference::DummyDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::DummyDataParameter>(Arena*);
template<> ::apollo::perception::inference::ELUParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ELUParameter>(Arena*);
template<> ::apollo::perception::inference::EltwiseParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::EltwiseParameter>(Arena*);
template<> ::apollo::perception::inference::EmbedParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::EmbedParameter>(Arena*);
template<> ::apollo::perception::inference::EmitConstraint* Arena::CreateMaybeMessage<::apollo::perception::inference::EmitConstraint>(Arena*);
template<> ::apollo::perception::inference::ExpParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ExpParameter>(Arena*);
template<> ::apollo::perception::inference::ExpansionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ExpansionParameter>(Arena*);
template<> ::apollo::perception::inference::FillerParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(Arena*);
template<> ::apollo::perception::inference::FlattenParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::FlattenParameter>(Arena*);
template<> ::apollo::perception::inference::GenAnchorParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::GenAnchorParameter>(Arena*);
template<> ::apollo::perception::inference::HDF5DataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::HDF5DataParameter>(Arena*);
template<> ::apollo::perception::inference::HDF5OutputParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::HDF5OutputParameter>(Arena*);
template<> ::apollo::perception::inference::HingeLossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::HingeLossParameter>(Arena*);
template<> ::apollo::perception::inference::ImageDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ImageDataParameter>(Arena*);
template<> ::apollo::perception::inference::InfogainLossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::InfogainLossParameter>(Arena*);
template<> ::apollo::perception::inference::InnerProductParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::InnerProductParameter>(Arena*);
template<> ::apollo::perception::inference::InputParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::InputParameter>(Arena*);
template<> ::apollo::perception::inference::LRNParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::LRNParameter>(Arena*);
template<> ::apollo::perception::inference::LabelMap* Arena::CreateMaybeMessage<::apollo::perception::inference::LabelMap>(Arena*);
template<> ::apollo::perception::inference::LabelMapItem* Arena::CreateMaybeMessage<::apollo::perception::inference::LabelMapItem>(Arena*);
template<> ::apollo::perception::inference::LayerParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::LayerParameter>(Arena*);
template<> ::apollo::perception::inference::LogParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::LogParameter>(Arena*);
template<> ::apollo::perception::inference::LossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::LossParameter>(Arena*);
template<> ::apollo::perception::inference::MVNParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::MVNParameter>(Arena*);
template<> ::apollo::perception::inference::MemoryDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::MemoryDataParameter>(Arena*);
template<> ::apollo::perception::inference::MultiBoxLossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::MultiBoxLossParameter>(Arena*);
template<> ::apollo::perception::inference::NMSSSDParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::NMSSSDParameter>(Arena*);
template<> ::apollo::perception::inference::NetParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::NetParameter>(Arena*);
template<> ::apollo::perception::inference::NetState* Arena::CreateMaybeMessage<::apollo::perception::inference::NetState>(Arena*);
template<> ::apollo::perception::inference::NetStateRule* Arena::CreateMaybeMessage<::apollo::perception::inference::NetStateRule>(Arena*);
template<> ::apollo::perception::inference::NoiseParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::NoiseParameter>(Arena*);
template<> ::apollo::perception::inference::NonMaximumSuppressionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::NonMaximumSuppressionParameter>(Arena*);
template<> ::apollo::perception::inference::NormalizeParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::NormalizeParameter>(Arena*);
template<> ::apollo::perception::inference::NormalizedBBox* Arena::CreateMaybeMessage<::apollo::perception::inference::NormalizedBBox>(Arena*);
template<> ::apollo::perception::inference::PReLUParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PReLUParameter>(Arena*);
template<> ::apollo::perception::inference::PaddingParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PaddingParameter>(Arena*);
template<> ::apollo::perception::inference::ParamSpec* Arena::CreateMaybeMessage<::apollo::perception::inference::ParamSpec>(Arena*);
template<> ::apollo::perception::inference::ParameterParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ParameterParameter>(Arena*);
template<> ::apollo::perception::inference::PermuteParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PermuteParameter>(Arena*);
template<> ::apollo::perception::inference::PoolingParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PoolingParameter>(Arena*);
template<> ::apollo::perception::inference::PowerParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PowerParameter>(Arena*);
template<> ::apollo::perception::inference::PriorBoxParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PriorBoxParameter>(Arena*);
template<> ::apollo::perception::inference::PythonParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::PythonParameter>(Arena*);
template<> ::apollo::perception::inference::ROIPoolingParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ROIPoolingParameter>(Arena*);
template<> ::apollo::perception::inference::ReLUParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ReLUParameter>(Arena*);
template<> ::apollo::perception::inference::RecurrentParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::RecurrentParameter>(Arena*);
template<> ::apollo::perception::inference::ReductionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ReductionParameter>(Arena*);
template<> ::apollo::perception::inference::RegionOutputParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::RegionOutputParameter>(Arena*);
template<> ::apollo::perception::inference::RegionParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::RegionParameter>(Arena*);
template<> ::apollo::perception::inference::RegionProposalParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::RegionProposalParameter>(Arena*);
template<> ::apollo::perception::inference::ReorgParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ReorgParameter>(Arena*);
template<> ::apollo::perception::inference::RepeatedList* Arena::CreateMaybeMessage<::apollo::perception::inference::RepeatedList>(Arena*);
template<> ::apollo::perception::inference::ReshapeParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ReshapeParameter>(Arena*);
template<> ::apollo::perception::inference::ResizeParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ResizeParameter>(Arena*);
template<> ::apollo::perception::inference::SPPParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SPPParameter>(Arena*);
template<> ::apollo::perception::inference::SaltPepperParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SaltPepperParameter>(Arena*);
template<> ::apollo::perception::inference::SampleConstraint* Arena::CreateMaybeMessage<::apollo::perception::inference::SampleConstraint>(Arena*);
template<> ::apollo::perception::inference::Sampler* Arena::CreateMaybeMessage<::apollo::perception::inference::Sampler>(Arena*);
template<> ::apollo::perception::inference::SaveOutputParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SaveOutputParameter>(Arena*);
template<> ::apollo::perception::inference::ScaleParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ScaleParameter>(Arena*);
template<> ::apollo::perception::inference::SigmoidParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SigmoidParameter>(Arena*);
template<> ::apollo::perception::inference::SliceParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SliceParameter>(Arena*);
template<> ::apollo::perception::inference::SoftmaxParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::SoftmaxParameter>(Arena*);
template<> ::apollo::perception::inference::TanHParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::TanHParameter>(Arena*);
template<> ::apollo::perception::inference::ThresholdParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::ThresholdParameter>(Arena*);
template<> ::apollo::perception::inference::TileParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::TileParameter>(Arena*);
template<> ::apollo::perception::inference::TransformationParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::TransformationParameter>(Arena*);
template<> ::apollo::perception::inference::V0LayerParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::V0LayerParameter>(Arena*);
template<> ::apollo::perception::inference::V1LayerParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::V1LayerParameter>(Arena*);
template<> ::apollo::perception::inference::VideoDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::VideoDataParameter>(Arena*);
template<> ::apollo::perception::inference::WindowDataParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::WindowDataParameter>(Arena*);
template<> ::apollo::perception::inference::YoloAnchorsParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::YoloAnchorsParameter>(Arena*);
template<> ::apollo::perception::inference::YoloDumpParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::YoloDumpParameter>(Arena*);
template<> ::apollo::perception::inference::YoloLossParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::YoloLossParameter>(Arena*);
template<> ::apollo::perception::inference::YoloTargetParameter* Arena::CreateMaybeMessage<::apollo::perception::inference::YoloTargetParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace inference {

enum EmitConstraint_EmitType : int {
  EmitConstraint_EmitType_CENTER = 0,
  EmitConstraint_EmitType_MIN_OVERLAP = 1
};
bool EmitConstraint_EmitType_IsValid(int value);
constexpr EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MIN = EmitConstraint_EmitType_CENTER;
constexpr EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MAX = EmitConstraint_EmitType_MIN_OVERLAP;
constexpr int EmitConstraint_EmitType_EmitType_ARRAYSIZE = EmitConstraint_EmitType_EmitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmitConstraint_EmitType_descriptor();
template<typename T>
inline const std::string& EmitConstraint_EmitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmitConstraint_EmitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmitConstraint_EmitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmitConstraint_EmitType_descriptor(), enum_t_value);
}
inline bool EmitConstraint_EmitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EmitConstraint_EmitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmitConstraint_EmitType>(
    EmitConstraint_EmitType_descriptor(), name, value);
}
enum AnnotatedDatum_AnnotationType : int {
  AnnotatedDatum_AnnotationType_BBOX = 0,
  AnnotatedDatum_AnnotationType_BBOX3D = 1,
  AnnotatedDatum_AnnotationType_BBOX3DFR = 2
};
bool AnnotatedDatum_AnnotationType_IsValid(int value);
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MIN = AnnotatedDatum_AnnotationType_BBOX;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MAX = AnnotatedDatum_AnnotationType_BBOX3DFR;
constexpr int AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE = AnnotatedDatum_AnnotationType_AnnotationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor();
template<typename T>
inline const std::string& AnnotatedDatum_AnnotationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnnotatedDatum_AnnotationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnnotatedDatum_AnnotationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnnotatedDatum_AnnotationType_descriptor(), enum_t_value);
}
inline bool AnnotatedDatum_AnnotationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnnotatedDatum_AnnotationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnnotatedDatum_AnnotationType>(
    AnnotatedDatum_AnnotationType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm : int {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
constexpr int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
template<typename T>
inline const std::string& FillerParameter_VarianceNorm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FillerParameter_VarianceNorm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FillerParameter_VarianceNorm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), enum_t_value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FillerParameter_VarianceNorm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode : int {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
constexpr int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
template<typename T>
inline const std::string& ParamSpec_DimCheckMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamSpec_DimCheckMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamSpec_DimCheckMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), enum_t_value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParamSpec_DimCheckMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum ResizeParameter_Resize_mode : int {
  ResizeParameter_Resize_mode_WARP = 1,
  ResizeParameter_Resize_mode_FIT_SMALL_SIZE = 2,
  ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD = 3
};
bool ResizeParameter_Resize_mode_IsValid(int value);
constexpr ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MIN = ResizeParameter_Resize_mode_WARP;
constexpr ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MAX = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
constexpr int ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE = ResizeParameter_Resize_mode_Resize_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Resize_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Resize_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Resize_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Resize_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Resize_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Resize_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResizeParameter_Resize_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Resize_mode>(
    ResizeParameter_Resize_mode_descriptor(), name, value);
}
enum ResizeParameter_Pad_mode : int {
  ResizeParameter_Pad_mode_CONSTANT = 1,
  ResizeParameter_Pad_mode_MIRRORED = 2,
  ResizeParameter_Pad_mode_REPEAT_NEAREST = 3
};
bool ResizeParameter_Pad_mode_IsValid(int value);
constexpr ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MIN = ResizeParameter_Pad_mode_CONSTANT;
constexpr ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MAX = ResizeParameter_Pad_mode_REPEAT_NEAREST;
constexpr int ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE = ResizeParameter_Pad_mode_Pad_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Pad_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Pad_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Pad_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Pad_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Pad_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Pad_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResizeParameter_Pad_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Pad_mode>(
    ResizeParameter_Pad_mode_descriptor(), name, value);
}
enum ResizeParameter_Interp_mode : int {
  ResizeParameter_Interp_mode_LINEAR = 1,
  ResizeParameter_Interp_mode_AREA = 2,
  ResizeParameter_Interp_mode_NEAREST = 3,
  ResizeParameter_Interp_mode_CUBIC = 4,
  ResizeParameter_Interp_mode_LANCZOS4 = 5
};
bool ResizeParameter_Interp_mode_IsValid(int value);
constexpr ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MIN = ResizeParameter_Interp_mode_LINEAR;
constexpr ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MAX = ResizeParameter_Interp_mode_LANCZOS4;
constexpr int ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE = ResizeParameter_Interp_mode_Interp_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Interp_mode_descriptor();
template<typename T>
inline const std::string& ResizeParameter_Interp_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeParameter_Interp_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeParameter_Interp_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeParameter_Interp_mode_descriptor(), enum_t_value);
}
inline bool ResizeParameter_Interp_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResizeParameter_Interp_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeParameter_Interp_mode>(
    ResizeParameter_Interp_mode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode : int {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
constexpr int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
template<typename T>
inline const std::string& LossParameter_NormalizationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LossParameter_NormalizationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LossParameter_NormalizationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), enum_t_value);
}
inline bool LossParameter_NormalizationMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LossParameter_NormalizationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine : int {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
constexpr int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
template<typename T>
inline const std::string& ConvolutionParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConvolutionParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConvolutionParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), enum_t_value);
}
inline bool ConvolutionParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConvolutionParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB : int {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
constexpr DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
constexpr DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
constexpr int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataParameter_DB_descriptor();
template<typename T>
inline const std::string& DataParameter_DB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataParameter_DB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataParameter_DB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataParameter_DB_descriptor(), enum_t_value);
}
inline bool DataParameter_DB_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataParameter_DB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp : int {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
constexpr int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
template<typename T>
inline const std::string& EltwiseParameter_EltwiseOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EltwiseParameter_EltwiseOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EltwiseParameter_EltwiseOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), enum_t_value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EltwiseParameter_EltwiseOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm : int {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
constexpr int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HingeLossParameter_Norm_descriptor();
template<typename T>
inline const std::string& HingeLossParameter_Norm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HingeLossParameter_Norm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HingeLossParameter_Norm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), enum_t_value);
}
inline bool HingeLossParameter_Norm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HingeLossParameter_Norm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum DatasetParameter_DatasetType : int {
  DatasetParameter_DatasetType_LIST = 1,
  DatasetParameter_DatasetType_BLOCK = 2
};
bool DatasetParameter_DatasetType_IsValid(int value);
constexpr DatasetParameter_DatasetType DatasetParameter_DatasetType_DatasetType_MIN = DatasetParameter_DatasetType_LIST;
constexpr DatasetParameter_DatasetType DatasetParameter_DatasetType_DatasetType_MAX = DatasetParameter_DatasetType_BLOCK;
constexpr int DatasetParameter_DatasetType_DatasetType_ARRAYSIZE = DatasetParameter_DatasetType_DatasetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetParameter_DatasetType_descriptor();
template<typename T>
inline const std::string& DatasetParameter_DatasetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatasetParameter_DatasetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatasetParameter_DatasetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatasetParameter_DatasetType_descriptor(), enum_t_value);
}
inline bool DatasetParameter_DatasetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DatasetParameter_DatasetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatasetParameter_DatasetType>(
    DatasetParameter_DatasetType_descriptor(), name, value);
}
enum LRNParameter_NormRegion : int {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
constexpr int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor();
template<typename T>
inline const std::string& LRNParameter_NormRegion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LRNParameter_NormRegion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LRNParameter_NormRegion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), enum_t_value);
}
inline bool LRNParameter_NormRegion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LRNParameter_NormRegion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine : int {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
constexpr int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_Engine_descriptor();
template<typename T>
inline const std::string& LRNParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LRNParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LRNParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), enum_t_value);
}
inline bool LRNParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LRNParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum MultiBoxLossParameter_LocLossType : int {
  MultiBoxLossParameter_LocLossType_L2 = 0,
  MultiBoxLossParameter_LocLossType_SMOOTH_L1 = 1
};
bool MultiBoxLossParameter_LocLossType_IsValid(int value);
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MIN = MultiBoxLossParameter_LocLossType_L2;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MAX = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
constexpr int MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE = MultiBoxLossParameter_LocLossType_LocLossType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor();
template<typename T>
inline const std::string& MultiBoxLossParameter_LocLossType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MultiBoxLossParameter_LocLossType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MultiBoxLossParameter_LocLossType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MultiBoxLossParameter_LocLossType_descriptor(), enum_t_value);
}
inline bool MultiBoxLossParameter_LocLossType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MultiBoxLossParameter_LocLossType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MultiBoxLossParameter_LocLossType>(
    MultiBoxLossParameter_LocLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_ConfLossType : int {
  MultiBoxLossParameter_ConfLossType_SOFTMAX = 0,
  MultiBoxLossParameter_ConfLossType_LOGISTIC = 1
};
bool MultiBoxLossParameter_ConfLossType_IsValid(int value);
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MIN = MultiBoxLossParameter_ConfLossType_SOFTMAX;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MAX = MultiBoxLossParameter_ConfLossType_LOGISTIC;
constexpr int MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE = MultiBoxLossParameter_ConfLossType_ConfLossType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor();
template<typename T>
inline const std::string& MultiBoxLossParameter_ConfLossType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MultiBoxLossParameter_ConfLossType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MultiBoxLossParameter_ConfLossType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MultiBoxLossParameter_ConfLossType_descriptor(), enum_t_value);
}
inline bool MultiBoxLossParameter_ConfLossType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MultiBoxLossParameter_ConfLossType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MultiBoxLossParameter_ConfLossType>(
    MultiBoxLossParameter_ConfLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MatchType : int {
  MultiBoxLossParameter_MatchType_BIPARTITE = 0,
  MultiBoxLossParameter_MatchType_PER_PREDICTION = 1
};
bool MultiBoxLossParameter_MatchType_IsValid(int value);
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MIN = MultiBoxLossParameter_MatchType_BIPARTITE;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MAX = MultiBoxLossParameter_MatchType_PER_PREDICTION;
constexpr int MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE = MultiBoxLossParameter_MatchType_MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor();
template<typename T>
inline const std::string& MultiBoxLossParameter_MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MultiBoxLossParameter_MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MultiBoxLossParameter_MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MultiBoxLossParameter_MatchType_descriptor(), enum_t_value);
}
inline bool MultiBoxLossParameter_MatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MultiBoxLossParameter_MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MultiBoxLossParameter_MatchType>(
    MultiBoxLossParameter_MatchType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MiningType : int {
  MultiBoxLossParameter_MiningType_NONE = 0,
  MultiBoxLossParameter_MiningType_MAX_NEGATIVE = 1,
  MultiBoxLossParameter_MiningType_HARD_EXAMPLE = 2
};
bool MultiBoxLossParameter_MiningType_IsValid(int value);
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MIN = MultiBoxLossParameter_MiningType_NONE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MAX = MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
constexpr int MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE = MultiBoxLossParameter_MiningType_MiningType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MiningType_descriptor();
template<typename T>
inline const std::string& MultiBoxLossParameter_MiningType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MultiBoxLossParameter_MiningType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MultiBoxLossParameter_MiningType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MultiBoxLossParameter_MiningType_descriptor(), enum_t_value);
}
inline bool MultiBoxLossParameter_MiningType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MultiBoxLossParameter_MiningType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MultiBoxLossParameter_MiningType>(
    MultiBoxLossParameter_MiningType_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod : int {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
constexpr int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& PoolingParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PoolingParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine : int {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
constexpr int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_Engine_descriptor();
template<typename T>
inline const std::string& PoolingParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), enum_t_value);
}
inline bool PoolingParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PoolingParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_RoundMode : int {
  PoolingParameter_RoundMode_CEIL = 0,
  PoolingParameter_RoundMode_FLOOR = 1
};
bool PoolingParameter_RoundMode_IsValid(int value);
constexpr PoolingParameter_RoundMode PoolingParameter_RoundMode_RoundMode_MIN = PoolingParameter_RoundMode_CEIL;
constexpr PoolingParameter_RoundMode PoolingParameter_RoundMode_RoundMode_MAX = PoolingParameter_RoundMode_FLOOR;
constexpr int PoolingParameter_RoundMode_RoundMode_ARRAYSIZE = PoolingParameter_RoundMode_RoundMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_RoundMode_descriptor();
template<typename T>
inline const std::string& PoolingParameter_RoundMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingParameter_RoundMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingParameter_RoundMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingParameter_RoundMode_descriptor(), enum_t_value);
}
inline bool PoolingParameter_RoundMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PoolingParameter_RoundMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingParameter_RoundMode>(
    PoolingParameter_RoundMode_descriptor(), name, value);
}
enum PriorBoxParameter_CodeType : int {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2,
  PriorBoxParameter_CodeType_CORNER_SIZE = 3
};
bool PriorBoxParameter_CodeType_IsValid(int value);
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = PriorBoxParameter_CodeType_CORNER;
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = PriorBoxParameter_CodeType_CORNER_SIZE;
constexpr int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorBoxParameter_CodeType_descriptor();
template<typename T>
inline const std::string& PriorBoxParameter_CodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PriorBoxParameter_CodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PriorBoxParameter_CodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PriorBoxParameter_CodeType_descriptor(), enum_t_value);
}
inline bool PriorBoxParameter_CodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PriorBoxParameter_CodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
    PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp : int {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
constexpr int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
template<typename T>
inline const std::string& ReductionParameter_ReductionOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReductionParameter_ReductionOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReductionParameter_ReductionOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), enum_t_value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReductionParameter_ReductionOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine : int {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
constexpr int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReLUParameter_Engine_descriptor();
template<typename T>
inline const std::string& ReLUParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReLUParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReLUParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), enum_t_value);
}
inline bool ReLUParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReLUParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine : int {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
constexpr int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigmoidParameter_Engine_descriptor();
template<typename T>
inline const std::string& SigmoidParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SigmoidParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SigmoidParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), enum_t_value);
}
inline bool SigmoidParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SigmoidParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine : int {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
constexpr int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
template<typename T>
inline const std::string& SoftmaxParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SoftmaxParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SoftmaxParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), enum_t_value);
}
inline bool SoftmaxParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SoftmaxParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine : int {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
constexpr int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TanHParameter_Engine_descriptor();
template<typename T>
inline const std::string& TanHParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TanHParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TanHParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), enum_t_value);
}
inline bool TanHParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TanHParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum VideoDataParameter_VideoType : int {
  VideoDataParameter_VideoType_WEBCAM = 0,
  VideoDataParameter_VideoType_VIDEO = 1
};
bool VideoDataParameter_VideoType_IsValid(int value);
constexpr VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MIN = VideoDataParameter_VideoType_WEBCAM;
constexpr VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MAX = VideoDataParameter_VideoType_VIDEO;
constexpr int VideoDataParameter_VideoType_VideoType_ARRAYSIZE = VideoDataParameter_VideoType_VideoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoDataParameter_VideoType_descriptor();
template<typename T>
inline const std::string& VideoDataParameter_VideoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoDataParameter_VideoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoDataParameter_VideoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoDataParameter_VideoType_descriptor(), enum_t_value);
}
inline bool VideoDataParameter_VideoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoDataParameter_VideoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoDataParameter_VideoType>(
    VideoDataParameter_VideoType_descriptor(), name, value);
}
enum SPPParameter_PoolMethod : int {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
constexpr int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& SPPParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SPPParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SPPParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool SPPParameter_PoolMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SPPParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine : int {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
constexpr int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_Engine_descriptor();
template<typename T>
inline const std::string& SPPParameter_Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SPPParameter_Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SPPParameter_Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), enum_t_value);
}
inline bool SPPParameter_Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SPPParameter_Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType : int {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
constexpr int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
template<typename T>
inline const std::string& V1LayerParameter_LayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V1LayerParameter_LayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V1LayerParameter_LayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), enum_t_value);
}
inline bool V1LayerParameter_LayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V1LayerParameter_LayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode : int {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
constexpr int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
template<typename T>
inline const std::string& V1LayerParameter_DimCheckMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V1LayerParameter_DimCheckMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V1LayerParameter_DimCheckMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), enum_t_value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V1LayerParameter_DimCheckMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod : int {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
constexpr int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
template<typename T>
inline const std::string& V0LayerParameter_PoolMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V0LayerParameter_PoolMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V0LayerParameter_PoolMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), enum_t_value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V0LayerParameter_PoolMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum YoloLossParameter_RegLossType : int {
  YoloLossParameter_RegLossType_L2 = 0,
  YoloLossParameter_RegLossType_L1 = 1,
  YoloLossParameter_RegLossType_SMOOTH_L1 = 2
};
bool YoloLossParameter_RegLossType_IsValid(int value);
constexpr YoloLossParameter_RegLossType YoloLossParameter_RegLossType_RegLossType_MIN = YoloLossParameter_RegLossType_L2;
constexpr YoloLossParameter_RegLossType YoloLossParameter_RegLossType_RegLossType_MAX = YoloLossParameter_RegLossType_SMOOTH_L1;
constexpr int YoloLossParameter_RegLossType_RegLossType_ARRAYSIZE = YoloLossParameter_RegLossType_RegLossType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YoloLossParameter_RegLossType_descriptor();
template<typename T>
inline const std::string& YoloLossParameter_RegLossType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, YoloLossParameter_RegLossType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function YoloLossParameter_RegLossType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    YoloLossParameter_RegLossType_descriptor(), enum_t_value);
}
inline bool YoloLossParameter_RegLossType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, YoloLossParameter_RegLossType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<YoloLossParameter_RegLossType>(
    YoloLossParameter_RegLossType_descriptor(), name, value);
}
enum DetectionOutputSSDParameter_MIN_SIZE_MODE : int {
  DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH = 0,
  DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH = 1
};
bool DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(int value);
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MIN = DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH;
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX = DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH;
constexpr int DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_ARRAYSIZE = DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
template<typename T>
inline const std::string& DetectionOutputSSDParameter_MIN_SIZE_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DetectionOutputSSDParameter_MIN_SIZE_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DetectionOutputSSDParameter_MIN_SIZE_MODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor(), enum_t_value);
}
inline bool DetectionOutputSSDParameter_MIN_SIZE_MODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DetectionOutputSSDParameter_MIN_SIZE_MODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DetectionOutputSSDParameter_MIN_SIZE_MODE>(
    DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor(), name, value);
}
enum Phase : int {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
constexpr Phase Phase_MIN = TRAIN;
constexpr Phase Phase_MAX = TEST;
constexpr int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor();
template<typename T>
inline const std::string& Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phase_descriptor(), enum_t_value);
}
inline bool Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BlobShape) */ {
 public:
  inline BlobShape() : BlobShape(nullptr) {}
  ~BlobShape() override;
  explicit PROTOBUF_CONSTEXPR BlobShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlobShape(const BlobShape& from);
  BlobShape(BlobShape&& from) noexcept
    : BlobShape() {
    *this = ::std::move(from);
  }

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobShape& operator=(BlobShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlobShape& a, BlobShape& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobShape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlobShape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlobShape& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobShape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BlobShape";
  }
  protected:
  explicit BlobShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  int64_t _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dim() const;
  void _internal_add_dim(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dim();
  public:
  int64_t dim(int index) const;
  void set_dim(int index, int64_t value);
  void add_dim(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BlobShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dim_;
    mutable std::atomic<int> _dim_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BlobProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BlobProto) */ {
 public:
  inline BlobProto() : BlobProto(nullptr) {}
  ~BlobProto() override;
  explicit PROTOBUF_CONSTEXPR BlobProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlobProto(const BlobProto& from);
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlobProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlobProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BlobProto";
  }
  protected:
  explicit BlobProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kDiffFieldNumber = 6,
    kDoubleDataFieldNumber = 8,
    kDoubleDiffFieldNumber = 9,
    kShapeFieldNumber = 7,
    kNumFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // repeated float data = 5 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  private:
  int _internal_diff_size() const;
  public:
  void clear_diff();
  private:
  float _internal_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_diff() const;
  void _internal_add_diff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_diff();
  public:
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  private:
  int _internal_double_data_size() const;
  public:
  void clear_double_data();
  private:
  double _internal_double_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_data() const;
  void _internal_add_double_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_data();
  public:
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  private:
  int _internal_double_diff_size() const;
  public:
  void clear_double_diff();
  private:
  double _internal_double_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_diff() const;
  void _internal_add_double_diff(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_diff();
  public:
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_diff();

  // optional .apollo.perception.inference.BlobShape shape = 7;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::apollo::perception::inference::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BlobShape* release_shape();
  ::apollo::perception::inference::BlobShape* mutable_shape();
  void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);
  private:
  const ::apollo::perception::inference::BlobShape& _internal_shape() const;
  ::apollo::perception::inference::BlobShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::apollo::perception::inference::BlobShape* shape);
  ::apollo::perception::inference::BlobShape* unsafe_arena_release_shape();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BlobProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > diff_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_diff_;
    ::apollo::perception::inference::BlobShape* shape_;
    int32_t num_;
    int32_t channels_;
    int32_t height_;
    int32_t width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class Datum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.Datum) */ {
 public:
  inline Datum() : Datum(nullptr) {}
  ~Datum() override;
  explicit PROTOBUF_CONSTEXPR Datum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Datum(const Datum& from);
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Datum& operator=(Datum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Datum& default_instance() {
    return *internal_default_instance();
  }
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }
  inline void Swap(Datum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Datum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Datum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Datum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Datum& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.Datum";
  }
  protected:
  explicit Datum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 6,
    kDataFieldNumber = 4,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kLabelFieldNumber = 5,
    kEncodedFieldNumber = 7,
  };
  // repeated float float_data = 6;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 channels = 1;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  private:
  bool _internal_has_encoded() const;
  public:
  void clear_encoded();
  bool encoded() const;
  void set_encoded(bool value);
  private:
  bool _internal_encoded() const;
  void _internal_set_encoded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Datum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t channels_;
    int32_t height_;
    int32_t width_;
    int32_t label_;
    bool encoded_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LabelMapItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LabelMapItem) */ {
 public:
  inline LabelMapItem() : LabelMapItem(nullptr) {}
  ~LabelMapItem() override;
  explicit PROTOBUF_CONSTEXPR LabelMapItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelMapItem(const LabelMapItem& from);
  LabelMapItem(LabelMapItem&& from) noexcept
    : LabelMapItem() {
    *this = ::std::move(from);
  }

  inline LabelMapItem& operator=(const LabelMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelMapItem& operator=(LabelMapItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelMapItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelMapItem* internal_default_instance() {
    return reinterpret_cast<const LabelMapItem*>(
               &_LabelMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LabelMapItem& a, LabelMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelMapItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelMapItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelMapItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabelMapItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LabelMapItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelMapItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LabelMapItem";
  }
  protected:
  explicit LabelMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 3,
    kLabelFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string display_name = 3;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional int32 label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LabelMapItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int32_t label_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LabelMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LabelMap) */ {
 public:
  inline LabelMap() : LabelMap(nullptr) {}
  ~LabelMap() override;
  explicit PROTOBUF_CONSTEXPR LabelMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelMap(const LabelMap& from);
  LabelMap(LabelMap&& from) noexcept
    : LabelMap() {
    *this = ::std::move(from);
  }

  inline LabelMap& operator=(const LabelMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelMap& operator=(LabelMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelMap* internal_default_instance() {
    return reinterpret_cast<const LabelMap*>(
               &_LabelMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LabelMap& a, LabelMap& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabelMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LabelMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LabelMap";
  }
  protected:
  explicit LabelMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::apollo::perception::inference::LabelMapItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >*
      mutable_item();
  private:
  const ::apollo::perception::inference::LabelMapItem& _internal_item(int index) const;
  ::apollo::perception::inference::LabelMapItem* _internal_add_item();
  public:
  const ::apollo::perception::inference::LabelMapItem& item(int index) const;
  ::apollo::perception::inference::LabelMapItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LabelMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem > item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class Sampler final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.Sampler) */ {
 public:
  inline Sampler() : Sampler(nullptr) {}
  ~Sampler() override;
  explicit PROTOBUF_CONSTEXPR Sampler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sampler(const Sampler& from);
  Sampler(Sampler&& from) noexcept
    : Sampler() {
    *this = ::std::move(from);
  }

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sampler& operator=(Sampler&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sampler& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sampler* internal_default_instance() {
    return reinterpret_cast<const Sampler*>(
               &_Sampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Sampler& a, Sampler& b) {
    a.Swap(&b);
  }
  inline void Swap(Sampler* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sampler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sampler>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sampler& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sampler& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sampler* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.Sampler";
  }
  protected:
  explicit Sampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinScaleFieldNumber = 1,
    kMaxScaleFieldNumber = 2,
    kMinAspectRatioFieldNumber = 3,
    kMaxAspectRatioFieldNumber = 4,
  };
  // optional float min_scale = 1 [default = 1];
  bool has_min_scale() const;
  private:
  bool _internal_has_min_scale() const;
  public:
  void clear_min_scale();
  float min_scale() const;
  void set_min_scale(float value);
  private:
  float _internal_min_scale() const;
  void _internal_set_min_scale(float value);
  public:

  // optional float max_scale = 2 [default = 1];
  bool has_max_scale() const;
  private:
  bool _internal_has_max_scale() const;
  public:
  void clear_max_scale();
  float max_scale() const;
  void set_max_scale(float value);
  private:
  float _internal_max_scale() const;
  void _internal_set_max_scale(float value);
  public:

  // optional float min_aspect_ratio = 3 [default = 1];
  bool has_min_aspect_ratio() const;
  private:
  bool _internal_has_min_aspect_ratio() const;
  public:
  void clear_min_aspect_ratio();
  float min_aspect_ratio() const;
  void set_min_aspect_ratio(float value);
  private:
  float _internal_min_aspect_ratio() const;
  void _internal_set_min_aspect_ratio(float value);
  public:

  // optional float max_aspect_ratio = 4 [default = 1];
  bool has_max_aspect_ratio() const;
  private:
  bool _internal_has_max_aspect_ratio() const;
  public:
  void clear_max_aspect_ratio();
  float max_aspect_ratio() const;
  void set_max_aspect_ratio(float value);
  private:
  float _internal_max_aspect_ratio() const;
  void _internal_set_max_aspect_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Sampler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float min_scale_;
    float max_scale_;
    float min_aspect_ratio_;
    float max_aspect_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SampleConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SampleConstraint) */ {
 public:
  inline SampleConstraint() : SampleConstraint(nullptr) {}
  ~SampleConstraint() override;
  explicit PROTOBUF_CONSTEXPR SampleConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleConstraint(const SampleConstraint& from);
  SampleConstraint(SampleConstraint&& from) noexcept
    : SampleConstraint() {
    *this = ::std::move(from);
  }

  inline SampleConstraint& operator=(const SampleConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleConstraint& operator=(SampleConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleConstraint* internal_default_instance() {
    return reinterpret_cast<const SampleConstraint*>(
               &_SampleConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SampleConstraint& a, SampleConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampleConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampleConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SampleConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SampleConstraint";
  }
  protected:
  explicit SampleConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceTypeFieldNumber = 7,
    kMinJaccardOverlapFieldNumber = 1,
    kMaxJaccardOverlapFieldNumber = 2,
    kMinSampleCoverageFieldNumber = 3,
    kMaxSampleCoverageFieldNumber = 4,
    kMinObjectCoverageFieldNumber = 5,
    kMaxObjectCoverageFieldNumber = 6,
  };
  // repeated int32 balance_type = 7;
  int balance_type_size() const;
  private:
  int _internal_balance_type_size() const;
  public:
  void clear_balance_type();
  private:
  int32_t _internal_balance_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_balance_type() const;
  void _internal_add_balance_type(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_balance_type();
  public:
  int32_t balance_type(int index) const;
  void set_balance_type(int index, int32_t value);
  void add_balance_type(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      balance_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_balance_type();

  // optional float min_jaccard_overlap = 1;
  bool has_min_jaccard_overlap() const;
  private:
  bool _internal_has_min_jaccard_overlap() const;
  public:
  void clear_min_jaccard_overlap();
  float min_jaccard_overlap() const;
  void set_min_jaccard_overlap(float value);
  private:
  float _internal_min_jaccard_overlap() const;
  void _internal_set_min_jaccard_overlap(float value);
  public:

  // optional float max_jaccard_overlap = 2;
  bool has_max_jaccard_overlap() const;
  private:
  bool _internal_has_max_jaccard_overlap() const;
  public:
  void clear_max_jaccard_overlap();
  float max_jaccard_overlap() const;
  void set_max_jaccard_overlap(float value);
  private:
  float _internal_max_jaccard_overlap() const;
  void _internal_set_max_jaccard_overlap(float value);
  public:

  // optional float min_sample_coverage = 3;
  bool has_min_sample_coverage() const;
  private:
  bool _internal_has_min_sample_coverage() const;
  public:
  void clear_min_sample_coverage();
  float min_sample_coverage() const;
  void set_min_sample_coverage(float value);
  private:
  float _internal_min_sample_coverage() const;
  void _internal_set_min_sample_coverage(float value);
  public:

  // optional float max_sample_coverage = 4;
  bool has_max_sample_coverage() const;
  private:
  bool _internal_has_max_sample_coverage() const;
  public:
  void clear_max_sample_coverage();
  float max_sample_coverage() const;
  void set_max_sample_coverage(float value);
  private:
  float _internal_max_sample_coverage() const;
  void _internal_set_max_sample_coverage(float value);
  public:

  // optional float min_object_coverage = 5;
  bool has_min_object_coverage() const;
  private:
  bool _internal_has_min_object_coverage() const;
  public:
  void clear_min_object_coverage();
  float min_object_coverage() const;
  void set_min_object_coverage(float value);
  private:
  float _internal_min_object_coverage() const;
  void _internal_set_min_object_coverage(float value);
  public:

  // optional float max_object_coverage = 6;
  bool has_max_object_coverage() const;
  private:
  bool _internal_has_max_object_coverage() const;
  public:
  void clear_max_object_coverage();
  float max_object_coverage() const;
  void set_max_object_coverage(float value);
  private:
  float _internal_max_object_coverage() const;
  void _internal_set_max_object_coverage(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SampleConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > balance_type_;
    float min_jaccard_overlap_;
    float max_jaccard_overlap_;
    float min_sample_coverage_;
    float max_sample_coverage_;
    float min_object_coverage_;
    float max_object_coverage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BatchSampler final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BatchSampler) */ {
 public:
  inline BatchSampler() : BatchSampler(nullptr) {}
  ~BatchSampler() override;
  explicit PROTOBUF_CONSTEXPR BatchSampler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSampler(const BatchSampler& from);
  BatchSampler(BatchSampler&& from) noexcept
    : BatchSampler() {
    *this = ::std::move(from);
  }

  inline BatchSampler& operator=(const BatchSampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSampler& operator=(BatchSampler&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSampler& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSampler* internal_default_instance() {
    return reinterpret_cast<const BatchSampler*>(
               &_BatchSampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BatchSampler& a, BatchSampler& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSampler* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSampler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSampler>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSampler& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchSampler& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSampler* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BatchSampler";
  }
  protected:
  explicit BatchSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplerFieldNumber = 2,
    kSampleConstraintFieldNumber = 3,
    kMaxSampleFieldNumber = 4,
    kUseOriginalImageFieldNumber = 1,
    kMaxTrialsFieldNumber = 5,
  };
  // optional .apollo.perception.inference.Sampler sampler = 2;
  bool has_sampler() const;
  private:
  bool _internal_has_sampler() const;
  public:
  void clear_sampler();
  const ::apollo::perception::inference::Sampler& sampler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::Sampler* release_sampler();
  ::apollo::perception::inference::Sampler* mutable_sampler();
  void set_allocated_sampler(::apollo::perception::inference::Sampler* sampler);
  private:
  const ::apollo::perception::inference::Sampler& _internal_sampler() const;
  ::apollo::perception::inference::Sampler* _internal_mutable_sampler();
  public:
  void unsafe_arena_set_allocated_sampler(
      ::apollo::perception::inference::Sampler* sampler);
  ::apollo::perception::inference::Sampler* unsafe_arena_release_sampler();

  // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
  bool has_sample_constraint() const;
  private:
  bool _internal_has_sample_constraint() const;
  public:
  void clear_sample_constraint();
  const ::apollo::perception::inference::SampleConstraint& sample_constraint() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SampleConstraint* release_sample_constraint();
  ::apollo::perception::inference::SampleConstraint* mutable_sample_constraint();
  void set_allocated_sample_constraint(::apollo::perception::inference::SampleConstraint* sample_constraint);
  private:
  const ::apollo::perception::inference::SampleConstraint& _internal_sample_constraint() const;
  ::apollo::perception::inference::SampleConstraint* _internal_mutable_sample_constraint();
  public:
  void unsafe_arena_set_allocated_sample_constraint(
      ::apollo::perception::inference::SampleConstraint* sample_constraint);
  ::apollo::perception::inference::SampleConstraint* unsafe_arena_release_sample_constraint();

  // optional uint32 max_sample = 4;
  bool has_max_sample() const;
  private:
  bool _internal_has_max_sample() const;
  public:
  void clear_max_sample();
  uint32_t max_sample() const;
  void set_max_sample(uint32_t value);
  private:
  uint32_t _internal_max_sample() const;
  void _internal_set_max_sample(uint32_t value);
  public:

  // optional bool use_original_image = 1 [default = true];
  bool has_use_original_image() const;
  private:
  bool _internal_has_use_original_image() const;
  public:
  void clear_use_original_image();
  bool use_original_image() const;
  void set_use_original_image(bool value);
  private:
  bool _internal_use_original_image() const;
  void _internal_set_use_original_image(bool value);
  public:

  // optional uint32 max_trials = 5 [default = 100];
  bool has_max_trials() const;
  private:
  bool _internal_has_max_trials() const;
  public:
  void clear_max_trials();
  uint32_t max_trials() const;
  void set_max_trials(uint32_t value);
  private:
  uint32_t _internal_max_trials() const;
  void _internal_set_max_trials(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BatchSampler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::Sampler* sampler_;
    ::apollo::perception::inference::SampleConstraint* sample_constraint_;
    uint32_t max_sample_;
    bool use_original_image_;
    uint32_t max_trials_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class EmitConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.EmitConstraint) */ {
 public:
  inline EmitConstraint() : EmitConstraint(nullptr) {}
  ~EmitConstraint() override;
  explicit PROTOBUF_CONSTEXPR EmitConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmitConstraint(const EmitConstraint& from);
  EmitConstraint(EmitConstraint&& from) noexcept
    : EmitConstraint() {
    *this = ::std::move(from);
  }

  inline EmitConstraint& operator=(const EmitConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmitConstraint& operator=(EmitConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmitConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmitConstraint* internal_default_instance() {
    return reinterpret_cast<const EmitConstraint*>(
               &_EmitConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EmitConstraint& a, EmitConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(EmitConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmitConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmitConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmitConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmitConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmitConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmitConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.EmitConstraint";
  }
  protected:
  explicit EmitConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EmitConstraint_EmitType EmitType;
  static constexpr EmitType CENTER =
    EmitConstraint_EmitType_CENTER;
  static constexpr EmitType MIN_OVERLAP =
    EmitConstraint_EmitType_MIN_OVERLAP;
  static inline bool EmitType_IsValid(int value) {
    return EmitConstraint_EmitType_IsValid(value);
  }
  static constexpr EmitType EmitType_MIN =
    EmitConstraint_EmitType_EmitType_MIN;
  static constexpr EmitType EmitType_MAX =
    EmitConstraint_EmitType_EmitType_MAX;
  static constexpr int EmitType_ARRAYSIZE =
    EmitConstraint_EmitType_EmitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EmitType_descriptor() {
    return EmitConstraint_EmitType_descriptor();
  }
  template<typename T>
  static inline const std::string& EmitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EmitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EmitType_Name.");
    return EmitConstraint_EmitType_Name(enum_t_value);
  }
  static inline bool EmitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EmitType* value) {
    return EmitConstraint_EmitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmitTypeFieldNumber = 1,
    kEmitOverlapFieldNumber = 2,
  };
  // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  bool has_emit_type() const;
  private:
  bool _internal_has_emit_type() const;
  public:
  void clear_emit_type();
  ::apollo::perception::inference::EmitConstraint_EmitType emit_type() const;
  void set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value);
  private:
  ::apollo::perception::inference::EmitConstraint_EmitType _internal_emit_type() const;
  void _internal_set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value);
  public:

  // optional float emit_overlap = 2;
  bool has_emit_overlap() const;
  private:
  bool _internal_has_emit_overlap() const;
  public:
  void clear_emit_overlap();
  float emit_overlap() const;
  void set_emit_overlap(float value);
  private:
  float _internal_emit_overlap() const;
  void _internal_set_emit_overlap(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EmitConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int emit_type_;
    float emit_overlap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NormalizedBBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NormalizedBBox) */ {
 public:
  inline NormalizedBBox() : NormalizedBBox(nullptr) {}
  ~NormalizedBBox() override;
  explicit PROTOBUF_CONSTEXPR NormalizedBBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalizedBBox(const NormalizedBBox& from);
  NormalizedBBox(NormalizedBBox&& from) noexcept
    : NormalizedBBox() {
    *this = ::std::move(from);
  }

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedBBox& operator=(NormalizedBBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NormalizedBBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizedBBox* internal_default_instance() {
    return reinterpret_cast<const NormalizedBBox*>(
               &_NormalizedBBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NormalizedBBox& a, NormalizedBBox& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedBBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedBBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalizedBBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalizedBBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NormalizedBBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NormalizedBBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedBBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NormalizedBBox";
  }
  protected:
  explicit NormalizedBBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
    kLabelFieldNumber = 5,
    kDifficultFieldNumber = 6,
    kScoreFieldNumber = 7,
    kSizeFieldNumber = 8,
  };
  // optional float xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // optional float ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // optional float xmax = 3;
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // optional float ymax = 4;
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // optional bool difficult = 6;
  bool has_difficult() const;
  private:
  bool _internal_has_difficult() const;
  public:
  void clear_difficult();
  bool difficult() const;
  void set_difficult(bool value);
  private:
  bool _internal_difficult() const;
  void _internal_set_difficult(bool value);
  public:

  // optional float score = 7;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional float size = 8;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NormalizedBBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float xmin_;
    float ymin_;
    float xmax_;
    float ymax_;
    int32_t label_;
    bool difficult_;
    float score_;
    float size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BBox3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BBox3D) */ {
 public:
  inline BBox3D() : BBox3D(nullptr) {}
  ~BBox3D() override;
  explicit PROTOBUF_CONSTEXPR BBox3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox3D(const BBox3D& from);
  BBox3D(BBox3D&& from) noexcept
    : BBox3D() {
    *this = ::std::move(from);
  }

  inline BBox3D& operator=(const BBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox3D& operator=(BBox3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox3D* internal_default_instance() {
    return reinterpret_cast<const BBox3D*>(
               &_BBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BBox3D& a, BBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBox3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BBox3D";
  }
  protected:
  explicit BBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHFieldNumber = 1,
    kWFieldNumber = 2,
    kLFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
    kAlphaFieldNumber = 7,
  };
  // optional float h = 1 [default = 0];
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // optional float w = 2 [default = 0];
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // optional float l = 3 [default = 0];
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  float l() const;
  void set_l(float value);
  private:
  float _internal_l() const;
  void _internal_set_l(float value);
  public:

  // optional float x = 4 [default = 0];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 5 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 6 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float alpha = 7 [default = 0];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float h_;
    float w_;
    float l_;
    float x_;
    float y_;
    float z_;
    float alpha_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class Annotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {}
  ~Annotation() override;
  explicit PROTOBUF_CONSTEXPR Annotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Annotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Annotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Annotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 2,
    kBbox3DFieldNumber = 3,
    kFrontBboxFieldNumber = 4,
    kRearBboxFieldNumber = 5,
    kInstanceIdFieldNumber = 1,
  };
  // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::apollo::perception::inference::NormalizedBBox& bbox() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NormalizedBBox* release_bbox();
  ::apollo::perception::inference::NormalizedBBox* mutable_bbox();
  void set_allocated_bbox(::apollo::perception::inference::NormalizedBBox* bbox);
  private:
  const ::apollo::perception::inference::NormalizedBBox& _internal_bbox() const;
  ::apollo::perception::inference::NormalizedBBox* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::apollo::perception::inference::NormalizedBBox* bbox);
  ::apollo::perception::inference::NormalizedBBox* unsafe_arena_release_bbox();

  // optional .apollo.perception.inference.BBox3D bbox3d = 3;
  bool has_bbox3d() const;
  private:
  bool _internal_has_bbox3d() const;
  public:
  void clear_bbox3d();
  const ::apollo::perception::inference::BBox3D& bbox3d() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BBox3D* release_bbox3d();
  ::apollo::perception::inference::BBox3D* mutable_bbox3d();
  void set_allocated_bbox3d(::apollo::perception::inference::BBox3D* bbox3d);
  private:
  const ::apollo::perception::inference::BBox3D& _internal_bbox3d() const;
  ::apollo::perception::inference::BBox3D* _internal_mutable_bbox3d();
  public:
  void unsafe_arena_set_allocated_bbox3d(
      ::apollo::perception::inference::BBox3D* bbox3d);
  ::apollo::perception::inference::BBox3D* unsafe_arena_release_bbox3d();

  // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
  bool has_front_bbox() const;
  private:
  bool _internal_has_front_bbox() const;
  public:
  void clear_front_bbox();
  const ::apollo::perception::inference::NormalizedBBox& front_bbox() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NormalizedBBox* release_front_bbox();
  ::apollo::perception::inference::NormalizedBBox* mutable_front_bbox();
  void set_allocated_front_bbox(::apollo::perception::inference::NormalizedBBox* front_bbox);
  private:
  const ::apollo::perception::inference::NormalizedBBox& _internal_front_bbox() const;
  ::apollo::perception::inference::NormalizedBBox* _internal_mutable_front_bbox();
  public:
  void unsafe_arena_set_allocated_front_bbox(
      ::apollo::perception::inference::NormalizedBBox* front_bbox);
  ::apollo::perception::inference::NormalizedBBox* unsafe_arena_release_front_bbox();

  // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
  bool has_rear_bbox() const;
  private:
  bool _internal_has_rear_bbox() const;
  public:
  void clear_rear_bbox();
  const ::apollo::perception::inference::NormalizedBBox& rear_bbox() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NormalizedBBox* release_rear_bbox();
  ::apollo::perception::inference::NormalizedBBox* mutable_rear_bbox();
  void set_allocated_rear_bbox(::apollo::perception::inference::NormalizedBBox* rear_bbox);
  private:
  const ::apollo::perception::inference::NormalizedBBox& _internal_rear_bbox() const;
  ::apollo::perception::inference::NormalizedBBox* _internal_mutable_rear_bbox();
  public:
  void unsafe_arena_set_allocated_rear_bbox(
      ::apollo::perception::inference::NormalizedBBox* rear_bbox);
  ::apollo::perception::inference::NormalizedBBox* unsafe_arena_release_rear_bbox();

  // optional int32 instance_id = 1 [default = 0];
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  int32_t instance_id() const;
  void set_instance_id(int32_t value);
  private:
  int32_t _internal_instance_id() const;
  void _internal_set_instance_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::NormalizedBBox* bbox_;
    ::apollo::perception::inference::BBox3D* bbox3d_;
    ::apollo::perception::inference::NormalizedBBox* front_bbox_;
    ::apollo::perception::inference::NormalizedBBox* rear_bbox_;
    int32_t instance_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class AnnotationGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.AnnotationGroup) */ {
 public:
  inline AnnotationGroup() : AnnotationGroup(nullptr) {}
  ~AnnotationGroup() override;
  explicit PROTOBUF_CONSTEXPR AnnotationGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotationGroup(const AnnotationGroup& from);
  AnnotationGroup(AnnotationGroup&& from) noexcept
    : AnnotationGroup() {
    *this = ::std::move(from);
  }

  inline AnnotationGroup& operator=(const AnnotationGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationGroup& operator=(AnnotationGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotationGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotationGroup* internal_default_instance() {
    return reinterpret_cast<const AnnotationGroup*>(
               &_AnnotationGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AnnotationGroup& a, AnnotationGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnotationGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnotationGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnotationGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnnotationGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.AnnotationGroup";
  }
  protected:
  explicit AnnotationGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 2,
    kGroupLabelFieldNumber = 1,
  };
  // repeated .apollo.perception.inference.Annotation annotation = 2;
  int annotation_size() const;
  private:
  int _internal_annotation_size() const;
  public:
  void clear_annotation();
  ::apollo::perception::inference::Annotation* mutable_annotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::Annotation >*
      mutable_annotation();
  private:
  const ::apollo::perception::inference::Annotation& _internal_annotation(int index) const;
  ::apollo::perception::inference::Annotation* _internal_add_annotation();
  public:
  const ::apollo::perception::inference::Annotation& annotation(int index) const;
  ::apollo::perception::inference::Annotation* add_annotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::Annotation >&
      annotation() const;

  // optional int32 group_label = 1;
  bool has_group_label() const;
  private:
  bool _internal_has_group_label() const;
  public:
  void clear_group_label();
  int32_t group_label() const;
  void set_group_label(int32_t value);
  private:
  int32_t _internal_group_label() const;
  void _internal_set_group_label(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotationGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::Annotation > annotation_;
    int32_t group_label_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class AnnotatedDatum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.AnnotatedDatum) */ {
 public:
  inline AnnotatedDatum() : AnnotatedDatum(nullptr) {}
  ~AnnotatedDatum() override;
  explicit PROTOBUF_CONSTEXPR AnnotatedDatum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotatedDatum(const AnnotatedDatum& from);
  AnnotatedDatum(AnnotatedDatum&& from) noexcept
    : AnnotatedDatum() {
    *this = ::std::move(from);
  }

  inline AnnotatedDatum& operator=(const AnnotatedDatum& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotatedDatum& operator=(AnnotatedDatum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotatedDatum& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotatedDatum* internal_default_instance() {
    return reinterpret_cast<const AnnotatedDatum*>(
               &_AnnotatedDatum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AnnotatedDatum& a, AnnotatedDatum& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotatedDatum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotatedDatum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnotatedDatum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnotatedDatum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnotatedDatum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnnotatedDatum& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotatedDatum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.AnnotatedDatum";
  }
  protected:
  explicit AnnotatedDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnnotatedDatum_AnnotationType AnnotationType;
  static constexpr AnnotationType BBOX =
    AnnotatedDatum_AnnotationType_BBOX;
  static constexpr AnnotationType BBOX3D =
    AnnotatedDatum_AnnotationType_BBOX3D;
  static constexpr AnnotationType BBOX3DFR =
    AnnotatedDatum_AnnotationType_BBOX3DFR;
  static inline bool AnnotationType_IsValid(int value) {
    return AnnotatedDatum_AnnotationType_IsValid(value);
  }
  static constexpr AnnotationType AnnotationType_MIN =
    AnnotatedDatum_AnnotationType_AnnotationType_MIN;
  static constexpr AnnotationType AnnotationType_MAX =
    AnnotatedDatum_AnnotationType_AnnotationType_MAX;
  static constexpr int AnnotationType_ARRAYSIZE =
    AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnnotationType_descriptor() {
    return AnnotatedDatum_AnnotationType_descriptor();
  }
  template<typename T>
  static inline const std::string& AnnotationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnnotationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnnotationType_Name.");
    return AnnotatedDatum_AnnotationType_Name(enum_t_value);
  }
  static inline bool AnnotationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AnnotationType* value) {
    return AnnotatedDatum_AnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationGroupFieldNumber = 3,
    kDatumFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  int annotation_group_size() const;
  private:
  int _internal_annotation_group_size() const;
  public:
  void clear_annotation_group();
  ::apollo::perception::inference::AnnotationGroup* mutable_annotation_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >*
      mutable_annotation_group();
  private:
  const ::apollo::perception::inference::AnnotationGroup& _internal_annotation_group(int index) const;
  ::apollo::perception::inference::AnnotationGroup* _internal_add_annotation_group();
  public:
  const ::apollo::perception::inference::AnnotationGroup& annotation_group(int index) const;
  ::apollo::perception::inference::AnnotationGroup* add_annotation_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >&
      annotation_group() const;

  // optional .apollo.perception.inference.Datum datum = 1;
  bool has_datum() const;
  private:
  bool _internal_has_datum() const;
  public:
  void clear_datum();
  const ::apollo::perception::inference::Datum& datum() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::Datum* release_datum();
  ::apollo::perception::inference::Datum* mutable_datum();
  void set_allocated_datum(::apollo::perception::inference::Datum* datum);
  private:
  const ::apollo::perception::inference::Datum& _internal_datum() const;
  ::apollo::perception::inference::Datum* _internal_mutable_datum();
  public:
  void unsafe_arena_set_allocated_datum(
      ::apollo::perception::inference::Datum* datum);
  ::apollo::perception::inference::Datum* unsafe_arena_release_datum();

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::inference::AnnotatedDatum_AnnotationType type() const;
  void set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);
  private:
  ::apollo::perception::inference::AnnotatedDatum_AnnotationType _internal_type() const;
  void _internal_set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotatedDatum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup > annotation_group_;
    ::apollo::perception::inference::Datum* datum_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class FillerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.FillerParameter) */ {
 public:
  inline FillerParameter() : FillerParameter(nullptr) {}
  ~FillerParameter() override;
  explicit PROTOBUF_CONSTEXPR FillerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FillerParameter(const FillerParameter& from);
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FillerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FillerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FillerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FillerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FillerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FillerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FillerParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FillerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.FillerParameter";
  }
  protected:
  explicit FillerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static constexpr VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static constexpr VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static constexpr VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static constexpr VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static constexpr VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static constexpr int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  template<typename T>
  static inline const std::string& VarianceNorm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VarianceNorm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VarianceNorm_Name.");
    return FillerParameter_VarianceNorm_Name(enum_t_value);
  }
  static inline bool VarianceNorm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kMinFieldNumber = 3,
    kMeanFieldNumber = 5,
    kVarianceNormFieldNumber = 8,
    kSparseFieldNumber = 7,
    kMaxFieldNumber = 4,
    kStdFieldNumber = 6,
  };
  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float value = 2 [default = 0];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // optional float min = 3 [default = 0];
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  private:
  bool _internal_has_variance_norm() const;
  public:
  void clear_variance_norm();
  ::apollo::perception::inference::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value);
  private:
  ::apollo::perception::inference::FillerParameter_VarianceNorm _internal_variance_norm() const;
  void _internal_set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value);
  public:

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  int32_t sparse() const;
  void set_sparse(int32_t value);
  private:
  int32_t _internal_sparse() const;
  void _internal_set_sparse(int32_t value);
  public:

  // optional float max = 4 [default = 1];
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // optional float std = 6 [default = 1];
  bool has_std() const;
  private:
  bool _internal_has_std() const;
  public:
  void clear_std();
  float std() const;
  void set_std(float value);
  private:
  float _internal_std() const;
  void _internal_set_std(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.FillerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    float value_;
    float min_;
    float mean_;
    int variance_norm_;
    int32_t sparse_;
    float max_;
    float std_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NetParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NetParameter) */ {
 public:
  inline NetParameter() : NetParameter(nullptr) {}
  ~NetParameter() override;
  explicit PROTOBUF_CONSTEXPR NetParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetParameter(const NetParameter& from);
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NetParameter";
  }
  protected:
  explicit NetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kInputFieldNumber = 3,
    kInputDimFieldNumber = 4,
    kInputShapeFieldNumber = 8,
    kLayerFieldNumber = 100,
    kNameFieldNumber = 1,
    kStateFieldNumber = 6,
    kForceBackwardFieldNumber = 5,
    kDebugInfoFieldNumber = 7,
  };
  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::apollo::perception::inference::V1LayerParameter* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >*
      mutable_layers();
  private:
  const ::apollo::perception::inference::V1LayerParameter& _internal_layers(int index) const;
  ::apollo::perception::inference::V1LayerParameter* _internal_add_layers();
  public:
  const ::apollo::perception::inference::V1LayerParameter& layers(int index) const;
  ::apollo::perception::inference::V1LayerParameter* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  private:
  int _internal_input_dim_size() const;
  public:
  void clear_input_dim();
  private:
  int32_t _internal_input_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_input_dim() const;
  void _internal_add_input_dim(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_input_dim();
  public:
  int32_t input_dim(int index) const;
  void set_input_dim(int index, int32_t value);
  void add_input_dim(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      input_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_input_dim();

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  int input_shape_size() const;
  private:
  int _internal_input_shape_size() const;
  public:
  void clear_input_shape();
  ::apollo::perception::inference::BlobShape* mutable_input_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_input_shape();
  private:
  const ::apollo::perception::inference::BlobShape& _internal_input_shape(int index) const;
  ::apollo::perception::inference::BlobShape* _internal_add_input_shape();
  public:
  const ::apollo::perception::inference::BlobShape& input_shape(int index) const;
  ::apollo::perception::inference::BlobShape* add_input_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      input_shape() const;

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::apollo::perception::inference::LayerParameter* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >*
      mutable_layer();
  private:
  const ::apollo::perception::inference::LayerParameter& _internal_layer(int index) const;
  ::apollo::perception::inference::LayerParameter* _internal_add_layer();
  public:
  const ::apollo::perception::inference::LayerParameter& layer(int index) const;
  ::apollo::perception::inference::LayerParameter* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.perception.inference.NetState state = 6;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::apollo::perception::inference::NetState& state() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NetState* release_state();
  ::apollo::perception::inference::NetState* mutable_state();
  void set_allocated_state(::apollo::perception::inference::NetState* state);
  private:
  const ::apollo::perception::inference::NetState& _internal_state() const;
  ::apollo::perception::inference::NetState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::apollo::perception::inference::NetState* state);
  ::apollo::perception::inference::NetState* unsafe_arena_release_state();

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  private:
  bool _internal_has_force_backward() const;
  public:
  void clear_force_backward();
  bool force_backward() const;
  void set_force_backward(bool value);
  private:
  bool _internal_force_backward() const;
  void _internal_set_force_backward(bool value);
  public:

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter > layers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > input_dim_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape > input_shape_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LayerParameter > layer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::apollo::perception::inference::NetState* state_;
    bool force_backward_;
    bool debug_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NetState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NetState) */ {
 public:
  inline NetState() : NetState(nullptr) {}
  ~NetState() override;
  explicit PROTOBUF_CONSTEXPR NetState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetState(const NetState& from);
  NetState(NetState&& from) noexcept
    : NetState() {
    *this = ::std::move(from);
  }

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetState& operator=(NetState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetState& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NetState& a, NetState& b) {
    a.Swap(&b);
  }
  inline void Swap(NetState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NetState";
  }
  protected:
  explicit NetState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 3,
    kLevelFieldNumber = 2,
    kPhaseFieldNumber = 1,
  };
  // repeated string stage = 3;
  int stage_size() const;
  private:
  int _internal_stage_size() const;
  public:
  void clear_stage();
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stage();
  private:
  const std::string& _internal_stage(int index) const;
  std::string* _internal_add_stage();
  public:

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::apollo::perception::inference::Phase phase() const;
  void set_phase(::apollo::perception::inference::Phase value);
  private:
  ::apollo::perception::inference::Phase _internal_phase() const;
  void _internal_set_phase(::apollo::perception::inference::Phase value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stage_;
    int32_t level_;
    int phase_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NetStateRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NetStateRule) */ {
 public:
  inline NetStateRule() : NetStateRule(nullptr) {}
  ~NetStateRule() override;
  explicit PROTOBUF_CONSTEXPR NetStateRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetStateRule(const NetStateRule& from);
  NetStateRule(NetStateRule&& from) noexcept
    : NetStateRule() {
    *this = ::std::move(from);
  }

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetStateRule& operator=(NetStateRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetStateRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NetStateRule& a, NetStateRule& b) {
    a.Swap(&b);
  }
  inline void Swap(NetStateRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetStateRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetStateRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetStateRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetStateRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetStateRule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetStateRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NetStateRule";
  }
  protected:
  explicit NetStateRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 4,
    kNotStageFieldNumber = 5,
    kPhaseFieldNumber = 1,
    kMinLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // repeated string stage = 4;
  int stage_size() const;
  private:
  int _internal_stage_size() const;
  public:
  void clear_stage();
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stage();
  private:
  const std::string& _internal_stage(int index) const;
  std::string* _internal_add_stage();
  public:

  // repeated string not_stage = 5;
  int not_stage_size() const;
  private:
  int _internal_not_stage_size() const;
  public:
  void clear_not_stage();
  const std::string& not_stage(int index) const;
  std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const std::string& value);
  void set_not_stage(int index, std::string&& value);
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  std::string* add_not_stage();
  void add_not_stage(const std::string& value);
  void add_not_stage(std::string&& value);
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_stage();
  private:
  const std::string& _internal_not_stage(int index) const;
  std::string* _internal_add_not_stage();
  public:

  // optional .apollo.perception.inference.Phase phase = 1;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::apollo::perception::inference::Phase phase() const;
  void set_phase(::apollo::perception::inference::Phase value);
  private:
  ::apollo::perception::inference::Phase _internal_phase() const;
  void _internal_set_phase(::apollo::perception::inference::Phase value);
  public:

  // optional int32 min_level = 2;
  bool has_min_level() const;
  private:
  bool _internal_has_min_level() const;
  public:
  void clear_min_level();
  int32_t min_level() const;
  void set_min_level(int32_t value);
  private:
  int32_t _internal_min_level() const;
  void _internal_set_min_level(int32_t value);
  public:

  // optional int32 max_level = 3;
  bool has_max_level() const;
  private:
  bool _internal_has_max_level() const;
  public:
  void clear_max_level();
  int32_t max_level() const;
  void set_max_level(int32_t value);
  private:
  int32_t _internal_max_level() const;
  void _internal_set_max_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetStateRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stage_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_stage_;
    int phase_;
    int32_t min_level_;
    int32_t max_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ParamSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ParamSpec) */ {
 public:
  inline ParamSpec() : ParamSpec(nullptr) {}
  ~ParamSpec() override;
  explicit PROTOBUF_CONSTEXPR ParamSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamSpec(const ParamSpec& from);
  ParamSpec(ParamSpec&& from) noexcept
    : ParamSpec() {
    *this = ::std::move(from);
  }

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamSpec& operator=(ParamSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ParamSpec& a, ParamSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ParamSpec";
  }
  protected:
  explicit ParamSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static constexpr DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DimCheckMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DimCheckMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DimCheckMode_Name.");
    return ParamSpec_DimCheckMode_Name(enum_t_value);
  }
  static inline bool DimCheckMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShareModeFieldNumber = 2,
    kLrMultFieldNumber = 3,
    kDecayMultFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  private:
  bool _internal_has_share_mode() const;
  public:
  void clear_share_mode();
  ::apollo::perception::inference::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value);
  private:
  ::apollo::perception::inference::ParamSpec_DimCheckMode _internal_share_mode() const;
  void _internal_set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value);
  public:

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  private:
  bool _internal_has_lr_mult() const;
  public:
  void clear_lr_mult();
  float lr_mult() const;
  void set_lr_mult(float value);
  private:
  float _internal_lr_mult() const;
  void _internal_set_lr_mult(float value);
  public:

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  private:
  bool _internal_has_decay_mult() const;
  public:
  void clear_decay_mult();
  float decay_mult() const;
  void set_decay_mult(float value);
  private:
  float _internal_decay_mult() const;
  void _internal_set_decay_mult(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ParamSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int share_mode_;
    float lr_mult_;
    float decay_mult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LayerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LayerParameter) */ {
 public:
  inline LayerParameter() : LayerParameter(nullptr) {}
  ~LayerParameter() override;
  explicit PROTOBUF_CONSTEXPR LayerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerParameter(const LayerParameter& from);
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayerParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LayerParameter";
  }
  protected:
  explicit LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 3,
    kTopFieldNumber = 4,
    kLossWeightFieldNumber = 5,
    kParamFieldNumber = 6,
    kBlobsFieldNumber = 7,
    kIncludeFieldNumber = 8,
    kExcludeFieldNumber = 9,
    kPropagateDownFieldNumber = 11,
    kYoloDataParamFieldNumber = 1707111,
    kDataProbParamFieldNumber = 1707112,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTransformParamFieldNumber = 100,
    kLossParamFieldNumber = 101,
    kAccuracyParamFieldNumber = 102,
    kArgmaxParamFieldNumber = 103,
    kConcatParamFieldNumber = 104,
    kContrastiveLossParamFieldNumber = 105,
    kConvolutionParamFieldNumber = 106,
    kDataParamFieldNumber = 107,
    kDropoutParamFieldNumber = 108,
    kDummyDataParamFieldNumber = 109,
    kEltwiseParamFieldNumber = 110,
    kExpParamFieldNumber = 111,
    kHdf5DataParamFieldNumber = 112,
    kHdf5OutputParamFieldNumber = 113,
    kHingeLossParamFieldNumber = 114,
    kImageDataParamFieldNumber = 115,
    kInfogainLossParamFieldNumber = 116,
    kInnerProductParamFieldNumber = 117,
    kLrnParamFieldNumber = 118,
    kMemoryDataParamFieldNumber = 119,
    kMvnParamFieldNumber = 120,
    kPoolingParamFieldNumber = 121,
    kPowerParamFieldNumber = 122,
    kReluParamFieldNumber = 123,
    kSigmoidParamFieldNumber = 124,
    kSoftmaxParamFieldNumber = 125,
    kSliceParamFieldNumber = 126,
    kTanhParamFieldNumber = 127,
    kThresholdParamFieldNumber = 128,
    kWindowDataParamFieldNumber = 129,
    kPythonParamFieldNumber = 130,
    kPreluParamFieldNumber = 131,
    kSppParamFieldNumber = 132,
    kReshapeParamFieldNumber = 133,
    kLogParamFieldNumber = 134,
    kFlattenParamFieldNumber = 135,
    kReductionParamFieldNumber = 136,
    kEmbedParamFieldNumber = 137,
    kTileParamFieldNumber = 138,
    kBatchNormParamFieldNumber = 139,
    kEluParamFieldNumber = 140,
    kBiasParamFieldNumber = 141,
    kScaleParamFieldNumber = 142,
    kInputParamFieldNumber = 143,
    kCropParamFieldNumber = 144,
    kParameterParamFieldNumber = 145,
    kRecurrentParamFieldNumber = 146,
    kAnnotatedDataParamFieldNumber = 200,
    kMultiboxLossParamFieldNumber = 201,
    kPermuteParamFieldNumber = 202,
    kPriorBoxParamFieldNumber = 203,
    kDetectionOutputParamFieldNumber = 204,
    kDetectionEvaluateParamFieldNumber = 205,
    kNormParamFieldNumber = 206,
    kVideoDataParamFieldNumber = 207,
    kDfmbPsroiPoolingParamFieldNumber = 208,
    kBboxRegParamFieldNumber = 209,
    kDetectionOutputSsdParamFieldNumber = 210,
    kRegionParamFieldNumber = 300,
    kReorgParamFieldNumber = 301,
    kRegionOutputParamFieldNumber = 310,
    kRegionProposalParamFieldNumber = 320,
    kPaddingParamFieldNumber = 1001,
    kYoloTargetParamFieldNumber = 204801,
    kYoloAnchorsParamFieldNumber = 204802,
    kYoloLossParamFieldNumber = 204803,
    kYoloDumpParamFieldNumber = 204804,
    kRoiPoolingParamFieldNumber = 8266711,
    kPhaseFieldNumber = 10,
  };
  // repeated string bottom = 3;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;
  public:
  void clear_bottom();
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bottom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bottom();
  private:
  const std::string& _internal_bottom(int index) const;
  std::string* _internal_add_bottom();
  public:

  // repeated string top = 4;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top();
  private:
  const std::string& _internal_top(int index) const;
  std::string* _internal_add_top();
  public:

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;
  public:
  void clear_loss_weight();
  private:
  float _internal_loss_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_loss_weight() const;
  void _internal_add_loss_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_loss_weight();
  public:
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      loss_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  ::apollo::perception::inference::ParamSpec* mutable_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >*
      mutable_param();
  private:
  const ::apollo::perception::inference::ParamSpec& _internal_param(int index) const;
  ::apollo::perception::inference::ParamSpec* _internal_add_param();
  public:
  const ::apollo::perception::inference::ParamSpec& param(int index) const;
  ::apollo::perception::inference::ParamSpec* add_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >&
      param() const;

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();
  private:
  const ::apollo::perception::inference::BlobProto& _internal_blobs(int index) const;
  ::apollo::perception::inference::BlobProto* _internal_add_blobs();
  public:
  const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  ::apollo::perception::inference::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  int include_size() const;
  private:
  int _internal_include_size() const;
  public:
  void clear_include();
  ::apollo::perception::inference::NetStateRule* mutable_include(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_include();
  private:
  const ::apollo::perception::inference::NetStateRule& _internal_include(int index) const;
  ::apollo::perception::inference::NetStateRule* _internal_add_include();
  public:
  const ::apollo::perception::inference::NetStateRule& include(int index) const;
  ::apollo::perception::inference::NetStateRule* add_include();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      include() const;

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;
  public:
  void clear_exclude();
  ::apollo::perception::inference::NetStateRule* mutable_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_exclude();
  private:
  const ::apollo::perception::inference::NetStateRule& _internal_exclude(int index) const;
  ::apollo::perception::inference::NetStateRule* _internal_add_exclude();
  public:
  const ::apollo::perception::inference::NetStateRule& exclude(int index) const;
  ::apollo::perception::inference::NetStateRule* add_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      exclude() const;

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  private:
  int _internal_propagate_down_size() const;
  public:
  void clear_propagate_down();
  private:
  bool _internal_propagate_down(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_propagate_down() const;
  void _internal_add_propagate_down(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_propagate_down();
  public:
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      propagate_down() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  int yolo_data_param_size() const;
  private:
  int _internal_yolo_data_param_size() const;
  public:
  void clear_yolo_data_param();
  ::apollo::perception::inference::ImageDataParameter* mutable_yolo_data_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >*
      mutable_yolo_data_param();
  private:
  const ::apollo::perception::inference::ImageDataParameter& _internal_yolo_data_param(int index) const;
  ::apollo::perception::inference::ImageDataParameter* _internal_add_yolo_data_param();
  public:
  const ::apollo::perception::inference::ImageDataParameter& yolo_data_param(int index) const;
  ::apollo::perception::inference::ImageDataParameter* add_yolo_data_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >&
      yolo_data_param() const;

  // repeated float data_prob_param = 1707112;
  int data_prob_param_size() const;
  private:
  int _internal_data_prob_param_size() const;
  public:
  void clear_data_prob_param();
  private:
  float _internal_data_prob_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_prob_param() const;
  void _internal_add_data_prob_param(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_prob_param();
  public:
  float data_prob_param(int index) const;
  void set_data_prob_param(int index, float value);
  void add_data_prob_param(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_prob_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_prob_param();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  private:
  bool _internal_has_transform_param() const;
  public:
  void clear_transform_param();
  const ::apollo::perception::inference::TransformationParameter& transform_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::TransformationParameter* release_transform_param();
  ::apollo::perception::inference::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param);
  private:
  const ::apollo::perception::inference::TransformationParameter& _internal_transform_param() const;
  ::apollo::perception::inference::TransformationParameter* _internal_mutable_transform_param();
  public:
  void unsafe_arena_set_allocated_transform_param(
      ::apollo::perception::inference::TransformationParameter* transform_param);
  ::apollo::perception::inference::TransformationParameter* unsafe_arena_release_transform_param();

  // optional .apollo.perception.inference.LossParameter loss_param = 101;
  bool has_loss_param() const;
  private:
  bool _internal_has_loss_param() const;
  public:
  void clear_loss_param();
  const ::apollo::perception::inference::LossParameter& loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::LossParameter* release_loss_param();
  ::apollo::perception::inference::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param);
  private:
  const ::apollo::perception::inference::LossParameter& _internal_loss_param() const;
  ::apollo::perception::inference::LossParameter* _internal_mutable_loss_param();
  public:
  void unsafe_arena_set_allocated_loss_param(
      ::apollo::perception::inference::LossParameter* loss_param);
  ::apollo::perception::inference::LossParameter* unsafe_arena_release_loss_param();

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  private:
  bool _internal_has_accuracy_param() const;
  public:
  void clear_accuracy_param();
  const ::apollo::perception::inference::AccuracyParameter& accuracy_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::AccuracyParameter* release_accuracy_param();
  ::apollo::perception::inference::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param);
  private:
  const ::apollo::perception::inference::AccuracyParameter& _internal_accuracy_param() const;
  ::apollo::perception::inference::AccuracyParameter* _internal_mutable_accuracy_param();
  public:
  void unsafe_arena_set_allocated_accuracy_param(
      ::apollo::perception::inference::AccuracyParameter* accuracy_param);
  ::apollo::perception::inference::AccuracyParameter* unsafe_arena_release_accuracy_param();

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  private:
  bool _internal_has_argmax_param() const;
  public:
  void clear_argmax_param();
  const ::apollo::perception::inference::ArgMaxParameter& argmax_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ArgMaxParameter* release_argmax_param();
  ::apollo::perception::inference::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param);
  private:
  const ::apollo::perception::inference::ArgMaxParameter& _internal_argmax_param() const;
  ::apollo::perception::inference::ArgMaxParameter* _internal_mutable_argmax_param();
  public:
  void unsafe_arena_set_allocated_argmax_param(
      ::apollo::perception::inference::ArgMaxParameter* argmax_param);
  ::apollo::perception::inference::ArgMaxParameter* unsafe_arena_release_argmax_param();

  // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  private:
  bool _internal_has_concat_param() const;
  public:
  void clear_concat_param();
  const ::apollo::perception::inference::ConcatParameter& concat_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ConcatParameter* release_concat_param();
  ::apollo::perception::inference::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param);
  private:
  const ::apollo::perception::inference::ConcatParameter& _internal_concat_param() const;
  ::apollo::perception::inference::ConcatParameter* _internal_mutable_concat_param();
  public:
  void unsafe_arena_set_allocated_concat_param(
      ::apollo::perception::inference::ConcatParameter* concat_param);
  ::apollo::perception::inference::ConcatParameter* unsafe_arena_release_concat_param();

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  private:
  bool _internal_has_contrastive_loss_param() const;
  public:
  void clear_contrastive_loss_param();
  const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ContrastiveLossParameter* release_contrastive_loss_param();
  ::apollo::perception::inference::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);
  private:
  const ::apollo::perception::inference::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::apollo::perception::inference::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();
  public:
  void unsafe_arena_set_allocated_contrastive_loss_param(
      ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);
  ::apollo::perception::inference::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::apollo::perception::inference::ConvolutionParameter& convolution_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ConvolutionParameter* release_convolution_param();
  ::apollo::perception::inference::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param);
  private:
  const ::apollo::perception::inference::ConvolutionParameter& _internal_convolution_param() const;
  ::apollo::perception::inference::ConvolutionParameter* _internal_mutable_convolution_param();
  public:
  void unsafe_arena_set_allocated_convolution_param(
      ::apollo::perception::inference::ConvolutionParameter* convolution_param);
  ::apollo::perception::inference::ConvolutionParameter* unsafe_arena_release_convolution_param();

  // optional .apollo.perception.inference.DataParameter data_param = 107;
  bool has_data_param() const;
  private:
  bool _internal_has_data_param() const;
  public:
  void clear_data_param();
  const ::apollo::perception::inference::DataParameter& data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DataParameter* release_data_param();
  ::apollo::perception::inference::DataParameter* mutable_data_param();
  void set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param);
  private:
  const ::apollo::perception::inference::DataParameter& _internal_data_param() const;
  ::apollo::perception::inference::DataParameter* _internal_mutable_data_param();
  public:
  void unsafe_arena_set_allocated_data_param(
      ::apollo::perception::inference::DataParameter* data_param);
  ::apollo::perception::inference::DataParameter* unsafe_arena_release_data_param();

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  private:
  bool _internal_has_dropout_param() const;
  public:
  void clear_dropout_param();
  const ::apollo::perception::inference::DropoutParameter& dropout_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DropoutParameter* release_dropout_param();
  ::apollo::perception::inference::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param);
  private:
  const ::apollo::perception::inference::DropoutParameter& _internal_dropout_param() const;
  ::apollo::perception::inference::DropoutParameter* _internal_mutable_dropout_param();
  public:
  void unsafe_arena_set_allocated_dropout_param(
      ::apollo::perception::inference::DropoutParameter* dropout_param);
  ::apollo::perception::inference::DropoutParameter* unsafe_arena_release_dropout_param();

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  private:
  bool _internal_has_dummy_data_param() const;
  public:
  void clear_dummy_data_param();
  const ::apollo::perception::inference::DummyDataParameter& dummy_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DummyDataParameter* release_dummy_data_param();
  ::apollo::perception::inference::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param);
  private:
  const ::apollo::perception::inference::DummyDataParameter& _internal_dummy_data_param() const;
  ::apollo::perception::inference::DummyDataParameter* _internal_mutable_dummy_data_param();
  public:
  void unsafe_arena_set_allocated_dummy_data_param(
      ::apollo::perception::inference::DummyDataParameter* dummy_data_param);
  ::apollo::perception::inference::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  private:
  bool _internal_has_eltwise_param() const;
  public:
  void clear_eltwise_param();
  const ::apollo::perception::inference::EltwiseParameter& eltwise_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::EltwiseParameter* release_eltwise_param();
  ::apollo::perception::inference::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param);
  private:
  const ::apollo::perception::inference::EltwiseParameter& _internal_eltwise_param() const;
  ::apollo::perception::inference::EltwiseParameter* _internal_mutable_eltwise_param();
  public:
  void unsafe_arena_set_allocated_eltwise_param(
      ::apollo::perception::inference::EltwiseParameter* eltwise_param);
  ::apollo::perception::inference::EltwiseParameter* unsafe_arena_release_eltwise_param();

  // optional .apollo.perception.inference.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  private:
  bool _internal_has_exp_param() const;
  public:
  void clear_exp_param();
  const ::apollo::perception::inference::ExpParameter& exp_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ExpParameter* release_exp_param();
  ::apollo::perception::inference::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param);
  private:
  const ::apollo::perception::inference::ExpParameter& _internal_exp_param() const;
  ::apollo::perception::inference::ExpParameter* _internal_mutable_exp_param();
  public:
  void unsafe_arena_set_allocated_exp_param(
      ::apollo::perception::inference::ExpParameter* exp_param);
  ::apollo::perception::inference::ExpParameter* unsafe_arena_release_exp_param();

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  private:
  bool _internal_has_hdf5_data_param() const;
  public:
  void clear_hdf5_data_param();
  const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HDF5DataParameter* release_hdf5_data_param();
  ::apollo::perception::inference::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);
  private:
  const ::apollo::perception::inference::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::apollo::perception::inference::HDF5DataParameter* _internal_mutable_hdf5_data_param();
  public:
  void unsafe_arena_set_allocated_hdf5_data_param(
      ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);
  ::apollo::perception::inference::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::apollo::perception::inference::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::apollo::perception::inference::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  ::apollo::perception::inference::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  private:
  bool _internal_has_hinge_loss_param() const;
  public:
  void clear_hinge_loss_param();
  const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HingeLossParameter* release_hinge_loss_param();
  ::apollo::perception::inference::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param);
  private:
  const ::apollo::perception::inference::HingeLossParameter& _internal_hinge_loss_param() const;
  ::apollo::perception::inference::HingeLossParameter* _internal_mutable_hinge_loss_param();
  public:
  void unsafe_arena_set_allocated_hinge_loss_param(
      ::apollo::perception::inference::HingeLossParameter* hinge_loss_param);
  ::apollo::perception::inference::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  private:
  bool _internal_has_image_data_param() const;
  public:
  void clear_image_data_param();
  const ::apollo::perception::inference::ImageDataParameter& image_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ImageDataParameter* release_image_data_param();
  ::apollo::perception::inference::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param);
  private:
  const ::apollo::perception::inference::ImageDataParameter& _internal_image_data_param() const;
  ::apollo::perception::inference::ImageDataParameter* _internal_mutable_image_data_param();
  public:
  void unsafe_arena_set_allocated_image_data_param(
      ::apollo::perception::inference::ImageDataParameter* image_data_param);
  ::apollo::perception::inference::ImageDataParameter* unsafe_arena_release_image_data_param();

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  private:
  bool _internal_has_infogain_loss_param() const;
  public:
  void clear_infogain_loss_param();
  const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::InfogainLossParameter* release_infogain_loss_param();
  ::apollo::perception::inference::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);
  private:
  const ::apollo::perception::inference::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::apollo::perception::inference::InfogainLossParameter* _internal_mutable_infogain_loss_param();
  public:
  void unsafe_arena_set_allocated_infogain_loss_param(
      ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);
  ::apollo::perception::inference::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  private:
  bool _internal_has_inner_product_param() const;
  public:
  void clear_inner_product_param();
  const ::apollo::perception::inference::InnerProductParameter& inner_product_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::InnerProductParameter* release_inner_product_param();
  ::apollo::perception::inference::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param);
  private:
  const ::apollo::perception::inference::InnerProductParameter& _internal_inner_product_param() const;
  ::apollo::perception::inference::InnerProductParameter* _internal_mutable_inner_product_param();
  public:
  void unsafe_arena_set_allocated_inner_product_param(
      ::apollo::perception::inference::InnerProductParameter* inner_product_param);
  ::apollo::perception::inference::InnerProductParameter* unsafe_arena_release_inner_product_param();

  // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  private:
  bool _internal_has_lrn_param() const;
  public:
  void clear_lrn_param();
  const ::apollo::perception::inference::LRNParameter& lrn_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::LRNParameter* release_lrn_param();
  ::apollo::perception::inference::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param);
  private:
  const ::apollo::perception::inference::LRNParameter& _internal_lrn_param() const;
  ::apollo::perception::inference::LRNParameter* _internal_mutable_lrn_param();
  public:
  void unsafe_arena_set_allocated_lrn_param(
      ::apollo::perception::inference::LRNParameter* lrn_param);
  ::apollo::perception::inference::LRNParameter* unsafe_arena_release_lrn_param();

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  private:
  bool _internal_has_memory_data_param() const;
  public:
  void clear_memory_data_param();
  const ::apollo::perception::inference::MemoryDataParameter& memory_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::MemoryDataParameter* release_memory_data_param();
  ::apollo::perception::inference::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param);
  private:
  const ::apollo::perception::inference::MemoryDataParameter& _internal_memory_data_param() const;
  ::apollo::perception::inference::MemoryDataParameter* _internal_mutable_memory_data_param();
  public:
  void unsafe_arena_set_allocated_memory_data_param(
      ::apollo::perception::inference::MemoryDataParameter* memory_data_param);
  ::apollo::perception::inference::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  private:
  bool _internal_has_mvn_param() const;
  public:
  void clear_mvn_param();
  const ::apollo::perception::inference::MVNParameter& mvn_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::MVNParameter* release_mvn_param();
  ::apollo::perception::inference::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param);
  private:
  const ::apollo::perception::inference::MVNParameter& _internal_mvn_param() const;
  ::apollo::perception::inference::MVNParameter* _internal_mutable_mvn_param();
  public:
  void unsafe_arena_set_allocated_mvn_param(
      ::apollo::perception::inference::MVNParameter* mvn_param);
  ::apollo::perception::inference::MVNParameter* unsafe_arena_release_mvn_param();

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::apollo::perception::inference::PoolingParameter& pooling_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PoolingParameter* release_pooling_param();
  ::apollo::perception::inference::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param);
  private:
  const ::apollo::perception::inference::PoolingParameter& _internal_pooling_param() const;
  ::apollo::perception::inference::PoolingParameter* _internal_mutable_pooling_param();
  public:
  void unsafe_arena_set_allocated_pooling_param(
      ::apollo::perception::inference::PoolingParameter* pooling_param);
  ::apollo::perception::inference::PoolingParameter* unsafe_arena_release_pooling_param();

  // optional .apollo.perception.inference.PowerParameter power_param = 122;
  bool has_power_param() const;
  private:
  bool _internal_has_power_param() const;
  public:
  void clear_power_param();
  const ::apollo::perception::inference::PowerParameter& power_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PowerParameter* release_power_param();
  ::apollo::perception::inference::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param);
  private:
  const ::apollo::perception::inference::PowerParameter& _internal_power_param() const;
  ::apollo::perception::inference::PowerParameter* _internal_mutable_power_param();
  public:
  void unsafe_arena_set_allocated_power_param(
      ::apollo::perception::inference::PowerParameter* power_param);
  ::apollo::perception::inference::PowerParameter* unsafe_arena_release_power_param();

  // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  private:
  bool _internal_has_relu_param() const;
  public:
  void clear_relu_param();
  const ::apollo::perception::inference::ReLUParameter& relu_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ReLUParameter* release_relu_param();
  ::apollo::perception::inference::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param);
  private:
  const ::apollo::perception::inference::ReLUParameter& _internal_relu_param() const;
  ::apollo::perception::inference::ReLUParameter* _internal_mutable_relu_param();
  public:
  void unsafe_arena_set_allocated_relu_param(
      ::apollo::perception::inference::ReLUParameter* relu_param);
  ::apollo::perception::inference::ReLUParameter* unsafe_arena_release_relu_param();

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  private:
  bool _internal_has_sigmoid_param() const;
  public:
  void clear_sigmoid_param();
  const ::apollo::perception::inference::SigmoidParameter& sigmoid_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SigmoidParameter* release_sigmoid_param();
  ::apollo::perception::inference::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param);
  private:
  const ::apollo::perception::inference::SigmoidParameter& _internal_sigmoid_param() const;
  ::apollo::perception::inference::SigmoidParameter* _internal_mutable_sigmoid_param();
  public:
  void unsafe_arena_set_allocated_sigmoid_param(
      ::apollo::perception::inference::SigmoidParameter* sigmoid_param);
  ::apollo::perception::inference::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  private:
  bool _internal_has_softmax_param() const;
  public:
  void clear_softmax_param();
  const ::apollo::perception::inference::SoftmaxParameter& softmax_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SoftmaxParameter* release_softmax_param();
  ::apollo::perception::inference::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param);
  private:
  const ::apollo::perception::inference::SoftmaxParameter& _internal_softmax_param() const;
  ::apollo::perception::inference::SoftmaxParameter* _internal_mutable_softmax_param();
  public:
  void unsafe_arena_set_allocated_softmax_param(
      ::apollo::perception::inference::SoftmaxParameter* softmax_param);
  ::apollo::perception::inference::SoftmaxParameter* unsafe_arena_release_softmax_param();

  // optional .apollo.perception.inference.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  private:
  bool _internal_has_slice_param() const;
  public:
  void clear_slice_param();
  const ::apollo::perception::inference::SliceParameter& slice_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SliceParameter* release_slice_param();
  ::apollo::perception::inference::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param);
  private:
  const ::apollo::perception::inference::SliceParameter& _internal_slice_param() const;
  ::apollo::perception::inference::SliceParameter* _internal_mutable_slice_param();
  public:
  void unsafe_arena_set_allocated_slice_param(
      ::apollo::perception::inference::SliceParameter* slice_param);
  ::apollo::perception::inference::SliceParameter* unsafe_arena_release_slice_param();

  // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  private:
  bool _internal_has_tanh_param() const;
  public:
  void clear_tanh_param();
  const ::apollo::perception::inference::TanHParameter& tanh_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::TanHParameter* release_tanh_param();
  ::apollo::perception::inference::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param);
  private:
  const ::apollo::perception::inference::TanHParameter& _internal_tanh_param() const;
  ::apollo::perception::inference::TanHParameter* _internal_mutable_tanh_param();
  public:
  void unsafe_arena_set_allocated_tanh_param(
      ::apollo::perception::inference::TanHParameter* tanh_param);
  ::apollo::perception::inference::TanHParameter* unsafe_arena_release_tanh_param();

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  private:
  bool _internal_has_threshold_param() const;
  public:
  void clear_threshold_param();
  const ::apollo::perception::inference::ThresholdParameter& threshold_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ThresholdParameter* release_threshold_param();
  ::apollo::perception::inference::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param);
  private:
  const ::apollo::perception::inference::ThresholdParameter& _internal_threshold_param() const;
  ::apollo::perception::inference::ThresholdParameter* _internal_mutable_threshold_param();
  public:
  void unsafe_arena_set_allocated_threshold_param(
      ::apollo::perception::inference::ThresholdParameter* threshold_param);
  ::apollo::perception::inference::ThresholdParameter* unsafe_arena_release_threshold_param();

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  private:
  bool _internal_has_window_data_param() const;
  public:
  void clear_window_data_param();
  const ::apollo::perception::inference::WindowDataParameter& window_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::WindowDataParameter* release_window_data_param();
  ::apollo::perception::inference::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param);
  private:
  const ::apollo::perception::inference::WindowDataParameter& _internal_window_data_param() const;
  ::apollo::perception::inference::WindowDataParameter* _internal_mutable_window_data_param();
  public:
  void unsafe_arena_set_allocated_window_data_param(
      ::apollo::perception::inference::WindowDataParameter* window_data_param);
  ::apollo::perception::inference::WindowDataParameter* unsafe_arena_release_window_data_param();

  // optional .apollo.perception.inference.PythonParameter python_param = 130;
  bool has_python_param() const;
  private:
  bool _internal_has_python_param() const;
  public:
  void clear_python_param();
  const ::apollo::perception::inference::PythonParameter& python_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PythonParameter* release_python_param();
  ::apollo::perception::inference::PythonParameter* mutable_python_param();
  void set_allocated_python_param(::apollo::perception::inference::PythonParameter* python_param);
  private:
  const ::apollo::perception::inference::PythonParameter& _internal_python_param() const;
  ::apollo::perception::inference::PythonParameter* _internal_mutable_python_param();
  public:
  void unsafe_arena_set_allocated_python_param(
      ::apollo::perception::inference::PythonParameter* python_param);
  ::apollo::perception::inference::PythonParameter* unsafe_arena_release_python_param();

  // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  private:
  bool _internal_has_prelu_param() const;
  public:
  void clear_prelu_param();
  const ::apollo::perception::inference::PReLUParameter& prelu_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PReLUParameter* release_prelu_param();
  ::apollo::perception::inference::PReLUParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::apollo::perception::inference::PReLUParameter* prelu_param);
  private:
  const ::apollo::perception::inference::PReLUParameter& _internal_prelu_param() const;
  ::apollo::perception::inference::PReLUParameter* _internal_mutable_prelu_param();
  public:
  void unsafe_arena_set_allocated_prelu_param(
      ::apollo::perception::inference::PReLUParameter* prelu_param);
  ::apollo::perception::inference::PReLUParameter* unsafe_arena_release_prelu_param();

  // optional .apollo.perception.inference.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  private:
  bool _internal_has_spp_param() const;
  public:
  void clear_spp_param();
  const ::apollo::perception::inference::SPPParameter& spp_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SPPParameter* release_spp_param();
  ::apollo::perception::inference::SPPParameter* mutable_spp_param();
  void set_allocated_spp_param(::apollo::perception::inference::SPPParameter* spp_param);
  private:
  const ::apollo::perception::inference::SPPParameter& _internal_spp_param() const;
  ::apollo::perception::inference::SPPParameter* _internal_mutable_spp_param();
  public:
  void unsafe_arena_set_allocated_spp_param(
      ::apollo::perception::inference::SPPParameter* spp_param);
  ::apollo::perception::inference::SPPParameter* unsafe_arena_release_spp_param();

  // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  private:
  bool _internal_has_reshape_param() const;
  public:
  void clear_reshape_param();
  const ::apollo::perception::inference::ReshapeParameter& reshape_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ReshapeParameter* release_reshape_param();
  ::apollo::perception::inference::ReshapeParameter* mutable_reshape_param();
  void set_allocated_reshape_param(::apollo::perception::inference::ReshapeParameter* reshape_param);
  private:
  const ::apollo::perception::inference::ReshapeParameter& _internal_reshape_param() const;
  ::apollo::perception::inference::ReshapeParameter* _internal_mutable_reshape_param();
  public:
  void unsafe_arena_set_allocated_reshape_param(
      ::apollo::perception::inference::ReshapeParameter* reshape_param);
  ::apollo::perception::inference::ReshapeParameter* unsafe_arena_release_reshape_param();

  // optional .apollo.perception.inference.LogParameter log_param = 134;
  bool has_log_param() const;
  private:
  bool _internal_has_log_param() const;
  public:
  void clear_log_param();
  const ::apollo::perception::inference::LogParameter& log_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::LogParameter* release_log_param();
  ::apollo::perception::inference::LogParameter* mutable_log_param();
  void set_allocated_log_param(::apollo::perception::inference::LogParameter* log_param);
  private:
  const ::apollo::perception::inference::LogParameter& _internal_log_param() const;
  ::apollo::perception::inference::LogParameter* _internal_mutable_log_param();
  public:
  void unsafe_arena_set_allocated_log_param(
      ::apollo::perception::inference::LogParameter* log_param);
  ::apollo::perception::inference::LogParameter* unsafe_arena_release_log_param();

  // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  private:
  bool _internal_has_flatten_param() const;
  public:
  void clear_flatten_param();
  const ::apollo::perception::inference::FlattenParameter& flatten_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FlattenParameter* release_flatten_param();
  ::apollo::perception::inference::FlattenParameter* mutable_flatten_param();
  void set_allocated_flatten_param(::apollo::perception::inference::FlattenParameter* flatten_param);
  private:
  const ::apollo::perception::inference::FlattenParameter& _internal_flatten_param() const;
  ::apollo::perception::inference::FlattenParameter* _internal_mutable_flatten_param();
  public:
  void unsafe_arena_set_allocated_flatten_param(
      ::apollo::perception::inference::FlattenParameter* flatten_param);
  ::apollo::perception::inference::FlattenParameter* unsafe_arena_release_flatten_param();

  // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  private:
  bool _internal_has_reduction_param() const;
  public:
  void clear_reduction_param();
  const ::apollo::perception::inference::ReductionParameter& reduction_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ReductionParameter* release_reduction_param();
  ::apollo::perception::inference::ReductionParameter* mutable_reduction_param();
  void set_allocated_reduction_param(::apollo::perception::inference::ReductionParameter* reduction_param);
  private:
  const ::apollo::perception::inference::ReductionParameter& _internal_reduction_param() const;
  ::apollo::perception::inference::ReductionParameter* _internal_mutable_reduction_param();
  public:
  void unsafe_arena_set_allocated_reduction_param(
      ::apollo::perception::inference::ReductionParameter* reduction_param);
  ::apollo::perception::inference::ReductionParameter* unsafe_arena_release_reduction_param();

  // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  private:
  bool _internal_has_embed_param() const;
  public:
  void clear_embed_param();
  const ::apollo::perception::inference::EmbedParameter& embed_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::EmbedParameter* release_embed_param();
  ::apollo::perception::inference::EmbedParameter* mutable_embed_param();
  void set_allocated_embed_param(::apollo::perception::inference::EmbedParameter* embed_param);
  private:
  const ::apollo::perception::inference::EmbedParameter& _internal_embed_param() const;
  ::apollo::perception::inference::EmbedParameter* _internal_mutable_embed_param();
  public:
  void unsafe_arena_set_allocated_embed_param(
      ::apollo::perception::inference::EmbedParameter* embed_param);
  ::apollo::perception::inference::EmbedParameter* unsafe_arena_release_embed_param();

  // optional .apollo.perception.inference.TileParameter tile_param = 138;
  bool has_tile_param() const;
  private:
  bool _internal_has_tile_param() const;
  public:
  void clear_tile_param();
  const ::apollo::perception::inference::TileParameter& tile_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::TileParameter* release_tile_param();
  ::apollo::perception::inference::TileParameter* mutable_tile_param();
  void set_allocated_tile_param(::apollo::perception::inference::TileParameter* tile_param);
  private:
  const ::apollo::perception::inference::TileParameter& _internal_tile_param() const;
  ::apollo::perception::inference::TileParameter* _internal_mutable_tile_param();
  public:
  void unsafe_arena_set_allocated_tile_param(
      ::apollo::perception::inference::TileParameter* tile_param);
  ::apollo::perception::inference::TileParameter* unsafe_arena_release_tile_param();

  // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  private:
  bool _internal_has_batch_norm_param() const;
  public:
  void clear_batch_norm_param();
  const ::apollo::perception::inference::BatchNormParameter& batch_norm_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BatchNormParameter* release_batch_norm_param();
  ::apollo::perception::inference::BatchNormParameter* mutable_batch_norm_param();
  void set_allocated_batch_norm_param(::apollo::perception::inference::BatchNormParameter* batch_norm_param);
  private:
  const ::apollo::perception::inference::BatchNormParameter& _internal_batch_norm_param() const;
  ::apollo::perception::inference::BatchNormParameter* _internal_mutable_batch_norm_param();
  public:
  void unsafe_arena_set_allocated_batch_norm_param(
      ::apollo::perception::inference::BatchNormParameter* batch_norm_param);
  ::apollo::perception::inference::BatchNormParameter* unsafe_arena_release_batch_norm_param();

  // optional .apollo.perception.inference.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  private:
  bool _internal_has_elu_param() const;
  public:
  void clear_elu_param();
  const ::apollo::perception::inference::ELUParameter& elu_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ELUParameter* release_elu_param();
  ::apollo::perception::inference::ELUParameter* mutable_elu_param();
  void set_allocated_elu_param(::apollo::perception::inference::ELUParameter* elu_param);
  private:
  const ::apollo::perception::inference::ELUParameter& _internal_elu_param() const;
  ::apollo::perception::inference::ELUParameter* _internal_mutable_elu_param();
  public:
  void unsafe_arena_set_allocated_elu_param(
      ::apollo::perception::inference::ELUParameter* elu_param);
  ::apollo::perception::inference::ELUParameter* unsafe_arena_release_elu_param();

  // optional .apollo.perception.inference.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  private:
  bool _internal_has_bias_param() const;
  public:
  void clear_bias_param();
  const ::apollo::perception::inference::BiasParameter& bias_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BiasParameter* release_bias_param();
  ::apollo::perception::inference::BiasParameter* mutable_bias_param();
  void set_allocated_bias_param(::apollo::perception::inference::BiasParameter* bias_param);
  private:
  const ::apollo::perception::inference::BiasParameter& _internal_bias_param() const;
  ::apollo::perception::inference::BiasParameter* _internal_mutable_bias_param();
  public:
  void unsafe_arena_set_allocated_bias_param(
      ::apollo::perception::inference::BiasParameter* bias_param);
  ::apollo::perception::inference::BiasParameter* unsafe_arena_release_bias_param();

  // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  private:
  bool _internal_has_scale_param() const;
  public:
  void clear_scale_param();
  const ::apollo::perception::inference::ScaleParameter& scale_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ScaleParameter* release_scale_param();
  ::apollo::perception::inference::ScaleParameter* mutable_scale_param();
  void set_allocated_scale_param(::apollo::perception::inference::ScaleParameter* scale_param);
  private:
  const ::apollo::perception::inference::ScaleParameter& _internal_scale_param() const;
  ::apollo::perception::inference::ScaleParameter* _internal_mutable_scale_param();
  public:
  void unsafe_arena_set_allocated_scale_param(
      ::apollo::perception::inference::ScaleParameter* scale_param);
  ::apollo::perception::inference::ScaleParameter* unsafe_arena_release_scale_param();

  // optional .apollo.perception.inference.InputParameter input_param = 143;
  bool has_input_param() const;
  private:
  bool _internal_has_input_param() const;
  public:
  void clear_input_param();
  const ::apollo::perception::inference::InputParameter& input_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::InputParameter* release_input_param();
  ::apollo::perception::inference::InputParameter* mutable_input_param();
  void set_allocated_input_param(::apollo::perception::inference::InputParameter* input_param);
  private:
  const ::apollo::perception::inference::InputParameter& _internal_input_param() const;
  ::apollo::perception::inference::InputParameter* _internal_mutable_input_param();
  public:
  void unsafe_arena_set_allocated_input_param(
      ::apollo::perception::inference::InputParameter* input_param);
  ::apollo::perception::inference::InputParameter* unsafe_arena_release_input_param();

  // optional .apollo.perception.inference.CropParameter crop_param = 144;
  bool has_crop_param() const;
  private:
  bool _internal_has_crop_param() const;
  public:
  void clear_crop_param();
  const ::apollo::perception::inference::CropParameter& crop_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::CropParameter* release_crop_param();
  ::apollo::perception::inference::CropParameter* mutable_crop_param();
  void set_allocated_crop_param(::apollo::perception::inference::CropParameter* crop_param);
  private:
  const ::apollo::perception::inference::CropParameter& _internal_crop_param() const;
  ::apollo::perception::inference::CropParameter* _internal_mutable_crop_param();
  public:
  void unsafe_arena_set_allocated_crop_param(
      ::apollo::perception::inference::CropParameter* crop_param);
  ::apollo::perception::inference::CropParameter* unsafe_arena_release_crop_param();

  // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
  bool has_parameter_param() const;
  private:
  bool _internal_has_parameter_param() const;
  public:
  void clear_parameter_param();
  const ::apollo::perception::inference::ParameterParameter& parameter_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ParameterParameter* release_parameter_param();
  ::apollo::perception::inference::ParameterParameter* mutable_parameter_param();
  void set_allocated_parameter_param(::apollo::perception::inference::ParameterParameter* parameter_param);
  private:
  const ::apollo::perception::inference::ParameterParameter& _internal_parameter_param() const;
  ::apollo::perception::inference::ParameterParameter* _internal_mutable_parameter_param();
  public:
  void unsafe_arena_set_allocated_parameter_param(
      ::apollo::perception::inference::ParameterParameter* parameter_param);
  ::apollo::perception::inference::ParameterParameter* unsafe_arena_release_parameter_param();

  // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
  bool has_recurrent_param() const;
  private:
  bool _internal_has_recurrent_param() const;
  public:
  void clear_recurrent_param();
  const ::apollo::perception::inference::RecurrentParameter& recurrent_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::RecurrentParameter* release_recurrent_param();
  ::apollo::perception::inference::RecurrentParameter* mutable_recurrent_param();
  void set_allocated_recurrent_param(::apollo::perception::inference::RecurrentParameter* recurrent_param);
  private:
  const ::apollo::perception::inference::RecurrentParameter& _internal_recurrent_param() const;
  ::apollo::perception::inference::RecurrentParameter* _internal_mutable_recurrent_param();
  public:
  void unsafe_arena_set_allocated_recurrent_param(
      ::apollo::perception::inference::RecurrentParameter* recurrent_param);
  ::apollo::perception::inference::RecurrentParameter* unsafe_arena_release_recurrent_param();

  // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
  bool has_annotated_data_param() const;
  private:
  bool _internal_has_annotated_data_param() const;
  public:
  void clear_annotated_data_param();
  const ::apollo::perception::inference::AnnotatedDataParameter& annotated_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::AnnotatedDataParameter* release_annotated_data_param();
  ::apollo::perception::inference::AnnotatedDataParameter* mutable_annotated_data_param();
  void set_allocated_annotated_data_param(::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param);
  private:
  const ::apollo::perception::inference::AnnotatedDataParameter& _internal_annotated_data_param() const;
  ::apollo::perception::inference::AnnotatedDataParameter* _internal_mutable_annotated_data_param();
  public:
  void unsafe_arena_set_allocated_annotated_data_param(
      ::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param);
  ::apollo::perception::inference::AnnotatedDataParameter* unsafe_arena_release_annotated_data_param();

  // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
  bool has_multibox_loss_param() const;
  private:
  bool _internal_has_multibox_loss_param() const;
  public:
  void clear_multibox_loss_param();
  const ::apollo::perception::inference::MultiBoxLossParameter& multibox_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::MultiBoxLossParameter* release_multibox_loss_param();
  ::apollo::perception::inference::MultiBoxLossParameter* mutable_multibox_loss_param();
  void set_allocated_multibox_loss_param(::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param);
  private:
  const ::apollo::perception::inference::MultiBoxLossParameter& _internal_multibox_loss_param() const;
  ::apollo::perception::inference::MultiBoxLossParameter* _internal_mutable_multibox_loss_param();
  public:
  void unsafe_arena_set_allocated_multibox_loss_param(
      ::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param);
  ::apollo::perception::inference::MultiBoxLossParameter* unsafe_arena_release_multibox_loss_param();

  // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
  bool has_permute_param() const;
  private:
  bool _internal_has_permute_param() const;
  public:
  void clear_permute_param();
  const ::apollo::perception::inference::PermuteParameter& permute_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PermuteParameter* release_permute_param();
  ::apollo::perception::inference::PermuteParameter* mutable_permute_param();
  void set_allocated_permute_param(::apollo::perception::inference::PermuteParameter* permute_param);
  private:
  const ::apollo::perception::inference::PermuteParameter& _internal_permute_param() const;
  ::apollo::perception::inference::PermuteParameter* _internal_mutable_permute_param();
  public:
  void unsafe_arena_set_allocated_permute_param(
      ::apollo::perception::inference::PermuteParameter* permute_param);
  ::apollo::perception::inference::PermuteParameter* unsafe_arena_release_permute_param();

  // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
  bool has_prior_box_param() const;
  private:
  bool _internal_has_prior_box_param() const;
  public:
  void clear_prior_box_param();
  const ::apollo::perception::inference::PriorBoxParameter& prior_box_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PriorBoxParameter* release_prior_box_param();
  ::apollo::perception::inference::PriorBoxParameter* mutable_prior_box_param();
  void set_allocated_prior_box_param(::apollo::perception::inference::PriorBoxParameter* prior_box_param);
  private:
  const ::apollo::perception::inference::PriorBoxParameter& _internal_prior_box_param() const;
  ::apollo::perception::inference::PriorBoxParameter* _internal_mutable_prior_box_param();
  public:
  void unsafe_arena_set_allocated_prior_box_param(
      ::apollo::perception::inference::PriorBoxParameter* prior_box_param);
  ::apollo::perception::inference::PriorBoxParameter* unsafe_arena_release_prior_box_param();

  // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::apollo::perception::inference::DetectionOutputParameter& detection_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DetectionOutputParameter* release_detection_output_param();
  ::apollo::perception::inference::DetectionOutputParameter* mutable_detection_output_param();
  void set_allocated_detection_output_param(::apollo::perception::inference::DetectionOutputParameter* detection_output_param);
  private:
  const ::apollo::perception::inference::DetectionOutputParameter& _internal_detection_output_param() const;
  ::apollo::perception::inference::DetectionOutputParameter* _internal_mutable_detection_output_param();
  public:
  void unsafe_arena_set_allocated_detection_output_param(
      ::apollo::perception::inference::DetectionOutputParameter* detection_output_param);
  ::apollo::perception::inference::DetectionOutputParameter* unsafe_arena_release_detection_output_param();

  // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
  bool has_detection_evaluate_param() const;
  private:
  bool _internal_has_detection_evaluate_param() const;
  public:
  void clear_detection_evaluate_param();
  const ::apollo::perception::inference::DetectionEvaluateParameter& detection_evaluate_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DetectionEvaluateParameter* release_detection_evaluate_param();
  ::apollo::perception::inference::DetectionEvaluateParameter* mutable_detection_evaluate_param();
  void set_allocated_detection_evaluate_param(::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param);
  private:
  const ::apollo::perception::inference::DetectionEvaluateParameter& _internal_detection_evaluate_param() const;
  ::apollo::perception::inference::DetectionEvaluateParameter* _internal_mutable_detection_evaluate_param();
  public:
  void unsafe_arena_set_allocated_detection_evaluate_param(
      ::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param);
  ::apollo::perception::inference::DetectionEvaluateParameter* unsafe_arena_release_detection_evaluate_param();

  // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
  bool has_norm_param() const;
  private:
  bool _internal_has_norm_param() const;
  public:
  void clear_norm_param();
  const ::apollo::perception::inference::NormalizeParameter& norm_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NormalizeParameter* release_norm_param();
  ::apollo::perception::inference::NormalizeParameter* mutable_norm_param();
  void set_allocated_norm_param(::apollo::perception::inference::NormalizeParameter* norm_param);
  private:
  const ::apollo::perception::inference::NormalizeParameter& _internal_norm_param() const;
  ::apollo::perception::inference::NormalizeParameter* _internal_mutable_norm_param();
  public:
  void unsafe_arena_set_allocated_norm_param(
      ::apollo::perception::inference::NormalizeParameter* norm_param);
  ::apollo::perception::inference::NormalizeParameter* unsafe_arena_release_norm_param();

  // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
  bool has_video_data_param() const;
  private:
  bool _internal_has_video_data_param() const;
  public:
  void clear_video_data_param();
  const ::apollo::perception::inference::VideoDataParameter& video_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::VideoDataParameter* release_video_data_param();
  ::apollo::perception::inference::VideoDataParameter* mutable_video_data_param();
  void set_allocated_video_data_param(::apollo::perception::inference::VideoDataParameter* video_data_param);
  private:
  const ::apollo::perception::inference::VideoDataParameter& _internal_video_data_param() const;
  ::apollo::perception::inference::VideoDataParameter* _internal_mutable_video_data_param();
  public:
  void unsafe_arena_set_allocated_video_data_param(
      ::apollo::perception::inference::VideoDataParameter* video_data_param);
  ::apollo::perception::inference::VideoDataParameter* unsafe_arena_release_video_data_param();

  // optional .apollo.perception.inference.DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
  bool has_dfmb_psroi_pooling_param() const;
  private:
  bool _internal_has_dfmb_psroi_pooling_param() const;
  public:
  void clear_dfmb_psroi_pooling_param();
  const ::apollo::perception::inference::DFMBPSROIAlignParameter& dfmb_psroi_pooling_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DFMBPSROIAlignParameter* release_dfmb_psroi_pooling_param();
  ::apollo::perception::inference::DFMBPSROIAlignParameter* mutable_dfmb_psroi_pooling_param();
  void set_allocated_dfmb_psroi_pooling_param(::apollo::perception::inference::DFMBPSROIAlignParameter* dfmb_psroi_pooling_param);
  private:
  const ::apollo::perception::inference::DFMBPSROIAlignParameter& _internal_dfmb_psroi_pooling_param() const;
  ::apollo::perception::inference::DFMBPSROIAlignParameter* _internal_mutable_dfmb_psroi_pooling_param();
  public:
  void unsafe_arena_set_allocated_dfmb_psroi_pooling_param(
      ::apollo::perception::inference::DFMBPSROIAlignParameter* dfmb_psroi_pooling_param);
  ::apollo::perception::inference::DFMBPSROIAlignParameter* unsafe_arena_release_dfmb_psroi_pooling_param();

  // optional .apollo.perception.inference.BBoxRegParameter bbox_reg_param = 209;
  bool has_bbox_reg_param() const;
  private:
  bool _internal_has_bbox_reg_param() const;
  public:
  void clear_bbox_reg_param();
  const ::apollo::perception::inference::BBoxRegParameter& bbox_reg_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BBoxRegParameter* release_bbox_reg_param();
  ::apollo::perception::inference::BBoxRegParameter* mutable_bbox_reg_param();
  void set_allocated_bbox_reg_param(::apollo::perception::inference::BBoxRegParameter* bbox_reg_param);
  private:
  const ::apollo::perception::inference::BBoxRegParameter& _internal_bbox_reg_param() const;
  ::apollo::perception::inference::BBoxRegParameter* _internal_mutable_bbox_reg_param();
  public:
  void unsafe_arena_set_allocated_bbox_reg_param(
      ::apollo::perception::inference::BBoxRegParameter* bbox_reg_param);
  ::apollo::perception::inference::BBoxRegParameter* unsafe_arena_release_bbox_reg_param();

  // optional .apollo.perception.inference.DetectionOutputSSDParameter detection_output_ssd_param = 210;
  bool has_detection_output_ssd_param() const;
  private:
  bool _internal_has_detection_output_ssd_param() const;
  public:
  void clear_detection_output_ssd_param();
  const ::apollo::perception::inference::DetectionOutputSSDParameter& detection_output_ssd_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DetectionOutputSSDParameter* release_detection_output_ssd_param();
  ::apollo::perception::inference::DetectionOutputSSDParameter* mutable_detection_output_ssd_param();
  void set_allocated_detection_output_ssd_param(::apollo::perception::inference::DetectionOutputSSDParameter* detection_output_ssd_param);
  private:
  const ::apollo::perception::inference::DetectionOutputSSDParameter& _internal_detection_output_ssd_param() const;
  ::apollo::perception::inference::DetectionOutputSSDParameter* _internal_mutable_detection_output_ssd_param();
  public:
  void unsafe_arena_set_allocated_detection_output_ssd_param(
      ::apollo::perception::inference::DetectionOutputSSDParameter* detection_output_ssd_param);
  ::apollo::perception::inference::DetectionOutputSSDParameter* unsafe_arena_release_detection_output_ssd_param();

  // optional .apollo.perception.inference.RegionParameter region_param = 300;
  bool has_region_param() const;
  private:
  bool _internal_has_region_param() const;
  public:
  void clear_region_param();
  const ::apollo::perception::inference::RegionParameter& region_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::RegionParameter* release_region_param();
  ::apollo::perception::inference::RegionParameter* mutable_region_param();
  void set_allocated_region_param(::apollo::perception::inference::RegionParameter* region_param);
  private:
  const ::apollo::perception::inference::RegionParameter& _internal_region_param() const;
  ::apollo::perception::inference::RegionParameter* _internal_mutable_region_param();
  public:
  void unsafe_arena_set_allocated_region_param(
      ::apollo::perception::inference::RegionParameter* region_param);
  ::apollo::perception::inference::RegionParameter* unsafe_arena_release_region_param();

  // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
  bool has_reorg_param() const;
  private:
  bool _internal_has_reorg_param() const;
  public:
  void clear_reorg_param();
  const ::apollo::perception::inference::ReorgParameter& reorg_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ReorgParameter* release_reorg_param();
  ::apollo::perception::inference::ReorgParameter* mutable_reorg_param();
  void set_allocated_reorg_param(::apollo::perception::inference::ReorgParameter* reorg_param);
  private:
  const ::apollo::perception::inference::ReorgParameter& _internal_reorg_param() const;
  ::apollo::perception::inference::ReorgParameter* _internal_mutable_reorg_param();
  public:
  void unsafe_arena_set_allocated_reorg_param(
      ::apollo::perception::inference::ReorgParameter* reorg_param);
  ::apollo::perception::inference::ReorgParameter* unsafe_arena_release_reorg_param();

  // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
  bool has_region_output_param() const;
  private:
  bool _internal_has_region_output_param() const;
  public:
  void clear_region_output_param();
  const ::apollo::perception::inference::RegionOutputParameter& region_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::RegionOutputParameter* release_region_output_param();
  ::apollo::perception::inference::RegionOutputParameter* mutable_region_output_param();
  void set_allocated_region_output_param(::apollo::perception::inference::RegionOutputParameter* region_output_param);
  private:
  const ::apollo::perception::inference::RegionOutputParameter& _internal_region_output_param() const;
  ::apollo::perception::inference::RegionOutputParameter* _internal_mutable_region_output_param();
  public:
  void unsafe_arena_set_allocated_region_output_param(
      ::apollo::perception::inference::RegionOutputParameter* region_output_param);
  ::apollo::perception::inference::RegionOutputParameter* unsafe_arena_release_region_output_param();

  // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
  bool has_region_proposal_param() const;
  private:
  bool _internal_has_region_proposal_param() const;
  public:
  void clear_region_proposal_param();
  const ::apollo::perception::inference::RegionProposalParameter& region_proposal_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::RegionProposalParameter* release_region_proposal_param();
  ::apollo::perception::inference::RegionProposalParameter* mutable_region_proposal_param();
  void set_allocated_region_proposal_param(::apollo::perception::inference::RegionProposalParameter* region_proposal_param);
  private:
  const ::apollo::perception::inference::RegionProposalParameter& _internal_region_proposal_param() const;
  ::apollo::perception::inference::RegionProposalParameter* _internal_mutable_region_proposal_param();
  public:
  void unsafe_arena_set_allocated_region_proposal_param(
      ::apollo::perception::inference::RegionProposalParameter* region_proposal_param);
  ::apollo::perception::inference::RegionProposalParameter* unsafe_arena_release_region_proposal_param();

  // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
  bool has_padding_param() const;
  private:
  bool _internal_has_padding_param() const;
  public:
  void clear_padding_param();
  const ::apollo::perception::inference::PaddingParameter& padding_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PaddingParameter* release_padding_param();
  ::apollo::perception::inference::PaddingParameter* mutable_padding_param();
  void set_allocated_padding_param(::apollo::perception::inference::PaddingParameter* padding_param);
  private:
  const ::apollo::perception::inference::PaddingParameter& _internal_padding_param() const;
  ::apollo::perception::inference::PaddingParameter* _internal_mutable_padding_param();
  public:
  void unsafe_arena_set_allocated_padding_param(
      ::apollo::perception::inference::PaddingParameter* padding_param);
  ::apollo::perception::inference::PaddingParameter* unsafe_arena_release_padding_param();

  // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
  bool has_yolo_target_param() const;
  private:
  bool _internal_has_yolo_target_param() const;
  public:
  void clear_yolo_target_param();
  const ::apollo::perception::inference::YoloTargetParameter& yolo_target_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::YoloTargetParameter* release_yolo_target_param();
  ::apollo::perception::inference::YoloTargetParameter* mutable_yolo_target_param();
  void set_allocated_yolo_target_param(::apollo::perception::inference::YoloTargetParameter* yolo_target_param);
  private:
  const ::apollo::perception::inference::YoloTargetParameter& _internal_yolo_target_param() const;
  ::apollo::perception::inference::YoloTargetParameter* _internal_mutable_yolo_target_param();
  public:
  void unsafe_arena_set_allocated_yolo_target_param(
      ::apollo::perception::inference::YoloTargetParameter* yolo_target_param);
  ::apollo::perception::inference::YoloTargetParameter* unsafe_arena_release_yolo_target_param();

  // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
  bool has_yolo_anchors_param() const;
  private:
  bool _internal_has_yolo_anchors_param() const;
  public:
  void clear_yolo_anchors_param();
  const ::apollo::perception::inference::YoloAnchorsParameter& yolo_anchors_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::YoloAnchorsParameter* release_yolo_anchors_param();
  ::apollo::perception::inference::YoloAnchorsParameter* mutable_yolo_anchors_param();
  void set_allocated_yolo_anchors_param(::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param);
  private:
  const ::apollo::perception::inference::YoloAnchorsParameter& _internal_yolo_anchors_param() const;
  ::apollo::perception::inference::YoloAnchorsParameter* _internal_mutable_yolo_anchors_param();
  public:
  void unsafe_arena_set_allocated_yolo_anchors_param(
      ::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param);
  ::apollo::perception::inference::YoloAnchorsParameter* unsafe_arena_release_yolo_anchors_param();

  // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
  bool has_yolo_loss_param() const;
  private:
  bool _internal_has_yolo_loss_param() const;
  public:
  void clear_yolo_loss_param();
  const ::apollo::perception::inference::YoloLossParameter& yolo_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::YoloLossParameter* release_yolo_loss_param();
  ::apollo::perception::inference::YoloLossParameter* mutable_yolo_loss_param();
  void set_allocated_yolo_loss_param(::apollo::perception::inference::YoloLossParameter* yolo_loss_param);
  private:
  const ::apollo::perception::inference::YoloLossParameter& _internal_yolo_loss_param() const;
  ::apollo::perception::inference::YoloLossParameter* _internal_mutable_yolo_loss_param();
  public:
  void unsafe_arena_set_allocated_yolo_loss_param(
      ::apollo::perception::inference::YoloLossParameter* yolo_loss_param);
  ::apollo::perception::inference::YoloLossParameter* unsafe_arena_release_yolo_loss_param();

  // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
  bool has_yolo_dump_param() const;
  private:
  bool _internal_has_yolo_dump_param() const;
  public:
  void clear_yolo_dump_param();
  const ::apollo::perception::inference::YoloDumpParameter& yolo_dump_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::YoloDumpParameter* release_yolo_dump_param();
  ::apollo::perception::inference::YoloDumpParameter* mutable_yolo_dump_param();
  void set_allocated_yolo_dump_param(::apollo::perception::inference::YoloDumpParameter* yolo_dump_param);
  private:
  const ::apollo::perception::inference::YoloDumpParameter& _internal_yolo_dump_param() const;
  ::apollo::perception::inference::YoloDumpParameter* _internal_mutable_yolo_dump_param();
  public:
  void unsafe_arena_set_allocated_yolo_dump_param(
      ::apollo::perception::inference::YoloDumpParameter* yolo_dump_param);
  ::apollo::perception::inference::YoloDumpParameter* unsafe_arena_release_yolo_dump_param();

  // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
  bool has_roi_pooling_param() const;
  private:
  bool _internal_has_roi_pooling_param() const;
  public:
  void clear_roi_pooling_param();
  const ::apollo::perception::inference::ROIPoolingParameter& roi_pooling_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ROIPoolingParameter* release_roi_pooling_param();
  ::apollo::perception::inference::ROIPoolingParameter* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param);
  private:
  const ::apollo::perception::inference::ROIPoolingParameter& _internal_roi_pooling_param() const;
  ::apollo::perception::inference::ROIPoolingParameter* _internal_mutable_roi_pooling_param();
  public:
  void unsafe_arena_set_allocated_roi_pooling_param(
      ::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param);
  ::apollo::perception::inference::ROIPoolingParameter* unsafe_arena_release_roi_pooling_param();

  // optional .apollo.perception.inference.Phase phase = 10;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  ::apollo::perception::inference::Phase phase() const;
  void set_phase(::apollo::perception::inference::Phase value);
  private:
  ::apollo::perception::inference::Phase _internal_phase() const;
  void _internal_set_phase(::apollo::perception::inference::Phase value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bottom_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > loss_weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ParamSpec > param_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > include_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > exclude_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > propagate_down_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter > yolo_data_param_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_prob_param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::apollo::perception::inference::TransformationParameter* transform_param_;
    ::apollo::perception::inference::LossParameter* loss_param_;
    ::apollo::perception::inference::AccuracyParameter* accuracy_param_;
    ::apollo::perception::inference::ArgMaxParameter* argmax_param_;
    ::apollo::perception::inference::ConcatParameter* concat_param_;
    ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param_;
    ::apollo::perception::inference::ConvolutionParameter* convolution_param_;
    ::apollo::perception::inference::DataParameter* data_param_;
    ::apollo::perception::inference::DropoutParameter* dropout_param_;
    ::apollo::perception::inference::DummyDataParameter* dummy_data_param_;
    ::apollo::perception::inference::EltwiseParameter* eltwise_param_;
    ::apollo::perception::inference::ExpParameter* exp_param_;
    ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param_;
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
    ::apollo::perception::inference::HingeLossParameter* hinge_loss_param_;
    ::apollo::perception::inference::ImageDataParameter* image_data_param_;
    ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param_;
    ::apollo::perception::inference::InnerProductParameter* inner_product_param_;
    ::apollo::perception::inference::LRNParameter* lrn_param_;
    ::apollo::perception::inference::MemoryDataParameter* memory_data_param_;
    ::apollo::perception::inference::MVNParameter* mvn_param_;
    ::apollo::perception::inference::PoolingParameter* pooling_param_;
    ::apollo::perception::inference::PowerParameter* power_param_;
    ::apollo::perception::inference::ReLUParameter* relu_param_;
    ::apollo::perception::inference::SigmoidParameter* sigmoid_param_;
    ::apollo::perception::inference::SoftmaxParameter* softmax_param_;
    ::apollo::perception::inference::SliceParameter* slice_param_;
    ::apollo::perception::inference::TanHParameter* tanh_param_;
    ::apollo::perception::inference::ThresholdParameter* threshold_param_;
    ::apollo::perception::inference::WindowDataParameter* window_data_param_;
    ::apollo::perception::inference::PythonParameter* python_param_;
    ::apollo::perception::inference::PReLUParameter* prelu_param_;
    ::apollo::perception::inference::SPPParameter* spp_param_;
    ::apollo::perception::inference::ReshapeParameter* reshape_param_;
    ::apollo::perception::inference::LogParameter* log_param_;
    ::apollo::perception::inference::FlattenParameter* flatten_param_;
    ::apollo::perception::inference::ReductionParameter* reduction_param_;
    ::apollo::perception::inference::EmbedParameter* embed_param_;
    ::apollo::perception::inference::TileParameter* tile_param_;
    ::apollo::perception::inference::BatchNormParameter* batch_norm_param_;
    ::apollo::perception::inference::ELUParameter* elu_param_;
    ::apollo::perception::inference::BiasParameter* bias_param_;
    ::apollo::perception::inference::ScaleParameter* scale_param_;
    ::apollo::perception::inference::InputParameter* input_param_;
    ::apollo::perception::inference::CropParameter* crop_param_;
    ::apollo::perception::inference::ParameterParameter* parameter_param_;
    ::apollo::perception::inference::RecurrentParameter* recurrent_param_;
    ::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param_;
    ::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param_;
    ::apollo::perception::inference::PermuteParameter* permute_param_;
    ::apollo::perception::inference::PriorBoxParameter* prior_box_param_;
    ::apollo::perception::inference::DetectionOutputParameter* detection_output_param_;
    ::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param_;
    ::apollo::perception::inference::NormalizeParameter* norm_param_;
    ::apollo::perception::inference::VideoDataParameter* video_data_param_;
    ::apollo::perception::inference::DFMBPSROIAlignParameter* dfmb_psroi_pooling_param_;
    ::apollo::perception::inference::BBoxRegParameter* bbox_reg_param_;
    ::apollo::perception::inference::DetectionOutputSSDParameter* detection_output_ssd_param_;
    ::apollo::perception::inference::RegionParameter* region_param_;
    ::apollo::perception::inference::ReorgParameter* reorg_param_;
    ::apollo::perception::inference::RegionOutputParameter* region_output_param_;
    ::apollo::perception::inference::RegionProposalParameter* region_proposal_param_;
    ::apollo::perception::inference::PaddingParameter* padding_param_;
    ::apollo::perception::inference::YoloTargetParameter* yolo_target_param_;
    ::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param_;
    ::apollo::perception::inference::YoloLossParameter* yolo_loss_param_;
    ::apollo::perception::inference::YoloDumpParameter* yolo_dump_param_;
    ::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param_;
    int phase_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class TransformationParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.TransformationParameter) */ {
 public:
  inline TransformationParameter() : TransformationParameter(nullptr) {}
  ~TransformationParameter() override;
  explicit PROTOBUF_CONSTEXPR TransformationParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformationParameter(const TransformationParameter& from);
  TransformationParameter(TransformationParameter&& from) noexcept
    : TransformationParameter() {
    *this = ::std::move(from);
  }

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformationParameter& operator=(TransformationParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformationParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TransformationParameter& a, TransformationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformationParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformationParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformationParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformationParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformationParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.TransformationParameter";
  }
  protected:
  explicit TransformationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanValueFieldNumber = 5,
    kMeanFileFieldNumber = 4,
    kResizeParamFieldNumber = 8,
    kNoiseParamFieldNumber = 9,
    kEmitConstraintFieldNumber = 10,
    kDistortParamFieldNumber = 13,
    kExpandParamFieldNumber = 14,
    kCropSizeFieldNumber = 3,
    kMirrorFieldNumber = 2,
    kForceColorFieldNumber = 6,
    kForceGrayFieldNumber = 7,
    kCropHFieldNumber = 11,
    kCropWFieldNumber = 12,
    kJitterFieldNumber = 15,
    kScaleFieldNumber = 1,
  };
  // repeated float mean_value = 5;
  int mean_value_size() const;
  private:
  int _internal_mean_value_size() const;
  public:
  void clear_mean_value();
  private:
  float _internal_mean_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mean_value() const;
  void _internal_add_mean_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mean_value();
  public:
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mean_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mean_value();

  // optional string mean_file = 4;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mean_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
  bool has_resize_param() const;
  private:
  bool _internal_has_resize_param() const;
  public:
  void clear_resize_param();
  const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ResizeParameter* release_resize_param();
  ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);
  private:
  const ::apollo::perception::inference::ResizeParameter& _internal_resize_param() const;
  ::apollo::perception::inference::ResizeParameter* _internal_mutable_resize_param();
  public:
  void unsafe_arena_set_allocated_resize_param(
      ::apollo::perception::inference::ResizeParameter* resize_param);
  ::apollo::perception::inference::ResizeParameter* unsafe_arena_release_resize_param();

  // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
  bool has_noise_param() const;
  private:
  bool _internal_has_noise_param() const;
  public:
  void clear_noise_param();
  const ::apollo::perception::inference::NoiseParameter& noise_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NoiseParameter* release_noise_param();
  ::apollo::perception::inference::NoiseParameter* mutable_noise_param();
  void set_allocated_noise_param(::apollo::perception::inference::NoiseParameter* noise_param);
  private:
  const ::apollo::perception::inference::NoiseParameter& _internal_noise_param() const;
  ::apollo::perception::inference::NoiseParameter* _internal_mutable_noise_param();
  public:
  void unsafe_arena_set_allocated_noise_param(
      ::apollo::perception::inference::NoiseParameter* noise_param);
  ::apollo::perception::inference::NoiseParameter* unsafe_arena_release_noise_param();

  // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
  bool has_emit_constraint() const;
  private:
  bool _internal_has_emit_constraint() const;
  public:
  void clear_emit_constraint();
  const ::apollo::perception::inference::EmitConstraint& emit_constraint() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::EmitConstraint* release_emit_constraint();
  ::apollo::perception::inference::EmitConstraint* mutable_emit_constraint();
  void set_allocated_emit_constraint(::apollo::perception::inference::EmitConstraint* emit_constraint);
  private:
  const ::apollo::perception::inference::EmitConstraint& _internal_emit_constraint() const;
  ::apollo::perception::inference::EmitConstraint* _internal_mutable_emit_constraint();
  public:
  void unsafe_arena_set_allocated_emit_constraint(
      ::apollo::perception::inference::EmitConstraint* emit_constraint);
  ::apollo::perception::inference::EmitConstraint* unsafe_arena_release_emit_constraint();

  // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
  bool has_distort_param() const;
  private:
  bool _internal_has_distort_param() const;
  public:
  void clear_distort_param();
  const ::apollo::perception::inference::DistortionParameter& distort_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DistortionParameter* release_distort_param();
  ::apollo::perception::inference::DistortionParameter* mutable_distort_param();
  void set_allocated_distort_param(::apollo::perception::inference::DistortionParameter* distort_param);
  private:
  const ::apollo::perception::inference::DistortionParameter& _internal_distort_param() const;
  ::apollo::perception::inference::DistortionParameter* _internal_mutable_distort_param();
  public:
  void unsafe_arena_set_allocated_distort_param(
      ::apollo::perception::inference::DistortionParameter* distort_param);
  ::apollo::perception::inference::DistortionParameter* unsafe_arena_release_distort_param();

  // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
  bool has_expand_param() const;
  private:
  bool _internal_has_expand_param() const;
  public:
  void clear_expand_param();
  const ::apollo::perception::inference::ExpansionParameter& expand_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ExpansionParameter* release_expand_param();
  ::apollo::perception::inference::ExpansionParameter* mutable_expand_param();
  void set_allocated_expand_param(::apollo::perception::inference::ExpansionParameter* expand_param);
  private:
  const ::apollo::perception::inference::ExpansionParameter& _internal_expand_param() const;
  ::apollo::perception::inference::ExpansionParameter* _internal_mutable_expand_param();
  public:
  void unsafe_arena_set_allocated_expand_param(
      ::apollo::perception::inference::ExpansionParameter* expand_param);
  ::apollo::perception::inference::ExpansionParameter* unsafe_arena_release_expand_param();

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  uint32_t crop_size() const;
  void set_crop_size(uint32_t value);
  private:
  uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(uint32_t value);
  public:

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  private:
  bool _internal_has_force_color() const;
  public:
  void clear_force_color();
  bool force_color() const;
  void set_force_color(bool value);
  private:
  bool _internal_force_color() const;
  void _internal_set_force_color(bool value);
  public:

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  private:
  bool _internal_has_force_gray() const;
  public:
  void clear_force_gray();
  bool force_gray() const;
  void set_force_gray(bool value);
  private:
  bool _internal_force_gray() const;
  void _internal_set_force_gray(bool value);
  public:

  // optional uint32 crop_h = 11 [default = 0];
  bool has_crop_h() const;
  private:
  bool _internal_has_crop_h() const;
  public:
  void clear_crop_h();
  uint32_t crop_h() const;
  void set_crop_h(uint32_t value);
  private:
  uint32_t _internal_crop_h() const;
  void _internal_set_crop_h(uint32_t value);
  public:

  // optional uint32 crop_w = 12 [default = 0];
  bool has_crop_w() const;
  private:
  bool _internal_has_crop_w() const;
  public:
  void clear_crop_w();
  uint32_t crop_w() const;
  void set_crop_w(uint32_t value);
  private:
  uint32_t _internal_crop_w() const;
  void _internal_set_crop_w(uint32_t value);
  public:

  // optional float jitter = 15;
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  float jitter() const;
  void set_jitter(float value);
  private:
  float _internal_jitter() const;
  void _internal_set_jitter(float value);
  public:

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TransformationParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mean_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
    ::apollo::perception::inference::ResizeParameter* resize_param_;
    ::apollo::perception::inference::NoiseParameter* noise_param_;
    ::apollo::perception::inference::EmitConstraint* emit_constraint_;
    ::apollo::perception::inference::DistortionParameter* distort_param_;
    ::apollo::perception::inference::ExpansionParameter* expand_param_;
    uint32_t crop_size_;
    bool mirror_;
    bool force_color_;
    bool force_gray_;
    uint32_t crop_h_;
    uint32_t crop_w_;
    float jitter_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ResizeParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ResizeParameter) */ {
 public:
  inline ResizeParameter() : ResizeParameter(nullptr) {}
  ~ResizeParameter() override;
  explicit PROTOBUF_CONSTEXPR ResizeParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResizeParameter(const ResizeParameter& from);
  ResizeParameter(ResizeParameter&& from) noexcept
    : ResizeParameter() {
    *this = ::std::move(from);
  }

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeParameter& operator=(ResizeParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResizeParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResizeParameter* internal_default_instance() {
    return reinterpret_cast<const ResizeParameter*>(
               &_ResizeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResizeParameter& a, ResizeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResizeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResizeParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResizeParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResizeParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ResizeParameter";
  }
  protected:
  explicit ResizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Resize_mode Resize_mode;
  static constexpr Resize_mode WARP =
    ResizeParameter_Resize_mode_WARP;
  static constexpr Resize_mode FIT_SMALL_SIZE =
    ResizeParameter_Resize_mode_FIT_SMALL_SIZE;
  static constexpr Resize_mode FIT_LARGE_SIZE_AND_PAD =
    ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
  static inline bool Resize_mode_IsValid(int value) {
    return ResizeParameter_Resize_mode_IsValid(value);
  }
  static constexpr Resize_mode Resize_mode_MIN =
    ResizeParameter_Resize_mode_Resize_mode_MIN;
  static constexpr Resize_mode Resize_mode_MAX =
    ResizeParameter_Resize_mode_Resize_mode_MAX;
  static constexpr int Resize_mode_ARRAYSIZE =
    ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resize_mode_descriptor() {
    return ResizeParameter_Resize_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Resize_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resize_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resize_mode_Name.");
    return ResizeParameter_Resize_mode_Name(enum_t_value);
  }
  static inline bool Resize_mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Resize_mode* value) {
    return ResizeParameter_Resize_mode_Parse(name, value);
  }

  typedef ResizeParameter_Pad_mode Pad_mode;
  static constexpr Pad_mode CONSTANT =
    ResizeParameter_Pad_mode_CONSTANT;
  static constexpr Pad_mode MIRRORED =
    ResizeParameter_Pad_mode_MIRRORED;
  static constexpr Pad_mode REPEAT_NEAREST =
    ResizeParameter_Pad_mode_REPEAT_NEAREST;
  static inline bool Pad_mode_IsValid(int value) {
    return ResizeParameter_Pad_mode_IsValid(value);
  }
  static constexpr Pad_mode Pad_mode_MIN =
    ResizeParameter_Pad_mode_Pad_mode_MIN;
  static constexpr Pad_mode Pad_mode_MAX =
    ResizeParameter_Pad_mode_Pad_mode_MAX;
  static constexpr int Pad_mode_ARRAYSIZE =
    ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pad_mode_descriptor() {
    return ResizeParameter_Pad_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Pad_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pad_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pad_mode_Name.");
    return ResizeParameter_Pad_mode_Name(enum_t_value);
  }
  static inline bool Pad_mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Pad_mode* value) {
    return ResizeParameter_Pad_mode_Parse(name, value);
  }

  typedef ResizeParameter_Interp_mode Interp_mode;
  static constexpr Interp_mode LINEAR =
    ResizeParameter_Interp_mode_LINEAR;
  static constexpr Interp_mode AREA =
    ResizeParameter_Interp_mode_AREA;
  static constexpr Interp_mode NEAREST =
    ResizeParameter_Interp_mode_NEAREST;
  static constexpr Interp_mode CUBIC =
    ResizeParameter_Interp_mode_CUBIC;
  static constexpr Interp_mode LANCZOS4 =
    ResizeParameter_Interp_mode_LANCZOS4;
  static inline bool Interp_mode_IsValid(int value) {
    return ResizeParameter_Interp_mode_IsValid(value);
  }
  static constexpr Interp_mode Interp_mode_MIN =
    ResizeParameter_Interp_mode_Interp_mode_MIN;
  static constexpr Interp_mode Interp_mode_MAX =
    ResizeParameter_Interp_mode_Interp_mode_MAX;
  static constexpr int Interp_mode_ARRAYSIZE =
    ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Interp_mode_descriptor() {
    return ResizeParameter_Interp_mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Interp_mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Interp_mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Interp_mode_Name.");
    return ResizeParameter_Interp_mode_Name(enum_t_value);
  }
  static inline bool Interp_mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Interp_mode* value) {
    return ResizeParameter_Interp_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPadValueFieldNumber = 6,
    kInterpModeFieldNumber = 7,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightScaleFieldNumber = 8,
    kWidthScaleFieldNumber = 9,
    kPadModeFieldNumber = 5,
    kProbFieldNumber = 1,
    kResizeModeFieldNumber = 2,
  };
  // repeated float pad_value = 6;
  int pad_value_size() const;
  private:
  int _internal_pad_value_size() const;
  public:
  void clear_pad_value();
  private:
  float _internal_pad_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pad_value() const;
  void _internal_add_pad_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pad_value();
  public:
  float pad_value(int index) const;
  void set_pad_value(int index, float value);
  void add_pad_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pad_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pad_value();

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  int interp_mode_size() const;
  private:
  int _internal_interp_mode_size() const;
  public:
  void clear_interp_mode();
  private:
  ::apollo::perception::inference::ResizeParameter_Interp_mode _internal_interp_mode(int index) const;
  void _internal_add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_interp_mode();
  public:
  ::apollo::perception::inference::ResizeParameter_Interp_mode interp_mode(int index) const;
  void set_interp_mode(int index, ::apollo::perception::inference::ResizeParameter_Interp_mode value);
  void add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& interp_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_interp_mode();

  // optional uint32 height = 3 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 width = 4 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height_scale = 8 [default = 0];
  bool has_height_scale() const;
  private:
  bool _internal_has_height_scale() const;
  public:
  void clear_height_scale();
  uint32_t height_scale() const;
  void set_height_scale(uint32_t value);
  private:
  uint32_t _internal_height_scale() const;
  void _internal_set_height_scale(uint32_t value);
  public:

  // optional uint32 width_scale = 9 [default = 0];
  bool has_width_scale() const;
  private:
  bool _internal_has_width_scale() const;
  public:
  void clear_width_scale();
  uint32_t width_scale() const;
  void set_width_scale(uint32_t value);
  private:
  uint32_t _internal_width_scale() const;
  void _internal_set_width_scale(uint32_t value);
  public:

  // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  bool has_pad_mode() const;
  private:
  bool _internal_has_pad_mode() const;
  public:
  void clear_pad_mode();
  ::apollo::perception::inference::ResizeParameter_Pad_mode pad_mode() const;
  void set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value);
  private:
  ::apollo::perception::inference::ResizeParameter_Pad_mode _internal_pad_mode() const;
  void _internal_set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value);
  public:

  // optional float prob = 1 [default = 1];
  bool has_prob() const;
  private:
  bool _internal_has_prob() const;
  public:
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  bool has_resize_mode() const;
  private:
  bool _internal_has_resize_mode() const;
  public:
  void clear_resize_mode();
  ::apollo::perception::inference::ResizeParameter_Resize_mode resize_mode() const;
  void set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value);
  private:
  ::apollo::perception::inference::ResizeParameter_Resize_mode _internal_resize_mode() const;
  void _internal_set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ResizeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pad_value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> interp_mode_;
    uint32_t height_;
    uint32_t width_;
    uint32_t height_scale_;
    uint32_t width_scale_;
    int pad_mode_;
    float prob_;
    int resize_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SaltPepperParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SaltPepperParameter) */ {
 public:
  inline SaltPepperParameter() : SaltPepperParameter(nullptr) {}
  ~SaltPepperParameter() override;
  explicit PROTOBUF_CONSTEXPR SaltPepperParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaltPepperParameter(const SaltPepperParameter& from);
  SaltPepperParameter(SaltPepperParameter&& from) noexcept
    : SaltPepperParameter() {
    *this = ::std::move(from);
  }

  inline SaltPepperParameter& operator=(const SaltPepperParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaltPepperParameter& operator=(SaltPepperParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaltPepperParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaltPepperParameter* internal_default_instance() {
    return reinterpret_cast<const SaltPepperParameter*>(
               &_SaltPepperParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SaltPepperParameter& a, SaltPepperParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SaltPepperParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaltPepperParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaltPepperParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaltPepperParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaltPepperParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaltPepperParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaltPepperParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SaltPepperParameter";
  }
  protected:
  explicit SaltPepperParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFractionFieldNumber = 1,
  };
  // repeated float value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // optional float fraction = 1 [default = 0];
  bool has_fraction() const;
  private:
  bool _internal_has_fraction() const;
  public:
  void clear_fraction();
  float fraction() const;
  void set_fraction(float value);
  private:
  float _internal_fraction() const;
  void _internal_set_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SaltPepperParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
    float fraction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NoiseParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NoiseParameter) */ {
 public:
  inline NoiseParameter() : NoiseParameter(nullptr) {}
  ~NoiseParameter() override;
  explicit PROTOBUF_CONSTEXPR NoiseParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoiseParameter(const NoiseParameter& from);
  NoiseParameter(NoiseParameter&& from) noexcept
    : NoiseParameter() {
    *this = ::std::move(from);
  }

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoiseParameter& operator=(NoiseParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoiseParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoiseParameter* internal_default_instance() {
    return reinterpret_cast<const NoiseParameter*>(
               &_NoiseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(NoiseParameter& a, NoiseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NoiseParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoiseParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoiseParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoiseParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoiseParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoiseParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoiseParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NoiseParameter";
  }
  protected:
  explicit NoiseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaltpepperParamFieldNumber = 10,
    kProbFieldNumber = 1,
    kHistEqFieldNumber = 2,
    kInverseFieldNumber = 3,
    kDecolorizeFieldNumber = 4,
    kGaussBlurFieldNumber = 5,
    kPosterizeFieldNumber = 7,
    kErodeFieldNumber = 8,
    kSaltpepperFieldNumber = 9,
    kClaheFieldNumber = 11,
    kConvertToHsvFieldNumber = 12,
    kConvertToLabFieldNumber = 13,
    kJpegFieldNumber = 6,
  };
  // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
  bool has_saltpepper_param() const;
  private:
  bool _internal_has_saltpepper_param() const;
  public:
  void clear_saltpepper_param();
  const ::apollo::perception::inference::SaltPepperParameter& saltpepper_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SaltPepperParameter* release_saltpepper_param();
  ::apollo::perception::inference::SaltPepperParameter* mutable_saltpepper_param();
  void set_allocated_saltpepper_param(::apollo::perception::inference::SaltPepperParameter* saltpepper_param);
  private:
  const ::apollo::perception::inference::SaltPepperParameter& _internal_saltpepper_param() const;
  ::apollo::perception::inference::SaltPepperParameter* _internal_mutable_saltpepper_param();
  public:
  void unsafe_arena_set_allocated_saltpepper_param(
      ::apollo::perception::inference::SaltPepperParameter* saltpepper_param);
  ::apollo::perception::inference::SaltPepperParameter* unsafe_arena_release_saltpepper_param();

  // optional float prob = 1 [default = 0];
  bool has_prob() const;
  private:
  bool _internal_has_prob() const;
  public:
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // optional bool hist_eq = 2 [default = false];
  bool has_hist_eq() const;
  private:
  bool _internal_has_hist_eq() const;
  public:
  void clear_hist_eq();
  bool hist_eq() const;
  void set_hist_eq(bool value);
  private:
  bool _internal_hist_eq() const;
  void _internal_set_hist_eq(bool value);
  public:

  // optional bool inverse = 3 [default = false];
  bool has_inverse() const;
  private:
  bool _internal_has_inverse() const;
  public:
  void clear_inverse();
  bool inverse() const;
  void set_inverse(bool value);
  private:
  bool _internal_inverse() const;
  void _internal_set_inverse(bool value);
  public:

  // optional bool decolorize = 4 [default = false];
  bool has_decolorize() const;
  private:
  bool _internal_has_decolorize() const;
  public:
  void clear_decolorize();
  bool decolorize() const;
  void set_decolorize(bool value);
  private:
  bool _internal_decolorize() const;
  void _internal_set_decolorize(bool value);
  public:

  // optional bool gauss_blur = 5 [default = false];
  bool has_gauss_blur() const;
  private:
  bool _internal_has_gauss_blur() const;
  public:
  void clear_gauss_blur();
  bool gauss_blur() const;
  void set_gauss_blur(bool value);
  private:
  bool _internal_gauss_blur() const;
  void _internal_set_gauss_blur(bool value);
  public:

  // optional bool posterize = 7 [default = false];
  bool has_posterize() const;
  private:
  bool _internal_has_posterize() const;
  public:
  void clear_posterize();
  bool posterize() const;
  void set_posterize(bool value);
  private:
  bool _internal_posterize() const;
  void _internal_set_posterize(bool value);
  public:

  // optional bool erode = 8 [default = false];
  bool has_erode() const;
  private:
  bool _internal_has_erode() const;
  public:
  void clear_erode();
  bool erode() const;
  void set_erode(bool value);
  private:
  bool _internal_erode() const;
  void _internal_set_erode(bool value);
  public:

  // optional bool saltpepper = 9 [default = false];
  bool has_saltpepper() const;
  private:
  bool _internal_has_saltpepper() const;
  public:
  void clear_saltpepper();
  bool saltpepper() const;
  void set_saltpepper(bool value);
  private:
  bool _internal_saltpepper() const;
  void _internal_set_saltpepper(bool value);
  public:

  // optional bool clahe = 11 [default = false];
  bool has_clahe() const;
  private:
  bool _internal_has_clahe() const;
  public:
  void clear_clahe();
  bool clahe() const;
  void set_clahe(bool value);
  private:
  bool _internal_clahe() const;
  void _internal_set_clahe(bool value);
  public:

  // optional bool convert_to_hsv = 12 [default = false];
  bool has_convert_to_hsv() const;
  private:
  bool _internal_has_convert_to_hsv() const;
  public:
  void clear_convert_to_hsv();
  bool convert_to_hsv() const;
  void set_convert_to_hsv(bool value);
  private:
  bool _internal_convert_to_hsv() const;
  void _internal_set_convert_to_hsv(bool value);
  public:

  // optional bool convert_to_lab = 13 [default = false];
  bool has_convert_to_lab() const;
  private:
  bool _internal_has_convert_to_lab() const;
  public:
  void clear_convert_to_lab();
  bool convert_to_lab() const;
  void set_convert_to_lab(bool value);
  private:
  bool _internal_convert_to_lab() const;
  void _internal_set_convert_to_lab(bool value);
  public:

  // optional float jpeg = 6 [default = -1];
  bool has_jpeg() const;
  private:
  bool _internal_has_jpeg() const;
  public:
  void clear_jpeg();
  float jpeg() const;
  void set_jpeg(float value);
  private:
  float _internal_jpeg() const;
  void _internal_set_jpeg(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NoiseParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::SaltPepperParameter* saltpepper_param_;
    float prob_;
    bool hist_eq_;
    bool inverse_;
    bool decolorize_;
    bool gauss_blur_;
    bool posterize_;
    bool erode_;
    bool saltpepper_;
    bool clahe_;
    bool convert_to_hsv_;
    bool convert_to_lab_;
    float jpeg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DistortionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DistortionParameter) */ {
 public:
  inline DistortionParameter() : DistortionParameter(nullptr) {}
  ~DistortionParameter() override;
  explicit PROTOBUF_CONSTEXPR DistortionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistortionParameter(const DistortionParameter& from);
  DistortionParameter(DistortionParameter&& from) noexcept
    : DistortionParameter() {
    *this = ::std::move(from);
  }

  inline DistortionParameter& operator=(const DistortionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortionParameter& operator=(DistortionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistortionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistortionParameter* internal_default_instance() {
    return reinterpret_cast<const DistortionParameter*>(
               &_DistortionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DistortionParameter& a, DistortionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DistortionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistortionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistortionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistortionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistortionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistortionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistortionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DistortionParameter";
  }
  protected:
  explicit DistortionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessProbFieldNumber = 1,
    kBrightnessDeltaFieldNumber = 2,
    kContrastProbFieldNumber = 3,
    kContrastLowerFieldNumber = 4,
    kContrastUpperFieldNumber = 5,
    kHueProbFieldNumber = 6,
    kHueDeltaFieldNumber = 7,
    kSaturationProbFieldNumber = 8,
    kSaturationLowerFieldNumber = 9,
    kSaturationUpperFieldNumber = 10,
    kRandomOrderProbFieldNumber = 11,
  };
  // optional float brightness_prob = 1 [default = 0];
  bool has_brightness_prob() const;
  private:
  bool _internal_has_brightness_prob() const;
  public:
  void clear_brightness_prob();
  float brightness_prob() const;
  void set_brightness_prob(float value);
  private:
  float _internal_brightness_prob() const;
  void _internal_set_brightness_prob(float value);
  public:

  // optional float brightness_delta = 2 [default = 0];
  bool has_brightness_delta() const;
  private:
  bool _internal_has_brightness_delta() const;
  public:
  void clear_brightness_delta();
  float brightness_delta() const;
  void set_brightness_delta(float value);
  private:
  float _internal_brightness_delta() const;
  void _internal_set_brightness_delta(float value);
  public:

  // optional float contrast_prob = 3 [default = 0];
  bool has_contrast_prob() const;
  private:
  bool _internal_has_contrast_prob() const;
  public:
  void clear_contrast_prob();
  float contrast_prob() const;
  void set_contrast_prob(float value);
  private:
  float _internal_contrast_prob() const;
  void _internal_set_contrast_prob(float value);
  public:

  // optional float contrast_lower = 4 [default = 0];
  bool has_contrast_lower() const;
  private:
  bool _internal_has_contrast_lower() const;
  public:
  void clear_contrast_lower();
  float contrast_lower() const;
  void set_contrast_lower(float value);
  private:
  float _internal_contrast_lower() const;
  void _internal_set_contrast_lower(float value);
  public:

  // optional float contrast_upper = 5 [default = 0];
  bool has_contrast_upper() const;
  private:
  bool _internal_has_contrast_upper() const;
  public:
  void clear_contrast_upper();
  float contrast_upper() const;
  void set_contrast_upper(float value);
  private:
  float _internal_contrast_upper() const;
  void _internal_set_contrast_upper(float value);
  public:

  // optional float hue_prob = 6 [default = 0];
  bool has_hue_prob() const;
  private:
  bool _internal_has_hue_prob() const;
  public:
  void clear_hue_prob();
  float hue_prob() const;
  void set_hue_prob(float value);
  private:
  float _internal_hue_prob() const;
  void _internal_set_hue_prob(float value);
  public:

  // optional float hue_delta = 7 [default = 0];
  bool has_hue_delta() const;
  private:
  bool _internal_has_hue_delta() const;
  public:
  void clear_hue_delta();
  float hue_delta() const;
  void set_hue_delta(float value);
  private:
  float _internal_hue_delta() const;
  void _internal_set_hue_delta(float value);
  public:

  // optional float saturation_prob = 8 [default = 0];
  bool has_saturation_prob() const;
  private:
  bool _internal_has_saturation_prob() const;
  public:
  void clear_saturation_prob();
  float saturation_prob() const;
  void set_saturation_prob(float value);
  private:
  float _internal_saturation_prob() const;
  void _internal_set_saturation_prob(float value);
  public:

  // optional float saturation_lower = 9 [default = 0];
  bool has_saturation_lower() const;
  private:
  bool _internal_has_saturation_lower() const;
  public:
  void clear_saturation_lower();
  float saturation_lower() const;
  void set_saturation_lower(float value);
  private:
  float _internal_saturation_lower() const;
  void _internal_set_saturation_lower(float value);
  public:

  // optional float saturation_upper = 10 [default = 0];
  bool has_saturation_upper() const;
  private:
  bool _internal_has_saturation_upper() const;
  public:
  void clear_saturation_upper();
  float saturation_upper() const;
  void set_saturation_upper(float value);
  private:
  float _internal_saturation_upper() const;
  void _internal_set_saturation_upper(float value);
  public:

  // optional float random_order_prob = 11 [default = 0];
  bool has_random_order_prob() const;
  private:
  bool _internal_has_random_order_prob() const;
  public:
  void clear_random_order_prob();
  float random_order_prob() const;
  void set_random_order_prob(float value);
  private:
  float _internal_random_order_prob() const;
  void _internal_set_random_order_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DistortionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float brightness_prob_;
    float brightness_delta_;
    float contrast_prob_;
    float contrast_lower_;
    float contrast_upper_;
    float hue_prob_;
    float hue_delta_;
    float saturation_prob_;
    float saturation_lower_;
    float saturation_upper_;
    float random_order_prob_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ExpansionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ExpansionParameter) */ {
 public:
  inline ExpansionParameter() : ExpansionParameter(nullptr) {}
  ~ExpansionParameter() override;
  explicit PROTOBUF_CONSTEXPR ExpansionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpansionParameter(const ExpansionParameter& from);
  ExpansionParameter(ExpansionParameter&& from) noexcept
    : ExpansionParameter() {
    *this = ::std::move(from);
  }

  inline ExpansionParameter& operator=(const ExpansionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpansionParameter& operator=(ExpansionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpansionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpansionParameter* internal_default_instance() {
    return reinterpret_cast<const ExpansionParameter*>(
               &_ExpansionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ExpansionParameter& a, ExpansionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpansionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpansionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpansionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpansionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpansionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpansionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpansionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ExpansionParameter";
  }
  protected:
  explicit ExpansionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbFieldNumber = 1,
    kMaxExpandRatioFieldNumber = 2,
  };
  // optional float prob = 1 [default = 1];
  bool has_prob() const;
  private:
  bool _internal_has_prob() const;
  public:
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // optional float max_expand_ratio = 2 [default = 1];
  bool has_max_expand_ratio() const;
  private:
  bool _internal_has_max_expand_ratio() const;
  public:
  void clear_max_expand_ratio();
  float max_expand_ratio() const;
  void set_max_expand_ratio(float value);
  private:
  float _internal_max_expand_ratio() const;
  void _internal_set_max_expand_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ExpansionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float prob_;
    float max_expand_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LossParameter) */ {
 public:
  inline LossParameter() : LossParameter(nullptr) {}
  ~LossParameter() override;
  explicit PROTOBUF_CONSTEXPR LossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LossParameter(const LossParameter& from);
  LossParameter(LossParameter&& from) noexcept
    : LossParameter() {
    *this = ::std::move(from);
  }

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossParameter& operator=(LossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LossParameter& a, LossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LossParameter";
  }
  protected:
  explicit LossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static constexpr NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static constexpr NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static constexpr NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static constexpr NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static constexpr NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static constexpr NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static constexpr int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& NormalizationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormalizationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormalizationMode_Name.");
    return LossParameter_NormalizationMode_Name(enum_t_value);
  }
  static inline bool NormalizationMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 1,
    kNormalizeFieldNumber = 2,
    kNormalizationFieldNumber = 3,
  };
  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  private:
  bool _internal_has_ignore_label() const;
  public:
  void clear_ignore_label();
  int32_t ignore_label() const;
  void set_ignore_label(int32_t value);
  private:
  int32_t _internal_ignore_label() const;
  void _internal_set_ignore_label(int32_t value);
  public:

  // optional bool normalize = 2;
  bool has_normalize() const;
  private:
  bool _internal_has_normalize() const;
  public:
  void clear_normalize();
  bool normalize() const;
  void set_normalize(bool value);
  private:
  bool _internal_normalize() const;
  void _internal_set_normalize(bool value);
  public:

  // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  private:
  bool _internal_has_normalization() const;
  public:
  void clear_normalization();
  ::apollo::perception::inference::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value);
  private:
  ::apollo::perception::inference::LossParameter_NormalizationMode _internal_normalization() const;
  void _internal_set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ignore_label_;
    bool normalize_;
    int normalization_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class AccuracyParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.AccuracyParameter) */ {
 public:
  inline AccuracyParameter() : AccuracyParameter(nullptr) {}
  ~AccuracyParameter() override;
  explicit PROTOBUF_CONSTEXPR AccuracyParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccuracyParameter(const AccuracyParameter& from);
  AccuracyParameter(AccuracyParameter&& from) noexcept
    : AccuracyParameter() {
    *this = ::std::move(from);
  }

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccuracyParameter& operator=(AccuracyParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccuracyParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AccuracyParameter& a, AccuracyParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AccuracyParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccuracyParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccuracyParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccuracyParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccuracyParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccuracyParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccuracyParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.AccuracyParameter";
  }
  protected:
  explicit AccuracyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 3,
    kTopKFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  private:
  bool _internal_has_ignore_label() const;
  public:
  void clear_ignore_label();
  int32_t ignore_label() const;
  void set_ignore_label(int32_t value);
  private:
  int32_t _internal_ignore_label() const;
  void _internal_set_ignore_label(int32_t value);
  public:

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  uint32_t top_k() const;
  void set_top_k(uint32_t value);
  private:
  uint32_t _internal_top_k() const;
  void _internal_set_top_k(uint32_t value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AccuracyParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ignore_label_;
    uint32_t top_k_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class AnnotatedDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.AnnotatedDataParameter) */ {
 public:
  inline AnnotatedDataParameter() : AnnotatedDataParameter(nullptr) {}
  ~AnnotatedDataParameter() override;
  explicit PROTOBUF_CONSTEXPR AnnotatedDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotatedDataParameter(const AnnotatedDataParameter& from);
  AnnotatedDataParameter(AnnotatedDataParameter&& from) noexcept
    : AnnotatedDataParameter() {
    *this = ::std::move(from);
  }

  inline AnnotatedDataParameter& operator=(const AnnotatedDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotatedDataParameter& operator=(AnnotatedDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotatedDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotatedDataParameter* internal_default_instance() {
    return reinterpret_cast<const AnnotatedDataParameter*>(
               &_AnnotatedDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AnnotatedDataParameter& a, AnnotatedDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotatedDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotatedDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnotatedDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnotatedDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnotatedDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnnotatedDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotatedDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.AnnotatedDataParameter";
  }
  protected:
  explicit AnnotatedDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchSamplerFieldNumber = 1,
    kLabelMapFileFieldNumber = 2,
    kAnnoTypeFieldNumber = 3,
    kNumClassesFieldNumber = 10,
  };
  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  int batch_sampler_size() const;
  private:
  int _internal_batch_sampler_size() const;
  public:
  void clear_batch_sampler();
  ::apollo::perception::inference::BatchSampler* mutable_batch_sampler(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >*
      mutable_batch_sampler();
  private:
  const ::apollo::perception::inference::BatchSampler& _internal_batch_sampler(int index) const;
  ::apollo::perception::inference::BatchSampler* _internal_add_batch_sampler();
  public:
  const ::apollo::perception::inference::BatchSampler& batch_sampler(int index) const;
  ::apollo::perception::inference::BatchSampler* add_batch_sampler();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >&
      batch_sampler() const;

  // optional string label_map_file = 2;
  bool has_label_map_file() const;
  private:
  bool _internal_has_label_map_file() const;
  public:
  void clear_label_map_file();
  const std::string& label_map_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label_map_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label_map_file();
  PROTOBUF_NODISCARD std::string* release_label_map_file();
  void set_allocated_label_map_file(std::string* label_map_file);
  private:
  const std::string& _internal_label_map_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_map_file(const std::string& value);
  std::string* _internal_mutable_label_map_file();
  public:

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
  bool has_anno_type() const;
  private:
  bool _internal_has_anno_type() const;
  public:
  void clear_anno_type();
  ::apollo::perception::inference::AnnotatedDatum_AnnotationType anno_type() const;
  void set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);
  private:
  ::apollo::perception::inference::AnnotatedDatum_AnnotationType _internal_anno_type() const;
  void _internal_set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);
  public:

  // optional int32 num_classes = 10 [default = 3];
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  int32_t num_classes() const;
  void set_num_classes(int32_t value);
  private:
  int32_t _internal_num_classes() const;
  void _internal_set_num_classes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotatedDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BatchSampler > batch_sampler_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_file_;
    int anno_type_;
    int32_t num_classes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ArgMaxParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ArgMaxParameter) */ {
 public:
  inline ArgMaxParameter() : ArgMaxParameter(nullptr) {}
  ~ArgMaxParameter() override;
  explicit PROTOBUF_CONSTEXPR ArgMaxParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArgMaxParameter(const ArgMaxParameter& from);
  ArgMaxParameter(ArgMaxParameter&& from) noexcept
    : ArgMaxParameter() {
    *this = ::std::move(from);
  }

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArgMaxParameter& operator=(ArgMaxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArgMaxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ArgMaxParameter& a, ArgMaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ArgMaxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArgMaxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArgMaxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArgMaxParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArgMaxParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ArgMaxParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgMaxParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ArgMaxParameter";
  }
  protected:
  explicit ArgMaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutMaxValFieldNumber = 1,
    kAxisFieldNumber = 3,
    kTopKFieldNumber = 2,
  };
  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  private:
  bool _internal_has_out_max_val() const;
  public:
  void clear_out_max_val();
  bool out_max_val() const;
  void set_out_max_val(bool value);
  private:
  bool _internal_out_max_val() const;
  void _internal_set_out_max_val(bool value);
  public:

  // optional int32 axis = 3;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  uint32_t top_k() const;
  void set_top_k(uint32_t value);
  private:
  uint32_t _internal_top_k() const;
  void _internal_set_top_k(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ArgMaxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool out_max_val_;
    int32_t axis_;
    uint32_t top_k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ConcatParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ConcatParameter) */ {
 public:
  inline ConcatParameter() : ConcatParameter(nullptr) {}
  ~ConcatParameter() override;
  explicit PROTOBUF_CONSTEXPR ConcatParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConcatParameter(const ConcatParameter& from);
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConcatParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcatParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConcatParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConcatParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConcatParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConcatParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ConcatParameter";
  }
  protected:
  explicit ConcatParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcatDimFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  uint32_t concat_dim() const;
  void set_concat_dim(uint32_t value);
  private:
  uint32_t _internal_concat_dim() const;
  void _internal_set_concat_dim(uint32_t value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ConcatParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t concat_dim_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BatchNormParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BatchNormParameter) */ {
 public:
  inline BatchNormParameter() : BatchNormParameter(nullptr) {}
  ~BatchNormParameter() override;
  explicit PROTOBUF_CONSTEXPR BatchNormParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchNormParameter(const BatchNormParameter& from);
  BatchNormParameter(BatchNormParameter&& from) noexcept
    : BatchNormParameter() {
    *this = ::std::move(from);
  }

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchNormParameter& operator=(BatchNormParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchNormParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BatchNormParameter& a, BatchNormParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchNormParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchNormParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchNormParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchNormParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchNormParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchNormParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchNormParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BatchNormParameter";
  }
  protected:
  explicit BatchNormParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseGlobalStatsFieldNumber = 1,
    kMovingAverageFractionFieldNumber = 2,
    kEpsFieldNumber = 3,
  };
  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  private:
  bool _internal_has_use_global_stats() const;
  public:
  void clear_use_global_stats();
  bool use_global_stats() const;
  void set_use_global_stats(bool value);
  private:
  bool _internal_use_global_stats() const;
  void _internal_set_use_global_stats(bool value);
  public:

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  private:
  bool _internal_has_moving_average_fraction() const;
  public:
  void clear_moving_average_fraction();
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);
  private:
  float _internal_moving_average_fraction() const;
  void _internal_set_moving_average_fraction(float value);
  public:

  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BatchNormParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool use_global_stats_;
    float moving_average_fraction_;
    float eps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BiasParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BiasParameter) */ {
 public:
  inline BiasParameter() : BiasParameter(nullptr) {}
  ~BiasParameter() override;
  explicit PROTOBUF_CONSTEXPR BiasParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiasParameter(const BiasParameter& from);
  BiasParameter(BiasParameter&& from) noexcept
    : BiasParameter() {
    *this = ::std::move(from);
  }

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiasParameter& operator=(BiasParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiasParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BiasParameter& a, BiasParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BiasParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiasParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiasParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiasParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiasParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiasParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiasParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BiasParameter";
  }
  protected:
  explicit BiasParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .apollo.perception.inference.FillerParameter filler = 3;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::apollo::perception::inference::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_filler();
  ::apollo::perception::inference::FillerParameter* mutable_filler();
  void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::apollo::perception::inference::FillerParameter* filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_filler();

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  int32_t num_axes() const;
  void set_num_axes(int32_t value);
  private:
  int32_t _internal_num_axes() const;
  void _internal_set_num_axes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BiasParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* filler_;
    int32_t axis_;
    int32_t num_axes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ContrastiveLossParameter) */ {
 public:
  inline ContrastiveLossParameter() : ContrastiveLossParameter(nullptr) {}
  ~ContrastiveLossParameter() override;
  explicit PROTOBUF_CONSTEXPR ContrastiveLossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContrastiveLossParameter(const ContrastiveLossParameter& from);
  ContrastiveLossParameter(ContrastiveLossParameter&& from) noexcept
    : ContrastiveLossParameter() {
    *this = ::std::move(from);
  }

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContrastiveLossParameter& operator=(ContrastiveLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContrastiveLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ContrastiveLossParameter& a, ContrastiveLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ContrastiveLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContrastiveLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContrastiveLossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContrastiveLossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContrastiveLossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ContrastiveLossParameter";
  }
  protected:
  explicit ContrastiveLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyVersionFieldNumber = 2,
    kMarginFieldNumber = 1,
  };
  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  private:
  bool _internal_has_legacy_version() const;
  public:
  void clear_legacy_version();
  bool legacy_version() const;
  void set_legacy_version(bool value);
  private:
  bool _internal_legacy_version() const;
  void _internal_set_legacy_version(bool value);
  public:

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ContrastiveLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool legacy_version_;
    float margin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ConvolutionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ConvolutionParameter) */ {
 public:
  inline ConvolutionParameter() : ConvolutionParameter(nullptr) {}
  ~ConvolutionParameter() override;
  explicit PROTOBUF_CONSTEXPR ConvolutionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvolutionParameter(const ConvolutionParameter& from);
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvolutionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvolutionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvolutionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvolutionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvolutionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvolutionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConvolutionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ConvolutionParameter";
  }
  protected:
  explicit ConvolutionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return ConvolutionParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPadFieldNumber = 3,
    kKernelSizeFieldNumber = 4,
    kStrideFieldNumber = 6,
    kDilationFieldNumber = 18,
    kWeightFillerFieldNumber = 7,
    kBiasFillerFieldNumber = 8,
    kNumOutputFieldNumber = 1,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kKernelHFieldNumber = 11,
    kKernelWFieldNumber = 12,
    kStrideHFieldNumber = 13,
    kStrideWFieldNumber = 14,
    kEngineFieldNumber = 15,
    kForceNdIm2ColFieldNumber = 17,
    kAxisFieldNumber = 16,
    kBiasTermFieldNumber = 2,
    kGroupFieldNumber = 5,
  };
  // repeated uint32 pad = 3;
  int pad_size() const;
  private:
  int _internal_pad_size() const;
  public:
  void clear_pad();
  private:
  uint32_t _internal_pad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_pad() const;
  void _internal_add_pad(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_pad();
  public:
  uint32_t pad(int index) const;
  void set_pad(int index, uint32_t value);
  void add_pad(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      pad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;
  public:
  void clear_kernel_size();
  private:
  uint32_t _internal_kernel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_kernel_size() const;
  void _internal_add_kernel_size(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_kernel_size();
  public:
  uint32_t kernel_size(int index) const;
  void set_kernel_size(int index, uint32_t value);
  void add_kernel_size(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      kernel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  uint32_t _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stride() const;
  void _internal_add_stride(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stride();
  public:
  uint32_t stride(int index) const;
  void set_stride(int index, uint32_t value);
  void add_stride(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  uint32_t _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_dilation() const;
  void _internal_add_dilation(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_dilation();
  public:
  uint32_t dilation(int index) const;
  void set_dilation(int index, uint32_t value);
  void add_dilation(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_dilation();

  // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_weight_filler();
  ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_weight_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::apollo::perception::inference::FillerParameter* weight_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  private:
  bool _internal_has_pad_h() const;
  public:
  void clear_pad_h();
  uint32_t pad_h() const;
  void set_pad_h(uint32_t value);
  private:
  uint32_t _internal_pad_h() const;
  void _internal_set_pad_h(uint32_t value);
  public:

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  private:
  bool _internal_has_pad_w() const;
  public:
  void clear_pad_w();
  uint32_t pad_w() const;
  void set_pad_w(uint32_t value);
  private:
  uint32_t _internal_pad_w() const;
  void _internal_set_pad_w(uint32_t value);
  public:

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  private:
  bool _internal_has_kernel_h() const;
  public:
  void clear_kernel_h();
  uint32_t kernel_h() const;
  void set_kernel_h(uint32_t value);
  private:
  uint32_t _internal_kernel_h() const;
  void _internal_set_kernel_h(uint32_t value);
  public:

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  private:
  bool _internal_has_kernel_w() const;
  public:
  void clear_kernel_w();
  uint32_t kernel_w() const;
  void set_kernel_w(uint32_t value);
  private:
  uint32_t _internal_kernel_w() const;
  void _internal_set_kernel_w(uint32_t value);
  public:

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  private:
  bool _internal_has_stride_h() const;
  public:
  void clear_stride_h();
  uint32_t stride_h() const;
  void set_stride_h(uint32_t value);
  private:
  uint32_t _internal_stride_h() const;
  void _internal_set_stride_h(uint32_t value);
  public:

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  private:
  bool _internal_has_stride_w() const;
  public:
  void clear_stride_w();
  uint32_t stride_w() const;
  void set_stride_w(uint32_t value);
  private:
  uint32_t _internal_stride_w() const;
  void _internal_set_stride_w(uint32_t value);
  public:

  // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::ConvolutionParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value);
  private:
  ::apollo::perception::inference::ConvolutionParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value);
  public:

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  private:
  bool _internal_has_force_nd_im2col() const;
  public:
  void clear_force_nd_im2col();
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);
  private:
  bool _internal_force_nd_im2col() const;
  void _internal_set_force_nd_im2col(bool value);
  public:

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ConvolutionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > pad_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > kernel_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stride_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > dilation_;
    ::apollo::perception::inference::FillerParameter* weight_filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    uint32_t num_output_;
    uint32_t pad_h_;
    uint32_t pad_w_;
    uint32_t kernel_h_;
    uint32_t kernel_w_;
    uint32_t stride_h_;
    uint32_t stride_w_;
    int engine_;
    bool force_nd_im2col_;
    int32_t axis_;
    bool bias_term_;
    uint32_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class CropParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.CropParameter) */ {
 public:
  inline CropParameter() : CropParameter(nullptr) {}
  ~CropParameter() override;
  explicit PROTOBUF_CONSTEXPR CropParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CropParameter(const CropParameter& from);
  CropParameter(CropParameter&& from) noexcept
    : CropParameter() {
    *this = ::std::move(from);
  }

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CropParameter& operator=(CropParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CropParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CropParameter& a, CropParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CropParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CropParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CropParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CropParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CropParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CropParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CropParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.CropParameter";
  }
  protected:
  explicit CropParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // repeated uint32 offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  uint32_t _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_offset() const;
  void _internal_add_offset(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_offset();
  public:
  uint32_t offset(int index) const;
  void set_offset(int index, uint32_t value);
  void add_offset(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_offset();

  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.CropParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > offset_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DataParameter) */ {
 public:
  inline DataParameter() : DataParameter(nullptr) {}
  ~DataParameter() override;
  explicit PROTOBUF_CONSTEXPR DataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataParameter(const DataParameter& from);
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DataParameter";
  }
  protected:
  explicit DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static constexpr DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static constexpr DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static constexpr DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static constexpr DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static constexpr int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  template<typename T>
  static inline const std::string& DB_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DB>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DB_Name.");
    return DataParameter_DB_Name(enum_t_value);
  }
  static inline bool DB_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kMirrorFieldNumber = 6,
    kForceEncodedColorFieldNumber = 9,
    kBackendFieldNumber = 8,
    kScaleFieldNumber = 2,
    kPrefetchFieldNumber = 10,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mean_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  uint32_t crop_size() const;
  void set_crop_size(uint32_t value);
  private:
  uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(uint32_t value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  uint32_t rand_skip() const;
  void set_rand_skip(uint32_t value);
  private:
  uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(uint32_t value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  private:
  bool _internal_has_force_encoded_color() const;
  public:
  void clear_force_encoded_color();
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);
  private:
  bool _internal_force_encoded_color() const;
  void _internal_set_force_encoded_color(bool value);
  public:

  // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  private:
  bool _internal_has_backend() const;
  public:
  void clear_backend();
  ::apollo::perception::inference::DataParameter_DB backend() const;
  void set_backend(::apollo::perception::inference::DataParameter_DB value);
  private:
  ::apollo::perception::inference::DataParameter_DB _internal_backend() const;
  void _internal_set_backend(::apollo::perception::inference::DataParameter_DB value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  private:
  bool _internal_has_prefetch() const;
  public:
  void clear_prefetch();
  uint32_t prefetch() const;
  void set_prefetch(uint32_t value);
  private:
  uint32_t _internal_prefetch() const;
  void _internal_set_prefetch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
    uint32_t batch_size_;
    uint32_t crop_size_;
    uint32_t rand_skip_;
    bool mirror_;
    bool force_encoded_color_;
    int backend_;
    float scale_;
    uint32_t prefetch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DetectionEvaluateParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DetectionEvaluateParameter) */ {
 public:
  inline DetectionEvaluateParameter() : DetectionEvaluateParameter(nullptr) {}
  ~DetectionEvaluateParameter() override;
  explicit PROTOBUF_CONSTEXPR DetectionEvaluateParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionEvaluateParameter(const DetectionEvaluateParameter& from);
  DetectionEvaluateParameter(DetectionEvaluateParameter&& from) noexcept
    : DetectionEvaluateParameter() {
    *this = ::std::move(from);
  }

  inline DetectionEvaluateParameter& operator=(const DetectionEvaluateParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionEvaluateParameter& operator=(DetectionEvaluateParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionEvaluateParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionEvaluateParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionEvaluateParameter*>(
               &_DetectionEvaluateParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DetectionEvaluateParameter& a, DetectionEvaluateParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionEvaluateParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionEvaluateParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionEvaluateParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionEvaluateParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionEvaluateParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectionEvaluateParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionEvaluateParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DetectionEvaluateParameter";
  }
  protected:
  explicit DetectionEvaluateParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameSizeFileFieldNumber = 5,
    kResizeParamFieldNumber = 6,
    kNumClassesFieldNumber = 1,
    kBackgroundLabelIdFieldNumber = 2,
    kOverlapThresholdFieldNumber = 3,
    kEvaluateDifficultGtFieldNumber = 4,
  };
  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  private:
  bool _internal_has_name_size_file() const;
  public:
  void clear_name_size_file();
  const std::string& name_size_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_size_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_size_file();
  PROTOBUF_NODISCARD std::string* release_name_size_file();
  void set_allocated_name_size_file(std::string* name_size_file);
  private:
  const std::string& _internal_name_size_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_size_file(const std::string& value);
  std::string* _internal_mutable_name_size_file();
  public:

  // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
  bool has_resize_param() const;
  private:
  bool _internal_has_resize_param() const;
  public:
  void clear_resize_param();
  const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ResizeParameter* release_resize_param();
  ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);
  private:
  const ::apollo::perception::inference::ResizeParameter& _internal_resize_param() const;
  ::apollo::perception::inference::ResizeParameter* _internal_mutable_resize_param();
  public:
  void unsafe_arena_set_allocated_resize_param(
      ::apollo::perception::inference::ResizeParameter* resize_param);
  ::apollo::perception::inference::ResizeParameter* unsafe_arena_release_resize_param();

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional uint32 background_label_id = 2 [default = 0];
  bool has_background_label_id() const;
  private:
  bool _internal_has_background_label_id() const;
  public:
  void clear_background_label_id();
  uint32_t background_label_id() const;
  void set_background_label_id(uint32_t value);
  private:
  uint32_t _internal_background_label_id() const;
  void _internal_set_background_label_id(uint32_t value);
  public:

  // optional float overlap_threshold = 3 [default = 0.5];
  bool has_overlap_threshold() const;
  private:
  bool _internal_has_overlap_threshold() const;
  public:
  void clear_overlap_threshold();
  float overlap_threshold() const;
  void set_overlap_threshold(float value);
  private:
  float _internal_overlap_threshold() const;
  void _internal_set_overlap_threshold(float value);
  public:

  // optional bool evaluate_difficult_gt = 4 [default = true];
  bool has_evaluate_difficult_gt() const;
  private:
  bool _internal_has_evaluate_difficult_gt() const;
  public:
  void clear_evaluate_difficult_gt();
  bool evaluate_difficult_gt() const;
  void set_evaluate_difficult_gt(bool value);
  private:
  bool _internal_evaluate_difficult_gt() const;
  void _internal_set_evaluate_difficult_gt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DetectionEvaluateParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_size_file_;
    ::apollo::perception::inference::ResizeParameter* resize_param_;
    uint32_t num_classes_;
    uint32_t background_label_id_;
    float overlap_threshold_;
    bool evaluate_difficult_gt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NonMaximumSuppressionParameter) */ {
 public:
  inline NonMaximumSuppressionParameter() : NonMaximumSuppressionParameter(nullptr) {}
  ~NonMaximumSuppressionParameter() override;
  explicit PROTOBUF_CONSTEXPR NonMaximumSuppressionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);
  NonMaximumSuppressionParameter(NonMaximumSuppressionParameter&& from) noexcept
    : NonMaximumSuppressionParameter() {
    *this = ::std::move(from);
  }

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaximumSuppressionParameter& operator=(NonMaximumSuppressionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonMaximumSuppressionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonMaximumSuppressionParameter* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppressionParameter*>(
               &_NonMaximumSuppressionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(NonMaximumSuppressionParameter& a, NonMaximumSuppressionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonMaximumSuppressionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonMaximumSuppressionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonMaximumSuppressionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NonMaximumSuppressionParameter";
  }
  protected:
  explicit NonMaximumSuppressionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopKFieldNumber = 2,
    kNmsThresholdFieldNumber = 1,
    kEtaFieldNumber = 3,
  };
  // optional int32 top_k = 2;
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  int32_t top_k() const;
  void set_top_k(int32_t value);
  private:
  int32_t _internal_top_k() const;
  void _internal_set_top_k(int32_t value);
  public:

  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  private:
  bool _internal_has_nms_threshold() const;
  public:
  void clear_nms_threshold();
  float nms_threshold() const;
  void set_nms_threshold(float value);
  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);
  public:

  // optional float eta = 3 [default = 1];
  bool has_eta() const;
  private:
  bool _internal_has_eta() const;
  public:
  void clear_eta();
  float eta() const;
  void set_eta(float value);
  private:
  float _internal_eta() const;
  void _internal_set_eta(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NonMaximumSuppressionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t top_k_;
    float nms_threshold_;
    float eta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SaveOutputParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SaveOutputParameter) */ {
 public:
  inline SaveOutputParameter() : SaveOutputParameter(nullptr) {}
  ~SaveOutputParameter() override;
  explicit PROTOBUF_CONSTEXPR SaveOutputParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveOutputParameter(const SaveOutputParameter& from);
  SaveOutputParameter(SaveOutputParameter&& from) noexcept
    : SaveOutputParameter() {
    *this = ::std::move(from);
  }

  inline SaveOutputParameter& operator=(const SaveOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOutputParameter& operator=(SaveOutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveOutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveOutputParameter* internal_default_instance() {
    return reinterpret_cast<const SaveOutputParameter*>(
               &_SaveOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SaveOutputParameter& a, SaveOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveOutputParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveOutputParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveOutputParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveOutputParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SaveOutputParameter";
  }
  protected:
  explicit SaveOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDirectoryFieldNumber = 1,
    kOutputNamePrefixFieldNumber = 2,
    kOutputFormatFieldNumber = 3,
    kLabelMapFileFieldNumber = 4,
    kNameSizeFileFieldNumber = 5,
    kResizeParamFieldNumber = 7,
    kNumTestImageFieldNumber = 6,
  };
  // optional string output_directory = 1;
  bool has_output_directory() const;
  private:
  bool _internal_has_output_directory() const;
  public:
  void clear_output_directory();
  const std::string& output_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_directory();
  PROTOBUF_NODISCARD std::string* release_output_directory();
  void set_allocated_output_directory(std::string* output_directory);
  private:
  const std::string& _internal_output_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_directory(const std::string& value);
  std::string* _internal_mutable_output_directory();
  public:

  // optional string output_name_prefix = 2;
  bool has_output_name_prefix() const;
  private:
  bool _internal_has_output_name_prefix() const;
  public:
  void clear_output_name_prefix();
  const std::string& output_name_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_name_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_name_prefix();
  PROTOBUF_NODISCARD std::string* release_output_name_prefix();
  void set_allocated_output_name_prefix(std::string* output_name_prefix);
  private:
  const std::string& _internal_output_name_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name_prefix(const std::string& value);
  std::string* _internal_mutable_output_name_prefix();
  public:

  // optional string output_format = 3;
  bool has_output_format() const;
  private:
  bool _internal_has_output_format() const;
  public:
  void clear_output_format();
  const std::string& output_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_format();
  PROTOBUF_NODISCARD std::string* release_output_format();
  void set_allocated_output_format(std::string* output_format);
  private:
  const std::string& _internal_output_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_format(const std::string& value);
  std::string* _internal_mutable_output_format();
  public:

  // optional string label_map_file = 4;
  bool has_label_map_file() const;
  private:
  bool _internal_has_label_map_file() const;
  public:
  void clear_label_map_file();
  const std::string& label_map_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label_map_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label_map_file();
  PROTOBUF_NODISCARD std::string* release_label_map_file();
  void set_allocated_label_map_file(std::string* label_map_file);
  private:
  const std::string& _internal_label_map_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_map_file(const std::string& value);
  std::string* _internal_mutable_label_map_file();
  public:

  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  private:
  bool _internal_has_name_size_file() const;
  public:
  void clear_name_size_file();
  const std::string& name_size_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_size_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_size_file();
  PROTOBUF_NODISCARD std::string* release_name_size_file();
  void set_allocated_name_size_file(std::string* name_size_file);
  private:
  const std::string& _internal_name_size_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_size_file(const std::string& value);
  std::string* _internal_mutable_name_size_file();
  public:

  // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
  bool has_resize_param() const;
  private:
  bool _internal_has_resize_param() const;
  public:
  void clear_resize_param();
  const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ResizeParameter* release_resize_param();
  ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);
  private:
  const ::apollo::perception::inference::ResizeParameter& _internal_resize_param() const;
  ::apollo::perception::inference::ResizeParameter* _internal_mutable_resize_param();
  public:
  void unsafe_arena_set_allocated_resize_param(
      ::apollo::perception::inference::ResizeParameter* resize_param);
  ::apollo::perception::inference::ResizeParameter* unsafe_arena_release_resize_param();

  // optional uint32 num_test_image = 6;
  bool has_num_test_image() const;
  private:
  bool _internal_has_num_test_image() const;
  public:
  void clear_num_test_image();
  uint32_t num_test_image() const;
  void set_num_test_image(uint32_t value);
  private:
  uint32_t _internal_num_test_image() const;
  void _internal_set_num_test_image(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SaveOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_directory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_size_file_;
    ::apollo::perception::inference::ResizeParameter* resize_param_;
    uint32_t num_test_image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DetectionOutputParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DetectionOutputParameter) */ {
 public:
  inline DetectionOutputParameter() : DetectionOutputParameter(nullptr) {}
  ~DetectionOutputParameter() override;
  explicit PROTOBUF_CONSTEXPR DetectionOutputParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionOutputParameter(const DetectionOutputParameter& from);
  DetectionOutputParameter(DetectionOutputParameter&& from) noexcept
    : DetectionOutputParameter() {
    *this = ::std::move(from);
  }

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionOutputParameter& operator=(DetectionOutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionOutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputParameter*>(
               &_DetectionOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DetectionOutputParameter& a, DetectionOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionOutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionOutputParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionOutputParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectionOutputParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionOutputParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DetectionOutputParameter";
  }
  protected:
  explicit DetectionOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveFileFieldNumber = 12,
    kNmsParamFieldNumber = 4,
    kSaveOutputParamFieldNumber = 5,
    kNumClassesFieldNumber = 1,
    kBackgroundLabelIdFieldNumber = 3,
    kConfidenceThresholdFieldNumber = 9,
    kVarianceEncodedInTargetFieldNumber = 8,
    kVisualizeFieldNumber = 10,
    kVisualizeThresholdFieldNumber = 11,
    kKeepTopKFieldNumber = 7,
    kShareLocationFieldNumber = 2,
    kCodeTypeFieldNumber = 6,
  };
  // optional string save_file = 12;
  bool has_save_file() const;
  private:
  bool _internal_has_save_file() const;
  public:
  void clear_save_file();
  const std::string& save_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_file();
  PROTOBUF_NODISCARD std::string* release_save_file();
  void set_allocated_save_file(std::string* save_file);
  private:
  const std::string& _internal_save_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_file(const std::string& value);
  std::string* _internal_mutable_save_file();
  public:

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  private:
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  ::apollo::perception::inference::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
  bool has_save_output_param() const;
  private:
  bool _internal_has_save_output_param() const;
  public:
  void clear_save_output_param();
  const ::apollo::perception::inference::SaveOutputParameter& save_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SaveOutputParameter* release_save_output_param();
  ::apollo::perception::inference::SaveOutputParameter* mutable_save_output_param();
  void set_allocated_save_output_param(::apollo::perception::inference::SaveOutputParameter* save_output_param);
  private:
  const ::apollo::perception::inference::SaveOutputParameter& _internal_save_output_param() const;
  ::apollo::perception::inference::SaveOutputParameter* _internal_mutable_save_output_param();
  public:
  void unsafe_arena_set_allocated_save_output_param(
      ::apollo::perception::inference::SaveOutputParameter* save_output_param);
  ::apollo::perception::inference::SaveOutputParameter* unsafe_arena_release_save_output_param();

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  private:
  bool _internal_has_background_label_id() const;
  public:
  void clear_background_label_id();
  int32_t background_label_id() const;
  void set_background_label_id(int32_t value);
  private:
  int32_t _internal_background_label_id() const;
  void _internal_set_background_label_id(int32_t value);
  public:

  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  private:
  bool _internal_has_variance_encoded_in_target() const;
  public:
  void clear_variance_encoded_in_target();
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);
  private:
  bool _internal_variance_encoded_in_target() const;
  void _internal_set_variance_encoded_in_target(bool value);
  public:

  // optional bool visualize = 10 [default = false];
  bool has_visualize() const;
  private:
  bool _internal_has_visualize() const;
  public:
  void clear_visualize();
  bool visualize() const;
  void set_visualize(bool value);
  private:
  bool _internal_visualize() const;
  void _internal_set_visualize(bool value);
  public:

  // optional float visualize_threshold = 11;
  bool has_visualize_threshold() const;
  private:
  bool _internal_has_visualize_threshold() const;
  public:
  void clear_visualize_threshold();
  float visualize_threshold() const;
  void set_visualize_threshold(float value);
  private:
  float _internal_visualize_threshold() const;
  void _internal_set_visualize_threshold(float value);
  public:

  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  private:
  bool _internal_has_keep_top_k() const;
  public:
  void clear_keep_top_k();
  int32_t keep_top_k() const;
  void set_keep_top_k(int32_t value);
  private:
  int32_t _internal_keep_top_k() const;
  void _internal_set_keep_top_k(int32_t value);
  public:

  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  private:
  bool _internal_has_share_location() const;
  public:
  void clear_share_location();
  bool share_location() const;
  void set_share_location(bool value);
  private:
  bool _internal_share_location() const;
  void _internal_set_share_location(bool value);
  public:

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  private:
  bool _internal_has_code_type() const;
  public:
  void clear_code_type();
  ::apollo::perception::inference::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);
  private:
  ::apollo::perception::inference::PriorBoxParameter_CodeType _internal_code_type() const;
  void _internal_set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DetectionOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_file_;
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
    ::apollo::perception::inference::SaveOutputParameter* save_output_param_;
    uint32_t num_classes_;
    int32_t background_label_id_;
    float confidence_threshold_;
    bool variance_encoded_in_target_;
    bool visualize_;
    float visualize_threshold_;
    int32_t keep_top_k_;
    bool share_location_;
    int code_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class RegionOutputParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.RegionOutputParameter) */ {
 public:
  inline RegionOutputParameter() : RegionOutputParameter(nullptr) {}
  ~RegionOutputParameter() override;
  explicit PROTOBUF_CONSTEXPR RegionOutputParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionOutputParameter(const RegionOutputParameter& from);
  RegionOutputParameter(RegionOutputParameter&& from) noexcept
    : RegionOutputParameter() {
    *this = ::std::move(from);
  }

  inline RegionOutputParameter& operator=(const RegionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionOutputParameter& operator=(RegionOutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionOutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const RegionOutputParameter*>(
               &_RegionOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RegionOutputParameter& a, RegionOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionOutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionOutputParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionOutputParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegionOutputParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionOutputParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.RegionOutputParameter";
  }
  protected:
  explicit RegionOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorboxFieldNumber = 5,
    kNmsParamFieldNumber = 2,
    kNumClassesFieldNumber = 1,
    kConfidenceThresholdFieldNumber = 4,
    kNmsTypeFieldNumber = 6,
    kNmsSigmaFieldNumber = 7,
    kIsRpnFieldNumber = 8,
    kKeepTopKFieldNumber = 3,
  };
  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  int anchorbox_size() const;
  private:
  int _internal_anchorbox_size() const;
  public:
  void clear_anchorbox();
  ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();
  private:
  const ::apollo::perception::inference::AnchorBox& _internal_anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* _internal_add_anchorbox();
  public:
  const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* add_anchorbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  private:
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  ::apollo::perception::inference::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional float confidence_threshold = 4;
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional int32 nms_type = 6;
  bool has_nms_type() const;
  private:
  bool _internal_has_nms_type() const;
  public:
  void clear_nms_type();
  int32_t nms_type() const;
  void set_nms_type(int32_t value);
  private:
  int32_t _internal_nms_type() const;
  void _internal_set_nms_type(int32_t value);
  public:

  // optional float nms_sigma = 7;
  bool has_nms_sigma() const;
  private:
  bool _internal_has_nms_sigma() const;
  public:
  void clear_nms_sigma();
  float nms_sigma() const;
  void set_nms_sigma(float value);
  private:
  float _internal_nms_sigma() const;
  void _internal_set_nms_sigma(float value);
  public:

  // optional bool is_rpn = 8 [default = false];
  bool has_is_rpn() const;
  private:
  bool _internal_has_is_rpn() const;
  public:
  void clear_is_rpn();
  bool is_rpn() const;
  void set_is_rpn(bool value);
  private:
  bool _internal_is_rpn() const;
  void _internal_set_is_rpn(bool value);
  public:

  // optional int32 keep_top_k = 3 [default = -1];
  bool has_keep_top_k() const;
  private:
  bool _internal_has_keep_top_k() const;
  public:
  void clear_keep_top_k();
  int32_t keep_top_k() const;
  void set_keep_top_k(int32_t value);
  private:
  int32_t _internal_keep_top_k() const;
  void _internal_set_keep_top_k(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
    uint32_t num_classes_;
    float confidence_threshold_;
    int32_t nms_type_;
    float nms_sigma_;
    bool is_rpn_;
    int32_t keep_top_k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DropoutParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DropoutParameter) */ {
 public:
  inline DropoutParameter() : DropoutParameter(nullptr) {}
  ~DropoutParameter() override;
  explicit PROTOBUF_CONSTEXPR DropoutParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropoutParameter(const DropoutParameter& from);
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropoutParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DropoutParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropoutParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropoutParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropoutParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropoutParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropoutParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropoutParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DropoutParameter";
  }
  protected:
  explicit DropoutParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropoutRatioFieldNumber = 1,
  };
  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DropoutParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float dropout_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DummyDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DummyDataParameter) */ {
 public:
  inline DummyDataParameter() : DummyDataParameter(nullptr) {}
  ~DummyDataParameter() override;
  explicit PROTOBUF_CONSTEXPR DummyDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DummyDataParameter(const DummyDataParameter& from);
  DummyDataParameter(DummyDataParameter&& from) noexcept
    : DummyDataParameter() {
    *this = ::std::move(from);
  }

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyDataParameter& operator=(DummyDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DummyDataParameter& a, DummyDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DummyDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DummyDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DummyDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DummyDataParameter";
  }
  protected:
  explicit DummyDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFillerFieldNumber = 1,
    kNumFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kShapeFieldNumber = 6,
  };
  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  int data_filler_size() const;
  private:
  int _internal_data_filler_size() const;
  public:
  void clear_data_filler();
  ::apollo::perception::inference::FillerParameter* mutable_data_filler(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >*
      mutable_data_filler();
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_data_filler(int index) const;
  ::apollo::perception::inference::FillerParameter* _internal_add_data_filler();
  public:
  const ::apollo::perception::inference::FillerParameter& data_filler(int index) const;
  ::apollo::perception::inference::FillerParameter* add_data_filler();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >&
      data_filler() const;

  // repeated uint32 num = 2;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  private:
  uint32_t _internal_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_num() const;
  void _internal_add_num(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_num();
  public:
  uint32_t num(int index) const;
  void set_num(int index, uint32_t value);
  void add_num(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  uint32_t _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_channels() const;
  void _internal_add_channels(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_channels();
  public:
  uint32_t channels(int index) const;
  void set_channels(int index, uint32_t value);
  void add_channels(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  private:
  int _internal_height_size() const;
  public:
  void clear_height();
  private:
  uint32_t _internal_height(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_height() const;
  void _internal_add_height(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_height();
  public:
  uint32_t height(int index) const;
  void set_height(int index, uint32_t value);
  void add_height(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      height() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  private:
  int _internal_width_size() const;
  public:
  void clear_width();
  private:
  uint32_t _internal_width(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_width() const;
  void _internal_add_width(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_width();
  public:
  uint32_t width(int index) const;
  void set_width(int index, uint32_t value);
  void add_width(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      width() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_width();

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  ::apollo::perception::inference::BlobShape* mutable_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_shape();
  private:
  const ::apollo::perception::inference::BlobShape& _internal_shape(int index) const;
  ::apollo::perception::inference::BlobShape* _internal_add_shape();
  public:
  const ::apollo::perception::inference::BlobShape& shape(int index) const;
  ::apollo::perception::inference::BlobShape* add_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DummyDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::FillerParameter > data_filler_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > num_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > height_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > width_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape > shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class EltwiseParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.EltwiseParameter) */ {
 public:
  inline EltwiseParameter() : EltwiseParameter(nullptr) {}
  ~EltwiseParameter() override;
  explicit PROTOBUF_CONSTEXPR EltwiseParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EltwiseParameter(const EltwiseParameter& from);
  EltwiseParameter(EltwiseParameter&& from) noexcept
    : EltwiseParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EltwiseParameter& operator=(EltwiseParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EltwiseParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(EltwiseParameter& a, EltwiseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EltwiseParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EltwiseParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EltwiseParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EltwiseParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EltwiseParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EltwiseParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EltwiseParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.EltwiseParameter";
  }
  protected:
  explicit EltwiseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static constexpr EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static constexpr EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static constexpr EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static constexpr EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static constexpr EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static constexpr int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  template<typename T>
  static inline const std::string& EltwiseOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EltwiseOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EltwiseOp_Name.");
    return EltwiseParameter_EltwiseOp_Name(enum_t_value);
  }
  static inline bool EltwiseOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffFieldNumber = 2,
    kOperationFieldNumber = 1,
    kStableProdGradFieldNumber = 3,
  };
  // repeated float coeff = 2;
  int coeff_size() const;
  private:
  int _internal_coeff_size() const;
  public:
  void clear_coeff();
  private:
  float _internal_coeff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coeff() const;
  void _internal_add_coeff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coeff();
  public:
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coeff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coeff();

  // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::apollo::perception::inference::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value);
  private:
  ::apollo::perception::inference::EltwiseParameter_EltwiseOp _internal_operation() const;
  void _internal_set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value);
  public:

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  private:
  bool _internal_has_stable_prod_grad() const;
  public:
  void clear_stable_prod_grad();
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);
  private:
  bool _internal_stable_prod_grad() const;
  void _internal_set_stable_prod_grad(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EltwiseParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coeff_;
    int operation_;
    bool stable_prod_grad_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ELUParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ELUParameter) */ {
 public:
  inline ELUParameter() : ELUParameter(nullptr) {}
  ~ELUParameter() override;
  explicit PROTOBUF_CONSTEXPR ELUParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ELUParameter(const ELUParameter& from);
  ELUParameter(ELUParameter&& from) noexcept
    : ELUParameter() {
    *this = ::std::move(from);
  }

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ELUParameter& operator=(ELUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ELUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ELUParameter& a, ELUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ELUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ELUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ELUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ELUParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ELUParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ELUParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ELUParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ELUParameter";
  }
  protected:
  explicit ELUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ELUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float alpha_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class EmbedParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.EmbedParameter) */ {
 public:
  inline EmbedParameter() : EmbedParameter(nullptr) {}
  ~EmbedParameter() override;
  explicit PROTOBUF_CONSTEXPR EmbedParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedParameter(const EmbedParameter& from);
  EmbedParameter(EmbedParameter&& from) noexcept
    : EmbedParameter() {
    *this = ::std::move(from);
  }

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedParameter& operator=(EmbedParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(EmbedParameter& a, EmbedParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmbedParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.EmbedParameter";
  }
  protected:
  explicit EmbedParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 4,
    kBiasFillerFieldNumber = 5,
    kNumOutputFieldNumber = 1,
    kInputDimFieldNumber = 2,
    kBiasTermFieldNumber = 3,
  };
  // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_weight_filler();
  ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_weight_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::apollo::perception::inference::FillerParameter* weight_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  private:
  bool _internal_has_input_dim() const;
  public:
  void clear_input_dim();
  uint32_t input_dim() const;
  void set_input_dim(uint32_t value);
  private:
  uint32_t _internal_input_dim() const;
  void _internal_set_input_dim(uint32_t value);
  public:

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EmbedParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* weight_filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    uint32_t num_output_;
    uint32_t input_dim_;
    bool bias_term_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ExpParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ExpParameter) */ {
 public:
  inline ExpParameter() : ExpParameter(nullptr) {}
  ~ExpParameter() override;
  explicit PROTOBUF_CONSTEXPR ExpParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpParameter(const ExpParameter& from);
  ExpParameter(ExpParameter&& from) noexcept
    : ExpParameter() {
    *this = ::std::move(from);
  }

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpParameter& operator=(ExpParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ExpParameter& a, ExpParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ExpParameter";
  }
  protected:
  explicit ExpParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float base = 1 [default = -1];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  float base() const;
  void set_base(float value);
  private:
  float _internal_base() const;
  void _internal_set_base(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ExpParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float shift_;
    float base_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class FlattenParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.FlattenParameter) */ {
 public:
  inline FlattenParameter() : FlattenParameter(nullptr) {}
  ~FlattenParameter() override;
  explicit PROTOBUF_CONSTEXPR FlattenParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlattenParameter(const FlattenParameter& from);
  FlattenParameter(FlattenParameter&& from) noexcept
    : FlattenParameter() {
    *this = ::std::move(from);
  }

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenParameter& operator=(FlattenParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlattenParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FlattenParameter& a, FlattenParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlattenParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlattenParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlattenParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlattenParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlattenParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlattenParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.FlattenParameter";
  }
  protected:
  explicit FlattenParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kEndAxisFieldNumber = 2,
  };
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  private:
  bool _internal_has_end_axis() const;
  public:
  void clear_end_axis();
  int32_t end_axis() const;
  void set_end_axis(int32_t value);
  private:
  int32_t _internal_end_axis() const;
  void _internal_set_end_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.FlattenParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t axis_;
    int32_t end_axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class HDF5DataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.HDF5DataParameter) */ {
 public:
  inline HDF5DataParameter() : HDF5DataParameter(nullptr) {}
  ~HDF5DataParameter() override;
  explicit PROTOBUF_CONSTEXPR HDF5DataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HDF5DataParameter(const HDF5DataParameter& from);
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HDF5DataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5DataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5DataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HDF5DataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HDF5DataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HDF5DataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HDF5DataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5DataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.HDF5DataParameter";
  }
  protected:
  explicit HDF5DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
    kShuffleFieldNumber = 3,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HDF5DataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    uint32_t batch_size_;
    bool shuffle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class HDF5OutputParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.HDF5OutputParameter) */ {
 public:
  inline HDF5OutputParameter() : HDF5OutputParameter(nullptr) {}
  ~HDF5OutputParameter() override;
  explicit PROTOBUF_CONSTEXPR HDF5OutputParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HDF5OutputParameter(const HDF5OutputParameter& from);
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HDF5OutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5OutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5OutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HDF5OutputParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HDF5OutputParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HDF5OutputParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5OutputParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.HDF5OutputParameter";
  }
  protected:
  explicit HDF5OutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HDF5OutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class HingeLossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.HingeLossParameter) */ {
 public:
  inline HingeLossParameter() : HingeLossParameter(nullptr) {}
  ~HingeLossParameter() override;
  explicit PROTOBUF_CONSTEXPR HingeLossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HingeLossParameter(const HingeLossParameter& from);
  HingeLossParameter(HingeLossParameter&& from) noexcept
    : HingeLossParameter() {
    *this = ::std::move(from);
  }

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HingeLossParameter& operator=(HingeLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HingeLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(HingeLossParameter& a, HingeLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HingeLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HingeLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HingeLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HingeLossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HingeLossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HingeLossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HingeLossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.HingeLossParameter";
  }
  protected:
  explicit HingeLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static constexpr Norm L1 =
    HingeLossParameter_Norm_L1;
  static constexpr Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static constexpr Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static constexpr Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static constexpr int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  template<typename T>
  static inline const std::string& Norm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Norm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Norm_Name.");
    return HingeLossParameter_Norm_Name(enum_t_value);
  }
  static inline bool Norm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormFieldNumber = 1,
  };
  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  private:
  bool _internal_has_norm() const;
  public:
  void clear_norm();
  ::apollo::perception::inference::HingeLossParameter_Norm norm() const;
  void set_norm(::apollo::perception::inference::HingeLossParameter_Norm value);
  private:
  ::apollo::perception::inference::HingeLossParameter_Norm _internal_norm() const;
  void _internal_set_norm(::apollo::perception::inference::HingeLossParameter_Norm value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HingeLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int norm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class RepeatedList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.RepeatedList) */ {
 public:
  inline RepeatedList() : RepeatedList(nullptr) {}
  ~RepeatedList() override;
  explicit PROTOBUF_CONSTEXPR RepeatedList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedList(const RepeatedList& from);
  RepeatedList(RepeatedList&& from) noexcept
    : RepeatedList() {
    *this = ::std::move(from);
  }

  inline RepeatedList& operator=(const RepeatedList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedList& operator=(RepeatedList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedList* internal_default_instance() {
    return reinterpret_cast<const RepeatedList*>(
               &_RepeatedList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RepeatedList& a, RepeatedList& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.RepeatedList";
  }
  protected:
  explicit RepeatedList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListPathFieldNumber = 1,
    kNumRepeatFieldNumber = 2,
  };
  // optional string list_path = 1;
  bool has_list_path() const;
  private:
  bool _internal_has_list_path() const;
  public:
  void clear_list_path();
  const std::string& list_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_list_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_list_path();
  PROTOBUF_NODISCARD std::string* release_list_path();
  void set_allocated_list_path(std::string* list_path);
  private:
  const std::string& _internal_list_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_list_path(const std::string& value);
  std::string* _internal_mutable_list_path();
  public:

  // optional uint32 num_repeat = 2 [default = 1];
  bool has_num_repeat() const;
  private:
  bool _internal_has_num_repeat() const;
  public:
  void clear_num_repeat();
  uint32_t num_repeat() const;
  void set_num_repeat(uint32_t value);
  private:
  uint32_t _internal_num_repeat() const;
  void _internal_set_num_repeat(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RepeatedList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_path_;
    uint32_t num_repeat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DatasetParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DatasetParameter) */ {
 public:
  inline DatasetParameter() : DatasetParameter(nullptr) {}
  ~DatasetParameter() override;
  explicit PROTOBUF_CONSTEXPR DatasetParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetParameter(const DatasetParameter& from);
  DatasetParameter(DatasetParameter&& from) noexcept
    : DatasetParameter() {
    *this = ::std::move(from);
  }

  inline DatasetParameter& operator=(const DatasetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetParameter& operator=(DatasetParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetParameter* internal_default_instance() {
    return reinterpret_cast<const DatasetParameter*>(
               &_DatasetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DatasetParameter& a, DatasetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DatasetParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DatasetParameter";
  }
  protected:
  explicit DatasetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DatasetParameter_DatasetType DatasetType;
  static constexpr DatasetType LIST =
    DatasetParameter_DatasetType_LIST;
  static constexpr DatasetType BLOCK =
    DatasetParameter_DatasetType_BLOCK;
  static inline bool DatasetType_IsValid(int value) {
    return DatasetParameter_DatasetType_IsValid(value);
  }
  static constexpr DatasetType DatasetType_MIN =
    DatasetParameter_DatasetType_DatasetType_MIN;
  static constexpr DatasetType DatasetType_MAX =
    DatasetParameter_DatasetType_DatasetType_MAX;
  static constexpr int DatasetType_ARRAYSIZE =
    DatasetParameter_DatasetType_DatasetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DatasetType_descriptor() {
    return DatasetParameter_DatasetType_descriptor();
  }
  template<typename T>
  static inline const std::string& DatasetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DatasetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DatasetType_Name.");
    return DatasetParameter_DatasetType_Name(enum_t_value);
  }
  static inline bool DatasetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DatasetType* value) {
    return DatasetParameter_DatasetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedListFieldNumber = 6,
    kSourceFieldNumber = 1,
    kRootFolderFieldNumber = 2,
    kShuffleFieldNumber = 5,
    kWeightFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  int repeated_list_size() const;
  private:
  int _internal_repeated_list_size() const;
  public:
  void clear_repeated_list();
  ::apollo::perception::inference::RepeatedList* mutable_repeated_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >*
      mutable_repeated_list();
  private:
  const ::apollo::perception::inference::RepeatedList& _internal_repeated_list(int index) const;
  ::apollo::perception::inference::RepeatedList* _internal_add_repeated_list();
  public:
  const ::apollo::perception::inference::RepeatedList& repeated_list(int index) const;
  ::apollo::perception::inference::RepeatedList* add_repeated_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >&
      repeated_list() const;

  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string root_folder = 2;
  bool has_root_folder() const;
  private:
  bool _internal_has_root_folder() const;
  public:
  void clear_root_folder();
  const std::string& root_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_folder();
  PROTOBUF_NODISCARD std::string* release_root_folder();
  void set_allocated_root_folder(std::string* root_folder);
  private:
  const std::string& _internal_root_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(const std::string& value);
  std::string* _internal_mutable_root_folder();
  public:

  // optional bool shuffle = 5 [default = true];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional float weight = 3 [default = 1];
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::inference::DatasetParameter_DatasetType type() const;
  void set_type(::apollo::perception::inference::DatasetParameter_DatasetType value);
  private:
  ::apollo::perception::inference::DatasetParameter_DatasetType _internal_type() const;
  void _internal_set_type(::apollo::perception::inference::DatasetParameter_DatasetType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DatasetParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::RepeatedList > repeated_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_folder_;
    bool shuffle_;
    float weight_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ImageDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ImageDataParameter) */ {
 public:
  inline ImageDataParameter() : ImageDataParameter(nullptr) {}
  ~ImageDataParameter() override;
  explicit PROTOBUF_CONSTEXPR ImageDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageDataParameter(const ImageDataParameter& from);
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ImageDataParameter";
  }
  protected:
  explicit ImageDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSetFieldNumber = 100,
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kRootFolderFieldNumber = 12,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kShuffleFieldNumber = 8,
    kMirrorFieldNumber = 6,
    kNewHeightFieldNumber = 9,
    kNewWidthFieldNumber = 10,
    kScaleFieldNumber = 2,
    kBatchSizeFieldNumber = 4,
    kIsColorFieldNumber = 11,
    kPrefetchFieldNumber = 20,
  };
  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  int image_set_size() const;
  private:
  int _internal_image_set_size() const;
  public:
  void clear_image_set();
  ::apollo::perception::inference::DatasetParameter* mutable_image_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >*
      mutable_image_set();
  private:
  const ::apollo::perception::inference::DatasetParameter& _internal_image_set(int index) const;
  ::apollo::perception::inference::DatasetParameter* _internal_add_image_set();
  public:
  const ::apollo::perception::inference::DatasetParameter& image_set(int index) const;
  ::apollo::perception::inference::DatasetParameter* add_image_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >&
      image_set() const;

  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mean_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  private:
  bool _internal_has_root_folder() const;
  public:
  void clear_root_folder();
  const std::string& root_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_folder();
  PROTOBUF_NODISCARD std::string* release_root_folder();
  void set_allocated_root_folder(std::string* root_folder);
  private:
  const std::string& _internal_root_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(const std::string& value);
  std::string* _internal_mutable_root_folder();
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  uint32_t crop_size() const;
  void set_crop_size(uint32_t value);
  private:
  uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(uint32_t value);
  public:

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  uint32_t rand_skip() const;
  void set_rand_skip(uint32_t value);
  private:
  uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(uint32_t value);
  public:

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  uint32_t new_height() const;
  void set_new_height(uint32_t value);
  private:
  uint32_t _internal_new_height() const;
  void _internal_set_new_height(uint32_t value);
  public:

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  uint32_t new_width() const;
  void set_new_width(uint32_t value);
  private:
  uint32_t _internal_new_width() const;
  void _internal_set_new_width(uint32_t value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  private:
  bool _internal_has_is_color() const;
  public:
  void clear_is_color();
  bool is_color() const;
  void set_is_color(bool value);
  private:
  bool _internal_is_color() const;
  void _internal_set_is_color(bool value);
  public:

  // optional uint32 prefetch = 20 [default = 4];
  bool has_prefetch() const;
  private:
  bool _internal_has_prefetch() const;
  public:
  void clear_prefetch();
  uint32_t prefetch() const;
  void set_prefetch(uint32_t value);
  private:
  uint32_t _internal_prefetch() const;
  void _internal_set_prefetch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ImageDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter > image_set_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_folder_;
    uint32_t crop_size_;
    uint32_t rand_skip_;
    bool shuffle_;
    bool mirror_;
    uint32_t new_height_;
    uint32_t new_width_;
    float scale_;
    uint32_t batch_size_;
    bool is_color_;
    uint32_t prefetch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class InfogainLossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.InfogainLossParameter) */ {
 public:
  inline InfogainLossParameter() : InfogainLossParameter(nullptr) {}
  ~InfogainLossParameter() override;
  explicit PROTOBUF_CONSTEXPR InfogainLossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfogainLossParameter(const InfogainLossParameter& from);
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfogainLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InfogainLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfogainLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfogainLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfogainLossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfogainLossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfogainLossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfogainLossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.InfogainLossParameter";
  }
  protected:
  explicit InfogainLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InfogainLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class InnerProductParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.InnerProductParameter) */ {
 public:
  inline InnerProductParameter() : InnerProductParameter(nullptr) {}
  ~InnerProductParameter() override;
  explicit PROTOBUF_CONSTEXPR InnerProductParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerProductParameter(const InnerProductParameter& from);
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerProductParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerProductParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerProductParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerProductParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerProductParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerProductParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InnerProductParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerProductParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.InnerProductParameter";
  }
  protected:
  explicit InnerProductParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 4,
    kNumOutputFieldNumber = 1,
    kTransposeFieldNumber = 6,
    kBiasTermFieldNumber = 2,
    kAxisFieldNumber = 5,
  };
  // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_weight_filler();
  ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_weight_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::apollo::perception::inference::FillerParameter* weight_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  private:
  bool _internal_has_transpose() const;
  public:
  void clear_transpose();
  bool transpose() const;
  void set_transpose(bool value);
  private:
  bool _internal_transpose() const;
  void _internal_set_transpose(bool value);
  public:

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InnerProductParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* weight_filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    uint32_t num_output_;
    bool transpose_;
    bool bias_term_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class InputParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.InputParameter) */ {
 public:
  inline InputParameter() : InputParameter(nullptr) {}
  ~InputParameter() override;
  explicit PROTOBUF_CONSTEXPR InputParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputParameter(const InputParameter& from);
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InputParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.InputParameter";
  }
  protected:
  explicit InputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // repeated .apollo.perception.inference.BlobShape shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  ::apollo::perception::inference::BlobShape* mutable_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_shape();
  private:
  const ::apollo::perception::inference::BlobShape& _internal_shape(int index) const;
  ::apollo::perception::inference::BlobShape* _internal_add_shape();
  public:
  const ::apollo::perception::inference::BlobShape& shape(int index) const;
  ::apollo::perception::inference::BlobShape* add_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape > shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LogParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LogParameter) */ {
 public:
  inline LogParameter() : LogParameter(nullptr) {}
  ~LogParameter() override;
  explicit PROTOBUF_CONSTEXPR LogParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogParameter(const LogParameter& from);
  LogParameter(LogParameter&& from) noexcept
    : LogParameter() {
    *this = ::std::move(from);
  }

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogParameter& operator=(LogParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(LogParameter& a, LogParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LogParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LogParameter";
  }
  protected:
  explicit LogParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float base = 1 [default = -1];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  float base() const;
  void set_base(float value);
  private:
  float _internal_base() const;
  void _internal_set_base(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LogParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float shift_;
    float base_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class LRNParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.LRNParameter) */ {
 public:
  inline LRNParameter() : LRNParameter(nullptr) {}
  ~LRNParameter() override;
  explicit PROTOBUF_CONSTEXPR LRNParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LRNParameter(const LRNParameter& from);
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LRNParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LRNParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LRNParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LRNParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LRNParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LRNParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LRNParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LRNParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.LRNParameter";
  }
  protected:
  explicit LRNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static constexpr NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static constexpr NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static constexpr NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static constexpr NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static constexpr int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  template<typename T>
  static inline const std::string& NormRegion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormRegion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormRegion_Name.");
    return LRNParameter_NormRegion_Name(enum_t_value);
  }
  static inline bool NormRegion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return LRNParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormRegionFieldNumber = 4,
    kEngineFieldNumber = 6,
    kLocalSizeFieldNumber = 1,
    kAlphaFieldNumber = 2,
    kBetaFieldNumber = 3,
    kKFieldNumber = 5,
  };
  // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  private:
  bool _internal_has_norm_region() const;
  public:
  void clear_norm_region();
  ::apollo::perception::inference::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value);
  private:
  ::apollo::perception::inference::LRNParameter_NormRegion _internal_norm_region() const;
  void _internal_set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value);
  public:

  // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::LRNParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::LRNParameter_Engine value);
  private:
  ::apollo::perception::inference::LRNParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::LRNParameter_Engine value);
  public:

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  uint32_t local_size() const;
  void set_local_size(uint32_t value);
  private:
  uint32_t _internal_local_size() const;
  void _internal_set_local_size(uint32_t value);
  public:

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional float k = 5 [default = 1];
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LRNParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int norm_region_;
    int engine_;
    uint32_t local_size_;
    float alpha_;
    float beta_;
    float k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class MemoryDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.MemoryDataParameter) */ {
 public:
  inline MemoryDataParameter() : MemoryDataParameter(nullptr) {}
  ~MemoryDataParameter() override;
  explicit PROTOBUF_CONSTEXPR MemoryDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryDataParameter(const MemoryDataParameter& from);
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.MemoryDataParameter";
  }
  protected:
  explicit MemoryDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchSizeFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // optional uint32 channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MemoryDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t batch_size_;
    uint32_t channels_;
    uint32_t height_;
    uint32_t width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class MultiBoxLossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.MultiBoxLossParameter) */ {
 public:
  inline MultiBoxLossParameter() : MultiBoxLossParameter(nullptr) {}
  ~MultiBoxLossParameter() override;
  explicit PROTOBUF_CONSTEXPR MultiBoxLossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiBoxLossParameter(const MultiBoxLossParameter& from);
  MultiBoxLossParameter(MultiBoxLossParameter&& from) noexcept
    : MultiBoxLossParameter() {
    *this = ::std::move(from);
  }

  inline MultiBoxLossParameter& operator=(const MultiBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiBoxLossParameter& operator=(MultiBoxLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiBoxLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiBoxLossParameter* internal_default_instance() {
    return reinterpret_cast<const MultiBoxLossParameter*>(
               &_MultiBoxLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(MultiBoxLossParameter& a, MultiBoxLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiBoxLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiBoxLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiBoxLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiBoxLossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiBoxLossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiBoxLossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiBoxLossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.MultiBoxLossParameter";
  }
  protected:
  explicit MultiBoxLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MultiBoxLossParameter_LocLossType LocLossType;
  static constexpr LocLossType L2 =
    MultiBoxLossParameter_LocLossType_L2;
  static constexpr LocLossType SMOOTH_L1 =
    MultiBoxLossParameter_LocLossType_SMOOTH_L1;
  static inline bool LocLossType_IsValid(int value) {
    return MultiBoxLossParameter_LocLossType_IsValid(value);
  }
  static constexpr LocLossType LocLossType_MIN =
    MultiBoxLossParameter_LocLossType_LocLossType_MIN;
  static constexpr LocLossType LocLossType_MAX =
    MultiBoxLossParameter_LocLossType_LocLossType_MAX;
  static constexpr int LocLossType_ARRAYSIZE =
    MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LocLossType_descriptor() {
    return MultiBoxLossParameter_LocLossType_descriptor();
  }
  template<typename T>
  static inline const std::string& LocLossType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LocLossType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LocLossType_Name.");
    return MultiBoxLossParameter_LocLossType_Name(enum_t_value);
  }
  static inline bool LocLossType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LocLossType* value) {
    return MultiBoxLossParameter_LocLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_ConfLossType ConfLossType;
  static constexpr ConfLossType SOFTMAX =
    MultiBoxLossParameter_ConfLossType_SOFTMAX;
  static constexpr ConfLossType LOGISTIC =
    MultiBoxLossParameter_ConfLossType_LOGISTIC;
  static inline bool ConfLossType_IsValid(int value) {
    return MultiBoxLossParameter_ConfLossType_IsValid(value);
  }
  static constexpr ConfLossType ConfLossType_MIN =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MIN;
  static constexpr ConfLossType ConfLossType_MAX =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MAX;
  static constexpr int ConfLossType_ARRAYSIZE =
    MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConfLossType_descriptor() {
    return MultiBoxLossParameter_ConfLossType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConfLossType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConfLossType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConfLossType_Name.");
    return MultiBoxLossParameter_ConfLossType_Name(enum_t_value);
  }
  static inline bool ConfLossType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConfLossType* value) {
    return MultiBoxLossParameter_ConfLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MatchType MatchType;
  static constexpr MatchType BIPARTITE =
    MultiBoxLossParameter_MatchType_BIPARTITE;
  static constexpr MatchType PER_PREDICTION =
    MultiBoxLossParameter_MatchType_PER_PREDICTION;
  static inline bool MatchType_IsValid(int value) {
    return MultiBoxLossParameter_MatchType_IsValid(value);
  }
  static constexpr MatchType MatchType_MIN =
    MultiBoxLossParameter_MatchType_MatchType_MIN;
  static constexpr MatchType MatchType_MAX =
    MultiBoxLossParameter_MatchType_MatchType_MAX;
  static constexpr int MatchType_ARRAYSIZE =
    MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatchType_descriptor() {
    return MultiBoxLossParameter_MatchType_descriptor();
  }
  template<typename T>
  static inline const std::string& MatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatchType_Name.");
    return MultiBoxLossParameter_MatchType_Name(enum_t_value);
  }
  static inline bool MatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatchType* value) {
    return MultiBoxLossParameter_MatchType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MiningType MiningType;
  static constexpr MiningType NONE =
    MultiBoxLossParameter_MiningType_NONE;
  static constexpr MiningType MAX_NEGATIVE =
    MultiBoxLossParameter_MiningType_MAX_NEGATIVE;
  static constexpr MiningType HARD_EXAMPLE =
    MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
  static inline bool MiningType_IsValid(int value) {
    return MultiBoxLossParameter_MiningType_IsValid(value);
  }
  static constexpr MiningType MiningType_MIN =
    MultiBoxLossParameter_MiningType_MiningType_MIN;
  static constexpr MiningType MiningType_MAX =
    MultiBoxLossParameter_MiningType_MiningType_MAX;
  static constexpr int MiningType_ARRAYSIZE =
    MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MiningType_descriptor() {
    return MultiBoxLossParameter_MiningType_descriptor();
  }
  template<typename T>
  static inline const std::string& MiningType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MiningType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MiningType_Name.");
    return MultiBoxLossParameter_MiningType_Name(enum_t_value);
  }
  static inline bool MiningType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MiningType* value) {
    return MultiBoxLossParameter_MiningType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNmsParamFieldNumber = 21,
    kConfLossTypeFieldNumber = 2,
    kNumClassesFieldNumber = 4,
    kBackgroundLabelIdFieldNumber = 9,
    kDoNegMiningFieldNumber = 11,
    kEncodeVarianceInTargetFieldNumber = 16,
    kMapObjectToAgnosticFieldNumber = 17,
    kIgnoreCrossBoundaryBboxFieldNumber = 18,
    kBpInsideFieldNumber = 19,
    kUsePriorForNmsFieldNumber = 23,
    kLocLossTypeFieldNumber = 1,
    kLocWeightFieldNumber = 3,
    kMatchTypeFieldNumber = 6,
    kOverlapThresholdFieldNumber = 7,
    kShareLocationFieldNumber = 5,
    kUsePriorForMatchingFieldNumber = 8,
    kUseDifficultGtFieldNumber = 10,
    kNegPosRatioFieldNumber = 12,
    kNegOverlapFieldNumber = 13,
    kCodeTypeFieldNumber = 14,
    kMiningTypeFieldNumber = 20,
    kSampleSizeFieldNumber = 22,
  };
  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  private:
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  ::apollo::perception::inference::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  bool has_conf_loss_type() const;
  private:
  bool _internal_has_conf_loss_type() const;
  public:
  void clear_conf_loss_type();
  ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value);
  private:
  ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType _internal_conf_loss_type() const;
  void _internal_set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value);
  public:

  // optional uint32 num_classes = 4;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional uint32 background_label_id = 9 [default = 0];
  bool has_background_label_id() const;
  private:
  bool _internal_has_background_label_id() const;
  public:
  void clear_background_label_id();
  uint32_t background_label_id() const;
  void set_background_label_id(uint32_t value);
  private:
  uint32_t _internal_background_label_id() const;
  void _internal_set_background_label_id(uint32_t value);
  public:

  // optional bool do_neg_mining = 11;
  bool has_do_neg_mining() const;
  private:
  bool _internal_has_do_neg_mining() const;
  public:
  void clear_do_neg_mining();
  bool do_neg_mining() const;
  void set_do_neg_mining(bool value);
  private:
  bool _internal_do_neg_mining() const;
  void _internal_set_do_neg_mining(bool value);
  public:

  // optional bool encode_variance_in_target = 16 [default = false];
  bool has_encode_variance_in_target() const;
  private:
  bool _internal_has_encode_variance_in_target() const;
  public:
  void clear_encode_variance_in_target();
  bool encode_variance_in_target() const;
  void set_encode_variance_in_target(bool value);
  private:
  bool _internal_encode_variance_in_target() const;
  void _internal_set_encode_variance_in_target(bool value);
  public:

  // optional bool map_object_to_agnostic = 17 [default = false];
  bool has_map_object_to_agnostic() const;
  private:
  bool _internal_has_map_object_to_agnostic() const;
  public:
  void clear_map_object_to_agnostic();
  bool map_object_to_agnostic() const;
  void set_map_object_to_agnostic(bool value);
  private:
  bool _internal_map_object_to_agnostic() const;
  void _internal_set_map_object_to_agnostic(bool value);
  public:

  // optional bool ignore_cross_boundary_bbox = 18 [default = false];
  bool has_ignore_cross_boundary_bbox() const;
  private:
  bool _internal_has_ignore_cross_boundary_bbox() const;
  public:
  void clear_ignore_cross_boundary_bbox();
  bool ignore_cross_boundary_bbox() const;
  void set_ignore_cross_boundary_bbox(bool value);
  private:
  bool _internal_ignore_cross_boundary_bbox() const;
  void _internal_set_ignore_cross_boundary_bbox(bool value);
  public:

  // optional bool bp_inside = 19 [default = false];
  bool has_bp_inside() const;
  private:
  bool _internal_has_bp_inside() const;
  public:
  void clear_bp_inside();
  bool bp_inside() const;
  void set_bp_inside(bool value);
  private:
  bool _internal_bp_inside() const;
  void _internal_set_bp_inside(bool value);
  public:

  // optional bool use_prior_for_nms = 23 [default = false];
  bool has_use_prior_for_nms() const;
  private:
  bool _internal_has_use_prior_for_nms() const;
  public:
  void clear_use_prior_for_nms();
  bool use_prior_for_nms() const;
  void set_use_prior_for_nms(bool value);
  private:
  bool _internal_use_prior_for_nms() const;
  void _internal_set_use_prior_for_nms(bool value);
  public:

  // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  bool has_loc_loss_type() const;
  private:
  bool _internal_has_loc_loss_type() const;
  public:
  void clear_loc_loss_type();
  ::apollo::perception::inference::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  void set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value);
  private:
  ::apollo::perception::inference::MultiBoxLossParameter_LocLossType _internal_loc_loss_type() const;
  void _internal_set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value);
  public:

  // optional float loc_weight = 3 [default = 1];
  bool has_loc_weight() const;
  private:
  bool _internal_has_loc_weight() const;
  public:
  void clear_loc_weight();
  float loc_weight() const;
  void set_loc_weight(float value);
  private:
  float _internal_loc_weight() const;
  void _internal_set_loc_weight(float value);
  public:

  // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::apollo::perception::inference::MultiBoxLossParameter_MatchType match_type() const;
  void set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value);
  private:
  ::apollo::perception::inference::MultiBoxLossParameter_MatchType _internal_match_type() const;
  void _internal_set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value);
  public:

  // optional float overlap_threshold = 7 [default = 0.5];
  bool has_overlap_threshold() const;
  private:
  bool _internal_has_overlap_threshold() const;
  public:
  void clear_overlap_threshold();
  float overlap_threshold() const;
  void set_overlap_threshold(float value);
  private:
  float _internal_overlap_threshold() const;
  void _internal_set_overlap_threshold(float value);
  public:

  // optional bool share_location = 5 [default = true];
  bool has_share_location() const;
  private:
  bool _internal_has_share_location() const;
  public:
  void clear_share_location();
  bool share_location() const;
  void set_share_location(bool value);
  private:
  bool _internal_share_location() const;
  void _internal_set_share_location(bool value);
  public:

  // optional bool use_prior_for_matching = 8 [default = true];
  bool has_use_prior_for_matching() const;
  private:
  bool _internal_has_use_prior_for_matching() const;
  public:
  void clear_use_prior_for_matching();
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);
  private:
  bool _internal_use_prior_for_matching() const;
  void _internal_set_use_prior_for_matching(bool value);
  public:

  // optional bool use_difficult_gt = 10 [default = true];
  bool has_use_difficult_gt() const;
  private:
  bool _internal_has_use_difficult_gt() const;
  public:
  void clear_use_difficult_gt();
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);
  private:
  bool _internal_use_difficult_gt() const;
  void _internal_set_use_difficult_gt(bool value);
  public:

  // optional float neg_pos_ratio = 12 [default = 3];
  bool has_neg_pos_ratio() const;
  private:
  bool _internal_has_neg_pos_ratio() const;
  public:
  void clear_neg_pos_ratio();
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);
  private:
  float _internal_neg_pos_ratio() const;
  void _internal_set_neg_pos_ratio(float value);
  public:

  // optional float neg_overlap = 13 [default = 0.5];
  bool has_neg_overlap() const;
  private:
  bool _internal_has_neg_overlap() const;
  public:
  void clear_neg_overlap();
  float neg_overlap() const;
  void set_neg_overlap(float value);
  private:
  float _internal_neg_overlap() const;
  void _internal_set_neg_overlap(float value);
  public:

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  bool has_code_type() const;
  private:
  bool _internal_has_code_type() const;
  public:
  void clear_code_type();
  ::apollo::perception::inference::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);
  private:
  ::apollo::perception::inference::PriorBoxParameter_CodeType _internal_code_type() const;
  void _internal_set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);
  public:

  // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
  bool has_mining_type() const;
  private:
  bool _internal_has_mining_type() const;
  public:
  void clear_mining_type();
  ::apollo::perception::inference::MultiBoxLossParameter_MiningType mining_type() const;
  void set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value);
  private:
  ::apollo::perception::inference::MultiBoxLossParameter_MiningType _internal_mining_type() const;
  void _internal_set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value);
  public:

  // optional int32 sample_size = 22 [default = 64];
  bool has_sample_size() const;
  private:
  bool _internal_has_sample_size() const;
  public:
  void clear_sample_size();
  int32_t sample_size() const;
  void set_sample_size(int32_t value);
  private:
  int32_t _internal_sample_size() const;
  void _internal_set_sample_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MultiBoxLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
    int conf_loss_type_;
    uint32_t num_classes_;
    uint32_t background_label_id_;
    bool do_neg_mining_;
    bool encode_variance_in_target_;
    bool map_object_to_agnostic_;
    bool ignore_cross_boundary_bbox_;
    bool bp_inside_;
    bool use_prior_for_nms_;
    int loc_loss_type_;
    float loc_weight_;
    int match_type_;
    float overlap_threshold_;
    bool share_location_;
    bool use_prior_for_matching_;
    bool use_difficult_gt_;
    float neg_pos_ratio_;
    float neg_overlap_;
    int code_type_;
    int mining_type_;
    int32_t sample_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class MVNParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.MVNParameter) */ {
 public:
  inline MVNParameter() : MVNParameter(nullptr) {}
  ~MVNParameter() override;
  explicit PROTOBUF_CONSTEXPR MVNParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MVNParameter(const MVNParameter& from);
  MVNParameter(MVNParameter&& from) noexcept
    : MVNParameter() {
    *this = ::std::move(from);
  }

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MVNParameter& operator=(MVNParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MVNParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(MVNParameter& a, MVNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MVNParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MVNParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MVNParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MVNParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MVNParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MVNParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MVNParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.MVNParameter";
  }
  protected:
  explicit MVNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcrossChannelsFieldNumber = 2,
    kNormalizeVarianceFieldNumber = 1,
    kEpsFieldNumber = 3,
  };
  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  private:
  bool _internal_has_across_channels() const;
  public:
  void clear_across_channels();
  bool across_channels() const;
  void set_across_channels(bool value);
  private:
  bool _internal_across_channels() const;
  void _internal_set_across_channels(bool value);
  public:

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  private:
  bool _internal_has_normalize_variance() const;
  public:
  void clear_normalize_variance();
  bool normalize_variance() const;
  void set_normalize_variance(bool value);
  private:
  bool _internal_normalize_variance() const;
  void _internal_set_normalize_variance(bool value);
  public:

  // optional float eps = 3 [default = 1e-09];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MVNParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool across_channels_;
    bool normalize_variance_;
    float eps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NormalizeParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NormalizeParameter) */ {
 public:
  inline NormalizeParameter() : NormalizeParameter(nullptr) {}
  ~NormalizeParameter() override;
  explicit PROTOBUF_CONSTEXPR NormalizeParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalizeParameter(const NormalizeParameter& from);
  NormalizeParameter(NormalizeParameter&& from) noexcept
    : NormalizeParameter() {
    *this = ::std::move(from);
  }

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizeParameter& operator=(NormalizeParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NormalizeParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizeParameter* internal_default_instance() {
    return reinterpret_cast<const NormalizeParameter*>(
               &_NormalizeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(NormalizeParameter& a, NormalizeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizeParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalizeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalizeParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NormalizeParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NormalizeParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizeParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NormalizeParameter";
  }
  protected:
  explicit NormalizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFillerFieldNumber = 2,
    kAcrossSpatialFieldNumber = 1,
    kChannelSharedFieldNumber = 3,
    kEpsFieldNumber = 4,
  };
  // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
  bool has_scale_filler() const;
  private:
  bool _internal_has_scale_filler() const;
  public:
  void clear_scale_filler();
  const ::apollo::perception::inference::FillerParameter& scale_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_scale_filler();
  ::apollo::perception::inference::FillerParameter* mutable_scale_filler();
  void set_allocated_scale_filler(::apollo::perception::inference::FillerParameter* scale_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_scale_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_scale_filler();
  public:
  void unsafe_arena_set_allocated_scale_filler(
      ::apollo::perception::inference::FillerParameter* scale_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_scale_filler();

  // optional bool across_spatial = 1 [default = true];
  bool has_across_spatial() const;
  private:
  bool _internal_has_across_spatial() const;
  public:
  void clear_across_spatial();
  bool across_spatial() const;
  void set_across_spatial(bool value);
  private:
  bool _internal_across_spatial() const;
  void _internal_set_across_spatial(bool value);
  public:

  // optional bool channel_shared = 3 [default = true];
  bool has_channel_shared() const;
  private:
  bool _internal_has_channel_shared() const;
  public:
  void clear_channel_shared();
  bool channel_shared() const;
  void set_channel_shared(bool value);
  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);
  public:

  // optional float eps = 4 [default = 1e-10];
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  float eps() const;
  void set_eps(float value);
  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NormalizeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* scale_filler_;
    bool across_spatial_;
    bool channel_shared_;
    float eps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ParameterParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ParameterParameter) */ {
 public:
  inline ParameterParameter() : ParameterParameter(nullptr) {}
  ~ParameterParameter() override;
  explicit PROTOBUF_CONSTEXPR ParameterParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterParameter(const ParameterParameter& from);
  ParameterParameter(ParameterParameter&& from) noexcept
    : ParameterParameter() {
    *this = ::std::move(from);
  }

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterParameter& operator=(ParameterParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterParameter* internal_default_instance() {
    return reinterpret_cast<const ParameterParameter*>(
               &_ParameterParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ParameterParameter& a, ParameterParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParameterParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ParameterParameter";
  }
  protected:
  explicit ParameterParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // optional .apollo.perception.inference.BlobShape shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::apollo::perception::inference::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BlobShape* release_shape();
  ::apollo::perception::inference::BlobShape* mutable_shape();
  void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);
  private:
  const ::apollo::perception::inference::BlobShape& _internal_shape() const;
  ::apollo::perception::inference::BlobShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::apollo::perception::inference::BlobShape* shape);
  ::apollo::perception::inference::BlobShape* unsafe_arena_release_shape();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ParameterParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::BlobShape* shape_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PermuteParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PermuteParameter) */ {
 public:
  inline PermuteParameter() : PermuteParameter(nullptr) {}
  ~PermuteParameter() override;
  explicit PROTOBUF_CONSTEXPR PermuteParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermuteParameter(const PermuteParameter& from);
  PermuteParameter(PermuteParameter&& from) noexcept
    : PermuteParameter() {
    *this = ::std::move(from);
  }

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermuteParameter& operator=(PermuteParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermuteParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PermuteParameter& a, PermuteParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PermuteParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermuteParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermuteParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermuteParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermuteParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PermuteParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermuteParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PermuteParameter";
  }
  protected:
  explicit PermuteParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // repeated uint32 order = 1;
  int order_size() const;
  private:
  int _internal_order_size() const;
  public:
  void clear_order();
  private:
  uint32_t _internal_order(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_order() const;
  void _internal_add_order(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_order();
  public:
  uint32_t order(int index) const;
  void set_order(int index, uint32_t value);
  void add_order(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PermuteParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PoolingParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PoolingParameter) */ {
 public:
  inline PoolingParameter() : PoolingParameter(nullptr) {}
  ~PoolingParameter() override;
  explicit PROTOBUF_CONSTEXPR PoolingParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoolingParameter(const PoolingParameter& from);
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoolingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolingParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoolingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoolingParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoolingParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoolingParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PoolingParameter";
  }
  protected:
  explicit PoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return PoolingParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return PoolingParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  typedef PoolingParameter_RoundMode RoundMode;
  static constexpr RoundMode CEIL =
    PoolingParameter_RoundMode_CEIL;
  static constexpr RoundMode FLOOR =
    PoolingParameter_RoundMode_FLOOR;
  static inline bool RoundMode_IsValid(int value) {
    return PoolingParameter_RoundMode_IsValid(value);
  }
  static constexpr RoundMode RoundMode_MIN =
    PoolingParameter_RoundMode_RoundMode_MIN;
  static constexpr RoundMode RoundMode_MAX =
    PoolingParameter_RoundMode_RoundMode_MAX;
  static constexpr int RoundMode_ARRAYSIZE =
    PoolingParameter_RoundMode_RoundMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoundMode_descriptor() {
    return PoolingParameter_RoundMode_descriptor();
  }
  template<typename T>
  static inline const std::string& RoundMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoundMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoundMode_Name.");
    return PoolingParameter_RoundMode_Name(enum_t_value);
  }
  static inline bool RoundMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RoundMode* value) {
    return PoolingParameter_RoundMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kKernelSizeFieldNumber = 2,
    kPadFieldNumber = 4,
    kKernelHFieldNumber = 5,
    kKernelWFieldNumber = 6,
    kStrideHFieldNumber = 7,
    kStrideWFieldNumber = 8,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kEngineFieldNumber = 11,
    kGlobalPoolingFieldNumber = 12,
    kRoundModeFieldNumber = 13,
    kStrideFieldNumber = 3,
  };
  // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::apollo::perception::inference::PoolingParameter_PoolMethod pool() const;
  void set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value);
  private:
  ::apollo::perception::inference::PoolingParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value);
  public:

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  uint32_t kernel_size() const;
  void set_kernel_size(uint32_t value);
  private:
  uint32_t _internal_kernel_size() const;
  void _internal_set_kernel_size(uint32_t value);
  public:

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  uint32_t pad() const;
  void set_pad(uint32_t value);
  private:
  uint32_t _internal_pad() const;
  void _internal_set_pad(uint32_t value);
  public:

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  private:
  bool _internal_has_kernel_h() const;
  public:
  void clear_kernel_h();
  uint32_t kernel_h() const;
  void set_kernel_h(uint32_t value);
  private:
  uint32_t _internal_kernel_h() const;
  void _internal_set_kernel_h(uint32_t value);
  public:

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  private:
  bool _internal_has_kernel_w() const;
  public:
  void clear_kernel_w();
  uint32_t kernel_w() const;
  void set_kernel_w(uint32_t value);
  private:
  uint32_t _internal_kernel_w() const;
  void _internal_set_kernel_w(uint32_t value);
  public:

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  private:
  bool _internal_has_stride_h() const;
  public:
  void clear_stride_h();
  uint32_t stride_h() const;
  void set_stride_h(uint32_t value);
  private:
  uint32_t _internal_stride_h() const;
  void _internal_set_stride_h(uint32_t value);
  public:

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  private:
  bool _internal_has_stride_w() const;
  public:
  void clear_stride_w();
  uint32_t stride_w() const;
  void set_stride_w(uint32_t value);
  private:
  uint32_t _internal_stride_w() const;
  void _internal_set_stride_w(uint32_t value);
  public:

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  private:
  bool _internal_has_pad_h() const;
  public:
  void clear_pad_h();
  uint32_t pad_h() const;
  void set_pad_h(uint32_t value);
  private:
  uint32_t _internal_pad_h() const;
  void _internal_set_pad_h(uint32_t value);
  public:

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  private:
  bool _internal_has_pad_w() const;
  public:
  void clear_pad_w();
  uint32_t pad_w() const;
  void set_pad_w(uint32_t value);
  private:
  uint32_t _internal_pad_w() const;
  void _internal_set_pad_w(uint32_t value);
  public:

  // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::PoolingParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::PoolingParameter_Engine value);
  private:
  ::apollo::perception::inference::PoolingParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::PoolingParameter_Engine value);
  public:

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  private:
  bool _internal_has_global_pooling() const;
  public:
  void clear_global_pooling();
  bool global_pooling() const;
  void set_global_pooling(bool value);
  private:
  bool _internal_global_pooling() const;
  void _internal_set_global_pooling(bool value);
  public:

  // optional .apollo.perception.inference.PoolingParameter.RoundMode round_mode = 13 [default = CEIL];
  bool has_round_mode() const;
  private:
  bool _internal_has_round_mode() const;
  public:
  void clear_round_mode();
  ::apollo::perception::inference::PoolingParameter_RoundMode round_mode() const;
  void set_round_mode(::apollo::perception::inference::PoolingParameter_RoundMode value);
  private:
  ::apollo::perception::inference::PoolingParameter_RoundMode _internal_round_mode() const;
  void _internal_set_round_mode(::apollo::perception::inference::PoolingParameter_RoundMode value);
  public:

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  uint32_t stride() const;
  void set_stride(uint32_t value);
  private:
  uint32_t _internal_stride() const;
  void _internal_set_stride(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PoolingParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int pool_;
    uint32_t kernel_size_;
    uint32_t pad_;
    uint32_t kernel_h_;
    uint32_t kernel_w_;
    uint32_t stride_h_;
    uint32_t stride_w_;
    uint32_t pad_h_;
    uint32_t pad_w_;
    int engine_;
    bool global_pooling_;
    int round_mode_;
    uint32_t stride_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PowerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PowerParameter) */ {
 public:
  inline PowerParameter() : PowerParameter(nullptr) {}
  ~PowerParameter() override;
  explicit PROTOBUF_CONSTEXPR PowerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerParameter(const PowerParameter& from);
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PowerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PowerParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PowerParameter";
  }
  protected:
  explicit PowerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kPowerFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;
  public:
  void clear_shift();
  float shift() const;
  void set_shift(float value);
  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);
  public:

  // optional float power = 1 [default = 1];
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PowerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float shift_;
    float power_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PriorBoxParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PriorBoxParameter) */ {
 public:
  inline PriorBoxParameter() : PriorBoxParameter(nullptr) {}
  ~PriorBoxParameter() override;
  explicit PROTOBUF_CONSTEXPR PriorBoxParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriorBoxParameter(const PriorBoxParameter& from);
  PriorBoxParameter(PriorBoxParameter&& from) noexcept
    : PriorBoxParameter() {
    *this = ::std::move(from);
  }

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorBoxParameter& operator=(PriorBoxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriorBoxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriorBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBoxParameter*>(
               &_PriorBoxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(PriorBoxParameter& a, PriorBoxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorBoxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorBoxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriorBoxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriorBoxParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriorBoxParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PriorBoxParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorBoxParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PriorBoxParameter";
  }
  protected:
  explicit PriorBoxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PriorBoxParameter_CodeType CodeType;
  static constexpr CodeType CORNER =
    PriorBoxParameter_CodeType_CORNER;
  static constexpr CodeType CENTER_SIZE =
    PriorBoxParameter_CodeType_CENTER_SIZE;
  static constexpr CodeType CORNER_SIZE =
    PriorBoxParameter_CodeType_CORNER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static constexpr CodeType CodeType_MIN =
    PriorBoxParameter_CodeType_CodeType_MIN;
  static constexpr CodeType CodeType_MAX =
    PriorBoxParameter_CodeType_CodeType_MAX;
  static constexpr int CodeType_ARRAYSIZE =
    PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& CodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CodeType_Name.");
    return PriorBoxParameter_CodeType_Name(enum_t_value);
  }
  static inline bool CodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinSizeFieldNumber = 1,
    kMaxSizeFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kVarianceFieldNumber = 6,
    kClipFieldNumber = 5,
    kImgSizeFieldNumber = 7,
    kImgHFieldNumber = 8,
    kImgWFieldNumber = 9,
    kStepFieldNumber = 10,
    kStepHFieldNumber = 11,
    kStepWFieldNumber = 12,
    kFlipFieldNumber = 4,
    kOffsetFieldNumber = 13,
  };
  // repeated float min_size = 1;
  int min_size_size() const;
  private:
  int _internal_min_size_size() const;
  public:
  void clear_min_size();
  private:
  float _internal_min_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_min_size() const;
  void _internal_add_min_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_min_size();
  public:
  float min_size(int index) const;
  void set_min_size(int index, float value);
  void add_min_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      min_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  int max_size_size() const;
  private:
  int _internal_max_size_size() const;
  public:
  void clear_max_size();
  private:
  float _internal_max_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_size() const;
  void _internal_add_max_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_size();
  public:
  float max_size(int index) const;
  void set_max_size(int index, float value);
  void add_max_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  int aspect_ratio_size() const;
  private:
  int _internal_aspect_ratio_size() const;
  public:
  void clear_aspect_ratio();
  private:
  float _internal_aspect_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_aspect_ratio() const;
  void _internal_add_aspect_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_aspect_ratio();
  public:
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      aspect_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_aspect_ratio();

  // repeated float variance = 6;
  int variance_size() const;
  private:
  int _internal_variance_size() const;
  public:
  void clear_variance();
  private:
  float _internal_variance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_variance() const;
  void _internal_add_variance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_variance();
  public:
  float variance(int index) const;
  void set_variance(int index, float value);
  void add_variance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      variance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_variance();

  // optional bool clip = 5 [default = false];
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  bool clip() const;
  void set_clip(bool value);
  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);
  public:

  // optional uint32 img_size = 7;
  bool has_img_size() const;
  private:
  bool _internal_has_img_size() const;
  public:
  void clear_img_size();
  uint32_t img_size() const;
  void set_img_size(uint32_t value);
  private:
  uint32_t _internal_img_size() const;
  void _internal_set_img_size(uint32_t value);
  public:

  // optional uint32 img_h = 8;
  bool has_img_h() const;
  private:
  bool _internal_has_img_h() const;
  public:
  void clear_img_h();
  uint32_t img_h() const;
  void set_img_h(uint32_t value);
  private:
  uint32_t _internal_img_h() const;
  void _internal_set_img_h(uint32_t value);
  public:

  // optional uint32 img_w = 9;
  bool has_img_w() const;
  private:
  bool _internal_has_img_w() const;
  public:
  void clear_img_w();
  uint32_t img_w() const;
  void set_img_w(uint32_t value);
  private:
  uint32_t _internal_img_w() const;
  void _internal_set_img_w(uint32_t value);
  public:

  // optional float step = 10;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  float step() const;
  void set_step(float value);
  private:
  float _internal_step() const;
  void _internal_set_step(float value);
  public:

  // optional float step_h = 11;
  bool has_step_h() const;
  private:
  bool _internal_has_step_h() const;
  public:
  void clear_step_h();
  float step_h() const;
  void set_step_h(float value);
  private:
  float _internal_step_h() const;
  void _internal_set_step_h(float value);
  public:

  // optional float step_w = 12;
  bool has_step_w() const;
  private:
  bool _internal_has_step_w() const;
  public:
  void clear_step_w();
  float step_w() const;
  void set_step_w(float value);
  private:
  float _internal_step_w() const;
  void _internal_set_step_w(float value);
  public:

  // optional bool flip = 4 [default = true];
  bool has_flip() const;
  private:
  bool _internal_has_flip() const;
  public:
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // optional float offset = 13 [default = 0.5];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PriorBoxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > min_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > aspect_ratio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > variance_;
    bool clip_;
    uint32_t img_size_;
    uint32_t img_h_;
    uint32_t img_w_;
    float step_;
    float step_h_;
    float step_w_;
    bool flip_;
    float offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PythonParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PythonParameter) */ {
 public:
  inline PythonParameter() : PythonParameter(nullptr) {}
  ~PythonParameter() override;
  explicit PROTOBUF_CONSTEXPR PythonParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PythonParameter(const PythonParameter& from);
  PythonParameter(PythonParameter&& from) noexcept
    : PythonParameter() {
    *this = ::std::move(from);
  }

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PythonParameter& operator=(PythonParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PythonParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(PythonParameter& a, PythonParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PythonParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PythonParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PythonParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PythonParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PythonParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PythonParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PythonParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PythonParameter";
  }
  protected:
  explicit PythonParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kLayerFieldNumber = 2,
    kParamStrFieldNumber = 3,
    kShareInParallelFieldNumber = 4,
  };
  // optional string module = 1;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const std::string& module() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* module);
  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // optional string layer = 2;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const std::string& layer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layer();
  PROTOBUF_NODISCARD std::string* release_layer();
  void set_allocated_layer(std::string* layer);
  private:
  const std::string& _internal_layer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer(const std::string& value);
  std::string* _internal_mutable_layer();
  public:

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  private:
  bool _internal_has_param_str() const;
  public:
  void clear_param_str();
  const std::string& param_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_str();
  PROTOBUF_NODISCARD std::string* release_param_str();
  void set_allocated_param_str(std::string* param_str);
  private:
  const std::string& _internal_param_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_str(const std::string& value);
  std::string* _internal_mutable_param_str();
  public:

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  private:
  bool _internal_has_share_in_parallel() const;
  public:
  void clear_share_in_parallel();
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);
  private:
  bool _internal_share_in_parallel() const;
  void _internal_set_share_in_parallel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PythonParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_str_;
    bool share_in_parallel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class RecurrentParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.RecurrentParameter) */ {
 public:
  inline RecurrentParameter() : RecurrentParameter(nullptr) {}
  ~RecurrentParameter() override;
  explicit PROTOBUF_CONSTEXPR RecurrentParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecurrentParameter(const RecurrentParameter& from);
  RecurrentParameter(RecurrentParameter&& from) noexcept
    : RecurrentParameter() {
    *this = ::std::move(from);
  }

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecurrentParameter& operator=(RecurrentParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecurrentParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecurrentParameter* internal_default_instance() {
    return reinterpret_cast<const RecurrentParameter*>(
               &_RecurrentParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(RecurrentParameter& a, RecurrentParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RecurrentParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecurrentParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecurrentParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecurrentParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecurrentParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecurrentParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecurrentParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.RecurrentParameter";
  }
  protected:
  explicit RecurrentParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 2,
    kBiasFillerFieldNumber = 3,
    kNumOutputFieldNumber = 1,
    kDebugInfoFieldNumber = 4,
    kExposeHiddenFieldNumber = 5,
  };
  // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_weight_filler();
  ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_weight_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::apollo::perception::inference::FillerParameter* weight_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional uint32 num_output = 1 [default = 0];
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional bool debug_info = 4 [default = false];
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // optional bool expose_hidden = 5 [default = false];
  bool has_expose_hidden() const;
  private:
  bool _internal_has_expose_hidden() const;
  public:
  void clear_expose_hidden();
  bool expose_hidden() const;
  void set_expose_hidden(bool value);
  private:
  bool _internal_expose_hidden() const;
  void _internal_set_expose_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RecurrentParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* weight_filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    uint32_t num_output_;
    bool debug_info_;
    bool expose_hidden_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ReductionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ReductionParameter) */ {
 public:
  inline ReductionParameter() : ReductionParameter(nullptr) {}
  ~ReductionParameter() override;
  explicit PROTOBUF_CONSTEXPR ReductionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReductionParameter(const ReductionParameter& from);
  ReductionParameter(ReductionParameter&& from) noexcept
    : ReductionParameter() {
    *this = ::std::move(from);
  }

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReductionParameter& operator=(ReductionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReductionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ReductionParameter& a, ReductionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReductionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReductionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReductionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReductionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReductionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReductionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReductionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ReductionParameter";
  }
  protected:
  explicit ReductionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static constexpr ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static constexpr ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static constexpr ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static constexpr ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static constexpr ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static constexpr ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static constexpr int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  template<typename T>
  static inline const std::string& ReductionOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReductionOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReductionOp_Name.");
    return ReductionParameter_ReductionOp_Name(enum_t_value);
  }
  static inline bool ReductionOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 2,
    kOperationFieldNumber = 1,
    kCoeffFieldNumber = 3,
  };
  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::apollo::perception::inference::ReductionParameter_ReductionOp operation() const;
  void set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value);
  private:
  ::apollo::perception::inference::ReductionParameter_ReductionOp _internal_operation() const;
  void _internal_set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value);
  public:

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  private:
  bool _internal_has_coeff() const;
  public:
  void clear_coeff();
  float coeff() const;
  void set_coeff(float value);
  private:
  float _internal_coeff() const;
  void _internal_set_coeff(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReductionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t axis_;
    int operation_;
    float coeff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ReLUParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ReLUParameter) */ {
 public:
  inline ReLUParameter() : ReLUParameter(nullptr) {}
  ~ReLUParameter() override;
  explicit PROTOBUF_CONSTEXPR ReLUParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReLUParameter(const ReLUParameter& from);
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReLUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReLUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReLUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReLUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReLUParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReLUParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReLUParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLUParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ReLUParameter";
  }
  protected:
  explicit ReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return ReLUParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeSlopeFieldNumber = 1,
    kEngineFieldNumber = 2,
  };
  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  private:
  bool _internal_has_negative_slope() const;
  public:
  void clear_negative_slope();
  float negative_slope() const;
  void set_negative_slope(float value);
  private:
  float _internal_negative_slope() const;
  void _internal_set_negative_slope(float value);
  public:

  // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::ReLUParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::ReLUParameter_Engine value);
  private:
  ::apollo::perception::inference::ReLUParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::ReLUParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReLUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float negative_slope_;
    int engine_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ReshapeParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ReshapeParameter) */ {
 public:
  inline ReshapeParameter() : ReshapeParameter(nullptr) {}
  ~ReshapeParameter() override;
  explicit PROTOBUF_CONSTEXPR ReshapeParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReshapeParameter(const ReshapeParameter& from);
  ReshapeParameter(ReshapeParameter&& from) noexcept
    : ReshapeParameter() {
    *this = ::std::move(from);
  }

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReshapeParameter& operator=(ReshapeParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReshapeParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ReshapeParameter& a, ReshapeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReshapeParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReshapeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReshapeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReshapeParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReshapeParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReshapeParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReshapeParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ReshapeParameter";
  }
  protected:
  explicit ReshapeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kAxisFieldNumber = 2,
    kNumAxesFieldNumber = 3,
  };
  // optional .apollo.perception.inference.BlobShape shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::apollo::perception::inference::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::BlobShape* release_shape();
  ::apollo::perception::inference::BlobShape* mutable_shape();
  void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);
  private:
  const ::apollo::perception::inference::BlobShape& _internal_shape() const;
  ::apollo::perception::inference::BlobShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::apollo::perception::inference::BlobShape* shape);
  ::apollo::perception::inference::BlobShape* unsafe_arena_release_shape();

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  int32_t num_axes() const;
  void set_num_axes(int32_t value);
  private:
  int32_t _internal_num_axes() const;
  void _internal_set_num_axes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReshapeParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::BlobShape* shape_;
    int32_t axis_;
    int32_t num_axes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ROIPoolingParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ROIPoolingParameter) */ {
 public:
  inline ROIPoolingParameter() : ROIPoolingParameter(nullptr) {}
  ~ROIPoolingParameter() override;
  explicit PROTOBUF_CONSTEXPR ROIPoolingParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROIPoolingParameter(const ROIPoolingParameter& from);
  ROIPoolingParameter(ROIPoolingParameter&& from) noexcept
    : ROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIPoolingParameter& operator=(ROIPoolingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROIPoolingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ROIPoolingParameter& a, ROIPoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIPoolingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIPoolingParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROIPoolingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROIPoolingParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROIPoolingParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROIPoolingParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIPoolingParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ROIPoolingParameter";
  }
  protected:
  explicit ROIPoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPooledHFieldNumber = 1,
    kPooledWFieldNumber = 2,
    kUseFloorFieldNumber = 10,
    kSpatialScaleFieldNumber = 3,
  };
  // optional uint32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  private:
  bool _internal_has_pooled_h() const;
  public:
  void clear_pooled_h();
  uint32_t pooled_h() const;
  void set_pooled_h(uint32_t value);
  private:
  uint32_t _internal_pooled_h() const;
  void _internal_set_pooled_h(uint32_t value);
  public:

  // optional uint32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  private:
  bool _internal_has_pooled_w() const;
  public:
  void clear_pooled_w();
  uint32_t pooled_w() const;
  void set_pooled_w(uint32_t value);
  private:
  uint32_t _internal_pooled_w() const;
  void _internal_set_pooled_w(uint32_t value);
  public:

  // optional bool use_floor = 10 [default = false];
  bool has_use_floor() const;
  private:
  bool _internal_has_use_floor() const;
  public:
  void clear_use_floor();
  bool use_floor() const;
  void set_use_floor(bool value);
  private:
  bool _internal_use_floor() const;
  void _internal_set_use_floor(bool value);
  public:

  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  private:
  bool _internal_has_spatial_scale() const;
  public:
  void clear_spatial_scale();
  float spatial_scale() const;
  void set_spatial_scale(float value);
  private:
  float _internal_spatial_scale() const;
  void _internal_set_spatial_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ROIPoolingParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pooled_h_;
    uint32_t pooled_w_;
    bool use_floor_;
    float spatial_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ScaleParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ScaleParameter) */ {
 public:
  inline ScaleParameter() : ScaleParameter(nullptr) {}
  ~ScaleParameter() override;
  explicit PROTOBUF_CONSTEXPR ScaleParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaleParameter(const ScaleParameter& from);
  ScaleParameter(ScaleParameter&& from) noexcept
    : ScaleParameter() {
    *this = ::std::move(from);
  }

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleParameter& operator=(ScaleParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaleParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ScaleParameter& a, ScaleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaleParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaleParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaleParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScaleParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ScaleParameter";
  }
  protected:
  explicit ScaleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 5,
    kBiasTermFieldNumber = 4,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .apollo.perception.inference.FillerParameter filler = 3;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::apollo::perception::inference::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_filler();
  ::apollo::perception::inference::FillerParameter* mutable_filler();
  void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::apollo::perception::inference::FillerParameter* filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  private:
  bool _internal_has_bias_term() const;
  public:
  void clear_bias_term();
  bool bias_term() const;
  void set_bias_term(bool value);
  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);
  public:

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  int32_t num_axes() const;
  void set_num_axes(int32_t value);
  private:
  int32_t _internal_num_axes() const;
  void _internal_set_num_axes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ScaleParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    bool bias_term_;
    int32_t axis_;
    int32_t num_axes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SigmoidParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SigmoidParameter) */ {
 public:
  inline SigmoidParameter() : SigmoidParameter(nullptr) {}
  ~SigmoidParameter() override;
  explicit PROTOBUF_CONSTEXPR SigmoidParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigmoidParameter(const SigmoidParameter& from);
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigmoidParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SigmoidParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigmoidParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigmoidParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigmoidParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigmoidParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigmoidParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigmoidParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SigmoidParameter";
  }
  protected:
  explicit SigmoidParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SigmoidParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::SigmoidParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::SigmoidParameter_Engine value);
  private:
  ::apollo::perception::inference::SigmoidParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::SigmoidParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SigmoidParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int engine_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SliceParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SliceParameter) */ {
 public:
  inline SliceParameter() : SliceParameter(nullptr) {}
  ~SliceParameter() override;
  explicit PROTOBUF_CONSTEXPR SliceParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SliceParameter(const SliceParameter& from);
  SliceParameter(SliceParameter&& from) noexcept
    : SliceParameter() {
    *this = ::std::move(from);
  }

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceParameter& operator=(SliceParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SliceParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SliceParameter& a, SliceParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SliceParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SliceParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SliceParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SliceParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SliceParameter";
  }
  protected:
  explicit SliceParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePointFieldNumber = 2,
    kSliceDimFieldNumber = 1,
    kAxisFieldNumber = 3,
  };
  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  private:
  int _internal_slice_point_size() const;
  public:
  void clear_slice_point();
  private:
  uint32_t _internal_slice_point(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_slice_point() const;
  void _internal_add_slice_point(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_slice_point();
  public:
  uint32_t slice_point(int index) const;
  void set_slice_point(int index, uint32_t value);
  void add_slice_point(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      slice_point() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  private:
  bool _internal_has_slice_dim() const;
  public:
  void clear_slice_dim();
  uint32_t slice_dim() const;
  void set_slice_dim(uint32_t value);
  private:
  uint32_t _internal_slice_dim() const;
  void _internal_set_slice_dim(uint32_t value);
  public:

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SliceParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > slice_point_;
    uint32_t slice_dim_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SoftmaxParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SoftmaxParameter) */ {
 public:
  inline SoftmaxParameter() : SoftmaxParameter(nullptr) {}
  ~SoftmaxParameter() override;
  explicit PROTOBUF_CONSTEXPR SoftmaxParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftmaxParameter(const SoftmaxParameter& from);
  SoftmaxParameter(SoftmaxParameter&& from) noexcept
    : SoftmaxParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftmaxParameter& operator=(SoftmaxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftmaxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SoftmaxParameter& a, SoftmaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftmaxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftmaxParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftmaxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftmaxParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoftmaxParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SoftmaxParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftmaxParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SoftmaxParameter";
  }
  protected:
  explicit SoftmaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SoftmaxParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::SoftmaxParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value);
  private:
  ::apollo::perception::inference::SoftmaxParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value);
  public:

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SoftmaxParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int engine_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class TanHParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.TanHParameter) */ {
 public:
  inline TanHParameter() : TanHParameter(nullptr) {}
  ~TanHParameter() override;
  explicit PROTOBUF_CONSTEXPR TanHParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TanHParameter(const TanHParameter& from);
  TanHParameter(TanHParameter&& from) noexcept
    : TanHParameter() {
    *this = ::std::move(from);
  }

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TanHParameter& operator=(TanHParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TanHParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TanHParameter& a, TanHParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TanHParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TanHParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TanHParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TanHParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TanHParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TanHParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TanHParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.TanHParameter";
  }
  protected:
  explicit TanHParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return TanHParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::TanHParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::TanHParameter_Engine value);
  private:
  ::apollo::perception::inference::TanHParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::TanHParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TanHParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int engine_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class TileParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.TileParameter) */ {
 public:
  inline TileParameter() : TileParameter(nullptr) {}
  ~TileParameter() override;
  explicit PROTOBUF_CONSTEXPR TileParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileParameter(const TileParameter& from);
  TileParameter(TileParameter&& from) noexcept
    : TileParameter() {
    *this = ::std::move(from);
  }

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileParameter& operator=(TileParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TileParameter& a, TileParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TileParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TileParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TileParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.TileParameter";
  }
  protected:
  explicit TileParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // optional int32 tiles = 2;
  bool has_tiles() const;
  private:
  bool _internal_has_tiles() const;
  public:
  void clear_tiles();
  int32_t tiles() const;
  void set_tiles(int32_t value);
  private:
  int32_t _internal_tiles() const;
  void _internal_set_tiles(int32_t value);
  public:

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TileParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t tiles_;
    int32_t axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ThresholdParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ThresholdParameter) */ {
 public:
  inline ThresholdParameter() : ThresholdParameter(nullptr) {}
  ~ThresholdParameter() override;
  explicit PROTOBUF_CONSTEXPR ThresholdParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThresholdParameter(const ThresholdParameter& from);
  ThresholdParameter(ThresholdParameter&& from) noexcept
    : ThresholdParameter() {
    *this = ::std::move(from);
  }

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdParameter& operator=(ThresholdParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThresholdParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ThresholdParameter& a, ThresholdParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThresholdParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThresholdParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThresholdParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThresholdParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ThresholdParameter";
  }
  protected:
  explicit ThresholdParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
  };
  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ThresholdParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float threshold_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class VideoDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.VideoDataParameter) */ {
 public:
  inline VideoDataParameter() : VideoDataParameter(nullptr) {}
  ~VideoDataParameter() override;
  explicit PROTOBUF_CONSTEXPR VideoDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoDataParameter(const VideoDataParameter& from);
  VideoDataParameter(VideoDataParameter&& from) noexcept
    : VideoDataParameter() {
    *this = ::std::move(from);
  }

  inline VideoDataParameter& operator=(const VideoDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoDataParameter& operator=(VideoDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoDataParameter* internal_default_instance() {
    return reinterpret_cast<const VideoDataParameter*>(
               &_VideoDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(VideoDataParameter& a, VideoDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.VideoDataParameter";
  }
  protected:
  explicit VideoDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VideoDataParameter_VideoType VideoType;
  static constexpr VideoType WEBCAM =
    VideoDataParameter_VideoType_WEBCAM;
  static constexpr VideoType VIDEO =
    VideoDataParameter_VideoType_VIDEO;
  static inline bool VideoType_IsValid(int value) {
    return VideoDataParameter_VideoType_IsValid(value);
  }
  static constexpr VideoType VideoType_MIN =
    VideoDataParameter_VideoType_VideoType_MIN;
  static constexpr VideoType VideoType_MAX =
    VideoDataParameter_VideoType_VideoType_MAX;
  static constexpr int VideoType_ARRAYSIZE =
    VideoDataParameter_VideoType_VideoType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoType_descriptor() {
    return VideoDataParameter_VideoType_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoType_Name.");
    return VideoDataParameter_VideoType_Name(enum_t_value);
  }
  static inline bool VideoType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VideoType* value) {
    return VideoDataParameter_VideoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVideoFileFieldNumber = 3,
    kVideoTypeFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kSkipFramesFieldNumber = 4,
  };
  // optional string video_file = 3;
  bool has_video_file() const;
  private:
  bool _internal_has_video_file() const;
  public:
  void clear_video_file();
  const std::string& video_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_file();
  PROTOBUF_NODISCARD std::string* release_video_file();
  void set_allocated_video_file(std::string* video_file);
  private:
  const std::string& _internal_video_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_file(const std::string& value);
  std::string* _internal_mutable_video_file();
  public:

  // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
  bool has_video_type() const;
  private:
  bool _internal_has_video_type() const;
  public:
  void clear_video_type();
  ::apollo::perception::inference::VideoDataParameter_VideoType video_type() const;
  void set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value);
  private:
  ::apollo::perception::inference::VideoDataParameter_VideoType _internal_video_type() const;
  void _internal_set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value);
  public:

  // optional int32 device_id = 2 [default = 0];
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  int32_t device_id() const;
  void set_device_id(int32_t value);
  private:
  int32_t _internal_device_id() const;
  void _internal_set_device_id(int32_t value);
  public:

  // optional uint32 skip_frames = 4 [default = 0];
  bool has_skip_frames() const;
  private:
  bool _internal_has_skip_frames() const;
  public:
  void clear_skip_frames();
  uint32_t skip_frames() const;
  void set_skip_frames(uint32_t value);
  private:
  uint32_t _internal_skip_frames() const;
  void _internal_set_skip_frames(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.VideoDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_file_;
    int video_type_;
    int32_t device_id_;
    uint32_t skip_frames_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class WindowDataParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.WindowDataParameter) */ {
 public:
  inline WindowDataParameter() : WindowDataParameter(nullptr) {}
  ~WindowDataParameter() override;
  explicit PROTOBUF_CONSTEXPR WindowDataParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowDataParameter(const WindowDataParameter& from);
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowDataParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowDataParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowDataParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WindowDataParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WindowDataParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowDataParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.WindowDataParameter";
  }
  protected:
  explicit WindowDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kCropModeFieldNumber = 11,
    kRootFolderFieldNumber = 13,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kMirrorFieldNumber = 6,
    kCacheImagesFieldNumber = 12,
    kContextPadFieldNumber = 10,
    kScaleFieldNumber = 2,
    kFgThresholdFieldNumber = 7,
    kBgThresholdFieldNumber = 8,
    kFgFractionFieldNumber = 9,
  };
  // optional string source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string mean_file = 3;
  bool has_mean_file() const;
  private:
  bool _internal_has_mean_file() const;
  public:
  void clear_mean_file();
  const std::string& mean_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mean_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* mean_file);
  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(const std::string& value);
  std::string* _internal_mutable_mean_file();
  public:

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  private:
  bool _internal_has_crop_mode() const;
  public:
  void clear_crop_mode();
  const std::string& crop_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crop_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crop_mode();
  PROTOBUF_NODISCARD std::string* release_crop_mode();
  void set_allocated_crop_mode(std::string* crop_mode);
  private:
  const std::string& _internal_crop_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crop_mode(const std::string& value);
  std::string* _internal_mutable_crop_mode();
  public:

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  private:
  bool _internal_has_root_folder() const;
  public:
  void clear_root_folder();
  const std::string& root_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_folder();
  PROTOBUF_NODISCARD std::string* release_root_folder();
  void set_allocated_root_folder(std::string* root_folder);
  private:
  const std::string& _internal_root_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(const std::string& value);
  std::string* _internal_mutable_root_folder();
  public:

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  uint32_t batch_size() const;
  void set_batch_size(uint32_t value);
  private:
  uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(uint32_t value);
  public:

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  private:
  bool _internal_has_crop_size() const;
  public:
  void clear_crop_size();
  uint32_t crop_size() const;
  void set_crop_size(uint32_t value);
  private:
  uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(uint32_t value);
  public:

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  private:
  bool _internal_has_cache_images() const;
  public:
  void clear_cache_images();
  bool cache_images() const;
  void set_cache_images(bool value);
  private:
  bool _internal_cache_images() const;
  void _internal_set_cache_images(bool value);
  public:

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  private:
  bool _internal_has_context_pad() const;
  public:
  void clear_context_pad();
  uint32_t context_pad() const;
  void set_context_pad(uint32_t value);
  private:
  uint32_t _internal_context_pad() const;
  void _internal_set_context_pad(uint32_t value);
  public:

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  private:
  bool _internal_has_fg_threshold() const;
  public:
  void clear_fg_threshold();
  float fg_threshold() const;
  void set_fg_threshold(float value);
  private:
  float _internal_fg_threshold() const;
  void _internal_set_fg_threshold(float value);
  public:

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  private:
  bool _internal_has_bg_threshold() const;
  public:
  void clear_bg_threshold();
  float bg_threshold() const;
  void set_bg_threshold(float value);
  private:
  float _internal_bg_threshold() const;
  void _internal_set_bg_threshold(float value);
  public:

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  private:
  bool _internal_has_fg_fraction() const;
  public:
  void clear_fg_fraction();
  float fg_fraction() const;
  void set_fg_fraction(float value);
  private:
  float _internal_fg_fraction() const;
  void _internal_set_fg_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.WindowDataParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mean_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_crop_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crop_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_folder_;
    uint32_t batch_size_;
    uint32_t crop_size_;
    bool mirror_;
    bool cache_images_;
    uint32_t context_pad_;
    float scale_;
    float fg_threshold_;
    float bg_threshold_;
    float fg_fraction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class SPPParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.SPPParameter) */ {
 public:
  inline SPPParameter() : SPPParameter(nullptr) {}
  ~SPPParameter() override;
  explicit PROTOBUF_CONSTEXPR SPPParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPPParameter(const SPPParameter& from);
  SPPParameter(SPPParameter&& from) noexcept
    : SPPParameter() {
    *this = ::std::move(from);
  }

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPPParameter& operator=(SPPParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPPParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SPPParameter& a, SPPParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SPPParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPPParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPPParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPPParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPPParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SPPParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPPParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.SPPParameter";
  }
  protected:
  explicit SPPParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return SPPParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static constexpr Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static constexpr Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  template<typename T>
  static inline const std::string& Engine_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Engine>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Engine_Name.");
    return SPPParameter_Engine_Name(enum_t_value);
  }
  static inline bool Engine_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPyramidHeightFieldNumber = 1,
    kPoolFieldNumber = 2,
    kEngineFieldNumber = 6,
  };
  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  private:
  bool _internal_has_pyramid_height() const;
  public:
  void clear_pyramid_height();
  uint32_t pyramid_height() const;
  void set_pyramid_height(uint32_t value);
  private:
  uint32_t _internal_pyramid_height() const;
  void _internal_set_pyramid_height(uint32_t value);
  public:

  // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::apollo::perception::inference::SPPParameter_PoolMethod pool() const;
  void set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value);
  private:
  ::apollo::perception::inference::SPPParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value);
  public:

  // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::apollo::perception::inference::SPPParameter_Engine engine() const;
  void set_engine(::apollo::perception::inference::SPPParameter_Engine value);
  private:
  ::apollo::perception::inference::SPPParameter_Engine _internal_engine() const;
  void _internal_set_engine(::apollo::perception::inference::SPPParameter_Engine value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SPPParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pyramid_height_;
    int pool_;
    int engine_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class V1LayerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.V1LayerParameter) */ {
 public:
  inline V1LayerParameter() : V1LayerParameter(nullptr) {}
  ~V1LayerParameter() override;
  explicit PROTOBUF_CONSTEXPR V1LayerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V1LayerParameter(const V1LayerParameter& from);
  V1LayerParameter(V1LayerParameter&& from) noexcept
    : V1LayerParameter() {
    *this = ::std::move(from);
  }

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V1LayerParameter& operator=(V1LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V1LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(V1LayerParameter& a, V1LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V1LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V1LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V1LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V1LayerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V1LayerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V1LayerParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V1LayerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.V1LayerParameter";
  }
  protected:
  explicit V1LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static constexpr LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static constexpr LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static constexpr LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static constexpr LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static constexpr LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static constexpr LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static constexpr LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static constexpr LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static constexpr LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static constexpr LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static constexpr LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static constexpr LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static constexpr LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static constexpr LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static constexpr LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static constexpr LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static constexpr LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static constexpr LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static constexpr LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static constexpr LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static constexpr LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static constexpr LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static constexpr LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static constexpr LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static constexpr LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static constexpr LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static constexpr LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static constexpr LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static constexpr LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static constexpr LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static constexpr LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static constexpr LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static constexpr LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static constexpr LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static constexpr LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static constexpr LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static constexpr LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static constexpr LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static constexpr LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static constexpr LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerType_Name.");
    return V1LayerParameter_LayerType_Name(enum_t_value);
  }
  static inline bool LayerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static constexpr DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DimCheckMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DimCheckMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DimCheckMode_Name.");
    return V1LayerParameter_DimCheckMode_Name(enum_t_value);
  }
  static inline bool DimCheckMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 2,
    kTopFieldNumber = 3,
    kBlobsFieldNumber = 6,
    kBlobsLrFieldNumber = 7,
    kWeightDecayFieldNumber = 8,
    kIncludeFieldNumber = 32,
    kExcludeFieldNumber = 33,
    kLossWeightFieldNumber = 35,
    kParamFieldNumber = 1001,
    kBlobShareModeFieldNumber = 1002,
    kNameFieldNumber = 4,
    kLayerFieldNumber = 1,
    kConcatParamFieldNumber = 9,
    kConvolutionParamFieldNumber = 10,
    kDataParamFieldNumber = 11,
    kDropoutParamFieldNumber = 12,
    kHdf5DataParamFieldNumber = 13,
    kHdf5OutputParamFieldNumber = 14,
    kImageDataParamFieldNumber = 15,
    kInfogainLossParamFieldNumber = 16,
    kInnerProductParamFieldNumber = 17,
    kLrnParamFieldNumber = 18,
    kPoolingParamFieldNumber = 19,
    kWindowDataParamFieldNumber = 20,
    kPowerParamFieldNumber = 21,
    kMemoryDataParamFieldNumber = 22,
    kArgmaxParamFieldNumber = 23,
    kEltwiseParamFieldNumber = 24,
    kThresholdParamFieldNumber = 25,
    kDummyDataParamFieldNumber = 26,
    kAccuracyParamFieldNumber = 27,
    kHingeLossParamFieldNumber = 29,
    kReluParamFieldNumber = 30,
    kSliceParamFieldNumber = 31,
    kMvnParamFieldNumber = 34,
    kTransformParamFieldNumber = 36,
    kTanhParamFieldNumber = 37,
    kSigmoidParamFieldNumber = 38,
    kSoftmaxParamFieldNumber = 39,
    kContrastiveLossParamFieldNumber = 40,
    kExpParamFieldNumber = 41,
    kLossParamFieldNumber = 42,
    kTypeFieldNumber = 5,
  };
  // repeated string bottom = 2;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;
  public:
  void clear_bottom();
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bottom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bottom();
  private:
  const std::string& _internal_bottom(int index) const;
  std::string* _internal_add_bottom();
  public:

  // repeated string top = 3;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& top() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_top();
  private:
  const std::string& _internal_top(int index) const;
  std::string* _internal_add_top();
  public:

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();
  private:
  const ::apollo::perception::inference::BlobProto& _internal_blobs(int index) const;
  ::apollo::perception::inference::BlobProto* _internal_add_blobs();
  public:
  const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  ::apollo::perception::inference::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  int include_size() const;
  private:
  int _internal_include_size() const;
  public:
  void clear_include();
  ::apollo::perception::inference::NetStateRule* mutable_include(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_include();
  private:
  const ::apollo::perception::inference::NetStateRule& _internal_include(int index) const;
  ::apollo::perception::inference::NetStateRule* _internal_add_include();
  public:
  const ::apollo::perception::inference::NetStateRule& include(int index) const;
  ::apollo::perception::inference::NetStateRule* add_include();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      include() const;

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;
  public:
  void clear_exclude();
  ::apollo::perception::inference::NetStateRule* mutable_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_exclude();
  private:
  const ::apollo::perception::inference::NetStateRule& _internal_exclude(int index) const;
  ::apollo::perception::inference::NetStateRule* _internal_add_exclude();
  public:
  const ::apollo::perception::inference::NetStateRule& exclude(int index) const;
  ::apollo::perception::inference::NetStateRule* add_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      exclude() const;

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;
  public:
  void clear_loss_weight();
  private:
  float _internal_loss_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_loss_weight() const;
  void _internal_add_loss_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_loss_weight();
  public:
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      loss_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_loss_weight();

  // repeated string param = 1001;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  const std::string& param(int index) const;
  std::string* mutable_param(int index);
  void set_param(int index, const std::string& value);
  void set_param(int index, std::string&& value);
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  std::string* add_param();
  void add_param(const std::string& value);
  void add_param(std::string&& value);
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param();
  private:
  const std::string& _internal_param(int index) const;
  std::string* _internal_add_param();
  public:

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  private:
  int _internal_blob_share_mode_size() const;
  public:
  void clear_blob_share_mode();
  private:
  ::apollo::perception::inference::V1LayerParameter_DimCheckMode _internal_blob_share_mode(int index) const;
  void _internal_add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_blob_share_mode();
  public:
  ::apollo::perception::inference::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::apollo::perception::inference::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& blob_share_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_blob_share_mode();

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.perception.inference.V0LayerParameter layer = 1;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const ::apollo::perception::inference::V0LayerParameter& layer() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::V0LayerParameter* release_layer();
  ::apollo::perception::inference::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::apollo::perception::inference::V0LayerParameter* layer);
  private:
  const ::apollo::perception::inference::V0LayerParameter& _internal_layer() const;
  ::apollo::perception::inference::V0LayerParameter* _internal_mutable_layer();
  public:
  void unsafe_arena_set_allocated_layer(
      ::apollo::perception::inference::V0LayerParameter* layer);
  ::apollo::perception::inference::V0LayerParameter* unsafe_arena_release_layer();

  // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  private:
  bool _internal_has_concat_param() const;
  public:
  void clear_concat_param();
  const ::apollo::perception::inference::ConcatParameter& concat_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ConcatParameter* release_concat_param();
  ::apollo::perception::inference::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param);
  private:
  const ::apollo::perception::inference::ConcatParameter& _internal_concat_param() const;
  ::apollo::perception::inference::ConcatParameter* _internal_mutable_concat_param();
  public:
  void unsafe_arena_set_allocated_concat_param(
      ::apollo::perception::inference::ConcatParameter* concat_param);
  ::apollo::perception::inference::ConcatParameter* unsafe_arena_release_concat_param();

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  private:
  bool _internal_has_convolution_param() const;
  public:
  void clear_convolution_param();
  const ::apollo::perception::inference::ConvolutionParameter& convolution_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ConvolutionParameter* release_convolution_param();
  ::apollo::perception::inference::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param);
  private:
  const ::apollo::perception::inference::ConvolutionParameter& _internal_convolution_param() const;
  ::apollo::perception::inference::ConvolutionParameter* _internal_mutable_convolution_param();
  public:
  void unsafe_arena_set_allocated_convolution_param(
      ::apollo::perception::inference::ConvolutionParameter* convolution_param);
  ::apollo::perception::inference::ConvolutionParameter* unsafe_arena_release_convolution_param();

  // optional .apollo.perception.inference.DataParameter data_param = 11;
  bool has_data_param() const;
  private:
  bool _internal_has_data_param() const;
  public:
  void clear_data_param();
  const ::apollo::perception::inference::DataParameter& data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DataParameter* release_data_param();
  ::apollo::perception::inference::DataParameter* mutable_data_param();
  void set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param);
  private:
  const ::apollo::perception::inference::DataParameter& _internal_data_param() const;
  ::apollo::perception::inference::DataParameter* _internal_mutable_data_param();
  public:
  void unsafe_arena_set_allocated_data_param(
      ::apollo::perception::inference::DataParameter* data_param);
  ::apollo::perception::inference::DataParameter* unsafe_arena_release_data_param();

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  private:
  bool _internal_has_dropout_param() const;
  public:
  void clear_dropout_param();
  const ::apollo::perception::inference::DropoutParameter& dropout_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DropoutParameter* release_dropout_param();
  ::apollo::perception::inference::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param);
  private:
  const ::apollo::perception::inference::DropoutParameter& _internal_dropout_param() const;
  ::apollo::perception::inference::DropoutParameter* _internal_mutable_dropout_param();
  public:
  void unsafe_arena_set_allocated_dropout_param(
      ::apollo::perception::inference::DropoutParameter* dropout_param);
  ::apollo::perception::inference::DropoutParameter* unsafe_arena_release_dropout_param();

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  private:
  bool _internal_has_hdf5_data_param() const;
  public:
  void clear_hdf5_data_param();
  const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HDF5DataParameter* release_hdf5_data_param();
  ::apollo::perception::inference::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);
  private:
  const ::apollo::perception::inference::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::apollo::perception::inference::HDF5DataParameter* _internal_mutable_hdf5_data_param();
  public:
  void unsafe_arena_set_allocated_hdf5_data_param(
      ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);
  ::apollo::perception::inference::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::apollo::perception::inference::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::apollo::perception::inference::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  ::apollo::perception::inference::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  private:
  bool _internal_has_image_data_param() const;
  public:
  void clear_image_data_param();
  const ::apollo::perception::inference::ImageDataParameter& image_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ImageDataParameter* release_image_data_param();
  ::apollo::perception::inference::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param);
  private:
  const ::apollo::perception::inference::ImageDataParameter& _internal_image_data_param() const;
  ::apollo::perception::inference::ImageDataParameter* _internal_mutable_image_data_param();
  public:
  void unsafe_arena_set_allocated_image_data_param(
      ::apollo::perception::inference::ImageDataParameter* image_data_param);
  ::apollo::perception::inference::ImageDataParameter* unsafe_arena_release_image_data_param();

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  private:
  bool _internal_has_infogain_loss_param() const;
  public:
  void clear_infogain_loss_param();
  const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::InfogainLossParameter* release_infogain_loss_param();
  ::apollo::perception::inference::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);
  private:
  const ::apollo::perception::inference::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::apollo::perception::inference::InfogainLossParameter* _internal_mutable_infogain_loss_param();
  public:
  void unsafe_arena_set_allocated_infogain_loss_param(
      ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);
  ::apollo::perception::inference::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  private:
  bool _internal_has_inner_product_param() const;
  public:
  void clear_inner_product_param();
  const ::apollo::perception::inference::InnerProductParameter& inner_product_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::InnerProductParameter* release_inner_product_param();
  ::apollo::perception::inference::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param);
  private:
  const ::apollo::perception::inference::InnerProductParameter& _internal_inner_product_param() const;
  ::apollo::perception::inference::InnerProductParameter* _internal_mutable_inner_product_param();
  public:
  void unsafe_arena_set_allocated_inner_product_param(
      ::apollo::perception::inference::InnerProductParameter* inner_product_param);
  ::apollo::perception::inference::InnerProductParameter* unsafe_arena_release_inner_product_param();

  // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  private:
  bool _internal_has_lrn_param() const;
  public:
  void clear_lrn_param();
  const ::apollo::perception::inference::LRNParameter& lrn_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::LRNParameter* release_lrn_param();
  ::apollo::perception::inference::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param);
  private:
  const ::apollo::perception::inference::LRNParameter& _internal_lrn_param() const;
  ::apollo::perception::inference::LRNParameter* _internal_mutable_lrn_param();
  public:
  void unsafe_arena_set_allocated_lrn_param(
      ::apollo::perception::inference::LRNParameter* lrn_param);
  ::apollo::perception::inference::LRNParameter* unsafe_arena_release_lrn_param();

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  private:
  bool _internal_has_pooling_param() const;
  public:
  void clear_pooling_param();
  const ::apollo::perception::inference::PoolingParameter& pooling_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PoolingParameter* release_pooling_param();
  ::apollo::perception::inference::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param);
  private:
  const ::apollo::perception::inference::PoolingParameter& _internal_pooling_param() const;
  ::apollo::perception::inference::PoolingParameter* _internal_mutable_pooling_param();
  public:
  void unsafe_arena_set_allocated_pooling_param(
      ::apollo::perception::inference::PoolingParameter* pooling_param);
  ::apollo::perception::inference::PoolingParameter* unsafe_arena_release_pooling_param();

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  private:
  bool _internal_has_window_data_param() const;
  public:
  void clear_window_data_param();
  const ::apollo::perception::inference::WindowDataParameter& window_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::WindowDataParameter* release_window_data_param();
  ::apollo::perception::inference::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param);
  private:
  const ::apollo::perception::inference::WindowDataParameter& _internal_window_data_param() const;
  ::apollo::perception::inference::WindowDataParameter* _internal_mutable_window_data_param();
  public:
  void unsafe_arena_set_allocated_window_data_param(
      ::apollo::perception::inference::WindowDataParameter* window_data_param);
  ::apollo::perception::inference::WindowDataParameter* unsafe_arena_release_window_data_param();

  // optional .apollo.perception.inference.PowerParameter power_param = 21;
  bool has_power_param() const;
  private:
  bool _internal_has_power_param() const;
  public:
  void clear_power_param();
  const ::apollo::perception::inference::PowerParameter& power_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::PowerParameter* release_power_param();
  ::apollo::perception::inference::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param);
  private:
  const ::apollo::perception::inference::PowerParameter& _internal_power_param() const;
  ::apollo::perception::inference::PowerParameter* _internal_mutable_power_param();
  public:
  void unsafe_arena_set_allocated_power_param(
      ::apollo::perception::inference::PowerParameter* power_param);
  ::apollo::perception::inference::PowerParameter* unsafe_arena_release_power_param();

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  private:
  bool _internal_has_memory_data_param() const;
  public:
  void clear_memory_data_param();
  const ::apollo::perception::inference::MemoryDataParameter& memory_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::MemoryDataParameter* release_memory_data_param();
  ::apollo::perception::inference::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param);
  private:
  const ::apollo::perception::inference::MemoryDataParameter& _internal_memory_data_param() const;
  ::apollo::perception::inference::MemoryDataParameter* _internal_mutable_memory_data_param();
  public:
  void unsafe_arena_set_allocated_memory_data_param(
      ::apollo::perception::inference::MemoryDataParameter* memory_data_param);
  ::apollo::perception::inference::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  private:
  bool _internal_has_argmax_param() const;
  public:
  void clear_argmax_param();
  const ::apollo::perception::inference::ArgMaxParameter& argmax_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ArgMaxParameter* release_argmax_param();
  ::apollo::perception::inference::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param);
  private:
  const ::apollo::perception::inference::ArgMaxParameter& _internal_argmax_param() const;
  ::apollo::perception::inference::ArgMaxParameter* _internal_mutable_argmax_param();
  public:
  void unsafe_arena_set_allocated_argmax_param(
      ::apollo::perception::inference::ArgMaxParameter* argmax_param);
  ::apollo::perception::inference::ArgMaxParameter* unsafe_arena_release_argmax_param();

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  private:
  bool _internal_has_eltwise_param() const;
  public:
  void clear_eltwise_param();
  const ::apollo::perception::inference::EltwiseParameter& eltwise_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::EltwiseParameter* release_eltwise_param();
  ::apollo::perception::inference::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param);
  private:
  const ::apollo::perception::inference::EltwiseParameter& _internal_eltwise_param() const;
  ::apollo::perception::inference::EltwiseParameter* _internal_mutable_eltwise_param();
  public:
  void unsafe_arena_set_allocated_eltwise_param(
      ::apollo::perception::inference::EltwiseParameter* eltwise_param);
  ::apollo::perception::inference::EltwiseParameter* unsafe_arena_release_eltwise_param();

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  private:
  bool _internal_has_threshold_param() const;
  public:
  void clear_threshold_param();
  const ::apollo::perception::inference::ThresholdParameter& threshold_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ThresholdParameter* release_threshold_param();
  ::apollo::perception::inference::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param);
  private:
  const ::apollo::perception::inference::ThresholdParameter& _internal_threshold_param() const;
  ::apollo::perception::inference::ThresholdParameter* _internal_mutable_threshold_param();
  public:
  void unsafe_arena_set_allocated_threshold_param(
      ::apollo::perception::inference::ThresholdParameter* threshold_param);
  ::apollo::perception::inference::ThresholdParameter* unsafe_arena_release_threshold_param();

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  private:
  bool _internal_has_dummy_data_param() const;
  public:
  void clear_dummy_data_param();
  const ::apollo::perception::inference::DummyDataParameter& dummy_data_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::DummyDataParameter* release_dummy_data_param();
  ::apollo::perception::inference::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param);
  private:
  const ::apollo::perception::inference::DummyDataParameter& _internal_dummy_data_param() const;
  ::apollo::perception::inference::DummyDataParameter* _internal_mutable_dummy_data_param();
  public:
  void unsafe_arena_set_allocated_dummy_data_param(
      ::apollo::perception::inference::DummyDataParameter* dummy_data_param);
  ::apollo::perception::inference::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  private:
  bool _internal_has_accuracy_param() const;
  public:
  void clear_accuracy_param();
  const ::apollo::perception::inference::AccuracyParameter& accuracy_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::AccuracyParameter* release_accuracy_param();
  ::apollo::perception::inference::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param);
  private:
  const ::apollo::perception::inference::AccuracyParameter& _internal_accuracy_param() const;
  ::apollo::perception::inference::AccuracyParameter* _internal_mutable_accuracy_param();
  public:
  void unsafe_arena_set_allocated_accuracy_param(
      ::apollo::perception::inference::AccuracyParameter* accuracy_param);
  ::apollo::perception::inference::AccuracyParameter* unsafe_arena_release_accuracy_param();

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  private:
  bool _internal_has_hinge_loss_param() const;
  public:
  void clear_hinge_loss_param();
  const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HingeLossParameter* release_hinge_loss_param();
  ::apollo::perception::inference::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param);
  private:
  const ::apollo::perception::inference::HingeLossParameter& _internal_hinge_loss_param() const;
  ::apollo::perception::inference::HingeLossParameter* _internal_mutable_hinge_loss_param();
  public:
  void unsafe_arena_set_allocated_hinge_loss_param(
      ::apollo::perception::inference::HingeLossParameter* hinge_loss_param);
  ::apollo::perception::inference::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  private:
  bool _internal_has_relu_param() const;
  public:
  void clear_relu_param();
  const ::apollo::perception::inference::ReLUParameter& relu_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ReLUParameter* release_relu_param();
  ::apollo::perception::inference::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param);
  private:
  const ::apollo::perception::inference::ReLUParameter& _internal_relu_param() const;
  ::apollo::perception::inference::ReLUParameter* _internal_mutable_relu_param();
  public:
  void unsafe_arena_set_allocated_relu_param(
      ::apollo::perception::inference::ReLUParameter* relu_param);
  ::apollo::perception::inference::ReLUParameter* unsafe_arena_release_relu_param();

  // optional .apollo.perception.inference.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  private:
  bool _internal_has_slice_param() const;
  public:
  void clear_slice_param();
  const ::apollo::perception::inference::SliceParameter& slice_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SliceParameter* release_slice_param();
  ::apollo::perception::inference::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param);
  private:
  const ::apollo::perception::inference::SliceParameter& _internal_slice_param() const;
  ::apollo::perception::inference::SliceParameter* _internal_mutable_slice_param();
  public:
  void unsafe_arena_set_allocated_slice_param(
      ::apollo::perception::inference::SliceParameter* slice_param);
  ::apollo::perception::inference::SliceParameter* unsafe_arena_release_slice_param();

  // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  private:
  bool _internal_has_mvn_param() const;
  public:
  void clear_mvn_param();
  const ::apollo::perception::inference::MVNParameter& mvn_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::MVNParameter* release_mvn_param();
  ::apollo::perception::inference::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param);
  private:
  const ::apollo::perception::inference::MVNParameter& _internal_mvn_param() const;
  ::apollo::perception::inference::MVNParameter* _internal_mutable_mvn_param();
  public:
  void unsafe_arena_set_allocated_mvn_param(
      ::apollo::perception::inference::MVNParameter* mvn_param);
  ::apollo::perception::inference::MVNParameter* unsafe_arena_release_mvn_param();

  // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  private:
  bool _internal_has_transform_param() const;
  public:
  void clear_transform_param();
  const ::apollo::perception::inference::TransformationParameter& transform_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::TransformationParameter* release_transform_param();
  ::apollo::perception::inference::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param);
  private:
  const ::apollo::perception::inference::TransformationParameter& _internal_transform_param() const;
  ::apollo::perception::inference::TransformationParameter* _internal_mutable_transform_param();
  public:
  void unsafe_arena_set_allocated_transform_param(
      ::apollo::perception::inference::TransformationParameter* transform_param);
  ::apollo::perception::inference::TransformationParameter* unsafe_arena_release_transform_param();

  // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  private:
  bool _internal_has_tanh_param() const;
  public:
  void clear_tanh_param();
  const ::apollo::perception::inference::TanHParameter& tanh_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::TanHParameter* release_tanh_param();
  ::apollo::perception::inference::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param);
  private:
  const ::apollo::perception::inference::TanHParameter& _internal_tanh_param() const;
  ::apollo::perception::inference::TanHParameter* _internal_mutable_tanh_param();
  public:
  void unsafe_arena_set_allocated_tanh_param(
      ::apollo::perception::inference::TanHParameter* tanh_param);
  ::apollo::perception::inference::TanHParameter* unsafe_arena_release_tanh_param();

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  private:
  bool _internal_has_sigmoid_param() const;
  public:
  void clear_sigmoid_param();
  const ::apollo::perception::inference::SigmoidParameter& sigmoid_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SigmoidParameter* release_sigmoid_param();
  ::apollo::perception::inference::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param);
  private:
  const ::apollo::perception::inference::SigmoidParameter& _internal_sigmoid_param() const;
  ::apollo::perception::inference::SigmoidParameter* _internal_mutable_sigmoid_param();
  public:
  void unsafe_arena_set_allocated_sigmoid_param(
      ::apollo::perception::inference::SigmoidParameter* sigmoid_param);
  ::apollo::perception::inference::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  private:
  bool _internal_has_softmax_param() const;
  public:
  void clear_softmax_param();
  const ::apollo::perception::inference::SoftmaxParameter& softmax_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::SoftmaxParameter* release_softmax_param();
  ::apollo::perception::inference::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param);
  private:
  const ::apollo::perception::inference::SoftmaxParameter& _internal_softmax_param() const;
  ::apollo::perception::inference::SoftmaxParameter* _internal_mutable_softmax_param();
  public:
  void unsafe_arena_set_allocated_softmax_param(
      ::apollo::perception::inference::SoftmaxParameter* softmax_param);
  ::apollo::perception::inference::SoftmaxParameter* unsafe_arena_release_softmax_param();

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  private:
  bool _internal_has_contrastive_loss_param() const;
  public:
  void clear_contrastive_loss_param();
  const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ContrastiveLossParameter* release_contrastive_loss_param();
  ::apollo::perception::inference::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);
  private:
  const ::apollo::perception::inference::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::apollo::perception::inference::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();
  public:
  void unsafe_arena_set_allocated_contrastive_loss_param(
      ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);
  ::apollo::perception::inference::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  // optional .apollo.perception.inference.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  private:
  bool _internal_has_exp_param() const;
  public:
  void clear_exp_param();
  const ::apollo::perception::inference::ExpParameter& exp_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::ExpParameter* release_exp_param();
  ::apollo::perception::inference::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param);
  private:
  const ::apollo::perception::inference::ExpParameter& _internal_exp_param() const;
  ::apollo::perception::inference::ExpParameter* _internal_mutable_exp_param();
  public:
  void unsafe_arena_set_allocated_exp_param(
      ::apollo::perception::inference::ExpParameter* exp_param);
  ::apollo::perception::inference::ExpParameter* unsafe_arena_release_exp_param();

  // optional .apollo.perception.inference.LossParameter loss_param = 42;
  bool has_loss_param() const;
  private:
  bool _internal_has_loss_param() const;
  public:
  void clear_loss_param();
  const ::apollo::perception::inference::LossParameter& loss_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::LossParameter* release_loss_param();
  ::apollo::perception::inference::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param);
  private:
  const ::apollo::perception::inference::LossParameter& _internal_loss_param() const;
  ::apollo::perception::inference::LossParameter* _internal_mutable_loss_param();
  public:
  void unsafe_arena_set_allocated_loss_param(
      ::apollo::perception::inference::LossParameter* loss_param);
  ::apollo::perception::inference::LossParameter* unsafe_arena_release_loss_param();

  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::inference::V1LayerParameter_LayerType type() const;
  void set_type(::apollo::perception::inference::V1LayerParameter_LayerType value);
  private:
  ::apollo::perception::inference::V1LayerParameter_LayerType _internal_type() const;
  void _internal_set_type(::apollo::perception::inference::V1LayerParameter_LayerType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.V1LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bottom_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> top_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > include_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > exclude_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > loss_weight_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> blob_share_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::apollo::perception::inference::V0LayerParameter* layer_;
    ::apollo::perception::inference::ConcatParameter* concat_param_;
    ::apollo::perception::inference::ConvolutionParameter* convolution_param_;
    ::apollo::perception::inference::DataParameter* data_param_;
    ::apollo::perception::inference::DropoutParameter* dropout_param_;
    ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param_;
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
    ::apollo::perception::inference::ImageDataParameter* image_data_param_;
    ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param_;
    ::apollo::perception::inference::InnerProductParameter* inner_product_param_;
    ::apollo::perception::inference::LRNParameter* lrn_param_;
    ::apollo::perception::inference::PoolingParameter* pooling_param_;
    ::apollo::perception::inference::WindowDataParameter* window_data_param_;
    ::apollo::perception::inference::PowerParameter* power_param_;
    ::apollo::perception::inference::MemoryDataParameter* memory_data_param_;
    ::apollo::perception::inference::ArgMaxParameter* argmax_param_;
    ::apollo::perception::inference::EltwiseParameter* eltwise_param_;
    ::apollo::perception::inference::ThresholdParameter* threshold_param_;
    ::apollo::perception::inference::DummyDataParameter* dummy_data_param_;
    ::apollo::perception::inference::AccuracyParameter* accuracy_param_;
    ::apollo::perception::inference::HingeLossParameter* hinge_loss_param_;
    ::apollo::perception::inference::ReLUParameter* relu_param_;
    ::apollo::perception::inference::SliceParameter* slice_param_;
    ::apollo::perception::inference::MVNParameter* mvn_param_;
    ::apollo::perception::inference::TransformationParameter* transform_param_;
    ::apollo::perception::inference::TanHParameter* tanh_param_;
    ::apollo::perception::inference::SigmoidParameter* sigmoid_param_;
    ::apollo::perception::inference::SoftmaxParameter* softmax_param_;
    ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param_;
    ::apollo::perception::inference::ExpParameter* exp_param_;
    ::apollo::perception::inference::LossParameter* loss_param_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class V0LayerParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.V0LayerParameter) */ {
 public:
  inline V0LayerParameter() : V0LayerParameter(nullptr) {}
  ~V0LayerParameter() override;
  explicit PROTOBUF_CONSTEXPR V0LayerParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V0LayerParameter(const V0LayerParameter& from);
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V0LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V0LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V0LayerParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V0LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V0LayerParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V0LayerParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V0LayerParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V0LayerParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.V0LayerParameter";
  }
  protected:
  explicit V0LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static constexpr PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolMethod_Name.");
    return V0LayerParameter_PoolMethod_Name(enum_t_value);
  }
  static inline bool PoolMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 50,
    kBlobsLrFieldNumber = 51,
    kWeightDecayFieldNumber = 52,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceFieldNumber = 16,
    kMeanfileFieldNumber = 18,
    kDetCropModeFieldNumber = 59,
    kWeightFillerFieldNumber = 5,
    kBiasFillerFieldNumber = 6,
    kHdf5OutputParamFieldNumber = 1001,
    kNumOutputFieldNumber = 3,
    kPadFieldNumber = 7,
    kKernelsizeFieldNumber = 8,
    kPoolFieldNumber = 11,
    kBatchsizeFieldNumber = 19,
    kCropsizeFieldNumber = 20,
    kMirrorFieldNumber = 21,
    kShuffleImagesFieldNumber = 64,
    kRandSkipFieldNumber = 53,
    kDetContextPadFieldNumber = 58,
    kNewNumFieldNumber = 60,
    kNewChannelsFieldNumber = 61,
    kNewHeightFieldNumber = 62,
    kNewWidthFieldNumber = 63,
    kConcatDimFieldNumber = 65,
    kBiastermFieldNumber = 4,
    kGroupFieldNumber = 9,
    kStrideFieldNumber = 10,
    kDropoutRatioFieldNumber = 12,
    kLocalSizeFieldNumber = 13,
    kAlphaFieldNumber = 14,
    kBetaFieldNumber = 15,
    kScaleFieldNumber = 17,
    kKFieldNumber = 22,
    kDetFgThresholdFieldNumber = 54,
    kDetBgThresholdFieldNumber = 55,
    kDetFgFractionFieldNumber = 56,
  };
  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();
  private:
  const ::apollo::perception::inference::BlobProto& _internal_blobs(int index) const;
  ::apollo::perception::inference::BlobProto* _internal_add_blobs();
  public:
  const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  ::apollo::perception::inference::BlobProto* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;
  public:
  void clear_blobs_lr();
  private:
  float _internal_blobs_lr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_blobs_lr() const;
  void _internal_add_blobs_lr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_blobs_lr();
  public:
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      blobs_lr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;
  public:
  void clear_weight_decay();
  private:
  float _internal_weight_decay(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight_decay() const;
  void _internal_add_weight_decay(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight_decay();
  public:
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight_decay() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string source = 16;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string meanfile = 18;
  bool has_meanfile() const;
  private:
  bool _internal_has_meanfile() const;
  public:
  void clear_meanfile();
  const std::string& meanfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meanfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meanfile();
  PROTOBUF_NODISCARD std::string* release_meanfile();
  void set_allocated_meanfile(std::string* meanfile);
  private:
  const std::string& _internal_meanfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meanfile(const std::string& value);
  std::string* _internal_mutable_meanfile();
  public:

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  private:
  bool _internal_has_det_crop_mode() const;
  public:
  void clear_det_crop_mode();
  const std::string& det_crop_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_det_crop_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_det_crop_mode();
  PROTOBUF_NODISCARD std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(std::string* det_crop_mode);
  private:
  const std::string& _internal_det_crop_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_det_crop_mode(const std::string& value);
  std::string* _internal_mutable_det_crop_mode();
  public:

  // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  private:
  bool _internal_has_weight_filler() const;
  public:
  void clear_weight_filler();
  const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_weight_filler();
  ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_weight_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_weight_filler();
  public:
  void unsafe_arena_set_allocated_weight_filler(
      ::apollo::perception::inference::FillerParameter* weight_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_weight_filler();

  // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  private:
  bool _internal_has_bias_filler() const;
  public:
  void clear_bias_filler();
  const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_bias_filler();
  ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_bias_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_bias_filler();
  public:
  void unsafe_arena_set_allocated_bias_filler(
      ::apollo::perception::inference::FillerParameter* bias_filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_bias_filler();

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  private:
  bool _internal_has_hdf5_output_param() const;
  public:
  void clear_hdf5_output_param();
  const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  private:
  const ::apollo::perception::inference::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::apollo::perception::inference::HDF5OutputParameter* _internal_mutable_hdf5_output_param();
  public:
  void unsafe_arena_set_allocated_hdf5_output_param(
      ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);
  ::apollo::perception::inference::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  private:
  bool _internal_has_pad() const;
  public:
  void clear_pad();
  uint32_t pad() const;
  void set_pad(uint32_t value);
  private:
  uint32_t _internal_pad() const;
  void _internal_set_pad(uint32_t value);
  public:

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  private:
  bool _internal_has_kernelsize() const;
  public:
  void clear_kernelsize();
  uint32_t kernelsize() const;
  void set_kernelsize(uint32_t value);
  private:
  uint32_t _internal_kernelsize() const;
  void _internal_set_kernelsize(uint32_t value);
  public:

  // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::apollo::perception::inference::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value);
  private:
  ::apollo::perception::inference::V0LayerParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value);
  public:

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  private:
  bool _internal_has_batchsize() const;
  public:
  void clear_batchsize();
  uint32_t batchsize() const;
  void set_batchsize(uint32_t value);
  private:
  uint32_t _internal_batchsize() const;
  void _internal_set_batchsize(uint32_t value);
  public:

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  private:
  bool _internal_has_cropsize() const;
  public:
  void clear_cropsize();
  uint32_t cropsize() const;
  void set_cropsize(uint32_t value);
  private:
  uint32_t _internal_cropsize() const;
  void _internal_set_cropsize(uint32_t value);
  public:

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  private:
  bool _internal_has_shuffle_images() const;
  public:
  void clear_shuffle_images();
  bool shuffle_images() const;
  void set_shuffle_images(bool value);
  private:
  bool _internal_shuffle_images() const;
  void _internal_set_shuffle_images(bool value);
  public:

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  private:
  bool _internal_has_rand_skip() const;
  public:
  void clear_rand_skip();
  uint32_t rand_skip() const;
  void set_rand_skip(uint32_t value);
  private:
  uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(uint32_t value);
  public:

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  private:
  bool _internal_has_det_context_pad() const;
  public:
  void clear_det_context_pad();
  uint32_t det_context_pad() const;
  void set_det_context_pad(uint32_t value);
  private:
  uint32_t _internal_det_context_pad() const;
  void _internal_set_det_context_pad(uint32_t value);
  public:

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  private:
  bool _internal_has_new_num() const;
  public:
  void clear_new_num();
  int32_t new_num() const;
  void set_new_num(int32_t value);
  private:
  int32_t _internal_new_num() const;
  void _internal_set_new_num(int32_t value);
  public:

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  private:
  bool _internal_has_new_channels() const;
  public:
  void clear_new_channels();
  int32_t new_channels() const;
  void set_new_channels(int32_t value);
  private:
  int32_t _internal_new_channels() const;
  void _internal_set_new_channels(int32_t value);
  public:

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  private:
  bool _internal_has_new_height() const;
  public:
  void clear_new_height();
  int32_t new_height() const;
  void set_new_height(int32_t value);
  private:
  int32_t _internal_new_height() const;
  void _internal_set_new_height(int32_t value);
  public:

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  private:
  bool _internal_has_new_width() const;
  public:
  void clear_new_width();
  int32_t new_width() const;
  void set_new_width(int32_t value);
  private:
  int32_t _internal_new_width() const;
  void _internal_set_new_width(int32_t value);
  public:

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  private:
  bool _internal_has_concat_dim() const;
  public:
  void clear_concat_dim();
  uint32_t concat_dim() const;
  void set_concat_dim(uint32_t value);
  private:
  uint32_t _internal_concat_dim() const;
  void _internal_set_concat_dim(uint32_t value);
  public:

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  private:
  bool _internal_has_biasterm() const;
  public:
  void clear_biasterm();
  bool biasterm() const;
  void set_biasterm(bool value);
  private:
  bool _internal_biasterm() const;
  void _internal_set_biasterm(bool value);
  public:

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  uint32_t stride() const;
  void set_stride(uint32_t value);
  private:
  uint32_t _internal_stride() const;
  void _internal_set_stride(uint32_t value);
  public:

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  private:
  bool _internal_has_dropout_ratio() const;
  public:
  void clear_dropout_ratio();
  float dropout_ratio() const;
  void set_dropout_ratio(float value);
  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);
  public:

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  private:
  bool _internal_has_local_size() const;
  public:
  void clear_local_size();
  uint32_t local_size() const;
  void set_local_size(uint32_t value);
  private:
  uint32_t _internal_local_size() const;
  void _internal_set_local_size(uint32_t value);
  public:

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float k = 22 [default = 1];
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  private:
  bool _internal_has_det_fg_threshold() const;
  public:
  void clear_det_fg_threshold();
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);
  private:
  float _internal_det_fg_threshold() const;
  void _internal_set_det_fg_threshold(float value);
  public:

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  private:
  bool _internal_has_det_bg_threshold() const;
  public:
  void clear_det_bg_threshold();
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);
  private:
  float _internal_det_bg_threshold() const;
  void _internal_set_det_bg_threshold(float value);
  public:

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  private:
  bool _internal_has_det_fg_fraction() const;
  public:
  void clear_det_fg_fraction();
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);
  private:
  float _internal_det_fg_fraction() const;
  void _internal_set_det_fg_fraction(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.V0LayerParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > blobs_lr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_decay_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meanfile_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_det_crop_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det_crop_mode_;
    ::apollo::perception::inference::FillerParameter* weight_filler_;
    ::apollo::perception::inference::FillerParameter* bias_filler_;
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
    uint32_t num_output_;
    uint32_t pad_;
    uint32_t kernelsize_;
    int pool_;
    uint32_t batchsize_;
    uint32_t cropsize_;
    bool mirror_;
    bool shuffle_images_;
    uint32_t rand_skip_;
    uint32_t det_context_pad_;
    int32_t new_num_;
    int32_t new_channels_;
    int32_t new_height_;
    int32_t new_width_;
    uint32_t concat_dim_;
    bool biasterm_;
    uint32_t group_;
    uint32_t stride_;
    float dropout_ratio_;
    uint32_t local_size_;
    float alpha_;
    float beta_;
    float scale_;
    float k_;
    float det_fg_threshold_;
    float det_bg_threshold_;
    float det_fg_fraction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PReLUParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PReLUParameter) */ {
 public:
  inline PReLUParameter() : PReLUParameter(nullptr) {}
  ~PReLUParameter() override;
  explicit PROTOBUF_CONSTEXPR PReLUParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PReLUParameter(const PReLUParameter& from);
  PReLUParameter(PReLUParameter&& from) noexcept
    : PReLUParameter() {
    *this = ::std::move(from);
  }

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PReLUParameter& operator=(PReLUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PReLUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(PReLUParameter& a, PReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PReLUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PReLUParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PReLUParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PReLUParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PReLUParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PReLUParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PReLUParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PReLUParameter";
  }
  protected:
  explicit PReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 1,
    kChannelSharedFieldNumber = 2,
  };
  // optional .apollo.perception.inference.FillerParameter filler = 1;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  const ::apollo::perception::inference::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::FillerParameter* release_filler();
  ::apollo::perception::inference::FillerParameter* mutable_filler();
  void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);
  private:
  const ::apollo::perception::inference::FillerParameter& _internal_filler() const;
  ::apollo::perception::inference::FillerParameter* _internal_mutable_filler();
  public:
  void unsafe_arena_set_allocated_filler(
      ::apollo::perception::inference::FillerParameter* filler);
  ::apollo::perception::inference::FillerParameter* unsafe_arena_release_filler();

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  private:
  bool _internal_has_channel_shared() const;
  public:
  void clear_channel_shared();
  bool channel_shared() const;
  void set_channel_shared(bool value);
  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PReLUParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::inference::FillerParameter* filler_;
    bool channel_shared_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class PaddingParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.PaddingParameter) */ {
 public:
  inline PaddingParameter() : PaddingParameter(nullptr) {}
  ~PaddingParameter() override;
  explicit PROTOBUF_CONSTEXPR PaddingParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaddingParameter(const PaddingParameter& from);
  PaddingParameter(PaddingParameter&& from) noexcept
    : PaddingParameter() {
    *this = ::std::move(from);
  }

  inline PaddingParameter& operator=(const PaddingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaddingParameter& operator=(PaddingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaddingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaddingParameter* internal_default_instance() {
    return reinterpret_cast<const PaddingParameter*>(
               &_PaddingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(PaddingParameter& a, PaddingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PaddingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaddingParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaddingParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaddingParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaddingParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaddingParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaddingParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.PaddingParameter";
  }
  protected:
  explicit PaddingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadTFieldNumber = 1,
    kPadBFieldNumber = 2,
    kPadLFieldNumber = 3,
    kPadRFieldNumber = 4,
    kValFieldNumber = 5,
  };
  // optional uint32 pad_t = 1 [default = 0];
  bool has_pad_t() const;
  private:
  bool _internal_has_pad_t() const;
  public:
  void clear_pad_t();
  uint32_t pad_t() const;
  void set_pad_t(uint32_t value);
  private:
  uint32_t _internal_pad_t() const;
  void _internal_set_pad_t(uint32_t value);
  public:

  // optional uint32 pad_b = 2 [default = 0];
  bool has_pad_b() const;
  private:
  bool _internal_has_pad_b() const;
  public:
  void clear_pad_b();
  uint32_t pad_b() const;
  void set_pad_b(uint32_t value);
  private:
  uint32_t _internal_pad_b() const;
  void _internal_set_pad_b(uint32_t value);
  public:

  // optional uint32 pad_l = 3 [default = 0];
  bool has_pad_l() const;
  private:
  bool _internal_has_pad_l() const;
  public:
  void clear_pad_l();
  uint32_t pad_l() const;
  void set_pad_l(uint32_t value);
  private:
  uint32_t _internal_pad_l() const;
  void _internal_set_pad_l(uint32_t value);
  public:

  // optional uint32 pad_r = 4 [default = 0];
  bool has_pad_r() const;
  private:
  bool _internal_has_pad_r() const;
  public:
  void clear_pad_r();
  uint32_t pad_r() const;
  void set_pad_r(uint32_t value);
  private:
  uint32_t _internal_pad_r() const;
  void _internal_set_pad_r(uint32_t value);
  public:

  // optional float val = 5 [default = 0];
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PaddingParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pad_t_;
    uint32_t pad_b_;
    uint32_t pad_l_;
    uint32_t pad_r_;
    float val_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class YoloLossParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.YoloLossParameter) */ {
 public:
  inline YoloLossParameter() : YoloLossParameter(nullptr) {}
  ~YoloLossParameter() override;
  explicit PROTOBUF_CONSTEXPR YoloLossParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloLossParameter(const YoloLossParameter& from);
  YoloLossParameter(YoloLossParameter&& from) noexcept
    : YoloLossParameter() {
    *this = ::std::move(from);
  }

  inline YoloLossParameter& operator=(const YoloLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloLossParameter& operator=(YoloLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloLossParameter* internal_default_instance() {
    return reinterpret_cast<const YoloLossParameter*>(
               &_YoloLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(YoloLossParameter& a, YoloLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloLossParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloLossParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloLossParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloLossParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloLossParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloLossParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.YoloLossParameter";
  }
  protected:
  explicit YoloLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef YoloLossParameter_RegLossType RegLossType;
  static constexpr RegLossType L2 =
    YoloLossParameter_RegLossType_L2;
  static constexpr RegLossType L1 =
    YoloLossParameter_RegLossType_L1;
  static constexpr RegLossType SMOOTH_L1 =
    YoloLossParameter_RegLossType_SMOOTH_L1;
  static inline bool RegLossType_IsValid(int value) {
    return YoloLossParameter_RegLossType_IsValid(value);
  }
  static constexpr RegLossType RegLossType_MIN =
    YoloLossParameter_RegLossType_RegLossType_MIN;
  static constexpr RegLossType RegLossType_MAX =
    YoloLossParameter_RegLossType_RegLossType_MAX;
  static constexpr int RegLossType_ARRAYSIZE =
    YoloLossParameter_RegLossType_RegLossType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RegLossType_descriptor() {
    return YoloLossParameter_RegLossType_descriptor();
  }
  template<typename T>
  static inline const std::string& RegLossType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RegLossType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RegLossType_Name.");
    return YoloLossParameter_RegLossType_Name(enum_t_value);
  }
  static inline bool RegLossType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RegLossType* value) {
    return YoloLossParameter_RegLossType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRegLossTypeFieldNumber = 1,
    kTargetAxisFieldNumber = 2,
  };
  // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
  bool has_reg_loss_type() const;
  private:
  bool _internal_has_reg_loss_type() const;
  public:
  void clear_reg_loss_type();
  ::apollo::perception::inference::YoloLossParameter_RegLossType reg_loss_type() const;
  void set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value);
  private:
  ::apollo::perception::inference::YoloLossParameter_RegLossType _internal_reg_loss_type() const;
  void _internal_set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value);
  public:

  // optional int32 target_axis = 2 [default = -1];
  bool has_target_axis() const;
  private:
  bool _internal_has_target_axis() const;
  public:
  void clear_target_axis();
  int32_t target_axis() const;
  void set_target_axis(int32_t value);
  private:
  int32_t _internal_target_axis() const;
  void _internal_set_target_axis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloLossParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int reg_loss_type_;
    int32_t target_axis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class YoloDumpParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.YoloDumpParameter) */ {
 public:
  inline YoloDumpParameter() : YoloDumpParameter(nullptr) {}
  ~YoloDumpParameter() override;
  explicit PROTOBUF_CONSTEXPR YoloDumpParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloDumpParameter(const YoloDumpParameter& from);
  YoloDumpParameter(YoloDumpParameter&& from) noexcept
    : YoloDumpParameter() {
    *this = ::std::move(from);
  }

  inline YoloDumpParameter& operator=(const YoloDumpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloDumpParameter& operator=(YoloDumpParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloDumpParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloDumpParameter* internal_default_instance() {
    return reinterpret_cast<const YoloDumpParameter*>(
               &_YoloDumpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(YoloDumpParameter& a, YoloDumpParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloDumpParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloDumpParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloDumpParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloDumpParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloDumpParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloDumpParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloDumpParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.YoloDumpParameter";
  }
  protected:
  explicit YoloDumpParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDumpDirFieldNumber = 1,
  };
  // optional string dump_dir = 1;
  bool has_dump_dir() const;
  private:
  bool _internal_has_dump_dir() const;
  public:
  void clear_dump_dir();
  const std::string& dump_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dump_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dump_dir();
  PROTOBUF_NODISCARD std::string* release_dump_dir();
  void set_allocated_dump_dir(std::string* dump_dir);
  private:
  const std::string& _internal_dump_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dump_dir(const std::string& value);
  std::string* _internal_mutable_dump_dir();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloDumpParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dump_dir_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class YoloAnchorsParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.YoloAnchorsParameter) */ {
 public:
  inline YoloAnchorsParameter() : YoloAnchorsParameter(nullptr) {}
  ~YoloAnchorsParameter() override;
  explicit PROTOBUF_CONSTEXPR YoloAnchorsParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloAnchorsParameter(const YoloAnchorsParameter& from);
  YoloAnchorsParameter(YoloAnchorsParameter&& from) noexcept
    : YoloAnchorsParameter() {
    *this = ::std::move(from);
  }

  inline YoloAnchorsParameter& operator=(const YoloAnchorsParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloAnchorsParameter& operator=(YoloAnchorsParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloAnchorsParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloAnchorsParameter* internal_default_instance() {
    return reinterpret_cast<const YoloAnchorsParameter*>(
               &_YoloAnchorsParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(YoloAnchorsParameter& a, YoloAnchorsParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloAnchorsParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloAnchorsParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloAnchorsParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloAnchorsParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloAnchorsParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloAnchorsParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloAnchorsParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.YoloAnchorsParameter";
  }
  protected:
  explicit YoloAnchorsParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorsFileFieldNumber = 1,
    kRefWFieldNumber = 2,
    kRefHFieldNumber = 3,
  };
  // optional string anchors_file = 1;
  bool has_anchors_file() const;
  private:
  bool _internal_has_anchors_file() const;
  public:
  void clear_anchors_file();
  const std::string& anchors_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anchors_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anchors_file();
  PROTOBUF_NODISCARD std::string* release_anchors_file();
  void set_allocated_anchors_file(std::string* anchors_file);
  private:
  const std::string& _internal_anchors_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anchors_file(const std::string& value);
  std::string* _internal_mutable_anchors_file();
  public:

  // optional int32 ref_w = 2 [default = 1];
  bool has_ref_w() const;
  private:
  bool _internal_has_ref_w() const;
  public:
  void clear_ref_w();
  int32_t ref_w() const;
  void set_ref_w(int32_t value);
  private:
  int32_t _internal_ref_w() const;
  void _internal_set_ref_w(int32_t value);
  public:

  // optional int32 ref_h = 3 [default = 1];
  bool has_ref_h() const;
  private:
  bool _internal_has_ref_h() const;
  public:
  void clear_ref_h();
  int32_t ref_h() const;
  void set_ref_h(int32_t value);
  private:
  int32_t _internal_ref_h() const;
  void _internal_set_ref_h(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloAnchorsParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchors_file_;
    int32_t ref_w_;
    int32_t ref_h_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DimensionStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DimensionStatistics) */ {
 public:
  inline DimensionStatistics() : DimensionStatistics(nullptr) {}
  ~DimensionStatistics() override;
  explicit PROTOBUF_CONSTEXPR DimensionStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionStatistics(const DimensionStatistics& from);
  DimensionStatistics(DimensionStatistics&& from) noexcept
    : DimensionStatistics() {
    *this = ::std::move(from);
  }

  inline DimensionStatistics& operator=(const DimensionStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionStatistics& operator=(DimensionStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionStatistics* internal_default_instance() {
    return reinterpret_cast<const DimensionStatistics*>(
               &_DimensionStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(DimensionStatistics& a, DimensionStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionStatistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DimensionStatistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionStatistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DimensionStatistics";
  }
  protected:
  explicit DimensionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanHFieldNumber = 1,
    kMeanWFieldNumber = 2,
    kMeanLFieldNumber = 3,
    kStdLFieldNumber = 6,
    kStdHFieldNumber = 4,
    kStdWFieldNumber = 5,
  };
  // optional float mean_h = 1 [default = 0];
  bool has_mean_h() const;
  private:
  bool _internal_has_mean_h() const;
  public:
  void clear_mean_h();
  float mean_h() const;
  void set_mean_h(float value);
  private:
  float _internal_mean_h() const;
  void _internal_set_mean_h(float value);
  public:

  // optional float mean_w = 2 [default = 0];
  bool has_mean_w() const;
  private:
  bool _internal_has_mean_w() const;
  public:
  void clear_mean_w();
  float mean_w() const;
  void set_mean_w(float value);
  private:
  float _internal_mean_w() const;
  void _internal_set_mean_w(float value);
  public:

  // optional float mean_l = 3 [default = 0];
  bool has_mean_l() const;
  private:
  bool _internal_has_mean_l() const;
  public:
  void clear_mean_l();
  float mean_l() const;
  void set_mean_l(float value);
  private:
  float _internal_mean_l() const;
  void _internal_set_mean_l(float value);
  public:

  // optional float std_l = 6 [default = 1];
  bool has_std_l() const;
  private:
  bool _internal_has_std_l() const;
  public:
  void clear_std_l();
  float std_l() const;
  void set_std_l(float value);
  private:
  float _internal_std_l() const;
  void _internal_set_std_l(float value);
  public:

  // optional float std_h = 4 [default = 1];
  bool has_std_h() const;
  private:
  bool _internal_has_std_h() const;
  public:
  void clear_std_h();
  float std_h() const;
  void set_std_h(float value);
  private:
  float _internal_std_h() const;
  void _internal_set_std_h(float value);
  public:

  // optional float std_w = 5 [default = 1];
  bool has_std_w() const;
  private:
  bool _internal_has_std_w() const;
  public:
  void clear_std_w();
  float std_w() const;
  void set_std_w(float value);
  private:
  float _internal_std_w() const;
  void _internal_set_std_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DimensionStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float mean_h_;
    float mean_w_;
    float mean_l_;
    float std_l_;
    float std_h_;
    float std_w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class YoloTargetParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.YoloTargetParameter) */ {
 public:
  inline YoloTargetParameter() : YoloTargetParameter(nullptr) {}
  ~YoloTargetParameter() override;
  explicit PROTOBUF_CONSTEXPR YoloTargetParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloTargetParameter(const YoloTargetParameter& from);
  YoloTargetParameter(YoloTargetParameter&& from) noexcept
    : YoloTargetParameter() {
    *this = ::std::move(from);
  }

  inline YoloTargetParameter& operator=(const YoloTargetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloTargetParameter& operator=(YoloTargetParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloTargetParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloTargetParameter* internal_default_instance() {
    return reinterpret_cast<const YoloTargetParameter*>(
               &_YoloTargetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(YoloTargetParameter& a, YoloTargetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloTargetParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloTargetParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloTargetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloTargetParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloTargetParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloTargetParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloTargetParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.YoloTargetParameter";
  }
  protected:
  explicit YoloTargetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionStatisticsFieldNumber = 11,
    kNumClassesFieldNumber = 10,
    kNegRoisRatioFieldNumber = 1,
    kIgnThresholdFieldNumber = 2,
    kNegThresholdFieldNumber = 3,
    kMinHeightFieldNumber = 4,
    kBiasMatchFieldNumber = 5,
    kRescoreFieldNumber = 6,
    kOriCycFieldNumber = 7,
    kObjWeightFieldNumber = 8,
    kNoobjWeightFieldNumber = 9,
  };
  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  int dimension_statistics_size() const;
  private:
  int _internal_dimension_statistics_size() const;
  public:
  void clear_dimension_statistics();
  ::apollo::perception::inference::DimensionStatistics* mutable_dimension_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >*
      mutable_dimension_statistics();
  private:
  const ::apollo::perception::inference::DimensionStatistics& _internal_dimension_statistics(int index) const;
  ::apollo::perception::inference::DimensionStatistics* _internal_add_dimension_statistics();
  public:
  const ::apollo::perception::inference::DimensionStatistics& dimension_statistics(int index) const;
  ::apollo::perception::inference::DimensionStatistics* add_dimension_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >&
      dimension_statistics() const;

  // optional int32 num_classes = 10 [default = 0];
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  int32_t num_classes() const;
  void set_num_classes(int32_t value);
  private:
  int32_t _internal_num_classes() const;
  void _internal_set_num_classes(int32_t value);
  public:

  // optional float neg_rois_ratio = 1 [default = 1];
  bool has_neg_rois_ratio() const;
  private:
  bool _internal_has_neg_rois_ratio() const;
  public:
  void clear_neg_rois_ratio();
  float neg_rois_ratio() const;
  void set_neg_rois_ratio(float value);
  private:
  float _internal_neg_rois_ratio() const;
  void _internal_set_neg_rois_ratio(float value);
  public:

  // optional float ign_threshold = 2 [default = 0.6];
  bool has_ign_threshold() const;
  private:
  bool _internal_has_ign_threshold() const;
  public:
  void clear_ign_threshold();
  float ign_threshold() const;
  void set_ign_threshold(float value);
  private:
  float _internal_ign_threshold() const;
  void _internal_set_ign_threshold(float value);
  public:

  // optional float neg_threshold = 3 [default = 0.1];
  bool has_neg_threshold() const;
  private:
  bool _internal_has_neg_threshold() const;
  public:
  void clear_neg_threshold();
  float neg_threshold() const;
  void set_neg_threshold(float value);
  private:
  float _internal_neg_threshold() const;
  void _internal_set_neg_threshold(float value);
  public:

  // optional float min_height = 4 [default = 0.05];
  bool has_min_height() const;
  private:
  bool _internal_has_min_height() const;
  public:
  void clear_min_height();
  float min_height() const;
  void set_min_height(float value);
  private:
  float _internal_min_height() const;
  void _internal_set_min_height(float value);
  public:

  // optional bool bias_match = 5 [default = true];
  bool has_bias_match() const;
  private:
  bool _internal_has_bias_match() const;
  public:
  void clear_bias_match();
  bool bias_match() const;
  void set_bias_match(bool value);
  private:
  bool _internal_bias_match() const;
  void _internal_set_bias_match(bool value);
  public:

  // optional bool rescore = 6 [default = true];
  bool has_rescore() const;
  private:
  bool _internal_has_rescore() const;
  public:
  void clear_rescore();
  bool rescore() const;
  void set_rescore(bool value);
  private:
  bool _internal_rescore() const;
  void _internal_set_rescore(bool value);
  public:

  // optional int32 ori_cyc = 7 [default = 1];
  bool has_ori_cyc() const;
  private:
  bool _internal_has_ori_cyc() const;
  public:
  void clear_ori_cyc();
  int32_t ori_cyc() const;
  void set_ori_cyc(int32_t value);
  private:
  int32_t _internal_ori_cyc() const;
  void _internal_set_ori_cyc(int32_t value);
  public:

  // optional float obj_weight = 8 [default = 10];
  bool has_obj_weight() const;
  private:
  bool _internal_has_obj_weight() const;
  public:
  void clear_obj_weight();
  float obj_weight() const;
  void set_obj_weight(float value);
  private:
  float _internal_obj_weight() const;
  void _internal_set_obj_weight(float value);
  public:

  // optional float noobj_weight = 9 [default = 1];
  bool has_noobj_weight() const;
  private:
  bool _internal_has_noobj_weight() const;
  public:
  void clear_noobj_weight();
  float noobj_weight() const;
  void set_noobj_weight(float value);
  private:
  float _internal_noobj_weight() const;
  void _internal_set_noobj_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloTargetParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics > dimension_statistics_;
    int32_t num_classes_;
    float neg_rois_ratio_;
    float ign_threshold_;
    float neg_threshold_;
    float min_height_;
    bool bias_match_;
    bool rescore_;
    int32_t ori_cyc_;
    float obj_weight_;
    float noobj_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class RegionProposalParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.RegionProposalParameter) */ {
 public:
  inline RegionProposalParameter() : RegionProposalParameter(nullptr) {}
  ~RegionProposalParameter() override;
  explicit PROTOBUF_CONSTEXPR RegionProposalParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionProposalParameter(const RegionProposalParameter& from);
  RegionProposalParameter(RegionProposalParameter&& from) noexcept
    : RegionProposalParameter() {
    *this = ::std::move(from);
  }

  inline RegionProposalParameter& operator=(const RegionProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionProposalParameter& operator=(RegionProposalParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionProposalParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionProposalParameter* internal_default_instance() {
    return reinterpret_cast<const RegionProposalParameter*>(
               &_RegionProposalParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RegionProposalParameter& a, RegionProposalParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionProposalParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionProposalParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionProposalParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionProposalParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionProposalParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegionProposalParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionProposalParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.RegionProposalParameter";
  }
  protected:
  explicit RegionProposalParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorboxFieldNumber = 1,
    kThresholdsFieldNumber = 2,
    kNmsParamFieldNumber = 15,
    kObjectScaleFieldNumber = 3,
    kNoobjectScaleFieldNumber = 4,
    kClassScaleFieldNumber = 5,
    kCoordScaleFieldNumber = 6,
    kJitterFieldNumber = 7,
    kBiasFieldNumber = 8,
    kNumClassesFieldNumber = 10,
    kRescoreFieldNumber = 9,
    kBiasMatchFieldNumber = 11,
    kThresholdFieldNumber = 12,
    kOrientationScaleFieldNumber = 14,
    kPosThresholdFieldNumber = 17,
    kNegThresholdFieldNumber = 18,
    kNegRatioFieldNumber = 19,
    kTrickyIterFieldNumber = 13,
    kKeepTopKFieldNumber = 16,
  };
  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  int anchorbox_size() const;
  private:
  int _internal_anchorbox_size() const;
  public:
  void clear_anchorbox();
  ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();
  private:
  const ::apollo::perception::inference::AnchorBox& _internal_anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* _internal_add_anchorbox();
  public:
  const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* add_anchorbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;

  // repeated float thresholds = 2;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  private:
  const ::apollo::perception::inference::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);
  ::apollo::perception::inference::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  // optional uint32 object_scale = 3;
  bool has_object_scale() const;
  private:
  bool _internal_has_object_scale() const;
  public:
  void clear_object_scale();
  uint32_t object_scale() const;
  void set_object_scale(uint32_t value);
  private:
  uint32_t _internal_object_scale() const;
  void _internal_set_object_scale(uint32_t value);
  public:

  // optional uint32 noobject_scale = 4;
  bool has_noobject_scale() const;
  private:
  bool _internal_has_noobject_scale() const;
  public:
  void clear_noobject_scale();
  uint32_t noobject_scale() const;
  void set_noobject_scale(uint32_t value);
  private:
  uint32_t _internal_noobject_scale() const;
  void _internal_set_noobject_scale(uint32_t value);
  public:

  // optional uint32 class_scale = 5;
  bool has_class_scale() const;
  private:
  bool _internal_has_class_scale() const;
  public:
  void clear_class_scale();
  uint32_t class_scale() const;
  void set_class_scale(uint32_t value);
  private:
  uint32_t _internal_class_scale() const;
  void _internal_set_class_scale(uint32_t value);
  public:

  // optional uint32 coord_scale = 6;
  bool has_coord_scale() const;
  private:
  bool _internal_has_coord_scale() const;
  public:
  void clear_coord_scale();
  uint32_t coord_scale() const;
  void set_coord_scale(uint32_t value);
  private:
  uint32_t _internal_coord_scale() const;
  void _internal_set_coord_scale(uint32_t value);
  public:

  // optional float jitter = 7;
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  float jitter() const;
  void set_jitter(float value);
  private:
  float _internal_jitter() const;
  void _internal_set_jitter(float value);
  public:

  // optional float bias = 8;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  float bias() const;
  void set_bias(float value);
  private:
  float _internal_bias() const;
  void _internal_set_bias(float value);
  public:

  // optional uint32 num_classes = 10;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional bool rescore = 9;
  bool has_rescore() const;
  private:
  bool _internal_has_rescore() const;
  public:
  void clear_rescore();
  bool rescore() const;
  void set_rescore(bool value);
  private:
  bool _internal_rescore() const;
  void _internal_set_rescore(bool value);
  public:

  // optional bool bias_match = 11;
  bool has_bias_match() const;
  private:
  bool _internal_has_bias_match() const;
  public:
  void clear_bias_match();
  bool bias_match() const;
  void set_bias_match(bool value);
  private:
  bool _internal_bias_match() const;
  void _internal_set_bias_match(bool value);
  public:

  // optional float threshold = 12;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // optional float orientation_scale = 14 [default = 0];
  bool has_orientation_scale() const;
  private:
  bool _internal_has_orientation_scale() const;
  public:
  void clear_orientation_scale();
  float orientation_scale() const;
  void set_orientation_scale(float value);
  private:
  float _internal_orientation_scale() const;
  void _internal_set_orientation_scale(float value);
  public:

  // optional float pos_threshold = 17;
  bool has_pos_threshold() const;
  private:
  bool _internal_has_pos_threshold() const;
  public:
  void clear_pos_threshold();
  float pos_threshold() const;
  void set_pos_threshold(float value);
  private:
  float _internal_pos_threshold() const;
  void _internal_set_pos_threshold(float value);
  public:

  // optional float neg_threshold = 18;
  bool has_neg_threshold() const;
  private:
  bool _internal_has_neg_threshold() const;
  public:
  void clear_neg_threshold();
  float neg_threshold() const;
  void set_neg_threshold(float value);
  private:
  float _internal_neg_threshold() const;
  void _internal_set_neg_threshold(float value);
  public:

  // optional int32 neg_ratio = 19 [default = 3];
  bool has_neg_ratio() const;
  private:
  bool _internal_has_neg_ratio() const;
  public:
  void clear_neg_ratio();
  int32_t neg_ratio() const;
  void set_neg_ratio(int32_t value);
  private:
  int32_t _internal_neg_ratio() const;
  void _internal_set_neg_ratio(int32_t value);
  public:

  // optional uint32 tricky_iter = 13 [default = 400];
  bool has_tricky_iter() const;
  private:
  bool _internal_has_tricky_iter() const;
  public:
  void clear_tricky_iter();
  uint32_t tricky_iter() const;
  void set_tricky_iter(uint32_t value);
  private:
  uint32_t _internal_tricky_iter() const;
  void _internal_set_tricky_iter(uint32_t value);
  public:

  // optional int32 keep_top_k = 16 [default = -1];
  bool has_keep_top_k() const;
  private:
  bool _internal_has_keep_top_k() const;
  public:
  void clear_keep_top_k();
  int32_t keep_top_k() const;
  void set_keep_top_k(int32_t value);
  private:
  int32_t _internal_keep_top_k() const;
  void _internal_set_keep_top_k(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionProposalParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
    uint32_t object_scale_;
    uint32_t noobject_scale_;
    uint32_t class_scale_;
    uint32_t coord_scale_;
    float jitter_;
    float bias_;
    uint32_t num_classes_;
    bool rescore_;
    bool bias_match_;
    float threshold_;
    float orientation_scale_;
    float pos_threshold_;
    float neg_threshold_;
    int32_t neg_ratio_;
    uint32_t tricky_iter_;
    int32_t keep_top_k_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class RegionParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.RegionParameter) */ {
 public:
  inline RegionParameter() : RegionParameter(nullptr) {}
  ~RegionParameter() override;
  explicit PROTOBUF_CONSTEXPR RegionParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionParameter(const RegionParameter& from);
  RegionParameter(RegionParameter&& from) noexcept
    : RegionParameter() {
    *this = ::std::move(from);
  }

  inline RegionParameter& operator=(const RegionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionParameter& operator=(RegionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionParameter* internal_default_instance() {
    return reinterpret_cast<const RegionParameter*>(
               &_RegionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RegionParameter& a, RegionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegionParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.RegionParameter";
  }
  protected:
  explicit RegionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorboxFieldNumber = 1,
    kThresholdsFieldNumber = 2,
    kOriEnableFieldNumber = 21,
    kAnchorfileFieldNumber = 22,
    kObjectScaleFieldNumber = 3,
    kNoobjectScaleFieldNumber = 4,
    kClassScaleFieldNumber = 5,
    kCoordScaleFieldNumber = 6,
    kJitterFieldNumber = 7,
    kBiasFieldNumber = 8,
    kNumClassesFieldNumber = 10,
    kThresholdFieldNumber = 12,
    kRescoreFieldNumber = 9,
    kBiasMatchFieldNumber = 11,
    kUseL1LossFieldNumber = 16,
    kUseTwiceSoftmaxFieldNumber = 17,
    kOrientationScaleFieldNumber = 14,
    kDimensionScaleFieldNumber = 15,
    kFrontScaleFieldNumber = 19,
    kRearScaleFieldNumber = 20,
    kIsAnchorNormalizedFieldNumber = 18,
    kUseSideBoxV2FieldNumber = 23,
    kUseSideBoxV3FieldNumber = 24,
    kTrickyIterFieldNumber = 13,
    kOriCycleFieldNumber = 25,
  };
  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  int anchorbox_size() const;
  private:
  int _internal_anchorbox_size() const;
  public:
  void clear_anchorbox();
  ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();
  private:
  const ::apollo::perception::inference::AnchorBox& _internal_anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* _internal_add_anchorbox();
  public:
  const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  ::apollo::perception::inference::AnchorBox* add_anchorbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;

  // repeated float thresholds = 2;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // repeated bool ori_enable = 21;
  int ori_enable_size() const;
  private:
  int _internal_ori_enable_size() const;
  public:
  void clear_ori_enable();
  private:
  bool _internal_ori_enable(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_ori_enable() const;
  void _internal_add_ori_enable(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_ori_enable();
  public:
  bool ori_enable(int index) const;
  void set_ori_enable(int index, bool value);
  void add_ori_enable(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      ori_enable() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_ori_enable();

  // optional string anchorfile = 22 [default = "anchor.txt"];
  bool has_anchorfile() const;
  private:
  bool _internal_has_anchorfile() const;
  public:
  void clear_anchorfile();
  const std::string& anchorfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anchorfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anchorfile();
  PROTOBUF_NODISCARD std::string* release_anchorfile();
  void set_allocated_anchorfile(std::string* anchorfile);
  private:
  const std::string& _internal_anchorfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anchorfile(const std::string& value);
  std::string* _internal_mutable_anchorfile();
  public:

  // optional uint32 object_scale = 3;
  bool has_object_scale() const;
  private:
  bool _internal_has_object_scale() const;
  public:
  void clear_object_scale();
  uint32_t object_scale() const;
  void set_object_scale(uint32_t value);
  private:
  uint32_t _internal_object_scale() const;
  void _internal_set_object_scale(uint32_t value);
  public:

  // optional uint32 noobject_scale = 4;
  bool has_noobject_scale() const;
  private:
  bool _internal_has_noobject_scale() const;
  public:
  void clear_noobject_scale();
  uint32_t noobject_scale() const;
  void set_noobject_scale(uint32_t value);
  private:
  uint32_t _internal_noobject_scale() const;
  void _internal_set_noobject_scale(uint32_t value);
  public:

  // optional float class_scale = 5;
  bool has_class_scale() const;
  private:
  bool _internal_has_class_scale() const;
  public:
  void clear_class_scale();
  float class_scale() const;
  void set_class_scale(float value);
  private:
  float _internal_class_scale() const;
  void _internal_set_class_scale(float value);
  public:

  // optional uint32 coord_scale = 6;
  bool has_coord_scale() const;
  private:
  bool _internal_has_coord_scale() const;
  public:
  void clear_coord_scale();
  uint32_t coord_scale() const;
  void set_coord_scale(uint32_t value);
  private:
  uint32_t _internal_coord_scale() const;
  void _internal_set_coord_scale(uint32_t value);
  public:

  // optional float jitter = 7;
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  float jitter() const;
  void set_jitter(float value);
  private:
  float _internal_jitter() const;
  void _internal_set_jitter(float value);
  public:

  // optional float bias = 8;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  float bias() const;
  void set_bias(float value);
  private:
  float _internal_bias() const;
  void _internal_set_bias(float value);
  public:

  // optional uint32 num_classes = 10;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  uint32_t num_classes() const;
  void set_num_classes(uint32_t value);
  private:
  uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(uint32_t value);
  public:

  // optional float threshold = 12;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // optional bool rescore = 9;
  bool has_rescore() const;
  private:
  bool _internal_has_rescore() const;
  public:
  void clear_rescore();
  bool rescore() const;
  void set_rescore(bool value);
  private:
  bool _internal_rescore() const;
  void _internal_set_rescore(bool value);
  public:

  // optional bool bias_match = 11;
  bool has_bias_match() const;
  private:
  bool _internal_has_bias_match() const;
  public:
  void clear_bias_match();
  bool bias_match() const;
  void set_bias_match(bool value);
  private:
  bool _internal_bias_match() const;
  void _internal_set_bias_match(bool value);
  public:

  // optional bool use_l1_loss = 16 [default = false];
  bool has_use_l1_loss() const;
  private:
  bool _internal_has_use_l1_loss() const;
  public:
  void clear_use_l1_loss();
  bool use_l1_loss() const;
  void set_use_l1_loss(bool value);
  private:
  bool _internal_use_l1_loss() const;
  void _internal_set_use_l1_loss(bool value);
  public:

  // optional bool use_twice_softmax = 17 [default = false];
  bool has_use_twice_softmax() const;
  private:
  bool _internal_has_use_twice_softmax() const;
  public:
  void clear_use_twice_softmax();
  bool use_twice_softmax() const;
  void set_use_twice_softmax(bool value);
  private:
  bool _internal_use_twice_softmax() const;
  void _internal_set_use_twice_softmax(bool value);
  public:

  // optional float orientation_scale = 14 [default = 0];
  bool has_orientation_scale() const;
  private:
  bool _internal_has_orientation_scale() const;
  public:
  void clear_orientation_scale();
  float orientation_scale() const;
  void set_orientation_scale(float value);
  private:
  float _internal_orientation_scale() const;
  void _internal_set_orientation_scale(float value);
  public:

  // optional float dimension_scale = 15 [default = 0];
  bool has_dimension_scale() const;
  private:
  bool _internal_has_dimension_scale() const;
  public:
  void clear_dimension_scale();
  float dimension_scale() const;
  void set_dimension_scale(float value);
  private:
  float _internal_dimension_scale() const;
  void _internal_set_dimension_scale(float value);
  public:

  // optional float front_scale = 19 [default = 0];
  bool has_front_scale() const;
  private:
  bool _internal_has_front_scale() const;
  public:
  void clear_front_scale();
  float front_scale() const;
  void set_front_scale(float value);
  private:
  float _internal_front_scale() const;
  void _internal_set_front_scale(float value);
  public:

  // optional float rear_scale = 20 [default = 0];
  bool has_rear_scale() const;
  private:
  bool _internal_has_rear_scale() const;
  public:
  void clear_rear_scale();
  float rear_scale() const;
  void set_rear_scale(float value);
  private:
  float _internal_rear_scale() const;
  void _internal_set_rear_scale(float value);
  public:

  // optional bool is_anchor_normalized = 18 [default = false];
  bool has_is_anchor_normalized() const;
  private:
  bool _internal_has_is_anchor_normalized() const;
  public:
  void clear_is_anchor_normalized();
  bool is_anchor_normalized() const;
  void set_is_anchor_normalized(bool value);
  private:
  bool _internal_is_anchor_normalized() const;
  void _internal_set_is_anchor_normalized(bool value);
  public:

  // optional bool use_side_box_v2 = 23 [default = false];
  bool has_use_side_box_v2() const;
  private:
  bool _internal_has_use_side_box_v2() const;
  public:
  void clear_use_side_box_v2();
  bool use_side_box_v2() const;
  void set_use_side_box_v2(bool value);
  private:
  bool _internal_use_side_box_v2() const;
  void _internal_set_use_side_box_v2(bool value);
  public:

  // optional bool use_side_box_v3 = 24 [default = false];
  bool has_use_side_box_v3() const;
  private:
  bool _internal_has_use_side_box_v3() const;
  public:
  void clear_use_side_box_v3();
  bool use_side_box_v3() const;
  void set_use_side_box_v3(bool value);
  private:
  bool _internal_use_side_box_v3() const;
  void _internal_set_use_side_box_v3(bool value);
  public:

  // optional uint32 tricky_iter = 13 [default = 400];
  bool has_tricky_iter() const;
  private:
  bool _internal_has_tricky_iter() const;
  public:
  void clear_tricky_iter();
  uint32_t tricky_iter() const;
  void set_tricky_iter(uint32_t value);
  private:
  uint32_t _internal_tricky_iter() const;
  void _internal_set_tricky_iter(uint32_t value);
  public:

  // optional int32 ori_cycle = 25 [default = 1];
  bool has_ori_cycle() const;
  private:
  bool _internal_has_ori_cycle() const;
  public:
  void clear_ori_cycle();
  int32_t ori_cycle() const;
  void set_ori_cycle(int32_t value);
  private:
  int32_t _internal_ori_cycle() const;
  void _internal_set_ori_cycle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > ori_enable_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_anchorfile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchorfile_;
    uint32_t object_scale_;
    uint32_t noobject_scale_;
    float class_scale_;
    uint32_t coord_scale_;
    float jitter_;
    float bias_;
    uint32_t num_classes_;
    float threshold_;
    bool rescore_;
    bool bias_match_;
    bool use_l1_loss_;
    bool use_twice_softmax_;
    float orientation_scale_;
    float dimension_scale_;
    float front_scale_;
    float rear_scale_;
    bool is_anchor_normalized_;
    bool use_side_box_v2_;
    bool use_side_box_v3_;
    uint32_t tricky_iter_;
    int32_t ori_cycle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class AnchorBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.AnchorBox) */ {
 public:
  inline AnchorBox() : AnchorBox(nullptr) {}
  ~AnchorBox() override;
  explicit PROTOBUF_CONSTEXPR AnchorBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorBox(const AnchorBox& from);
  AnchorBox(AnchorBox&& from) noexcept
    : AnchorBox() {
    *this = ::std::move(from);
  }

  inline AnchorBox& operator=(const AnchorBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorBox& operator=(AnchorBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchorBox* internal_default_instance() {
    return reinterpret_cast<const AnchorBox*>(
               &_AnchorBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(AnchorBox& a, AnchorBox& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnchorBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnchorBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchorBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnchorBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.AnchorBox";
  }
  protected:
  explicit AnchorBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // optional float w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // optional float h = 2;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnchorBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float w_;
    float h_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class ReorgParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.ReorgParameter) */ {
 public:
  inline ReorgParameter() : ReorgParameter(nullptr) {}
  ~ReorgParameter() override;
  explicit PROTOBUF_CONSTEXPR ReorgParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorgParameter(const ReorgParameter& from);
  ReorgParameter(ReorgParameter&& from) noexcept
    : ReorgParameter() {
    *this = ::std::move(from);
  }

  inline ReorgParameter& operator=(const ReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorgParameter& operator=(ReorgParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorgParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorgParameter* internal_default_instance() {
    return reinterpret_cast<const ReorgParameter*>(
               &_ReorgParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ReorgParameter& a, ReorgParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorgParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorgParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorgParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorgParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorgParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReorgParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorgParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.ReorgParameter";
  }
  protected:
  explicit ReorgParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrideFieldNumber = 1,
  };
  // optional uint32 stride = 1;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  uint32_t stride() const;
  void set_stride(uint32_t value);
  private:
  uint32_t _internal_stride() const;
  void _internal_set_stride(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReorgParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t stride_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class BBoxRegParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.BBoxRegParameter) */ {
 public:
  inline BBoxRegParameter() : BBoxRegParameter(nullptr) {}
  ~BBoxRegParameter() override;
  explicit PROTOBUF_CONSTEXPR BBoxRegParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBoxRegParameter(const BBoxRegParameter& from);
  BBoxRegParameter(BBoxRegParameter&& from) noexcept
    : BBoxRegParameter() {
    *this = ::std::move(from);
  }

  inline BBoxRegParameter& operator=(const BBoxRegParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBoxRegParameter& operator=(BBoxRegParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBoxRegParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBoxRegParameter* internal_default_instance() {
    return reinterpret_cast<const BBoxRegParameter*>(
               &_BBoxRegParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(BBoxRegParameter& a, BBoxRegParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BBoxRegParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBoxRegParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBoxRegParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBoxRegParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBoxRegParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBoxRegParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBoxRegParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.BBoxRegParameter";
  }
  protected:
  explicit BBoxRegParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxMeanFieldNumber = 1,
    kBboxStdFieldNumber = 2,
  };
  // repeated float bbox_mean = 1;
  int bbox_mean_size() const;
  private:
  int _internal_bbox_mean_size() const;
  public:
  void clear_bbox_mean();
  private:
  float _internal_bbox_mean(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bbox_mean() const;
  void _internal_add_bbox_mean(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bbox_mean();
  public:
  float bbox_mean(int index) const;
  void set_bbox_mean(int index, float value);
  void add_bbox_mean(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bbox_mean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bbox_mean();

  // repeated float bbox_std = 2;
  int bbox_std_size() const;
  private:
  int _internal_bbox_std_size() const;
  public:
  void clear_bbox_std();
  private:
  float _internal_bbox_std(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bbox_std() const;
  void _internal_add_bbox_std(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bbox_std();
  public:
  float bbox_std(int index) const;
  void set_bbox_std(int index, float value);
  void add_bbox_std(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bbox_std() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bbox_std();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BBoxRegParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bbox_mean_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bbox_std_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DFMBPSROIAlignParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DFMBPSROIAlignParameter) */ {
 public:
  inline DFMBPSROIAlignParameter() : DFMBPSROIAlignParameter(nullptr) {}
  ~DFMBPSROIAlignParameter() override;
  explicit PROTOBUF_CONSTEXPR DFMBPSROIAlignParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DFMBPSROIAlignParameter(const DFMBPSROIAlignParameter& from);
  DFMBPSROIAlignParameter(DFMBPSROIAlignParameter&& from) noexcept
    : DFMBPSROIAlignParameter() {
    *this = ::std::move(from);
  }

  inline DFMBPSROIAlignParameter& operator=(const DFMBPSROIAlignParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DFMBPSROIAlignParameter& operator=(DFMBPSROIAlignParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DFMBPSROIAlignParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DFMBPSROIAlignParameter* internal_default_instance() {
    return reinterpret_cast<const DFMBPSROIAlignParameter*>(
               &_DFMBPSROIAlignParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(DFMBPSROIAlignParameter& a, DFMBPSROIAlignParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DFMBPSROIAlignParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DFMBPSROIAlignParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DFMBPSROIAlignParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DFMBPSROIAlignParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DFMBPSROIAlignParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DFMBPSROIAlignParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DFMBPSROIAlignParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DFMBPSROIAlignParameter";
  }
  protected:
  explicit DFMBPSROIAlignParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeatMapAFieldNumber = 1,
    kOutputDimFieldNumber = 2,
    kGroupHeightFieldNumber = 3,
    kGroupWidthFieldNumber = 4,
    kPooledHeightFieldNumber = 5,
    kPooledWidthFieldNumber = 6,
    kPadRatioFieldNumber = 7,
    kSamplePerPartFieldNumber = 8,
    kTransStdFieldNumber = 9,
    kPartHeightFieldNumber = 10,
    kPartWidthFieldNumber = 11,
    kHeatMapBFieldNumber = 12,
  };
  // optional float heat_map_a = 1;
  bool has_heat_map_a() const;
  private:
  bool _internal_has_heat_map_a() const;
  public:
  void clear_heat_map_a();
  float heat_map_a() const;
  void set_heat_map_a(float value);
  private:
  float _internal_heat_map_a() const;
  void _internal_set_heat_map_a(float value);
  public:

  // optional int32 output_dim = 2;
  bool has_output_dim() const;
  private:
  bool _internal_has_output_dim() const;
  public:
  void clear_output_dim();
  int32_t output_dim() const;
  void set_output_dim(int32_t value);
  private:
  int32_t _internal_output_dim() const;
  void _internal_set_output_dim(int32_t value);
  public:

  // optional int32 group_height = 3;
  bool has_group_height() const;
  private:
  bool _internal_has_group_height() const;
  public:
  void clear_group_height();
  int32_t group_height() const;
  void set_group_height(int32_t value);
  private:
  int32_t _internal_group_height() const;
  void _internal_set_group_height(int32_t value);
  public:

  // optional int32 group_width = 4;
  bool has_group_width() const;
  private:
  bool _internal_has_group_width() const;
  public:
  void clear_group_width();
  int32_t group_width() const;
  void set_group_width(int32_t value);
  private:
  int32_t _internal_group_width() const;
  void _internal_set_group_width(int32_t value);
  public:

  // optional int32 pooled_height = 5;
  bool has_pooled_height() const;
  private:
  bool _internal_has_pooled_height() const;
  public:
  void clear_pooled_height();
  int32_t pooled_height() const;
  void set_pooled_height(int32_t value);
  private:
  int32_t _internal_pooled_height() const;
  void _internal_set_pooled_height(int32_t value);
  public:

  // optional int32 pooled_width = 6;
  bool has_pooled_width() const;
  private:
  bool _internal_has_pooled_width() const;
  public:
  void clear_pooled_width();
  int32_t pooled_width() const;
  void set_pooled_width(int32_t value);
  private:
  int32_t _internal_pooled_width() const;
  void _internal_set_pooled_width(int32_t value);
  public:

  // optional float pad_ratio = 7;
  bool has_pad_ratio() const;
  private:
  bool _internal_has_pad_ratio() const;
  public:
  void clear_pad_ratio();
  float pad_ratio() const;
  void set_pad_ratio(float value);
  private:
  float _internal_pad_ratio() const;
  void _internal_set_pad_ratio(float value);
  public:

  // optional int32 sample_per_part = 8;
  bool has_sample_per_part() const;
  private:
  bool _internal_has_sample_per_part() const;
  public:
  void clear_sample_per_part();
  int32_t sample_per_part() const;
  void set_sample_per_part(int32_t value);
  private:
  int32_t _internal_sample_per_part() const;
  void _internal_set_sample_per_part(int32_t value);
  public:

  // optional float trans_std = 9 [default = 0];
  bool has_trans_std() const;
  private:
  bool _internal_has_trans_std() const;
  public:
  void clear_trans_std();
  float trans_std() const;
  void set_trans_std(float value);
  private:
  float _internal_trans_std() const;
  void _internal_set_trans_std(float value);
  public:

  // optional int32 part_height = 10 [default = 0];
  bool has_part_height() const;
  private:
  bool _internal_has_part_height() const;
  public:
  void clear_part_height();
  int32_t part_height() const;
  void set_part_height(int32_t value);
  private:
  int32_t _internal_part_height() const;
  void _internal_set_part_height(int32_t value);
  public:

  // optional int32 part_width = 11 [default = 0];
  bool has_part_width() const;
  private:
  bool _internal_has_part_width() const;
  public:
  void clear_part_width();
  int32_t part_width() const;
  void set_part_width(int32_t value);
  private:
  int32_t _internal_part_width() const;
  void _internal_set_part_width(int32_t value);
  public:

  // optional float heat_map_b = 12 [default = 0];
  bool has_heat_map_b() const;
  private:
  bool _internal_has_heat_map_b() const;
  public:
  void clear_heat_map_b();
  float heat_map_b() const;
  void set_heat_map_b(float value);
  private:
  float _internal_heat_map_b() const;
  void _internal_set_heat_map_b(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DFMBPSROIAlignParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float heat_map_a_;
    int32_t output_dim_;
    int32_t group_height_;
    int32_t group_width_;
    int32_t pooled_height_;
    int32_t pooled_width_;
    float pad_ratio_;
    int32_t sample_per_part_;
    float trans_std_;
    int32_t part_height_;
    int32_t part_width_;
    float heat_map_b_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class DetectionOutputSSDParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.DetectionOutputSSDParameter) */ {
 public:
  inline DetectionOutputSSDParameter() : DetectionOutputSSDParameter(nullptr) {}
  ~DetectionOutputSSDParameter() override;
  explicit PROTOBUF_CONSTEXPR DetectionOutputSSDParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionOutputSSDParameter(const DetectionOutputSSDParameter& from);
  DetectionOutputSSDParameter(DetectionOutputSSDParameter&& from) noexcept
    : DetectionOutputSSDParameter() {
    *this = ::std::move(from);
  }

  inline DetectionOutputSSDParameter& operator=(const DetectionOutputSSDParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionOutputSSDParameter& operator=(DetectionOutputSSDParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionOutputSSDParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionOutputSSDParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputSSDParameter*>(
               &_DetectionOutputSSDParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(DetectionOutputSSDParameter& a, DetectionOutputSSDParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionOutputSSDParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionOutputSSDParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionOutputSSDParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionOutputSSDParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionOutputSSDParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectionOutputSSDParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionOutputSSDParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.DetectionOutputSSDParameter";
  }
  protected:
  explicit DetectionOutputSSDParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectionOutputSSDParameter_MIN_SIZE_MODE MIN_SIZE_MODE;
  static constexpr MIN_SIZE_MODE HEIGHT_AND_WIDTH =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_AND_WIDTH;
  static constexpr MIN_SIZE_MODE HEIGHT_OR_WIDTH =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_HEIGHT_OR_WIDTH;
  static inline bool MIN_SIZE_MODE_IsValid(int value) {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value);
  }
  static constexpr MIN_SIZE_MODE MIN_SIZE_MODE_MIN =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MIN;
  static constexpr MIN_SIZE_MODE MIN_SIZE_MODE_MAX =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_MAX;
  static constexpr int MIN_SIZE_MODE_ARRAYSIZE =
    DetectionOutputSSDParameter_MIN_SIZE_MODE_MIN_SIZE_MODE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MIN_SIZE_MODE_descriptor() {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
  }
  template<typename T>
  static inline const std::string& MIN_SIZE_MODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MIN_SIZE_MODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MIN_SIZE_MODE_Name.");
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_Name(enum_t_value);
  }
  static inline bool MIN_SIZE_MODE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MIN_SIZE_MODE* value) {
    return DetectionOutputSSDParameter_MIN_SIZE_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 12,
    kGenAnchorParamFieldNumber = 6,
    kNmsParamFieldNumber = 8,
    kHeatMapAFieldNumber = 1,
    kMinSizeModeFieldNumber = 4,
    kThresholdObjectnessFieldNumber = 5,
    kRefineOutOfMapBboxFieldNumber = 7,
    kRpnProposalOutputScoreFieldNumber = 10,
    kRegressAgnosticFieldNumber = 11,
    kNumClassFieldNumber = 9,
    kMinSizeHFieldNumber = 2,
    kMinSizeWFieldNumber = 3,
  };
  // repeated float threshold = 12;
  int threshold_size() const;
  private:
  int _internal_threshold_size() const;
  public:
  void clear_threshold();
  private:
  float _internal_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_threshold() const;
  void _internal_add_threshold(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_threshold();
  public:
  float threshold(int index) const;
  void set_threshold(int index, float value);
  void add_threshold(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_threshold();

  // optional .apollo.perception.inference.GenAnchorParameter gen_anchor_param = 6;
  bool has_gen_anchor_param() const;
  private:
  bool _internal_has_gen_anchor_param() const;
  public:
  void clear_gen_anchor_param();
  const ::apollo::perception::inference::GenAnchorParameter& gen_anchor_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::GenAnchorParameter* release_gen_anchor_param();
  ::apollo::perception::inference::GenAnchorParameter* mutable_gen_anchor_param();
  void set_allocated_gen_anchor_param(::apollo::perception::inference::GenAnchorParameter* gen_anchor_param);
  private:
  const ::apollo::perception::inference::GenAnchorParameter& _internal_gen_anchor_param() const;
  ::apollo::perception::inference::GenAnchorParameter* _internal_mutable_gen_anchor_param();
  public:
  void unsafe_arena_set_allocated_gen_anchor_param(
      ::apollo::perception::inference::GenAnchorParameter* gen_anchor_param);
  ::apollo::perception::inference::GenAnchorParameter* unsafe_arena_release_gen_anchor_param();

  // optional .apollo.perception.inference.NMSSSDParameter nms_param = 8;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::inference::NMSSSDParameter& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::inference::NMSSSDParameter* release_nms_param();
  ::apollo::perception::inference::NMSSSDParameter* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::inference::NMSSSDParameter* nms_param);
  private:
  const ::apollo::perception::inference::NMSSSDParameter& _internal_nms_param() const;
  ::apollo::perception::inference::NMSSSDParameter* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::inference::NMSSSDParameter* nms_param);
  ::apollo::perception::inference::NMSSSDParameter* unsafe_arena_release_nms_param();

  // optional float heat_map_a = 1;
  bool has_heat_map_a() const;
  private:
  bool _internal_has_heat_map_a() const;
  public:
  void clear_heat_map_a();
  float heat_map_a() const;
  void set_heat_map_a(float value);
  private:
  float _internal_heat_map_a() const;
  void _internal_set_heat_map_a(float value);
  public:

  // optional .apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 4 [default = HEIGHT_AND_WIDTH];
  bool has_min_size_mode() const;
  private:
  bool _internal_has_min_size_mode() const;
  public:
  void clear_min_size_mode();
  ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE min_size_mode() const;
  void set_min_size_mode(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE value);
  private:
  ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE _internal_min_size_mode() const;
  void _internal_set_min_size_mode(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE value);
  public:

  // optional float threshold_objectness = 5 [default = 0];
  bool has_threshold_objectness() const;
  private:
  bool _internal_has_threshold_objectness() const;
  public:
  void clear_threshold_objectness();
  float threshold_objectness() const;
  void set_threshold_objectness(float value);
  private:
  float _internal_threshold_objectness() const;
  void _internal_set_threshold_objectness(float value);
  public:

  // optional bool refine_out_of_map_bbox = 7 [default = false];
  bool has_refine_out_of_map_bbox() const;
  private:
  bool _internal_has_refine_out_of_map_bbox() const;
  public:
  void clear_refine_out_of_map_bbox();
  bool refine_out_of_map_bbox() const;
  void set_refine_out_of_map_bbox(bool value);
  private:
  bool _internal_refine_out_of_map_bbox() const;
  void _internal_set_refine_out_of_map_bbox(bool value);
  public:

  // optional bool rpn_proposal_output_score = 10 [default = false];
  bool has_rpn_proposal_output_score() const;
  private:
  bool _internal_has_rpn_proposal_output_score() const;
  public:
  void clear_rpn_proposal_output_score();
  bool rpn_proposal_output_score() const;
  void set_rpn_proposal_output_score(bool value);
  private:
  bool _internal_rpn_proposal_output_score() const;
  void _internal_set_rpn_proposal_output_score(bool value);
  public:

  // optional bool regress_agnostic = 11;
  bool has_regress_agnostic() const;
  private:
  bool _internal_has_regress_agnostic() const;
  public:
  void clear_regress_agnostic();
  bool regress_agnostic() const;
  void set_regress_agnostic(bool value);
  private:
  bool _internal_regress_agnostic() const;
  void _internal_set_regress_agnostic(bool value);
  public:

  // optional uint32 num_class = 9 [default = 1];
  bool has_num_class() const;
  private:
  bool _internal_has_num_class() const;
  public:
  void clear_num_class();
  uint32_t num_class() const;
  void set_num_class(uint32_t value);
  private:
  uint32_t _internal_num_class() const;
  void _internal_set_num_class(uint32_t value);
  public:

  // optional float min_size_h = 2 [default = 2];
  bool has_min_size_h() const;
  private:
  bool _internal_has_min_size_h() const;
  public:
  void clear_min_size_h();
  float min_size_h() const;
  void set_min_size_h(float value);
  private:
  float _internal_min_size_h() const;
  void _internal_set_min_size_h(float value);
  public:

  // optional float min_size_w = 3 [default = 2];
  bool has_min_size_w() const;
  private:
  bool _internal_has_min_size_w() const;
  public:
  void clear_min_size_w();
  float min_size_w() const;
  void set_min_size_w(float value);
  private:
  float _internal_min_size_w() const;
  void _internal_set_min_size_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DetectionOutputSSDParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > threshold_;
    ::apollo::perception::inference::GenAnchorParameter* gen_anchor_param_;
    ::apollo::perception::inference::NMSSSDParameter* nms_param_;
    float heat_map_a_;
    int min_size_mode_;
    float threshold_objectness_;
    bool refine_out_of_map_bbox_;
    bool rpn_proposal_output_score_;
    bool regress_agnostic_;
    uint32_t num_class_;
    float min_size_h_;
    float min_size_w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class NMSSSDParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.NMSSSDParameter) */ {
 public:
  inline NMSSSDParameter() : NMSSSDParameter(nullptr) {}
  ~NMSSSDParameter() override;
  explicit PROTOBUF_CONSTEXPR NMSSSDParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NMSSSDParameter(const NMSSSDParameter& from);
  NMSSSDParameter(NMSSSDParameter&& from) noexcept
    : NMSSSDParameter() {
    *this = ::std::move(from);
  }

  inline NMSSSDParameter& operator=(const NMSSSDParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NMSSSDParameter& operator=(NMSSSDParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NMSSSDParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NMSSSDParameter* internal_default_instance() {
    return reinterpret_cast<const NMSSSDParameter*>(
               &_NMSSSDParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(NMSSSDParameter& a, NMSSSDParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NMSSSDParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NMSSSDParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NMSSSDParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NMSSSDParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NMSSSDParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NMSSSDParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NMSSSDParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.NMSSSDParameter";
  }
  protected:
  explicit NMSSSDParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlapRatioFieldNumber = 2,
    kTopNFieldNumber = 3,
    kMaxCandidateNFieldNumber = 5,
    kUseSoftNmsFieldNumber = 6,
    kVotingFieldNumber = 8,
    kVoteIouFieldNumber = 9,
    kAddScoreFieldNumber = 4,
    kNmsAmongClassesFieldNumber = 7,
    kForceImparityIouThrFieldNumber = 11,
    kNmsGpuMaxNPerTimeFieldNumber = 12,
    kNeedNmsFieldNumber = 1,
    kForceIdentityIouThrFieldNumber = 10,
  };
  // repeated float overlap_ratio = 2;
  int overlap_ratio_size() const;
  private:
  int _internal_overlap_ratio_size() const;
  public:
  void clear_overlap_ratio();
  private:
  float _internal_overlap_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_overlap_ratio() const;
  void _internal_add_overlap_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_overlap_ratio();
  public:
  float overlap_ratio(int index) const;
  void set_overlap_ratio(int index, float value);
  void add_overlap_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      overlap_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_overlap_ratio();

  // repeated uint32 top_n = 3;
  int top_n_size() const;
  private:
  int _internal_top_n_size() const;
  public:
  void clear_top_n();
  private:
  uint32_t _internal_top_n(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_top_n() const;
  void _internal_add_top_n(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_top_n();
  public:
  uint32_t top_n(int index) const;
  void set_top_n(int index, uint32_t value);
  void add_top_n(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      top_n() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_top_n();

  // repeated int32 max_candidate_n = 5;
  int max_candidate_n_size() const;
  private:
  int _internal_max_candidate_n_size() const;
  public:
  void clear_max_candidate_n();
  private:
  int32_t _internal_max_candidate_n(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_max_candidate_n() const;
  void _internal_add_max_candidate_n(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_max_candidate_n();
  public:
  int32_t max_candidate_n(int index) const;
  void set_max_candidate_n(int index, int32_t value);
  void add_max_candidate_n(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      max_candidate_n() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_max_candidate_n();

  // repeated bool use_soft_nms = 6;
  int use_soft_nms_size() const;
  private:
  int _internal_use_soft_nms_size() const;
  public:
  void clear_use_soft_nms();
  private:
  bool _internal_use_soft_nms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_use_soft_nms() const;
  void _internal_add_use_soft_nms(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_use_soft_nms();
  public:
  bool use_soft_nms(int index) const;
  void set_use_soft_nms(int index, bool value);
  void add_use_soft_nms(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      use_soft_nms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_use_soft_nms();

  // repeated bool voting = 8;
  int voting_size() const;
  private:
  int _internal_voting_size() const;
  public:
  void clear_voting();
  private:
  bool _internal_voting(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_voting() const;
  void _internal_add_voting(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_voting();
  public:
  bool voting(int index) const;
  void set_voting(int index, bool value);
  void add_voting(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      voting() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_voting();

  // repeated float vote_iou = 9;
  int vote_iou_size() const;
  private:
  int _internal_vote_iou_size() const;
  public:
  void clear_vote_iou();
  private:
  float _internal_vote_iou(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vote_iou() const;
  void _internal_add_vote_iou(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vote_iou();
  public:
  float vote_iou(int index) const;
  void set_vote_iou(int index, float value);
  void add_vote_iou(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vote_iou() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vote_iou();

  // optional bool add_score = 4 [default = false];
  bool has_add_score() const;
  private:
  bool _internal_has_add_score() const;
  public:
  void clear_add_score();
  bool add_score() const;
  void set_add_score(bool value);
  private:
  bool _internal_add_score() const;
  void _internal_set_add_score(bool value);
  public:

  // optional bool nms_among_classes = 7 [default = false];
  bool has_nms_among_classes() const;
  private:
  bool _internal_has_nms_among_classes() const;
  public:
  void clear_nms_among_classes();
  bool nms_among_classes() const;
  void set_nms_among_classes(bool value);
  private:
  bool _internal_nms_among_classes() const;
  void _internal_set_nms_among_classes(bool value);
  public:

  // optional float force_imparity_iou_thr = 11 [default = 0];
  bool has_force_imparity_iou_thr() const;
  private:
  bool _internal_has_force_imparity_iou_thr() const;
  public:
  void clear_force_imparity_iou_thr();
  float force_imparity_iou_thr() const;
  void set_force_imparity_iou_thr(float value);
  private:
  float _internal_force_imparity_iou_thr() const;
  void _internal_set_force_imparity_iou_thr(float value);
  public:

  // optional int32 nms_gpu_max_n_per_time = 12 [default = -1];
  bool has_nms_gpu_max_n_per_time() const;
  private:
  bool _internal_has_nms_gpu_max_n_per_time() const;
  public:
  void clear_nms_gpu_max_n_per_time();
  int32_t nms_gpu_max_n_per_time() const;
  void set_nms_gpu_max_n_per_time(int32_t value);
  private:
  int32_t _internal_nms_gpu_max_n_per_time() const;
  void _internal_set_nms_gpu_max_n_per_time(int32_t value);
  public:

  // optional bool need_nms = 1 [default = true];
  bool has_need_nms() const;
  private:
  bool _internal_has_need_nms() const;
  public:
  void clear_need_nms();
  bool need_nms() const;
  void set_need_nms(bool value);
  private:
  bool _internal_need_nms() const;
  void _internal_set_need_nms(bool value);
  public:

  // optional float force_identity_iou_thr = 10 [default = 1];
  bool has_force_identity_iou_thr() const;
  private:
  bool _internal_has_force_identity_iou_thr() const;
  public:
  void clear_force_identity_iou_thr();
  float force_identity_iou_thr() const;
  void set_force_identity_iou_thr(float value);
  private:
  float _internal_force_identity_iou_thr() const;
  void _internal_set_force_identity_iou_thr(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NMSSSDParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > overlap_ratio_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > top_n_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > max_candidate_n_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > use_soft_nms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > voting_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vote_iou_;
    bool add_score_;
    bool nms_among_classes_;
    float force_imparity_iou_thr_;
    int32_t nms_gpu_max_n_per_time_;
    bool need_nms_;
    float force_identity_iou_thr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// -------------------------------------------------------------------

class GenAnchorParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.inference.GenAnchorParameter) */ {
 public:
  inline GenAnchorParameter() : GenAnchorParameter(nullptr) {}
  ~GenAnchorParameter() override;
  explicit PROTOBUF_CONSTEXPR GenAnchorParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenAnchorParameter(const GenAnchorParameter& from);
  GenAnchorParameter(GenAnchorParameter&& from) noexcept
    : GenAnchorParameter() {
    *this = ::std::move(from);
  }

  inline GenAnchorParameter& operator=(const GenAnchorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenAnchorParameter& operator=(GenAnchorParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenAnchorParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenAnchorParameter* internal_default_instance() {
    return reinterpret_cast<const GenAnchorParameter*>(
               &_GenAnchorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GenAnchorParameter& a, GenAnchorParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(GenAnchorParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenAnchorParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenAnchorParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenAnchorParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenAnchorParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenAnchorParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenAnchorParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.inference.GenAnchorParameter";
  }
  protected:
  explicit GenAnchorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorWidthFieldNumber = 1,
    kAnchorHeightFieldNumber = 2,
  };
  // repeated float anchor_width = 1;
  int anchor_width_size() const;
  private:
  int _internal_anchor_width_size() const;
  public:
  void clear_anchor_width();
  private:
  float _internal_anchor_width(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_width() const;
  void _internal_add_anchor_width(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_width();
  public:
  float anchor_width(int index) const;
  void set_anchor_width(int index, float value);
  void add_anchor_width(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_width() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_width();

  // repeated float anchor_height = 2;
  int anchor_height_size() const;
  private:
  int _internal_anchor_height_size() const;
  public:
  void clear_anchor_height();
  private:
  float _internal_anchor_height(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_height() const;
  void _internal_add_anchor_height(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_height();
  public:
  float anchor_height(int index) const;
  void set_anchor_height(int index, float value);
  void add_anchor_height(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_height() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_height();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.GenAnchorParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_width_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2frt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::_internal_dim_size() const {
  return _impl_.dim_.size();
}
inline int BlobShape::dim_size() const {
  return _internal_dim_size();
}
inline void BlobShape::clear_dim() {
  _impl_.dim_.Clear();
}
inline int64_t BlobShape::_internal_dim(int index) const {
  return _impl_.dim_.Get(index);
}
inline int64_t BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobShape.dim)
  return _internal_dim(index);
}
inline void BlobShape::set_dim(int index, int64_t value) {
  _impl_.dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobShape.dim)
}
inline void BlobShape::_internal_add_dim(int64_t value) {
  _impl_.dim_.Add(value);
}
inline void BlobShape::add_dim(int64_t value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobShape.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BlobShape::_internal_dim() const {
  return _impl_.dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobShape.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BlobShape::_internal_mutable_dim() {
  return &_impl_.dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobShape.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// BlobProto

// optional .apollo.perception.inference.BlobShape shape = 7;
inline bool BlobProto::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline bool BlobProto::has_shape() const {
  return _internal_has_shape();
}
inline void BlobProto::clear_shape() {
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::BlobShape& BlobProto::_internal_shape() const {
  const ::apollo::perception::inference::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BlobShape&>(
      ::apollo::perception::inference::_BlobShape_default_instance_);
}
inline const ::apollo::perception::inference::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.shape)
  return _internal_shape();
}
inline void BlobProto::unsafe_arena_set_allocated_shape(
    ::apollo::perception::inference::BlobShape* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = shape;
  if (shape) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.BlobProto.shape)
}
inline ::apollo::perception::inference::BlobShape* BlobProto::release_shape() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BlobShape* BlobProto::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.BlobProto.shape)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BlobShape* BlobProto::_internal_mutable_shape() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BlobShape>(GetArenaForAllocation());
    _impl_.shape_ = p;
  }
  return _impl_.shape_;
}
inline ::apollo::perception::inference::BlobShape* BlobProto::mutable_shape() {
  ::apollo::perception::inference::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BlobProto.shape)
  return _msg;
}
inline void BlobProto::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int BlobProto::data_size() const {
  return _internal_data_size();
}
inline void BlobProto::clear_data() {
  _impl_.data_.Clear();
}
inline float BlobProto::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.data)
  return _internal_data(index);
}
inline void BlobProto::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.data)
}
inline void BlobProto::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void BlobProto::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.data)
  return _internal_mutable_data();
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::_internal_diff_size() const {
  return _impl_.diff_.size();
}
inline int BlobProto::diff_size() const {
  return _internal_diff_size();
}
inline void BlobProto::clear_diff() {
  _impl_.diff_.Clear();
}
inline float BlobProto::_internal_diff(int index) const {
  return _impl_.diff_.Get(index);
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.diff)
  return _internal_diff(index);
}
inline void BlobProto::set_diff(int index, float value) {
  _impl_.diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.diff)
}
inline void BlobProto::_internal_add_diff(float value) {
  _impl_.diff_.Add(value);
}
inline void BlobProto::add_diff(float value) {
  _internal_add_diff(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::_internal_diff() const {
  return _impl_.diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.diff)
  return _internal_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::_internal_mutable_diff() {
  return &_impl_.diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.diff)
  return _internal_mutable_diff();
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::_internal_double_data_size() const {
  return _impl_.double_data_.size();
}
inline int BlobProto::double_data_size() const {
  return _internal_double_data_size();
}
inline void BlobProto::clear_double_data() {
  _impl_.double_data_.Clear();
}
inline double BlobProto::_internal_double_data(int index) const {
  return _impl_.double_data_.Get(index);
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.double_data)
  return _internal_double_data(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  _impl_.double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.double_data)
}
inline void BlobProto::_internal_add_double_data(double value) {
  _impl_.double_data_.Add(value);
}
inline void BlobProto::add_double_data(double value) {
  _internal_add_double_data(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.double_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::_internal_double_data() const {
  return _impl_.double_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.double_data)
  return _internal_double_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::_internal_mutable_double_data() {
  return &_impl_.double_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.double_data)
  return _internal_mutable_double_data();
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::_internal_double_diff_size() const {
  return _impl_.double_diff_.size();
}
inline int BlobProto::double_diff_size() const {
  return _internal_double_diff_size();
}
inline void BlobProto::clear_double_diff() {
  _impl_.double_diff_.Clear();
}
inline double BlobProto::_internal_double_diff(int index) const {
  return _impl_.double_diff_.Get(index);
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.double_diff)
  return _internal_double_diff(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  _impl_.double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.double_diff)
}
inline void BlobProto::_internal_add_double_diff(double value) {
  _impl_.double_diff_.Add(value);
}
inline void BlobProto::add_double_diff(double value) {
  _internal_add_double_diff(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.double_diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::_internal_double_diff() const {
  return _impl_.double_diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.double_diff)
  return _internal_double_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::_internal_mutable_double_diff() {
  return &_impl_.double_diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.double_diff)
  return _internal_mutable_double_diff();
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::_internal_has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlobProto::has_num() const {
  return _internal_has_num();
}
inline void BlobProto::clear_num() {
  _impl_.num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BlobProto::_internal_num() const {
  return _impl_.num_;
}
inline int32_t BlobProto::num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.num)
  return _internal_num();
}
inline void BlobProto::_internal_set_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_ = value;
}
inline void BlobProto::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlobProto::has_channels() const {
  return _internal_has_channels();
}
inline void BlobProto::clear_channels() {
  _impl_.channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t BlobProto::_internal_channels() const {
  return _impl_.channels_;
}
inline int32_t BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.channels)
  return _internal_channels();
}
inline void BlobProto::_internal_set_channels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channels_ = value;
}
inline void BlobProto::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlobProto::has_height() const {
  return _internal_has_height();
}
inline void BlobProto::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t BlobProto::_internal_height() const {
  return _impl_.height_;
}
inline int32_t BlobProto::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.height)
  return _internal_height();
}
inline void BlobProto::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_ = value;
}
inline void BlobProto::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlobProto::has_width() const {
  return _internal_has_width();
}
inline void BlobProto::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t BlobProto::_internal_width() const {
  return _impl_.width_;
}
inline int32_t BlobProto::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.width)
  return _internal_width();
}
inline void BlobProto::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.width_ = value;
}
inline void BlobProto::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.width)
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Datum::has_channels() const {
  return _internal_has_channels();
}
inline void Datum::clear_channels() {
  _impl_.channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Datum::_internal_channels() const {
  return _impl_.channels_;
}
inline int32_t Datum::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.channels)
  return _internal_channels();
}
inline void Datum::_internal_set_channels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channels_ = value;
}
inline void Datum::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Datum::has_height() const {
  return _internal_has_height();
}
inline void Datum::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Datum::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Datum::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.height)
  return _internal_height();
}
inline void Datum::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}
inline void Datum::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Datum::has_width() const {
  return _internal_has_width();
}
inline void Datum::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Datum::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Datum::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.width)
  return _internal_width();
}
inline void Datum::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}
inline void Datum::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Datum::has_data() const {
  return _internal_has_data();
}
inline void Datum::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Datum::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.data)
}
inline std::string* Datum::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Datum.data)
  return _s;
}
inline const std::string& Datum::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Datum::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Datum::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.Datum.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Datum::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Datum::has_label() const {
  return _internal_has_label();
}
inline void Datum::clear_label() {
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Datum::_internal_label() const {
  return _impl_.label_;
}
inline int32_t Datum::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.label)
  return _internal_label();
}
inline void Datum::_internal_set_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.label_ = value;
}
inline void Datum::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::_internal_float_data_size() const {
  return _impl_.float_data_.size();
}
inline int Datum::float_data_size() const {
  return _internal_float_data_size();
}
inline void Datum::clear_float_data() {
  _impl_.float_data_.Clear();
}
inline float Datum::_internal_float_data(int index) const {
  return _impl_.float_data_.Get(index);
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.float_data)
  return _internal_float_data(index);
}
inline void Datum::set_float_data(int index, float value) {
  _impl_.float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.float_data)
}
inline void Datum::_internal_add_float_data(float value) {
  _impl_.float_data_.Add(value);
}
inline void Datum::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.Datum.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::_internal_float_data() const {
  return _impl_.float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.Datum.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::_internal_mutable_float_data() {
  return &_impl_.float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.Datum.float_data)
  return _internal_mutable_float_data();
}

// optional bool encoded = 7 [default = false];
inline bool Datum::_internal_has_encoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Datum::has_encoded() const {
  return _internal_has_encoded();
}
inline void Datum::clear_encoded() {
  _impl_.encoded_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Datum::_internal_encoded() const {
  return _impl_.encoded_;
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.encoded)
  return _internal_encoded();
}
inline void Datum::_internal_set_encoded(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.encoded_ = value;
}
inline void Datum::set_encoded(bool value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.encoded)
}

// -------------------------------------------------------------------

// LabelMapItem

// optional string name = 1;
inline bool LabelMapItem::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LabelMapItem::has_name() const {
  return _internal_has_name();
}
inline void LabelMapItem::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LabelMapItem::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.name)
}
inline std::string* LabelMapItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMapItem.name)
  return _s;
}
inline const std::string& LabelMapItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LabelMapItem::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LabelMapItem::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LabelMapItem::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LabelMapItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LabelMapItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LabelMapItem.name)
}

// optional int32 label = 2;
inline bool LabelMapItem::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LabelMapItem::has_label() const {
  return _internal_has_label();
}
inline void LabelMapItem::clear_label() {
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t LabelMapItem::_internal_label() const {
  return _impl_.label_;
}
inline int32_t LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.label)
  return _internal_label();
}
inline void LabelMapItem::_internal_set_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_ = value;
}
inline void LabelMapItem::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.label)
}

// optional string display_name = 3;
inline bool LabelMapItem::_internal_has_display_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LabelMapItem::has_display_name() const {
  return _internal_has_display_name();
}
inline void LabelMapItem::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LabelMapItem::set_display_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.display_name)
}
inline std::string* LabelMapItem::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMapItem.display_name)
  return _s;
}
inline const std::string& LabelMapItem::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void LabelMapItem::_internal_set_display_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LabelMapItem::_internal_mutable_display_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LabelMapItem::release_display_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LabelMapItem.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LabelMapItem::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LabelMapItem.display_name)
}

// -------------------------------------------------------------------

// LabelMap

// repeated .apollo.perception.inference.LabelMapItem item = 1;
inline int LabelMap::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int LabelMap::item_size() const {
  return _internal_item_size();
}
inline void LabelMap::clear_item() {
  _impl_.item_.Clear();
}
inline ::apollo::perception::inference::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMap.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LabelMap.item)
  return &_impl_.item_;
}
inline const ::apollo::perception::inference::LabelMapItem& LabelMap::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::apollo::perception::inference::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMap.item)
  return _internal_item(index);
}
inline ::apollo::perception::inference::LabelMapItem* LabelMap::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::apollo::perception::inference::LabelMapItem* LabelMap::add_item() {
  ::apollo::perception::inference::LabelMapItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LabelMap.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LabelMap.item)
  return _impl_.item_;
}

// -------------------------------------------------------------------

// Sampler

// optional float min_scale = 1 [default = 1];
inline bool Sampler::_internal_has_min_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sampler::has_min_scale() const {
  return _internal_has_min_scale();
}
inline void Sampler::clear_min_scale() {
  _impl_.min_scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Sampler::_internal_min_scale() const {
  return _impl_.min_scale_;
}
inline float Sampler::min_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.min_scale)
  return _internal_min_scale();
}
inline void Sampler::_internal_set_min_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_scale_ = value;
}
inline void Sampler::set_min_scale(float value) {
  _internal_set_min_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.min_scale)
}

// optional float max_scale = 2 [default = 1];
inline bool Sampler::_internal_has_max_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sampler::has_max_scale() const {
  return _internal_has_max_scale();
}
inline void Sampler::clear_max_scale() {
  _impl_.max_scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Sampler::_internal_max_scale() const {
  return _impl_.max_scale_;
}
inline float Sampler::max_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.max_scale)
  return _internal_max_scale();
}
inline void Sampler::_internal_set_max_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_scale_ = value;
}
inline void Sampler::set_max_scale(float value) {
  _internal_set_max_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.max_scale)
}

// optional float min_aspect_ratio = 3 [default = 1];
inline bool Sampler::_internal_has_min_aspect_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sampler::has_min_aspect_ratio() const {
  return _internal_has_min_aspect_ratio();
}
inline void Sampler::clear_min_aspect_ratio() {
  _impl_.min_aspect_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Sampler::_internal_min_aspect_ratio() const {
  return _impl_.min_aspect_ratio_;
}
inline float Sampler::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.min_aspect_ratio)
  return _internal_min_aspect_ratio();
}
inline void Sampler::_internal_set_min_aspect_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_aspect_ratio_ = value;
}
inline void Sampler::set_min_aspect_ratio(float value) {
  _internal_set_min_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.min_aspect_ratio)
}

// optional float max_aspect_ratio = 4 [default = 1];
inline bool Sampler::_internal_has_max_aspect_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sampler::has_max_aspect_ratio() const {
  return _internal_has_max_aspect_ratio();
}
inline void Sampler::clear_max_aspect_ratio() {
  _impl_.max_aspect_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Sampler::_internal_max_aspect_ratio() const {
  return _impl_.max_aspect_ratio_;
}
inline float Sampler::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.max_aspect_ratio)
  return _internal_max_aspect_ratio();
}
inline void Sampler::_internal_set_max_aspect_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_aspect_ratio_ = value;
}
inline void Sampler::set_max_aspect_ratio(float value) {
  _internal_set_max_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.max_aspect_ratio)
}

// -------------------------------------------------------------------

// SampleConstraint

// optional float min_jaccard_overlap = 1;
inline bool SampleConstraint::_internal_has_min_jaccard_overlap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SampleConstraint::has_min_jaccard_overlap() const {
  return _internal_has_min_jaccard_overlap();
}
inline void SampleConstraint::clear_min_jaccard_overlap() {
  _impl_.min_jaccard_overlap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SampleConstraint::_internal_min_jaccard_overlap() const {
  return _impl_.min_jaccard_overlap_;
}
inline float SampleConstraint::min_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_jaccard_overlap)
  return _internal_min_jaccard_overlap();
}
inline void SampleConstraint::_internal_set_min_jaccard_overlap(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_jaccard_overlap_ = value;
}
inline void SampleConstraint::set_min_jaccard_overlap(float value) {
  _internal_set_min_jaccard_overlap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_jaccard_overlap)
}

// optional float max_jaccard_overlap = 2;
inline bool SampleConstraint::_internal_has_max_jaccard_overlap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SampleConstraint::has_max_jaccard_overlap() const {
  return _internal_has_max_jaccard_overlap();
}
inline void SampleConstraint::clear_max_jaccard_overlap() {
  _impl_.max_jaccard_overlap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SampleConstraint::_internal_max_jaccard_overlap() const {
  return _impl_.max_jaccard_overlap_;
}
inline float SampleConstraint::max_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_jaccard_overlap)
  return _internal_max_jaccard_overlap();
}
inline void SampleConstraint::_internal_set_max_jaccard_overlap(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_jaccard_overlap_ = value;
}
inline void SampleConstraint::set_max_jaccard_overlap(float value) {
  _internal_set_max_jaccard_overlap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_jaccard_overlap)
}

// optional float min_sample_coverage = 3;
inline bool SampleConstraint::_internal_has_min_sample_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SampleConstraint::has_min_sample_coverage() const {
  return _internal_has_min_sample_coverage();
}
inline void SampleConstraint::clear_min_sample_coverage() {
  _impl_.min_sample_coverage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SampleConstraint::_internal_min_sample_coverage() const {
  return _impl_.min_sample_coverage_;
}
inline float SampleConstraint::min_sample_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_sample_coverage)
  return _internal_min_sample_coverage();
}
inline void SampleConstraint::_internal_set_min_sample_coverage(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_sample_coverage_ = value;
}
inline void SampleConstraint::set_min_sample_coverage(float value) {
  _internal_set_min_sample_coverage(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_sample_coverage)
}

// optional float max_sample_coverage = 4;
inline bool SampleConstraint::_internal_has_max_sample_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SampleConstraint::has_max_sample_coverage() const {
  return _internal_has_max_sample_coverage();
}
inline void SampleConstraint::clear_max_sample_coverage() {
  _impl_.max_sample_coverage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SampleConstraint::_internal_max_sample_coverage() const {
  return _impl_.max_sample_coverage_;
}
inline float SampleConstraint::max_sample_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_sample_coverage)
  return _internal_max_sample_coverage();
}
inline void SampleConstraint::_internal_set_max_sample_coverage(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_sample_coverage_ = value;
}
inline void SampleConstraint::set_max_sample_coverage(float value) {
  _internal_set_max_sample_coverage(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_sample_coverage)
}

// optional float min_object_coverage = 5;
inline bool SampleConstraint::_internal_has_min_object_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SampleConstraint::has_min_object_coverage() const {
  return _internal_has_min_object_coverage();
}
inline void SampleConstraint::clear_min_object_coverage() {
  _impl_.min_object_coverage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SampleConstraint::_internal_min_object_coverage() const {
  return _impl_.min_object_coverage_;
}
inline float SampleConstraint::min_object_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_object_coverage)
  return _internal_min_object_coverage();
}
inline void SampleConstraint::_internal_set_min_object_coverage(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_object_coverage_ = value;
}
inline void SampleConstraint::set_min_object_coverage(float value) {
  _internal_set_min_object_coverage(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_object_coverage)
}

// optional float max_object_coverage = 6;
inline bool SampleConstraint::_internal_has_max_object_coverage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SampleConstraint::has_max_object_coverage() const {
  return _internal_has_max_object_coverage();
}
inline void SampleConstraint::clear_max_object_coverage() {
  _impl_.max_object_coverage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SampleConstraint::_internal_max_object_coverage() const {
  return _impl_.max_object_coverage_;
}
inline float SampleConstraint::max_object_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_object_coverage)
  return _internal_max_object_coverage();
}
inline void SampleConstraint::_internal_set_max_object_coverage(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_object_coverage_ = value;
}
inline void SampleConstraint::set_max_object_coverage(float value) {
  _internal_set_max_object_coverage(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_object_coverage)
}

// repeated int32 balance_type = 7;
inline int SampleConstraint::_internal_balance_type_size() const {
  return _impl_.balance_type_.size();
}
inline int SampleConstraint::balance_type_size() const {
  return _internal_balance_type_size();
}
inline void SampleConstraint::clear_balance_type() {
  _impl_.balance_type_.Clear();
}
inline int32_t SampleConstraint::_internal_balance_type(int index) const {
  return _impl_.balance_type_.Get(index);
}
inline int32_t SampleConstraint::balance_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.balance_type)
  return _internal_balance_type(index);
}
inline void SampleConstraint::set_balance_type(int index, int32_t value) {
  _impl_.balance_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.balance_type)
}
inline void SampleConstraint::_internal_add_balance_type(int32_t value) {
  _impl_.balance_type_.Add(value);
}
inline void SampleConstraint::add_balance_type(int32_t value) {
  _internal_add_balance_type(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SampleConstraint.balance_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SampleConstraint::_internal_balance_type() const {
  return _impl_.balance_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SampleConstraint::balance_type() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SampleConstraint.balance_type)
  return _internal_balance_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SampleConstraint::_internal_mutable_balance_type() {
  return &_impl_.balance_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SampleConstraint::mutable_balance_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SampleConstraint.balance_type)
  return _internal_mutable_balance_type();
}

// -------------------------------------------------------------------

// BatchSampler

// optional bool use_original_image = 1 [default = true];
inline bool BatchSampler::_internal_has_use_original_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BatchSampler::has_use_original_image() const {
  return _internal_has_use_original_image();
}
inline void BatchSampler::clear_use_original_image() {
  _impl_.use_original_image_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool BatchSampler::_internal_use_original_image() const {
  return _impl_.use_original_image_;
}
inline bool BatchSampler::use_original_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.use_original_image)
  return _internal_use_original_image();
}
inline void BatchSampler::_internal_set_use_original_image(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_original_image_ = value;
}
inline void BatchSampler::set_use_original_image(bool value) {
  _internal_set_use_original_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.use_original_image)
}

// optional .apollo.perception.inference.Sampler sampler = 2;
inline bool BatchSampler::_internal_has_sampler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sampler_ != nullptr);
  return value;
}
inline bool BatchSampler::has_sampler() const {
  return _internal_has_sampler();
}
inline void BatchSampler::clear_sampler() {
  if (_impl_.sampler_ != nullptr) _impl_.sampler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::Sampler& BatchSampler::_internal_sampler() const {
  const ::apollo::perception::inference::Sampler* p = _impl_.sampler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::Sampler&>(
      ::apollo::perception::inference::_Sampler_default_instance_);
}
inline const ::apollo::perception::inference::Sampler& BatchSampler::sampler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.sampler)
  return _internal_sampler();
}
inline void BatchSampler::unsafe_arena_set_allocated_sampler(
    ::apollo::perception::inference::Sampler* sampler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampler_);
  }
  _impl_.sampler_ = sampler;
  if (sampler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.BatchSampler.sampler)
}
inline ::apollo::perception::inference::Sampler* BatchSampler::release_sampler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::Sampler* temp = _impl_.sampler_;
  _impl_.sampler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::Sampler* BatchSampler::unsafe_arena_release_sampler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.BatchSampler.sampler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::Sampler* temp = _impl_.sampler_;
  _impl_.sampler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::Sampler* BatchSampler::_internal_mutable_sampler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sampler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::Sampler>(GetArenaForAllocation());
    _impl_.sampler_ = p;
  }
  return _impl_.sampler_;
}
inline ::apollo::perception::inference::Sampler* BatchSampler::mutable_sampler() {
  ::apollo::perception::inference::Sampler* _msg = _internal_mutable_sampler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BatchSampler.sampler)
  return _msg;
}
inline void BatchSampler::set_allocated_sampler(::apollo::perception::inference::Sampler* sampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sampler_;
  }
  if (sampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sampler);
    if (message_arena != submessage_arena) {
      sampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sampler_ = sampler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BatchSampler.sampler)
}

// optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
inline bool BatchSampler::_internal_has_sample_constraint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sample_constraint_ != nullptr);
  return value;
}
inline bool BatchSampler::has_sample_constraint() const {
  return _internal_has_sample_constraint();
}
inline void BatchSampler::clear_sample_constraint() {
  if (_impl_.sample_constraint_ != nullptr) _impl_.sample_constraint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::SampleConstraint& BatchSampler::_internal_sample_constraint() const {
  const ::apollo::perception::inference::SampleConstraint* p = _impl_.sample_constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SampleConstraint&>(
      ::apollo::perception::inference::_SampleConstraint_default_instance_);
}
inline const ::apollo::perception::inference::SampleConstraint& BatchSampler::sample_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.sample_constraint)
  return _internal_sample_constraint();
}
inline void BatchSampler::unsafe_arena_set_allocated_sample_constraint(
    ::apollo::perception::inference::SampleConstraint* sample_constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sample_constraint_);
  }
  _impl_.sample_constraint_ = sample_constraint;
  if (sample_constraint) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.BatchSampler.sample_constraint)
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::release_sample_constraint() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::SampleConstraint* temp = _impl_.sample_constraint_;
  _impl_.sample_constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::unsafe_arena_release_sample_constraint() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.BatchSampler.sample_constraint)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::SampleConstraint* temp = _impl_.sample_constraint_;
  _impl_.sample_constraint_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::_internal_mutable_sample_constraint() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sample_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SampleConstraint>(GetArenaForAllocation());
    _impl_.sample_constraint_ = p;
  }
  return _impl_.sample_constraint_;
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::mutable_sample_constraint() {
  ::apollo::perception::inference::SampleConstraint* _msg = _internal_mutable_sample_constraint();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BatchSampler.sample_constraint)
  return _msg;
}
inline void BatchSampler::set_allocated_sample_constraint(::apollo::perception::inference::SampleConstraint* sample_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sample_constraint_;
  }
  if (sample_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_constraint);
    if (message_arena != submessage_arena) {
      sample_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_constraint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sample_constraint_ = sample_constraint;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BatchSampler.sample_constraint)
}

// optional uint32 max_sample = 4;
inline bool BatchSampler::_internal_has_max_sample() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BatchSampler::has_max_sample() const {
  return _internal_has_max_sample();
}
inline void BatchSampler::clear_max_sample() {
  _impl_.max_sample_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BatchSampler::_internal_max_sample() const {
  return _impl_.max_sample_;
}
inline uint32_t BatchSampler::max_sample() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.max_sample)
  return _internal_max_sample();
}
inline void BatchSampler::_internal_set_max_sample(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_sample_ = value;
}
inline void BatchSampler::set_max_sample(uint32_t value) {
  _internal_set_max_sample(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.max_sample)
}

// optional uint32 max_trials = 5 [default = 100];
inline bool BatchSampler::_internal_has_max_trials() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BatchSampler::has_max_trials() const {
  return _internal_has_max_trials();
}
inline void BatchSampler::clear_max_trials() {
  _impl_.max_trials_ = 100u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t BatchSampler::_internal_max_trials() const {
  return _impl_.max_trials_;
}
inline uint32_t BatchSampler::max_trials() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.max_trials)
  return _internal_max_trials();
}
inline void BatchSampler::_internal_set_max_trials(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_trials_ = value;
}
inline void BatchSampler::set_max_trials(uint32_t value) {
  _internal_set_max_trials(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.max_trials)
}

// -------------------------------------------------------------------

// EmitConstraint

// optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
inline bool EmitConstraint::_internal_has_emit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmitConstraint::has_emit_type() const {
  return _internal_has_emit_type();
}
inline void EmitConstraint::clear_emit_type() {
  _impl_.emit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::EmitConstraint_EmitType EmitConstraint::_internal_emit_type() const {
  return static_cast< ::apollo::perception::inference::EmitConstraint_EmitType >(_impl_.emit_type_);
}
inline ::apollo::perception::inference::EmitConstraint_EmitType EmitConstraint::emit_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmitConstraint.emit_type)
  return _internal_emit_type();
}
inline void EmitConstraint::_internal_set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value) {
  assert(::apollo::perception::inference::EmitConstraint_EmitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.emit_type_ = value;
}
inline void EmitConstraint::set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value) {
  _internal_set_emit_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmitConstraint.emit_type)
}

// optional float emit_overlap = 2;
inline bool EmitConstraint::_internal_has_emit_overlap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EmitConstraint::has_emit_overlap() const {
  return _internal_has_emit_overlap();
}
inline void EmitConstraint::clear_emit_overlap() {
  _impl_.emit_overlap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float EmitConstraint::_internal_emit_overlap() const {
  return _impl_.emit_overlap_;
}
inline float EmitConstraint::emit_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmitConstraint.emit_overlap)
  return _internal_emit_overlap();
}
inline void EmitConstraint::_internal_set_emit_overlap(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.emit_overlap_ = value;
}
inline void EmitConstraint::set_emit_overlap(float value) {
  _internal_set_emit_overlap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmitConstraint.emit_overlap)
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::_internal_has_xmin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalizedBBox::has_xmin() const {
  return _internal_has_xmin();
}
inline void NormalizedBBox::clear_xmin() {
  _impl_.xmin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedBBox::_internal_xmin() const {
  return _impl_.xmin_;
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.xmin)
  return _internal_xmin();
}
inline void NormalizedBBox::_internal_set_xmin(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xmin_ = value;
}
inline void NormalizedBBox::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::_internal_has_ymin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizedBBox::has_ymin() const {
  return _internal_has_ymin();
}
inline void NormalizedBBox::clear_ymin() {
  _impl_.ymin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedBBox::_internal_ymin() const {
  return _impl_.ymin_;
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.ymin)
  return _internal_ymin();
}
inline void NormalizedBBox::_internal_set_ymin(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ymin_ = value;
}
inline void NormalizedBBox::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::_internal_has_xmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizedBBox::has_xmax() const {
  return _internal_has_xmax();
}
inline void NormalizedBBox::clear_xmax() {
  _impl_.xmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedBBox::_internal_xmax() const {
  return _impl_.xmax_;
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.xmax)
  return _internal_xmax();
}
inline void NormalizedBBox::_internal_set_xmax(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.xmax_ = value;
}
inline void NormalizedBBox::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::_internal_has_ymax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizedBBox::has_ymax() const {
  return _internal_has_ymax();
}
inline void NormalizedBBox::clear_ymax() {
  _impl_.ymax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float NormalizedBBox::_internal_ymax() const {
  return _impl_.ymax_;
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.ymax)
  return _internal_ymax();
}
inline void NormalizedBBox::_internal_set_ymax(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ymax_ = value;
}
inline void NormalizedBBox::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NormalizedBBox::has_label() const {
  return _internal_has_label();
}
inline void NormalizedBBox::clear_label() {
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t NormalizedBBox::_internal_label() const {
  return _impl_.label_;
}
inline int32_t NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.label)
  return _internal_label();
}
inline void NormalizedBBox::_internal_set_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.label_ = value;
}
inline void NormalizedBBox::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.label)
}

// optional bool difficult = 6;
inline bool NormalizedBBox::_internal_has_difficult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NormalizedBBox::has_difficult() const {
  return _internal_has_difficult();
}
inline void NormalizedBBox::clear_difficult() {
  _impl_.difficult_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool NormalizedBBox::_internal_difficult() const {
  return _impl_.difficult_;
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.difficult)
  return _internal_difficult();
}
inline void NormalizedBBox::_internal_set_difficult(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.difficult_ = value;
}
inline void NormalizedBBox::set_difficult(bool value) {
  _internal_set_difficult(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NormalizedBBox::has_score() const {
  return _internal_has_score();
}
inline void NormalizedBBox::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float NormalizedBBox::_internal_score() const {
  return _impl_.score_;
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.score)
  return _internal_score();
}
inline void NormalizedBBox::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.score_ = value;
}
inline void NormalizedBBox::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NormalizedBBox::has_size() const {
  return _internal_has_size();
}
inline void NormalizedBBox::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float NormalizedBBox::_internal_size() const {
  return _impl_.size_;
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.size)
  return _internal_size();
}
inline void NormalizedBBox::_internal_set_size(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.size_ = value;
}
inline void NormalizedBBox::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.size)
}

// -------------------------------------------------------------------

// BBox3D

// optional float h = 1 [default = 0];
inline bool BBox3D::_internal_has_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBox3D::has_h() const {
  return _internal_has_h();
}
inline void BBox3D::clear_h() {
  _impl_.h_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float BBox3D::_internal_h() const {
  return _impl_.h_;
}
inline float BBox3D::h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.h)
  return _internal_h();
}
inline void BBox3D::_internal_set_h(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.h_ = value;
}
inline void BBox3D::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.h)
}

// optional float w = 2 [default = 0];
inline bool BBox3D::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBox3D::has_w() const {
  return _internal_has_w();
}
inline void BBox3D::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float BBox3D::_internal_w() const {
  return _impl_.w_;
}
inline float BBox3D::w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.w)
  return _internal_w();
}
inline void BBox3D::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.w_ = value;
}
inline void BBox3D::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.w)
}

// optional float l = 3 [default = 0];
inline bool BBox3D::_internal_has_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBox3D::has_l() const {
  return _internal_has_l();
}
inline void BBox3D::clear_l() {
  _impl_.l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float BBox3D::_internal_l() const {
  return _impl_.l_;
}
inline float BBox3D::l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.l)
  return _internal_l();
}
inline void BBox3D::_internal_set_l(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.l_ = value;
}
inline void BBox3D::set_l(float value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.l)
}

// optional float x = 4 [default = 0];
inline bool BBox3D::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBox3D::has_x() const {
  return _internal_has_x();
}
inline void BBox3D::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float BBox3D::_internal_x() const {
  return _impl_.x_;
}
inline float BBox3D::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.x)
  return _internal_x();
}
inline void BBox3D::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.x_ = value;
}
inline void BBox3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.x)
}

// optional float y = 5 [default = 0];
inline bool BBox3D::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BBox3D::has_y() const {
  return _internal_has_y();
}
inline void BBox3D::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float BBox3D::_internal_y() const {
  return _impl_.y_;
}
inline float BBox3D::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.y)
  return _internal_y();
}
inline void BBox3D::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.y_ = value;
}
inline void BBox3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.y)
}

// optional float z = 6 [default = 0];
inline bool BBox3D::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BBox3D::has_z() const {
  return _internal_has_z();
}
inline void BBox3D::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float BBox3D::_internal_z() const {
  return _impl_.z_;
}
inline float BBox3D::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.z)
  return _internal_z();
}
inline void BBox3D::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.z_ = value;
}
inline void BBox3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.z)
}

// optional float alpha = 7 [default = 0];
inline bool BBox3D::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BBox3D::has_alpha() const {
  return _internal_has_alpha();
}
inline void BBox3D::clear_alpha() {
  _impl_.alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float BBox3D::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float BBox3D::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.alpha)
  return _internal_alpha();
}
inline void BBox3D::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.alpha_ = value;
}
inline void BBox3D::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.alpha)
}

// -------------------------------------------------------------------

// Annotation

// optional int32 instance_id = 1 [default = 0];
inline bool Annotation::_internal_has_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Annotation::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void Annotation::clear_instance_id() {
  _impl_.instance_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Annotation::_internal_instance_id() const {
  return _impl_.instance_id_;
}
inline int32_t Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.instance_id)
  return _internal_instance_id();
}
inline void Annotation::_internal_set_instance_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.instance_id_ = value;
}
inline void Annotation::set_instance_id(int32_t value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Annotation.instance_id)
}

// optional .apollo.perception.inference.NormalizedBBox bbox = 2;
inline bool Annotation::_internal_has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline bool Annotation::has_bbox() const {
  return _internal_has_bbox();
}
inline void Annotation::clear_bbox() {
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::_internal_bbox() const {
  const ::apollo::perception::inference::NormalizedBBox* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NormalizedBBox&>(
      ::apollo::perception::inference::_NormalizedBBox_default_instance_);
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.bbox)
  return _internal_bbox();
}
inline void Annotation::unsafe_arena_set_allocated_bbox(
    ::apollo::perception::inference::NormalizedBBox* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.Annotation.bbox)
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_bbox() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.Annotation.bbox)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::_internal_mutable_bbox() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NormalizedBBox>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_bbox() {
  ::apollo::perception::inference::NormalizedBBox* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.bbox)
  return _msg;
}
inline void Annotation::set_allocated_bbox(::apollo::perception::inference::NormalizedBBox* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.bbox)
}

// optional .apollo.perception.inference.BBox3D bbox3d = 3;
inline bool Annotation::_internal_has_bbox3d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox3d_ != nullptr);
  return value;
}
inline bool Annotation::has_bbox3d() const {
  return _internal_has_bbox3d();
}
inline void Annotation::clear_bbox3d() {
  if (_impl_.bbox3d_ != nullptr) _impl_.bbox3d_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::BBox3D& Annotation::_internal_bbox3d() const {
  const ::apollo::perception::inference::BBox3D* p = _impl_.bbox3d_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BBox3D&>(
      ::apollo::perception::inference::_BBox3D_default_instance_);
}
inline const ::apollo::perception::inference::BBox3D& Annotation::bbox3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.bbox3d)
  return _internal_bbox3d();
}
inline void Annotation::unsafe_arena_set_allocated_bbox3d(
    ::apollo::perception::inference::BBox3D* bbox3d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox3d_);
  }
  _impl_.bbox3d_ = bbox3d;
  if (bbox3d) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.Annotation.bbox3d)
}
inline ::apollo::perception::inference::BBox3D* Annotation::release_bbox3d() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::BBox3D* temp = _impl_.bbox3d_;
  _impl_.bbox3d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BBox3D* Annotation::unsafe_arena_release_bbox3d() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.Annotation.bbox3d)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::BBox3D* temp = _impl_.bbox3d_;
  _impl_.bbox3d_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BBox3D* Annotation::_internal_mutable_bbox3d() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bbox3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BBox3D>(GetArenaForAllocation());
    _impl_.bbox3d_ = p;
  }
  return _impl_.bbox3d_;
}
inline ::apollo::perception::inference::BBox3D* Annotation::mutable_bbox3d() {
  ::apollo::perception::inference::BBox3D* _msg = _internal_mutable_bbox3d();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.bbox3d)
  return _msg;
}
inline void Annotation::set_allocated_bbox3d(::apollo::perception::inference::BBox3D* bbox3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bbox3d_;
  }
  if (bbox3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bbox3d);
    if (message_arena != submessage_arena) {
      bbox3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox3d, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bbox3d_ = bbox3d;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.bbox3d)
}

// optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
inline bool Annotation::_internal_has_front_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.front_bbox_ != nullptr);
  return value;
}
inline bool Annotation::has_front_bbox() const {
  return _internal_has_front_bbox();
}
inline void Annotation::clear_front_bbox() {
  if (_impl_.front_bbox_ != nullptr) _impl_.front_bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::_internal_front_bbox() const {
  const ::apollo::perception::inference::NormalizedBBox* p = _impl_.front_bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NormalizedBBox&>(
      ::apollo::perception::inference::_NormalizedBBox_default_instance_);
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::front_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.front_bbox)
  return _internal_front_bbox();
}
inline void Annotation::unsafe_arena_set_allocated_front_bbox(
    ::apollo::perception::inference::NormalizedBBox* front_bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_bbox_);
  }
  _impl_.front_bbox_ = front_bbox;
  if (front_bbox) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.Annotation.front_bbox)
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_front_bbox() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.front_bbox_;
  _impl_.front_bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::unsafe_arena_release_front_bbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.Annotation.front_bbox)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.front_bbox_;
  _impl_.front_bbox_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::_internal_mutable_front_bbox() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.front_bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NormalizedBBox>(GetArenaForAllocation());
    _impl_.front_bbox_ = p;
  }
  return _impl_.front_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_front_bbox() {
  ::apollo::perception::inference::NormalizedBBox* _msg = _internal_mutable_front_bbox();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.front_bbox)
  return _msg;
}
inline void Annotation::set_allocated_front_bbox(::apollo::perception::inference::NormalizedBBox* front_bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.front_bbox_;
  }
  if (front_bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(front_bbox);
    if (message_arena != submessage_arena) {
      front_bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.front_bbox_ = front_bbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.front_bbox)
}

// optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
inline bool Annotation::_internal_has_rear_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rear_bbox_ != nullptr);
  return value;
}
inline bool Annotation::has_rear_bbox() const {
  return _internal_has_rear_bbox();
}
inline void Annotation::clear_rear_bbox() {
  if (_impl_.rear_bbox_ != nullptr) _impl_.rear_bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::_internal_rear_bbox() const {
  const ::apollo::perception::inference::NormalizedBBox* p = _impl_.rear_bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NormalizedBBox&>(
      ::apollo::perception::inference::_NormalizedBBox_default_instance_);
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::rear_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.rear_bbox)
  return _internal_rear_bbox();
}
inline void Annotation::unsafe_arena_set_allocated_rear_bbox(
    ::apollo::perception::inference::NormalizedBBox* rear_bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rear_bbox_);
  }
  _impl_.rear_bbox_ = rear_bbox;
  if (rear_bbox) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.Annotation.rear_bbox)
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_rear_bbox() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.rear_bbox_;
  _impl_.rear_bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::unsafe_arena_release_rear_bbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.Annotation.rear_bbox)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::NormalizedBBox* temp = _impl_.rear_bbox_;
  _impl_.rear_bbox_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::_internal_mutable_rear_bbox() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rear_bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NormalizedBBox>(GetArenaForAllocation());
    _impl_.rear_bbox_ = p;
  }
  return _impl_.rear_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_rear_bbox() {
  ::apollo::perception::inference::NormalizedBBox* _msg = _internal_mutable_rear_bbox();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.rear_bbox)
  return _msg;
}
inline void Annotation::set_allocated_rear_bbox(::apollo::perception::inference::NormalizedBBox* rear_bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rear_bbox_;
  }
  if (rear_bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rear_bbox);
    if (message_arena != submessage_arena) {
      rear_bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rear_bbox_ = rear_bbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.rear_bbox)
}

// -------------------------------------------------------------------

// AnnotationGroup

// optional int32 group_label = 1;
inline bool AnnotationGroup::_internal_has_group_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnnotationGroup::has_group_label() const {
  return _internal_has_group_label();
}
inline void AnnotationGroup::clear_group_label() {
  _impl_.group_label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t AnnotationGroup::_internal_group_label() const {
  return _impl_.group_label_;
}
inline int32_t AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotationGroup.group_label)
  return _internal_group_label();
}
inline void AnnotationGroup::_internal_set_group_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_label_ = value;
}
inline void AnnotationGroup::set_group_label(int32_t value) {
  _internal_set_group_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotationGroup.group_label)
}

// repeated .apollo.perception.inference.Annotation annotation = 2;
inline int AnnotationGroup::_internal_annotation_size() const {
  return _impl_.annotation_.size();
}
inline int AnnotationGroup::annotation_size() const {
  return _internal_annotation_size();
}
inline void AnnotationGroup::clear_annotation() {
  _impl_.annotation_.Clear();
}
inline ::apollo::perception::inference::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotationGroup.annotation)
  return _impl_.annotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotationGroup.annotation)
  return &_impl_.annotation_;
}
inline const ::apollo::perception::inference::Annotation& AnnotationGroup::_internal_annotation(int index) const {
  return _impl_.annotation_.Get(index);
}
inline const ::apollo::perception::inference::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotationGroup.annotation)
  return _internal_annotation(index);
}
inline ::apollo::perception::inference::Annotation* AnnotationGroup::_internal_add_annotation() {
  return _impl_.annotation_.Add();
}
inline ::apollo::perception::inference::Annotation* AnnotationGroup::add_annotation() {
  ::apollo::perception::inference::Annotation* _add = _internal_add_annotation();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotationGroup.annotation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotationGroup.annotation)
  return _impl_.annotation_;
}

// -------------------------------------------------------------------

// AnnotatedDatum

// optional .apollo.perception.inference.Datum datum = 1;
inline bool AnnotatedDatum::_internal_has_datum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.datum_ != nullptr);
  return value;
}
inline bool AnnotatedDatum::has_datum() const {
  return _internal_has_datum();
}
inline void AnnotatedDatum::clear_datum() {
  if (_impl_.datum_ != nullptr) _impl_.datum_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::Datum& AnnotatedDatum::_internal_datum() const {
  const ::apollo::perception::inference::Datum* p = _impl_.datum_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::Datum&>(
      ::apollo::perception::inference::_Datum_default_instance_);
}
inline const ::apollo::perception::inference::Datum& AnnotatedDatum::datum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.datum)
  return _internal_datum();
}
inline void AnnotatedDatum::unsafe_arena_set_allocated_datum(
    ::apollo::perception::inference::Datum* datum) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.datum_);
  }
  _impl_.datum_ = datum;
  if (datum) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.AnnotatedDatum.datum)
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::release_datum() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::Datum* temp = _impl_.datum_;
  _impl_.datum_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::unsafe_arena_release_datum() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.AnnotatedDatum.datum)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::Datum* temp = _impl_.datum_;
  _impl_.datum_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::_internal_mutable_datum() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.datum_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::Datum>(GetArenaForAllocation());
    _impl_.datum_ = p;
  }
  return _impl_.datum_;
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::mutable_datum() {
  ::apollo::perception::inference::Datum* _msg = _internal_mutable_datum();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDatum.datum)
  return _msg;
}
inline void AnnotatedDatum::set_allocated_datum(::apollo::perception::inference::Datum* datum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.datum_;
  }
  if (datum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datum);
    if (message_arena != submessage_arena) {
      datum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datum, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.datum_ = datum;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.AnnotatedDatum.datum)
}

// optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
inline bool AnnotatedDatum::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnnotatedDatum::has_type() const {
  return _internal_has_type();
}
inline void AnnotatedDatum::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDatum::_internal_type() const {
  return static_cast< ::apollo::perception::inference::AnnotatedDatum_AnnotationType >(_impl_.type_);
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDatum::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.type)
  return _internal_type();
}
inline void AnnotatedDatum::_internal_set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  assert(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void AnnotatedDatum::set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDatum.type)
}

// repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
inline int AnnotatedDatum::_internal_annotation_group_size() const {
  return _impl_.annotation_group_.size();
}
inline int AnnotatedDatum::annotation_group_size() const {
  return _internal_annotation_group_size();
}
inline void AnnotatedDatum::clear_annotation_group() {
  _impl_.annotation_group_.Clear();
}
inline ::apollo::perception::inference::AnnotationGroup* AnnotatedDatum::mutable_annotation_group(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return _impl_.annotation_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >*
AnnotatedDatum::mutable_annotation_group() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return &_impl_.annotation_group_;
}
inline const ::apollo::perception::inference::AnnotationGroup& AnnotatedDatum::_internal_annotation_group(int index) const {
  return _impl_.annotation_group_.Get(index);
}
inline const ::apollo::perception::inference::AnnotationGroup& AnnotatedDatum::annotation_group(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return _internal_annotation_group(index);
}
inline ::apollo::perception::inference::AnnotationGroup* AnnotatedDatum::_internal_add_annotation_group() {
  return _impl_.annotation_group_.Add();
}
inline ::apollo::perception::inference::AnnotationGroup* AnnotatedDatum::add_annotation_group() {
  ::apollo::perception::inference::AnnotationGroup* _add = _internal_add_annotation_group();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >&
AnnotatedDatum::annotation_group() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return _impl_.annotation_group_;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FillerParameter::has_type() const {
  return _internal_has_type();
}
inline void FillerParameter::clear_type() {
  _impl_.type_.ClearToDefault(::apollo::perception::inference::FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.type)
  if (_impl_.type_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_type_.get();
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FillerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.type)
}
inline std::string* FillerParameter::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.FillerParameter.type)
  return _s;
}
inline const std::string& FillerParameter::_internal_type() const {
  return _impl_.type_.Get();
}
inline void FillerParameter::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* FillerParameter::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(::apollo::perception::inference::FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
}
inline std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.FillerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
  return p;
}
inline void FillerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FillerParameter::has_value() const {
  return _internal_has_value();
}
inline void FillerParameter::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FillerParameter::_internal_value() const {
  return _impl_.value_;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.value)
  return _internal_value();
}
inline void FillerParameter::_internal_set_value(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void FillerParameter::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::_internal_has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FillerParameter::has_min() const {
  return _internal_has_min();
}
inline void FillerParameter::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FillerParameter::_internal_min() const {
  return _impl_.min_;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.min)
  return _internal_min();
}
inline void FillerParameter::_internal_set_min(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_ = value;
}
inline void FillerParameter::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FillerParameter::has_max() const {
  return _internal_has_max();
}
inline void FillerParameter::clear_max() {
  _impl_.max_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float FillerParameter::_internal_max() const {
  return _impl_.max_;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.max)
  return _internal_max();
}
inline void FillerParameter::_internal_set_max(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_ = value;
}
inline void FillerParameter::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::_internal_has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FillerParameter::has_mean() const {
  return _internal_has_mean();
}
inline void FillerParameter::clear_mean() {
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float FillerParameter::_internal_mean() const {
  return _impl_.mean_;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.mean)
  return _internal_mean();
}
inline void FillerParameter::_internal_set_mean(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mean_ = value;
}
inline void FillerParameter::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::_internal_has_std() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FillerParameter::has_std() const {
  return _internal_has_std();
}
inline void FillerParameter::clear_std() {
  _impl_.std_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float FillerParameter::_internal_std() const {
  return _impl_.std_;
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.std)
  return _internal_std();
}
inline void FillerParameter::_internal_set_std(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.std_ = value;
}
inline void FillerParameter::set_std(float value) {
  _internal_set_std(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::_internal_has_sparse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FillerParameter::has_sparse() const {
  return _internal_has_sparse();
}
inline void FillerParameter::clear_sparse() {
  _impl_.sparse_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t FillerParameter::_internal_sparse() const {
  return _impl_.sparse_;
}
inline int32_t FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.sparse)
  return _internal_sparse();
}
inline void FillerParameter::_internal_set_sparse(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sparse_ = value;
}
inline void FillerParameter::set_sparse(int32_t value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.sparse)
}

// optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::_internal_has_variance_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FillerParameter::has_variance_norm() const {
  return _internal_has_variance_norm();
}
inline void FillerParameter::clear_variance_norm() {
  _impl_.variance_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::perception::inference::FillerParameter_VarianceNorm FillerParameter::_internal_variance_norm() const {
  return static_cast< ::apollo::perception::inference::FillerParameter_VarianceNorm >(_impl_.variance_norm_);
}
inline ::apollo::perception::inference::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.variance_norm)
  return _internal_variance_norm();
}
inline void FillerParameter::_internal_set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value) {
  assert(::apollo::perception::inference::FillerParameter_VarianceNorm_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.variance_norm_ = value;
}
inline void FillerParameter::set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value) {
  _internal_set_variance_norm(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetParameter::has_name() const {
  return _internal_has_name();
}
inline void NetParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.name)
}
inline std::string* NetParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.name)
  return _s;
}
inline const std::string& NetParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NetParameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetParameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.NetParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::_internal_input_size() const {
  return _impl_.input_.size();
}
inline int NetParameter::input_size() const {
  return _internal_input_size();
}
inline void NetParameter::clear_input() {
  _impl_.input_.Clear();
}
inline std::string* NetParameter::add_input() {
  std::string* _s = _internal_add_input();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.NetParameter.input)
  return _s;
}
inline const std::string& NetParameter::_internal_input(int index) const {
  return _impl_.input_.Get(index);
}
inline const std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input)
  return _internal_input(index);
}
inline std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.input)
  return _impl_.input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const std::string& value) {
  _impl_.input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::set_input(int index, std::string&& value) {
  _impl_.input_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  _impl_.input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetParameter.input)
}
inline std::string* NetParameter::_internal_add_input() {
  return _impl_.input_.Add();
}
inline void NetParameter::add_input(const std::string& value) {
  _impl_.input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::add_input(std::string&& value) {
  _impl_.input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  _impl_.input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetParameter.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input)
  return _impl_.input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input)
  return &_impl_.input_;
}

// repeated .apollo.perception.inference.BlobShape input_shape = 8;
inline int NetParameter::_internal_input_shape_size() const {
  return _impl_.input_shape_.size();
}
inline int NetParameter::input_shape_size() const {
  return _internal_input_shape_size();
}
inline void NetParameter::clear_input_shape() {
  _impl_.input_shape_.Clear();
}
inline ::apollo::perception::inference::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.input_shape)
  return _impl_.input_shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input_shape)
  return &_impl_.input_shape_;
}
inline const ::apollo::perception::inference::BlobShape& NetParameter::_internal_input_shape(int index) const {
  return _impl_.input_shape_.Get(index);
}
inline const ::apollo::perception::inference::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input_shape)
  return _internal_input_shape(index);
}
inline ::apollo::perception::inference::BlobShape* NetParameter::_internal_add_input_shape() {
  return _impl_.input_shape_.Add();
}
inline ::apollo::perception::inference::BlobShape* NetParameter::add_input_shape() {
  ::apollo::perception::inference::BlobShape* _add = _internal_add_input_shape();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input_shape)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input_shape)
  return _impl_.input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::_internal_input_dim_size() const {
  return _impl_.input_dim_.size();
}
inline int NetParameter::input_dim_size() const {
  return _internal_input_dim_size();
}
inline void NetParameter::clear_input_dim() {
  _impl_.input_dim_.Clear();
}
inline int32_t NetParameter::_internal_input_dim(int index) const {
  return _impl_.input_dim_.Get(index);
}
inline int32_t NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input_dim)
  return _internal_input_dim(index);
}
inline void NetParameter::set_input_dim(int index, int32_t value) {
  _impl_.input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.input_dim)
}
inline void NetParameter::_internal_add_input_dim(int32_t value) {
  _impl_.input_dim_.Add(value);
}
inline void NetParameter::add_input_dim(int32_t value) {
  _internal_add_input_dim(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NetParameter::_internal_input_dim() const {
  return _impl_.input_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input_dim)
  return _internal_input_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NetParameter::_internal_mutable_input_dim() {
  return &_impl_.input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input_dim)
  return _internal_mutable_input_dim();
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::_internal_has_force_backward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetParameter::has_force_backward() const {
  return _internal_has_force_backward();
}
inline void NetParameter::clear_force_backward() {
  _impl_.force_backward_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NetParameter::_internal_force_backward() const {
  return _impl_.force_backward_;
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.force_backward)
  return _internal_force_backward();
}
inline void NetParameter::_internal_set_force_backward(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.force_backward_ = value;
}
inline void NetParameter::set_force_backward(bool value) {
  _internal_set_force_backward(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.force_backward)
}

// optional .apollo.perception.inference.NetState state = 6;
inline bool NetParameter::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline bool NetParameter::has_state() const {
  return _internal_has_state();
}
inline void NetParameter::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::NetState& NetParameter::_internal_state() const {
  const ::apollo::perception::inference::NetState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NetState&>(
      ::apollo::perception::inference::_NetState_default_instance_);
}
inline const ::apollo::perception::inference::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.state)
  return _internal_state();
}
inline void NetParameter::unsafe_arena_set_allocated_state(
    ::apollo::perception::inference::NetState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.NetParameter.state)
}
inline ::apollo::perception::inference::NetState* NetParameter::release_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NetState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NetState* NetParameter::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.NetParameter.state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NetState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NetState* NetParameter::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NetState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::apollo::perception::inference::NetState* NetParameter::mutable_state() {
  ::apollo::perception::inference::NetState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.state)
  return _msg;
}
inline void NetParameter::set_allocated_state(::apollo::perception::inference::NetState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::_internal_has_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetParameter::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void NetParameter::clear_debug_info() {
  _impl_.debug_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NetParameter::_internal_debug_info() const {
  return _impl_.debug_info_;
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.debug_info)
  return _internal_debug_info();
}
inline void NetParameter::_internal_set_debug_info(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_ = value;
}
inline void NetParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.debug_info)
}

// repeated .apollo.perception.inference.LayerParameter layer = 100;
inline int NetParameter::_internal_layer_size() const {
  return _impl_.layer_.size();
}
inline int NetParameter::layer_size() const {
  return _internal_layer_size();
}
inline void NetParameter::clear_layer() {
  _impl_.layer_.Clear();
}
inline ::apollo::perception::inference::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.layer)
  return _impl_.layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.layer)
  return &_impl_.layer_;
}
inline const ::apollo::perception::inference::LayerParameter& NetParameter::_internal_layer(int index) const {
  return _impl_.layer_.Get(index);
}
inline const ::apollo::perception::inference::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.layer)
  return _internal_layer(index);
}
inline ::apollo::perception::inference::LayerParameter* NetParameter::_internal_add_layer() {
  return _impl_.layer_.Add();
}
inline ::apollo::perception::inference::LayerParameter* NetParameter::add_layer() {
  ::apollo::perception::inference::LayerParameter* _add = _internal_add_layer();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.layer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.layer)
  return _impl_.layer_;
}

// repeated .apollo.perception.inference.V1LayerParameter layers = 2;
inline int NetParameter::_internal_layers_size() const {
  return _impl_.layers_.size();
}
inline int NetParameter::layers_size() const {
  return _internal_layers_size();
}
inline void NetParameter::clear_layers() {
  _impl_.layers_.Clear();
}
inline ::apollo::perception::inference::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.layers)
  return _impl_.layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.layers)
  return &_impl_.layers_;
}
inline const ::apollo::perception::inference::V1LayerParameter& NetParameter::_internal_layers(int index) const {
  return _impl_.layers_.Get(index);
}
inline const ::apollo::perception::inference::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.layers)
  return _internal_layers(index);
}
inline ::apollo::perception::inference::V1LayerParameter* NetParameter::_internal_add_layers() {
  return _impl_.layers_.Add();
}
inline ::apollo::perception::inference::V1LayerParameter* NetParameter::add_layers() {
  ::apollo::perception::inference::V1LayerParameter* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.layers)
  return _impl_.layers_;
}

// -------------------------------------------------------------------

// NetState

// optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
inline bool NetState::_internal_has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetState::has_phase() const {
  return _internal_has_phase();
}
inline void NetState::clear_phase() {
  _impl_.phase_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::Phase NetState::_internal_phase() const {
  return static_cast< ::apollo::perception::inference::Phase >(_impl_.phase_);
}
inline ::apollo::perception::inference::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.phase)
  return _internal_phase();
}
inline void NetState::_internal_set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phase_ = value;
}
inline void NetState::set_phase(::apollo::perception::inference::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetState::has_level() const {
  return _internal_has_level();
}
inline void NetState::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t NetState::_internal_level() const {
  return _impl_.level_;
}
inline int32_t NetState::level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.level)
  return _internal_level();
}
inline void NetState::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}
inline void NetState::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.level)
}

// repeated string stage = 3;
inline int NetState::_internal_stage_size() const {
  return _impl_.stage_.size();
}
inline int NetState::stage_size() const {
  return _internal_stage_size();
}
inline void NetState::clear_stage() {
  _impl_.stage_.Clear();
}
inline std::string* NetState::add_stage() {
  std::string* _s = _internal_add_stage();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.NetState.stage)
  return _s;
}
inline const std::string& NetState::_internal_stage(int index) const {
  return _impl_.stage_.Get(index);
}
inline const std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.stage)
  return _internal_stage(index);
}
inline std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetState.stage)
  return _impl_.stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const std::string& value) {
  _impl_.stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.stage)
}
inline void NetState::set_stage(int index, std::string&& value) {
  _impl_.stage_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  _impl_.stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetState.stage)
}
inline std::string* NetState::_internal_add_stage() {
  return _impl_.stage_.Add();
}
inline void NetState::add_stage(const std::string& value) {
  _impl_.stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetState.stage)
}
inline void NetState::add_stage(std::string&& value) {
  _impl_.stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  _impl_.stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetState.stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetState.stage)
  return _impl_.stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetState.stage)
  return &_impl_.stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .apollo.perception.inference.Phase phase = 1;
inline bool NetStateRule::_internal_has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetStateRule::has_phase() const {
  return _internal_has_phase();
}
inline void NetStateRule::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::Phase NetStateRule::_internal_phase() const {
  return static_cast< ::apollo::perception::inference::Phase >(_impl_.phase_);
}
inline ::apollo::perception::inference::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.phase)
  return _internal_phase();
}
inline void NetStateRule::_internal_set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phase_ = value;
}
inline void NetStateRule::set_phase(::apollo::perception::inference::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::_internal_has_min_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetStateRule::has_min_level() const {
  return _internal_has_min_level();
}
inline void NetStateRule::clear_min_level() {
  _impl_.min_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t NetStateRule::_internal_min_level() const {
  return _impl_.min_level_;
}
inline int32_t NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.min_level)
  return _internal_min_level();
}
inline void NetStateRule::_internal_set_min_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_level_ = value;
}
inline void NetStateRule::set_min_level(int32_t value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::_internal_has_max_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetStateRule::has_max_level() const {
  return _internal_has_max_level();
}
inline void NetStateRule::clear_max_level() {
  _impl_.max_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t NetStateRule::_internal_max_level() const {
  return _impl_.max_level_;
}
inline int32_t NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.max_level)
  return _internal_max_level();
}
inline void NetStateRule::_internal_set_max_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_level_ = value;
}
inline void NetStateRule::set_max_level(int32_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::_internal_stage_size() const {
  return _impl_.stage_.size();
}
inline int NetStateRule::stage_size() const {
  return _internal_stage_size();
}
inline void NetStateRule::clear_stage() {
  _impl_.stage_.Clear();
}
inline std::string* NetStateRule::add_stage() {
  std::string* _s = _internal_add_stage();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.NetStateRule.stage)
  return _s;
}
inline const std::string& NetStateRule::_internal_stage(int index) const {
  return _impl_.stage_.Get(index);
}
inline const std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.stage)
  return _internal_stage(index);
}
inline std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetStateRule.stage)
  return _impl_.stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const std::string& value) {
  _impl_.stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, std::string&& value) {
  _impl_.stage_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  _impl_.stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetStateRule.stage)
}
inline std::string* NetStateRule::_internal_add_stage() {
  return _impl_.stage_.Add();
}
inline void NetStateRule::add_stage(const std::string& value) {
  _impl_.stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::add_stage(std::string&& value) {
  _impl_.stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  _impl_.stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetStateRule.stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetStateRule.stage)
  return _impl_.stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetStateRule.stage)
  return &_impl_.stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::_internal_not_stage_size() const {
  return _impl_.not_stage_.size();
}
inline int NetStateRule::not_stage_size() const {
  return _internal_not_stage_size();
}
inline void NetStateRule::clear_not_stage() {
  _impl_.not_stage_.Clear();
}
inline std::string* NetStateRule::add_not_stage() {
  std::string* _s = _internal_add_not_stage();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.NetStateRule.not_stage)
  return _s;
}
inline const std::string& NetStateRule::_internal_not_stage(int index) const {
  return _impl_.not_stage_.Get(index);
}
inline const std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.not_stage)
  return _internal_not_stage(index);
}
inline std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetStateRule.not_stage)
  return _impl_.not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const std::string& value) {
  _impl_.not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, std::string&& value) {
  _impl_.not_stage_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  _impl_.not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetStateRule.not_stage)
}
inline std::string* NetStateRule::_internal_add_not_stage() {
  return _impl_.not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const std::string& value) {
  _impl_.not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(std::string&& value) {
  _impl_.not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  _impl_.not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetStateRule.not_stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetStateRule.not_stage)
  return _impl_.not_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetStateRule.not_stage)
  return &_impl_.not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParamSpec::has_name() const {
  return _internal_has_name();
}
inline void ParamSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParamSpec::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.name)
}
inline std::string* ParamSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ParamSpec.name)
  return _s;
}
inline const std::string& ParamSpec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ParamSpec::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamSpec::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ParamSpec.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ParamSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ParamSpec.name)
}

// optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::_internal_has_share_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParamSpec::has_share_mode() const {
  return _internal_has_share_mode();
}
inline void ParamSpec::clear_share_mode() {
  _impl_.share_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::ParamSpec_DimCheckMode ParamSpec::_internal_share_mode() const {
  return static_cast< ::apollo::perception::inference::ParamSpec_DimCheckMode >(_impl_.share_mode_);
}
inline ::apollo::perception::inference::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.share_mode)
  return _internal_share_mode();
}
inline void ParamSpec::_internal_set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value) {
  assert(::apollo::perception::inference::ParamSpec_DimCheckMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.share_mode_ = value;
}
inline void ParamSpec::set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value) {
  _internal_set_share_mode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::_internal_has_lr_mult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParamSpec::has_lr_mult() const {
  return _internal_has_lr_mult();
}
inline void ParamSpec::clear_lr_mult() {
  _impl_.lr_mult_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ParamSpec::_internal_lr_mult() const {
  return _impl_.lr_mult_;
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.lr_mult)
  return _internal_lr_mult();
}
inline void ParamSpec::_internal_set_lr_mult(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lr_mult_ = value;
}
inline void ParamSpec::set_lr_mult(float value) {
  _internal_set_lr_mult(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::_internal_has_decay_mult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParamSpec::has_decay_mult() const {
  return _internal_has_decay_mult();
}
inline void ParamSpec::clear_decay_mult() {
  _impl_.decay_mult_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ParamSpec::_internal_decay_mult() const {
  return _impl_.decay_mult_;
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.decay_mult)
  return _internal_decay_mult();
}
inline void ParamSpec::_internal_set_decay_mult(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.decay_mult_ = value;
}
inline void ParamSpec::set_decay_mult(float value) {
  _internal_set_decay_mult(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void LayerParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.name)
}
inline std::string* LayerParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.name)
  return _s;
}
inline const std::string& LayerParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LayerParameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerParameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void LayerParameter::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.type)
}
inline std::string* LayerParameter::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.type)
  return _s;
}
inline const std::string& LayerParameter::_internal_type() const {
  return _impl_.type_.Get();
}
inline void LayerParameter::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerParameter::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::_internal_bottom_size() const {
  return _impl_.bottom_.size();
}
inline int LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void LayerParameter::clear_bottom() {
  _impl_.bottom_.Clear();
}
inline std::string* LayerParameter::add_bottom() {
  std::string* _s = _internal_add_bottom();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.LayerParameter.bottom)
  return _s;
}
inline const std::string& LayerParameter::_internal_bottom(int index) const {
  return _impl_.bottom_.Get(index);
}
inline const std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.bottom)
  return _internal_bottom(index);
}
inline std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.bottom)
  return _impl_.bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const std::string& value) {
  _impl_.bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, std::string&& value) {
  _impl_.bottom_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  _impl_.bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.bottom)
}
inline std::string* LayerParameter::_internal_add_bottom() {
  return _impl_.bottom_.Add();
}
inline void LayerParameter::add_bottom(const std::string& value) {
  _impl_.bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(std::string&& value) {
  _impl_.bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  _impl_.bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.LayerParameter.bottom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.bottom)
  return _impl_.bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.bottom)
  return &_impl_.bottom_;
}

// repeated string top = 4;
inline int LayerParameter::_internal_top_size() const {
  return _impl_.top_.size();
}
inline int LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void LayerParameter::clear_top() {
  _impl_.top_.Clear();
}
inline std::string* LayerParameter::add_top() {
  std::string* _s = _internal_add_top();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.LayerParameter.top)
  return _s;
}
inline const std::string& LayerParameter::_internal_top(int index) const {
  return _impl_.top_.Get(index);
}
inline const std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.top)
  return _internal_top(index);
}
inline std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.top)
  return _impl_.top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const std::string& value) {
  _impl_.top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, std::string&& value) {
  _impl_.top_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  _impl_.top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.top)
}
inline std::string* LayerParameter::_internal_add_top() {
  return _impl_.top_.Add();
}
inline void LayerParameter::add_top(const std::string& value) {
  _impl_.top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::add_top(std::string&& value) {
  _impl_.top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  _impl_.top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.LayerParameter.top)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.top)
  return _impl_.top_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.top)
  return &_impl_.top_;
}

// optional .apollo.perception.inference.Phase phase = 10;
inline bool LayerParameter::_internal_has_phase() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool LayerParameter::has_phase() const {
  return _internal_has_phase();
}
inline void LayerParameter::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::apollo::perception::inference::Phase LayerParameter::_internal_phase() const {
  return static_cast< ::apollo::perception::inference::Phase >(_impl_.phase_);
}
inline ::apollo::perception::inference::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.phase)
  return _internal_phase();
}
inline void LayerParameter::_internal_set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  _impl_._has_bits_[2] |= 0x00000040u;
  _impl_.phase_ = value;
}
inline void LayerParameter::set_phase(::apollo::perception::inference::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::_internal_loss_weight_size() const {
  return _impl_.loss_weight_.size();
}
inline int LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void LayerParameter::clear_loss_weight() {
  _impl_.loss_weight_.Clear();
}
inline float LayerParameter::_internal_loss_weight(int index) const {
  return _impl_.loss_weight_.Get(index);
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.loss_weight)
  return _internal_loss_weight(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  _impl_.loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.loss_weight)
}
inline void LayerParameter::_internal_add_loss_weight(float value) {
  _impl_.loss_weight_.Add(value);
}
inline void LayerParameter::add_loss_weight(float value) {
  _internal_add_loss_weight(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.loss_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::_internal_loss_weight() const {
  return _impl_.loss_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::_internal_mutable_loss_weight() {
  return &_impl_.loss_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.loss_weight)
  return _internal_mutable_loss_weight();
}

// repeated .apollo.perception.inference.ParamSpec param = 6;
inline int LayerParameter::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void LayerParameter::clear_param() {
  _impl_.param_.Clear();
}
inline ::apollo::perception::inference::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.param)
  return _impl_.param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.param)
  return &_impl_.param_;
}
inline const ::apollo::perception::inference::ParamSpec& LayerParameter::_internal_param(int index) const {
  return _impl_.param_.Get(index);
}
inline const ::apollo::perception::inference::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.param)
  return _internal_param(index);
}
inline ::apollo::perception::inference::ParamSpec* LayerParameter::_internal_add_param() {
  return _impl_.param_.Add();
}
inline ::apollo::perception::inference::ParamSpec* LayerParameter::add_param() {
  ::apollo::perception::inference::ParamSpec* _add = _internal_add_param();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.param)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.param)
  return _impl_.param_;
}

// repeated .apollo.perception.inference.BlobProto blobs = 7;
inline int LayerParameter::_internal_blobs_size() const {
  return _impl_.blobs_.size();
}
inline int LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void LayerParameter::clear_blobs() {
  _impl_.blobs_.Clear();
}
inline ::apollo::perception::inference::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.blobs)
  return _impl_.blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.blobs)
  return &_impl_.blobs_;
}
inline const ::apollo::perception::inference::BlobProto& LayerParameter::_internal_blobs(int index) const {
  return _impl_.blobs_.Get(index);
}
inline const ::apollo::perception::inference::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::apollo::perception::inference::BlobProto* LayerParameter::_internal_add_blobs() {
  return _impl_.blobs_.Add();
}
inline ::apollo::perception::inference::BlobProto* LayerParameter::add_blobs() {
  ::apollo::perception::inference::BlobProto* _add = _internal_add_blobs();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.blobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.blobs)
  return _impl_.blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::_internal_propagate_down_size() const {
  return _impl_.propagate_down_.size();
}
inline int LayerParameter::propagate_down_size() const {
  return _internal_propagate_down_size();
}
inline void LayerParameter::clear_propagate_down() {
  _impl_.propagate_down_.Clear();
}
inline bool LayerParameter::_internal_propagate_down(int index) const {
  return _impl_.propagate_down_.Get(index);
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.propagate_down)
  return _internal_propagate_down(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  _impl_.propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.propagate_down)
}
inline void LayerParameter::_internal_add_propagate_down(bool value) {
  _impl_.propagate_down_.Add(value);
}
inline void LayerParameter::add_propagate_down(bool value) {
  _internal_add_propagate_down(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.propagate_down)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
LayerParameter::_internal_propagate_down() const {
  return _impl_.propagate_down_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.propagate_down)
  return _internal_propagate_down();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
LayerParameter::_internal_mutable_propagate_down() {
  return &_impl_.propagate_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.propagate_down)
  return _internal_mutable_propagate_down();
}

// repeated .apollo.perception.inference.NetStateRule include = 8;
inline int LayerParameter::_internal_include_size() const {
  return _impl_.include_.size();
}
inline int LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void LayerParameter::clear_include() {
  _impl_.include_.Clear();
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.include)
  return _impl_.include_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.include)
  return &_impl_.include_;
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::_internal_include(int index) const {
  return _impl_.include_.Get(index);
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.include)
  return _internal_include(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::_internal_add_include() {
  return _impl_.include_.Add();
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::add_include() {
  ::apollo::perception::inference::NetStateRule* _add = _internal_add_include();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.include)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.include)
  return _impl_.include_;
}

// repeated .apollo.perception.inference.NetStateRule exclude = 9;
inline int LayerParameter::_internal_exclude_size() const {
  return _impl_.exclude_.size();
}
inline int LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void LayerParameter::clear_exclude() {
  _impl_.exclude_.Clear();
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.exclude)
  return _impl_.exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.exclude)
  return &_impl_.exclude_;
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::_internal_exclude(int index) const {
  return _impl_.exclude_.Get(index);
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.exclude)
  return _internal_exclude(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::_internal_add_exclude() {
  return _impl_.exclude_.Add();
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::add_exclude() {
  ::apollo::perception::inference::NetStateRule* _add = _internal_add_exclude();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.exclude)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.exclude)
  return _impl_.exclude_;
}

// optional .apollo.perception.inference.TransformationParameter transform_param = 100;
inline bool LayerParameter::_internal_has_transform_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_transform_param() const {
  return _internal_has_transform_param();
}
inline void LayerParameter::clear_transform_param() {
  if (_impl_.transform_param_ != nullptr) _impl_.transform_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::TransformationParameter& LayerParameter::_internal_transform_param() const {
  const ::apollo::perception::inference::TransformationParameter* p = _impl_.transform_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::TransformationParameter&>(
      ::apollo::perception::inference::_TransformationParameter_default_instance_);
}
inline const ::apollo::perception::inference::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_transform_param(
    ::apollo::perception::inference::TransformationParameter* transform_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_param_);
  }
  _impl_.transform_param_ = transform_param;
  if (transform_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.transform_param)
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::release_transform_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::unsafe_arena_release_transform_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.transform_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::_internal_mutable_transform_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::TransformationParameter>(GetArenaForAllocation());
    _impl_.transform_param_ = p;
  }
  return _impl_.transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::mutable_transform_param() {
  ::apollo::perception::inference::TransformationParameter* _msg = _internal_mutable_transform_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.transform_param)
  return _msg;
}
inline void LayerParameter::set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_param_;
  }
  if (transform_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform_param);
    if (message_arena != submessage_arena) {
      transform_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.transform_param)
}

// optional .apollo.perception.inference.LossParameter loss_param = 101;
inline bool LayerParameter::_internal_has_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_loss_param() const {
  return _internal_has_loss_param();
}
inline void LayerParameter::clear_loss_param() {
  if (_impl_.loss_param_ != nullptr) _impl_.loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::LossParameter& LayerParameter::_internal_loss_param() const {
  const ::apollo::perception::inference::LossParameter* p = _impl_.loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::LossParameter&>(
      ::apollo::perception::inference::_LossParameter_default_instance_);
}
inline const ::apollo::perception::inference::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_loss_param(
    ::apollo::perception::inference::LossParameter* loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loss_param_);
  }
  _impl_.loss_param_ = loss_param;
  if (loss_param) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.loss_param)
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::release_loss_param() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::unsafe_arena_release_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.loss_param)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::_internal_mutable_loss_param() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::LossParameter>(GetArenaForAllocation());
    _impl_.loss_param_ = p;
  }
  return _impl_.loss_param_;
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::mutable_loss_param() {
  ::apollo::perception::inference::LossParameter* _msg = _internal_mutable_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loss_param_;
  }
  if (loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loss_param);
    if (message_arena != submessage_arena) {
      loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.loss_param)
}

// optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::_internal_has_accuracy_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_accuracy_param() const {
  return _internal_has_accuracy_param();
}
inline void LayerParameter::clear_accuracy_param() {
  if (_impl_.accuracy_param_ != nullptr) _impl_.accuracy_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::inference::AccuracyParameter& LayerParameter::_internal_accuracy_param() const {
  const ::apollo::perception::inference::AccuracyParameter* p = _impl_.accuracy_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::AccuracyParameter&>(
      ::apollo::perception::inference::_AccuracyParameter_default_instance_);
}
inline const ::apollo::perception::inference::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_accuracy_param(
    ::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accuracy_param_);
  }
  _impl_.accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.accuracy_param)
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::release_accuracy_param() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::unsafe_arena_release_accuracy_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.accuracy_param)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::_internal_mutable_accuracy_param() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::AccuracyParameter>(GetArenaForAllocation());
    _impl_.accuracy_param_ = p;
  }
  return _impl_.accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  ::apollo::perception::inference::AccuracyParameter* _msg = _internal_mutable_accuracy_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.accuracy_param)
  return _msg;
}
inline void LayerParameter::set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.accuracy_param_;
  }
  if (accuracy_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accuracy_param);
    if (message_arena != submessage_arena) {
      accuracy_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.accuracy_param)
}

// optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
inline bool LayerParameter::_internal_has_annotated_data_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.annotated_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_annotated_data_param() const {
  return _internal_has_annotated_data_param();
}
inline void LayerParameter::clear_annotated_data_param() {
  if (_impl_.annotated_data_param_ != nullptr) _impl_.annotated_data_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline const ::apollo::perception::inference::AnnotatedDataParameter& LayerParameter::_internal_annotated_data_param() const {
  const ::apollo::perception::inference::AnnotatedDataParameter* p = _impl_.annotated_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::AnnotatedDataParameter&>(
      ::apollo::perception::inference::_AnnotatedDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::AnnotatedDataParameter& LayerParameter::annotated_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.annotated_data_param)
  return _internal_annotated_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_annotated_data_param(
    ::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotated_data_param_);
  }
  _impl_.annotated_data_param_ = annotated_data_param;
  if (annotated_data_param) {
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.annotated_data_param)
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::release_annotated_data_param() {
  _impl_._has_bits_[1] &= ~0x00020000u;
  ::apollo::perception::inference::AnnotatedDataParameter* temp = _impl_.annotated_data_param_;
  _impl_.annotated_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::unsafe_arena_release_annotated_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.annotated_data_param)
  _impl_._has_bits_[1] &= ~0x00020000u;
  ::apollo::perception::inference::AnnotatedDataParameter* temp = _impl_.annotated_data_param_;
  _impl_.annotated_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::_internal_mutable_annotated_data_param() {
  _impl_._has_bits_[1] |= 0x00020000u;
  if (_impl_.annotated_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::AnnotatedDataParameter>(GetArenaForAllocation());
    _impl_.annotated_data_param_ = p;
  }
  return _impl_.annotated_data_param_;
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::mutable_annotated_data_param() {
  ::apollo::perception::inference::AnnotatedDataParameter* _msg = _internal_mutable_annotated_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.annotated_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_annotated_data_param(::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.annotated_data_param_;
  }
  if (annotated_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(annotated_data_param);
    if (message_arena != submessage_arena) {
      annotated_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotated_data_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }
  _impl_.annotated_data_param_ = annotated_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.annotated_data_param)
}

// optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::_internal_has_argmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argmax_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_argmax_param() const {
  return _internal_has_argmax_param();
}
inline void LayerParameter::clear_argmax_param() {
  if (_impl_.argmax_param_ != nullptr) _impl_.argmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::ArgMaxParameter& LayerParameter::_internal_argmax_param() const {
  const ::apollo::perception::inference::ArgMaxParameter* p = _impl_.argmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ArgMaxParameter&>(
      ::apollo::perception::inference::_ArgMaxParameter_default_instance_);
}
inline const ::apollo::perception::inference::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_argmax_param(
    ::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argmax_param_);
  }
  _impl_.argmax_param_ = argmax_param;
  if (argmax_param) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.argmax_param)
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::release_argmax_param() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::unsafe_arena_release_argmax_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.argmax_param)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::_internal_mutable_argmax_param() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ArgMaxParameter>(GetArenaForAllocation());
    _impl_.argmax_param_ = p;
  }
  return _impl_.argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  ::apollo::perception::inference::ArgMaxParameter* _msg = _internal_mutable_argmax_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.argmax_param)
  return _msg;
}
inline void LayerParameter::set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.argmax_param_;
  }
  if (argmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(argmax_param);
    if (message_arena != submessage_arena) {
      argmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.argmax_param)
}

// optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::_internal_has_batch_norm_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_norm_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_batch_norm_param() const {
  return _internal_has_batch_norm_param();
}
inline void LayerParameter::clear_batch_norm_param() {
  if (_impl_.batch_norm_param_ != nullptr) _impl_.batch_norm_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline const ::apollo::perception::inference::BatchNormParameter& LayerParameter::_internal_batch_norm_param() const {
  const ::apollo::perception::inference::BatchNormParameter* p = _impl_.batch_norm_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BatchNormParameter&>(
      ::apollo::perception::inference::_BatchNormParameter_default_instance_);
}
inline const ::apollo::perception::inference::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.batch_norm_param)
  return _internal_batch_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_batch_norm_param(
    ::apollo::perception::inference::BatchNormParameter* batch_norm_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batch_norm_param_);
  }
  _impl_.batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.batch_norm_param)
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::apollo::perception::inference::BatchNormParameter* temp = _impl_.batch_norm_param_;
  _impl_.batch_norm_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::unsafe_arena_release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.batch_norm_param)
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::apollo::perception::inference::BatchNormParameter* temp = _impl_.batch_norm_param_;
  _impl_.batch_norm_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::_internal_mutable_batch_norm_param() {
  _impl_._has_bits_[1] |= 0x00000200u;
  if (_impl_.batch_norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BatchNormParameter>(GetArenaForAllocation());
    _impl_.batch_norm_param_ = p;
  }
  return _impl_.batch_norm_param_;
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  ::apollo::perception::inference::BatchNormParameter* _msg = _internal_mutable_batch_norm_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.batch_norm_param)
  return _msg;
}
inline void LayerParameter::set_allocated_batch_norm_param(::apollo::perception::inference::BatchNormParameter* batch_norm_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.batch_norm_param_;
  }
  if (batch_norm_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch_norm_param);
    if (message_arena != submessage_arena) {
      batch_norm_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_norm_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  _impl_.batch_norm_param_ = batch_norm_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.batch_norm_param)
}

// optional .apollo.perception.inference.BBoxRegParameter bbox_reg_param = 209;
inline bool LayerParameter::_internal_has_bbox_reg_param() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_reg_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_bbox_reg_param() const {
  return _internal_has_bbox_reg_param();
}
inline void LayerParameter::clear_bbox_reg_param() {
  if (_impl_.bbox_reg_param_ != nullptr) _impl_.bbox_reg_param_->Clear();
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline const ::apollo::perception::inference::BBoxRegParameter& LayerParameter::_internal_bbox_reg_param() const {
  const ::apollo::perception::inference::BBoxRegParameter* p = _impl_.bbox_reg_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BBoxRegParameter&>(
      ::apollo::perception::inference::_BBoxRegParameter_default_instance_);
}
inline const ::apollo::perception::inference::BBoxRegParameter& LayerParameter::bbox_reg_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.bbox_reg_param)
  return _internal_bbox_reg_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_bbox_reg_param(
    ::apollo::perception::inference::BBoxRegParameter* bbox_reg_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_reg_param_);
  }
  _impl_.bbox_reg_param_ = bbox_reg_param;
  if (bbox_reg_param) {
    _impl_._has_bits_[1] |= 0x04000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.bbox_reg_param)
}
inline ::apollo::perception::inference::BBoxRegParameter* LayerParameter::release_bbox_reg_param() {
  _impl_._has_bits_[1] &= ~0x04000000u;
  ::apollo::perception::inference::BBoxRegParameter* temp = _impl_.bbox_reg_param_;
  _impl_.bbox_reg_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BBoxRegParameter* LayerParameter::unsafe_arena_release_bbox_reg_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.bbox_reg_param)
  _impl_._has_bits_[1] &= ~0x04000000u;
  ::apollo::perception::inference::BBoxRegParameter* temp = _impl_.bbox_reg_param_;
  _impl_.bbox_reg_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BBoxRegParameter* LayerParameter::_internal_mutable_bbox_reg_param() {
  _impl_._has_bits_[1] |= 0x04000000u;
  if (_impl_.bbox_reg_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BBoxRegParameter>(GetArenaForAllocation());
    _impl_.bbox_reg_param_ = p;
  }
  return _impl_.bbox_reg_param_;
}
inline ::apollo::perception::inference::BBoxRegParameter* LayerParameter::mutable_bbox_reg_param() {
  ::apollo::perception::inference::BBoxRegParameter* _msg = _internal_mutable_bbox_reg_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.bbox_reg_param)
  return _msg;
}
inline void LayerParameter::set_allocated_bbox_reg_param(::apollo::perception::inference::BBoxRegParameter* bbox_reg_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bbox_reg_param_;
  }
  if (bbox_reg_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bbox_reg_param);
    if (message_arena != submessage_arena) {
      bbox_reg_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox_reg_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x04000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x04000000u;
  }
  _impl_.bbox_reg_param_ = bbox_reg_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.bbox_reg_param)
}

// optional .apollo.perception.inference.BiasParameter bias_param = 141;
inline bool LayerParameter::_internal_has_bias_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_bias_param() const {
  return _internal_has_bias_param();
}
inline void LayerParameter::clear_bias_param() {
  if (_impl_.bias_param_ != nullptr) _impl_.bias_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline const ::apollo::perception::inference::BiasParameter& LayerParameter::_internal_bias_param() const {
  const ::apollo::perception::inference::BiasParameter* p = _impl_.bias_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BiasParameter&>(
      ::apollo::perception::inference::_BiasParameter_default_instance_);
}
inline const ::apollo::perception::inference::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.bias_param)
  return _internal_bias_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_bias_param(
    ::apollo::perception::inference::BiasParameter* bias_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_param_);
  }
  _impl_.bias_param_ = bias_param;
  if (bias_param) {
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.bias_param)
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::release_bias_param() {
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::apollo::perception::inference::BiasParameter* temp = _impl_.bias_param_;
  _impl_.bias_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::unsafe_arena_release_bias_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.bias_param)
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::apollo::perception::inference::BiasParameter* temp = _impl_.bias_param_;
  _impl_.bias_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::_internal_mutable_bias_param() {
  _impl_._has_bits_[1] |= 0x00000800u;
  if (_impl_.bias_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BiasParameter>(GetArenaForAllocation());
    _impl_.bias_param_ = p;
  }
  return _impl_.bias_param_;
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::mutable_bias_param() {
  ::apollo::perception::inference::BiasParameter* _msg = _internal_mutable_bias_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.bias_param)
  return _msg;
}
inline void LayerParameter::set_allocated_bias_param(::apollo::perception::inference::BiasParameter* bias_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_param_;
  }
  if (bias_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_param);
    if (message_arena != submessage_arena) {
      bias_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  _impl_.bias_param_ = bias_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.bias_param)
}

// optional .apollo.perception.inference.ConcatParameter concat_param = 104;
inline bool LayerParameter::_internal_has_concat_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concat_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_concat_param() const {
  return _internal_has_concat_param();
}
inline void LayerParameter::clear_concat_param() {
  if (_impl_.concat_param_ != nullptr) _impl_.concat_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::perception::inference::ConcatParameter& LayerParameter::_internal_concat_param() const {
  const ::apollo::perception::inference::ConcatParameter* p = _impl_.concat_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ConcatParameter&>(
      ::apollo::perception::inference::_ConcatParameter_default_instance_);
}
inline const ::apollo::perception::inference::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_concat_param(
    ::apollo::perception::inference::ConcatParameter* concat_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concat_param_);
  }
  _impl_.concat_param_ = concat_param;
  if (concat_param) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.concat_param)
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::release_concat_param() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::unsafe_arena_release_concat_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.concat_param)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::_internal_mutable_concat_param() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ConcatParameter>(GetArenaForAllocation());
    _impl_.concat_param_ = p;
  }
  return _impl_.concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::mutable_concat_param() {
  ::apollo::perception::inference::ConcatParameter* _msg = _internal_mutable_concat_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.concat_param)
  return _msg;
}
inline void LayerParameter::set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.concat_param_;
  }
  if (concat_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(concat_param);
    if (message_arena != submessage_arena) {
      concat_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.concat_param)
}

// optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::_internal_has_contrastive_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contrastive_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_contrastive_loss_param() const {
  return _internal_has_contrastive_loss_param();
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (_impl_.contrastive_loss_param_ != nullptr) _impl_.contrastive_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& LayerParameter::_internal_contrastive_loss_param() const {
  const ::apollo::perception::inference::ContrastiveLossParameter* p = _impl_.contrastive_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ContrastiveLossParameter&>(
      ::apollo::perception::inference::_ContrastiveLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(
    ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contrastive_loss_param_);
  }
  _impl_.contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.contrastive_loss_param)
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.contrastive_loss_param)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::_internal_mutable_contrastive_loss_param() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ContrastiveLossParameter>(GetArenaForAllocation());
    _impl_.contrastive_loss_param_ = p;
  }
  return _impl_.contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  ::apollo::perception::inference::ContrastiveLossParameter* _msg = _internal_mutable_contrastive_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.contrastive_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contrastive_loss_param);
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.contrastive_loss_param)
}

// optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::_internal_has_convolution_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convolution_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void LayerParameter::clear_convolution_param() {
  if (_impl_.convolution_param_ != nullptr) _impl_.convolution_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::perception::inference::ConvolutionParameter& LayerParameter::_internal_convolution_param() const {
  const ::apollo::perception::inference::ConvolutionParameter* p = _impl_.convolution_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ConvolutionParameter&>(
      ::apollo::perception::inference::_ConvolutionParameter_default_instance_);
}
inline const ::apollo::perception::inference::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_convolution_param(
    ::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convolution_param_);
  }
  _impl_.convolution_param_ = convolution_param;
  if (convolution_param) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.convolution_param)
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::release_convolution_param() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::perception::inference::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::unsafe_arena_release_convolution_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.convolution_param)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::perception::inference::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::_internal_mutable_convolution_param() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ConvolutionParameter>(GetArenaForAllocation());
    _impl_.convolution_param_ = p;
  }
  return _impl_.convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  ::apollo::perception::inference::ConvolutionParameter* _msg = _internal_mutable_convolution_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.convolution_param)
  return _msg;
}
inline void LayerParameter::set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.convolution_param_;
  }
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(convolution_param);
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.convolution_param)
}

// optional .apollo.perception.inference.CropParameter crop_param = 144;
inline bool LayerParameter::_internal_has_crop_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crop_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_crop_param() const {
  return _internal_has_crop_param();
}
inline void LayerParameter::clear_crop_param() {
  if (_impl_.crop_param_ != nullptr) _impl_.crop_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline const ::apollo::perception::inference::CropParameter& LayerParameter::_internal_crop_param() const {
  const ::apollo::perception::inference::CropParameter* p = _impl_.crop_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::CropParameter&>(
      ::apollo::perception::inference::_CropParameter_default_instance_);
}
inline const ::apollo::perception::inference::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.crop_param)
  return _internal_crop_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_crop_param(
    ::apollo::perception::inference::CropParameter* crop_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_param_);
  }
  _impl_.crop_param_ = crop_param;
  if (crop_param) {
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.crop_param)
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::release_crop_param() {
  _impl_._has_bits_[1] &= ~0x00004000u;
  ::apollo::perception::inference::CropParameter* temp = _impl_.crop_param_;
  _impl_.crop_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::unsafe_arena_release_crop_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.crop_param)
  _impl_._has_bits_[1] &= ~0x00004000u;
  ::apollo::perception::inference::CropParameter* temp = _impl_.crop_param_;
  _impl_.crop_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::_internal_mutable_crop_param() {
  _impl_._has_bits_[1] |= 0x00004000u;
  if (_impl_.crop_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::CropParameter>(GetArenaForAllocation());
    _impl_.crop_param_ = p;
  }
  return _impl_.crop_param_;
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::mutable_crop_param() {
  ::apollo::perception::inference::CropParameter* _msg = _internal_mutable_crop_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.crop_param)
  return _msg;
}
inline void LayerParameter::set_allocated_crop_param(::apollo::perception::inference::CropParameter* crop_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.crop_param_;
  }
  if (crop_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crop_param);
    if (message_arena != submessage_arena) {
      crop_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }
  _impl_.crop_param_ = crop_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.crop_param)
}

// optional .apollo.perception.inference.DataParameter data_param = 107;
inline bool LayerParameter::_internal_has_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_data_param() const {
  return _internal_has_data_param();
}
inline void LayerParameter::clear_data_param() {
  if (_impl_.data_param_ != nullptr) _impl_.data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::perception::inference::DataParameter& LayerParameter::_internal_data_param() const {
  const ::apollo::perception::inference::DataParameter* p = _impl_.data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DataParameter&>(
      ::apollo::perception::inference::_DataParameter_default_instance_);
}
inline const ::apollo::perception::inference::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.data_param)
  return _internal_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_data_param(
    ::apollo::perception::inference::DataParameter* data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_param_);
  }
  _impl_.data_param_ = data_param;
  if (data_param) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.data_param)
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::release_data_param() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::perception::inference::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::unsafe_arena_release_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.data_param)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::perception::inference::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::_internal_mutable_data_param() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DataParameter>(GetArenaForAllocation());
    _impl_.data_param_ = p;
  }
  return _impl_.data_param_;
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::mutable_data_param() {
  ::apollo::perception::inference::DataParameter* _msg = _internal_mutable_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_param_;
  }
  if (data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_param);
    if (message_arena != submessage_arena) {
      data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.data_param)
}

// optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
inline bool LayerParameter::_internal_has_detection_evaluate_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_evaluate_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_detection_evaluate_param() const {
  return _internal_has_detection_evaluate_param();
}
inline void LayerParameter::clear_detection_evaluate_param() {
  if (_impl_.detection_evaluate_param_ != nullptr) _impl_.detection_evaluate_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline const ::apollo::perception::inference::DetectionEvaluateParameter& LayerParameter::_internal_detection_evaluate_param() const {
  const ::apollo::perception::inference::DetectionEvaluateParameter* p = _impl_.detection_evaluate_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DetectionEvaluateParameter&>(
      ::apollo::perception::inference::_DetectionEvaluateParameter_default_instance_);
}
inline const ::apollo::perception::inference::DetectionEvaluateParameter& LayerParameter::detection_evaluate_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.detection_evaluate_param)
  return _internal_detection_evaluate_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_detection_evaluate_param(
    ::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detection_evaluate_param_);
  }
  _impl_.detection_evaluate_param_ = detection_evaluate_param;
  if (detection_evaluate_param) {
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.detection_evaluate_param)
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::release_detection_evaluate_param() {
  _impl_._has_bits_[1] &= ~0x00400000u;
  ::apollo::perception::inference::DetectionEvaluateParameter* temp = _impl_.detection_evaluate_param_;
  _impl_.detection_evaluate_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::unsafe_arena_release_detection_evaluate_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.detection_evaluate_param)
  _impl_._has_bits_[1] &= ~0x00400000u;
  ::apollo::perception::inference::DetectionEvaluateParameter* temp = _impl_.detection_evaluate_param_;
  _impl_.detection_evaluate_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::_internal_mutable_detection_evaluate_param() {
  _impl_._has_bits_[1] |= 0x00400000u;
  if (_impl_.detection_evaluate_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DetectionEvaluateParameter>(GetArenaForAllocation());
    _impl_.detection_evaluate_param_ = p;
  }
  return _impl_.detection_evaluate_param_;
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::mutable_detection_evaluate_param() {
  ::apollo::perception::inference::DetectionEvaluateParameter* _msg = _internal_mutable_detection_evaluate_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.detection_evaluate_param)
  return _msg;
}
inline void LayerParameter::set_allocated_detection_evaluate_param(::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.detection_evaluate_param_;
  }
  if (detection_evaluate_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detection_evaluate_param);
    if (message_arena != submessage_arena) {
      detection_evaluate_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_evaluate_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }
  _impl_.detection_evaluate_param_ = detection_evaluate_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.detection_evaluate_param)
}

// optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
inline bool LayerParameter::_internal_has_detection_output_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void LayerParameter::clear_detection_output_param() {
  if (_impl_.detection_output_param_ != nullptr) _impl_.detection_output_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline const ::apollo::perception::inference::DetectionOutputParameter& LayerParameter::_internal_detection_output_param() const {
  const ::apollo::perception::inference::DetectionOutputParameter* p = _impl_.detection_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DetectionOutputParameter&>(
      ::apollo::perception::inference::_DetectionOutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.detection_output_param)
  return _internal_detection_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_detection_output_param(
    ::apollo::perception::inference::DetectionOutputParameter* detection_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detection_output_param_);
  }
  _impl_.detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.detection_output_param)
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  _impl_._has_bits_[1] &= ~0x00200000u;
  ::apollo::perception::inference::DetectionOutputParameter* temp = _impl_.detection_output_param_;
  _impl_.detection_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::unsafe_arena_release_detection_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.detection_output_param)
  _impl_._has_bits_[1] &= ~0x00200000u;
  ::apollo::perception::inference::DetectionOutputParameter* temp = _impl_.detection_output_param_;
  _impl_.detection_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::_internal_mutable_detection_output_param() {
  _impl_._has_bits_[1] |= 0x00200000u;
  if (_impl_.detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DetectionOutputParameter>(GetArenaForAllocation());
    _impl_.detection_output_param_ = p;
  }
  return _impl_.detection_output_param_;
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  ::apollo::perception::inference::DetectionOutputParameter* _msg = _internal_mutable_detection_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.detection_output_param)
  return _msg;
}
inline void LayerParameter::set_allocated_detection_output_param(::apollo::perception::inference::DetectionOutputParameter* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detection_output_param);
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }
  _impl_.detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.detection_output_param)
}

// optional .apollo.perception.inference.DetectionOutputSSDParameter detection_output_ssd_param = 210;
inline bool LayerParameter::_internal_has_detection_output_ssd_param() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_output_ssd_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_detection_output_ssd_param() const {
  return _internal_has_detection_output_ssd_param();
}
inline void LayerParameter::clear_detection_output_ssd_param() {
  if (_impl_.detection_output_ssd_param_ != nullptr) _impl_.detection_output_ssd_param_->Clear();
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline const ::apollo::perception::inference::DetectionOutputSSDParameter& LayerParameter::_internal_detection_output_ssd_param() const {
  const ::apollo::perception::inference::DetectionOutputSSDParameter* p = _impl_.detection_output_ssd_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DetectionOutputSSDParameter&>(
      ::apollo::perception::inference::_DetectionOutputSSDParameter_default_instance_);
}
inline const ::apollo::perception::inference::DetectionOutputSSDParameter& LayerParameter::detection_output_ssd_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.detection_output_ssd_param)
  return _internal_detection_output_ssd_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_detection_output_ssd_param(
    ::apollo::perception::inference::DetectionOutputSSDParameter* detection_output_ssd_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detection_output_ssd_param_);
  }
  _impl_.detection_output_ssd_param_ = detection_output_ssd_param;
  if (detection_output_ssd_param) {
    _impl_._has_bits_[1] |= 0x08000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.detection_output_ssd_param)
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter* LayerParameter::release_detection_output_ssd_param() {
  _impl_._has_bits_[1] &= ~0x08000000u;
  ::apollo::perception::inference::DetectionOutputSSDParameter* temp = _impl_.detection_output_ssd_param_;
  _impl_.detection_output_ssd_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter* LayerParameter::unsafe_arena_release_detection_output_ssd_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.detection_output_ssd_param)
  _impl_._has_bits_[1] &= ~0x08000000u;
  ::apollo::perception::inference::DetectionOutputSSDParameter* temp = _impl_.detection_output_ssd_param_;
  _impl_.detection_output_ssd_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter* LayerParameter::_internal_mutable_detection_output_ssd_param() {
  _impl_._has_bits_[1] |= 0x08000000u;
  if (_impl_.detection_output_ssd_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DetectionOutputSSDParameter>(GetArenaForAllocation());
    _impl_.detection_output_ssd_param_ = p;
  }
  return _impl_.detection_output_ssd_param_;
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter* LayerParameter::mutable_detection_output_ssd_param() {
  ::apollo::perception::inference::DetectionOutputSSDParameter* _msg = _internal_mutable_detection_output_ssd_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.detection_output_ssd_param)
  return _msg;
}
inline void LayerParameter::set_allocated_detection_output_ssd_param(::apollo::perception::inference::DetectionOutputSSDParameter* detection_output_ssd_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.detection_output_ssd_param_;
  }
  if (detection_output_ssd_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detection_output_ssd_param);
    if (message_arena != submessage_arena) {
      detection_output_ssd_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_ssd_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x08000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x08000000u;
  }
  _impl_.detection_output_ssd_param_ = detection_output_ssd_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.detection_output_ssd_param)
}

// optional .apollo.perception.inference.DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
inline bool LayerParameter::_internal_has_dfmb_psroi_pooling_param() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dfmb_psroi_pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dfmb_psroi_pooling_param() const {
  return _internal_has_dfmb_psroi_pooling_param();
}
inline void LayerParameter::clear_dfmb_psroi_pooling_param() {
  if (_impl_.dfmb_psroi_pooling_param_ != nullptr) _impl_.dfmb_psroi_pooling_param_->Clear();
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline const ::apollo::perception::inference::DFMBPSROIAlignParameter& LayerParameter::_internal_dfmb_psroi_pooling_param() const {
  const ::apollo::perception::inference::DFMBPSROIAlignParameter* p = _impl_.dfmb_psroi_pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DFMBPSROIAlignParameter&>(
      ::apollo::perception::inference::_DFMBPSROIAlignParameter_default_instance_);
}
inline const ::apollo::perception::inference::DFMBPSROIAlignParameter& LayerParameter::dfmb_psroi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.dfmb_psroi_pooling_param)
  return _internal_dfmb_psroi_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dfmb_psroi_pooling_param(
    ::apollo::perception::inference::DFMBPSROIAlignParameter* dfmb_psroi_pooling_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dfmb_psroi_pooling_param_);
  }
  _impl_.dfmb_psroi_pooling_param_ = dfmb_psroi_pooling_param;
  if (dfmb_psroi_pooling_param) {
    _impl_._has_bits_[1] |= 0x02000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.dfmb_psroi_pooling_param)
}
inline ::apollo::perception::inference::DFMBPSROIAlignParameter* LayerParameter::release_dfmb_psroi_pooling_param() {
  _impl_._has_bits_[1] &= ~0x02000000u;
  ::apollo::perception::inference::DFMBPSROIAlignParameter* temp = _impl_.dfmb_psroi_pooling_param_;
  _impl_.dfmb_psroi_pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DFMBPSROIAlignParameter* LayerParameter::unsafe_arena_release_dfmb_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.dfmb_psroi_pooling_param)
  _impl_._has_bits_[1] &= ~0x02000000u;
  ::apollo::perception::inference::DFMBPSROIAlignParameter* temp = _impl_.dfmb_psroi_pooling_param_;
  _impl_.dfmb_psroi_pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DFMBPSROIAlignParameter* LayerParameter::_internal_mutable_dfmb_psroi_pooling_param() {
  _impl_._has_bits_[1] |= 0x02000000u;
  if (_impl_.dfmb_psroi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DFMBPSROIAlignParameter>(GetArenaForAllocation());
    _impl_.dfmb_psroi_pooling_param_ = p;
  }
  return _impl_.dfmb_psroi_pooling_param_;
}
inline ::apollo::perception::inference::DFMBPSROIAlignParameter* LayerParameter::mutable_dfmb_psroi_pooling_param() {
  ::apollo::perception::inference::DFMBPSROIAlignParameter* _msg = _internal_mutable_dfmb_psroi_pooling_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.dfmb_psroi_pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_dfmb_psroi_pooling_param(::apollo::perception::inference::DFMBPSROIAlignParameter* dfmb_psroi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dfmb_psroi_pooling_param_;
  }
  if (dfmb_psroi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dfmb_psroi_pooling_param);
    if (message_arena != submessage_arena) {
      dfmb_psroi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dfmb_psroi_pooling_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x02000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x02000000u;
  }
  _impl_.dfmb_psroi_pooling_param_ = dfmb_psroi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.dfmb_psroi_pooling_param)
}

// optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
inline bool LayerParameter::_internal_has_dropout_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dropout_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dropout_param() const {
  return _internal_has_dropout_param();
}
inline void LayerParameter::clear_dropout_param() {
  if (_impl_.dropout_param_ != nullptr) _impl_.dropout_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::perception::inference::DropoutParameter& LayerParameter::_internal_dropout_param() const {
  const ::apollo::perception::inference::DropoutParameter* p = _impl_.dropout_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DropoutParameter&>(
      ::apollo::perception::inference::_DropoutParameter_default_instance_);
}
inline const ::apollo::perception::inference::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dropout_param(
    ::apollo::perception::inference::DropoutParameter* dropout_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dropout_param_);
  }
  _impl_.dropout_param_ = dropout_param;
  if (dropout_param) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.dropout_param)
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::release_dropout_param() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::perception::inference::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::unsafe_arena_release_dropout_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.dropout_param)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::perception::inference::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::_internal_mutable_dropout_param() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DropoutParameter>(GetArenaForAllocation());
    _impl_.dropout_param_ = p;
  }
  return _impl_.dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::mutable_dropout_param() {
  ::apollo::perception::inference::DropoutParameter* _msg = _internal_mutable_dropout_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.dropout_param)
  return _msg;
}
inline void LayerParameter::set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dropout_param_;
  }
  if (dropout_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dropout_param);
    if (message_arena != submessage_arena) {
      dropout_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.dropout_param)
}

// optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::_internal_has_dummy_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dummy_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_dummy_data_param() const {
  return _internal_has_dummy_data_param();
}
inline void LayerParameter::clear_dummy_data_param() {
  if (_impl_.dummy_data_param_ != nullptr) _impl_.dummy_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::perception::inference::DummyDataParameter& LayerParameter::_internal_dummy_data_param() const {
  const ::apollo::perception::inference::DummyDataParameter* p = _impl_.dummy_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DummyDataParameter&>(
      ::apollo::perception::inference::_DummyDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dummy_data_param(
    ::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dummy_data_param_);
  }
  _impl_.dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.dummy_data_param)
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::perception::inference::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::unsafe_arena_release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.dummy_data_param)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::perception::inference::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::_internal_mutable_dummy_data_param() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DummyDataParameter>(GetArenaForAllocation());
    _impl_.dummy_data_param_ = p;
  }
  return _impl_.dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  ::apollo::perception::inference::DummyDataParameter* _msg = _internal_mutable_dummy_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.dummy_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dummy_data_param_;
  }
  if (dummy_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dummy_data_param);
    if (message_arena != submessage_arena) {
      dummy_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.dummy_data_param)
}

// optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::_internal_has_eltwise_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eltwise_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_eltwise_param() const {
  return _internal_has_eltwise_param();
}
inline void LayerParameter::clear_eltwise_param() {
  if (_impl_.eltwise_param_ != nullptr) _impl_.eltwise_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::perception::inference::EltwiseParameter& LayerParameter::_internal_eltwise_param() const {
  const ::apollo::perception::inference::EltwiseParameter* p = _impl_.eltwise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::EltwiseParameter&>(
      ::apollo::perception::inference::_EltwiseParameter_default_instance_);
}
inline const ::apollo::perception::inference::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_eltwise_param(
    ::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eltwise_param_);
  }
  _impl_.eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.eltwise_param)
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::release_eltwise_param() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::inference::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::unsafe_arena_release_eltwise_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.eltwise_param)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::inference::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::_internal_mutable_eltwise_param() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::EltwiseParameter>(GetArenaForAllocation());
    _impl_.eltwise_param_ = p;
  }
  return _impl_.eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  ::apollo::perception::inference::EltwiseParameter* _msg = _internal_mutable_eltwise_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.eltwise_param)
  return _msg;
}
inline void LayerParameter::set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.eltwise_param_;
  }
  if (eltwise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eltwise_param);
    if (message_arena != submessage_arena) {
      eltwise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.eltwise_param)
}

// optional .apollo.perception.inference.ELUParameter elu_param = 140;
inline bool LayerParameter::_internal_has_elu_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.elu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_elu_param() const {
  return _internal_has_elu_param();
}
inline void LayerParameter::clear_elu_param() {
  if (_impl_.elu_param_ != nullptr) _impl_.elu_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline const ::apollo::perception::inference::ELUParameter& LayerParameter::_internal_elu_param() const {
  const ::apollo::perception::inference::ELUParameter* p = _impl_.elu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ELUParameter&>(
      ::apollo::perception::inference::_ELUParameter_default_instance_);
}
inline const ::apollo::perception::inference::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.elu_param)
  return _internal_elu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_elu_param(
    ::apollo::perception::inference::ELUParameter* elu_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elu_param_);
  }
  _impl_.elu_param_ = elu_param;
  if (elu_param) {
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.elu_param)
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::release_elu_param() {
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::apollo::perception::inference::ELUParameter* temp = _impl_.elu_param_;
  _impl_.elu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::unsafe_arena_release_elu_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.elu_param)
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::apollo::perception::inference::ELUParameter* temp = _impl_.elu_param_;
  _impl_.elu_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::_internal_mutable_elu_param() {
  _impl_._has_bits_[1] |= 0x00000400u;
  if (_impl_.elu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ELUParameter>(GetArenaForAllocation());
    _impl_.elu_param_ = p;
  }
  return _impl_.elu_param_;
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::mutable_elu_param() {
  ::apollo::perception::inference::ELUParameter* _msg = _internal_mutable_elu_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.elu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_elu_param(::apollo::perception::inference::ELUParameter* elu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.elu_param_;
  }
  if (elu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(elu_param);
    if (message_arena != submessage_arena) {
      elu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elu_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  _impl_.elu_param_ = elu_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.elu_param)
}

// optional .apollo.perception.inference.EmbedParameter embed_param = 137;
inline bool LayerParameter::_internal_has_embed_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.embed_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_embed_param() const {
  return _internal_has_embed_param();
}
inline void LayerParameter::clear_embed_param() {
  if (_impl_.embed_param_ != nullptr) _impl_.embed_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline const ::apollo::perception::inference::EmbedParameter& LayerParameter::_internal_embed_param() const {
  const ::apollo::perception::inference::EmbedParameter* p = _impl_.embed_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::EmbedParameter&>(
      ::apollo::perception::inference::_EmbedParameter_default_instance_);
}
inline const ::apollo::perception::inference::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.embed_param)
  return _internal_embed_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_embed_param(
    ::apollo::perception::inference::EmbedParameter* embed_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.embed_param_);
  }
  _impl_.embed_param_ = embed_param;
  if (embed_param) {
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.embed_param)
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::release_embed_param() {
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::apollo::perception::inference::EmbedParameter* temp = _impl_.embed_param_;
  _impl_.embed_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::unsafe_arena_release_embed_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.embed_param)
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::apollo::perception::inference::EmbedParameter* temp = _impl_.embed_param_;
  _impl_.embed_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::_internal_mutable_embed_param() {
  _impl_._has_bits_[1] |= 0x00000080u;
  if (_impl_.embed_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::EmbedParameter>(GetArenaForAllocation());
    _impl_.embed_param_ = p;
  }
  return _impl_.embed_param_;
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::mutable_embed_param() {
  ::apollo::perception::inference::EmbedParameter* _msg = _internal_mutable_embed_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.embed_param)
  return _msg;
}
inline void LayerParameter::set_allocated_embed_param(::apollo::perception::inference::EmbedParameter* embed_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.embed_param_;
  }
  if (embed_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(embed_param);
    if (message_arena != submessage_arena) {
      embed_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embed_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  _impl_.embed_param_ = embed_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.embed_param)
}

// optional .apollo.perception.inference.ExpParameter exp_param = 111;
inline bool LayerParameter::_internal_has_exp_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exp_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_exp_param() const {
  return _internal_has_exp_param();
}
inline void LayerParameter::clear_exp_param() {
  if (_impl_.exp_param_ != nullptr) _impl_.exp_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::perception::inference::ExpParameter& LayerParameter::_internal_exp_param() const {
  const ::apollo::perception::inference::ExpParameter* p = _impl_.exp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ExpParameter&>(
      ::apollo::perception::inference::_ExpParameter_default_instance_);
}
inline const ::apollo::perception::inference::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_exp_param(
    ::apollo::perception::inference::ExpParameter* exp_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exp_param_);
  }
  _impl_.exp_param_ = exp_param;
  if (exp_param) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.exp_param)
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::release_exp_param() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::perception::inference::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::unsafe_arena_release_exp_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.exp_param)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::perception::inference::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::_internal_mutable_exp_param() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ExpParameter>(GetArenaForAllocation());
    _impl_.exp_param_ = p;
  }
  return _impl_.exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::mutable_exp_param() {
  ::apollo::perception::inference::ExpParameter* _msg = _internal_mutable_exp_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.exp_param)
  return _msg;
}
inline void LayerParameter::set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.exp_param_;
  }
  if (exp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exp_param);
    if (message_arena != submessage_arena) {
      exp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.exp_param)
}

// optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
inline bool LayerParameter::_internal_has_flatten_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.flatten_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_flatten_param() const {
  return _internal_has_flatten_param();
}
inline void LayerParameter::clear_flatten_param() {
  if (_impl_.flatten_param_ != nullptr) _impl_.flatten_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::FlattenParameter& LayerParameter::_internal_flatten_param() const {
  const ::apollo::perception::inference::FlattenParameter* p = _impl_.flatten_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FlattenParameter&>(
      ::apollo::perception::inference::_FlattenParameter_default_instance_);
}
inline const ::apollo::perception::inference::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.flatten_param)
  return _internal_flatten_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_flatten_param(
    ::apollo::perception::inference::FlattenParameter* flatten_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flatten_param_);
  }
  _impl_.flatten_param_ = flatten_param;
  if (flatten_param) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.flatten_param)
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::release_flatten_param() {
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::apollo::perception::inference::FlattenParameter* temp = _impl_.flatten_param_;
  _impl_.flatten_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::unsafe_arena_release_flatten_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.flatten_param)
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::apollo::perception::inference::FlattenParameter* temp = _impl_.flatten_param_;
  _impl_.flatten_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::_internal_mutable_flatten_param() {
  _impl_._has_bits_[1] |= 0x00000020u;
  if (_impl_.flatten_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FlattenParameter>(GetArenaForAllocation());
    _impl_.flatten_param_ = p;
  }
  return _impl_.flatten_param_;
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::mutable_flatten_param() {
  ::apollo::perception::inference::FlattenParameter* _msg = _internal_mutable_flatten_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.flatten_param)
  return _msg;
}
inline void LayerParameter::set_allocated_flatten_param(::apollo::perception::inference::FlattenParameter* flatten_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.flatten_param_;
  }
  if (flatten_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flatten_param);
    if (message_arena != submessage_arena) {
      flatten_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  _impl_.flatten_param_ = flatten_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.flatten_param)
}

// optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::_internal_has_hdf5_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_data_param() const {
  return _internal_has_hdf5_data_param();
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (_impl_.hdf5_data_param_ != nullptr) _impl_.hdf5_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::perception::inference::HDF5DataParameter& LayerParameter::_internal_hdf5_data_param() const {
  const ::apollo::perception::inference::HDF5DataParameter* p = _impl_.hdf5_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HDF5DataParameter&>(
      ::apollo::perception::inference::_HDF5DataParameter_default_instance_);
}
inline const ::apollo::perception::inference::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(
    ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdf5_data_param_);
  }
  _impl_.hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.hdf5_data_param)
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::perception::inference::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::unsafe_arena_release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.hdf5_data_param)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::perception::inference::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::_internal_mutable_hdf5_data_param() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HDF5DataParameter>(GetArenaForAllocation());
    _impl_.hdf5_data_param_ = p;
  }
  return _impl_.hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  ::apollo::perception::inference::HDF5DataParameter* _msg = _internal_mutable_hdf5_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hdf5_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hdf5_data_param);
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hdf5_data_param)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::perception::inference::HDF5OutputParameter& LayerParameter::_internal_hdf5_output_param() const {
  const ::apollo::perception::inference::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HDF5OutputParameter&>(
      ::apollo::perception::inference::_HDF5OutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.hdf5_output_param)
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.hdf5_output_param)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::_internal_mutable_hdf5_output_param() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HDF5OutputParameter>(GetArenaForAllocation());
    _impl_.hdf5_output_param_ = p;
  }
  return _impl_.hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  ::apollo::perception::inference::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hdf5_output_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hdf5_output_param)
}

// optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::_internal_has_hinge_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hinge_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_hinge_loss_param() const {
  return _internal_has_hinge_loss_param();
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (_impl_.hinge_loss_param_ != nullptr) _impl_.hinge_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::perception::inference::HingeLossParameter& LayerParameter::_internal_hinge_loss_param() const {
  const ::apollo::perception::inference::HingeLossParameter* p = _impl_.hinge_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HingeLossParameter&>(
      ::apollo::perception::inference::_HingeLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(
    ::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hinge_loss_param_);
  }
  _impl_.hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.hinge_loss_param)
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::perception::inference::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::unsafe_arena_release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.hinge_loss_param)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::perception::inference::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::_internal_mutable_hinge_loss_param() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HingeLossParameter>(GetArenaForAllocation());
    _impl_.hinge_loss_param_ = p;
  }
  return _impl_.hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  ::apollo::perception::inference::HingeLossParameter* _msg = _internal_mutable_hinge_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hinge_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hinge_loss_param);
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hinge_loss_param)
}

// optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::_internal_has_image_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_image_data_param() const {
  return _internal_has_image_data_param();
}
inline void LayerParameter::clear_image_data_param() {
  if (_impl_.image_data_param_ != nullptr) _impl_.image_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::_internal_image_data_param() const {
  const ::apollo::perception::inference::ImageDataParameter* p = _impl_.image_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ImageDataParameter&>(
      ::apollo::perception::inference::_ImageDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_image_data_param(
    ::apollo::perception::inference::ImageDataParameter* image_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_param_);
  }
  _impl_.image_data_param_ = image_data_param;
  if (image_data_param) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.image_data_param)
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::release_image_data_param() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::perception::inference::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::unsafe_arena_release_image_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.image_data_param)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::perception::inference::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::_internal_mutable_image_data_param() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ImageDataParameter>(GetArenaForAllocation());
    _impl_.image_data_param_ = p;
  }
  return _impl_.image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  ::apollo::perception::inference::ImageDataParameter* _msg = _internal_mutable_image_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.image_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_data_param_;
  }
  if (image_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_data_param);
    if (message_arena != submessage_arena) {
      image_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.image_data_param)
}

// repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
inline int LayerParameter::_internal_yolo_data_param_size() const {
  return _impl_.yolo_data_param_.size();
}
inline int LayerParameter::yolo_data_param_size() const {
  return _internal_yolo_data_param_size();
}
inline void LayerParameter::clear_yolo_data_param() {
  _impl_.yolo_data_param_.Clear();
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::mutable_yolo_data_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_data_param)
  return _impl_.yolo_data_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >*
LayerParameter::mutable_yolo_data_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.yolo_data_param)
  return &_impl_.yolo_data_param_;
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::_internal_yolo_data_param(int index) const {
  return _impl_.yolo_data_param_.Get(index);
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::yolo_data_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_data_param)
  return _internal_yolo_data_param(index);
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::_internal_add_yolo_data_param() {
  return _impl_.yolo_data_param_.Add();
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::add_yolo_data_param() {
  ::apollo::perception::inference::ImageDataParameter* _add = _internal_add_yolo_data_param();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.yolo_data_param)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >&
LayerParameter::yolo_data_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.yolo_data_param)
  return _impl_.yolo_data_param_;
}

// repeated float data_prob_param = 1707112;
inline int LayerParameter::_internal_data_prob_param_size() const {
  return _impl_.data_prob_param_.size();
}
inline int LayerParameter::data_prob_param_size() const {
  return _internal_data_prob_param_size();
}
inline void LayerParameter::clear_data_prob_param() {
  _impl_.data_prob_param_.Clear();
}
inline float LayerParameter::_internal_data_prob_param(int index) const {
  return _impl_.data_prob_param_.Get(index);
}
inline float LayerParameter::data_prob_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.data_prob_param)
  return _internal_data_prob_param(index);
}
inline void LayerParameter::set_data_prob_param(int index, float value) {
  _impl_.data_prob_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.data_prob_param)
}
inline void LayerParameter::_internal_add_data_prob_param(float value) {
  _impl_.data_prob_param_.Add(value);
}
inline void LayerParameter::add_data_prob_param(float value) {
  _internal_add_data_prob_param(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.data_prob_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::_internal_data_prob_param() const {
  return _impl_.data_prob_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayerParameter::data_prob_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.data_prob_param)
  return _internal_data_prob_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::_internal_mutable_data_prob_param() {
  return &_impl_.data_prob_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayerParameter::mutable_data_prob_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.data_prob_param)
  return _internal_mutable_data_prob_param();
}

// optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::_internal_has_infogain_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.infogain_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_infogain_loss_param() const {
  return _internal_has_infogain_loss_param();
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (_impl_.infogain_loss_param_ != nullptr) _impl_.infogain_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::perception::inference::InfogainLossParameter& LayerParameter::_internal_infogain_loss_param() const {
  const ::apollo::perception::inference::InfogainLossParameter* p = _impl_.infogain_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::InfogainLossParameter&>(
      ::apollo::perception::inference::_InfogainLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(
    ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.infogain_loss_param_);
  }
  _impl_.infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.infogain_loss_param)
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::perception::inference::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::unsafe_arena_release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.infogain_loss_param)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::perception::inference::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::_internal_mutable_infogain_loss_param() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::InfogainLossParameter>(GetArenaForAllocation());
    _impl_.infogain_loss_param_ = p;
  }
  return _impl_.infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  ::apollo::perception::inference::InfogainLossParameter* _msg = _internal_mutable_infogain_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.infogain_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(infogain_loss_param);
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.infogain_loss_param)
}

// optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::_internal_has_inner_product_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inner_product_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_inner_product_param() const {
  return _internal_has_inner_product_param();
}
inline void LayerParameter::clear_inner_product_param() {
  if (_impl_.inner_product_param_ != nullptr) _impl_.inner_product_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::perception::inference::InnerProductParameter& LayerParameter::_internal_inner_product_param() const {
  const ::apollo::perception::inference::InnerProductParameter* p = _impl_.inner_product_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::InnerProductParameter&>(
      ::apollo::perception::inference::_InnerProductParameter_default_instance_);
}
inline const ::apollo::perception::inference::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_inner_product_param(
    ::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner_product_param_);
  }
  _impl_.inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.inner_product_param)
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::release_inner_product_param() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::perception::inference::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::unsafe_arena_release_inner_product_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.inner_product_param)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::perception::inference::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::_internal_mutable_inner_product_param() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::InnerProductParameter>(GetArenaForAllocation());
    _impl_.inner_product_param_ = p;
  }
  return _impl_.inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  ::apollo::perception::inference::InnerProductParameter* _msg = _internal_mutable_inner_product_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.inner_product_param)
  return _msg;
}
inline void LayerParameter::set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner_product_param_;
  }
  if (inner_product_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner_product_param);
    if (message_arena != submessage_arena) {
      inner_product_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.inner_product_param)
}

// optional .apollo.perception.inference.InputParameter input_param = 143;
inline bool LayerParameter::_internal_has_input_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_input_param() const {
  return _internal_has_input_param();
}
inline void LayerParameter::clear_input_param() {
  if (_impl_.input_param_ != nullptr) _impl_.input_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline const ::apollo::perception::inference::InputParameter& LayerParameter::_internal_input_param() const {
  const ::apollo::perception::inference::InputParameter* p = _impl_.input_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::InputParameter&>(
      ::apollo::perception::inference::_InputParameter_default_instance_);
}
inline const ::apollo::perception::inference::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.input_param)
  return _internal_input_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_input_param(
    ::apollo::perception::inference::InputParameter* input_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_param_);
  }
  _impl_.input_param_ = input_param;
  if (input_param) {
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.input_param)
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::release_input_param() {
  _impl_._has_bits_[1] &= ~0x00002000u;
  ::apollo::perception::inference::InputParameter* temp = _impl_.input_param_;
  _impl_.input_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::unsafe_arena_release_input_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.input_param)
  _impl_._has_bits_[1] &= ~0x00002000u;
  ::apollo::perception::inference::InputParameter* temp = _impl_.input_param_;
  _impl_.input_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::_internal_mutable_input_param() {
  _impl_._has_bits_[1] |= 0x00002000u;
  if (_impl_.input_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::InputParameter>(GetArenaForAllocation());
    _impl_.input_param_ = p;
  }
  return _impl_.input_param_;
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::mutable_input_param() {
  ::apollo::perception::inference::InputParameter* _msg = _internal_mutable_input_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.input_param)
  return _msg;
}
inline void LayerParameter::set_allocated_input_param(::apollo::perception::inference::InputParameter* input_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_param_;
  }
  if (input_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input_param);
    if (message_arena != submessage_arena) {
      input_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  _impl_.input_param_ = input_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.input_param)
}

// optional .apollo.perception.inference.LogParameter log_param = 134;
inline bool LayerParameter::_internal_has_log_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.log_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_log_param() const {
  return _internal_has_log_param();
}
inline void LayerParameter::clear_log_param() {
  if (_impl_.log_param_ != nullptr) _impl_.log_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline const ::apollo::perception::inference::LogParameter& LayerParameter::_internal_log_param() const {
  const ::apollo::perception::inference::LogParameter* p = _impl_.log_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::LogParameter&>(
      ::apollo::perception::inference::_LogParameter_default_instance_);
}
inline const ::apollo::perception::inference::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.log_param)
  return _internal_log_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_log_param(
    ::apollo::perception::inference::LogParameter* log_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_param_);
  }
  _impl_.log_param_ = log_param;
  if (log_param) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.log_param)
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::release_log_param() {
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::apollo::perception::inference::LogParameter* temp = _impl_.log_param_;
  _impl_.log_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::unsafe_arena_release_log_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.log_param)
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::apollo::perception::inference::LogParameter* temp = _impl_.log_param_;
  _impl_.log_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::_internal_mutable_log_param() {
  _impl_._has_bits_[1] |= 0x00000010u;
  if (_impl_.log_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::LogParameter>(GetArenaForAllocation());
    _impl_.log_param_ = p;
  }
  return _impl_.log_param_;
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::mutable_log_param() {
  ::apollo::perception::inference::LogParameter* _msg = _internal_mutable_log_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.log_param)
  return _msg;
}
inline void LayerParameter::set_allocated_log_param(::apollo::perception::inference::LogParameter* log_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.log_param_;
  }
  if (log_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log_param);
    if (message_arena != submessage_arena) {
      log_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  _impl_.log_param_ = log_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.log_param)
}

// optional .apollo.perception.inference.LRNParameter lrn_param = 118;
inline bool LayerParameter::_internal_has_lrn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lrn_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_lrn_param() const {
  return _internal_has_lrn_param();
}
inline void LayerParameter::clear_lrn_param() {
  if (_impl_.lrn_param_ != nullptr) _impl_.lrn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::perception::inference::LRNParameter& LayerParameter::_internal_lrn_param() const {
  const ::apollo::perception::inference::LRNParameter* p = _impl_.lrn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::LRNParameter&>(
      ::apollo::perception::inference::_LRNParameter_default_instance_);
}
inline const ::apollo::perception::inference::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_lrn_param(
    ::apollo::perception::inference::LRNParameter* lrn_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lrn_param_);
  }
  _impl_.lrn_param_ = lrn_param;
  if (lrn_param) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.lrn_param)
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::release_lrn_param() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::perception::inference::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::unsafe_arena_release_lrn_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.lrn_param)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::perception::inference::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::_internal_mutable_lrn_param() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::LRNParameter>(GetArenaForAllocation());
    _impl_.lrn_param_ = p;
  }
  return _impl_.lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::mutable_lrn_param() {
  ::apollo::perception::inference::LRNParameter* _msg = _internal_mutable_lrn_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.lrn_param)
  return _msg;
}
inline void LayerParameter::set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lrn_param_;
  }
  if (lrn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lrn_param);
    if (message_arena != submessage_arena) {
      lrn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.lrn_param)
}

// optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::_internal_has_memory_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.memory_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_memory_data_param() const {
  return _internal_has_memory_data_param();
}
inline void LayerParameter::clear_memory_data_param() {
  if (_impl_.memory_data_param_ != nullptr) _impl_.memory_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::apollo::perception::inference::MemoryDataParameter& LayerParameter::_internal_memory_data_param() const {
  const ::apollo::perception::inference::MemoryDataParameter* p = _impl_.memory_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::MemoryDataParameter&>(
      ::apollo::perception::inference::_MemoryDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_memory_data_param(
    ::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memory_data_param_);
  }
  _impl_.memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.memory_data_param)
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::apollo::perception::inference::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::unsafe_arena_release_memory_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.memory_data_param)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::apollo::perception::inference::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::_internal_mutable_memory_data_param() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::MemoryDataParameter>(GetArenaForAllocation());
    _impl_.memory_data_param_ = p;
  }
  return _impl_.memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  ::apollo::perception::inference::MemoryDataParameter* _msg = _internal_mutable_memory_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.memory_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.memory_data_param_;
  }
  if (memory_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(memory_data_param);
    if (message_arena != submessage_arena) {
      memory_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.memory_data_param)
}

// optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
inline bool LayerParameter::_internal_has_multibox_loss_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.multibox_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_multibox_loss_param() const {
  return _internal_has_multibox_loss_param();
}
inline void LayerParameter::clear_multibox_loss_param() {
  if (_impl_.multibox_loss_param_ != nullptr) _impl_.multibox_loss_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline const ::apollo::perception::inference::MultiBoxLossParameter& LayerParameter::_internal_multibox_loss_param() const {
  const ::apollo::perception::inference::MultiBoxLossParameter* p = _impl_.multibox_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::MultiBoxLossParameter&>(
      ::apollo::perception::inference::_MultiBoxLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::MultiBoxLossParameter& LayerParameter::multibox_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.multibox_loss_param)
  return _internal_multibox_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_multibox_loss_param(
    ::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.multibox_loss_param_);
  }
  _impl_.multibox_loss_param_ = multibox_loss_param;
  if (multibox_loss_param) {
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.multibox_loss_param)
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::release_multibox_loss_param() {
  _impl_._has_bits_[1] &= ~0x00040000u;
  ::apollo::perception::inference::MultiBoxLossParameter* temp = _impl_.multibox_loss_param_;
  _impl_.multibox_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::unsafe_arena_release_multibox_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.multibox_loss_param)
  _impl_._has_bits_[1] &= ~0x00040000u;
  ::apollo::perception::inference::MultiBoxLossParameter* temp = _impl_.multibox_loss_param_;
  _impl_.multibox_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::_internal_mutable_multibox_loss_param() {
  _impl_._has_bits_[1] |= 0x00040000u;
  if (_impl_.multibox_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::MultiBoxLossParameter>(GetArenaForAllocation());
    _impl_.multibox_loss_param_ = p;
  }
  return _impl_.multibox_loss_param_;
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::mutable_multibox_loss_param() {
  ::apollo::perception::inference::MultiBoxLossParameter* _msg = _internal_mutable_multibox_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.multibox_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_multibox_loss_param(::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.multibox_loss_param_;
  }
  if (multibox_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multibox_loss_param);
    if (message_arena != submessage_arena) {
      multibox_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multibox_loss_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }
  _impl_.multibox_loss_param_ = multibox_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.multibox_loss_param)
}

// optional .apollo.perception.inference.RegionParameter region_param = 300;
inline bool LayerParameter::_internal_has_region_param() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_region_param() const {
  return _internal_has_region_param();
}
inline void LayerParameter::clear_region_param() {
  if (_impl_.region_param_ != nullptr) _impl_.region_param_->Clear();
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline const ::apollo::perception::inference::RegionParameter& LayerParameter::_internal_region_param() const {
  const ::apollo::perception::inference::RegionParameter* p = _impl_.region_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::RegionParameter&>(
      ::apollo::perception::inference::_RegionParameter_default_instance_);
}
inline const ::apollo::perception::inference::RegionParameter& LayerParameter::region_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_param)
  return _internal_region_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_region_param(
    ::apollo::perception::inference::RegionParameter* region_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_param_);
  }
  _impl_.region_param_ = region_param;
  if (region_param) {
    _impl_._has_bits_[1] |= 0x10000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.region_param)
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::release_region_param() {
  _impl_._has_bits_[1] &= ~0x10000000u;
  ::apollo::perception::inference::RegionParameter* temp = _impl_.region_param_;
  _impl_.region_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::unsafe_arena_release_region_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.region_param)
  _impl_._has_bits_[1] &= ~0x10000000u;
  ::apollo::perception::inference::RegionParameter* temp = _impl_.region_param_;
  _impl_.region_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::_internal_mutable_region_param() {
  _impl_._has_bits_[1] |= 0x10000000u;
  if (_impl_.region_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::RegionParameter>(GetArenaForAllocation());
    _impl_.region_param_ = p;
  }
  return _impl_.region_param_;
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::mutable_region_param() {
  ::apollo::perception::inference::RegionParameter* _msg = _internal_mutable_region_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_param)
  return _msg;
}
inline void LayerParameter::set_allocated_region_param(::apollo::perception::inference::RegionParameter* region_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.region_param_;
  }
  if (region_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(region_param);
    if (message_arena != submessage_arena) {
      region_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x10000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x10000000u;
  }
  _impl_.region_param_ = region_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_param)
}

// optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
inline bool LayerParameter::_internal_has_region_output_param() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_output_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_region_output_param() const {
  return _internal_has_region_output_param();
}
inline void LayerParameter::clear_region_output_param() {
  if (_impl_.region_output_param_ != nullptr) _impl_.region_output_param_->Clear();
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline const ::apollo::perception::inference::RegionOutputParameter& LayerParameter::_internal_region_output_param() const {
  const ::apollo::perception::inference::RegionOutputParameter* p = _impl_.region_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::RegionOutputParameter&>(
      ::apollo::perception::inference::_RegionOutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::RegionOutputParameter& LayerParameter::region_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_output_param)
  return _internal_region_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_region_output_param(
    ::apollo::perception::inference::RegionOutputParameter* region_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_output_param_);
  }
  _impl_.region_output_param_ = region_output_param;
  if (region_output_param) {
    _impl_._has_bits_[1] |= 0x40000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.region_output_param)
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::release_region_output_param() {
  _impl_._has_bits_[1] &= ~0x40000000u;
  ::apollo::perception::inference::RegionOutputParameter* temp = _impl_.region_output_param_;
  _impl_.region_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::unsafe_arena_release_region_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.region_output_param)
  _impl_._has_bits_[1] &= ~0x40000000u;
  ::apollo::perception::inference::RegionOutputParameter* temp = _impl_.region_output_param_;
  _impl_.region_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::_internal_mutable_region_output_param() {
  _impl_._has_bits_[1] |= 0x40000000u;
  if (_impl_.region_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::RegionOutputParameter>(GetArenaForAllocation());
    _impl_.region_output_param_ = p;
  }
  return _impl_.region_output_param_;
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::mutable_region_output_param() {
  ::apollo::perception::inference::RegionOutputParameter* _msg = _internal_mutable_region_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_output_param)
  return _msg;
}
inline void LayerParameter::set_allocated_region_output_param(::apollo::perception::inference::RegionOutputParameter* region_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.region_output_param_;
  }
  if (region_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(region_output_param);
    if (message_arena != submessage_arena) {
      region_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_output_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x40000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x40000000u;
  }
  _impl_.region_output_param_ = region_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_output_param)
}

// optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
inline bool LayerParameter::_internal_has_region_proposal_param() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_proposal_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_region_proposal_param() const {
  return _internal_has_region_proposal_param();
}
inline void LayerParameter::clear_region_proposal_param() {
  if (_impl_.region_proposal_param_ != nullptr) _impl_.region_proposal_param_->Clear();
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline const ::apollo::perception::inference::RegionProposalParameter& LayerParameter::_internal_region_proposal_param() const {
  const ::apollo::perception::inference::RegionProposalParameter* p = _impl_.region_proposal_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::RegionProposalParameter&>(
      ::apollo::perception::inference::_RegionProposalParameter_default_instance_);
}
inline const ::apollo::perception::inference::RegionProposalParameter& LayerParameter::region_proposal_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_proposal_param)
  return _internal_region_proposal_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_region_proposal_param(
    ::apollo::perception::inference::RegionProposalParameter* region_proposal_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_proposal_param_);
  }
  _impl_.region_proposal_param_ = region_proposal_param;
  if (region_proposal_param) {
    _impl_._has_bits_[1] |= 0x80000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.region_proposal_param)
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::release_region_proposal_param() {
  _impl_._has_bits_[1] &= ~0x80000000u;
  ::apollo::perception::inference::RegionProposalParameter* temp = _impl_.region_proposal_param_;
  _impl_.region_proposal_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::unsafe_arena_release_region_proposal_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.region_proposal_param)
  _impl_._has_bits_[1] &= ~0x80000000u;
  ::apollo::perception::inference::RegionProposalParameter* temp = _impl_.region_proposal_param_;
  _impl_.region_proposal_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::_internal_mutable_region_proposal_param() {
  _impl_._has_bits_[1] |= 0x80000000u;
  if (_impl_.region_proposal_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::RegionProposalParameter>(GetArenaForAllocation());
    _impl_.region_proposal_param_ = p;
  }
  return _impl_.region_proposal_param_;
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::mutable_region_proposal_param() {
  ::apollo::perception::inference::RegionProposalParameter* _msg = _internal_mutable_region_proposal_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_proposal_param)
  return _msg;
}
inline void LayerParameter::set_allocated_region_proposal_param(::apollo::perception::inference::RegionProposalParameter* region_proposal_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.region_proposal_param_;
  }
  if (region_proposal_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(region_proposal_param);
    if (message_arena != submessage_arena) {
      region_proposal_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_proposal_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x80000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x80000000u;
  }
  _impl_.region_proposal_param_ = region_proposal_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_proposal_param)
}

// optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
inline bool LayerParameter::_internal_has_yolo_target_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yolo_target_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_yolo_target_param() const {
  return _internal_has_yolo_target_param();
}
inline void LayerParameter::clear_yolo_target_param() {
  if (_impl_.yolo_target_param_ != nullptr) _impl_.yolo_target_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::YoloTargetParameter& LayerParameter::_internal_yolo_target_param() const {
  const ::apollo::perception::inference::YoloTargetParameter* p = _impl_.yolo_target_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::YoloTargetParameter&>(
      ::apollo::perception::inference::_YoloTargetParameter_default_instance_);
}
inline const ::apollo::perception::inference::YoloTargetParameter& LayerParameter::yolo_target_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_target_param)
  return _internal_yolo_target_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_yolo_target_param(
    ::apollo::perception::inference::YoloTargetParameter* yolo_target_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yolo_target_param_);
  }
  _impl_.yolo_target_param_ = yolo_target_param;
  if (yolo_target_param) {
    _impl_._has_bits_[2] |= 0x00000002u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.yolo_target_param)
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::release_yolo_target_param() {
  _impl_._has_bits_[2] &= ~0x00000002u;
  ::apollo::perception::inference::YoloTargetParameter* temp = _impl_.yolo_target_param_;
  _impl_.yolo_target_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::unsafe_arena_release_yolo_target_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.yolo_target_param)
  _impl_._has_bits_[2] &= ~0x00000002u;
  ::apollo::perception::inference::YoloTargetParameter* temp = _impl_.yolo_target_param_;
  _impl_.yolo_target_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::_internal_mutable_yolo_target_param() {
  _impl_._has_bits_[2] |= 0x00000002u;
  if (_impl_.yolo_target_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::YoloTargetParameter>(GetArenaForAllocation());
    _impl_.yolo_target_param_ = p;
  }
  return _impl_.yolo_target_param_;
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::mutable_yolo_target_param() {
  ::apollo::perception::inference::YoloTargetParameter* _msg = _internal_mutable_yolo_target_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_target_param)
  return _msg;
}
inline void LayerParameter::set_allocated_yolo_target_param(::apollo::perception::inference::YoloTargetParameter* yolo_target_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.yolo_target_param_;
  }
  if (yolo_target_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yolo_target_param);
    if (message_arena != submessage_arena) {
      yolo_target_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yolo_target_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000002u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000002u;
  }
  _impl_.yolo_target_param_ = yolo_target_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_target_param)
}

// optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
inline bool LayerParameter::_internal_has_yolo_anchors_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yolo_anchors_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_yolo_anchors_param() const {
  return _internal_has_yolo_anchors_param();
}
inline void LayerParameter::clear_yolo_anchors_param() {
  if (_impl_.yolo_anchors_param_ != nullptr) _impl_.yolo_anchors_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::YoloAnchorsParameter& LayerParameter::_internal_yolo_anchors_param() const {
  const ::apollo::perception::inference::YoloAnchorsParameter* p = _impl_.yolo_anchors_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::YoloAnchorsParameter&>(
      ::apollo::perception::inference::_YoloAnchorsParameter_default_instance_);
}
inline const ::apollo::perception::inference::YoloAnchorsParameter& LayerParameter::yolo_anchors_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_anchors_param)
  return _internal_yolo_anchors_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_yolo_anchors_param(
    ::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yolo_anchors_param_);
  }
  _impl_.yolo_anchors_param_ = yolo_anchors_param;
  if (yolo_anchors_param) {
    _impl_._has_bits_[2] |= 0x00000004u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.yolo_anchors_param)
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::release_yolo_anchors_param() {
  _impl_._has_bits_[2] &= ~0x00000004u;
  ::apollo::perception::inference::YoloAnchorsParameter* temp = _impl_.yolo_anchors_param_;
  _impl_.yolo_anchors_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::unsafe_arena_release_yolo_anchors_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.yolo_anchors_param)
  _impl_._has_bits_[2] &= ~0x00000004u;
  ::apollo::perception::inference::YoloAnchorsParameter* temp = _impl_.yolo_anchors_param_;
  _impl_.yolo_anchors_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::_internal_mutable_yolo_anchors_param() {
  _impl_._has_bits_[2] |= 0x00000004u;
  if (_impl_.yolo_anchors_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::YoloAnchorsParameter>(GetArenaForAllocation());
    _impl_.yolo_anchors_param_ = p;
  }
  return _impl_.yolo_anchors_param_;
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::mutable_yolo_anchors_param() {
  ::apollo::perception::inference::YoloAnchorsParameter* _msg = _internal_mutable_yolo_anchors_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_anchors_param)
  return _msg;
}
inline void LayerParameter::set_allocated_yolo_anchors_param(::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.yolo_anchors_param_;
  }
  if (yolo_anchors_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yolo_anchors_param);
    if (message_arena != submessage_arena) {
      yolo_anchors_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yolo_anchors_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000004u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000004u;
  }
  _impl_.yolo_anchors_param_ = yolo_anchors_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_anchors_param)
}

// optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
inline bool LayerParameter::_internal_has_yolo_loss_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yolo_loss_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_yolo_loss_param() const {
  return _internal_has_yolo_loss_param();
}
inline void LayerParameter::clear_yolo_loss_param() {
  if (_impl_.yolo_loss_param_ != nullptr) _impl_.yolo_loss_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::YoloLossParameter& LayerParameter::_internal_yolo_loss_param() const {
  const ::apollo::perception::inference::YoloLossParameter* p = _impl_.yolo_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::YoloLossParameter&>(
      ::apollo::perception::inference::_YoloLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::YoloLossParameter& LayerParameter::yolo_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_loss_param)
  return _internal_yolo_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_yolo_loss_param(
    ::apollo::perception::inference::YoloLossParameter* yolo_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yolo_loss_param_);
  }
  _impl_.yolo_loss_param_ = yolo_loss_param;
  if (yolo_loss_param) {
    _impl_._has_bits_[2] |= 0x00000008u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.yolo_loss_param)
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::release_yolo_loss_param() {
  _impl_._has_bits_[2] &= ~0x00000008u;
  ::apollo::perception::inference::YoloLossParameter* temp = _impl_.yolo_loss_param_;
  _impl_.yolo_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::unsafe_arena_release_yolo_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.yolo_loss_param)
  _impl_._has_bits_[2] &= ~0x00000008u;
  ::apollo::perception::inference::YoloLossParameter* temp = _impl_.yolo_loss_param_;
  _impl_.yolo_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::_internal_mutable_yolo_loss_param() {
  _impl_._has_bits_[2] |= 0x00000008u;
  if (_impl_.yolo_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::YoloLossParameter>(GetArenaForAllocation());
    _impl_.yolo_loss_param_ = p;
  }
  return _impl_.yolo_loss_param_;
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::mutable_yolo_loss_param() {
  ::apollo::perception::inference::YoloLossParameter* _msg = _internal_mutable_yolo_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_yolo_loss_param(::apollo::perception::inference::YoloLossParameter* yolo_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.yolo_loss_param_;
  }
  if (yolo_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yolo_loss_param);
    if (message_arena != submessage_arena) {
      yolo_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yolo_loss_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000008u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000008u;
  }
  _impl_.yolo_loss_param_ = yolo_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_loss_param)
}

// optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
inline bool LayerParameter::_internal_has_yolo_dump_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yolo_dump_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_yolo_dump_param() const {
  return _internal_has_yolo_dump_param();
}
inline void LayerParameter::clear_yolo_dump_param() {
  if (_impl_.yolo_dump_param_ != nullptr) _impl_.yolo_dump_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline const ::apollo::perception::inference::YoloDumpParameter& LayerParameter::_internal_yolo_dump_param() const {
  const ::apollo::perception::inference::YoloDumpParameter* p = _impl_.yolo_dump_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::YoloDumpParameter&>(
      ::apollo::perception::inference::_YoloDumpParameter_default_instance_);
}
inline const ::apollo::perception::inference::YoloDumpParameter& LayerParameter::yolo_dump_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_dump_param)
  return _internal_yolo_dump_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_yolo_dump_param(
    ::apollo::perception::inference::YoloDumpParameter* yolo_dump_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yolo_dump_param_);
  }
  _impl_.yolo_dump_param_ = yolo_dump_param;
  if (yolo_dump_param) {
    _impl_._has_bits_[2] |= 0x00000010u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.yolo_dump_param)
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::release_yolo_dump_param() {
  _impl_._has_bits_[2] &= ~0x00000010u;
  ::apollo::perception::inference::YoloDumpParameter* temp = _impl_.yolo_dump_param_;
  _impl_.yolo_dump_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::unsafe_arena_release_yolo_dump_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.yolo_dump_param)
  _impl_._has_bits_[2] &= ~0x00000010u;
  ::apollo::perception::inference::YoloDumpParameter* temp = _impl_.yolo_dump_param_;
  _impl_.yolo_dump_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::_internal_mutable_yolo_dump_param() {
  _impl_._has_bits_[2] |= 0x00000010u;
  if (_impl_.yolo_dump_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::YoloDumpParameter>(GetArenaForAllocation());
    _impl_.yolo_dump_param_ = p;
  }
  return _impl_.yolo_dump_param_;
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::mutable_yolo_dump_param() {
  ::apollo::perception::inference::YoloDumpParameter* _msg = _internal_mutable_yolo_dump_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_dump_param)
  return _msg;
}
inline void LayerParameter::set_allocated_yolo_dump_param(::apollo::perception::inference::YoloDumpParameter* yolo_dump_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.yolo_dump_param_;
  }
  if (yolo_dump_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yolo_dump_param);
    if (message_arena != submessage_arena) {
      yolo_dump_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yolo_dump_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000010u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000010u;
  }
  _impl_.yolo_dump_param_ = yolo_dump_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_dump_param)
}

// optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
inline bool LayerParameter::_internal_has_padding_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.padding_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_padding_param() const {
  return _internal_has_padding_param();
}
inline void LayerParameter::clear_padding_param() {
  if (_impl_.padding_param_ != nullptr) _impl_.padding_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::PaddingParameter& LayerParameter::_internal_padding_param() const {
  const ::apollo::perception::inference::PaddingParameter* p = _impl_.padding_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PaddingParameter&>(
      ::apollo::perception::inference::_PaddingParameter_default_instance_);
}
inline const ::apollo::perception::inference::PaddingParameter& LayerParameter::padding_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.padding_param)
  return _internal_padding_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_padding_param(
    ::apollo::perception::inference::PaddingParameter* padding_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.padding_param_);
  }
  _impl_.padding_param_ = padding_param;
  if (padding_param) {
    _impl_._has_bits_[2] |= 0x00000001u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.padding_param)
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::release_padding_param() {
  _impl_._has_bits_[2] &= ~0x00000001u;
  ::apollo::perception::inference::PaddingParameter* temp = _impl_.padding_param_;
  _impl_.padding_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::unsafe_arena_release_padding_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.padding_param)
  _impl_._has_bits_[2] &= ~0x00000001u;
  ::apollo::perception::inference::PaddingParameter* temp = _impl_.padding_param_;
  _impl_.padding_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::_internal_mutable_padding_param() {
  _impl_._has_bits_[2] |= 0x00000001u;
  if (_impl_.padding_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PaddingParameter>(GetArenaForAllocation());
    _impl_.padding_param_ = p;
  }
  return _impl_.padding_param_;
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::mutable_padding_param() {
  ::apollo::perception::inference::PaddingParameter* _msg = _internal_mutable_padding_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.padding_param)
  return _msg;
}
inline void LayerParameter::set_allocated_padding_param(::apollo::perception::inference::PaddingParameter* padding_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.padding_param_;
  }
  if (padding_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(padding_param);
    if (message_arena != submessage_arena) {
      padding_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000001u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000001u;
  }
  _impl_.padding_param_ = padding_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.padding_param)
}

// optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
inline bool LayerParameter::_internal_has_reorg_param() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reorg_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_reorg_param() const {
  return _internal_has_reorg_param();
}
inline void LayerParameter::clear_reorg_param() {
  if (_impl_.reorg_param_ != nullptr) _impl_.reorg_param_->Clear();
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline const ::apollo::perception::inference::ReorgParameter& LayerParameter::_internal_reorg_param() const {
  const ::apollo::perception::inference::ReorgParameter* p = _impl_.reorg_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ReorgParameter&>(
      ::apollo::perception::inference::_ReorgParameter_default_instance_);
}
inline const ::apollo::perception::inference::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reorg_param)
  return _internal_reorg_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reorg_param(
    ::apollo::perception::inference::ReorgParameter* reorg_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reorg_param_);
  }
  _impl_.reorg_param_ = reorg_param;
  if (reorg_param) {
    _impl_._has_bits_[1] |= 0x20000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.reorg_param)
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::release_reorg_param() {
  _impl_._has_bits_[1] &= ~0x20000000u;
  ::apollo::perception::inference::ReorgParameter* temp = _impl_.reorg_param_;
  _impl_.reorg_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::unsafe_arena_release_reorg_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.reorg_param)
  _impl_._has_bits_[1] &= ~0x20000000u;
  ::apollo::perception::inference::ReorgParameter* temp = _impl_.reorg_param_;
  _impl_.reorg_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::_internal_mutable_reorg_param() {
  _impl_._has_bits_[1] |= 0x20000000u;
  if (_impl_.reorg_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ReorgParameter>(GetArenaForAllocation());
    _impl_.reorg_param_ = p;
  }
  return _impl_.reorg_param_;
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::mutable_reorg_param() {
  ::apollo::perception::inference::ReorgParameter* _msg = _internal_mutable_reorg_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reorg_param)
  return _msg;
}
inline void LayerParameter::set_allocated_reorg_param(::apollo::perception::inference::ReorgParameter* reorg_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reorg_param_;
  }
  if (reorg_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reorg_param);
    if (message_arena != submessage_arena) {
      reorg_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reorg_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x20000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x20000000u;
  }
  _impl_.reorg_param_ = reorg_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reorg_param)
}

// optional .apollo.perception.inference.MVNParameter mvn_param = 120;
inline bool LayerParameter::_internal_has_mvn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mvn_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_mvn_param() const {
  return _internal_has_mvn_param();
}
inline void LayerParameter::clear_mvn_param() {
  if (_impl_.mvn_param_ != nullptr) _impl_.mvn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::apollo::perception::inference::MVNParameter& LayerParameter::_internal_mvn_param() const {
  const ::apollo::perception::inference::MVNParameter* p = _impl_.mvn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::MVNParameter&>(
      ::apollo::perception::inference::_MVNParameter_default_instance_);
}
inline const ::apollo::perception::inference::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_mvn_param(
    ::apollo::perception::inference::MVNParameter* mvn_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mvn_param_);
  }
  _impl_.mvn_param_ = mvn_param;
  if (mvn_param) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.mvn_param)
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::release_mvn_param() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::apollo::perception::inference::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::unsafe_arena_release_mvn_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.mvn_param)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::apollo::perception::inference::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::_internal_mutable_mvn_param() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::MVNParameter>(GetArenaForAllocation());
    _impl_.mvn_param_ = p;
  }
  return _impl_.mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::mutable_mvn_param() {
  ::apollo::perception::inference::MVNParameter* _msg = _internal_mutable_mvn_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.mvn_param)
  return _msg;
}
inline void LayerParameter::set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mvn_param_;
  }
  if (mvn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mvn_param);
    if (message_arena != submessage_arena) {
      mvn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.mvn_param)
}

// optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
inline bool LayerParameter::_internal_has_norm_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.norm_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_norm_param() const {
  return _internal_has_norm_param();
}
inline void LayerParameter::clear_norm_param() {
  if (_impl_.norm_param_ != nullptr) _impl_.norm_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline const ::apollo::perception::inference::NormalizeParameter& LayerParameter::_internal_norm_param() const {
  const ::apollo::perception::inference::NormalizeParameter* p = _impl_.norm_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NormalizeParameter&>(
      ::apollo::perception::inference::_NormalizeParameter_default_instance_);
}
inline const ::apollo::perception::inference::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.norm_param)
  return _internal_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_norm_param(
    ::apollo::perception::inference::NormalizeParameter* norm_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.norm_param_);
  }
  _impl_.norm_param_ = norm_param;
  if (norm_param) {
    _impl_._has_bits_[1] |= 0x00800000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.norm_param)
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::release_norm_param() {
  _impl_._has_bits_[1] &= ~0x00800000u;
  ::apollo::perception::inference::NormalizeParameter* temp = _impl_.norm_param_;
  _impl_.norm_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::unsafe_arena_release_norm_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.norm_param)
  _impl_._has_bits_[1] &= ~0x00800000u;
  ::apollo::perception::inference::NormalizeParameter* temp = _impl_.norm_param_;
  _impl_.norm_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::_internal_mutable_norm_param() {
  _impl_._has_bits_[1] |= 0x00800000u;
  if (_impl_.norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NormalizeParameter>(GetArenaForAllocation());
    _impl_.norm_param_ = p;
  }
  return _impl_.norm_param_;
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::mutable_norm_param() {
  ::apollo::perception::inference::NormalizeParameter* _msg = _internal_mutable_norm_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.norm_param)
  return _msg;
}
inline void LayerParameter::set_allocated_norm_param(::apollo::perception::inference::NormalizeParameter* norm_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.norm_param_;
  }
  if (norm_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(norm_param);
    if (message_arena != submessage_arena) {
      norm_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, norm_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00800000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00800000u;
  }
  _impl_.norm_param_ = norm_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.norm_param)
}

// optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
inline bool LayerParameter::_internal_has_parameter_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parameter_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_parameter_param() const {
  return _internal_has_parameter_param();
}
inline void LayerParameter::clear_parameter_param() {
  if (_impl_.parameter_param_ != nullptr) _impl_.parameter_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline const ::apollo::perception::inference::ParameterParameter& LayerParameter::_internal_parameter_param() const {
  const ::apollo::perception::inference::ParameterParameter* p = _impl_.parameter_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ParameterParameter&>(
      ::apollo::perception::inference::_ParameterParameter_default_instance_);
}
inline const ::apollo::perception::inference::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.parameter_param)
  return _internal_parameter_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_parameter_param(
    ::apollo::perception::inference::ParameterParameter* parameter_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parameter_param_);
  }
  _impl_.parameter_param_ = parameter_param;
  if (parameter_param) {
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.parameter_param)
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::release_parameter_param() {
  _impl_._has_bits_[1] &= ~0x00008000u;
  ::apollo::perception::inference::ParameterParameter* temp = _impl_.parameter_param_;
  _impl_.parameter_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::unsafe_arena_release_parameter_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.parameter_param)
  _impl_._has_bits_[1] &= ~0x00008000u;
  ::apollo::perception::inference::ParameterParameter* temp = _impl_.parameter_param_;
  _impl_.parameter_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::_internal_mutable_parameter_param() {
  _impl_._has_bits_[1] |= 0x00008000u;
  if (_impl_.parameter_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ParameterParameter>(GetArenaForAllocation());
    _impl_.parameter_param_ = p;
  }
  return _impl_.parameter_param_;
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::mutable_parameter_param() {
  ::apollo::perception::inference::ParameterParameter* _msg = _internal_mutable_parameter_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.parameter_param)
  return _msg;
}
inline void LayerParameter::set_allocated_parameter_param(::apollo::perception::inference::ParameterParameter* parameter_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parameter_param_;
  }
  if (parameter_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parameter_param);
    if (message_arena != submessage_arena) {
      parameter_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameter_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }
  _impl_.parameter_param_ = parameter_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.parameter_param)
}

// optional .apollo.perception.inference.PermuteParameter permute_param = 202;
inline bool LayerParameter::_internal_has_permute_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permute_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_permute_param() const {
  return _internal_has_permute_param();
}
inline void LayerParameter::clear_permute_param() {
  if (_impl_.permute_param_ != nullptr) _impl_.permute_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline const ::apollo::perception::inference::PermuteParameter& LayerParameter::_internal_permute_param() const {
  const ::apollo::perception::inference::PermuteParameter* p = _impl_.permute_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PermuteParameter&>(
      ::apollo::perception::inference::_PermuteParameter_default_instance_);
}
inline const ::apollo::perception::inference::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.permute_param)
  return _internal_permute_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_permute_param(
    ::apollo::perception::inference::PermuteParameter* permute_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permute_param_);
  }
  _impl_.permute_param_ = permute_param;
  if (permute_param) {
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.permute_param)
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::release_permute_param() {
  _impl_._has_bits_[1] &= ~0x00080000u;
  ::apollo::perception::inference::PermuteParameter* temp = _impl_.permute_param_;
  _impl_.permute_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::unsafe_arena_release_permute_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.permute_param)
  _impl_._has_bits_[1] &= ~0x00080000u;
  ::apollo::perception::inference::PermuteParameter* temp = _impl_.permute_param_;
  _impl_.permute_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::_internal_mutable_permute_param() {
  _impl_._has_bits_[1] |= 0x00080000u;
  if (_impl_.permute_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PermuteParameter>(GetArenaForAllocation());
    _impl_.permute_param_ = p;
  }
  return _impl_.permute_param_;
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::mutable_permute_param() {
  ::apollo::perception::inference::PermuteParameter* _msg = _internal_mutable_permute_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.permute_param)
  return _msg;
}
inline void LayerParameter::set_allocated_permute_param(::apollo::perception::inference::PermuteParameter* permute_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.permute_param_;
  }
  if (permute_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(permute_param);
    if (message_arena != submessage_arena) {
      permute_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permute_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }
  _impl_.permute_param_ = permute_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.permute_param)
}

// optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
inline bool LayerParameter::_internal_has_pooling_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void LayerParameter::clear_pooling_param() {
  if (_impl_.pooling_param_ != nullptr) _impl_.pooling_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::apollo::perception::inference::PoolingParameter& LayerParameter::_internal_pooling_param() const {
  const ::apollo::perception::inference::PoolingParameter* p = _impl_.pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PoolingParameter&>(
      ::apollo::perception::inference::_PoolingParameter_default_instance_);
}
inline const ::apollo::perception::inference::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_pooling_param(
    ::apollo::perception::inference::PoolingParameter* pooling_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pooling_param_);
  }
  _impl_.pooling_param_ = pooling_param;
  if (pooling_param) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.pooling_param)
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::release_pooling_param() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::apollo::perception::inference::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::unsafe_arena_release_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.pooling_param)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::apollo::perception::inference::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::_internal_mutable_pooling_param() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PoolingParameter>(GetArenaForAllocation());
    _impl_.pooling_param_ = p;
  }
  return _impl_.pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::mutable_pooling_param() {
  ::apollo::perception::inference::PoolingParameter* _msg = _internal_mutable_pooling_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pooling_param_;
  }
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pooling_param);
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.pooling_param)
}

// optional .apollo.perception.inference.PowerParameter power_param = 122;
inline bool LayerParameter::_internal_has_power_param() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.power_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_power_param() const {
  return _internal_has_power_param();
}
inline void LayerParameter::clear_power_param() {
  if (_impl_.power_param_ != nullptr) _impl_.power_param_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::apollo::perception::inference::PowerParameter& LayerParameter::_internal_power_param() const {
  const ::apollo::perception::inference::PowerParameter* p = _impl_.power_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PowerParameter&>(
      ::apollo::perception::inference::_PowerParameter_default_instance_);
}
inline const ::apollo::perception::inference::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.power_param)
  return _internal_power_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_power_param(
    ::apollo::perception::inference::PowerParameter* power_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.power_param_);
  }
  _impl_.power_param_ = power_param;
  if (power_param) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.power_param)
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::release_power_param() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::apollo::perception::inference::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::unsafe_arena_release_power_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.power_param)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::apollo::perception::inference::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::_internal_mutable_power_param() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PowerParameter>(GetArenaForAllocation());
    _impl_.power_param_ = p;
  }
  return _impl_.power_param_;
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::mutable_power_param() {
  ::apollo::perception::inference::PowerParameter* _msg = _internal_mutable_power_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.power_param)
  return _msg;
}
inline void LayerParameter::set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.power_param_;
  }
  if (power_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(power_param);
    if (message_arena != submessage_arena) {
      power_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.power_param)
}

// optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
inline bool LayerParameter::_internal_has_prelu_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prelu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_prelu_param() const {
  return _internal_has_prelu_param();
}
inline void LayerParameter::clear_prelu_param() {
  if (_impl_.prelu_param_ != nullptr) _impl_.prelu_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::PReLUParameter& LayerParameter::_internal_prelu_param() const {
  const ::apollo::perception::inference::PReLUParameter* p = _impl_.prelu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PReLUParameter&>(
      ::apollo::perception::inference::_PReLUParameter_default_instance_);
}
inline const ::apollo::perception::inference::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.prelu_param)
  return _internal_prelu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prelu_param(
    ::apollo::perception::inference::PReLUParameter* prelu_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prelu_param_);
  }
  _impl_.prelu_param_ = prelu_param;
  if (prelu_param) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.prelu_param)
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::release_prelu_param() {
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::apollo::perception::inference::PReLUParameter* temp = _impl_.prelu_param_;
  _impl_.prelu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::unsafe_arena_release_prelu_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.prelu_param)
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::apollo::perception::inference::PReLUParameter* temp = _impl_.prelu_param_;
  _impl_.prelu_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::_internal_mutable_prelu_param() {
  _impl_._has_bits_[1] |= 0x00000002u;
  if (_impl_.prelu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PReLUParameter>(GetArenaForAllocation());
    _impl_.prelu_param_ = p;
  }
  return _impl_.prelu_param_;
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::mutable_prelu_param() {
  ::apollo::perception::inference::PReLUParameter* _msg = _internal_mutable_prelu_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.prelu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_prelu_param(::apollo::perception::inference::PReLUParameter* prelu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prelu_param_;
  }
  if (prelu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prelu_param);
    if (message_arena != submessage_arena) {
      prelu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.prelu_param)
}

// optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
inline bool LayerParameter::_internal_has_prior_box_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prior_box_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_prior_box_param() const {
  return _internal_has_prior_box_param();
}
inline void LayerParameter::clear_prior_box_param() {
  if (_impl_.prior_box_param_ != nullptr) _impl_.prior_box_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline const ::apollo::perception::inference::PriorBoxParameter& LayerParameter::_internal_prior_box_param() const {
  const ::apollo::perception::inference::PriorBoxParameter* p = _impl_.prior_box_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PriorBoxParameter&>(
      ::apollo::perception::inference::_PriorBoxParameter_default_instance_);
}
inline const ::apollo::perception::inference::PriorBoxParameter& LayerParameter::prior_box_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.prior_box_param)
  return _internal_prior_box_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prior_box_param(
    ::apollo::perception::inference::PriorBoxParameter* prior_box_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prior_box_param_);
  }
  _impl_.prior_box_param_ = prior_box_param;
  if (prior_box_param) {
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.prior_box_param)
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  _impl_._has_bits_[1] &= ~0x00100000u;
  ::apollo::perception::inference::PriorBoxParameter* temp = _impl_.prior_box_param_;
  _impl_.prior_box_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::unsafe_arena_release_prior_box_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.prior_box_param)
  _impl_._has_bits_[1] &= ~0x00100000u;
  ::apollo::perception::inference::PriorBoxParameter* temp = _impl_.prior_box_param_;
  _impl_.prior_box_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::_internal_mutable_prior_box_param() {
  _impl_._has_bits_[1] |= 0x00100000u;
  if (_impl_.prior_box_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PriorBoxParameter>(GetArenaForAllocation());
    _impl_.prior_box_param_ = p;
  }
  return _impl_.prior_box_param_;
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::mutable_prior_box_param() {
  ::apollo::perception::inference::PriorBoxParameter* _msg = _internal_mutable_prior_box_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.prior_box_param)
  return _msg;
}
inline void LayerParameter::set_allocated_prior_box_param(::apollo::perception::inference::PriorBoxParameter* prior_box_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prior_box_param_;
  }
  if (prior_box_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prior_box_param);
    if (message_arena != submessage_arena) {
      prior_box_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prior_box_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }
  _impl_.prior_box_param_ = prior_box_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.prior_box_param)
}

// optional .apollo.perception.inference.PythonParameter python_param = 130;
inline bool LayerParameter::_internal_has_python_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.python_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_python_param() const {
  return _internal_has_python_param();
}
inline void LayerParameter::clear_python_param() {
  if (_impl_.python_param_ != nullptr) _impl_.python_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::PythonParameter& LayerParameter::_internal_python_param() const {
  const ::apollo::perception::inference::PythonParameter* p = _impl_.python_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PythonParameter&>(
      ::apollo::perception::inference::_PythonParameter_default_instance_);
}
inline const ::apollo::perception::inference::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.python_param)
  return _internal_python_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_python_param(
    ::apollo::perception::inference::PythonParameter* python_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.python_param_);
  }
  _impl_.python_param_ = python_param;
  if (python_param) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.python_param)
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::release_python_param() {
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::apollo::perception::inference::PythonParameter* temp = _impl_.python_param_;
  _impl_.python_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::unsafe_arena_release_python_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.python_param)
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::apollo::perception::inference::PythonParameter* temp = _impl_.python_param_;
  _impl_.python_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::_internal_mutable_python_param() {
  _impl_._has_bits_[1] |= 0x00000001u;
  if (_impl_.python_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PythonParameter>(GetArenaForAllocation());
    _impl_.python_param_ = p;
  }
  return _impl_.python_param_;
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::mutable_python_param() {
  ::apollo::perception::inference::PythonParameter* _msg = _internal_mutable_python_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.python_param)
  return _msg;
}
inline void LayerParameter::set_allocated_python_param(::apollo::perception::inference::PythonParameter* python_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.python_param_;
  }
  if (python_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(python_param);
    if (message_arena != submessage_arena) {
      python_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.python_param_ = python_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.python_param)
}

// optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::_internal_has_recurrent_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recurrent_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_recurrent_param() const {
  return _internal_has_recurrent_param();
}
inline void LayerParameter::clear_recurrent_param() {
  if (_impl_.recurrent_param_ != nullptr) _impl_.recurrent_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline const ::apollo::perception::inference::RecurrentParameter& LayerParameter::_internal_recurrent_param() const {
  const ::apollo::perception::inference::RecurrentParameter* p = _impl_.recurrent_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::RecurrentParameter&>(
      ::apollo::perception::inference::_RecurrentParameter_default_instance_);
}
inline const ::apollo::perception::inference::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.recurrent_param)
  return _internal_recurrent_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_recurrent_param(
    ::apollo::perception::inference::RecurrentParameter* recurrent_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recurrent_param_);
  }
  _impl_.recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.recurrent_param)
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::release_recurrent_param() {
  _impl_._has_bits_[1] &= ~0x00010000u;
  ::apollo::perception::inference::RecurrentParameter* temp = _impl_.recurrent_param_;
  _impl_.recurrent_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::unsafe_arena_release_recurrent_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.recurrent_param)
  _impl_._has_bits_[1] &= ~0x00010000u;
  ::apollo::perception::inference::RecurrentParameter* temp = _impl_.recurrent_param_;
  _impl_.recurrent_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::_internal_mutable_recurrent_param() {
  _impl_._has_bits_[1] |= 0x00010000u;
  if (_impl_.recurrent_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::RecurrentParameter>(GetArenaForAllocation());
    _impl_.recurrent_param_ = p;
  }
  return _impl_.recurrent_param_;
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  ::apollo::perception::inference::RecurrentParameter* _msg = _internal_mutable_recurrent_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.recurrent_param)
  return _msg;
}
inline void LayerParameter::set_allocated_recurrent_param(::apollo::perception::inference::RecurrentParameter* recurrent_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recurrent_param_;
  }
  if (recurrent_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recurrent_param);
    if (message_arena != submessage_arena) {
      recurrent_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recurrent_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }
  _impl_.recurrent_param_ = recurrent_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.recurrent_param)
}

// optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
inline bool LayerParameter::_internal_has_reduction_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reduction_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_reduction_param() const {
  return _internal_has_reduction_param();
}
inline void LayerParameter::clear_reduction_param() {
  if (_impl_.reduction_param_ != nullptr) _impl_.reduction_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline const ::apollo::perception::inference::ReductionParameter& LayerParameter::_internal_reduction_param() const {
  const ::apollo::perception::inference::ReductionParameter* p = _impl_.reduction_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ReductionParameter&>(
      ::apollo::perception::inference::_ReductionParameter_default_instance_);
}
inline const ::apollo::perception::inference::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reduction_param)
  return _internal_reduction_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reduction_param(
    ::apollo::perception::inference::ReductionParameter* reduction_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reduction_param_);
  }
  _impl_.reduction_param_ = reduction_param;
  if (reduction_param) {
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.reduction_param)
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::release_reduction_param() {
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::apollo::perception::inference::ReductionParameter* temp = _impl_.reduction_param_;
  _impl_.reduction_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::unsafe_arena_release_reduction_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.reduction_param)
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::apollo::perception::inference::ReductionParameter* temp = _impl_.reduction_param_;
  _impl_.reduction_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::_internal_mutable_reduction_param() {
  _impl_._has_bits_[1] |= 0x00000040u;
  if (_impl_.reduction_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ReductionParameter>(GetArenaForAllocation());
    _impl_.reduction_param_ = p;
  }
  return _impl_.reduction_param_;
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::mutable_reduction_param() {
  ::apollo::perception::inference::ReductionParameter* _msg = _internal_mutable_reduction_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reduction_param)
  return _msg;
}
inline void LayerParameter::set_allocated_reduction_param(::apollo::perception::inference::ReductionParameter* reduction_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reduction_param_;
  }
  if (reduction_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reduction_param);
    if (message_arena != submessage_arena) {
      reduction_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduction_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  _impl_.reduction_param_ = reduction_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reduction_param)
}

// optional .apollo.perception.inference.ReLUParameter relu_param = 123;
inline bool LayerParameter::_internal_has_relu_param() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relu_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_relu_param() const {
  return _internal_has_relu_param();
}
inline void LayerParameter::clear_relu_param() {
  if (_impl_.relu_param_ != nullptr) _impl_.relu_param_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::apollo::perception::inference::ReLUParameter& LayerParameter::_internal_relu_param() const {
  const ::apollo::perception::inference::ReLUParameter* p = _impl_.relu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ReLUParameter&>(
      ::apollo::perception::inference::_ReLUParameter_default_instance_);
}
inline const ::apollo::perception::inference::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_relu_param(
    ::apollo::perception::inference::ReLUParameter* relu_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relu_param_);
  }
  _impl_.relu_param_ = relu_param;
  if (relu_param) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.relu_param)
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::release_relu_param() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::apollo::perception::inference::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::unsafe_arena_release_relu_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.relu_param)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::apollo::perception::inference::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::_internal_mutable_relu_param() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ReLUParameter>(GetArenaForAllocation());
    _impl_.relu_param_ = p;
  }
  return _impl_.relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::mutable_relu_param() {
  ::apollo::perception::inference::ReLUParameter* _msg = _internal_mutable_relu_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.relu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relu_param_;
  }
  if (relu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relu_param);
    if (message_arena != submessage_arena) {
      relu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.relu_param)
}

// optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::_internal_has_reshape_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reshape_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_reshape_param() const {
  return _internal_has_reshape_param();
}
inline void LayerParameter::clear_reshape_param() {
  if (_impl_.reshape_param_ != nullptr) _impl_.reshape_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::ReshapeParameter& LayerParameter::_internal_reshape_param() const {
  const ::apollo::perception::inference::ReshapeParameter* p = _impl_.reshape_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ReshapeParameter&>(
      ::apollo::perception::inference::_ReshapeParameter_default_instance_);
}
inline const ::apollo::perception::inference::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reshape_param)
  return _internal_reshape_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reshape_param(
    ::apollo::perception::inference::ReshapeParameter* reshape_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reshape_param_);
  }
  _impl_.reshape_param_ = reshape_param;
  if (reshape_param) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.reshape_param)
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::release_reshape_param() {
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::apollo::perception::inference::ReshapeParameter* temp = _impl_.reshape_param_;
  _impl_.reshape_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::unsafe_arena_release_reshape_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.reshape_param)
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::apollo::perception::inference::ReshapeParameter* temp = _impl_.reshape_param_;
  _impl_.reshape_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::_internal_mutable_reshape_param() {
  _impl_._has_bits_[1] |= 0x00000008u;
  if (_impl_.reshape_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ReshapeParameter>(GetArenaForAllocation());
    _impl_.reshape_param_ = p;
  }
  return _impl_.reshape_param_;
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  ::apollo::perception::inference::ReshapeParameter* _msg = _internal_mutable_reshape_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reshape_param)
  return _msg;
}
inline void LayerParameter::set_allocated_reshape_param(::apollo::perception::inference::ReshapeParameter* reshape_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reshape_param_;
  }
  if (reshape_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reshape_param);
    if (message_arena != submessage_arena) {
      reshape_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reshape_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  _impl_.reshape_param_ = reshape_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reshape_param)
}

// optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
inline bool LayerParameter::_internal_has_roi_pooling_param() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_pooling_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_roi_pooling_param() const {
  return _internal_has_roi_pooling_param();
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (_impl_.roi_pooling_param_ != nullptr) _impl_.roi_pooling_param_->Clear();
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::ROIPoolingParameter& LayerParameter::_internal_roi_pooling_param() const {
  const ::apollo::perception::inference::ROIPoolingParameter* p = _impl_.roi_pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ROIPoolingParameter&>(
      ::apollo::perception::inference::_ROIPoolingParameter_default_instance_);
}
inline const ::apollo::perception::inference::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.roi_pooling_param)
  return _internal_roi_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_roi_pooling_param(
    ::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_pooling_param_);
  }
  _impl_.roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    _impl_._has_bits_[2] |= 0x00000020u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.roi_pooling_param)
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  _impl_._has_bits_[2] &= ~0x00000020u;
  ::apollo::perception::inference::ROIPoolingParameter* temp = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::unsafe_arena_release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.roi_pooling_param)
  _impl_._has_bits_[2] &= ~0x00000020u;
  ::apollo::perception::inference::ROIPoolingParameter* temp = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::_internal_mutable_roi_pooling_param() {
  _impl_._has_bits_[2] |= 0x00000020u;
  if (_impl_.roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ROIPoolingParameter>(GetArenaForAllocation());
    _impl_.roi_pooling_param_ = p;
  }
  return _impl_.roi_pooling_param_;
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  ::apollo::perception::inference::ROIPoolingParameter* _msg = _internal_mutable_roi_pooling_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.roi_pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roi_pooling_param);
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    _impl_._has_bits_[2] |= 0x00000020u;
  } else {
    _impl_._has_bits_[2] &= ~0x00000020u;
  }
  _impl_.roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.roi_pooling_param)
}

// optional .apollo.perception.inference.ScaleParameter scale_param = 142;
inline bool LayerParameter::_internal_has_scale_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_scale_param() const {
  return _internal_has_scale_param();
}
inline void LayerParameter::clear_scale_param() {
  if (_impl_.scale_param_ != nullptr) _impl_.scale_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline const ::apollo::perception::inference::ScaleParameter& LayerParameter::_internal_scale_param() const {
  const ::apollo::perception::inference::ScaleParameter* p = _impl_.scale_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ScaleParameter&>(
      ::apollo::perception::inference::_ScaleParameter_default_instance_);
}
inline const ::apollo::perception::inference::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.scale_param)
  return _internal_scale_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_scale_param(
    ::apollo::perception::inference::ScaleParameter* scale_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_param_);
  }
  _impl_.scale_param_ = scale_param;
  if (scale_param) {
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.scale_param)
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::release_scale_param() {
  _impl_._has_bits_[1] &= ~0x00001000u;
  ::apollo::perception::inference::ScaleParameter* temp = _impl_.scale_param_;
  _impl_.scale_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::unsafe_arena_release_scale_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.scale_param)
  _impl_._has_bits_[1] &= ~0x00001000u;
  ::apollo::perception::inference::ScaleParameter* temp = _impl_.scale_param_;
  _impl_.scale_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::_internal_mutable_scale_param() {
  _impl_._has_bits_[1] |= 0x00001000u;
  if (_impl_.scale_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ScaleParameter>(GetArenaForAllocation());
    _impl_.scale_param_ = p;
  }
  return _impl_.scale_param_;
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::mutable_scale_param() {
  ::apollo::perception::inference::ScaleParameter* _msg = _internal_mutable_scale_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.scale_param)
  return _msg;
}
inline void LayerParameter::set_allocated_scale_param(::apollo::perception::inference::ScaleParameter* scale_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_param_;
  }
  if (scale_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_param);
    if (message_arena != submessage_arena) {
      scale_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  _impl_.scale_param_ = scale_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.scale_param)
}

// optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::_internal_has_sigmoid_param() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sigmoid_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_sigmoid_param() const {
  return _internal_has_sigmoid_param();
}
inline void LayerParameter::clear_sigmoid_param() {
  if (_impl_.sigmoid_param_ != nullptr) _impl_.sigmoid_param_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::apollo::perception::inference::SigmoidParameter& LayerParameter::_internal_sigmoid_param() const {
  const ::apollo::perception::inference::SigmoidParameter* p = _impl_.sigmoid_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SigmoidParameter&>(
      ::apollo::perception::inference::_SigmoidParameter_default_instance_);
}
inline const ::apollo::perception::inference::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_sigmoid_param(
    ::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmoid_param_);
  }
  _impl_.sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.sigmoid_param)
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::apollo::perception::inference::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::unsafe_arena_release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.sigmoid_param)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::apollo::perception::inference::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::_internal_mutable_sigmoid_param() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SigmoidParameter>(GetArenaForAllocation());
    _impl_.sigmoid_param_ = p;
  }
  return _impl_.sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  ::apollo::perception::inference::SigmoidParameter* _msg = _internal_mutable_sigmoid_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.sigmoid_param)
  return _msg;
}
inline void LayerParameter::set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sigmoid_param_;
  }
  if (sigmoid_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sigmoid_param);
    if (message_arena != submessage_arena) {
      sigmoid_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.sigmoid_param)
}

// optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::_internal_has_softmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.softmax_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_softmax_param() const {
  return _internal_has_softmax_param();
}
inline void LayerParameter::clear_softmax_param() {
  if (_impl_.softmax_param_ != nullptr) _impl_.softmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const ::apollo::perception::inference::SoftmaxParameter& LayerParameter::_internal_softmax_param() const {
  const ::apollo::perception::inference::SoftmaxParameter* p = _impl_.softmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SoftmaxParameter&>(
      ::apollo::perception::inference::_SoftmaxParameter_default_instance_);
}
inline const ::apollo::perception::inference::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_softmax_param(
    ::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.softmax_param_);
  }
  _impl_.softmax_param_ = softmax_param;
  if (softmax_param) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.softmax_param)
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::release_softmax_param() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::apollo::perception::inference::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::unsafe_arena_release_softmax_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.softmax_param)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::apollo::perception::inference::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::_internal_mutable_softmax_param() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SoftmaxParameter>(GetArenaForAllocation());
    _impl_.softmax_param_ = p;
  }
  return _impl_.softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  ::apollo::perception::inference::SoftmaxParameter* _msg = _internal_mutable_softmax_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.softmax_param)
  return _msg;
}
inline void LayerParameter::set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.softmax_param_;
  }
  if (softmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(softmax_param);
    if (message_arena != submessage_arena) {
      softmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.softmax_param)
}

// optional .apollo.perception.inference.SPPParameter spp_param = 132;
inline bool LayerParameter::_internal_has_spp_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spp_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_spp_param() const {
  return _internal_has_spp_param();
}
inline void LayerParameter::clear_spp_param() {
  if (_impl_.spp_param_ != nullptr) _impl_.spp_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::SPPParameter& LayerParameter::_internal_spp_param() const {
  const ::apollo::perception::inference::SPPParameter* p = _impl_.spp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SPPParameter&>(
      ::apollo::perception::inference::_SPPParameter_default_instance_);
}
inline const ::apollo::perception::inference::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.spp_param)
  return _internal_spp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_spp_param(
    ::apollo::perception::inference::SPPParameter* spp_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spp_param_);
  }
  _impl_.spp_param_ = spp_param;
  if (spp_param) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.spp_param)
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::release_spp_param() {
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::apollo::perception::inference::SPPParameter* temp = _impl_.spp_param_;
  _impl_.spp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::unsafe_arena_release_spp_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.spp_param)
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::apollo::perception::inference::SPPParameter* temp = _impl_.spp_param_;
  _impl_.spp_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::_internal_mutable_spp_param() {
  _impl_._has_bits_[1] |= 0x00000004u;
  if (_impl_.spp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SPPParameter>(GetArenaForAllocation());
    _impl_.spp_param_ = p;
  }
  return _impl_.spp_param_;
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::mutable_spp_param() {
  ::apollo::perception::inference::SPPParameter* _msg = _internal_mutable_spp_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.spp_param)
  return _msg;
}
inline void LayerParameter::set_allocated_spp_param(::apollo::perception::inference::SPPParameter* spp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spp_param_;
  }
  if (spp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spp_param);
    if (message_arena != submessage_arena) {
      spp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spp_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  _impl_.spp_param_ = spp_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.spp_param)
}

// optional .apollo.perception.inference.SliceParameter slice_param = 126;
inline bool LayerParameter::_internal_has_slice_param() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slice_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_slice_param() const {
  return _internal_has_slice_param();
}
inline void LayerParameter::clear_slice_param() {
  if (_impl_.slice_param_ != nullptr) _impl_.slice_param_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const ::apollo::perception::inference::SliceParameter& LayerParameter::_internal_slice_param() const {
  const ::apollo::perception::inference::SliceParameter* p = _impl_.slice_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SliceParameter&>(
      ::apollo::perception::inference::_SliceParameter_default_instance_);
}
inline const ::apollo::perception::inference::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_slice_param(
    ::apollo::perception::inference::SliceParameter* slice_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_param_);
  }
  _impl_.slice_param_ = slice_param;
  if (slice_param) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.slice_param)
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::release_slice_param() {
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::apollo::perception::inference::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::unsafe_arena_release_slice_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.slice_param)
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::apollo::perception::inference::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::_internal_mutable_slice_param() {
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SliceParameter>(GetArenaForAllocation());
    _impl_.slice_param_ = p;
  }
  return _impl_.slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::mutable_slice_param() {
  ::apollo::perception::inference::SliceParameter* _msg = _internal_mutable_slice_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.slice_param)
  return _msg;
}
inline void LayerParameter::set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.slice_param_;
  }
  if (slice_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice_param);
    if (message_arena != submessage_arena) {
      slice_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.slice_param)
}

// optional .apollo.perception.inference.TanHParameter tanh_param = 127;
inline bool LayerParameter::_internal_has_tanh_param() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tanh_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_tanh_param() const {
  return _internal_has_tanh_param();
}
inline void LayerParameter::clear_tanh_param() {
  if (_impl_.tanh_param_ != nullptr) _impl_.tanh_param_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::apollo::perception::inference::TanHParameter& LayerParameter::_internal_tanh_param() const {
  const ::apollo::perception::inference::TanHParameter* p = _impl_.tanh_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::TanHParameter&>(
      ::apollo::perception::inference::_TanHParameter_default_instance_);
}
inline const ::apollo::perception::inference::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tanh_param(
    ::apollo::perception::inference::TanHParameter* tanh_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tanh_param_);
  }
  _impl_.tanh_param_ = tanh_param;
  if (tanh_param) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.tanh_param)
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::release_tanh_param() {
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::apollo::perception::inference::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::unsafe_arena_release_tanh_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.tanh_param)
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::apollo::perception::inference::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::_internal_mutable_tanh_param() {
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::TanHParameter>(GetArenaForAllocation());
    _impl_.tanh_param_ = p;
  }
  return _impl_.tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::mutable_tanh_param() {
  ::apollo::perception::inference::TanHParameter* _msg = _internal_mutable_tanh_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.tanh_param)
  return _msg;
}
inline void LayerParameter::set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tanh_param_;
  }
  if (tanh_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tanh_param);
    if (message_arena != submessage_arena) {
      tanh_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.tanh_param)
}

// optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::_internal_has_threshold_param() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.threshold_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_threshold_param() const {
  return _internal_has_threshold_param();
}
inline void LayerParameter::clear_threshold_param() {
  if (_impl_.threshold_param_ != nullptr) _impl_.threshold_param_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::apollo::perception::inference::ThresholdParameter& LayerParameter::_internal_threshold_param() const {
  const ::apollo::perception::inference::ThresholdParameter* p = _impl_.threshold_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ThresholdParameter&>(
      ::apollo::perception::inference::_ThresholdParameter_default_instance_);
}
inline const ::apollo::perception::inference::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_threshold_param(
    ::apollo::perception::inference::ThresholdParameter* threshold_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.threshold_param_);
  }
  _impl_.threshold_param_ = threshold_param;
  if (threshold_param) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.threshold_param)
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::release_threshold_param() {
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::apollo::perception::inference::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::unsafe_arena_release_threshold_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.threshold_param)
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::apollo::perception::inference::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::_internal_mutable_threshold_param() {
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ThresholdParameter>(GetArenaForAllocation());
    _impl_.threshold_param_ = p;
  }
  return _impl_.threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  ::apollo::perception::inference::ThresholdParameter* _msg = _internal_mutable_threshold_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.threshold_param)
  return _msg;
}
inline void LayerParameter::set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.threshold_param_;
  }
  if (threshold_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(threshold_param);
    if (message_arena != submessage_arena) {
      threshold_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.threshold_param)
}

// optional .apollo.perception.inference.TileParameter tile_param = 138;
inline bool LayerParameter::_internal_has_tile_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tile_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_tile_param() const {
  return _internal_has_tile_param();
}
inline void LayerParameter::clear_tile_param() {
  if (_impl_.tile_param_ != nullptr) _impl_.tile_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline const ::apollo::perception::inference::TileParameter& LayerParameter::_internal_tile_param() const {
  const ::apollo::perception::inference::TileParameter* p = _impl_.tile_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::TileParameter&>(
      ::apollo::perception::inference::_TileParameter_default_instance_);
}
inline const ::apollo::perception::inference::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.tile_param)
  return _internal_tile_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tile_param(
    ::apollo::perception::inference::TileParameter* tile_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tile_param_);
  }
  _impl_.tile_param_ = tile_param;
  if (tile_param) {
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.tile_param)
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::release_tile_param() {
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::apollo::perception::inference::TileParameter* temp = _impl_.tile_param_;
  _impl_.tile_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::unsafe_arena_release_tile_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.tile_param)
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::apollo::perception::inference::TileParameter* temp = _impl_.tile_param_;
  _impl_.tile_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::_internal_mutable_tile_param() {
  _impl_._has_bits_[1] |= 0x00000100u;
  if (_impl_.tile_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::TileParameter>(GetArenaForAllocation());
    _impl_.tile_param_ = p;
  }
  return _impl_.tile_param_;
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::mutable_tile_param() {
  ::apollo::perception::inference::TileParameter* _msg = _internal_mutable_tile_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.tile_param)
  return _msg;
}
inline void LayerParameter::set_allocated_tile_param(::apollo::perception::inference::TileParameter* tile_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tile_param_;
  }
  if (tile_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tile_param);
    if (message_arena != submessage_arena) {
      tile_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  _impl_.tile_param_ = tile_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.tile_param)
}

// optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
inline bool LayerParameter::_internal_has_video_data_param() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.video_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_video_data_param() const {
  return _internal_has_video_data_param();
}
inline void LayerParameter::clear_video_data_param() {
  if (_impl_.video_data_param_ != nullptr) _impl_.video_data_param_->Clear();
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline const ::apollo::perception::inference::VideoDataParameter& LayerParameter::_internal_video_data_param() const {
  const ::apollo::perception::inference::VideoDataParameter* p = _impl_.video_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::VideoDataParameter&>(
      ::apollo::perception::inference::_VideoDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::VideoDataParameter& LayerParameter::video_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.video_data_param)
  return _internal_video_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_video_data_param(
    ::apollo::perception::inference::VideoDataParameter* video_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_data_param_);
  }
  _impl_.video_data_param_ = video_data_param;
  if (video_data_param) {
    _impl_._has_bits_[1] |= 0x01000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.video_data_param)
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::release_video_data_param() {
  _impl_._has_bits_[1] &= ~0x01000000u;
  ::apollo::perception::inference::VideoDataParameter* temp = _impl_.video_data_param_;
  _impl_.video_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::unsafe_arena_release_video_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.video_data_param)
  _impl_._has_bits_[1] &= ~0x01000000u;
  ::apollo::perception::inference::VideoDataParameter* temp = _impl_.video_data_param_;
  _impl_.video_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::_internal_mutable_video_data_param() {
  _impl_._has_bits_[1] |= 0x01000000u;
  if (_impl_.video_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::VideoDataParameter>(GetArenaForAllocation());
    _impl_.video_data_param_ = p;
  }
  return _impl_.video_data_param_;
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::mutable_video_data_param() {
  ::apollo::perception::inference::VideoDataParameter* _msg = _internal_mutable_video_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.video_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_video_data_param(::apollo::perception::inference::VideoDataParameter* video_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_data_param_;
  }
  if (video_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video_data_param);
    if (message_arena != submessage_arena) {
      video_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_data_param, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x01000000u;
  } else {
    _impl_._has_bits_[1] &= ~0x01000000u;
  }
  _impl_.video_data_param_ = video_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.video_data_param)
}

// optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::_internal_has_window_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_data_param_ != nullptr);
  return value;
}
inline bool LayerParameter::has_window_data_param() const {
  return _internal_has_window_data_param();
}
inline void LayerParameter::clear_window_data_param() {
  if (_impl_.window_data_param_ != nullptr) _impl_.window_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const ::apollo::perception::inference::WindowDataParameter& LayerParameter::_internal_window_data_param() const {
  const ::apollo::perception::inference::WindowDataParameter* p = _impl_.window_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::WindowDataParameter&>(
      ::apollo::perception::inference::_WindowDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_window_data_param(
    ::apollo::perception::inference::WindowDataParameter* window_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_data_param_);
  }
  _impl_.window_data_param_ = window_data_param;
  if (window_data_param) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.LayerParameter.window_data_param)
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::release_window_data_param() {
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::apollo::perception::inference::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::unsafe_arena_release_window_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.LayerParameter.window_data_param)
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::apollo::perception::inference::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::_internal_mutable_window_data_param() {
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::WindowDataParameter>(GetArenaForAllocation());
    _impl_.window_data_param_ = p;
  }
  return _impl_.window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  ::apollo::perception::inference::WindowDataParameter* _msg = _internal_mutable_window_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.window_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_data_param_;
  }
  if (window_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_data_param);
    if (message_arena != submessage_arena) {
      window_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.window_data_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TransformationParameter::has_scale() const {
  return _internal_has_scale();
}
inline void TransformationParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float TransformationParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.scale)
  return _internal_scale();
}
inline void TransformationParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.scale_ = value;
}
inline void TransformationParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TransformationParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void TransformationParameter::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TransformationParameter::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mirror)
  return _internal_mirror();
}
inline void TransformationParameter::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mirror_ = value;
}
inline void TransformationParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::_internal_has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransformationParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void TransformationParameter::clear_crop_size() {
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t TransformationParameter::_internal_crop_size() const {
  return _impl_.crop_size_;
}
inline uint32_t TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_size)
  return _internal_crop_size();
}
inline void TransformationParameter::_internal_set_crop_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.crop_size_ = value;
}
inline void TransformationParameter::set_crop_size(uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_size)
}

// optional uint32 crop_h = 11 [default = 0];
inline bool TransformationParameter::_internal_has_crop_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TransformationParameter::has_crop_h() const {
  return _internal_has_crop_h();
}
inline void TransformationParameter::clear_crop_h() {
  _impl_.crop_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t TransformationParameter::_internal_crop_h() const {
  return _impl_.crop_h_;
}
inline uint32_t TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_h)
  return _internal_crop_h();
}
inline void TransformationParameter::_internal_set_crop_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.crop_h_ = value;
}
inline void TransformationParameter::set_crop_h(uint32_t value) {
  _internal_set_crop_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 12 [default = 0];
inline bool TransformationParameter::_internal_has_crop_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TransformationParameter::has_crop_w() const {
  return _internal_has_crop_w();
}
inline void TransformationParameter::clear_crop_w() {
  _impl_.crop_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t TransformationParameter::_internal_crop_w() const {
  return _impl_.crop_w_;
}
inline uint32_t TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_w)
  return _internal_crop_w();
}
inline void TransformationParameter::_internal_set_crop_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.crop_w_ = value;
}
inline void TransformationParameter::set_crop_w(uint32_t value) {
  _internal_set_crop_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_w)
}

// optional string mean_file = 4;
inline bool TransformationParameter::_internal_has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformationParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void TransformationParameter::clear_mean_file() {
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mean_file)
  return _internal_mean_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformationParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mean_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mean_file)
}
inline std::string* TransformationParameter::mutable_mean_file() {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.mean_file)
  return _s;
}
inline const std::string& TransformationParameter::_internal_mean_file() const {
  return _impl_.mean_file_.Get();
}
inline void TransformationParameter::_internal_set_mean_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_file_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformationParameter::_internal_mutable_mean_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mean_file_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mean_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransformationParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mean_file_.SetAllocated(mean_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::_internal_mean_value_size() const {
  return _impl_.mean_value_.size();
}
inline int TransformationParameter::mean_value_size() const {
  return _internal_mean_value_size();
}
inline void TransformationParameter::clear_mean_value() {
  _impl_.mean_value_.Clear();
}
inline float TransformationParameter::_internal_mean_value(int index) const {
  return _impl_.mean_value_.Get(index);
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mean_value)
  return _internal_mean_value(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  _impl_.mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mean_value)
}
inline void TransformationParameter::_internal_add_mean_value(float value) {
  _impl_.mean_value_.Add(value);
}
inline void TransformationParameter::add_mean_value(float value) {
  _internal_add_mean_value(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.TransformationParameter.mean_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransformationParameter::_internal_mean_value() const {
  return _impl_.mean_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.TransformationParameter.mean_value)
  return _internal_mean_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransformationParameter::_internal_mutable_mean_value() {
  return &_impl_.mean_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.TransformationParameter.mean_value)
  return _internal_mutable_mean_value();
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::_internal_has_force_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TransformationParameter::has_force_color() const {
  return _internal_has_force_color();
}
inline void TransformationParameter::clear_force_color() {
  _impl_.force_color_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool TransformationParameter::_internal_force_color() const {
  return _impl_.force_color_;
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.force_color)
  return _internal_force_color();
}
inline void TransformationParameter::_internal_set_force_color(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.force_color_ = value;
}
inline void TransformationParameter::set_force_color(bool value) {
  _internal_set_force_color(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::_internal_has_force_gray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TransformationParameter::has_force_gray() const {
  return _internal_has_force_gray();
}
inline void TransformationParameter::clear_force_gray() {
  _impl_.force_gray_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TransformationParameter::_internal_force_gray() const {
  return _impl_.force_gray_;
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.force_gray)
  return _internal_force_gray();
}
inline void TransformationParameter::_internal_set_force_gray(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.force_gray_ = value;
}
inline void TransformationParameter::set_force_gray(bool value) {
  _internal_set_force_gray(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.force_gray)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 8;
inline bool TransformationParameter::_internal_has_resize_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resize_param_ != nullptr);
  return value;
}
inline bool TransformationParameter::has_resize_param() const {
  return _internal_has_resize_param();
}
inline void TransformationParameter::clear_resize_param() {
  if (_impl_.resize_param_ != nullptr) _impl_.resize_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::ResizeParameter& TransformationParameter::_internal_resize_param() const {
  const ::apollo::perception::inference::ResizeParameter* p = _impl_.resize_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ResizeParameter&>(
      ::apollo::perception::inference::_ResizeParameter_default_instance_);
}
inline const ::apollo::perception::inference::ResizeParameter& TransformationParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.resize_param)
  return _internal_resize_param();
}
inline void TransformationParameter::unsafe_arena_set_allocated_resize_param(
    ::apollo::perception::inference::ResizeParameter* resize_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resize_param_);
  }
  _impl_.resize_param_ = resize_param;
  if (resize_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.TransformationParameter.resize_param)
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::release_resize_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::unsafe_arena_release_resize_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.resize_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::_internal_mutable_resize_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.resize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ResizeParameter>(GetArenaForAllocation());
    _impl_.resize_param_ = p;
  }
  return _impl_.resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::mutable_resize_param() {
  ::apollo::perception::inference::ResizeParameter* _msg = _internal_mutable_resize_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.resize_param)
  return _msg;
}
inline void TransformationParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resize_param_;
  }
  if (resize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resize_param);
    if (message_arena != submessage_arena) {
      resize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.resize_param_ = resize_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.resize_param)
}

// optional .apollo.perception.inference.NoiseParameter noise_param = 9;
inline bool TransformationParameter::_internal_has_noise_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.noise_param_ != nullptr);
  return value;
}
inline bool TransformationParameter::has_noise_param() const {
  return _internal_has_noise_param();
}
inline void TransformationParameter::clear_noise_param() {
  if (_impl_.noise_param_ != nullptr) _impl_.noise_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::NoiseParameter& TransformationParameter::_internal_noise_param() const {
  const ::apollo::perception::inference::NoiseParameter* p = _impl_.noise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NoiseParameter&>(
      ::apollo::perception::inference::_NoiseParameter_default_instance_);
}
inline const ::apollo::perception::inference::NoiseParameter& TransformationParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.noise_param)
  return _internal_noise_param();
}
inline void TransformationParameter::unsafe_arena_set_allocated_noise_param(
    ::apollo::perception::inference::NoiseParameter* noise_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.noise_param_);
  }
  _impl_.noise_param_ = noise_param;
  if (noise_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.TransformationParameter.noise_param)
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::release_noise_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::NoiseParameter* temp = _impl_.noise_param_;
  _impl_.noise_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::unsafe_arena_release_noise_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.noise_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::NoiseParameter* temp = _impl_.noise_param_;
  _impl_.noise_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::_internal_mutable_noise_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.noise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NoiseParameter>(GetArenaForAllocation());
    _impl_.noise_param_ = p;
  }
  return _impl_.noise_param_;
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::mutable_noise_param() {
  ::apollo::perception::inference::NoiseParameter* _msg = _internal_mutable_noise_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.noise_param)
  return _msg;
}
inline void TransformationParameter::set_allocated_noise_param(::apollo::perception::inference::NoiseParameter* noise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.noise_param_;
  }
  if (noise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(noise_param);
    if (message_arena != submessage_arena) {
      noise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noise_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.noise_param_ = noise_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.noise_param)
}

// optional .apollo.perception.inference.DistortionParameter distort_param = 13;
inline bool TransformationParameter::_internal_has_distort_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distort_param_ != nullptr);
  return value;
}
inline bool TransformationParameter::has_distort_param() const {
  return _internal_has_distort_param();
}
inline void TransformationParameter::clear_distort_param() {
  if (_impl_.distort_param_ != nullptr) _impl_.distort_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::inference::DistortionParameter& TransformationParameter::_internal_distort_param() const {
  const ::apollo::perception::inference::DistortionParameter* p = _impl_.distort_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DistortionParameter&>(
      ::apollo::perception::inference::_DistortionParameter_default_instance_);
}
inline const ::apollo::perception::inference::DistortionParameter& TransformationParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.distort_param)
  return _internal_distort_param();
}
inline void TransformationParameter::unsafe_arena_set_allocated_distort_param(
    ::apollo::perception::inference::DistortionParameter* distort_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.distort_param_);
  }
  _impl_.distort_param_ = distort_param;
  if (distort_param) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.TransformationParameter.distort_param)
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::release_distort_param() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::DistortionParameter* temp = _impl_.distort_param_;
  _impl_.distort_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::unsafe_arena_release_distort_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.distort_param)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::DistortionParameter* temp = _impl_.distort_param_;
  _impl_.distort_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::_internal_mutable_distort_param() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.distort_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DistortionParameter>(GetArenaForAllocation());
    _impl_.distort_param_ = p;
  }
  return _impl_.distort_param_;
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::mutable_distort_param() {
  ::apollo::perception::inference::DistortionParameter* _msg = _internal_mutable_distort_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.distort_param)
  return _msg;
}
inline void TransformationParameter::set_allocated_distort_param(::apollo::perception::inference::DistortionParameter* distort_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.distort_param_;
  }
  if (distort_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distort_param);
    if (message_arena != submessage_arena) {
      distort_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distort_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.distort_param_ = distort_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.distort_param)
}

// optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
inline bool TransformationParameter::_internal_has_expand_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expand_param_ != nullptr);
  return value;
}
inline bool TransformationParameter::has_expand_param() const {
  return _internal_has_expand_param();
}
inline void TransformationParameter::clear_expand_param() {
  if (_impl_.expand_param_ != nullptr) _impl_.expand_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::ExpansionParameter& TransformationParameter::_internal_expand_param() const {
  const ::apollo::perception::inference::ExpansionParameter* p = _impl_.expand_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ExpansionParameter&>(
      ::apollo::perception::inference::_ExpansionParameter_default_instance_);
}
inline const ::apollo::perception::inference::ExpansionParameter& TransformationParameter::expand_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.expand_param)
  return _internal_expand_param();
}
inline void TransformationParameter::unsafe_arena_set_allocated_expand_param(
    ::apollo::perception::inference::ExpansionParameter* expand_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expand_param_);
  }
  _impl_.expand_param_ = expand_param;
  if (expand_param) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.TransformationParameter.expand_param)
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::release_expand_param() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ExpansionParameter* temp = _impl_.expand_param_;
  _impl_.expand_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::unsafe_arena_release_expand_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.expand_param)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ExpansionParameter* temp = _impl_.expand_param_;
  _impl_.expand_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::_internal_mutable_expand_param() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.expand_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ExpansionParameter>(GetArenaForAllocation());
    _impl_.expand_param_ = p;
  }
  return _impl_.expand_param_;
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::mutable_expand_param() {
  ::apollo::perception::inference::ExpansionParameter* _msg = _internal_mutable_expand_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.expand_param)
  return _msg;
}
inline void TransformationParameter::set_allocated_expand_param(::apollo::perception::inference::ExpansionParameter* expand_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expand_param_;
  }
  if (expand_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expand_param);
    if (message_arena != submessage_arena) {
      expand_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expand_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.expand_param_ = expand_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.expand_param)
}

// optional float jitter = 15;
inline bool TransformationParameter::_internal_has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TransformationParameter::has_jitter() const {
  return _internal_has_jitter();
}
inline void TransformationParameter::clear_jitter() {
  _impl_.jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float TransformationParameter::_internal_jitter() const {
  return _impl_.jitter_;
}
inline float TransformationParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.jitter)
  return _internal_jitter();
}
inline void TransformationParameter::_internal_set_jitter(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.jitter_ = value;
}
inline void TransformationParameter::set_jitter(float value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.jitter)
}

// optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
inline bool TransformationParameter::_internal_has_emit_constraint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emit_constraint_ != nullptr);
  return value;
}
inline bool TransformationParameter::has_emit_constraint() const {
  return _internal_has_emit_constraint();
}
inline void TransformationParameter::clear_emit_constraint() {
  if (_impl_.emit_constraint_ != nullptr) _impl_.emit_constraint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::EmitConstraint& TransformationParameter::_internal_emit_constraint() const {
  const ::apollo::perception::inference::EmitConstraint* p = _impl_.emit_constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::EmitConstraint&>(
      ::apollo::perception::inference::_EmitConstraint_default_instance_);
}
inline const ::apollo::perception::inference::EmitConstraint& TransformationParameter::emit_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.emit_constraint)
  return _internal_emit_constraint();
}
inline void TransformationParameter::unsafe_arena_set_allocated_emit_constraint(
    ::apollo::perception::inference::EmitConstraint* emit_constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emit_constraint_);
  }
  _impl_.emit_constraint_ = emit_constraint;
  if (emit_constraint) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.TransformationParameter.emit_constraint)
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::release_emit_constraint() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::EmitConstraint* temp = _impl_.emit_constraint_;
  _impl_.emit_constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::unsafe_arena_release_emit_constraint() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.TransformationParameter.emit_constraint)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::EmitConstraint* temp = _impl_.emit_constraint_;
  _impl_.emit_constraint_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::_internal_mutable_emit_constraint() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.emit_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::EmitConstraint>(GetArenaForAllocation());
    _impl_.emit_constraint_ = p;
  }
  return _impl_.emit_constraint_;
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::mutable_emit_constraint() {
  ::apollo::perception::inference::EmitConstraint* _msg = _internal_mutable_emit_constraint();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.emit_constraint)
  return _msg;
}
inline void TransformationParameter::set_allocated_emit_constraint(::apollo::perception::inference::EmitConstraint* emit_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.emit_constraint_;
  }
  if (emit_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emit_constraint);
    if (message_arena != submessage_arena) {
      emit_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emit_constraint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.emit_constraint_ = emit_constraint;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.emit_constraint)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float prob = 1 [default = 1];
inline bool ResizeParameter::_internal_has_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ResizeParameter::has_prob() const {
  return _internal_has_prob();
}
inline void ResizeParameter::clear_prob() {
  _impl_.prob_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ResizeParameter::_internal_prob() const {
  return _impl_.prob_;
}
inline float ResizeParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.prob)
  return _internal_prob();
}
inline void ResizeParameter::_internal_set_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prob_ = value;
}
inline void ResizeParameter::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.prob)
}

// optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
inline bool ResizeParameter::_internal_has_resize_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ResizeParameter::has_resize_mode() const {
  return _internal_has_resize_mode();
}
inline void ResizeParameter::clear_resize_mode() {
  _impl_.resize_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::perception::inference::ResizeParameter_Resize_mode ResizeParameter::_internal_resize_mode() const {
  return static_cast< ::apollo::perception::inference::ResizeParameter_Resize_mode >(_impl_.resize_mode_);
}
inline ::apollo::perception::inference::ResizeParameter_Resize_mode ResizeParameter::resize_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.resize_mode)
  return _internal_resize_mode();
}
inline void ResizeParameter::_internal_set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Resize_mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.resize_mode_ = value;
}
inline void ResizeParameter::set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value) {
  _internal_set_resize_mode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.resize_mode)
}

// optional uint32 height = 3 [default = 0];
inline bool ResizeParameter::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResizeParameter::has_height() const {
  return _internal_has_height();
}
inline void ResizeParameter::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ResizeParameter::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.height)
  return _internal_height();
}
inline void ResizeParameter::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.height_ = value;
}
inline void ResizeParameter::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.height)
}

// optional uint32 width = 4 [default = 0];
inline bool ResizeParameter::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResizeParameter::has_width() const {
  return _internal_has_width();
}
inline void ResizeParameter::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ResizeParameter::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.width)
  return _internal_width();
}
inline void ResizeParameter::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.width_ = value;
}
inline void ResizeParameter::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.width)
}

// optional uint32 height_scale = 8 [default = 0];
inline bool ResizeParameter::_internal_has_height_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResizeParameter::has_height_scale() const {
  return _internal_has_height_scale();
}
inline void ResizeParameter::clear_height_scale() {
  _impl_.height_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ResizeParameter::_internal_height_scale() const {
  return _impl_.height_scale_;
}
inline uint32_t ResizeParameter::height_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.height_scale)
  return _internal_height_scale();
}
inline void ResizeParameter::_internal_set_height_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_scale_ = value;
}
inline void ResizeParameter::set_height_scale(uint32_t value) {
  _internal_set_height_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.height_scale)
}

// optional uint32 width_scale = 9 [default = 0];
inline bool ResizeParameter::_internal_has_width_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResizeParameter::has_width_scale() const {
  return _internal_has_width_scale();
}
inline void ResizeParameter::clear_width_scale() {
  _impl_.width_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ResizeParameter::_internal_width_scale() const {
  return _impl_.width_scale_;
}
inline uint32_t ResizeParameter::width_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.width_scale)
  return _internal_width_scale();
}
inline void ResizeParameter::_internal_set_width_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_scale_ = value;
}
inline void ResizeParameter::set_width_scale(uint32_t value) {
  _internal_set_width_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.width_scale)
}

// optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
inline bool ResizeParameter::_internal_has_pad_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResizeParameter::has_pad_mode() const {
  return _internal_has_pad_mode();
}
inline void ResizeParameter::clear_pad_mode() {
  _impl_.pad_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::perception::inference::ResizeParameter_Pad_mode ResizeParameter::_internal_pad_mode() const {
  return static_cast< ::apollo::perception::inference::ResizeParameter_Pad_mode >(_impl_.pad_mode_);
}
inline ::apollo::perception::inference::ResizeParameter_Pad_mode ResizeParameter::pad_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.pad_mode)
  return _internal_pad_mode();
}
inline void ResizeParameter::_internal_set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Pad_mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pad_mode_ = value;
}
inline void ResizeParameter::set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value) {
  _internal_set_pad_mode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.pad_mode)
}

// repeated float pad_value = 6;
inline int ResizeParameter::_internal_pad_value_size() const {
  return _impl_.pad_value_.size();
}
inline int ResizeParameter::pad_value_size() const {
  return _internal_pad_value_size();
}
inline void ResizeParameter::clear_pad_value() {
  _impl_.pad_value_.Clear();
}
inline float ResizeParameter::_internal_pad_value(int index) const {
  return _impl_.pad_value_.Get(index);
}
inline float ResizeParameter::pad_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.pad_value)
  return _internal_pad_value(index);
}
inline void ResizeParameter::set_pad_value(int index, float value) {
  _impl_.pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.pad_value)
}
inline void ResizeParameter::_internal_add_pad_value(float value) {
  _impl_.pad_value_.Add(value);
}
inline void ResizeParameter::add_pad_value(float value) {
  _internal_add_pad_value(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ResizeParameter.pad_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResizeParameter::_internal_pad_value() const {
  return _impl_.pad_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ResizeParameter::pad_value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ResizeParameter.pad_value)
  return _internal_pad_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResizeParameter::_internal_mutable_pad_value() {
  return &_impl_.pad_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ResizeParameter::mutable_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ResizeParameter.pad_value)
  return _internal_mutable_pad_value();
}

// repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
inline int ResizeParameter::_internal_interp_mode_size() const {
  return _impl_.interp_mode_.size();
}
inline int ResizeParameter::interp_mode_size() const {
  return _internal_interp_mode_size();
}
inline void ResizeParameter::clear_interp_mode() {
  _impl_.interp_mode_.Clear();
}
inline ::apollo::perception::inference::ResizeParameter_Interp_mode ResizeParameter::_internal_interp_mode(int index) const {
  return static_cast< ::apollo::perception::inference::ResizeParameter_Interp_mode >(_impl_.interp_mode_.Get(index));
}
inline ::apollo::perception::inference::ResizeParameter_Interp_mode ResizeParameter::interp_mode(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.interp_mode)
  return _internal_interp_mode(index);
}
inline void ResizeParameter::set_interp_mode(int index, ::apollo::perception::inference::ResizeParameter_Interp_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(value));
  _impl_.interp_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.interp_mode)
}
inline void ResizeParameter::_internal_add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(value));
  _impl_.interp_mode_.Add(value);
}
inline void ResizeParameter::add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value) {
  _internal_add_interp_mode(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ResizeParameter.interp_mode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ResizeParameter::interp_mode() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ResizeParameter.interp_mode)
  return _impl_.interp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ResizeParameter::_internal_mutable_interp_mode() {
  return &_impl_.interp_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ResizeParameter::mutable_interp_mode() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ResizeParameter.interp_mode)
  return _internal_mutable_interp_mode();
}

// -------------------------------------------------------------------

// SaltPepperParameter

// optional float fraction = 1 [default = 0];
inline bool SaltPepperParameter::_internal_has_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SaltPepperParameter::has_fraction() const {
  return _internal_has_fraction();
}
inline void SaltPepperParameter::clear_fraction() {
  _impl_.fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SaltPepperParameter::_internal_fraction() const {
  return _impl_.fraction_;
}
inline float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaltPepperParameter.fraction)
  return _internal_fraction();
}
inline void SaltPepperParameter::_internal_set_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fraction_ = value;
}
inline void SaltPepperParameter::set_fraction(float value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaltPepperParameter.fraction)
}

// repeated float value = 2;
inline int SaltPepperParameter::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int SaltPepperParameter::value_size() const {
  return _internal_value_size();
}
inline void SaltPepperParameter::clear_value() {
  _impl_.value_.Clear();
}
inline float SaltPepperParameter::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaltPepperParameter.value)
  return _internal_value(index);
}
inline void SaltPepperParameter::set_value(int index, float value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaltPepperParameter.value)
}
inline void SaltPepperParameter::_internal_add_value(float value) {
  _impl_.value_.Add(value);
}
inline void SaltPepperParameter::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SaltPepperParameter.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SaltPepperParameter::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SaltPepperParameter.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SaltPepperParameter::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SaltPepperParameter.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float prob = 1 [default = 0];
inline bool NoiseParameter::_internal_has_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NoiseParameter::has_prob() const {
  return _internal_has_prob();
}
inline void NoiseParameter::clear_prob() {
  _impl_.prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NoiseParameter::_internal_prob() const {
  return _impl_.prob_;
}
inline float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.prob)
  return _internal_prob();
}
inline void NoiseParameter::_internal_set_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prob_ = value;
}
inline void NoiseParameter::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
inline bool NoiseParameter::_internal_has_hist_eq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NoiseParameter::has_hist_eq() const {
  return _internal_has_hist_eq();
}
inline void NoiseParameter::clear_hist_eq() {
  _impl_.hist_eq_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NoiseParameter::_internal_hist_eq() const {
  return _impl_.hist_eq_;
}
inline bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.hist_eq)
  return _internal_hist_eq();
}
inline void NoiseParameter::_internal_set_hist_eq(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hist_eq_ = value;
}
inline void NoiseParameter::set_hist_eq(bool value) {
  _internal_set_hist_eq(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
inline bool NoiseParameter::_internal_has_inverse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NoiseParameter::has_inverse() const {
  return _internal_has_inverse();
}
inline void NoiseParameter::clear_inverse() {
  _impl_.inverse_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NoiseParameter::_internal_inverse() const {
  return _impl_.inverse_;
}
inline bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.inverse)
  return _internal_inverse();
}
inline void NoiseParameter::_internal_set_inverse(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.inverse_ = value;
}
inline void NoiseParameter::set_inverse(bool value) {
  _internal_set_inverse(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
inline bool NoiseParameter::_internal_has_decolorize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NoiseParameter::has_decolorize() const {
  return _internal_has_decolorize();
}
inline void NoiseParameter::clear_decolorize() {
  _impl_.decolorize_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NoiseParameter::_internal_decolorize() const {
  return _impl_.decolorize_;
}
inline bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.decolorize)
  return _internal_decolorize();
}
inline void NoiseParameter::_internal_set_decolorize(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.decolorize_ = value;
}
inline void NoiseParameter::set_decolorize(bool value) {
  _internal_set_decolorize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
inline bool NoiseParameter::_internal_has_gauss_blur() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NoiseParameter::has_gauss_blur() const {
  return _internal_has_gauss_blur();
}
inline void NoiseParameter::clear_gauss_blur() {
  _impl_.gauss_blur_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool NoiseParameter::_internal_gauss_blur() const {
  return _impl_.gauss_blur_;
}
inline bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.gauss_blur)
  return _internal_gauss_blur();
}
inline void NoiseParameter::_internal_set_gauss_blur(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gauss_blur_ = value;
}
inline void NoiseParameter::set_gauss_blur(bool value) {
  _internal_set_gauss_blur(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
inline bool NoiseParameter::_internal_has_jpeg() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NoiseParameter::has_jpeg() const {
  return _internal_has_jpeg();
}
inline void NoiseParameter::clear_jpeg() {
  _impl_.jpeg_ = -1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float NoiseParameter::_internal_jpeg() const {
  return _impl_.jpeg_;
}
inline float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.jpeg)
  return _internal_jpeg();
}
inline void NoiseParameter::_internal_set_jpeg(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.jpeg_ = value;
}
inline void NoiseParameter::set_jpeg(float value) {
  _internal_set_jpeg(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
inline bool NoiseParameter::_internal_has_posterize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NoiseParameter::has_posterize() const {
  return _internal_has_posterize();
}
inline void NoiseParameter::clear_posterize() {
  _impl_.posterize_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool NoiseParameter::_internal_posterize() const {
  return _impl_.posterize_;
}
inline bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.posterize)
  return _internal_posterize();
}
inline void NoiseParameter::_internal_set_posterize(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.posterize_ = value;
}
inline void NoiseParameter::set_posterize(bool value) {
  _internal_set_posterize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
inline bool NoiseParameter::_internal_has_erode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NoiseParameter::has_erode() const {
  return _internal_has_erode();
}
inline void NoiseParameter::clear_erode() {
  _impl_.erode_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool NoiseParameter::_internal_erode() const {
  return _impl_.erode_;
}
inline bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.erode)
  return _internal_erode();
}
inline void NoiseParameter::_internal_set_erode(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.erode_ = value;
}
inline void NoiseParameter::set_erode(bool value) {
  _internal_set_erode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
inline bool NoiseParameter::_internal_has_saltpepper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NoiseParameter::has_saltpepper() const {
  return _internal_has_saltpepper();
}
inline void NoiseParameter::clear_saltpepper() {
  _impl_.saltpepper_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool NoiseParameter::_internal_saltpepper() const {
  return _impl_.saltpepper_;
}
inline bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.saltpepper)
  return _internal_saltpepper();
}
inline void NoiseParameter::_internal_set_saltpepper(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.saltpepper_ = value;
}
inline void NoiseParameter::set_saltpepper(bool value) {
  _internal_set_saltpepper(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.saltpepper)
}

// optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
inline bool NoiseParameter::_internal_has_saltpepper_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.saltpepper_param_ != nullptr);
  return value;
}
inline bool NoiseParameter::has_saltpepper_param() const {
  return _internal_has_saltpepper_param();
}
inline void NoiseParameter::clear_saltpepper_param() {
  if (_impl_.saltpepper_param_ != nullptr) _impl_.saltpepper_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::SaltPepperParameter& NoiseParameter::_internal_saltpepper_param() const {
  const ::apollo::perception::inference::SaltPepperParameter* p = _impl_.saltpepper_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SaltPepperParameter&>(
      ::apollo::perception::inference::_SaltPepperParameter_default_instance_);
}
inline const ::apollo::perception::inference::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.saltpepper_param)
  return _internal_saltpepper_param();
}
inline void NoiseParameter::unsafe_arena_set_allocated_saltpepper_param(
    ::apollo::perception::inference::SaltPepperParameter* saltpepper_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.saltpepper_param_);
  }
  _impl_.saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.NoiseParameter.saltpepper_param)
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::SaltPepperParameter* temp = _impl_.saltpepper_param_;
  _impl_.saltpepper_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::unsafe_arena_release_saltpepper_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.NoiseParameter.saltpepper_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::SaltPepperParameter* temp = _impl_.saltpepper_param_;
  _impl_.saltpepper_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::_internal_mutable_saltpepper_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.saltpepper_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SaltPepperParameter>(GetArenaForAllocation());
    _impl_.saltpepper_param_ = p;
  }
  return _impl_.saltpepper_param_;
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  ::apollo::perception::inference::SaltPepperParameter* _msg = _internal_mutable_saltpepper_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NoiseParameter.saltpepper_param)
  return _msg;
}
inline void NoiseParameter::set_allocated_saltpepper_param(::apollo::perception::inference::SaltPepperParameter* saltpepper_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.saltpepper_param_;
  }
  if (saltpepper_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(saltpepper_param);
    if (message_arena != submessage_arena) {
      saltpepper_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saltpepper_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.saltpepper_param_ = saltpepper_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
inline bool NoiseParameter::_internal_has_clahe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NoiseParameter::has_clahe() const {
  return _internal_has_clahe();
}
inline void NoiseParameter::clear_clahe() {
  _impl_.clahe_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool NoiseParameter::_internal_clahe() const {
  return _impl_.clahe_;
}
inline bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.clahe)
  return _internal_clahe();
}
inline void NoiseParameter::_internal_set_clahe(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.clahe_ = value;
}
inline void NoiseParameter::set_clahe(bool value) {
  _internal_set_clahe(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
inline bool NoiseParameter::_internal_has_convert_to_hsv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NoiseParameter::has_convert_to_hsv() const {
  return _internal_has_convert_to_hsv();
}
inline void NoiseParameter::clear_convert_to_hsv() {
  _impl_.convert_to_hsv_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool NoiseParameter::_internal_convert_to_hsv() const {
  return _impl_.convert_to_hsv_;
}
inline bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.convert_to_hsv)
  return _internal_convert_to_hsv();
}
inline void NoiseParameter::_internal_set_convert_to_hsv(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.convert_to_hsv_ = value;
}
inline void NoiseParameter::set_convert_to_hsv(bool value) {
  _internal_set_convert_to_hsv(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
inline bool NoiseParameter::_internal_has_convert_to_lab() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NoiseParameter::has_convert_to_lab() const {
  return _internal_has_convert_to_lab();
}
inline void NoiseParameter::clear_convert_to_lab() {
  _impl_.convert_to_lab_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool NoiseParameter::_internal_convert_to_lab() const {
  return _impl_.convert_to_lab_;
}
inline bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.convert_to_lab)
  return _internal_convert_to_lab();
}
inline void NoiseParameter::_internal_set_convert_to_lab(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.convert_to_lab_ = value;
}
inline void NoiseParameter::set_convert_to_lab(bool value) {
  _internal_set_convert_to_lab(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.convert_to_lab)
}

// -------------------------------------------------------------------

// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
inline bool DistortionParameter::_internal_has_brightness_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistortionParameter::has_brightness_prob() const {
  return _internal_has_brightness_prob();
}
inline void DistortionParameter::clear_brightness_prob() {
  _impl_.brightness_prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DistortionParameter::_internal_brightness_prob() const {
  return _impl_.brightness_prob_;
}
inline float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.brightness_prob)
  return _internal_brightness_prob();
}
inline void DistortionParameter::_internal_set_brightness_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brightness_prob_ = value;
}
inline void DistortionParameter::set_brightness_prob(float value) {
  _internal_set_brightness_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
inline bool DistortionParameter::_internal_has_brightness_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistortionParameter::has_brightness_delta() const {
  return _internal_has_brightness_delta();
}
inline void DistortionParameter::clear_brightness_delta() {
  _impl_.brightness_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DistortionParameter::_internal_brightness_delta() const {
  return _impl_.brightness_delta_;
}
inline float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.brightness_delta)
  return _internal_brightness_delta();
}
inline void DistortionParameter::_internal_set_brightness_delta(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brightness_delta_ = value;
}
inline void DistortionParameter::set_brightness_delta(float value) {
  _internal_set_brightness_delta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
inline bool DistortionParameter::_internal_has_contrast_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistortionParameter::has_contrast_prob() const {
  return _internal_has_contrast_prob();
}
inline void DistortionParameter::clear_contrast_prob() {
  _impl_.contrast_prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DistortionParameter::_internal_contrast_prob() const {
  return _impl_.contrast_prob_;
}
inline float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_prob)
  return _internal_contrast_prob();
}
inline void DistortionParameter::_internal_set_contrast_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.contrast_prob_ = value;
}
inline void DistortionParameter::set_contrast_prob(float value) {
  _internal_set_contrast_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
inline bool DistortionParameter::_internal_has_contrast_lower() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DistortionParameter::has_contrast_lower() const {
  return _internal_has_contrast_lower();
}
inline void DistortionParameter::clear_contrast_lower() {
  _impl_.contrast_lower_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DistortionParameter::_internal_contrast_lower() const {
  return _impl_.contrast_lower_;
}
inline float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_lower)
  return _internal_contrast_lower();
}
inline void DistortionParameter::_internal_set_contrast_lower(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.contrast_lower_ = value;
}
inline void DistortionParameter::set_contrast_lower(float value) {
  _internal_set_contrast_lower(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
inline bool DistortionParameter::_internal_has_contrast_upper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DistortionParameter::has_contrast_upper() const {
  return _internal_has_contrast_upper();
}
inline void DistortionParameter::clear_contrast_upper() {
  _impl_.contrast_upper_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DistortionParameter::_internal_contrast_upper() const {
  return _impl_.contrast_upper_;
}
inline float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_upper)
  return _internal_contrast_upper();
}
inline void DistortionParameter::_internal_set_contrast_upper(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.contrast_upper_ = value;
}
inline void DistortionParameter::set_contrast_upper(float value) {
  _internal_set_contrast_upper(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
inline bool DistortionParameter::_internal_has_hue_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DistortionParameter::has_hue_prob() const {
  return _internal_has_hue_prob();
}
inline void DistortionParameter::clear_hue_prob() {
  _impl_.hue_prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float DistortionParameter::_internal_hue_prob() const {
  return _impl_.hue_prob_;
}
inline float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.hue_prob)
  return _internal_hue_prob();
}
inline void DistortionParameter::_internal_set_hue_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.hue_prob_ = value;
}
inline void DistortionParameter::set_hue_prob(float value) {
  _internal_set_hue_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
inline bool DistortionParameter::_internal_has_hue_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DistortionParameter::has_hue_delta() const {
  return _internal_has_hue_delta();
}
inline void DistortionParameter::clear_hue_delta() {
  _impl_.hue_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float DistortionParameter::_internal_hue_delta() const {
  return _impl_.hue_delta_;
}
inline float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.hue_delta)
  return _internal_hue_delta();
}
inline void DistortionParameter::_internal_set_hue_delta(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.hue_delta_ = value;
}
inline void DistortionParameter::set_hue_delta(float value) {
  _internal_set_hue_delta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
inline bool DistortionParameter::_internal_has_saturation_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DistortionParameter::has_saturation_prob() const {
  return _internal_has_saturation_prob();
}
inline void DistortionParameter::clear_saturation_prob() {
  _impl_.saturation_prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float DistortionParameter::_internal_saturation_prob() const {
  return _impl_.saturation_prob_;
}
inline float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_prob)
  return _internal_saturation_prob();
}
inline void DistortionParameter::_internal_set_saturation_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.saturation_prob_ = value;
}
inline void DistortionParameter::set_saturation_prob(float value) {
  _internal_set_saturation_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
inline bool DistortionParameter::_internal_has_saturation_lower() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DistortionParameter::has_saturation_lower() const {
  return _internal_has_saturation_lower();
}
inline void DistortionParameter::clear_saturation_lower() {
  _impl_.saturation_lower_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float DistortionParameter::_internal_saturation_lower() const {
  return _impl_.saturation_lower_;
}
inline float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_lower)
  return _internal_saturation_lower();
}
inline void DistortionParameter::_internal_set_saturation_lower(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.saturation_lower_ = value;
}
inline void DistortionParameter::set_saturation_lower(float value) {
  _internal_set_saturation_lower(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
inline bool DistortionParameter::_internal_has_saturation_upper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DistortionParameter::has_saturation_upper() const {
  return _internal_has_saturation_upper();
}
inline void DistortionParameter::clear_saturation_upper() {
  _impl_.saturation_upper_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float DistortionParameter::_internal_saturation_upper() const {
  return _impl_.saturation_upper_;
}
inline float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_upper)
  return _internal_saturation_upper();
}
inline void DistortionParameter::_internal_set_saturation_upper(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.saturation_upper_ = value;
}
inline void DistortionParameter::set_saturation_upper(float value) {
  _internal_set_saturation_upper(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
inline bool DistortionParameter::_internal_has_random_order_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DistortionParameter::has_random_order_prob() const {
  return _internal_has_random_order_prob();
}
inline void DistortionParameter::clear_random_order_prob() {
  _impl_.random_order_prob_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float DistortionParameter::_internal_random_order_prob() const {
  return _impl_.random_order_prob_;
}
inline float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.random_order_prob)
  return _internal_random_order_prob();
}
inline void DistortionParameter::_internal_set_random_order_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.random_order_prob_ = value;
}
inline void DistortionParameter::set_random_order_prob(float value) {
  _internal_set_random_order_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.random_order_prob)
}

// -------------------------------------------------------------------

// ExpansionParameter

// optional float prob = 1 [default = 1];
inline bool ExpansionParameter::_internal_has_prob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpansionParameter::has_prob() const {
  return _internal_has_prob();
}
inline void ExpansionParameter::clear_prob() {
  _impl_.prob_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ExpansionParameter::_internal_prob() const {
  return _impl_.prob_;
}
inline float ExpansionParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpansionParameter.prob)
  return _internal_prob();
}
inline void ExpansionParameter::_internal_set_prob(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prob_ = value;
}
inline void ExpansionParameter::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpansionParameter.prob)
}

// optional float max_expand_ratio = 2 [default = 1];
inline bool ExpansionParameter::_internal_has_max_expand_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpansionParameter::has_max_expand_ratio() const {
  return _internal_has_max_expand_ratio();
}
inline void ExpansionParameter::clear_max_expand_ratio() {
  _impl_.max_expand_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ExpansionParameter::_internal_max_expand_ratio() const {
  return _impl_.max_expand_ratio_;
}
inline float ExpansionParameter::max_expand_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpansionParameter.max_expand_ratio)
  return _internal_max_expand_ratio();
}
inline void ExpansionParameter::_internal_set_max_expand_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_expand_ratio_ = value;
}
inline void ExpansionParameter::set_max_expand_ratio(float value) {
  _internal_set_max_expand_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpansionParameter.max_expand_ratio)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::_internal_has_ignore_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LossParameter::has_ignore_label() const {
  return _internal_has_ignore_label();
}
inline void LossParameter::clear_ignore_label() {
  _impl_.ignore_label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t LossParameter::_internal_ignore_label() const {
  return _impl_.ignore_label_;
}
inline int32_t LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.ignore_label)
  return _internal_ignore_label();
}
inline void LossParameter::_internal_set_ignore_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ignore_label_ = value;
}
inline void LossParameter::set_ignore_label(int32_t value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.ignore_label)
}

// optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::_internal_has_normalization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LossParameter::has_normalization() const {
  return _internal_has_normalization();
}
inline void LossParameter::clear_normalization() {
  _impl_.normalization_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::perception::inference::LossParameter_NormalizationMode LossParameter::_internal_normalization() const {
  return static_cast< ::apollo::perception::inference::LossParameter_NormalizationMode >(_impl_.normalization_);
}
inline ::apollo::perception::inference::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.normalization)
  return _internal_normalization();
}
inline void LossParameter::_internal_set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value) {
  assert(::apollo::perception::inference::LossParameter_NormalizationMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.normalization_ = value;
}
inline void LossParameter::set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value) {
  _internal_set_normalization(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::_internal_has_normalize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LossParameter::has_normalize() const {
  return _internal_has_normalize();
}
inline void LossParameter::clear_normalize() {
  _impl_.normalize_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool LossParameter::_internal_normalize() const {
  return _impl_.normalize_;
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.normalize)
  return _internal_normalize();
}
inline void LossParameter::_internal_set_normalize(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.normalize_ = value;
}
inline void LossParameter::set_normalize(bool value) {
  _internal_set_normalize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::_internal_has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccuracyParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void AccuracyParameter::clear_top_k() {
  _impl_.top_k_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t AccuracyParameter::_internal_top_k() const {
  return _impl_.top_k_;
}
inline uint32_t AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.top_k)
  return _internal_top_k();
}
inline void AccuracyParameter::_internal_set_top_k(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_k_ = value;
}
inline void AccuracyParameter::set_top_k(uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccuracyParameter::has_axis() const {
  return _internal_has_axis();
}
inline void AccuracyParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AccuracyParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.axis)
  return _internal_axis();
}
inline void AccuracyParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.axis_ = value;
}
inline void AccuracyParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::_internal_has_ignore_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccuracyParameter::has_ignore_label() const {
  return _internal_has_ignore_label();
}
inline void AccuracyParameter::clear_ignore_label() {
  _impl_.ignore_label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t AccuracyParameter::_internal_ignore_label() const {
  return _impl_.ignore_label_;
}
inline int32_t AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.ignore_label)
  return _internal_ignore_label();
}
inline void AccuracyParameter::_internal_set_ignore_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ignore_label_ = value;
}
inline void AccuracyParameter::set_ignore_label(int32_t value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// AnnotatedDataParameter

// repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
inline int AnnotatedDataParameter::_internal_batch_sampler_size() const {
  return _impl_.batch_sampler_.size();
}
inline int AnnotatedDataParameter::batch_sampler_size() const {
  return _internal_batch_sampler_size();
}
inline void AnnotatedDataParameter::clear_batch_sampler() {
  _impl_.batch_sampler_.Clear();
}
inline ::apollo::perception::inference::BatchSampler* AnnotatedDataParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return _impl_.batch_sampler_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >*
AnnotatedDataParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return &_impl_.batch_sampler_;
}
inline const ::apollo::perception::inference::BatchSampler& AnnotatedDataParameter::_internal_batch_sampler(int index) const {
  return _impl_.batch_sampler_.Get(index);
}
inline const ::apollo::perception::inference::BatchSampler& AnnotatedDataParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return _internal_batch_sampler(index);
}
inline ::apollo::perception::inference::BatchSampler* AnnotatedDataParameter::_internal_add_batch_sampler() {
  return _impl_.batch_sampler_.Add();
}
inline ::apollo::perception::inference::BatchSampler* AnnotatedDataParameter::add_batch_sampler() {
  ::apollo::perception::inference::BatchSampler* _add = _internal_add_batch_sampler();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >&
AnnotatedDataParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return _impl_.batch_sampler_;
}

// optional string label_map_file = 2;
inline bool AnnotatedDataParameter::_internal_has_label_map_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnnotatedDataParameter::has_label_map_file() const {
  return _internal_has_label_map_file();
}
inline void AnnotatedDataParameter::clear_label_map_file() {
  _impl_.label_map_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnnotatedDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
  return _internal_label_map_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnnotatedDataParameter::set_label_map_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.label_map_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}
inline std::string* AnnotatedDataParameter::mutable_label_map_file() {
  std::string* _s = _internal_mutable_label_map_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
  return _s;
}
inline const std::string& AnnotatedDataParameter::_internal_label_map_file() const {
  return _impl_.label_map_file_.Get();
}
inline void AnnotatedDataParameter::_internal_set_label_map_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_map_file_.Set(value, GetArenaForAllocation());
}
inline std::string* AnnotatedDataParameter::_internal_mutable_label_map_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.label_map_file_.Mutable(GetArenaForAllocation());
}
inline std::string* AnnotatedDataParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
  if (!_internal_has_label_map_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.label_map_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_map_file_.IsDefault()) {
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AnnotatedDataParameter::set_allocated_label_map_file(std::string* label_map_file) {
  if (label_map_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_map_file_.SetAllocated(label_map_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_map_file_.IsDefault()) {
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}

// optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
inline bool AnnotatedDataParameter::_internal_has_anno_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnnotatedDataParameter::has_anno_type() const {
  return _internal_has_anno_type();
}
inline void AnnotatedDataParameter::clear_anno_type() {
  _impl_.anno_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDataParameter::_internal_anno_type() const {
  return static_cast< ::apollo::perception::inference::AnnotatedDatum_AnnotationType >(_impl_.anno_type_);
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDataParameter::anno_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.anno_type)
  return _internal_anno_type();
}
inline void AnnotatedDataParameter::_internal_set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  assert(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.anno_type_ = value;
}
inline void AnnotatedDataParameter::set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  _internal_set_anno_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.anno_type)
}

// optional int32 num_classes = 10 [default = 3];
inline bool AnnotatedDataParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AnnotatedDataParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void AnnotatedDataParameter::clear_num_classes() {
  _impl_.num_classes_ = 3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AnnotatedDataParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline int32_t AnnotatedDataParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.num_classes)
  return _internal_num_classes();
}
inline void AnnotatedDataParameter::_internal_set_num_classes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_classes_ = value;
}
inline void AnnotatedDataParameter::set_num_classes(int32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.num_classes)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::_internal_has_out_max_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_out_max_val() const {
  return _internal_has_out_max_val();
}
inline void ArgMaxParameter::clear_out_max_val() {
  _impl_.out_max_val_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ArgMaxParameter::_internal_out_max_val() const {
  return _impl_.out_max_val_;
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.out_max_val)
  return _internal_out_max_val();
}
inline void ArgMaxParameter::_internal_set_out_max_val(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_max_val_ = value;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  _internal_set_out_max_val(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::_internal_has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void ArgMaxParameter::clear_top_k() {
  _impl_.top_k_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ArgMaxParameter::_internal_top_k() const {
  return _impl_.top_k_;
}
inline uint32_t ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.top_k)
  return _internal_top_k();
}
inline void ArgMaxParameter::_internal_set_top_k(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_k_ = value;
}
inline void ArgMaxParameter::set_top_k(uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArgMaxParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ArgMaxParameter::clear_axis() {
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ArgMaxParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.axis)
  return _internal_axis();
}
inline void ArgMaxParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void ArgMaxParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConcatParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ConcatParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ConcatParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConcatParameter.axis)
  return _internal_axis();
}
inline void ConcatParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void ConcatParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::_internal_has_concat_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcatParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void ConcatParameter::clear_concat_dim() {
  _impl_.concat_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ConcatParameter::_internal_concat_dim() const {
  return _impl_.concat_dim_;
}
inline uint32_t ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConcatParameter.concat_dim)
  return _internal_concat_dim();
}
inline void ConcatParameter::_internal_set_concat_dim(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.concat_dim_ = value;
}
inline void ConcatParameter::set_concat_dim(uint32_t value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::_internal_has_use_global_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BatchNormParameter::has_use_global_stats() const {
  return _internal_has_use_global_stats();
}
inline void BatchNormParameter::clear_use_global_stats() {
  _impl_.use_global_stats_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool BatchNormParameter::_internal_use_global_stats() const {
  return _impl_.use_global_stats_;
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.use_global_stats)
  return _internal_use_global_stats();
}
inline void BatchNormParameter::_internal_set_use_global_stats(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.use_global_stats_ = value;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  _internal_set_use_global_stats(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::_internal_has_moving_average_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return _internal_has_moving_average_fraction();
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  _impl_.moving_average_fraction_ = 0.999f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float BatchNormParameter::_internal_moving_average_fraction() const {
  return _impl_.moving_average_fraction_;
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.moving_average_fraction)
  return _internal_moving_average_fraction();
}
inline void BatchNormParameter::_internal_set_moving_average_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.moving_average_fraction_ = value;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  _internal_set_moving_average_fraction(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::_internal_has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BatchNormParameter::has_eps() const {
  return _internal_has_eps();
}
inline void BatchNormParameter::clear_eps() {
  _impl_.eps_ = 1e-05f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float BatchNormParameter::_internal_eps() const {
  return _impl_.eps_;
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.eps)
  return _internal_eps();
}
inline void BatchNormParameter::_internal_set_eps(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eps_ = value;
}
inline void BatchNormParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.eps)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BiasParameter::has_axis() const {
  return _internal_has_axis();
}
inline void BiasParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BiasParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.axis)
  return _internal_axis();
}
inline void BiasParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void BiasParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::_internal_has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BiasParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void BiasParameter::clear_num_axes() {
  _impl_.num_axes_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t BiasParameter::_internal_num_axes() const {
  return _impl_.num_axes_;
}
inline int32_t BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.num_axes)
  return _internal_num_axes();
}
inline void BiasParameter::_internal_set_num_axes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_axes_ = value;
}
inline void BiasParameter::set_num_axes(int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BiasParameter.num_axes)
}

// optional .apollo.perception.inference.FillerParameter filler = 3;
inline bool BiasParameter::_internal_has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline bool BiasParameter::has_filler() const {
  return _internal_has_filler();
}
inline void BiasParameter::clear_filler() {
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& BiasParameter::_internal_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.filler)
  return _internal_filler();
}
inline void BiasParameter::unsafe_arena_set_allocated_filler(
    ::apollo::perception::inference::FillerParameter* filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = filler;
  if (filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.BiasParameter.filler)
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::release_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.BiasParameter.filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::_internal_mutable_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.filler_ = p;
  }
  return _impl_.filler_;
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::mutable_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BiasParameter.filler)
  return _msg;
}
inline void BiasParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::_internal_has_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContrastiveLossParameter::has_margin() const {
  return _internal_has_margin();
}
inline void ContrastiveLossParameter::clear_margin() {
  _impl_.margin_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ContrastiveLossParameter::_internal_margin() const {
  return _impl_.margin_;
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ContrastiveLossParameter.margin)
  return _internal_margin();
}
inline void ContrastiveLossParameter::_internal_set_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.margin_ = value;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::_internal_has_legacy_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return _internal_has_legacy_version();
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  _impl_.legacy_version_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ContrastiveLossParameter::_internal_legacy_version() const {
  return _impl_.legacy_version_;
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ContrastiveLossParameter.legacy_version)
  return _internal_legacy_version();
}
inline void ContrastiveLossParameter::_internal_set_legacy_version(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.legacy_version_ = value;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  _internal_set_legacy_version(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void ConvolutionParameter::clear_num_output() {
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ConvolutionParameter::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.num_output)
  return _internal_num_output();
}
inline void ConvolutionParameter::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}
inline void ConvolutionParameter::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::_internal_has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void ConvolutionParameter::clear_bias_term() {
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ConvolutionParameter::_internal_bias_term() const {
  return _impl_.bias_term_;
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.bias_term)
  return _internal_bias_term();
}
inline void ConvolutionParameter::_internal_set_bias_term(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bias_term_ = value;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::_internal_pad_size() const {
  return _impl_.pad_.size();
}
inline int ConvolutionParameter::pad_size() const {
  return _internal_pad_size();
}
inline void ConvolutionParameter::clear_pad() {
  _impl_.pad_.Clear();
}
inline uint32_t ConvolutionParameter::_internal_pad(int index) const {
  return _impl_.pad_.Get(index);
}
inline uint32_t ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad)
  return _internal_pad(index);
}
inline void ConvolutionParameter::set_pad(int index, uint32_t value) {
  _impl_.pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::_internal_add_pad(uint32_t value) {
  _impl_.pad_.Add(value);
}
inline void ConvolutionParameter::add_pad(uint32_t value) {
  _internal_add_pad(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.pad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::_internal_pad() const {
  return _impl_.pad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.pad)
  return _internal_pad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::_internal_mutable_pad() {
  return &_impl_.pad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.pad)
  return _internal_mutable_pad();
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::_internal_kernel_size_size() const {
  return _impl_.kernel_size_.size();
}
inline int ConvolutionParameter::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  _impl_.kernel_size_.Clear();
}
inline uint32_t ConvolutionParameter::_internal_kernel_size(int index) const {
  return _impl_.kernel_size_.Get(index);
}
inline uint32_t ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return _internal_kernel_size(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, uint32_t value) {
  _impl_.kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::_internal_add_kernel_size(uint32_t value) {
  _impl_.kernel_size_.Add(value);
}
inline void ConvolutionParameter::add_kernel_size(uint32_t value) {
  _internal_add_kernel_size(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.kernel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::_internal_kernel_size() const {
  return _impl_.kernel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return _internal_kernel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::_internal_mutable_kernel_size() {
  return &_impl_.kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return _internal_mutable_kernel_size();
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::_internal_stride_size() const {
  return _impl_.stride_.size();
}
inline int ConvolutionParameter::stride_size() const {
  return _internal_stride_size();
}
inline void ConvolutionParameter::clear_stride() {
  _impl_.stride_.Clear();
}
inline uint32_t ConvolutionParameter::_internal_stride(int index) const {
  return _impl_.stride_.Get(index);
}
inline uint32_t ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride)
  return _internal_stride(index);
}
inline void ConvolutionParameter::set_stride(int index, uint32_t value) {
  _impl_.stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::_internal_add_stride(uint32_t value) {
  _impl_.stride_.Add(value);
}
inline void ConvolutionParameter::add_stride(uint32_t value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::_internal_stride() const {
  return _impl_.stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::_internal_mutable_stride() {
  return &_impl_.stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.stride)
  return _internal_mutable_stride();
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::_internal_dilation_size() const {
  return _impl_.dilation_.size();
}
inline int ConvolutionParameter::dilation_size() const {
  return _internal_dilation_size();
}
inline void ConvolutionParameter::clear_dilation() {
  _impl_.dilation_.Clear();
}
inline uint32_t ConvolutionParameter::_internal_dilation(int index) const {
  return _impl_.dilation_.Get(index);
}
inline uint32_t ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.dilation)
  return _internal_dilation(index);
}
inline void ConvolutionParameter::set_dilation(int index, uint32_t value) {
  _impl_.dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::_internal_add_dilation(uint32_t value) {
  _impl_.dilation_.Add(value);
}
inline void ConvolutionParameter::add_dilation(uint32_t value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::_internal_dilation() const {
  return _impl_.dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::_internal_mutable_dilation() {
  return &_impl_.dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.dilation)
  return _internal_mutable_dilation();
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::_internal_has_pad_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_pad_h() const {
  return _internal_has_pad_h();
}
inline void ConvolutionParameter::clear_pad_h() {
  _impl_.pad_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ConvolutionParameter::_internal_pad_h() const {
  return _impl_.pad_h_;
}
inline uint32_t ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad_h)
  return _internal_pad_h();
}
inline void ConvolutionParameter::_internal_set_pad_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pad_h_ = value;
}
inline void ConvolutionParameter::set_pad_h(uint32_t value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::_internal_has_pad_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_pad_w() const {
  return _internal_has_pad_w();
}
inline void ConvolutionParameter::clear_pad_w() {
  _impl_.pad_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ConvolutionParameter::_internal_pad_w() const {
  return _impl_.pad_w_;
}
inline uint32_t ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad_w)
  return _internal_pad_w();
}
inline void ConvolutionParameter::_internal_set_pad_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pad_w_ = value;
}
inline void ConvolutionParameter::set_pad_w(uint32_t value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::_internal_has_kernel_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_h() const {
  return _internal_has_kernel_h();
}
inline void ConvolutionParameter::clear_kernel_h() {
  _impl_.kernel_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ConvolutionParameter::_internal_kernel_h() const {
  return _impl_.kernel_h_;
}
inline uint32_t ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_h)
  return _internal_kernel_h();
}
inline void ConvolutionParameter::_internal_set_kernel_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kernel_h_ = value;
}
inline void ConvolutionParameter::set_kernel_h(uint32_t value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::_internal_has_kernel_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_kernel_w() const {
  return _internal_has_kernel_w();
}
inline void ConvolutionParameter::clear_kernel_w() {
  _impl_.kernel_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ConvolutionParameter::_internal_kernel_w() const {
  return _impl_.kernel_w_;
}
inline uint32_t ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_w)
  return _internal_kernel_w();
}
inline void ConvolutionParameter::_internal_set_kernel_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.kernel_w_ = value;
}
inline void ConvolutionParameter::set_kernel_w(uint32_t value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::_internal_has_stride_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_stride_h() const {
  return _internal_has_stride_h();
}
inline void ConvolutionParameter::clear_stride_h() {
  _impl_.stride_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ConvolutionParameter::_internal_stride_h() const {
  return _impl_.stride_h_;
}
inline uint32_t ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride_h)
  return _internal_stride_h();
}
inline void ConvolutionParameter::_internal_set_stride_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.stride_h_ = value;
}
inline void ConvolutionParameter::set_stride_h(uint32_t value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::_internal_has_stride_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_stride_w() const {
  return _internal_has_stride_w();
}
inline void ConvolutionParameter::clear_stride_w() {
  _impl_.stride_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ConvolutionParameter::_internal_stride_w() const {
  return _impl_.stride_w_;
}
inline uint32_t ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride_w)
  return _internal_stride_w();
}
inline void ConvolutionParameter::_internal_set_stride_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.stride_w_ = value;
}
inline void ConvolutionParameter::set_stride_w(uint32_t value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_group() const {
  return _internal_has_group();
}
inline void ConvolutionParameter::clear_group() {
  _impl_.group_ = 1u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t ConvolutionParameter::_internal_group() const {
  return _impl_.group_;
}
inline uint32_t ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.group)
  return _internal_group();
}
inline void ConvolutionParameter::_internal_set_group(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.group_ = value;
}
inline void ConvolutionParameter::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.group)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::_internal_has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::_internal_weight_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.weight_filler)
  return _internal_weight_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_weight_filler(
    ::apollo::perception::inference::FillerParameter* weight_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = weight_filler;
  if (weight_filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ConvolutionParameter.weight_filler)
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::release_weight_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ConvolutionParameter.weight_filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::_internal_mutable_weight_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.weight_filler_ = p;
  }
  return _impl_.weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ConvolutionParameter.weight_filler)
  return _msg;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ConvolutionParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool ConvolutionParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ConvolutionParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ConvolutionParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ConvolutionParameter.bias_filler)
  return _msg;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ConvolutionParameter.bias_filler)
}

// optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_engine() const {
  return _internal_has_engine();
}
inline void ConvolutionParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::perception::inference::ConvolutionParameter_Engine ConvolutionParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::ConvolutionParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.engine)
  return _internal_engine();
}
inline void ConvolutionParameter::_internal_set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value) {
  assert(::apollo::perception::inference::ConvolutionParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.engine_ = value;
}
inline void ConvolutionParameter::set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ConvolutionParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t ConvolutionParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.axis)
  return _internal_axis();
}
inline void ConvolutionParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.axis_ = value;
}
inline void ConvolutionParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::_internal_has_force_nd_im2col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return _internal_has_force_nd_im2col();
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  _impl_.force_nd_im2col_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ConvolutionParameter::_internal_force_nd_im2col() const {
  return _impl_.force_nd_im2col_;
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.force_nd_im2col)
  return _internal_force_nd_im2col();
}
inline void ConvolutionParameter::_internal_set_force_nd_im2col(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.force_nd_im2col_ = value;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  _internal_set_force_nd_im2col(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.force_nd_im2col)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CropParameter::has_axis() const {
  return _internal_has_axis();
}
inline void CropParameter::clear_axis() {
  _impl_.axis_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CropParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.CropParameter.axis)
  return _internal_axis();
}
inline void CropParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}
inline void CropParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::_internal_offset_size() const {
  return _impl_.offset_.size();
}
inline int CropParameter::offset_size() const {
  return _internal_offset_size();
}
inline void CropParameter::clear_offset() {
  _impl_.offset_.Clear();
}
inline uint32_t CropParameter::_internal_offset(int index) const {
  return _impl_.offset_.Get(index);
}
inline uint32_t CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.CropParameter.offset)
  return _internal_offset(index);
}
inline void CropParameter::set_offset(int index, uint32_t value) {
  _impl_.offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.CropParameter.offset)
}
inline void CropParameter::_internal_add_offset(uint32_t value) {
  _impl_.offset_.Add(value);
}
inline void CropParameter::add_offset(uint32_t value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.CropParameter.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CropParameter::_internal_offset() const {
  return _impl_.offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.CropParameter.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CropParameter::_internal_mutable_offset() {
  return &_impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.CropParameter.offset)
  return _internal_mutable_offset();
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataParameter::has_source() const {
  return _internal_has_source();
}
inline void DataParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.source)
}
inline std::string* DataParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DataParameter.source)
  return _s;
}
inline const std::string& DataParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void DataParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* DataParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::_internal_has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void DataParameter::clear_batch_size() {
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DataParameter::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.batch_size)
  return _internal_batch_size();
}
inline void DataParameter::_internal_set_batch_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_size_ = value;
}
inline void DataParameter::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::_internal_has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void DataParameter::clear_rand_skip() {
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DataParameter::_internal_rand_skip() const {
  return _impl_.rand_skip_;
}
inline uint32_t DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void DataParameter::_internal_set_rand_skip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rand_skip_ = value;
}
inline void DataParameter::set_rand_skip(uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.rand_skip)
}

// optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::_internal_has_backend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataParameter::has_backend() const {
  return _internal_has_backend();
}
inline void DataParameter::clear_backend() {
  _impl_.backend_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::perception::inference::DataParameter_DB DataParameter::_internal_backend() const {
  return static_cast< ::apollo::perception::inference::DataParameter_DB >(_impl_.backend_);
}
inline ::apollo::perception::inference::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.backend)
  return _internal_backend();
}
inline void DataParameter::_internal_set_backend(::apollo::perception::inference::DataParameter_DB value) {
  assert(::apollo::perception::inference::DataParameter_DB_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.backend_ = value;
}
inline void DataParameter::set_backend(::apollo::perception::inference::DataParameter_DB value) {
  _internal_set_backend(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void DataParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float DataParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.scale)
  return _internal_scale();
}
inline void DataParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scale_ = value;
}
inline void DataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::_internal_has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void DataParameter::clear_mean_file() {
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.mean_file)
  return _internal_mean_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mean_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.mean_file)
}
inline std::string* DataParameter::mutable_mean_file() {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DataParameter.mean_file)
  return _s;
}
inline const std::string& DataParameter::_internal_mean_file() const {
  return _impl_.mean_file_.Get();
}
inline void DataParameter::_internal_set_mean_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DataParameter::_internal_mutable_mean_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable(GetArenaForAllocation());
}
inline std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mean_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(mean_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::_internal_has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void DataParameter::clear_crop_size() {
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DataParameter::_internal_crop_size() const {
  return _impl_.crop_size_;
}
inline uint32_t DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.crop_size)
  return _internal_crop_size();
}
inline void DataParameter::_internal_set_crop_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.crop_size_ = value;
}
inline void DataParameter::set_crop_size(uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void DataParameter::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DataParameter::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.mirror)
  return _internal_mirror();
}
inline void DataParameter::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mirror_ = value;
}
inline void DataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::_internal_has_force_encoded_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataParameter::has_force_encoded_color() const {
  return _internal_has_force_encoded_color();
}
inline void DataParameter::clear_force_encoded_color() {
  _impl_.force_encoded_color_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DataParameter::_internal_force_encoded_color() const {
  return _impl_.force_encoded_color_;
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.force_encoded_color)
  return _internal_force_encoded_color();
}
inline void DataParameter::_internal_set_force_encoded_color(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.force_encoded_color_ = value;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  _internal_set_force_encoded_color(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::_internal_has_prefetch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DataParameter::has_prefetch() const {
  return _internal_has_prefetch();
}
inline void DataParameter::clear_prefetch() {
  _impl_.prefetch_ = 4u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t DataParameter::_internal_prefetch() const {
  return _impl_.prefetch_;
}
inline uint32_t DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.prefetch)
  return _internal_prefetch();
}
inline void DataParameter::_internal_set_prefetch(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prefetch_ = value;
}
inline void DataParameter::set_prefetch(uint32_t value) {
  _internal_set_prefetch(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.prefetch)
}

// -------------------------------------------------------------------

// DetectionEvaluateParameter

// optional uint32 num_classes = 1;
inline bool DetectionEvaluateParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetectionEvaluateParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void DetectionEvaluateParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DetectionEvaluateParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t DetectionEvaluateParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.num_classes)
  return _internal_num_classes();
}
inline void DetectionEvaluateParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_classes_ = value;
}
inline void DetectionEvaluateParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.num_classes)
}

// optional uint32 background_label_id = 2 [default = 0];
inline bool DetectionEvaluateParameter::_internal_has_background_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectionEvaluateParameter::has_background_label_id() const {
  return _internal_has_background_label_id();
}
inline void DetectionEvaluateParameter::clear_background_label_id() {
  _impl_.background_label_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DetectionEvaluateParameter::_internal_background_label_id() const {
  return _impl_.background_label_id_;
}
inline uint32_t DetectionEvaluateParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.background_label_id)
  return _internal_background_label_id();
}
inline void DetectionEvaluateParameter::_internal_set_background_label_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.background_label_id_ = value;
}
inline void DetectionEvaluateParameter::set_background_label_id(uint32_t value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.background_label_id)
}

// optional float overlap_threshold = 3 [default = 0.5];
inline bool DetectionEvaluateParameter::_internal_has_overlap_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetectionEvaluateParameter::has_overlap_threshold() const {
  return _internal_has_overlap_threshold();
}
inline void DetectionEvaluateParameter::clear_overlap_threshold() {
  _impl_.overlap_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DetectionEvaluateParameter::_internal_overlap_threshold() const {
  return _impl_.overlap_threshold_;
}
inline float DetectionEvaluateParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.overlap_threshold)
  return _internal_overlap_threshold();
}
inline void DetectionEvaluateParameter::_internal_set_overlap_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.overlap_threshold_ = value;
}
inline void DetectionEvaluateParameter::set_overlap_threshold(float value) {
  _internal_set_overlap_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.overlap_threshold)
}

// optional bool evaluate_difficult_gt = 4 [default = true];
inline bool DetectionEvaluateParameter::_internal_has_evaluate_difficult_gt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DetectionEvaluateParameter::has_evaluate_difficult_gt() const {
  return _internal_has_evaluate_difficult_gt();
}
inline void DetectionEvaluateParameter::clear_evaluate_difficult_gt() {
  _impl_.evaluate_difficult_gt_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DetectionEvaluateParameter::_internal_evaluate_difficult_gt() const {
  return _impl_.evaluate_difficult_gt_;
}
inline bool DetectionEvaluateParameter::evaluate_difficult_gt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.evaluate_difficult_gt)
  return _internal_evaluate_difficult_gt();
}
inline void DetectionEvaluateParameter::_internal_set_evaluate_difficult_gt(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.evaluate_difficult_gt_ = value;
}
inline void DetectionEvaluateParameter::set_evaluate_difficult_gt(bool value) {
  _internal_set_evaluate_difficult_gt(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.evaluate_difficult_gt)
}

// optional string name_size_file = 5;
inline bool DetectionEvaluateParameter::_internal_has_name_size_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectionEvaluateParameter::has_name_size_file() const {
  return _internal_has_name_size_file();
}
inline void DetectionEvaluateParameter::clear_name_size_file() {
  _impl_.name_size_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectionEvaluateParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
  return _internal_name_size_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionEvaluateParameter::set_name_size_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_size_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}
inline std::string* DetectionEvaluateParameter::mutable_name_size_file() {
  std::string* _s = _internal_mutable_name_size_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
  return _s;
}
inline const std::string& DetectionEvaluateParameter::_internal_name_size_file() const {
  return _impl_.name_size_file_.Get();
}
inline void DetectionEvaluateParameter::_internal_set_name_size_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_size_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionEvaluateParameter::_internal_mutable_name_size_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_size_file_.Mutable(GetArenaForAllocation());
}
inline std::string* DetectionEvaluateParameter::release_name_size_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
  if (!_internal_has_name_size_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_size_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_size_file_.IsDefault()) {
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetectionEvaluateParameter::set_allocated_name_size_file(std::string* name_size_file) {
  if (name_size_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_size_file_.SetAllocated(name_size_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_size_file_.IsDefault()) {
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 6;
inline bool DetectionEvaluateParameter::_internal_has_resize_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resize_param_ != nullptr);
  return value;
}
inline bool DetectionEvaluateParameter::has_resize_param() const {
  return _internal_has_resize_param();
}
inline void DetectionEvaluateParameter::clear_resize_param() {
  if (_impl_.resize_param_ != nullptr) _impl_.resize_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::ResizeParameter& DetectionEvaluateParameter::_internal_resize_param() const {
  const ::apollo::perception::inference::ResizeParameter* p = _impl_.resize_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ResizeParameter&>(
      ::apollo::perception::inference::_ResizeParameter_default_instance_);
}
inline const ::apollo::perception::inference::ResizeParameter& DetectionEvaluateParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
  return _internal_resize_param();
}
inline void DetectionEvaluateParameter::unsafe_arena_set_allocated_resize_param(
    ::apollo::perception::inference::ResizeParameter* resize_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resize_param_);
  }
  _impl_.resize_param_ = resize_param;
  if (resize_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::release_resize_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::unsafe_arena_release_resize_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::_internal_mutable_resize_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.resize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ResizeParameter>(GetArenaForAllocation());
    _impl_.resize_param_ = p;
  }
  return _impl_.resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::mutable_resize_param() {
  ::apollo::perception::inference::ResizeParameter* _msg = _internal_mutable_resize_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
  return _msg;
}
inline void DetectionEvaluateParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resize_param_;
  }
  if (resize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resize_param);
    if (message_arena != submessage_arena) {
      resize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.resize_param_ = resize_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::_internal_has_nms_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return _internal_has_nms_threshold();
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  _impl_.nms_threshold_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NonMaximumSuppressionParameter::_internal_nms_threshold() const {
  return _impl_.nms_threshold_;
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.nms_threshold)
  return _internal_nms_threshold();
}
inline void NonMaximumSuppressionParameter::_internal_set_nms_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nms_threshold_ = value;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::_internal_has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return _internal_has_top_k();
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  _impl_.top_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t NonMaximumSuppressionParameter::_internal_top_k() const {
  return _impl_.top_k_;
}
inline int32_t NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.top_k)
  return _internal_top_k();
}
inline void NonMaximumSuppressionParameter::_internal_set_top_k(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.top_k_ = value;
}
inline void NonMaximumSuppressionParameter::set_top_k(int32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::_internal_has_eta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NonMaximumSuppressionParameter::has_eta() const {
  return _internal_has_eta();
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  _impl_.eta_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NonMaximumSuppressionParameter::_internal_eta() const {
  return _impl_.eta_;
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.eta)
  return _internal_eta();
}
inline void NonMaximumSuppressionParameter::_internal_set_eta(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eta_ = value;
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.eta)
}

// -------------------------------------------------------------------

// SaveOutputParameter

// optional string output_directory = 1;
inline bool SaveOutputParameter::_internal_has_output_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_directory() const {
  return _internal_has_output_directory();
}
inline void SaveOutputParameter::clear_output_directory() {
  _impl_.output_directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SaveOutputParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_directory)
  return _internal_output_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_directory(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.output_directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_directory)
}
inline std::string* SaveOutputParameter::mutable_output_directory() {
  std::string* _s = _internal_mutable_output_directory();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_directory)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_directory() const {
  return _impl_.output_directory_.Get();
}
inline void SaveOutputParameter::_internal_set_output_directory(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_directory() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.output_directory_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.output_directory)
  if (!_internal_has_output_directory()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.output_directory_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_directory_.IsDefault()) {
    _impl_.output_directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SaveOutputParameter::set_allocated_output_directory(std::string* output_directory) {
  if (output_directory != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_directory_.SetAllocated(output_directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_directory_.IsDefault()) {
    _impl_.output_directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_directory)
}

// optional string output_name_prefix = 2;
inline bool SaveOutputParameter::_internal_has_output_name_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_name_prefix() const {
  return _internal_has_output_name_prefix();
}
inline void SaveOutputParameter::clear_output_name_prefix() {
  _impl_.output_name_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SaveOutputParameter::output_name_prefix() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
  return _internal_output_name_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_name_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.output_name_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}
inline std::string* SaveOutputParameter::mutable_output_name_prefix() {
  std::string* _s = _internal_mutable_output_name_prefix();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_name_prefix() const {
  return _impl_.output_name_prefix_.Get();
}
inline void SaveOutputParameter::_internal_set_output_name_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_name_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_name_prefix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_name_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::release_output_name_prefix() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
  if (!_internal_has_output_name_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.output_name_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_name_prefix_.IsDefault()) {
    _impl_.output_name_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SaveOutputParameter::set_allocated_output_name_prefix(std::string* output_name_prefix) {
  if (output_name_prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_name_prefix_.SetAllocated(output_name_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_name_prefix_.IsDefault()) {
    _impl_.output_name_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}

// optional string output_format = 3;
inline bool SaveOutputParameter::_internal_has_output_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_output_format() const {
  return _internal_has_output_format();
}
inline void SaveOutputParameter::clear_output_format() {
  _impl_.output_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SaveOutputParameter::output_format() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_format)
  return _internal_output_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_output_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.output_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_format)
}
inline std::string* SaveOutputParameter::mutable_output_format() {
  std::string* _s = _internal_mutable_output_format();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_format)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_format() const {
  return _impl_.output_format_.Get();
}
inline void SaveOutputParameter::_internal_set_output_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_format_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.output_format_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::release_output_format() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.output_format)
  if (!_internal_has_output_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.output_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_format_.IsDefault()) {
    _impl_.output_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SaveOutputParameter::set_allocated_output_format(std::string* output_format) {
  if (output_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.output_format_.SetAllocated(output_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_format_.IsDefault()) {
    _impl_.output_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_format)
}

// optional string label_map_file = 4;
inline bool SaveOutputParameter::_internal_has_label_map_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_label_map_file() const {
  return _internal_has_label_map_file();
}
inline void SaveOutputParameter::clear_label_map_file() {
  _impl_.label_map_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SaveOutputParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.label_map_file)
  return _internal_label_map_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_label_map_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.label_map_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.label_map_file)
}
inline std::string* SaveOutputParameter::mutable_label_map_file() {
  std::string* _s = _internal_mutable_label_map_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.label_map_file)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_label_map_file() const {
  return _impl_.label_map_file_.Get();
}
inline void SaveOutputParameter::_internal_set_label_map_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.label_map_file_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::_internal_mutable_label_map_file() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.label_map_file_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.label_map_file)
  if (!_internal_has_label_map_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.label_map_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_map_file_.IsDefault()) {
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SaveOutputParameter::set_allocated_label_map_file(std::string* label_map_file) {
  if (label_map_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.label_map_file_.SetAllocated(label_map_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_map_file_.IsDefault()) {
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.label_map_file)
}

// optional string name_size_file = 5;
inline bool SaveOutputParameter::_internal_has_name_size_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_name_size_file() const {
  return _internal_has_name_size_file();
}
inline void SaveOutputParameter::clear_name_size_file() {
  _impl_.name_size_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SaveOutputParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.name_size_file)
  return _internal_name_size_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveOutputParameter::set_name_size_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.name_size_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.name_size_file)
}
inline std::string* SaveOutputParameter::mutable_name_size_file() {
  std::string* _s = _internal_mutable_name_size_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.name_size_file)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_name_size_file() const {
  return _impl_.name_size_file_.Get();
}
inline void SaveOutputParameter::_internal_set_name_size_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.name_size_file_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::_internal_mutable_name_size_file() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.name_size_file_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveOutputParameter::release_name_size_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.name_size_file)
  if (!_internal_has_name_size_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.name_size_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_size_file_.IsDefault()) {
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SaveOutputParameter::set_allocated_name_size_file(std::string* name_size_file) {
  if (name_size_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.name_size_file_.SetAllocated(name_size_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_size_file_.IsDefault()) {
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool SaveOutputParameter::_internal_has_num_test_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SaveOutputParameter::has_num_test_image() const {
  return _internal_has_num_test_image();
}
inline void SaveOutputParameter::clear_num_test_image() {
  _impl_.num_test_image_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t SaveOutputParameter::_internal_num_test_image() const {
  return _impl_.num_test_image_;
}
inline uint32_t SaveOutputParameter::num_test_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.num_test_image)
  return _internal_num_test_image();
}
inline void SaveOutputParameter::_internal_set_num_test_image(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.num_test_image_ = value;
}
inline void SaveOutputParameter::set_num_test_image(uint32_t value) {
  _internal_set_num_test_image(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.num_test_image)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 7;
inline bool SaveOutputParameter::_internal_has_resize_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resize_param_ != nullptr);
  return value;
}
inline bool SaveOutputParameter::has_resize_param() const {
  return _internal_has_resize_param();
}
inline void SaveOutputParameter::clear_resize_param() {
  if (_impl_.resize_param_ != nullptr) _impl_.resize_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::ResizeParameter& SaveOutputParameter::_internal_resize_param() const {
  const ::apollo::perception::inference::ResizeParameter* p = _impl_.resize_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ResizeParameter&>(
      ::apollo::perception::inference::_ResizeParameter_default_instance_);
}
inline const ::apollo::perception::inference::ResizeParameter& SaveOutputParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.resize_param)
  return _internal_resize_param();
}
inline void SaveOutputParameter::unsafe_arena_set_allocated_resize_param(
    ::apollo::perception::inference::ResizeParameter* resize_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resize_param_);
  }
  _impl_.resize_param_ = resize_param;
  if (resize_param) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.SaveOutputParameter.resize_param)
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::release_resize_param() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::unsafe_arena_release_resize_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.SaveOutputParameter.resize_param)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::ResizeParameter* temp = _impl_.resize_param_;
  _impl_.resize_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::_internal_mutable_resize_param() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.resize_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ResizeParameter>(GetArenaForAllocation());
    _impl_.resize_param_ = p;
  }
  return _impl_.resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::mutable_resize_param() {
  ::apollo::perception::inference::ResizeParameter* _msg = _internal_mutable_resize_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.resize_param)
  return _msg;
}
inline void SaveOutputParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resize_param_;
  }
  if (resize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resize_param);
    if (message_arena != submessage_arena) {
      resize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.resize_param_ = resize_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.resize_param)
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionOutputParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void DetectionOutputParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DetectionOutputParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t DetectionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.num_classes)
  return _internal_num_classes();
}
inline void DetectionOutputParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_classes_ = value;
}
inline void DetectionOutputParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool DetectionOutputParameter::_internal_has_share_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_share_location() const {
  return _internal_has_share_location();
}
inline void DetectionOutputParameter::clear_share_location() {
  _impl_.share_location_ = true;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool DetectionOutputParameter::_internal_share_location() const {
  return _impl_.share_location_;
}
inline bool DetectionOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.share_location)
  return _internal_share_location();
}
inline void DetectionOutputParameter::_internal_set_share_location(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.share_location_ = value;
}
inline void DetectionOutputParameter::set_share_location(bool value) {
  _internal_set_share_location(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionOutputParameter::_internal_has_background_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_background_label_id() const {
  return _internal_has_background_label_id();
}
inline void DetectionOutputParameter::clear_background_label_id() {
  _impl_.background_label_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DetectionOutputParameter::_internal_background_label_id() const {
  return _impl_.background_label_id_;
}
inline int32_t DetectionOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.background_label_id)
  return _internal_background_label_id();
}
inline void DetectionOutputParameter::_internal_set_background_label_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.background_label_id_ = value;
}
inline void DetectionOutputParameter::set_background_label_id(int32_t value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.background_label_id)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionOutputParameter::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool DetectionOutputParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void DetectionOutputParameter::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& DetectionOutputParameter::_internal_nms_param() const {
  const ::apollo::perception::inference::NonMaximumSuppressionParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NonMaximumSuppressionParameter&>(
      ::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.nms_param)
  return _internal_nms_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.DetectionOutputParameter.nms_param)
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionOutputParameter.nms_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NonMaximumSuppressionParameter>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::mutable_nms_param() {
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.nms_param)
  return _msg;
}
inline void DetectionOutputParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.nms_param)
}

// optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
inline bool DetectionOutputParameter::_internal_has_save_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.save_output_param_ != nullptr);
  return value;
}
inline bool DetectionOutputParameter::has_save_output_param() const {
  return _internal_has_save_output_param();
}
inline void DetectionOutputParameter::clear_save_output_param() {
  if (_impl_.save_output_param_ != nullptr) _impl_.save_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::SaveOutputParameter& DetectionOutputParameter::_internal_save_output_param() const {
  const ::apollo::perception::inference::SaveOutputParameter* p = _impl_.save_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SaveOutputParameter&>(
      ::apollo::perception::inference::_SaveOutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::SaveOutputParameter& DetectionOutputParameter::save_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.save_output_param)
  return _internal_save_output_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_save_output_param(
    ::apollo::perception::inference::SaveOutputParameter* save_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_output_param_);
  }
  _impl_.save_output_param_ = save_output_param;
  if (save_output_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.DetectionOutputParameter.save_output_param)
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::release_save_output_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::SaveOutputParameter* temp = _impl_.save_output_param_;
  _impl_.save_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::unsafe_arena_release_save_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionOutputParameter.save_output_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::SaveOutputParameter* temp = _impl_.save_output_param_;
  _impl_.save_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::_internal_mutable_save_output_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.save_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SaveOutputParameter>(GetArenaForAllocation());
    _impl_.save_output_param_ = p;
  }
  return _impl_.save_output_param_;
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::mutable_save_output_param() {
  ::apollo::perception::inference::SaveOutputParameter* _msg = _internal_mutable_save_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.save_output_param)
  return _msg;
}
inline void DetectionOutputParameter::set_allocated_save_output_param(::apollo::perception::inference::SaveOutputParameter* save_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.save_output_param_;
  }
  if (save_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_output_param);
    if (message_arena != submessage_arena) {
      save_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_output_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.save_output_param_ = save_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.save_output_param)
}

// optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionOutputParameter::_internal_has_code_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_code_type() const {
  return _internal_has_code_type();
}
inline void DetectionOutputParameter::clear_code_type() {
  _impl_.code_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType DetectionOutputParameter::_internal_code_type() const {
  return static_cast< ::apollo::perception::inference::PriorBoxParameter_CodeType >(_impl_.code_type_);
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType DetectionOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.code_type)
  return _internal_code_type();
}
inline void DetectionOutputParameter::_internal_set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  assert(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.code_type_ = value;
}
inline void DetectionOutputParameter::set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  _internal_set_code_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionOutputParameter::_internal_has_variance_encoded_in_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_variance_encoded_in_target() const {
  return _internal_has_variance_encoded_in_target();
}
inline void DetectionOutputParameter::clear_variance_encoded_in_target() {
  _impl_.variance_encoded_in_target_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DetectionOutputParameter::_internal_variance_encoded_in_target() const {
  return _impl_.variance_encoded_in_target_;
}
inline bool DetectionOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.variance_encoded_in_target)
  return _internal_variance_encoded_in_target();
}
inline void DetectionOutputParameter::_internal_set_variance_encoded_in_target(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.variance_encoded_in_target_ = value;
}
inline void DetectionOutputParameter::set_variance_encoded_in_target(bool value) {
  _internal_set_variance_encoded_in_target(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionOutputParameter::_internal_has_keep_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_keep_top_k() const {
  return _internal_has_keep_top_k();
}
inline void DetectionOutputParameter::clear_keep_top_k() {
  _impl_.keep_top_k_ = -1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t DetectionOutputParameter::_internal_keep_top_k() const {
  return _impl_.keep_top_k_;
}
inline int32_t DetectionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.keep_top_k)
  return _internal_keep_top_k();
}
inline void DetectionOutputParameter::_internal_set_keep_top_k(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.keep_top_k_ = value;
}
inline void DetectionOutputParameter::set_keep_top_k(int32_t value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool DetectionOutputParameter::_internal_has_confidence_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void DetectionOutputParameter::clear_confidence_threshold() {
  _impl_.confidence_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float DetectionOutputParameter::_internal_confidence_threshold() const {
  return _impl_.confidence_threshold_;
}
inline float DetectionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void DetectionOutputParameter::_internal_set_confidence_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.confidence_threshold_ = value;
}
inline void DetectionOutputParameter::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool DetectionOutputParameter::_internal_has_visualize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_visualize() const {
  return _internal_has_visualize();
}
inline void DetectionOutputParameter::clear_visualize() {
  _impl_.visualize_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool DetectionOutputParameter::_internal_visualize() const {
  return _impl_.visualize_;
}
inline bool DetectionOutputParameter::visualize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.visualize)
  return _internal_visualize();
}
inline void DetectionOutputParameter::_internal_set_visualize(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.visualize_ = value;
}
inline void DetectionOutputParameter::set_visualize(bool value) {
  _internal_set_visualize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.visualize)
}

// optional float visualize_threshold = 11;
inline bool DetectionOutputParameter::_internal_has_visualize_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_visualize_threshold() const {
  return _internal_has_visualize_threshold();
}
inline void DetectionOutputParameter::clear_visualize_threshold() {
  _impl_.visualize_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float DetectionOutputParameter::_internal_visualize_threshold() const {
  return _impl_.visualize_threshold_;
}
inline float DetectionOutputParameter::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.visualize_threshold)
  return _internal_visualize_threshold();
}
inline void DetectionOutputParameter::_internal_set_visualize_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.visualize_threshold_ = value;
}
inline void DetectionOutputParameter::set_visualize_threshold(float value) {
  _internal_set_visualize_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.visualize_threshold)
}

// optional string save_file = 12;
inline bool DetectionOutputParameter::_internal_has_save_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectionOutputParameter::has_save_file() const {
  return _internal_has_save_file();
}
inline void DetectionOutputParameter::clear_save_file() {
  _impl_.save_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectionOutputParameter::save_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.save_file)
  return _internal_save_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionOutputParameter::set_save_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.save_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.save_file)
}
inline std::string* DetectionOutputParameter::mutable_save_file() {
  std::string* _s = _internal_mutable_save_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.save_file)
  return _s;
}
inline const std::string& DetectionOutputParameter::_internal_save_file() const {
  return _impl_.save_file_.Get();
}
inline void DetectionOutputParameter::_internal_set_save_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.save_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionOutputParameter::_internal_mutable_save_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.save_file_.Mutable(GetArenaForAllocation());
}
inline std::string* DetectionOutputParameter::release_save_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionOutputParameter.save_file)
  if (!_internal_has_save_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.save_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_file_.IsDefault()) {
    _impl_.save_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetectionOutputParameter::set_allocated_save_file(std::string* save_file) {
  if (save_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.save_file_.SetAllocated(save_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_file_.IsDefault()) {
    _impl_.save_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.save_file)
}

// -------------------------------------------------------------------

// RegionOutputParameter

// optional uint32 num_classes = 1;
inline bool RegionOutputParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void RegionOutputParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RegionOutputParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t RegionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.num_classes)
  return _internal_num_classes();
}
inline void RegionOutputParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_classes_ = value;
}
inline void RegionOutputParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.num_classes)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
inline bool RegionOutputParameter::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool RegionOutputParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void RegionOutputParameter::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionOutputParameter::_internal_nms_param() const {
  const ::apollo::perception::inference::NonMaximumSuppressionParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NonMaximumSuppressionParameter&>(
      ::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_param)
  return _internal_nms_param();
}
inline void RegionOutputParameter::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.RegionOutputParameter.nms_param)
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RegionOutputParameter.nms_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NonMaximumSuppressionParameter>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::mutable_nms_param() {
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionOutputParameter.nms_param)
  return _msg;
}
inline void RegionOutputParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionOutputParameter.nms_param)
}

// optional int32 keep_top_k = 3 [default = -1];
inline bool RegionOutputParameter::_internal_has_keep_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_keep_top_k() const {
  return _internal_has_keep_top_k();
}
inline void RegionOutputParameter::clear_keep_top_k() {
  _impl_.keep_top_k_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t RegionOutputParameter::_internal_keep_top_k() const {
  return _impl_.keep_top_k_;
}
inline int32_t RegionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.keep_top_k)
  return _internal_keep_top_k();
}
inline void RegionOutputParameter::_internal_set_keep_top_k(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.keep_top_k_ = value;
}
inline void RegionOutputParameter::set_keep_top_k(int32_t value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 4;
inline bool RegionOutputParameter::_internal_has_confidence_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void RegionOutputParameter::clear_confidence_threshold() {
  _impl_.confidence_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float RegionOutputParameter::_internal_confidence_threshold() const {
  return _impl_.confidence_threshold_;
}
inline float RegionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void RegionOutputParameter::_internal_set_confidence_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.confidence_threshold_ = value;
}
inline void RegionOutputParameter::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.confidence_threshold)
}

// repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
inline int RegionOutputParameter::_internal_anchorbox_size() const {
  return _impl_.anchorbox_.size();
}
inline int RegionOutputParameter::anchorbox_size() const {
  return _internal_anchorbox_size();
}
inline void RegionOutputParameter::clear_anchorbox() {
  _impl_.anchorbox_.Clear();
}
inline ::apollo::perception::inference::AnchorBox* RegionOutputParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return _impl_.anchorbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionOutputParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return &_impl_.anchorbox_;
}
inline const ::apollo::perception::inference::AnchorBox& RegionOutputParameter::_internal_anchorbox(int index) const {
  return _impl_.anchorbox_.Get(index);
}
inline const ::apollo::perception::inference::AnchorBox& RegionOutputParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return _internal_anchorbox(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionOutputParameter::_internal_add_anchorbox() {
  return _impl_.anchorbox_.Add();
}
inline ::apollo::perception::inference::AnchorBox* RegionOutputParameter::add_anchorbox() {
  ::apollo::perception::inference::AnchorBox* _add = _internal_add_anchorbox();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionOutputParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return _impl_.anchorbox_;
}

// optional int32 nms_type = 6;
inline bool RegionOutputParameter::_internal_has_nms_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_nms_type() const {
  return _internal_has_nms_type();
}
inline void RegionOutputParameter::clear_nms_type() {
  _impl_.nms_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t RegionOutputParameter::_internal_nms_type() const {
  return _impl_.nms_type_;
}
inline int32_t RegionOutputParameter::nms_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_type)
  return _internal_nms_type();
}
inline void RegionOutputParameter::_internal_set_nms_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nms_type_ = value;
}
inline void RegionOutputParameter::set_nms_type(int32_t value) {
  _internal_set_nms_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.nms_type)
}

// optional float nms_sigma = 7;
inline bool RegionOutputParameter::_internal_has_nms_sigma() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_nms_sigma() const {
  return _internal_has_nms_sigma();
}
inline void RegionOutputParameter::clear_nms_sigma() {
  _impl_.nms_sigma_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float RegionOutputParameter::_internal_nms_sigma() const {
  return _impl_.nms_sigma_;
}
inline float RegionOutputParameter::nms_sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_sigma)
  return _internal_nms_sigma();
}
inline void RegionOutputParameter::_internal_set_nms_sigma(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nms_sigma_ = value;
}
inline void RegionOutputParameter::set_nms_sigma(float value) {
  _internal_set_nms_sigma(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.nms_sigma)
}

// optional bool is_rpn = 8 [default = false];
inline bool RegionOutputParameter::_internal_has_is_rpn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionOutputParameter::has_is_rpn() const {
  return _internal_has_is_rpn();
}
inline void RegionOutputParameter::clear_is_rpn() {
  _impl_.is_rpn_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RegionOutputParameter::_internal_is_rpn() const {
  return _impl_.is_rpn_;
}
inline bool RegionOutputParameter::is_rpn() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.is_rpn)
  return _internal_is_rpn();
}
inline void RegionOutputParameter::_internal_set_is_rpn(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_rpn_ = value;
}
inline void RegionOutputParameter::set_is_rpn(bool value) {
  _internal_set_is_rpn(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.is_rpn)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::_internal_has_dropout_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropoutParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void DropoutParameter::clear_dropout_ratio() {
  _impl_.dropout_ratio_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DropoutParameter::_internal_dropout_ratio() const {
  return _impl_.dropout_ratio_;
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DropoutParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void DropoutParameter::_internal_set_dropout_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dropout_ratio_ = value;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .apollo.perception.inference.FillerParameter data_filler = 1;
inline int DummyDataParameter::_internal_data_filler_size() const {
  return _impl_.data_filler_.size();
}
inline int DummyDataParameter::data_filler_size() const {
  return _internal_data_filler_size();
}
inline void DummyDataParameter::clear_data_filler() {
  _impl_.data_filler_.Clear();
}
inline ::apollo::perception::inference::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DummyDataParameter.data_filler)
  return _impl_.data_filler_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.data_filler)
  return &_impl_.data_filler_;
}
inline const ::apollo::perception::inference::FillerParameter& DummyDataParameter::_internal_data_filler(int index) const {
  return _impl_.data_filler_.Get(index);
}
inline const ::apollo::perception::inference::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.data_filler)
  return _internal_data_filler(index);
}
inline ::apollo::perception::inference::FillerParameter* DummyDataParameter::_internal_add_data_filler() {
  return _impl_.data_filler_.Add();
}
inline ::apollo::perception::inference::FillerParameter* DummyDataParameter::add_data_filler() {
  ::apollo::perception::inference::FillerParameter* _add = _internal_add_data_filler();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.data_filler)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.data_filler)
  return _impl_.data_filler_;
}

// repeated .apollo.perception.inference.BlobShape shape = 6;
inline int DummyDataParameter::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int DummyDataParameter::shape_size() const {
  return _internal_shape_size();
}
inline void DummyDataParameter::clear_shape() {
  _impl_.shape_.Clear();
}
inline ::apollo::perception::inference::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DummyDataParameter.shape)
  return _impl_.shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.shape)
  return &_impl_.shape_;
}
inline const ::apollo::perception::inference::BlobShape& DummyDataParameter::_internal_shape(int index) const {
  return _impl_.shape_.Get(index);
}
inline const ::apollo::perception::inference::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.shape)
  return _internal_shape(index);
}
inline ::apollo::perception::inference::BlobShape* DummyDataParameter::_internal_add_shape() {
  return _impl_.shape_.Add();
}
inline ::apollo::perception::inference::BlobShape* DummyDataParameter::add_shape() {
  ::apollo::perception::inference::BlobShape* _add = _internal_add_shape();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.shape)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.shape)
  return _impl_.shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::_internal_num_size() const {
  return _impl_.num_.size();
}
inline int DummyDataParameter::num_size() const {
  return _internal_num_size();
}
inline void DummyDataParameter::clear_num() {
  _impl_.num_.Clear();
}
inline uint32_t DummyDataParameter::_internal_num(int index) const {
  return _impl_.num_.Get(index);
}
inline uint32_t DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.num)
  return _internal_num(index);
}
inline void DummyDataParameter::set_num(int index, uint32_t value) {
  _impl_.num_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.num)
}
inline void DummyDataParameter::_internal_add_num(uint32_t value) {
  _impl_.num_.Add(value);
}
inline void DummyDataParameter::add_num(uint32_t value) {
  _internal_add_num(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::_internal_num() const {
  return _impl_.num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.num)
  return _internal_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::_internal_mutable_num() {
  return &_impl_.num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.num)
  return _internal_mutable_num();
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int DummyDataParameter::channels_size() const {
  return _internal_channels_size();
}
inline void DummyDataParameter::clear_channels() {
  _impl_.channels_.Clear();
}
inline uint32_t DummyDataParameter::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline uint32_t DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.channels)
  return _internal_channels(index);
}
inline void DummyDataParameter::set_channels(int index, uint32_t value) {
  _impl_.channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.channels)
}
inline void DummyDataParameter::_internal_add_channels(uint32_t value) {
  _impl_.channels_.Add(value);
}
inline void DummyDataParameter::add_channels(uint32_t value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::_internal_channels() const {
  return _impl_.channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::_internal_mutable_channels() {
  return &_impl_.channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.channels)
  return _internal_mutable_channels();
}

// repeated uint32 height = 4;
inline int DummyDataParameter::_internal_height_size() const {
  return _impl_.height_.size();
}
inline int DummyDataParameter::height_size() const {
  return _internal_height_size();
}
inline void DummyDataParameter::clear_height() {
  _impl_.height_.Clear();
}
inline uint32_t DummyDataParameter::_internal_height(int index) const {
  return _impl_.height_.Get(index);
}
inline uint32_t DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.height)
  return _internal_height(index);
}
inline void DummyDataParameter::set_height(int index, uint32_t value) {
  _impl_.height_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.height)
}
inline void DummyDataParameter::_internal_add_height(uint32_t value) {
  _impl_.height_.Add(value);
}
inline void DummyDataParameter::add_height(uint32_t value) {
  _internal_add_height(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.height)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::_internal_height() const {
  return _impl_.height_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.height)
  return _internal_height();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::_internal_mutable_height() {
  return &_impl_.height_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.height)
  return _internal_mutable_height();
}

// repeated uint32 width = 5;
inline int DummyDataParameter::_internal_width_size() const {
  return _impl_.width_.size();
}
inline int DummyDataParameter::width_size() const {
  return _internal_width_size();
}
inline void DummyDataParameter::clear_width() {
  _impl_.width_.Clear();
}
inline uint32_t DummyDataParameter::_internal_width(int index) const {
  return _impl_.width_.Get(index);
}
inline uint32_t DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.width)
  return _internal_width(index);
}
inline void DummyDataParameter::set_width(int index, uint32_t value) {
  _impl_.width_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.width)
}
inline void DummyDataParameter::_internal_add_width(uint32_t value) {
  _impl_.width_.Add(value);
}
inline void DummyDataParameter::add_width(uint32_t value) {
  _internal_add_width(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.width)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::_internal_width() const {
  return _impl_.width_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.width)
  return _internal_width();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::_internal_mutable_width() {
  return &_impl_.width_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.width)
  return _internal_mutable_width();
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EltwiseParameter::has_operation() const {
  return _internal_has_operation();
}
inline void EltwiseParameter::clear_operation() {
  _impl_.operation_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::EltwiseParameter_EltwiseOp EltwiseParameter::_internal_operation() const {
  return static_cast< ::apollo::perception::inference::EltwiseParameter_EltwiseOp >(_impl_.operation_);
}
inline ::apollo::perception::inference::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.operation)
  return _internal_operation();
}
inline void EltwiseParameter::_internal_set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value) {
  assert(::apollo::perception::inference::EltwiseParameter_EltwiseOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_ = value;
}
inline void EltwiseParameter::set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::_internal_coeff_size() const {
  return _impl_.coeff_.size();
}
inline int EltwiseParameter::coeff_size() const {
  return _internal_coeff_size();
}
inline void EltwiseParameter::clear_coeff() {
  _impl_.coeff_.Clear();
}
inline float EltwiseParameter::_internal_coeff(int index) const {
  return _impl_.coeff_.Get(index);
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.coeff)
  return _internal_coeff(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  _impl_.coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.coeff)
}
inline void EltwiseParameter::_internal_add_coeff(float value) {
  _impl_.coeff_.Add(value);
}
inline void EltwiseParameter::add_coeff(float value) {
  _internal_add_coeff(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.EltwiseParameter.coeff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseParameter::_internal_coeff() const {
  return _impl_.coeff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.EltwiseParameter.coeff)
  return _internal_coeff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseParameter::_internal_mutable_coeff() {
  return &_impl_.coeff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.EltwiseParameter.coeff)
  return _internal_mutable_coeff();
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::_internal_has_stable_prod_grad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return _internal_has_stable_prod_grad();
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  _impl_.stable_prod_grad_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool EltwiseParameter::_internal_stable_prod_grad() const {
  return _impl_.stable_prod_grad_;
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.stable_prod_grad)
  return _internal_stable_prod_grad();
}
inline void EltwiseParameter::_internal_set_stable_prod_grad(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stable_prod_grad_ = value;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  _internal_set_stable_prod_grad(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ELUParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void ELUParameter::clear_alpha() {
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ELUParameter::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ELUParameter.alpha)
  return _internal_alpha();
}
inline void ELUParameter::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alpha_ = value;
}
inline void ELUParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmbedParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void EmbedParameter::clear_num_output() {
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EmbedParameter::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.num_output)
  return _internal_num_output();
}
inline void EmbedParameter::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}
inline void EmbedParameter::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::_internal_has_input_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EmbedParameter::has_input_dim() const {
  return _internal_has_input_dim();
}
inline void EmbedParameter::clear_input_dim() {
  _impl_.input_dim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t EmbedParameter::_internal_input_dim() const {
  return _impl_.input_dim_;
}
inline uint32_t EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.input_dim)
  return _internal_input_dim();
}
inline void EmbedParameter::_internal_set_input_dim(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.input_dim_ = value;
}
inline void EmbedParameter::set_input_dim(uint32_t value) {
  _internal_set_input_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::_internal_has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EmbedParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void EmbedParameter::clear_bias_term() {
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool EmbedParameter::_internal_bias_term() const {
  return _impl_.bias_term_;
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.bias_term)
  return _internal_bias_term();
}
inline void EmbedParameter::_internal_set_bias_term(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bias_term_ = value;
}
inline void EmbedParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 4;
inline bool EmbedParameter::_internal_has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline bool EmbedParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void EmbedParameter::clear_weight_filler() {
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::_internal_weight_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.weight_filler)
  return _internal_weight_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_weight_filler(
    ::apollo::perception::inference::FillerParameter* weight_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = weight_filler;
  if (weight_filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.EmbedParameter.weight_filler)
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::release_weight_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.EmbedParameter.weight_filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::_internal_mutable_weight_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.weight_filler_ = p;
  }
  return _impl_.weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::mutable_weight_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.EmbedParameter.weight_filler)
  return _msg;
}
inline void EmbedParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.EmbedParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 5;
inline bool EmbedParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool EmbedParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void EmbedParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.bias_filler)
  return _internal_bias_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.EmbedParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.EmbedParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.EmbedParameter.bias_filler)
  return _msg;
}
inline void EmbedParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpParameter::has_base() const {
  return _internal_has_base();
}
inline void ExpParameter::clear_base() {
  _impl_.base_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ExpParameter::_internal_base() const {
  return _impl_.base_;
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.base)
  return _internal_base();
}
inline void ExpParameter::_internal_set_base(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}
inline void ExpParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExpParameter::has_scale() const {
  return _internal_has_scale();
}
inline void ExpParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ExpParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.scale)
  return _internal_scale();
}
inline void ExpParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}
inline void ExpParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::_internal_has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpParameter::has_shift() const {
  return _internal_has_shift();
}
inline void ExpParameter::clear_shift() {
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ExpParameter::_internal_shift() const {
  return _impl_.shift_;
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.shift)
  return _internal_shift();
}
inline void ExpParameter::_internal_set_shift(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}
inline void ExpParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlattenParameter::has_axis() const {
  return _internal_has_axis();
}
inline void FlattenParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FlattenParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FlattenParameter.axis)
  return _internal_axis();
}
inline void FlattenParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}
inline void FlattenParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::_internal_has_end_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlattenParameter::has_end_axis() const {
  return _internal_has_end_axis();
}
inline void FlattenParameter::clear_end_axis() {
  _impl_.end_axis_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FlattenParameter::_internal_end_axis() const {
  return _impl_.end_axis_;
}
inline int32_t FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FlattenParameter.end_axis)
  return _internal_end_axis();
}
inline void FlattenParameter::_internal_set_end_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_axis_ = value;
}
inline void FlattenParameter::set_end_axis(int32_t value) {
  _internal_set_end_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_source() const {
  return _internal_has_source();
}
inline void HDF5DataParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDF5DataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.HDF5DataParameter.source)
  return _s;
}
inline const std::string& HDF5DataParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void HDF5DataParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* HDF5DataParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.HDF5DataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HDF5DataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::_internal_has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void HDF5DataParameter::clear_batch_size() {
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t HDF5DataParameter::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.batch_size)
  return _internal_batch_size();
}
inline void HDF5DataParameter::_internal_set_batch_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.batch_size_ = value;
}
inline void HDF5DataParameter::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::_internal_has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HDF5DataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void HDF5DataParameter::clear_shuffle() {
  _impl_.shuffle_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool HDF5DataParameter::_internal_shuffle() const {
  return _impl_.shuffle_;
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.shuffle)
  return _internal_shuffle();
}
inline void HDF5DataParameter::_internal_set_shuffle(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shuffle_ = value;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDF5OutputParameter::has_file_name() const {
  return _internal_has_file_name();
}
inline void HDF5OutputParameter::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5OutputParameter.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDF5OutputParameter::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.HDF5OutputParameter.file_name)
  return _s;
}
inline const std::string& HDF5OutputParameter::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void HDF5OutputParameter::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HDF5OutputParameter::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.HDF5OutputParameter.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HDF5OutputParameter::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::_internal_has_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HingeLossParameter::has_norm() const {
  return _internal_has_norm();
}
inline void HingeLossParameter::clear_norm() {
  _impl_.norm_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::HingeLossParameter_Norm HingeLossParameter::_internal_norm() const {
  return static_cast< ::apollo::perception::inference::HingeLossParameter_Norm >(_impl_.norm_);
}
inline ::apollo::perception::inference::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HingeLossParameter.norm)
  return _internal_norm();
}
inline void HingeLossParameter::_internal_set_norm(::apollo::perception::inference::HingeLossParameter_Norm value) {
  assert(::apollo::perception::inference::HingeLossParameter_Norm_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.norm_ = value;
}
inline void HingeLossParameter::set_norm(::apollo::perception::inference::HingeLossParameter_Norm value) {
  _internal_set_norm(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// RepeatedList

// optional string list_path = 1;
inline bool RepeatedList::_internal_has_list_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RepeatedList::has_list_path() const {
  return _internal_has_list_path();
}
inline void RepeatedList::clear_list_path() {
  _impl_.list_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RepeatedList::list_path() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RepeatedList.list_path)
  return _internal_list_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepeatedList::set_list_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.list_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RepeatedList.list_path)
}
inline std::string* RepeatedList::mutable_list_path() {
  std::string* _s = _internal_mutable_list_path();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RepeatedList.list_path)
  return _s;
}
inline const std::string& RepeatedList::_internal_list_path() const {
  return _impl_.list_path_.Get();
}
inline void RepeatedList::_internal_set_list_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.list_path_.Set(value, GetArenaForAllocation());
}
inline std::string* RepeatedList::_internal_mutable_list_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.list_path_.Mutable(GetArenaForAllocation());
}
inline std::string* RepeatedList::release_list_path() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RepeatedList.list_path)
  if (!_internal_has_list_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.list_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.list_path_.IsDefault()) {
    _impl_.list_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RepeatedList::set_allocated_list_path(std::string* list_path) {
  if (list_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.list_path_.SetAllocated(list_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.list_path_.IsDefault()) {
    _impl_.list_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RepeatedList.list_path)
}

// optional uint32 num_repeat = 2 [default = 1];
inline bool RepeatedList::_internal_has_num_repeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RepeatedList::has_num_repeat() const {
  return _internal_has_num_repeat();
}
inline void RepeatedList::clear_num_repeat() {
  _impl_.num_repeat_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RepeatedList::_internal_num_repeat() const {
  return _impl_.num_repeat_;
}
inline uint32_t RepeatedList::num_repeat() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RepeatedList.num_repeat)
  return _internal_num_repeat();
}
inline void RepeatedList::_internal_set_num_repeat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_repeat_ = value;
}
inline void RepeatedList::set_num_repeat(uint32_t value) {
  _internal_set_num_repeat(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RepeatedList.num_repeat)
}

// -------------------------------------------------------------------

// DatasetParameter

// optional string source = 1;
inline bool DatasetParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatasetParameter::has_source() const {
  return _internal_has_source();
}
inline void DatasetParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DatasetParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.source)
}
inline std::string* DatasetParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.source)
  return _s;
}
inline const std::string& DatasetParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void DatasetParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DatasetParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatasetParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DatasetParameter.source)
}

// optional string root_folder = 2;
inline bool DatasetParameter::_internal_has_root_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatasetParameter::has_root_folder() const {
  return _internal_has_root_folder();
}
inline void DatasetParameter::clear_root_folder() {
  _impl_.root_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DatasetParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.root_folder)
  return _internal_root_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatasetParameter::set_root_folder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.root_folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.root_folder)
}
inline std::string* DatasetParameter::mutable_root_folder() {
  std::string* _s = _internal_mutable_root_folder();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.root_folder)
  return _s;
}
inline const std::string& DatasetParameter::_internal_root_folder() const {
  return _impl_.root_folder_.Get();
}
inline void DatasetParameter::_internal_set_root_folder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.root_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetParameter::_internal_mutable_root_folder() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.root_folder_.Mutable(GetArenaForAllocation());
}
inline std::string* DatasetParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DatasetParameter.root_folder)
  if (!_internal_has_root_folder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.root_folder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatasetParameter::set_allocated_root_folder(std::string* root_folder) {
  if (root_folder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.root_folder_.SetAllocated(root_folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DatasetParameter.root_folder)
}

// optional float weight = 3 [default = 1];
inline bool DatasetParameter::_internal_has_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DatasetParameter::has_weight() const {
  return _internal_has_weight();
}
inline void DatasetParameter::clear_weight() {
  _impl_.weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DatasetParameter::_internal_weight() const {
  return _impl_.weight_;
}
inline float DatasetParameter::weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.weight)
  return _internal_weight();
}
inline void DatasetParameter::_internal_set_weight(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.weight_ = value;
}
inline void DatasetParameter::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.weight)
}

// optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
inline bool DatasetParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DatasetParameter::has_type() const {
  return _internal_has_type();
}
inline void DatasetParameter::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::perception::inference::DatasetParameter_DatasetType DatasetParameter::_internal_type() const {
  return static_cast< ::apollo::perception::inference::DatasetParameter_DatasetType >(_impl_.type_);
}
inline ::apollo::perception::inference::DatasetParameter_DatasetType DatasetParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.type)
  return _internal_type();
}
inline void DatasetParameter::_internal_set_type(::apollo::perception::inference::DatasetParameter_DatasetType value) {
  assert(::apollo::perception::inference::DatasetParameter_DatasetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void DatasetParameter::set_type(::apollo::perception::inference::DatasetParameter_DatasetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.type)
}

// optional bool shuffle = 5 [default = true];
inline bool DatasetParameter::_internal_has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DatasetParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void DatasetParameter::clear_shuffle() {
  _impl_.shuffle_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DatasetParameter::_internal_shuffle() const {
  return _impl_.shuffle_;
}
inline bool DatasetParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.shuffle)
  return _internal_shuffle();
}
inline void DatasetParameter::_internal_set_shuffle(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shuffle_ = value;
}
inline void DatasetParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.shuffle)
}

// repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
inline int DatasetParameter::_internal_repeated_list_size() const {
  return _impl_.repeated_list_.size();
}
inline int DatasetParameter::repeated_list_size() const {
  return _internal_repeated_list_size();
}
inline void DatasetParameter::clear_repeated_list() {
  _impl_.repeated_list_.Clear();
}
inline ::apollo::perception::inference::RepeatedList* DatasetParameter::mutable_repeated_list(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.repeated_list)
  return _impl_.repeated_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >*
DatasetParameter::mutable_repeated_list() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DatasetParameter.repeated_list)
  return &_impl_.repeated_list_;
}
inline const ::apollo::perception::inference::RepeatedList& DatasetParameter::_internal_repeated_list(int index) const {
  return _impl_.repeated_list_.Get(index);
}
inline const ::apollo::perception::inference::RepeatedList& DatasetParameter::repeated_list(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.repeated_list)
  return _internal_repeated_list(index);
}
inline ::apollo::perception::inference::RepeatedList* DatasetParameter::_internal_add_repeated_list() {
  return _impl_.repeated_list_.Add();
}
inline ::apollo::perception::inference::RepeatedList* DatasetParameter::add_repeated_list() {
  ::apollo::perception::inference::RepeatedList* _add = _internal_add_repeated_list();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DatasetParameter.repeated_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >&
DatasetParameter::repeated_list() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DatasetParameter.repeated_list)
  return _impl_.repeated_list_;
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageDataParameter::has_source() const {
  return _internal_has_source();
}
inline void ImageDataParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.source)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void ImageDataParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ImageDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ImageDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::_internal_has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ImageDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void ImageDataParameter::clear_batch_size() {
  _impl_.batch_size_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ImageDataParameter::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.batch_size)
  return _internal_batch_size();
}
inline void ImageDataParameter::_internal_set_batch_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.batch_size_ = value;
}
inline void ImageDataParameter::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::_internal_has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageDataParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void ImageDataParameter::clear_rand_skip() {
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ImageDataParameter::_internal_rand_skip() const {
  return _impl_.rand_skip_;
}
inline uint32_t ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void ImageDataParameter::_internal_set_rand_skip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rand_skip_ = value;
}
inline void ImageDataParameter::set_rand_skip(uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::_internal_has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageDataParameter::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void ImageDataParameter::clear_shuffle() {
  _impl_.shuffle_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ImageDataParameter::_internal_shuffle() const {
  return _impl_.shuffle_;
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.shuffle)
  return _internal_shuffle();
}
inline void ImageDataParameter::_internal_set_shuffle(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.shuffle_ = value;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::_internal_has_new_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void ImageDataParameter::clear_new_height() {
  _impl_.new_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ImageDataParameter::_internal_new_height() const {
  return _impl_.new_height_;
}
inline uint32_t ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.new_height)
  return _internal_new_height();
}
inline void ImageDataParameter::_internal_set_new_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.new_height_ = value;
}
inline void ImageDataParameter::set_new_height(uint32_t value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::_internal_has_new_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ImageDataParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void ImageDataParameter::clear_new_width() {
  _impl_.new_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ImageDataParameter::_internal_new_width() const {
  return _impl_.new_width_;
}
inline uint32_t ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.new_width)
  return _internal_new_width();
}
inline void ImageDataParameter::_internal_set_new_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.new_width_ = value;
}
inline void ImageDataParameter::set_new_width(uint32_t value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::_internal_has_is_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ImageDataParameter::has_is_color() const {
  return _internal_has_is_color();
}
inline void ImageDataParameter::clear_is_color() {
  _impl_.is_color_ = true;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ImageDataParameter::_internal_is_color() const {
  return _impl_.is_color_;
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.is_color)
  return _internal_is_color();
}
inline void ImageDataParameter::_internal_set_is_color(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_color_ = value;
}
inline void ImageDataParameter::set_is_color(bool value) {
  _internal_set_is_color(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ImageDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void ImageDataParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ImageDataParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.scale)
  return _internal_scale();
}
inline void ImageDataParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.scale_ = value;
}
inline void ImageDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::_internal_has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void ImageDataParameter::clear_mean_file() {
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.mean_file)
  return _internal_mean_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mean_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::mutable_mean_file() {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.mean_file)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_mean_file() const {
  return _impl_.mean_file_.Get();
}
inline void ImageDataParameter::_internal_set_mean_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataParameter::_internal_mutable_mean_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ImageDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mean_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ImageDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(mean_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::_internal_has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void ImageDataParameter::clear_crop_size() {
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ImageDataParameter::_internal_crop_size() const {
  return _impl_.crop_size_;
}
inline uint32_t ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.crop_size)
  return _internal_crop_size();
}
inline void ImageDataParameter::_internal_set_crop_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.crop_size_ = value;
}
inline void ImageDataParameter::set_crop_size(uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void ImageDataParameter::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ImageDataParameter::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.mirror)
  return _internal_mirror();
}
inline void ImageDataParameter::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mirror_ = value;
}
inline void ImageDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::_internal_has_root_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageDataParameter::has_root_folder() const {
  return _internal_has_root_folder();
}
inline void ImageDataParameter::clear_root_folder() {
  _impl_.root_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.root_folder)
  return _internal_root_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageDataParameter::set_root_folder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.root_folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.root_folder)
}
inline std::string* ImageDataParameter::mutable_root_folder() {
  std::string* _s = _internal_mutable_root_folder();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.root_folder)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_root_folder() const {
  return _impl_.root_folder_.Get();
}
inline void ImageDataParameter::_internal_set_root_folder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataParameter::_internal_mutable_root_folder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.root_folder_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ImageDataParameter.root_folder)
  if (!_internal_has_root_folder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.root_folder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ImageDataParameter::set_allocated_root_folder(std::string* root_folder) {
  if (root_folder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.root_folder_.SetAllocated(root_folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.root_folder)
}

// optional uint32 prefetch = 20 [default = 4];
inline bool ImageDataParameter::_internal_has_prefetch() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ImageDataParameter::has_prefetch() const {
  return _internal_has_prefetch();
}
inline void ImageDataParameter::clear_prefetch() {
  _impl_.prefetch_ = 4u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ImageDataParameter::_internal_prefetch() const {
  return _impl_.prefetch_;
}
inline uint32_t ImageDataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.prefetch)
  return _internal_prefetch();
}
inline void ImageDataParameter::_internal_set_prefetch(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.prefetch_ = value;
}
inline void ImageDataParameter::set_prefetch(uint32_t value) {
  _internal_set_prefetch(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.prefetch)
}

// repeated .apollo.perception.inference.DatasetParameter image_set = 100;
inline int ImageDataParameter::_internal_image_set_size() const {
  return _impl_.image_set_.size();
}
inline int ImageDataParameter::image_set_size() const {
  return _internal_image_set_size();
}
inline void ImageDataParameter::clear_image_set() {
  _impl_.image_set_.Clear();
}
inline ::apollo::perception::inference::DatasetParameter* ImageDataParameter::mutable_image_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.image_set)
  return _impl_.image_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >*
ImageDataParameter::mutable_image_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ImageDataParameter.image_set)
  return &_impl_.image_set_;
}
inline const ::apollo::perception::inference::DatasetParameter& ImageDataParameter::_internal_image_set(int index) const {
  return _impl_.image_set_.Get(index);
}
inline const ::apollo::perception::inference::DatasetParameter& ImageDataParameter::image_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.image_set)
  return _internal_image_set(index);
}
inline ::apollo::perception::inference::DatasetParameter* ImageDataParameter::_internal_add_image_set() {
  return _impl_.image_set_.Add();
}
inline ::apollo::perception::inference::DatasetParameter* ImageDataParameter::add_image_set() {
  ::apollo::perception::inference::DatasetParameter* _add = _internal_add_image_set();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ImageDataParameter.image_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >&
ImageDataParameter::image_set() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ImageDataParameter.image_set)
  return _impl_.image_set_;
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfogainLossParameter::has_source() const {
  return _internal_has_source();
}
inline void InfogainLossParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InfogainLossParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfogainLossParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InfogainLossParameter.source)
  return _s;
}
inline const std::string& InfogainLossParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void InfogainLossParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* InfogainLossParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.InfogainLossParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InfogainLossParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InnerProductParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void InnerProductParameter::clear_num_output() {
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t InnerProductParameter::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.num_output)
  return _internal_num_output();
}
inline void InnerProductParameter::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}
inline void InnerProductParameter::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::_internal_has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InnerProductParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void InnerProductParameter::clear_bias_term() {
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool InnerProductParameter::_internal_bias_term() const {
  return _impl_.bias_term_;
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.bias_term)
  return _internal_bias_term();
}
inline void InnerProductParameter::_internal_set_bias_term(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bias_term_ = value;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::_internal_has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void InnerProductParameter::clear_weight_filler() {
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::_internal_weight_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.weight_filler)
  return _internal_weight_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_weight_filler(
    ::apollo::perception::inference::FillerParameter* weight_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = weight_filler;
  if (weight_filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.InnerProductParameter.weight_filler)
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::release_weight_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.InnerProductParameter.weight_filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::_internal_mutable_weight_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.weight_filler_ = p;
  }
  return _impl_.weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InnerProductParameter.weight_filler)
  return _msg;
}
inline void InnerProductParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InnerProductParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool InnerProductParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void InnerProductParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.bias_filler)
  return _internal_bias_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.InnerProductParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.InnerProductParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InnerProductParameter.bias_filler)
  return _msg;
}
inline void InnerProductParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InnerProductParameter::has_axis() const {
  return _internal_has_axis();
}
inline void InnerProductParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t InnerProductParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.axis)
  return _internal_axis();
}
inline void InnerProductParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.axis_ = value;
}
inline void InnerProductParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::_internal_has_transpose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InnerProductParameter::has_transpose() const {
  return _internal_has_transpose();
}
inline void InnerProductParameter::clear_transpose() {
  _impl_.transpose_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InnerProductParameter::_internal_transpose() const {
  return _impl_.transpose_;
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.transpose)
  return _internal_transpose();
}
inline void InnerProductParameter::_internal_set_transpose(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.transpose_ = value;
}
inline void InnerProductParameter::set_transpose(bool value) {
  _internal_set_transpose(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.transpose)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .apollo.perception.inference.BlobShape shape = 1;
inline int InputParameter::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int InputParameter::shape_size() const {
  return _internal_shape_size();
}
inline void InputParameter::clear_shape() {
  _impl_.shape_.Clear();
}
inline ::apollo::perception::inference::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InputParameter.shape)
  return _impl_.shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.InputParameter.shape)
  return &_impl_.shape_;
}
inline const ::apollo::perception::inference::BlobShape& InputParameter::_internal_shape(int index) const {
  return _impl_.shape_.Get(index);
}
inline const ::apollo::perception::inference::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InputParameter.shape)
  return _internal_shape(index);
}
inline ::apollo::perception::inference::BlobShape* InputParameter::_internal_add_shape() {
  return _impl_.shape_.Add();
}
inline ::apollo::perception::inference::BlobShape* InputParameter::add_shape() {
  ::apollo::perception::inference::BlobShape* _add = _internal_add_shape();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.InputParameter.shape)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.InputParameter.shape)
  return _impl_.shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogParameter::has_base() const {
  return _internal_has_base();
}
inline void LogParameter::clear_base() {
  _impl_.base_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LogParameter::_internal_base() const {
  return _impl_.base_;
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.base)
  return _internal_base();
}
inline void LogParameter::_internal_set_base(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}
inline void LogParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogParameter::has_scale() const {
  return _internal_has_scale();
}
inline void LogParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LogParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.scale)
  return _internal_scale();
}
inline void LogParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}
inline void LogParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::_internal_has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogParameter::has_shift() const {
  return _internal_has_shift();
}
inline void LogParameter::clear_shift() {
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float LogParameter::_internal_shift() const {
  return _impl_.shift_;
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.shift)
  return _internal_shift();
}
inline void LogParameter::_internal_set_shift(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}
inline void LogParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::_internal_has_local_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LRNParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void LRNParameter::clear_local_size() {
  _impl_.local_size_ = 5u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LRNParameter::_internal_local_size() const {
  return _impl_.local_size_;
}
inline uint32_t LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.local_size)
  return _internal_local_size();
}
inline void LRNParameter::_internal_set_local_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.local_size_ = value;
}
inline void LRNParameter::set_local_size(uint32_t value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LRNParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void LRNParameter::clear_alpha() {
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float LRNParameter::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.alpha)
  return _internal_alpha();
}
inline void LRNParameter::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alpha_ = value;
}
inline void LRNParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::_internal_has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LRNParameter::has_beta() const {
  return _internal_has_beta();
}
inline void LRNParameter::clear_beta() {
  _impl_.beta_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float LRNParameter::_internal_beta() const {
  return _impl_.beta_;
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.beta)
  return _internal_beta();
}
inline void LRNParameter::_internal_set_beta(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.beta_ = value;
}
inline void LRNParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.beta)
}

// optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::_internal_has_norm_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LRNParameter::has_norm_region() const {
  return _internal_has_norm_region();
}
inline void LRNParameter::clear_norm_region() {
  _impl_.norm_region_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::LRNParameter_NormRegion LRNParameter::_internal_norm_region() const {
  return static_cast< ::apollo::perception::inference::LRNParameter_NormRegion >(_impl_.norm_region_);
}
inline ::apollo::perception::inference::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.norm_region)
  return _internal_norm_region();
}
inline void LRNParameter::_internal_set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value) {
  assert(::apollo::perception::inference::LRNParameter_NormRegion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.norm_region_ = value;
}
inline void LRNParameter::set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value) {
  _internal_set_norm_region(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::_internal_has_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LRNParameter::has_k() const {
  return _internal_has_k();
}
inline void LRNParameter::clear_k() {
  _impl_.k_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float LRNParameter::_internal_k() const {
  return _impl_.k_;
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.k)
  return _internal_k();
}
inline void LRNParameter::_internal_set_k(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.k_ = value;
}
inline void LRNParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.k)
}

// optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LRNParameter::has_engine() const {
  return _internal_has_engine();
}
inline void LRNParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::LRNParameter_Engine LRNParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::LRNParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.engine)
  return _internal_engine();
}
inline void LRNParameter::_internal_set_engine(::apollo::perception::inference::LRNParameter_Engine value) {
  assert(::apollo::perception::inference::LRNParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.engine_ = value;
}
inline void LRNParameter::set_engine(::apollo::perception::inference::LRNParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::_internal_has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void MemoryDataParameter::clear_batch_size() {
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t MemoryDataParameter::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.batch_size)
  return _internal_batch_size();
}
inline void MemoryDataParameter::_internal_set_batch_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.batch_size_ = value;
}
inline void MemoryDataParameter::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_channels() const {
  return _internal_has_channels();
}
inline void MemoryDataParameter::clear_channels() {
  _impl_.channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MemoryDataParameter::_internal_channels() const {
  return _impl_.channels_;
}
inline uint32_t MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.channels)
  return _internal_channels();
}
inline void MemoryDataParameter::_internal_set_channels(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channels_ = value;
}
inline void MemoryDataParameter::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_height() const {
  return _internal_has_height();
}
inline void MemoryDataParameter::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MemoryDataParameter::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.height)
  return _internal_height();
}
inline void MemoryDataParameter::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}
inline void MemoryDataParameter::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryDataParameter::has_width() const {
  return _internal_has_width();
}
inline void MemoryDataParameter::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t MemoryDataParameter::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.width)
  return _internal_width();
}
inline void MemoryDataParameter::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}
inline void MemoryDataParameter::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MultiBoxLossParameter

// optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
inline bool MultiBoxLossParameter::_internal_has_loc_loss_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_loc_loss_type() const {
  return _internal_has_loc_loss_type();
}
inline void MultiBoxLossParameter::clear_loc_loss_type() {
  _impl_.loc_loss_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::perception::inference::MultiBoxLossParameter_LocLossType MultiBoxLossParameter::_internal_loc_loss_type() const {
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType >(_impl_.loc_loss_type_);
}
inline ::apollo::perception::inference::MultiBoxLossParameter_LocLossType MultiBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.loc_loss_type)
  return _internal_loc_loss_type();
}
inline void MultiBoxLossParameter::_internal_set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_LocLossType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.loc_loss_type_ = value;
}
inline void MultiBoxLossParameter::set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value) {
  _internal_set_loc_loss_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.loc_loss_type)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
inline bool MultiBoxLossParameter::_internal_has_conf_loss_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_conf_loss_type() const {
  return _internal_has_conf_loss_type();
}
inline void MultiBoxLossParameter::clear_conf_loss_type() {
  _impl_.conf_loss_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::_internal_conf_loss_type() const {
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType >(_impl_.conf_loss_type_);
}
inline ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.conf_loss_type)
  return _internal_conf_loss_type();
}
inline void MultiBoxLossParameter::_internal_set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.conf_loss_type_ = value;
}
inline void MultiBoxLossParameter::set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value) {
  _internal_set_conf_loss_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool MultiBoxLossParameter::_internal_has_loc_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_loc_weight() const {
  return _internal_has_loc_weight();
}
inline void MultiBoxLossParameter::clear_loc_weight() {
  _impl_.loc_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float MultiBoxLossParameter::_internal_loc_weight() const {
  return _impl_.loc_weight_;
}
inline float MultiBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.loc_weight)
  return _internal_loc_weight();
}
inline void MultiBoxLossParameter::_internal_set_loc_weight(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.loc_weight_ = value;
}
inline void MultiBoxLossParameter::set_loc_weight(float value) {
  _internal_set_loc_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4;
inline bool MultiBoxLossParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void MultiBoxLossParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MultiBoxLossParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t MultiBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.num_classes)
  return _internal_num_classes();
}
inline void MultiBoxLossParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_classes_ = value;
}
inline void MultiBoxLossParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool MultiBoxLossParameter::_internal_has_share_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_share_location() const {
  return _internal_has_share_location();
}
inline void MultiBoxLossParameter::clear_share_location() {
  _impl_.share_location_ = true;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool MultiBoxLossParameter::_internal_share_location() const {
  return _impl_.share_location_;
}
inline bool MultiBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.share_location)
  return _internal_share_location();
}
inline void MultiBoxLossParameter::_internal_set_share_location(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.share_location_ = value;
}
inline void MultiBoxLossParameter::set_share_location(bool value) {
  _internal_set_share_location(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.share_location)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
inline bool MultiBoxLossParameter::_internal_has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_match_type() const {
  return _internal_has_match_type();
}
inline void MultiBoxLossParameter::clear_match_type() {
  _impl_.match_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MatchType MultiBoxLossParameter::_internal_match_type() const {
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_MatchType >(_impl_.match_type_);
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MatchType MultiBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.match_type)
  return _internal_match_type();
}
inline void MultiBoxLossParameter::_internal_set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.match_type_ = value;
}
inline void MultiBoxLossParameter::set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool MultiBoxLossParameter::_internal_has_overlap_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_overlap_threshold() const {
  return _internal_has_overlap_threshold();
}
inline void MultiBoxLossParameter::clear_overlap_threshold() {
  _impl_.overlap_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float MultiBoxLossParameter::_internal_overlap_threshold() const {
  return _impl_.overlap_threshold_;
}
inline float MultiBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.overlap_threshold)
  return _internal_overlap_threshold();
}
inline void MultiBoxLossParameter::_internal_set_overlap_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.overlap_threshold_ = value;
}
inline void MultiBoxLossParameter::set_overlap_threshold(float value) {
  _internal_set_overlap_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool MultiBoxLossParameter::_internal_has_use_prior_for_matching() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_use_prior_for_matching() const {
  return _internal_has_use_prior_for_matching();
}
inline void MultiBoxLossParameter::clear_use_prior_for_matching() {
  _impl_.use_prior_for_matching_ = true;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool MultiBoxLossParameter::_internal_use_prior_for_matching() const {
  return _impl_.use_prior_for_matching_;
}
inline bool MultiBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_matching)
  return _internal_use_prior_for_matching();
}
inline void MultiBoxLossParameter::_internal_set_use_prior_for_matching(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.use_prior_for_matching_ = value;
}
inline void MultiBoxLossParameter::set_use_prior_for_matching(bool value) {
  _internal_set_use_prior_for_matching(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool MultiBoxLossParameter::_internal_has_background_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_background_label_id() const {
  return _internal_has_background_label_id();
}
inline void MultiBoxLossParameter::clear_background_label_id() {
  _impl_.background_label_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t MultiBoxLossParameter::_internal_background_label_id() const {
  return _impl_.background_label_id_;
}
inline uint32_t MultiBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.background_label_id)
  return _internal_background_label_id();
}
inline void MultiBoxLossParameter::_internal_set_background_label_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.background_label_id_ = value;
}
inline void MultiBoxLossParameter::set_background_label_id(uint32_t value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = true];
inline bool MultiBoxLossParameter::_internal_has_use_difficult_gt() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_use_difficult_gt() const {
  return _internal_has_use_difficult_gt();
}
inline void MultiBoxLossParameter::clear_use_difficult_gt() {
  _impl_.use_difficult_gt_ = true;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool MultiBoxLossParameter::_internal_use_difficult_gt() const {
  return _impl_.use_difficult_gt_;
}
inline bool MultiBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_difficult_gt)
  return _internal_use_difficult_gt();
}
inline void MultiBoxLossParameter::_internal_set_use_difficult_gt(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.use_difficult_gt_ = value;
}
inline void MultiBoxLossParameter::set_use_difficult_gt(bool value) {
  _internal_set_use_difficult_gt(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11;
inline bool MultiBoxLossParameter::_internal_has_do_neg_mining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_do_neg_mining() const {
  return _internal_has_do_neg_mining();
}
inline void MultiBoxLossParameter::clear_do_neg_mining() {
  _impl_.do_neg_mining_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool MultiBoxLossParameter::_internal_do_neg_mining() const {
  return _impl_.do_neg_mining_;
}
inline bool MultiBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.do_neg_mining)
  return _internal_do_neg_mining();
}
inline void MultiBoxLossParameter::_internal_set_do_neg_mining(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.do_neg_mining_ = value;
}
inline void MultiBoxLossParameter::set_do_neg_mining(bool value) {
  _internal_set_do_neg_mining(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool MultiBoxLossParameter::_internal_has_neg_pos_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_neg_pos_ratio() const {
  return _internal_has_neg_pos_ratio();
}
inline void MultiBoxLossParameter::clear_neg_pos_ratio() {
  _impl_.neg_pos_ratio_ = 3;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float MultiBoxLossParameter::_internal_neg_pos_ratio() const {
  return _impl_.neg_pos_ratio_;
}
inline float MultiBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.neg_pos_ratio)
  return _internal_neg_pos_ratio();
}
inline void MultiBoxLossParameter::_internal_set_neg_pos_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.neg_pos_ratio_ = value;
}
inline void MultiBoxLossParameter::set_neg_pos_ratio(float value) {
  _internal_set_neg_pos_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool MultiBoxLossParameter::_internal_has_neg_overlap() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_neg_overlap() const {
  return _internal_has_neg_overlap();
}
inline void MultiBoxLossParameter::clear_neg_overlap() {
  _impl_.neg_overlap_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float MultiBoxLossParameter::_internal_neg_overlap() const {
  return _impl_.neg_overlap_;
}
inline float MultiBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.neg_overlap)
  return _internal_neg_overlap();
}
inline void MultiBoxLossParameter::_internal_set_neg_overlap(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.neg_overlap_ = value;
}
inline void MultiBoxLossParameter::set_neg_overlap(float value) {
  _internal_set_neg_overlap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.neg_overlap)
}

// optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
inline bool MultiBoxLossParameter::_internal_has_code_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_code_type() const {
  return _internal_has_code_type();
}
inline void MultiBoxLossParameter::clear_code_type() {
  _impl_.code_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType MultiBoxLossParameter::_internal_code_type() const {
  return static_cast< ::apollo::perception::inference::PriorBoxParameter_CodeType >(_impl_.code_type_);
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType MultiBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.code_type)
  return _internal_code_type();
}
inline void MultiBoxLossParameter::_internal_set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  assert(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.code_type_ = value;
}
inline void MultiBoxLossParameter::set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  _internal_set_code_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 16 [default = false];
inline bool MultiBoxLossParameter::_internal_has_encode_variance_in_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_encode_variance_in_target() const {
  return _internal_has_encode_variance_in_target();
}
inline void MultiBoxLossParameter::clear_encode_variance_in_target() {
  _impl_.encode_variance_in_target_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool MultiBoxLossParameter::_internal_encode_variance_in_target() const {
  return _impl_.encode_variance_in_target_;
}
inline bool MultiBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.encode_variance_in_target)
  return _internal_encode_variance_in_target();
}
inline void MultiBoxLossParameter::_internal_set_encode_variance_in_target(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.encode_variance_in_target_ = value;
}
inline void MultiBoxLossParameter::set_encode_variance_in_target(bool value) {
  _internal_set_encode_variance_in_target(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 17 [default = false];
inline bool MultiBoxLossParameter::_internal_has_map_object_to_agnostic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_map_object_to_agnostic() const {
  return _internal_has_map_object_to_agnostic();
}
inline void MultiBoxLossParameter::clear_map_object_to_agnostic() {
  _impl_.map_object_to_agnostic_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool MultiBoxLossParameter::_internal_map_object_to_agnostic() const {
  return _impl_.map_object_to_agnostic_;
}
inline bool MultiBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.map_object_to_agnostic)
  return _internal_map_object_to_agnostic();
}
inline void MultiBoxLossParameter::_internal_set_map_object_to_agnostic(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.map_object_to_agnostic_ = value;
}
inline void MultiBoxLossParameter::set_map_object_to_agnostic(bool value) {
  _internal_set_map_object_to_agnostic(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.map_object_to_agnostic)
}

// optional bool ignore_cross_boundary_bbox = 18 [default = false];
inline bool MultiBoxLossParameter::_internal_has_ignore_cross_boundary_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_ignore_cross_boundary_bbox() const {
  return _internal_has_ignore_cross_boundary_bbox();
}
inline void MultiBoxLossParameter::clear_ignore_cross_boundary_bbox() {
  _impl_.ignore_cross_boundary_bbox_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool MultiBoxLossParameter::_internal_ignore_cross_boundary_bbox() const {
  return _impl_.ignore_cross_boundary_bbox_;
}
inline bool MultiBoxLossParameter::ignore_cross_boundary_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.ignore_cross_boundary_bbox)
  return _internal_ignore_cross_boundary_bbox();
}
inline void MultiBoxLossParameter::_internal_set_ignore_cross_boundary_bbox(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ignore_cross_boundary_bbox_ = value;
}
inline void MultiBoxLossParameter::set_ignore_cross_boundary_bbox(bool value) {
  _internal_set_ignore_cross_boundary_bbox(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.ignore_cross_boundary_bbox)
}

// optional bool bp_inside = 19 [default = false];
inline bool MultiBoxLossParameter::_internal_has_bp_inside() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_bp_inside() const {
  return _internal_has_bp_inside();
}
inline void MultiBoxLossParameter::clear_bp_inside() {
  _impl_.bp_inside_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool MultiBoxLossParameter::_internal_bp_inside() const {
  return _impl_.bp_inside_;
}
inline bool MultiBoxLossParameter::bp_inside() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.bp_inside)
  return _internal_bp_inside();
}
inline void MultiBoxLossParameter::_internal_set_bp_inside(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bp_inside_ = value;
}
inline void MultiBoxLossParameter::set_bp_inside(bool value) {
  _internal_set_bp_inside(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.bp_inside)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
inline bool MultiBoxLossParameter::_internal_has_mining_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_mining_type() const {
  return _internal_has_mining_type();
}
inline void MultiBoxLossParameter::clear_mining_type() {
  _impl_.mining_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MiningType MultiBoxLossParameter::_internal_mining_type() const {
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_MiningType >(_impl_.mining_type_);
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MiningType MultiBoxLossParameter::mining_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.mining_type)
  return _internal_mining_type();
}
inline void MultiBoxLossParameter::_internal_set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_MiningType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.mining_type_ = value;
}
inline void MultiBoxLossParameter::set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value) {
  _internal_set_mining_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.mining_type)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
inline bool MultiBoxLossParameter::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool MultiBoxLossParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void MultiBoxLossParameter::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& MultiBoxLossParameter::_internal_nms_param() const {
  const ::apollo::perception::inference::NonMaximumSuppressionParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NonMaximumSuppressionParameter&>(
      ::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& MultiBoxLossParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.nms_param)
  return _internal_nms_param();
}
inline void MultiBoxLossParameter::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.MultiBoxLossParameter.nms_param)
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.MultiBoxLossParameter.nms_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NonMaximumSuppressionParameter>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::mutable_nms_param() {
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.MultiBoxLossParameter.nms_param)
  return _msg;
}
inline void MultiBoxLossParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.MultiBoxLossParameter.nms_param)
}

// optional int32 sample_size = 22 [default = 64];
inline bool MultiBoxLossParameter::_internal_has_sample_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_sample_size() const {
  return _internal_has_sample_size();
}
inline void MultiBoxLossParameter::clear_sample_size() {
  _impl_.sample_size_ = 64;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t MultiBoxLossParameter::_internal_sample_size() const {
  return _impl_.sample_size_;
}
inline int32_t MultiBoxLossParameter::sample_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.sample_size)
  return _internal_sample_size();
}
inline void MultiBoxLossParameter::_internal_set_sample_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.sample_size_ = value;
}
inline void MultiBoxLossParameter::set_sample_size(int32_t value) {
  _internal_set_sample_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.sample_size)
}

// optional bool use_prior_for_nms = 23 [default = false];
inline bool MultiBoxLossParameter::_internal_has_use_prior_for_nms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MultiBoxLossParameter::has_use_prior_for_nms() const {
  return _internal_has_use_prior_for_nms();
}
inline void MultiBoxLossParameter::clear_use_prior_for_nms() {
  _impl_.use_prior_for_nms_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool MultiBoxLossParameter::_internal_use_prior_for_nms() const {
  return _impl_.use_prior_for_nms_;
}
inline bool MultiBoxLossParameter::use_prior_for_nms() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_nms)
  return _internal_use_prior_for_nms();
}
inline void MultiBoxLossParameter::_internal_set_use_prior_for_nms(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.use_prior_for_nms_ = value;
}
inline void MultiBoxLossParameter::set_use_prior_for_nms(bool value) {
  _internal_set_use_prior_for_nms(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_nms)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::_internal_has_normalize_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MVNParameter::has_normalize_variance() const {
  return _internal_has_normalize_variance();
}
inline void MVNParameter::clear_normalize_variance() {
  _impl_.normalize_variance_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool MVNParameter::_internal_normalize_variance() const {
  return _impl_.normalize_variance_;
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.normalize_variance)
  return _internal_normalize_variance();
}
inline void MVNParameter::_internal_set_normalize_variance(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.normalize_variance_ = value;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  _internal_set_normalize_variance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::_internal_has_across_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MVNParameter::has_across_channels() const {
  return _internal_has_across_channels();
}
inline void MVNParameter::clear_across_channels() {
  _impl_.across_channels_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool MVNParameter::_internal_across_channels() const {
  return _impl_.across_channels_;
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.across_channels)
  return _internal_across_channels();
}
inline void MVNParameter::_internal_set_across_channels(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.across_channels_ = value;
}
inline void MVNParameter::set_across_channels(bool value) {
  _internal_set_across_channels(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::_internal_has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MVNParameter::has_eps() const {
  return _internal_has_eps();
}
inline void MVNParameter::clear_eps() {
  _impl_.eps_ = 1e-09f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float MVNParameter::_internal_eps() const {
  return _impl_.eps_;
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.eps)
  return _internal_eps();
}
inline void MVNParameter::_internal_set_eps(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eps_ = value;
}
inline void MVNParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.eps)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeParameter::_internal_has_across_spatial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizeParameter::has_across_spatial() const {
  return _internal_has_across_spatial();
}
inline void NormalizeParameter::clear_across_spatial() {
  _impl_.across_spatial_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NormalizeParameter::_internal_across_spatial() const {
  return _impl_.across_spatial_;
}
inline bool NormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.across_spatial)
  return _internal_across_spatial();
}
inline void NormalizeParameter::_internal_set_across_spatial(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.across_spatial_ = value;
}
inline void NormalizeParameter::set_across_spatial(bool value) {
  _internal_set_across_spatial(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.across_spatial)
}

// optional .apollo.perception.inference.FillerParameter scale_filler = 2;
inline bool NormalizeParameter::_internal_has_scale_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_filler_ != nullptr);
  return value;
}
inline bool NormalizeParameter::has_scale_filler() const {
  return _internal_has_scale_filler();
}
inline void NormalizeParameter::clear_scale_filler() {
  if (_impl_.scale_filler_ != nullptr) _impl_.scale_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& NormalizeParameter::_internal_scale_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.scale_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& NormalizeParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.scale_filler)
  return _internal_scale_filler();
}
inline void NormalizeParameter::unsafe_arena_set_allocated_scale_filler(
    ::apollo::perception::inference::FillerParameter* scale_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_filler_);
  }
  _impl_.scale_filler_ = scale_filler;
  if (scale_filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.NormalizeParameter.scale_filler)
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::release_scale_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.scale_filler_;
  _impl_.scale_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::unsafe_arena_release_scale_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.NormalizeParameter.scale_filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.scale_filler_;
  _impl_.scale_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::_internal_mutable_scale_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scale_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.scale_filler_ = p;
  }
  return _impl_.scale_filler_;
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::mutable_scale_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_scale_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NormalizeParameter.scale_filler)
  return _msg;
}
inline void NormalizeParameter::set_allocated_scale_filler(::apollo::perception::inference::FillerParameter* scale_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_filler_;
  }
  if (scale_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_filler);
    if (message_arena != submessage_arena) {
      scale_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scale_filler_ = scale_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NormalizeParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeParameter::_internal_has_channel_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizeParameter::has_channel_shared() const {
  return _internal_has_channel_shared();
}
inline void NormalizeParameter::clear_channel_shared() {
  _impl_.channel_shared_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NormalizeParameter::_internal_channel_shared() const {
  return _impl_.channel_shared_;
}
inline bool NormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.channel_shared)
  return _internal_channel_shared();
}
inline void NormalizeParameter::_internal_set_channel_shared(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_shared_ = value;
}
inline void NormalizeParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.channel_shared)
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeParameter::_internal_has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizeParameter::has_eps() const {
  return _internal_has_eps();
}
inline void NormalizeParameter::clear_eps() {
  _impl_.eps_ = 1e-10f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float NormalizeParameter::_internal_eps() const {
  return _impl_.eps_;
}
inline float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.eps)
  return _internal_eps();
}
inline void NormalizeParameter::_internal_set_eps(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.eps_ = value;
}
inline void NormalizeParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.eps)
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .apollo.perception.inference.BlobShape shape = 1;
inline bool ParameterParameter::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline bool ParameterParameter::has_shape() const {
  return _internal_has_shape();
}
inline void ParameterParameter::clear_shape() {
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::BlobShape& ParameterParameter::_internal_shape() const {
  const ::apollo::perception::inference::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BlobShape&>(
      ::apollo::perception::inference::_BlobShape_default_instance_);
}
inline const ::apollo::perception::inference::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParameterParameter.shape)
  return _internal_shape();
}
inline void ParameterParameter::unsafe_arena_set_allocated_shape(
    ::apollo::perception::inference::BlobShape* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = shape;
  if (shape) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ParameterParameter.shape)
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::release_shape() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ParameterParameter.shape)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::_internal_mutable_shape() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BlobShape>(GetArenaForAllocation());
    _impl_.shape_ = p;
  }
  return _impl_.shape_;
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::mutable_shape() {
  ::apollo::perception::inference::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ParameterParameter.shape)
  return _msg;
}
inline void ParameterParameter::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ParameterParameter.shape)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::_internal_order_size() const {
  return _impl_.order_.size();
}
inline int PermuteParameter::order_size() const {
  return _internal_order_size();
}
inline void PermuteParameter::clear_order() {
  _impl_.order_.Clear();
}
inline uint32_t PermuteParameter::_internal_order(int index) const {
  return _impl_.order_.Get(index);
}
inline uint32_t PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PermuteParameter.order)
  return _internal_order(index);
}
inline void PermuteParameter::set_order(int index, uint32_t value) {
  _impl_.order_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PermuteParameter.order)
}
inline void PermuteParameter::_internal_add_order(uint32_t value) {
  _impl_.order_.Add(value);
}
inline void PermuteParameter::add_order(uint32_t value) {
  _internal_add_order(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PermuteParameter.order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PermuteParameter::_internal_order() const {
  return _impl_.order_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PermuteParameter.order)
  return _internal_order();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PermuteParameter::_internal_mutable_order() {
  return &_impl_.order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PermuteParameter.order)
  return _internal_mutable_order();
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::_internal_has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolingParameter::has_pool() const {
  return _internal_has_pool();
}
inline void PoolingParameter::clear_pool() {
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::PoolingParameter_PoolMethod PoolingParameter::_internal_pool() const {
  return static_cast< ::apollo::perception::inference::PoolingParameter_PoolMethod >(_impl_.pool_);
}
inline ::apollo::perception::inference::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pool)
  return _internal_pool();
}
inline void PoolingParameter::_internal_set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value) {
  assert(::apollo::perception::inference::PoolingParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pool_ = value;
}
inline void PoolingParameter::set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::_internal_has_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad() const {
  return _internal_has_pad();
}
inline void PoolingParameter::clear_pad() {
  _impl_.pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PoolingParameter::_internal_pad() const {
  return _impl_.pad_;
}
inline uint32_t PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad)
  return _internal_pad();
}
inline void PoolingParameter::_internal_set_pad(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pad_ = value;
}
inline void PoolingParameter::set_pad(uint32_t value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::_internal_has_pad_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad_h() const {
  return _internal_has_pad_h();
}
inline void PoolingParameter::clear_pad_h() {
  _impl_.pad_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PoolingParameter::_internal_pad_h() const {
  return _impl_.pad_h_;
}
inline uint32_t PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad_h)
  return _internal_pad_h();
}
inline void PoolingParameter::_internal_set_pad_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pad_h_ = value;
}
inline void PoolingParameter::set_pad_h(uint32_t value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::_internal_has_pad_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PoolingParameter::has_pad_w() const {
  return _internal_has_pad_w();
}
inline void PoolingParameter::clear_pad_w() {
  _impl_.pad_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t PoolingParameter::_internal_pad_w() const {
  return _impl_.pad_w_;
}
inline uint32_t PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad_w)
  return _internal_pad_w();
}
inline void PoolingParameter::_internal_set_pad_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pad_w_ = value;
}
inline void PoolingParameter::set_pad_w(uint32_t value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::_internal_has_kernel_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void PoolingParameter::clear_kernel_size() {
  _impl_.kernel_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PoolingParameter::_internal_kernel_size() const {
  return _impl_.kernel_size_;
}
inline uint32_t PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_size)
  return _internal_kernel_size();
}
inline void PoolingParameter::_internal_set_kernel_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kernel_size_ = value;
}
inline void PoolingParameter::set_kernel_size(uint32_t value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::_internal_has_kernel_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_h() const {
  return _internal_has_kernel_h();
}
inline void PoolingParameter::clear_kernel_h() {
  _impl_.kernel_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PoolingParameter::_internal_kernel_h() const {
  return _impl_.kernel_h_;
}
inline uint32_t PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_h)
  return _internal_kernel_h();
}
inline void PoolingParameter::_internal_set_kernel_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kernel_h_ = value;
}
inline void PoolingParameter::set_kernel_h(uint32_t value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::_internal_has_kernel_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PoolingParameter::has_kernel_w() const {
  return _internal_has_kernel_w();
}
inline void PoolingParameter::clear_kernel_w() {
  _impl_.kernel_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PoolingParameter::_internal_kernel_w() const {
  return _impl_.kernel_w_;
}
inline uint32_t PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_w)
  return _internal_kernel_w();
}
inline void PoolingParameter::_internal_set_kernel_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.kernel_w_ = value;
}
inline void PoolingParameter::set_kernel_w(uint32_t value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::_internal_has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride() const {
  return _internal_has_stride();
}
inline void PoolingParameter::clear_stride() {
  _impl_.stride_ = 1u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t PoolingParameter::_internal_stride() const {
  return _impl_.stride_;
}
inline uint32_t PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride)
  return _internal_stride();
}
inline void PoolingParameter::_internal_set_stride(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.stride_ = value;
}
inline void PoolingParameter::set_stride(uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::_internal_has_stride_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride_h() const {
  return _internal_has_stride_h();
}
inline void PoolingParameter::clear_stride_h() {
  _impl_.stride_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PoolingParameter::_internal_stride_h() const {
  return _impl_.stride_h_;
}
inline uint32_t PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride_h)
  return _internal_stride_h();
}
inline void PoolingParameter::_internal_set_stride_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stride_h_ = value;
}
inline void PoolingParameter::set_stride_h(uint32_t value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::_internal_has_stride_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PoolingParameter::has_stride_w() const {
  return _internal_has_stride_w();
}
inline void PoolingParameter::clear_stride_w() {
  _impl_.stride_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PoolingParameter::_internal_stride_w() const {
  return _impl_.stride_w_;
}
inline uint32_t PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride_w)
  return _internal_stride_w();
}
inline void PoolingParameter::_internal_set_stride_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.stride_w_ = value;
}
inline void PoolingParameter::set_stride_w(uint32_t value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride_w)
}

// optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PoolingParameter::has_engine() const {
  return _internal_has_engine();
}
inline void PoolingParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::perception::inference::PoolingParameter_Engine PoolingParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::PoolingParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.engine)
  return _internal_engine();
}
inline void PoolingParameter::_internal_set_engine(::apollo::perception::inference::PoolingParameter_Engine value) {
  assert(::apollo::perception::inference::PoolingParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.engine_ = value;
}
inline void PoolingParameter::set_engine(::apollo::perception::inference::PoolingParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::_internal_has_global_pooling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PoolingParameter::has_global_pooling() const {
  return _internal_has_global_pooling();
}
inline void PoolingParameter::clear_global_pooling() {
  _impl_.global_pooling_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool PoolingParameter::_internal_global_pooling() const {
  return _impl_.global_pooling_;
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.global_pooling)
  return _internal_global_pooling();
}
inline void PoolingParameter::_internal_set_global_pooling(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.global_pooling_ = value;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  _internal_set_global_pooling(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.global_pooling)
}

// optional .apollo.perception.inference.PoolingParameter.RoundMode round_mode = 13 [default = CEIL];
inline bool PoolingParameter::_internal_has_round_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PoolingParameter::has_round_mode() const {
  return _internal_has_round_mode();
}
inline void PoolingParameter::clear_round_mode() {
  _impl_.round_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::perception::inference::PoolingParameter_RoundMode PoolingParameter::_internal_round_mode() const {
  return static_cast< ::apollo::perception::inference::PoolingParameter_RoundMode >(_impl_.round_mode_);
}
inline ::apollo::perception::inference::PoolingParameter_RoundMode PoolingParameter::round_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.round_mode)
  return _internal_round_mode();
}
inline void PoolingParameter::_internal_set_round_mode(::apollo::perception::inference::PoolingParameter_RoundMode value) {
  assert(::apollo::perception::inference::PoolingParameter_RoundMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.round_mode_ = value;
}
inline void PoolingParameter::set_round_mode(::apollo::perception::inference::PoolingParameter_RoundMode value) {
  _internal_set_round_mode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.round_mode)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::_internal_has_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PowerParameter::has_power() const {
  return _internal_has_power();
}
inline void PowerParameter::clear_power() {
  _impl_.power_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PowerParameter::_internal_power() const {
  return _impl_.power_;
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.power)
  return _internal_power();
}
inline void PowerParameter::_internal_set_power(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.power_ = value;
}
inline void PowerParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PowerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void PowerParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PowerParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.scale)
  return _internal_scale();
}
inline void PowerParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}
inline void PowerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::_internal_has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerParameter::has_shift() const {
  return _internal_has_shift();
}
inline void PowerParameter::clear_shift() {
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PowerParameter::_internal_shift() const {
  return _impl_.shift_;
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.shift)
  return _internal_shift();
}
inline void PowerParameter::_internal_set_shift(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}
inline void PowerParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::_internal_min_size_size() const {
  return _impl_.min_size_.size();
}
inline int PriorBoxParameter::min_size_size() const {
  return _internal_min_size_size();
}
inline void PriorBoxParameter::clear_min_size() {
  _impl_.min_size_.Clear();
}
inline float PriorBoxParameter::_internal_min_size(int index) const {
  return _impl_.min_size_.Get(index);
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.min_size)
  return _internal_min_size(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  _impl_.min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::_internal_add_min_size(float value) {
  _impl_.min_size_.Add(value);
}
inline void PriorBoxParameter::add_min_size(float value) {
  _internal_add_min_size(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.min_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_min_size() const {
  return _impl_.min_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.min_size)
  return _internal_min_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_min_size() {
  return &_impl_.min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.min_size)
  return _internal_mutable_min_size();
}

// repeated float max_size = 2;
inline int PriorBoxParameter::_internal_max_size_size() const {
  return _impl_.max_size_.size();
}
inline int PriorBoxParameter::max_size_size() const {
  return _internal_max_size_size();
}
inline void PriorBoxParameter::clear_max_size() {
  _impl_.max_size_.Clear();
}
inline float PriorBoxParameter::_internal_max_size(int index) const {
  return _impl_.max_size_.Get(index);
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.max_size)
  return _internal_max_size(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  _impl_.max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::_internal_add_max_size(float value) {
  _impl_.max_size_.Add(value);
}
inline void PriorBoxParameter::add_max_size(float value) {
  _internal_add_max_size(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.max_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_max_size() const {
  return _impl_.max_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.max_size)
  return _internal_max_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_max_size() {
  return &_impl_.max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.max_size)
  return _internal_mutable_max_size();
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::_internal_aspect_ratio_size() const {
  return _impl_.aspect_ratio_.size();
}
inline int PriorBoxParameter::aspect_ratio_size() const {
  return _internal_aspect_ratio_size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  _impl_.aspect_ratio_.Clear();
}
inline float PriorBoxParameter::_internal_aspect_ratio(int index) const {
  return _impl_.aspect_ratio_.Get(index);
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  _impl_.aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::_internal_add_aspect_ratio(float value) {
  _impl_.aspect_ratio_.Add(value);
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  _internal_add_aspect_ratio(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_aspect_ratio() const {
  return _impl_.aspect_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_aspect_ratio() {
  return &_impl_.aspect_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return _internal_mutable_aspect_ratio();
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::_internal_has_flip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_flip() const {
  return _internal_has_flip();
}
inline void PriorBoxParameter::clear_flip() {
  _impl_.flip_ = true;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool PriorBoxParameter::_internal_flip() const {
  return _impl_.flip_;
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.flip)
  return _internal_flip();
}
inline void PriorBoxParameter::_internal_set_flip(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.flip_ = value;
}
inline void PriorBoxParameter::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::_internal_has_clip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_clip() const {
  return _internal_has_clip();
}
inline void PriorBoxParameter::clear_clip() {
  _impl_.clip_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PriorBoxParameter::_internal_clip() const {
  return _impl_.clip_;
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.clip)
  return _internal_clip();
}
inline void PriorBoxParameter::_internal_set_clip(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clip_ = value;
}
inline void PriorBoxParameter::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::_internal_variance_size() const {
  return _impl_.variance_.size();
}
inline int PriorBoxParameter::variance_size() const {
  return _internal_variance_size();
}
inline void PriorBoxParameter::clear_variance() {
  _impl_.variance_.Clear();
}
inline float PriorBoxParameter::_internal_variance(int index) const {
  return _impl_.variance_.Get(index);
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.variance)
  return _internal_variance(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  _impl_.variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::_internal_add_variance(float value) {
  _impl_.variance_.Add(value);
}
inline void PriorBoxParameter::add_variance(float value) {
  _internal_add_variance(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.variance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_variance() const {
  return _impl_.variance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.variance)
  return _internal_variance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_variance() {
  return &_impl_.variance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.variance)
  return _internal_mutable_variance();
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::_internal_has_img_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_size() const {
  return _internal_has_img_size();
}
inline void PriorBoxParameter::clear_img_size() {
  _impl_.img_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PriorBoxParameter::_internal_img_size() const {
  return _impl_.img_size_;
}
inline uint32_t PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_size)
  return _internal_img_size();
}
inline void PriorBoxParameter::_internal_set_img_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.img_size_ = value;
}
inline void PriorBoxParameter::set_img_size(uint32_t value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_size)
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::_internal_has_img_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_h() const {
  return _internal_has_img_h();
}
inline void PriorBoxParameter::clear_img_h() {
  _impl_.img_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PriorBoxParameter::_internal_img_h() const {
  return _impl_.img_h_;
}
inline uint32_t PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_h)
  return _internal_img_h();
}
inline void PriorBoxParameter::_internal_set_img_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.img_h_ = value;
}
inline void PriorBoxParameter::set_img_h(uint32_t value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_h)
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::_internal_has_img_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_w() const {
  return _internal_has_img_w();
}
inline void PriorBoxParameter::clear_img_w() {
  _impl_.img_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PriorBoxParameter::_internal_img_w() const {
  return _impl_.img_w_;
}
inline uint32_t PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_w)
  return _internal_img_w();
}
inline void PriorBoxParameter::_internal_set_img_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.img_w_ = value;
}
inline void PriorBoxParameter::set_img_w(uint32_t value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_w)
}

// optional float step = 10;
inline bool PriorBoxParameter::_internal_has_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step() const {
  return _internal_has_step();
}
inline void PriorBoxParameter::clear_step() {
  _impl_.step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PriorBoxParameter::_internal_step() const {
  return _impl_.step_;
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step)
  return _internal_step();
}
inline void PriorBoxParameter::_internal_set_step(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.step_ = value;
}
inline void PriorBoxParameter::set_step(float value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step)
}

// optional float step_h = 11;
inline bool PriorBoxParameter::_internal_has_step_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_h() const {
  return _internal_has_step_h();
}
inline void PriorBoxParameter::clear_step_h() {
  _impl_.step_h_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float PriorBoxParameter::_internal_step_h() const {
  return _impl_.step_h_;
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step_h)
  return _internal_step_h();
}
inline void PriorBoxParameter::_internal_set_step_h(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.step_h_ = value;
}
inline void PriorBoxParameter::set_step_h(float value) {
  _internal_set_step_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step_h)
}

// optional float step_w = 12;
inline bool PriorBoxParameter::_internal_has_step_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_w() const {
  return _internal_has_step_w();
}
inline void PriorBoxParameter::clear_step_w() {
  _impl_.step_w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float PriorBoxParameter::_internal_step_w() const {
  return _impl_.step_w_;
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step_w)
  return _internal_step_w();
}
inline void PriorBoxParameter::_internal_set_step_w(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.step_w_ = value;
}
inline void PriorBoxParameter::set_step_w(float value) {
  _internal_set_step_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_offset() const {
  return _internal_has_offset();
}
inline void PriorBoxParameter::clear_offset() {
  _impl_.offset_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float PriorBoxParameter::_internal_offset() const {
  return _impl_.offset_;
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.offset)
  return _internal_offset();
}
inline void PriorBoxParameter::_internal_set_offset(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.offset_ = value;
}
inline void PriorBoxParameter::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.offset)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::_internal_has_module() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PythonParameter::has_module() const {
  return _internal_has_module();
}
inline void PythonParameter::clear_module() {
  _impl_.module_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.module)
  return _internal_module();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_module(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.module_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.module)
}
inline std::string* PythonParameter::mutable_module() {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.module)
  return _s;
}
inline const std::string& PythonParameter::_internal_module() const {
  return _impl_.module_.Get();
}
inline void PythonParameter::_internal_set_module(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.module_.Set(value, GetArenaForAllocation());
}
inline std::string* PythonParameter::_internal_mutable_module() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.module_.Mutable(GetArenaForAllocation());
}
inline std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.PythonParameter.module)
  if (!_internal_has_module()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.module_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_.IsDefault()) {
    _impl_.module_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PythonParameter::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.module_.SetAllocated(module, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_.IsDefault()) {
    _impl_.module_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::_internal_has_layer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PythonParameter::has_layer() const {
  return _internal_has_layer();
}
inline void PythonParameter::clear_layer() {
  _impl_.layer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.layer)
  return _internal_layer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_layer(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.layer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.layer)
}
inline std::string* PythonParameter::mutable_layer() {
  std::string* _s = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.layer)
  return _s;
}
inline const std::string& PythonParameter::_internal_layer() const {
  return _impl_.layer_.Get();
}
inline void PythonParameter::_internal_set_layer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layer_.Set(value, GetArenaForAllocation());
}
inline std::string* PythonParameter::_internal_mutable_layer() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.layer_.Mutable(GetArenaForAllocation());
}
inline std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.PythonParameter.layer)
  if (!_internal_has_layer()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.layer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.layer_.IsDefault()) {
    _impl_.layer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PythonParameter::set_allocated_layer(std::string* layer) {
  if (layer != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.layer_.SetAllocated(layer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.layer_.IsDefault()) {
    _impl_.layer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::_internal_has_param_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PythonParameter::has_param_str() const {
  return _internal_has_param_str();
}
inline void PythonParameter::clear_param_str() {
  _impl_.param_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.param_str)
  return _internal_param_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PythonParameter::set_param_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.param_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.param_str)
}
inline std::string* PythonParameter::mutable_param_str() {
  std::string* _s = _internal_mutable_param_str();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.param_str)
  return _s;
}
inline const std::string& PythonParameter::_internal_param_str() const {
  return _impl_.param_str_.Get();
}
inline void PythonParameter::_internal_set_param_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_str_.Set(value, GetArenaForAllocation());
}
inline std::string* PythonParameter::_internal_mutable_param_str() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.param_str_.Mutable(GetArenaForAllocation());
}
inline std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.PythonParameter.param_str)
  if (!_internal_has_param_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.param_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_str_.IsDefault()) {
    _impl_.param_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PythonParameter::set_allocated_param_str(std::string* param_str) {
  if (param_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.param_str_.SetAllocated(param_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_str_.IsDefault()) {
    _impl_.param_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::_internal_has_share_in_parallel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PythonParameter::has_share_in_parallel() const {
  return _internal_has_share_in_parallel();
}
inline void PythonParameter::clear_share_in_parallel() {
  _impl_.share_in_parallel_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PythonParameter::_internal_share_in_parallel() const {
  return _impl_.share_in_parallel_;
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.share_in_parallel)
  return _internal_share_in_parallel();
}
inline void PythonParameter::_internal_set_share_in_parallel(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.share_in_parallel_ = value;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  _internal_set_share_in_parallel(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecurrentParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void RecurrentParameter::clear_num_output() {
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RecurrentParameter::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.num_output)
  return _internal_num_output();
}
inline void RecurrentParameter::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}
inline void RecurrentParameter::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.num_output)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::_internal_has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline bool RecurrentParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void RecurrentParameter::clear_weight_filler() {
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::_internal_weight_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.weight_filler)
  return _internal_weight_filler();
}
inline void RecurrentParameter::unsafe_arena_set_allocated_weight_filler(
    ::apollo::perception::inference::FillerParameter* weight_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = weight_filler;
  if (weight_filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.RecurrentParameter.weight_filler)
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::release_weight_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RecurrentParameter.weight_filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::_internal_mutable_weight_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.weight_filler_ = p;
  }
  return _impl_.weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RecurrentParameter.weight_filler)
  return _msg;
}
inline void RecurrentParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RecurrentParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool RecurrentParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void RecurrentParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.bias_filler)
  return _internal_bias_filler();
}
inline void RecurrentParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.RecurrentParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RecurrentParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RecurrentParameter.bias_filler)
  return _msg;
}
inline void RecurrentParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::_internal_has_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecurrentParameter::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void RecurrentParameter::clear_debug_info() {
  _impl_.debug_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool RecurrentParameter::_internal_debug_info() const {
  return _impl_.debug_info_;
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.debug_info)
  return _internal_debug_info();
}
inline void RecurrentParameter::_internal_set_debug_info(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_ = value;
}
inline void RecurrentParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::_internal_has_expose_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecurrentParameter::has_expose_hidden() const {
  return _internal_has_expose_hidden();
}
inline void RecurrentParameter::clear_expose_hidden() {
  _impl_.expose_hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RecurrentParameter::_internal_expose_hidden() const {
  return _impl_.expose_hidden_;
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.expose_hidden)
  return _internal_expose_hidden();
}
inline void RecurrentParameter::_internal_set_expose_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.expose_hidden_ = value;
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  _internal_set_expose_hidden(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.expose_hidden)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReductionParameter::has_operation() const {
  return _internal_has_operation();
}
inline void ReductionParameter::clear_operation() {
  _impl_.operation_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::ReductionParameter_ReductionOp ReductionParameter::_internal_operation() const {
  return static_cast< ::apollo::perception::inference::ReductionParameter_ReductionOp >(_impl_.operation_);
}
inline ::apollo::perception::inference::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.operation)
  return _internal_operation();
}
inline void ReductionParameter::_internal_set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value) {
  assert(::apollo::perception::inference::ReductionParameter_ReductionOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operation_ = value;
}
inline void ReductionParameter::set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReductionParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ReductionParameter::clear_axis() {
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ReductionParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.axis)
  return _internal_axis();
}
inline void ReductionParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}
inline void ReductionParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::_internal_has_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReductionParameter::has_coeff() const {
  return _internal_has_coeff();
}
inline void ReductionParameter::clear_coeff() {
  _impl_.coeff_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ReductionParameter::_internal_coeff() const {
  return _impl_.coeff_;
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.coeff)
  return _internal_coeff();
}
inline void ReductionParameter::_internal_set_coeff(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.coeff_ = value;
}
inline void ReductionParameter::set_coeff(float value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::_internal_has_negative_slope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReLUParameter::has_negative_slope() const {
  return _internal_has_negative_slope();
}
inline void ReLUParameter::clear_negative_slope() {
  _impl_.negative_slope_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ReLUParameter::_internal_negative_slope() const {
  return _impl_.negative_slope_;
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReLUParameter.negative_slope)
  return _internal_negative_slope();
}
inline void ReLUParameter::_internal_set_negative_slope(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.negative_slope_ = value;
}
inline void ReLUParameter::set_negative_slope(float value) {
  _internal_set_negative_slope(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReLUParameter.negative_slope)
}

// optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReLUParameter::has_engine() const {
  return _internal_has_engine();
}
inline void ReLUParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::ReLUParameter_Engine ReLUParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::ReLUParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReLUParameter.engine)
  return _internal_engine();
}
inline void ReLUParameter::_internal_set_engine(::apollo::perception::inference::ReLUParameter_Engine value) {
  assert(::apollo::perception::inference::ReLUParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.engine_ = value;
}
inline void ReLUParameter::set_engine(::apollo::perception::inference::ReLUParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .apollo.perception.inference.BlobShape shape = 1;
inline bool ReshapeParameter::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline bool ReshapeParameter::has_shape() const {
  return _internal_has_shape();
}
inline void ReshapeParameter::clear_shape() {
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::BlobShape& ReshapeParameter::_internal_shape() const {
  const ::apollo::perception::inference::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::BlobShape&>(
      ::apollo::perception::inference::_BlobShape_default_instance_);
}
inline const ::apollo::perception::inference::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.shape)
  return _internal_shape();
}
inline void ReshapeParameter::unsafe_arena_set_allocated_shape(
    ::apollo::perception::inference::BlobShape* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = shape;
  if (shape) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ReshapeParameter.shape)
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::release_shape() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ReshapeParameter.shape)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::_internal_mutable_shape() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::BlobShape>(GetArenaForAllocation());
    _impl_.shape_ = p;
  }
  return _impl_.shape_;
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::mutable_shape() {
  ::apollo::perception::inference::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ReshapeParameter.shape)
  return _msg;
}
inline void ReshapeParameter::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReshapeParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ReshapeParameter::clear_axis() {
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ReshapeParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.axis)
  return _internal_axis();
}
inline void ReshapeParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void ReshapeParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::_internal_has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReshapeParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void ReshapeParameter::clear_num_axes() {
  _impl_.num_axes_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ReshapeParameter::_internal_num_axes() const {
  return _impl_.num_axes_;
}
inline int32_t ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.num_axes)
  return _internal_num_axes();
}
inline void ReshapeParameter::_internal_set_num_axes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_axes_ = value;
}
inline void ReshapeParameter::set_num_axes(int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::_internal_has_pooled_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_pooled_h() const {
  return _internal_has_pooled_h();
}
inline void ROIPoolingParameter::clear_pooled_h() {
  _impl_.pooled_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ROIPoolingParameter::_internal_pooled_h() const {
  return _impl_.pooled_h_;
}
inline uint32_t ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.pooled_h)
  return _internal_pooled_h();
}
inline void ROIPoolingParameter::_internal_set_pooled_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pooled_h_ = value;
}
inline void ROIPoolingParameter::set_pooled_h(uint32_t value) {
  _internal_set_pooled_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::_internal_has_pooled_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_pooled_w() const {
  return _internal_has_pooled_w();
}
inline void ROIPoolingParameter::clear_pooled_w() {
  _impl_.pooled_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ROIPoolingParameter::_internal_pooled_w() const {
  return _impl_.pooled_w_;
}
inline uint32_t ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.pooled_w)
  return _internal_pooled_w();
}
inline void ROIPoolingParameter::_internal_set_pooled_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pooled_w_ = value;
}
inline void ROIPoolingParameter::set_pooled_w(uint32_t value) {
  _internal_set_pooled_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::_internal_has_spatial_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return _internal_has_spatial_scale();
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  _impl_.spatial_scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ROIPoolingParameter::_internal_spatial_scale() const {
  return _impl_.spatial_scale_;
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.spatial_scale)
  return _internal_spatial_scale();
}
inline void ROIPoolingParameter::_internal_set_spatial_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.spatial_scale_ = value;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  _internal_set_spatial_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.spatial_scale)
}

// optional bool use_floor = 10 [default = false];
inline bool ROIPoolingParameter::_internal_has_use_floor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIPoolingParameter::has_use_floor() const {
  return _internal_has_use_floor();
}
inline void ROIPoolingParameter::clear_use_floor() {
  _impl_.use_floor_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ROIPoolingParameter::_internal_use_floor() const {
  return _impl_.use_floor_;
}
inline bool ROIPoolingParameter::use_floor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.use_floor)
  return _internal_use_floor();
}
inline void ROIPoolingParameter::_internal_set_use_floor(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.use_floor_ = value;
}
inline void ROIPoolingParameter::set_use_floor(bool value) {
  _internal_set_use_floor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.use_floor)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScaleParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ScaleParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ScaleParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.axis)
  return _internal_axis();
}
inline void ScaleParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.axis_ = value;
}
inline void ScaleParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::_internal_has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScaleParameter::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void ScaleParameter::clear_num_axes() {
  _impl_.num_axes_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ScaleParameter::_internal_num_axes() const {
  return _impl_.num_axes_;
}
inline int32_t ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.num_axes)
  return _internal_num_axes();
}
inline void ScaleParameter::_internal_set_num_axes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_axes_ = value;
}
inline void ScaleParameter::set_num_axes(int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.num_axes)
}

// optional .apollo.perception.inference.FillerParameter filler = 3;
inline bool ScaleParameter::_internal_has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline bool ScaleParameter::has_filler() const {
  return _internal_has_filler();
}
inline void ScaleParameter::clear_filler() {
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::_internal_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.filler)
  return _internal_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_filler(
    ::apollo::perception::inference::FillerParameter* filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = filler;
  if (filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ScaleParameter.filler)
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::release_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ScaleParameter.filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::_internal_mutable_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.filler_ = p;
  }
  return _impl_.filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::mutable_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ScaleParameter.filler)
  return _msg;
}
inline void ScaleParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::_internal_has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScaleParameter::has_bias_term() const {
  return _internal_has_bias_term();
}
inline void ScaleParameter::clear_bias_term() {
  _impl_.bias_term_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ScaleParameter::_internal_bias_term() const {
  return _impl_.bias_term_;
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.bias_term)
  return _internal_bias_term();
}
inline void ScaleParameter::_internal_set_bias_term(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bias_term_ = value;
}
inline void ScaleParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 5;
inline bool ScaleParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool ScaleParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void ScaleParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.ScaleParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.ScaleParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ScaleParameter.bias_filler)
  return _msg;
}
inline void ScaleParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SigmoidParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SigmoidParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::SigmoidParameter_Engine SigmoidParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::SigmoidParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SigmoidParameter.engine)
  return _internal_engine();
}
inline void SigmoidParameter::_internal_set_engine(::apollo::perception::inference::SigmoidParameter_Engine value) {
  assert(::apollo::perception::inference::SigmoidParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}
inline void SigmoidParameter::set_engine(::apollo::perception::inference::SigmoidParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SliceParameter::has_axis() const {
  return _internal_has_axis();
}
inline void SliceParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SliceParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.axis)
  return _internal_axis();
}
inline void SliceParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void SliceParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::_internal_slice_point_size() const {
  return _impl_.slice_point_.size();
}
inline int SliceParameter::slice_point_size() const {
  return _internal_slice_point_size();
}
inline void SliceParameter::clear_slice_point() {
  _impl_.slice_point_.Clear();
}
inline uint32_t SliceParameter::_internal_slice_point(int index) const {
  return _impl_.slice_point_.Get(index);
}
inline uint32_t SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.slice_point)
  return _internal_slice_point(index);
}
inline void SliceParameter::set_slice_point(int index, uint32_t value) {
  _impl_.slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.slice_point)
}
inline void SliceParameter::_internal_add_slice_point(uint32_t value) {
  _impl_.slice_point_.Add(value);
}
inline void SliceParameter::add_slice_point(uint32_t value) {
  _internal_add_slice_point(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SliceParameter.slice_point)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SliceParameter::_internal_slice_point() const {
  return _impl_.slice_point_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SliceParameter.slice_point)
  return _internal_slice_point();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SliceParameter::_internal_mutable_slice_point() {
  return &_impl_.slice_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SliceParameter.slice_point)
  return _internal_mutable_slice_point();
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::_internal_has_slice_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SliceParameter::has_slice_dim() const {
  return _internal_has_slice_dim();
}
inline void SliceParameter::clear_slice_dim() {
  _impl_.slice_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SliceParameter::_internal_slice_dim() const {
  return _impl_.slice_dim_;
}
inline uint32_t SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.slice_dim)
  return _internal_slice_dim();
}
inline void SliceParameter::_internal_set_slice_dim(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slice_dim_ = value;
}
inline void SliceParameter::set_slice_dim(uint32_t value) {
  _internal_set_slice_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SoftmaxParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SoftmaxParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::SoftmaxParameter_Engine SoftmaxParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::SoftmaxParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SoftmaxParameter.engine)
  return _internal_engine();
}
inline void SoftmaxParameter::_internal_set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value) {
  assert(::apollo::perception::inference::SoftmaxParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}
inline void SoftmaxParameter::set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SoftmaxParameter::has_axis() const {
  return _internal_has_axis();
}
inline void SoftmaxParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SoftmaxParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SoftmaxParameter.axis)
  return _internal_axis();
}
inline void SoftmaxParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void SoftmaxParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TanHParameter::has_engine() const {
  return _internal_has_engine();
}
inline void TanHParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::TanHParameter_Engine TanHParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::TanHParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TanHParameter.engine)
  return _internal_engine();
}
inline void TanHParameter::_internal_set_engine(::apollo::perception::inference::TanHParameter_Engine value) {
  assert(::apollo::perception::inference::TanHParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}
inline void TanHParameter::set_engine(::apollo::perception::inference::TanHParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileParameter::has_axis() const {
  return _internal_has_axis();
}
inline void TileParameter::clear_axis() {
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TileParameter::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TileParameter.axis)
  return _internal_axis();
}
inline void TileParameter::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}
inline void TileParameter::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::_internal_has_tiles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileParameter::has_tiles() const {
  return _internal_has_tiles();
}
inline void TileParameter::clear_tiles() {
  _impl_.tiles_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TileParameter::_internal_tiles() const {
  return _impl_.tiles_;
}
inline int32_t TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TileParameter.tiles)
  return _internal_tiles();
}
inline void TileParameter::_internal_set_tiles(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tiles_ = value;
}
inline void TileParameter::set_tiles(int32_t value) {
  _internal_set_tiles(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::_internal_has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThresholdParameter::has_threshold() const {
  return _internal_has_threshold();
}
inline void ThresholdParameter::clear_threshold() {
  _impl_.threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ThresholdParameter::_internal_threshold() const {
  return _impl_.threshold_;
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ThresholdParameter.threshold)
  return _internal_threshold();
}
inline void ThresholdParameter::_internal_set_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.threshold_ = value;
}
inline void ThresholdParameter::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// VideoDataParameter

// optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
inline bool VideoDataParameter::_internal_has_video_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoDataParameter::has_video_type() const {
  return _internal_has_video_type();
}
inline void VideoDataParameter::clear_video_type() {
  _impl_.video_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::VideoDataParameter_VideoType VideoDataParameter::_internal_video_type() const {
  return static_cast< ::apollo::perception::inference::VideoDataParameter_VideoType >(_impl_.video_type_);
}
inline ::apollo::perception::inference::VideoDataParameter_VideoType VideoDataParameter::video_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.video_type)
  return _internal_video_type();
}
inline void VideoDataParameter::_internal_set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value) {
  assert(::apollo::perception::inference::VideoDataParameter_VideoType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.video_type_ = value;
}
inline void VideoDataParameter::set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value) {
  _internal_set_video_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.video_type)
}

// optional int32 device_id = 2 [default = 0];
inline bool VideoDataParameter::_internal_has_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoDataParameter::has_device_id() const {
  return _internal_has_device_id();
}
inline void VideoDataParameter::clear_device_id() {
  _impl_.device_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t VideoDataParameter::_internal_device_id() const {
  return _impl_.device_id_;
}
inline int32_t VideoDataParameter::device_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.device_id)
  return _internal_device_id();
}
inline void VideoDataParameter::_internal_set_device_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.device_id_ = value;
}
inline void VideoDataParameter::set_device_id(int32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.device_id)
}

// optional string video_file = 3;
inline bool VideoDataParameter::_internal_has_video_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoDataParameter::has_video_file() const {
  return _internal_has_video_file();
}
inline void VideoDataParameter::clear_video_file() {
  _impl_.video_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VideoDataParameter::video_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.video_file)
  return _internal_video_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoDataParameter::set_video_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.video_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.video_file)
}
inline std::string* VideoDataParameter::mutable_video_file() {
  std::string* _s = _internal_mutable_video_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.VideoDataParameter.video_file)
  return _s;
}
inline const std::string& VideoDataParameter::_internal_video_file() const {
  return _impl_.video_file_.Get();
}
inline void VideoDataParameter::_internal_set_video_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.video_file_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoDataParameter::_internal_mutable_video_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.video_file_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoDataParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.VideoDataParameter.video_file)
  if (!_internal_has_video_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.video_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_file_.IsDefault()) {
    _impl_.video_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VideoDataParameter::set_allocated_video_file(std::string* video_file) {
  if (video_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.video_file_.SetAllocated(video_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.video_file_.IsDefault()) {
    _impl_.video_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.VideoDataParameter.video_file)
}

// optional uint32 skip_frames = 4 [default = 0];
inline bool VideoDataParameter::_internal_has_skip_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoDataParameter::has_skip_frames() const {
  return _internal_has_skip_frames();
}
inline void VideoDataParameter::clear_skip_frames() {
  _impl_.skip_frames_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t VideoDataParameter::_internal_skip_frames() const {
  return _impl_.skip_frames_;
}
inline uint32_t VideoDataParameter::skip_frames() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.skip_frames)
  return _internal_skip_frames();
}
inline void VideoDataParameter::_internal_set_skip_frames(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skip_frames_ = value;
}
inline void VideoDataParameter::set_skip_frames(uint32_t value) {
  _internal_set_skip_frames(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.skip_frames)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowDataParameter::has_source() const {
  return _internal_has_source();
}
inline void WindowDataParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.source)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void WindowDataParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* WindowDataParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.WindowDataParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WindowDataParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WindowDataParameter::has_scale() const {
  return _internal_has_scale();
}
inline void WindowDataParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float WindowDataParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.scale)
  return _internal_scale();
}
inline void WindowDataParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.scale_ = value;
}
inline void WindowDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::_internal_has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mean_file() const {
  return _internal_has_mean_file();
}
inline void WindowDataParameter::clear_mean_file() {
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.mean_file)
  return _internal_mean_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_mean_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mean_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::mutable_mean_file() {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.mean_file)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_mean_file() const {
  return _impl_.mean_file_.Get();
}
inline void WindowDataParameter::_internal_set_mean_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArenaForAllocation());
}
inline std::string* WindowDataParameter::_internal_mutable_mean_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable(GetArenaForAllocation());
}
inline std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.WindowDataParameter.mean_file)
  if (!_internal_has_mean_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mean_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WindowDataParameter::set_allocated_mean_file(std::string* mean_file) {
  if (mean_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(mean_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mean_file_.IsDefault()) {
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::_internal_has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WindowDataParameter::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void WindowDataParameter::clear_batch_size() {
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t WindowDataParameter::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline uint32_t WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.batch_size)
  return _internal_batch_size();
}
inline void WindowDataParameter::_internal_set_batch_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.batch_size_ = value;
}
inline void WindowDataParameter::set_batch_size(uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::_internal_has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_size() const {
  return _internal_has_crop_size();
}
inline void WindowDataParameter::clear_crop_size() {
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t WindowDataParameter::_internal_crop_size() const {
  return _impl_.crop_size_;
}
inline uint32_t WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.crop_size)
  return _internal_crop_size();
}
inline void WindowDataParameter::_internal_set_crop_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.crop_size_ = value;
}
inline void WindowDataParameter::set_crop_size(uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WindowDataParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void WindowDataParameter::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool WindowDataParameter::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.mirror)
  return _internal_mirror();
}
inline void WindowDataParameter::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mirror_ = value;
}
inline void WindowDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::_internal_has_fg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_threshold() const {
  return _internal_has_fg_threshold();
}
inline void WindowDataParameter::clear_fg_threshold() {
  _impl_.fg_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float WindowDataParameter::_internal_fg_threshold() const {
  return _impl_.fg_threshold_;
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.fg_threshold)
  return _internal_fg_threshold();
}
inline void WindowDataParameter::_internal_set_fg_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.fg_threshold_ = value;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  _internal_set_fg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::_internal_has_bg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WindowDataParameter::has_bg_threshold() const {
  return _internal_has_bg_threshold();
}
inline void WindowDataParameter::clear_bg_threshold() {
  _impl_.bg_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float WindowDataParameter::_internal_bg_threshold() const {
  return _impl_.bg_threshold_;
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.bg_threshold)
  return _internal_bg_threshold();
}
inline void WindowDataParameter::_internal_set_bg_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bg_threshold_ = value;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  _internal_set_bg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::_internal_has_fg_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WindowDataParameter::has_fg_fraction() const {
  return _internal_has_fg_fraction();
}
inline void WindowDataParameter::clear_fg_fraction() {
  _impl_.fg_fraction_ = 0.25f;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float WindowDataParameter::_internal_fg_fraction() const {
  return _impl_.fg_fraction_;
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.fg_fraction)
  return _internal_fg_fraction();
}
inline void WindowDataParameter::_internal_set_fg_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fg_fraction_ = value;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  _internal_set_fg_fraction(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::_internal_has_context_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WindowDataParameter::has_context_pad() const {
  return _internal_has_context_pad();
}
inline void WindowDataParameter::clear_context_pad() {
  _impl_.context_pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t WindowDataParameter::_internal_context_pad() const {
  return _impl_.context_pad_;
}
inline uint32_t WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.context_pad)
  return _internal_context_pad();
}
inline void WindowDataParameter::_internal_set_context_pad(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.context_pad_ = value;
}
inline void WindowDataParameter::set_context_pad(uint32_t value) {
  _internal_set_context_pad(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::_internal_has_crop_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WindowDataParameter::has_crop_mode() const {
  return _internal_has_crop_mode();
}
inline void WindowDataParameter::clear_crop_mode() {
  _impl_.crop_mode_.ClearToDefault(::apollo::perception::inference::WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.crop_mode)
  if (_impl_.crop_mode_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_crop_mode_.get();
  return _internal_crop_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_crop_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.crop_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::mutable_crop_mode() {
  std::string* _s = _internal_mutable_crop_mode();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.crop_mode)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_crop_mode() const {
  return _impl_.crop_mode_.Get();
}
inline void WindowDataParameter::_internal_set_crop_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crop_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* WindowDataParameter::_internal_mutable_crop_mode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.crop_mode_.Mutable(::apollo::perception::inference::WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_, GetArenaForAllocation());
}
inline std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.WindowDataParameter.crop_mode)
  if (!_internal_has_crop_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.crop_mode_.Release();
  return p;
}
inline void WindowDataParameter::set_allocated_crop_mode(std::string* crop_mode) {
  if (crop_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.crop_mode_.SetAllocated(crop_mode, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::_internal_has_cache_images() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WindowDataParameter::has_cache_images() const {
  return _internal_has_cache_images();
}
inline void WindowDataParameter::clear_cache_images() {
  _impl_.cache_images_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool WindowDataParameter::_internal_cache_images() const {
  return _impl_.cache_images_;
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.cache_images)
  return _internal_cache_images();
}
inline void WindowDataParameter::_internal_set_cache_images(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cache_images_ = value;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  _internal_set_cache_images(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::_internal_has_root_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WindowDataParameter::has_root_folder() const {
  return _internal_has_root_folder();
}
inline void WindowDataParameter::clear_root_folder() {
  _impl_.root_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.root_folder)
  return _internal_root_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WindowDataParameter::set_root_folder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.root_folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.root_folder)
}
inline std::string* WindowDataParameter::mutable_root_folder() {
  std::string* _s = _internal_mutable_root_folder();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.root_folder)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_root_folder() const {
  return _impl_.root_folder_.Get();
}
inline void WindowDataParameter::_internal_set_root_folder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.root_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* WindowDataParameter::_internal_mutable_root_folder() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.root_folder_.Mutable(GetArenaForAllocation());
}
inline std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.WindowDataParameter.root_folder)
  if (!_internal_has_root_folder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.root_folder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WindowDataParameter::set_allocated_root_folder(std::string* root_folder) {
  if (root_folder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.root_folder_.SetAllocated(root_folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_folder_.IsDefault()) {
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::_internal_has_pyramid_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SPPParameter::has_pyramid_height() const {
  return _internal_has_pyramid_height();
}
inline void SPPParameter::clear_pyramid_height() {
  _impl_.pyramid_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SPPParameter::_internal_pyramid_height() const {
  return _impl_.pyramid_height_;
}
inline uint32_t SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.pyramid_height)
  return _internal_pyramid_height();
}
inline void SPPParameter::_internal_set_pyramid_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pyramid_height_ = value;
}
inline void SPPParameter::set_pyramid_height(uint32_t value) {
  _internal_set_pyramid_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.pyramid_height)
}

// optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::_internal_has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SPPParameter::has_pool() const {
  return _internal_has_pool();
}
inline void SPPParameter::clear_pool() {
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::inference::SPPParameter_PoolMethod SPPParameter::_internal_pool() const {
  return static_cast< ::apollo::perception::inference::SPPParameter_PoolMethod >(_impl_.pool_);
}
inline ::apollo::perception::inference::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.pool)
  return _internal_pool();
}
inline void SPPParameter::_internal_set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value) {
  assert(::apollo::perception::inference::SPPParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pool_ = value;
}
inline void SPPParameter::set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.pool)
}

// optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SPPParameter::has_engine() const {
  return _internal_has_engine();
}
inline void SPPParameter::clear_engine() {
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::perception::inference::SPPParameter_Engine SPPParameter::_internal_engine() const {
  return static_cast< ::apollo::perception::inference::SPPParameter_Engine >(_impl_.engine_);
}
inline ::apollo::perception::inference::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.engine)
  return _internal_engine();
}
inline void SPPParameter::_internal_set_engine(::apollo::perception::inference::SPPParameter_Engine value) {
  assert(::apollo::perception::inference::SPPParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.engine_ = value;
}
inline void SPPParameter::set_engine(::apollo::perception::inference::SPPParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::_internal_bottom_size() const {
  return _impl_.bottom_.size();
}
inline int V1LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void V1LayerParameter::clear_bottom() {
  _impl_.bottom_.Clear();
}
inline std::string* V1LayerParameter::add_bottom() {
  std::string* _s = _internal_add_bottom();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.V1LayerParameter.bottom)
  return _s;
}
inline const std::string& V1LayerParameter::_internal_bottom(int index) const {
  return _impl_.bottom_.Get(index);
}
inline const std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.bottom)
  return _internal_bottom(index);
}
inline std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.bottom)
  return _impl_.bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const std::string& value) {
  _impl_.bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, std::string&& value) {
  _impl_.bottom_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  _impl_.bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.bottom)
}
inline std::string* V1LayerParameter::_internal_add_bottom() {
  return _impl_.bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const std::string& value) {
  _impl_.bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(std::string&& value) {
  _impl_.bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  _impl_.bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.bottom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.bottom)
  return _impl_.bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.bottom)
  return &_impl_.bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::_internal_top_size() const {
  return _impl_.top_.size();
}
inline int V1LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void V1LayerParameter::clear_top() {
  _impl_.top_.Clear();
}
inline std::string* V1LayerParameter::add_top() {
  std::string* _s = _internal_add_top();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.V1LayerParameter.top)
  return _s;
}
inline const std::string& V1LayerParameter::_internal_top(int index) const {
  return _impl_.top_.Get(index);
}
inline const std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.top)
  return _internal_top(index);
}
inline std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.top)
  return _impl_.top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const std::string& value) {
  _impl_.top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, std::string&& value) {
  _impl_.top_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  _impl_.top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.top)
}
inline std::string* V1LayerParameter::_internal_add_top() {
  return _impl_.top_.Add();
}
inline void V1LayerParameter::add_top(const std::string& value) {
  _impl_.top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(std::string&& value) {
  _impl_.top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  _impl_.top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.top)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.top)
  return _impl_.top_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.top)
  return &_impl_.top_;
}

// optional string name = 4;
inline bool V1LayerParameter::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V1LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void V1LayerParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V1LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.name)
}
inline std::string* V1LayerParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.name)
  return _s;
}
inline const std::string& V1LayerParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void V1LayerParameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* V1LayerParameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void V1LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.name)
}

// repeated .apollo.perception.inference.NetStateRule include = 32;
inline int V1LayerParameter::_internal_include_size() const {
  return _impl_.include_.size();
}
inline int V1LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void V1LayerParameter::clear_include() {
  _impl_.include_.Clear();
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.include)
  return _impl_.include_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.include)
  return &_impl_.include_;
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::_internal_include(int index) const {
  return _impl_.include_.Get(index);
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.include)
  return _internal_include(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::_internal_add_include() {
  return _impl_.include_.Add();
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::add_include() {
  ::apollo::perception::inference::NetStateRule* _add = _internal_add_include();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.include)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.include)
  return _impl_.include_;
}

// repeated .apollo.perception.inference.NetStateRule exclude = 33;
inline int V1LayerParameter::_internal_exclude_size() const {
  return _impl_.exclude_.size();
}
inline int V1LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void V1LayerParameter::clear_exclude() {
  _impl_.exclude_.Clear();
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.exclude)
  return _impl_.exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.exclude)
  return &_impl_.exclude_;
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::_internal_exclude(int index) const {
  return _impl_.exclude_.Get(index);
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.exclude)
  return _internal_exclude(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::_internal_add_exclude() {
  return _impl_.exclude_.Add();
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::add_exclude() {
  ::apollo::perception::inference::NetStateRule* _add = _internal_add_exclude();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.exclude)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.exclude)
  return _impl_.exclude_;
}

// optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool V1LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void V1LayerParameter::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::apollo::perception::inference::V1LayerParameter_LayerType V1LayerParameter::_internal_type() const {
  return static_cast< ::apollo::perception::inference::V1LayerParameter_LayerType >(_impl_.type_);
}
inline ::apollo::perception::inference::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.type)
  return _internal_type();
}
inline void V1LayerParameter::_internal_set_type(::apollo::perception::inference::V1LayerParameter_LayerType value) {
  assert(::apollo::perception::inference::V1LayerParameter_LayerType_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void V1LayerParameter::set_type(::apollo::perception::inference::V1LayerParameter_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.type)
}

// repeated .apollo.perception.inference.BlobProto blobs = 6;
inline int V1LayerParameter::_internal_blobs_size() const {
  return _impl_.blobs_.size();
}
inline int V1LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V1LayerParameter::clear_blobs() {
  _impl_.blobs_.Clear();
}
inline ::apollo::perception::inference::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.blobs)
  return _impl_.blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blobs)
  return &_impl_.blobs_;
}
inline const ::apollo::perception::inference::BlobProto& V1LayerParameter::_internal_blobs(int index) const {
  return _impl_.blobs_.Get(index);
}
inline const ::apollo::perception::inference::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::apollo::perception::inference::BlobProto* V1LayerParameter::_internal_add_blobs() {
  return _impl_.blobs_.Add();
}
inline ::apollo::perception::inference::BlobProto* V1LayerParameter::add_blobs() {
  ::apollo::perception::inference::BlobProto* _add = _internal_add_blobs();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blobs)
  return _impl_.blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::_internal_param_size() const {
  return _impl_.param_.size();
}
inline int V1LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void V1LayerParameter::clear_param() {
  _impl_.param_.Clear();
}
inline std::string* V1LayerParameter::add_param() {
  std::string* _s = _internal_add_param();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.inference.V1LayerParameter.param)
  return _s;
}
inline const std::string& V1LayerParameter::_internal_param(int index) const {
  return _impl_.param_.Get(index);
}
inline const std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.param)
  return _internal_param(index);
}
inline std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.param)
  return _impl_.param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const std::string& value) {
  _impl_.param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, std::string&& value) {
  _impl_.param_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  _impl_.param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.param)
}
inline std::string* V1LayerParameter::_internal_add_param() {
  return _impl_.param_.Add();
}
inline void V1LayerParameter::add_param(const std::string& value) {
  _impl_.param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(std::string&& value) {
  _impl_.param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  _impl_.param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.param)
  return _impl_.param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.param)
  return &_impl_.param_;
}

// repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::_internal_blob_share_mode_size() const {
  return _impl_.blob_share_mode_.size();
}
inline int V1LayerParameter::blob_share_mode_size() const {
  return _internal_blob_share_mode_size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  _impl_.blob_share_mode_.Clear();
}
inline ::apollo::perception::inference::V1LayerParameter_DimCheckMode V1LayerParameter::_internal_blob_share_mode(int index) const {
  return static_cast< ::apollo::perception::inference::V1LayerParameter_DimCheckMode >(_impl_.blob_share_mode_.Get(index));
}
inline ::apollo::perception::inference::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return _internal_blob_share_mode(index);
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::apollo::perception::inference::V1LayerParameter_DimCheckMode value) {
  assert(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(value));
  _impl_.blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::_internal_add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value) {
  assert(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(value));
  _impl_.blob_share_mode_.Add(value);
}
inline void V1LayerParameter::add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value) {
  _internal_add_blob_share_mode(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blob_share_mode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return _impl_.blob_share_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V1LayerParameter::_internal_mutable_blob_share_mode() {
  return &_impl_.blob_share_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return _internal_mutable_blob_share_mode();
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::_internal_blobs_lr_size() const {
  return _impl_.blobs_lr_.size();
}
inline int V1LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  _impl_.blobs_lr_.Clear();
}
inline float V1LayerParameter::_internal_blobs_lr(int index) const {
  return _impl_.blobs_lr_.Get(index);
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  _impl_.blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::_internal_add_blobs_lr(float value) {
  _impl_.blobs_lr_.Add(value);
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_blobs_lr() const {
  return _impl_.blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_blobs_lr() {
  return &_impl_.blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::_internal_weight_decay_size() const {
  return _impl_.weight_decay_.size();
}
inline int V1LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V1LayerParameter::clear_weight_decay() {
  _impl_.weight_decay_.Clear();
}
inline float V1LayerParameter::_internal_weight_decay(int index) const {
  return _impl_.weight_decay_.Get(index);
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  _impl_.weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::_internal_add_weight_decay(float value) {
  _impl_.weight_decay_.Add(value);
}
inline void V1LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_weight_decay() const {
  return _impl_.weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_weight_decay() {
  return &_impl_.weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::_internal_loss_weight_size() const {
  return _impl_.loss_weight_.size();
}
inline int V1LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void V1LayerParameter::clear_loss_weight() {
  _impl_.loss_weight_.Clear();
}
inline float V1LayerParameter::_internal_loss_weight(int index) const {
  return _impl_.loss_weight_.Get(index);
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.loss_weight)
  return _internal_loss_weight(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  _impl_.loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::_internal_add_loss_weight(float value) {
  _impl_.loss_weight_.Add(value);
}
inline void V1LayerParameter::add_loss_weight(float value) {
  _internal_add_loss_weight(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.loss_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::_internal_loss_weight() const {
  return _impl_.loss_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::_internal_mutable_loss_weight() {
  return &_impl_.loss_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.loss_weight)
  return _internal_mutable_loss_weight();
}

// optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::_internal_has_accuracy_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_accuracy_param() const {
  return _internal_has_accuracy_param();
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (_impl_.accuracy_param_ != nullptr) _impl_.accuracy_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::perception::inference::AccuracyParameter& V1LayerParameter::_internal_accuracy_param() const {
  const ::apollo::perception::inference::AccuracyParameter* p = _impl_.accuracy_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::AccuracyParameter&>(
      ::apollo::perception::inference::_AccuracyParameter_default_instance_);
}
inline const ::apollo::perception::inference::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_accuracy_param(
    ::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accuracy_param_);
  }
  _impl_.accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.accuracy_param)
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::perception::inference::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::unsafe_arena_release_accuracy_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.accuracy_param)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::perception::inference::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::_internal_mutable_accuracy_param() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::AccuracyParameter>(GetArenaForAllocation());
    _impl_.accuracy_param_ = p;
  }
  return _impl_.accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  ::apollo::perception::inference::AccuracyParameter* _msg = _internal_mutable_accuracy_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.accuracy_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.accuracy_param_;
  }
  if (accuracy_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accuracy_param);
    if (message_arena != submessage_arena) {
      accuracy_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.accuracy_param)
}

// optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::_internal_has_argmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argmax_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_argmax_param() const {
  return _internal_has_argmax_param();
}
inline void V1LayerParameter::clear_argmax_param() {
  if (_impl_.argmax_param_ != nullptr) _impl_.argmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::perception::inference::ArgMaxParameter& V1LayerParameter::_internal_argmax_param() const {
  const ::apollo::perception::inference::ArgMaxParameter* p = _impl_.argmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ArgMaxParameter&>(
      ::apollo::perception::inference::_ArgMaxParameter_default_instance_);
}
inline const ::apollo::perception::inference::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_argmax_param(
    ::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.argmax_param_);
  }
  _impl_.argmax_param_ = argmax_param;
  if (argmax_param) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.argmax_param)
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::perception::inference::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::unsafe_arena_release_argmax_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.argmax_param)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::perception::inference::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::_internal_mutable_argmax_param() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ArgMaxParameter>(GetArenaForAllocation());
    _impl_.argmax_param_ = p;
  }
  return _impl_.argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  ::apollo::perception::inference::ArgMaxParameter* _msg = _internal_mutable_argmax_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.argmax_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.argmax_param_;
  }
  if (argmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(argmax_param);
    if (message_arena != submessage_arena) {
      argmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.argmax_param)
}

// optional .apollo.perception.inference.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::_internal_has_concat_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concat_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_concat_param() const {
  return _internal_has_concat_param();
}
inline void V1LayerParameter::clear_concat_param() {
  if (_impl_.concat_param_ != nullptr) _impl_.concat_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::inference::ConcatParameter& V1LayerParameter::_internal_concat_param() const {
  const ::apollo::perception::inference::ConcatParameter* p = _impl_.concat_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ConcatParameter&>(
      ::apollo::perception::inference::_ConcatParameter_default_instance_);
}
inline const ::apollo::perception::inference::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_concat_param(
    ::apollo::perception::inference::ConcatParameter* concat_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.concat_param_);
  }
  _impl_.concat_param_ = concat_param;
  if (concat_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.concat_param)
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::release_concat_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::unsafe_arena_release_concat_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.concat_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::inference::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::_internal_mutable_concat_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ConcatParameter>(GetArenaForAllocation());
    _impl_.concat_param_ = p;
  }
  return _impl_.concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  ::apollo::perception::inference::ConcatParameter* _msg = _internal_mutable_concat_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.concat_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.concat_param_;
  }
  if (concat_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(concat_param);
    if (message_arena != submessage_arena) {
      concat_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.concat_param)
}

// optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::_internal_has_contrastive_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contrastive_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return _internal_has_contrastive_loss_param();
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (_impl_.contrastive_loss_param_ != nullptr) _impl_.contrastive_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& V1LayerParameter::_internal_contrastive_loss_param() const {
  const ::apollo::perception::inference::ContrastiveLossParameter* p = _impl_.contrastive_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ContrastiveLossParameter&>(
      ::apollo::perception::inference::_ContrastiveLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(
    ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contrastive_loss_param_);
  }
  _impl_.contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::apollo::perception::inference::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::apollo::perception::inference::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::_internal_mutable_contrastive_loss_param() {
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ContrastiveLossParameter>(GetArenaForAllocation());
    _impl_.contrastive_loss_param_ = p;
  }
  return _impl_.contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  ::apollo::perception::inference::ContrastiveLossParameter* _msg = _internal_mutable_contrastive_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contrastive_loss_param);
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
}

// optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::_internal_has_convolution_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convolution_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_convolution_param() const {
  return _internal_has_convolution_param();
}
inline void V1LayerParameter::clear_convolution_param() {
  if (_impl_.convolution_param_ != nullptr) _impl_.convolution_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::inference::ConvolutionParameter& V1LayerParameter::_internal_convolution_param() const {
  const ::apollo::perception::inference::ConvolutionParameter* p = _impl_.convolution_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ConvolutionParameter&>(
      ::apollo::perception::inference::_ConvolutionParameter_default_instance_);
}
inline const ::apollo::perception::inference::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_convolution_param(
    ::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convolution_param_);
  }
  _impl_.convolution_param_ = convolution_param;
  if (convolution_param) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.convolution_param)
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::unsafe_arena_release_convolution_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.convolution_param)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::inference::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::_internal_mutable_convolution_param() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ConvolutionParameter>(GetArenaForAllocation());
    _impl_.convolution_param_ = p;
  }
  return _impl_.convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  ::apollo::perception::inference::ConvolutionParameter* _msg = _internal_mutable_convolution_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.convolution_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.convolution_param_;
  }
  if (convolution_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(convolution_param);
    if (message_arena != submessage_arena) {
      convolution_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.convolution_param)
}

// optional .apollo.perception.inference.DataParameter data_param = 11;
inline bool V1LayerParameter::_internal_has_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_data_param() const {
  return _internal_has_data_param();
}
inline void V1LayerParameter::clear_data_param() {
  if (_impl_.data_param_ != nullptr) _impl_.data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::inference::DataParameter& V1LayerParameter::_internal_data_param() const {
  const ::apollo::perception::inference::DataParameter* p = _impl_.data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DataParameter&>(
      ::apollo::perception::inference::_DataParameter_default_instance_);
}
inline const ::apollo::perception::inference::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.data_param)
  return _internal_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_data_param(
    ::apollo::perception::inference::DataParameter* data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_param_);
  }
  _impl_.data_param_ = data_param;
  if (data_param) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.data_param)
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::release_data_param() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::unsafe_arena_release_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.data_param)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::inference::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::_internal_mutable_data_param() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DataParameter>(GetArenaForAllocation());
    _impl_.data_param_ = p;
  }
  return _impl_.data_param_;
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::mutable_data_param() {
  ::apollo::perception::inference::DataParameter* _msg = _internal_mutable_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_param_;
  }
  if (data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_param);
    if (message_arena != submessage_arena) {
      data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.data_param)
}

// optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::_internal_has_dropout_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dropout_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_dropout_param() const {
  return _internal_has_dropout_param();
}
inline void V1LayerParameter::clear_dropout_param() {
  if (_impl_.dropout_param_ != nullptr) _impl_.dropout_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::DropoutParameter& V1LayerParameter::_internal_dropout_param() const {
  const ::apollo::perception::inference::DropoutParameter* p = _impl_.dropout_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DropoutParameter&>(
      ::apollo::perception::inference::_DropoutParameter_default_instance_);
}
inline const ::apollo::perception::inference::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dropout_param(
    ::apollo::perception::inference::DropoutParameter* dropout_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dropout_param_);
  }
  _impl_.dropout_param_ = dropout_param;
  if (dropout_param) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.dropout_param)
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::release_dropout_param() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::unsafe_arena_release_dropout_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.dropout_param)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::_internal_mutable_dropout_param() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DropoutParameter>(GetArenaForAllocation());
    _impl_.dropout_param_ = p;
  }
  return _impl_.dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  ::apollo::perception::inference::DropoutParameter* _msg = _internal_mutable_dropout_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.dropout_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dropout_param_;
  }
  if (dropout_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dropout_param);
    if (message_arena != submessage_arena) {
      dropout_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.dropout_param)
}

// optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::_internal_has_dummy_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dummy_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_dummy_data_param() const {
  return _internal_has_dummy_data_param();
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (_impl_.dummy_data_param_ != nullptr) _impl_.dummy_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::perception::inference::DummyDataParameter& V1LayerParameter::_internal_dummy_data_param() const {
  const ::apollo::perception::inference::DummyDataParameter* p = _impl_.dummy_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::DummyDataParameter&>(
      ::apollo::perception::inference::_DummyDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dummy_data_param(
    ::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dummy_data_param_);
  }
  _impl_.dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.dummy_data_param)
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::perception::inference::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::unsafe_arena_release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.dummy_data_param)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::perception::inference::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::_internal_mutable_dummy_data_param() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::DummyDataParameter>(GetArenaForAllocation());
    _impl_.dummy_data_param_ = p;
  }
  return _impl_.dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  ::apollo::perception::inference::DummyDataParameter* _msg = _internal_mutable_dummy_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.dummy_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dummy_data_param_;
  }
  if (dummy_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dummy_data_param);
    if (message_arena != submessage_arena) {
      dummy_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.dummy_data_param)
}

// optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::_internal_has_eltwise_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eltwise_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_eltwise_param() const {
  return _internal_has_eltwise_param();
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (_impl_.eltwise_param_ != nullptr) _impl_.eltwise_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::perception::inference::EltwiseParameter& V1LayerParameter::_internal_eltwise_param() const {
  const ::apollo::perception::inference::EltwiseParameter* p = _impl_.eltwise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::EltwiseParameter&>(
      ::apollo::perception::inference::_EltwiseParameter_default_instance_);
}
inline const ::apollo::perception::inference::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_eltwise_param(
    ::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eltwise_param_);
  }
  _impl_.eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.eltwise_param)
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::perception::inference::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::unsafe_arena_release_eltwise_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.eltwise_param)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::perception::inference::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::_internal_mutable_eltwise_param() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::EltwiseParameter>(GetArenaForAllocation());
    _impl_.eltwise_param_ = p;
  }
  return _impl_.eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  ::apollo::perception::inference::EltwiseParameter* _msg = _internal_mutable_eltwise_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.eltwise_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.eltwise_param_;
  }
  if (eltwise_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eltwise_param);
    if (message_arena != submessage_arena) {
      eltwise_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.eltwise_param)
}

// optional .apollo.perception.inference.ExpParameter exp_param = 41;
inline bool V1LayerParameter::_internal_has_exp_param() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exp_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_exp_param() const {
  return _internal_has_exp_param();
}
inline void V1LayerParameter::clear_exp_param() {
  if (_impl_.exp_param_ != nullptr) _impl_.exp_param_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::apollo::perception::inference::ExpParameter& V1LayerParameter::_internal_exp_param() const {
  const ::apollo::perception::inference::ExpParameter* p = _impl_.exp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ExpParameter&>(
      ::apollo::perception::inference::_ExpParameter_default_instance_);
}
inline const ::apollo::perception::inference::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_exp_param(
    ::apollo::perception::inference::ExpParameter* exp_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exp_param_);
  }
  _impl_.exp_param_ = exp_param;
  if (exp_param) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.exp_param)
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::release_exp_param() {
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::apollo::perception::inference::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::unsafe_arena_release_exp_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.exp_param)
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::apollo::perception::inference::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::_internal_mutable_exp_param() {
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ExpParameter>(GetArenaForAllocation());
    _impl_.exp_param_ = p;
  }
  return _impl_.exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::mutable_exp_param() {
  ::apollo::perception::inference::ExpParameter* _msg = _internal_mutable_exp_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.exp_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.exp_param_;
  }
  if (exp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exp_param);
    if (message_arena != submessage_arena) {
      exp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.exp_param)
}

// optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::_internal_has_hdf5_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return _internal_has_hdf5_data_param();
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (_impl_.hdf5_data_param_ != nullptr) _impl_.hdf5_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::perception::inference::HDF5DataParameter& V1LayerParameter::_internal_hdf5_data_param() const {
  const ::apollo::perception::inference::HDF5DataParameter* p = _impl_.hdf5_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HDF5DataParameter&>(
      ::apollo::perception::inference::_HDF5DataParameter_default_instance_);
}
inline const ::apollo::perception::inference::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(
    ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdf5_data_param_);
  }
  _impl_.hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::unsafe_arena_release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::_internal_mutable_hdf5_data_param() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HDF5DataParameter>(GetArenaForAllocation());
    _impl_.hdf5_data_param_ = p;
  }
  return _impl_.hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  ::apollo::perception::inference::HDF5DataParameter* _msg = _internal_mutable_hdf5_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hdf5_data_param);
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V1LayerParameter::_internal_hdf5_output_param() const {
  const ::apollo::perception::inference::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HDF5OutputParameter&>(
      ::apollo::perception::inference::_HDF5OutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::_internal_mutable_hdf5_output_param() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HDF5OutputParameter>(GetArenaForAllocation());
    _impl_.hdf5_output_param_ = p;
  }
  return _impl_.hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  ::apollo::perception::inference::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
}

// optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::_internal_has_hinge_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hinge_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return _internal_has_hinge_loss_param();
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (_impl_.hinge_loss_param_ != nullptr) _impl_.hinge_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::apollo::perception::inference::HingeLossParameter& V1LayerParameter::_internal_hinge_loss_param() const {
  const ::apollo::perception::inference::HingeLossParameter* p = _impl_.hinge_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HingeLossParameter&>(
      ::apollo::perception::inference::_HingeLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(
    ::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hinge_loss_param_);
  }
  _impl_.hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::apollo::perception::inference::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::unsafe_arena_release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::apollo::perception::inference::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::_internal_mutable_hinge_loss_param() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HingeLossParameter>(GetArenaForAllocation());
    _impl_.hinge_loss_param_ = p;
  }
  return _impl_.hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  ::apollo::perception::inference::HingeLossParameter* _msg = _internal_mutable_hinge_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hinge_loss_param);
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
}

// optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::_internal_has_image_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_image_data_param() const {
  return _internal_has_image_data_param();
}
inline void V1LayerParameter::clear_image_data_param() {
  if (_impl_.image_data_param_ != nullptr) _impl_.image_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::perception::inference::ImageDataParameter& V1LayerParameter::_internal_image_data_param() const {
  const ::apollo::perception::inference::ImageDataParameter* p = _impl_.image_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ImageDataParameter&>(
      ::apollo::perception::inference::_ImageDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_image_data_param(
    ::apollo::perception::inference::ImageDataParameter* image_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_param_);
  }
  _impl_.image_data_param_ = image_data_param;
  if (image_data_param) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.image_data_param)
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::perception::inference::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::unsafe_arena_release_image_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.image_data_param)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::perception::inference::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::_internal_mutable_image_data_param() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ImageDataParameter>(GetArenaForAllocation());
    _impl_.image_data_param_ = p;
  }
  return _impl_.image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  ::apollo::perception::inference::ImageDataParameter* _msg = _internal_mutable_image_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.image_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_data_param_;
  }
  if (image_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_data_param);
    if (message_arena != submessage_arena) {
      image_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.image_data_param)
}

// optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::_internal_has_infogain_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.infogain_loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return _internal_has_infogain_loss_param();
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (_impl_.infogain_loss_param_ != nullptr) _impl_.infogain_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::perception::inference::InfogainLossParameter& V1LayerParameter::_internal_infogain_loss_param() const {
  const ::apollo::perception::inference::InfogainLossParameter* p = _impl_.infogain_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::InfogainLossParameter&>(
      ::apollo::perception::inference::_InfogainLossParameter_default_instance_);
}
inline const ::apollo::perception::inference::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(
    ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.infogain_loss_param_);
  }
  _impl_.infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::perception::inference::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::unsafe_arena_release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::perception::inference::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::_internal_mutable_infogain_loss_param() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::InfogainLossParameter>(GetArenaForAllocation());
    _impl_.infogain_loss_param_ = p;
  }
  return _impl_.infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  ::apollo::perception::inference::InfogainLossParameter* _msg = _internal_mutable_infogain_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(infogain_loss_param);
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
}

// optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::_internal_has_inner_product_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inner_product_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_inner_product_param() const {
  return _internal_has_inner_product_param();
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (_impl_.inner_product_param_ != nullptr) _impl_.inner_product_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::perception::inference::InnerProductParameter& V1LayerParameter::_internal_inner_product_param() const {
  const ::apollo::perception::inference::InnerProductParameter* p = _impl_.inner_product_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::InnerProductParameter&>(
      ::apollo::perception::inference::_InnerProductParameter_default_instance_);
}
inline const ::apollo::perception::inference::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_inner_product_param(
    ::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner_product_param_);
  }
  _impl_.inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.inner_product_param)
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::perception::inference::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::unsafe_arena_release_inner_product_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.inner_product_param)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::perception::inference::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::_internal_mutable_inner_product_param() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::InnerProductParameter>(GetArenaForAllocation());
    _impl_.inner_product_param_ = p;
  }
  return _impl_.inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  ::apollo::perception::inference::InnerProductParameter* _msg = _internal_mutable_inner_product_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.inner_product_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner_product_param_;
  }
  if (inner_product_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner_product_param);
    if (message_arena != submessage_arena) {
      inner_product_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.inner_product_param)
}

// optional .apollo.perception.inference.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::_internal_has_lrn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lrn_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_lrn_param() const {
  return _internal_has_lrn_param();
}
inline void V1LayerParameter::clear_lrn_param() {
  if (_impl_.lrn_param_ != nullptr) _impl_.lrn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::perception::inference::LRNParameter& V1LayerParameter::_internal_lrn_param() const {
  const ::apollo::perception::inference::LRNParameter* p = _impl_.lrn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::LRNParameter&>(
      ::apollo::perception::inference::_LRNParameter_default_instance_);
}
inline const ::apollo::perception::inference::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_lrn_param(
    ::apollo::perception::inference::LRNParameter* lrn_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lrn_param_);
  }
  _impl_.lrn_param_ = lrn_param;
  if (lrn_param) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.lrn_param)
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::release_lrn_param() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::perception::inference::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::unsafe_arena_release_lrn_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.lrn_param)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::perception::inference::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::_internal_mutable_lrn_param() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::LRNParameter>(GetArenaForAllocation());
    _impl_.lrn_param_ = p;
  }
  return _impl_.lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  ::apollo::perception::inference::LRNParameter* _msg = _internal_mutable_lrn_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.lrn_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lrn_param_;
  }
  if (lrn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lrn_param);
    if (message_arena != submessage_arena) {
      lrn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.lrn_param)
}

// optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::_internal_has_memory_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.memory_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_memory_data_param() const {
  return _internal_has_memory_data_param();
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (_impl_.memory_data_param_ != nullptr) _impl_.memory_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::perception::inference::MemoryDataParameter& V1LayerParameter::_internal_memory_data_param() const {
  const ::apollo::perception::inference::MemoryDataParameter* p = _impl_.memory_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::MemoryDataParameter&>(
      ::apollo::perception::inference::_MemoryDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_memory_data_param(
    ::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memory_data_param_);
  }
  _impl_.memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.memory_data_param)
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::perception::inference::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::unsafe_arena_release_memory_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.memory_data_param)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::perception::inference::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::_internal_mutable_memory_data_param() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::MemoryDataParameter>(GetArenaForAllocation());
    _impl_.memory_data_param_ = p;
  }
  return _impl_.memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  ::apollo::perception::inference::MemoryDataParameter* _msg = _internal_mutable_memory_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.memory_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.memory_data_param_;
  }
  if (memory_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(memory_data_param);
    if (message_arena != submessage_arena) {
      memory_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.memory_data_param)
}

// optional .apollo.perception.inference.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::_internal_has_mvn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mvn_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_mvn_param() const {
  return _internal_has_mvn_param();
}
inline void V1LayerParameter::clear_mvn_param() {
  if (_impl_.mvn_param_ != nullptr) _impl_.mvn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::apollo::perception::inference::MVNParameter& V1LayerParameter::_internal_mvn_param() const {
  const ::apollo::perception::inference::MVNParameter* p = _impl_.mvn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::MVNParameter&>(
      ::apollo::perception::inference::_MVNParameter_default_instance_);
}
inline const ::apollo::perception::inference::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_mvn_param(
    ::apollo::perception::inference::MVNParameter* mvn_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mvn_param_);
  }
  _impl_.mvn_param_ = mvn_param;
  if (mvn_param) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.mvn_param)
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::release_mvn_param() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::apollo::perception::inference::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::unsafe_arena_release_mvn_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.mvn_param)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::apollo::perception::inference::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::_internal_mutable_mvn_param() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::MVNParameter>(GetArenaForAllocation());
    _impl_.mvn_param_ = p;
  }
  return _impl_.mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  ::apollo::perception::inference::MVNParameter* _msg = _internal_mutable_mvn_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.mvn_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mvn_param_;
  }
  if (mvn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mvn_param);
    if (message_arena != submessage_arena) {
      mvn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.mvn_param)
}

// optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::_internal_has_pooling_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pooling_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_pooling_param() const {
  return _internal_has_pooling_param();
}
inline void V1LayerParameter::clear_pooling_param() {
  if (_impl_.pooling_param_ != nullptr) _impl_.pooling_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::perception::inference::PoolingParameter& V1LayerParameter::_internal_pooling_param() const {
  const ::apollo::perception::inference::PoolingParameter* p = _impl_.pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PoolingParameter&>(
      ::apollo::perception::inference::_PoolingParameter_default_instance_);
}
inline const ::apollo::perception::inference::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_pooling_param(
    ::apollo::perception::inference::PoolingParameter* pooling_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pooling_param_);
  }
  _impl_.pooling_param_ = pooling_param;
  if (pooling_param) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.pooling_param)
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::release_pooling_param() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::inference::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::unsafe_arena_release_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.pooling_param)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::inference::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::_internal_mutable_pooling_param() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PoolingParameter>(GetArenaForAllocation());
    _impl_.pooling_param_ = p;
  }
  return _impl_.pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  ::apollo::perception::inference::PoolingParameter* _msg = _internal_mutable_pooling_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.pooling_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pooling_param_;
  }
  if (pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pooling_param);
    if (message_arena != submessage_arena) {
      pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.pooling_param)
}

// optional .apollo.perception.inference.PowerParameter power_param = 21;
inline bool V1LayerParameter::_internal_has_power_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.power_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_power_param() const {
  return _internal_has_power_param();
}
inline void V1LayerParameter::clear_power_param() {
  if (_impl_.power_param_ != nullptr) _impl_.power_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::perception::inference::PowerParameter& V1LayerParameter::_internal_power_param() const {
  const ::apollo::perception::inference::PowerParameter* p = _impl_.power_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::PowerParameter&>(
      ::apollo::perception::inference::_PowerParameter_default_instance_);
}
inline const ::apollo::perception::inference::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.power_param)
  return _internal_power_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_power_param(
    ::apollo::perception::inference::PowerParameter* power_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.power_param_);
  }
  _impl_.power_param_ = power_param;
  if (power_param) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.power_param)
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::release_power_param() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::perception::inference::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::unsafe_arena_release_power_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.power_param)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::perception::inference::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::_internal_mutable_power_param() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::PowerParameter>(GetArenaForAllocation());
    _impl_.power_param_ = p;
  }
  return _impl_.power_param_;
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::mutable_power_param() {
  ::apollo::perception::inference::PowerParameter* _msg = _internal_mutable_power_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.power_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.power_param_;
  }
  if (power_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(power_param);
    if (message_arena != submessage_arena) {
      power_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.power_param)
}

// optional .apollo.perception.inference.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::_internal_has_relu_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relu_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_relu_param() const {
  return _internal_has_relu_param();
}
inline void V1LayerParameter::clear_relu_param() {
  if (_impl_.relu_param_ != nullptr) _impl_.relu_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::apollo::perception::inference::ReLUParameter& V1LayerParameter::_internal_relu_param() const {
  const ::apollo::perception::inference::ReLUParameter* p = _impl_.relu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ReLUParameter&>(
      ::apollo::perception::inference::_ReLUParameter_default_instance_);
}
inline const ::apollo::perception::inference::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_relu_param(
    ::apollo::perception::inference::ReLUParameter* relu_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relu_param_);
  }
  _impl_.relu_param_ = relu_param;
  if (relu_param) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.relu_param)
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::release_relu_param() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::apollo::perception::inference::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::unsafe_arena_release_relu_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.relu_param)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::apollo::perception::inference::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::_internal_mutable_relu_param() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ReLUParameter>(GetArenaForAllocation());
    _impl_.relu_param_ = p;
  }
  return _impl_.relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  ::apollo::perception::inference::ReLUParameter* _msg = _internal_mutable_relu_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.relu_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relu_param_;
  }
  if (relu_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relu_param);
    if (message_arena != submessage_arena) {
      relu_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.relu_param)
}

// optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::_internal_has_sigmoid_param() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sigmoid_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_sigmoid_param() const {
  return _internal_has_sigmoid_param();
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (_impl_.sigmoid_param_ != nullptr) _impl_.sigmoid_param_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const ::apollo::perception::inference::SigmoidParameter& V1LayerParameter::_internal_sigmoid_param() const {
  const ::apollo::perception::inference::SigmoidParameter* p = _impl_.sigmoid_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SigmoidParameter&>(
      ::apollo::perception::inference::_SigmoidParameter_default_instance_);
}
inline const ::apollo::perception::inference::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_sigmoid_param(
    ::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmoid_param_);
  }
  _impl_.sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.sigmoid_param)
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::apollo::perception::inference::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::unsafe_arena_release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.sigmoid_param)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::apollo::perception::inference::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::_internal_mutable_sigmoid_param() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SigmoidParameter>(GetArenaForAllocation());
    _impl_.sigmoid_param_ = p;
  }
  return _impl_.sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  ::apollo::perception::inference::SigmoidParameter* _msg = _internal_mutable_sigmoid_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.sigmoid_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sigmoid_param_;
  }
  if (sigmoid_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sigmoid_param);
    if (message_arena != submessage_arena) {
      sigmoid_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.sigmoid_param)
}

// optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::_internal_has_softmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.softmax_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_softmax_param() const {
  return _internal_has_softmax_param();
}
inline void V1LayerParameter::clear_softmax_param() {
  if (_impl_.softmax_param_ != nullptr) _impl_.softmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const ::apollo::perception::inference::SoftmaxParameter& V1LayerParameter::_internal_softmax_param() const {
  const ::apollo::perception::inference::SoftmaxParameter* p = _impl_.softmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SoftmaxParameter&>(
      ::apollo::perception::inference::_SoftmaxParameter_default_instance_);
}
inline const ::apollo::perception::inference::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_softmax_param(
    ::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.softmax_param_);
  }
  _impl_.softmax_param_ = softmax_param;
  if (softmax_param) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.softmax_param)
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::apollo::perception::inference::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::unsafe_arena_release_softmax_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.softmax_param)
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::apollo::perception::inference::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::_internal_mutable_softmax_param() {
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SoftmaxParameter>(GetArenaForAllocation());
    _impl_.softmax_param_ = p;
  }
  return _impl_.softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  ::apollo::perception::inference::SoftmaxParameter* _msg = _internal_mutable_softmax_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.softmax_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.softmax_param_;
  }
  if (softmax_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(softmax_param);
    if (message_arena != submessage_arena) {
      softmax_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.softmax_param)
}

// optional .apollo.perception.inference.SliceParameter slice_param = 31;
inline bool V1LayerParameter::_internal_has_slice_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slice_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_slice_param() const {
  return _internal_has_slice_param();
}
inline void V1LayerParameter::clear_slice_param() {
  if (_impl_.slice_param_ != nullptr) _impl_.slice_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::apollo::perception::inference::SliceParameter& V1LayerParameter::_internal_slice_param() const {
  const ::apollo::perception::inference::SliceParameter* p = _impl_.slice_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::SliceParameter&>(
      ::apollo::perception::inference::_SliceParameter_default_instance_);
}
inline const ::apollo::perception::inference::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_slice_param(
    ::apollo::perception::inference::SliceParameter* slice_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_param_);
  }
  _impl_.slice_param_ = slice_param;
  if (slice_param) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.slice_param)
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::release_slice_param() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::apollo::perception::inference::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::unsafe_arena_release_slice_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.slice_param)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::apollo::perception::inference::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::_internal_mutable_slice_param() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::SliceParameter>(GetArenaForAllocation());
    _impl_.slice_param_ = p;
  }
  return _impl_.slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::mutable_slice_param() {
  ::apollo::perception::inference::SliceParameter* _msg = _internal_mutable_slice_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.slice_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.slice_param_;
  }
  if (slice_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice_param);
    if (message_arena != submessage_arena) {
      slice_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.slice_param)
}

// optional .apollo.perception.inference.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::_internal_has_tanh_param() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tanh_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_tanh_param() const {
  return _internal_has_tanh_param();
}
inline void V1LayerParameter::clear_tanh_param() {
  if (_impl_.tanh_param_ != nullptr) _impl_.tanh_param_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::apollo::perception::inference::TanHParameter& V1LayerParameter::_internal_tanh_param() const {
  const ::apollo::perception::inference::TanHParameter* p = _impl_.tanh_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::TanHParameter&>(
      ::apollo::perception::inference::_TanHParameter_default_instance_);
}
inline const ::apollo::perception::inference::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_tanh_param(
    ::apollo::perception::inference::TanHParameter* tanh_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tanh_param_);
  }
  _impl_.tanh_param_ = tanh_param;
  if (tanh_param) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.tanh_param)
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::release_tanh_param() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::apollo::perception::inference::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::unsafe_arena_release_tanh_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.tanh_param)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::apollo::perception::inference::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::_internal_mutable_tanh_param() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::TanHParameter>(GetArenaForAllocation());
    _impl_.tanh_param_ = p;
  }
  return _impl_.tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  ::apollo::perception::inference::TanHParameter* _msg = _internal_mutable_tanh_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.tanh_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tanh_param_;
  }
  if (tanh_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tanh_param);
    if (message_arena != submessage_arena) {
      tanh_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.tanh_param)
}

// optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::_internal_has_threshold_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.threshold_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_threshold_param() const {
  return _internal_has_threshold_param();
}
inline void V1LayerParameter::clear_threshold_param() {
  if (_impl_.threshold_param_ != nullptr) _impl_.threshold_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::perception::inference::ThresholdParameter& V1LayerParameter::_internal_threshold_param() const {
  const ::apollo::perception::inference::ThresholdParameter* p = _impl_.threshold_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::ThresholdParameter&>(
      ::apollo::perception::inference::_ThresholdParameter_default_instance_);
}
inline const ::apollo::perception::inference::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_threshold_param(
    ::apollo::perception::inference::ThresholdParameter* threshold_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.threshold_param_);
  }
  _impl_.threshold_param_ = threshold_param;
  if (threshold_param) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.threshold_param)
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::perception::inference::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::unsafe_arena_release_threshold_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.threshold_param)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::perception::inference::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::_internal_mutable_threshold_param() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::ThresholdParameter>(GetArenaForAllocation());
    _impl_.threshold_param_ = p;
  }
  return _impl_.threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  ::apollo::perception::inference::ThresholdParameter* _msg = _internal_mutable_threshold_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.threshold_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.threshold_param_;
  }
  if (threshold_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(threshold_param);
    if (message_arena != submessage_arena) {
      threshold_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.threshold_param)
}

// optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::_internal_has_window_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_data_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_window_data_param() const {
  return _internal_has_window_data_param();
}
inline void V1LayerParameter::clear_window_data_param() {
  if (_impl_.window_data_param_ != nullptr) _impl_.window_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::perception::inference::WindowDataParameter& V1LayerParameter::_internal_window_data_param() const {
  const ::apollo::perception::inference::WindowDataParameter* p = _impl_.window_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::WindowDataParameter&>(
      ::apollo::perception::inference::_WindowDataParameter_default_instance_);
}
inline const ::apollo::perception::inference::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_window_data_param(
    ::apollo::perception::inference::WindowDataParameter* window_data_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_data_param_);
  }
  _impl_.window_data_param_ = window_data_param;
  if (window_data_param) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.window_data_param)
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::perception::inference::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::unsafe_arena_release_window_data_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.window_data_param)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::perception::inference::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::_internal_mutable_window_data_param() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::WindowDataParameter>(GetArenaForAllocation());
    _impl_.window_data_param_ = p;
  }
  return _impl_.window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  ::apollo::perception::inference::WindowDataParameter* _msg = _internal_mutable_window_data_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.window_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_data_param_;
  }
  if (window_data_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_data_param);
    if (message_arena != submessage_arena) {
      window_data_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.window_data_param)
}

// optional .apollo.perception.inference.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::_internal_has_transform_param() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_transform_param() const {
  return _internal_has_transform_param();
}
inline void V1LayerParameter::clear_transform_param() {
  if (_impl_.transform_param_ != nullptr) _impl_.transform_param_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::apollo::perception::inference::TransformationParameter& V1LayerParameter::_internal_transform_param() const {
  const ::apollo::perception::inference::TransformationParameter* p = _impl_.transform_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::TransformationParameter&>(
      ::apollo::perception::inference::_TransformationParameter_default_instance_);
}
inline const ::apollo::perception::inference::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_transform_param(
    ::apollo::perception::inference::TransformationParameter* transform_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_param_);
  }
  _impl_.transform_param_ = transform_param;
  if (transform_param) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.transform_param)
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::release_transform_param() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::apollo::perception::inference::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::unsafe_arena_release_transform_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.transform_param)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::apollo::perception::inference::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::_internal_mutable_transform_param() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::TransformationParameter>(GetArenaForAllocation());
    _impl_.transform_param_ = p;
  }
  return _impl_.transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  ::apollo::perception::inference::TransformationParameter* _msg = _internal_mutable_transform_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.transform_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_param_;
  }
  if (transform_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform_param);
    if (message_arena != submessage_arena) {
      transform_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.transform_param)
}

// optional .apollo.perception.inference.LossParameter loss_param = 42;
inline bool V1LayerParameter::_internal_has_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loss_param_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_loss_param() const {
  return _internal_has_loss_param();
}
inline void V1LayerParameter::clear_loss_param() {
  if (_impl_.loss_param_ != nullptr) _impl_.loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const ::apollo::perception::inference::LossParameter& V1LayerParameter::_internal_loss_param() const {
  const ::apollo::perception::inference::LossParameter* p = _impl_.loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::LossParameter&>(
      ::apollo::perception::inference::_LossParameter_default_instance_);
}
inline const ::apollo::perception::inference::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_loss_param(
    ::apollo::perception::inference::LossParameter* loss_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loss_param_);
  }
  _impl_.loss_param_ = loss_param;
  if (loss_param) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.loss_param)
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::release_loss_param() {
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::apollo::perception::inference::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::unsafe_arena_release_loss_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.loss_param)
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::apollo::perception::inference::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::_internal_mutable_loss_param() {
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::LossParameter>(GetArenaForAllocation());
    _impl_.loss_param_ = p;
  }
  return _impl_.loss_param_;
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::mutable_loss_param() {
  ::apollo::perception::inference::LossParameter* _msg = _internal_mutable_loss_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loss_param_;
  }
  if (loss_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loss_param);
    if (message_arena != submessage_arena) {
      loss_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.loss_param)
}

// optional .apollo.perception.inference.V0LayerParameter layer = 1;
inline bool V1LayerParameter::_internal_has_layer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layer_ != nullptr);
  return value;
}
inline bool V1LayerParameter::has_layer() const {
  return _internal_has_layer();
}
inline void V1LayerParameter::clear_layer() {
  if (_impl_.layer_ != nullptr) _impl_.layer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::V0LayerParameter& V1LayerParameter::_internal_layer() const {
  const ::apollo::perception::inference::V0LayerParameter* p = _impl_.layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::V0LayerParameter&>(
      ::apollo::perception::inference::_V0LayerParameter_default_instance_);
}
inline const ::apollo::perception::inference::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.layer)
  return _internal_layer();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_layer(
    ::apollo::perception::inference::V0LayerParameter* layer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer_);
  }
  _impl_.layer_ = layer;
  if (layer) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V1LayerParameter.layer)
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::release_layer() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::V0LayerParameter* temp = _impl_.layer_;
  _impl_.layer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::unsafe_arena_release_layer() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V1LayerParameter.layer)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::V0LayerParameter* temp = _impl_.layer_;
  _impl_.layer_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::_internal_mutable_layer() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::V0LayerParameter>(GetArenaForAllocation());
    _impl_.layer_ = p;
  }
  return _impl_.layer_;
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::mutable_layer() {
  ::apollo::perception::inference::V0LayerParameter* _msg = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.layer)
  return _msg;
}
inline void V1LayerParameter::set_allocated_layer(::apollo::perception::inference::V0LayerParameter* layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layer_;
  }
  if (layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer);
    if (message_arena != submessage_arena) {
      layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void V0LayerParameter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.name)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void V0LayerParameter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void V0LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void V0LayerParameter::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.type)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_type() const {
  return _impl_.type_.Get();
}
inline void V0LayerParameter::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void V0LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool V0LayerParameter::has_num_output() const {
  return _internal_has_num_output();
}
inline void V0LayerParameter::clear_num_output() {
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t V0LayerParameter::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.num_output)
  return _internal_num_output();
}
inline void V0LayerParameter::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.num_output_ = value;
}
inline void V0LayerParameter::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::_internal_has_biasterm() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_biasterm() const {
  return _internal_has_biasterm();
}
inline void V0LayerParameter::clear_biasterm() {
  _impl_.biasterm_ = true;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool V0LayerParameter::_internal_biasterm() const {
  return _impl_.biasterm_;
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.biasterm)
  return _internal_biasterm();
}
inline void V0LayerParameter::_internal_set_biasterm(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.biasterm_ = value;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  _internal_set_biasterm(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.biasterm)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::_internal_has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_weight_filler() const {
  return _internal_has_weight_filler();
}
inline void V0LayerParameter::clear_weight_filler() {
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::_internal_weight_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.weight_filler)
  return _internal_weight_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_weight_filler(
    ::apollo::perception::inference::FillerParameter* weight_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = weight_filler;
  if (weight_filler) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V0LayerParameter.weight_filler)
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::release_weight_filler() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::unsafe_arena_release_weight_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.weight_filler)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::_internal_mutable_weight_filler() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.weight_filler_ = p;
  }
  return _impl_.weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.weight_filler)
  return _msg;
}
inline void V0LayerParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_filler_;
  }
  if (weight_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_filler);
    if (message_arena != submessage_arena) {
      weight_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::_internal_has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_bias_filler() const {
  return _internal_has_bias_filler();
}
inline void V0LayerParameter::clear_bias_filler() {
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::_internal_bias_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.bias_filler)
  return _internal_bias_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_bias_filler(
    ::apollo::perception::inference::FillerParameter* bias_filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = bias_filler;
  if (bias_filler) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V0LayerParameter.bias_filler)
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::release_bias_filler() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::unsafe_arena_release_bias_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.bias_filler)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::_internal_mutable_bias_filler() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.bias_filler_ = p;
  }
  return _impl_.bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.bias_filler)
  return _msg;
}
inline void V0LayerParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_filler_;
  }
  if (bias_filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias_filler);
    if (message_arena != submessage_arena) {
      bias_filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::_internal_has_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pad() const {
  return _internal_has_pad();
}
inline void V0LayerParameter::clear_pad() {
  _impl_.pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t V0LayerParameter::_internal_pad() const {
  return _impl_.pad_;
}
inline uint32_t V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.pad)
  return _internal_pad();
}
inline void V0LayerParameter::_internal_set_pad(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pad_ = value;
}
inline void V0LayerParameter::set_pad(uint32_t value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::_internal_has_kernelsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool V0LayerParameter::has_kernelsize() const {
  return _internal_has_kernelsize();
}
inline void V0LayerParameter::clear_kernelsize() {
  _impl_.kernelsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t V0LayerParameter::_internal_kernelsize() const {
  return _impl_.kernelsize_;
}
inline uint32_t V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.kernelsize)
  return _internal_kernelsize();
}
inline void V0LayerParameter::_internal_set_kernelsize(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.kernelsize_ = value;
}
inline void V0LayerParameter::set_kernelsize(uint32_t value) {
  _internal_set_kernelsize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_group() const {
  return _internal_has_group();
}
inline void V0LayerParameter::clear_group() {
  _impl_.group_ = 1u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t V0LayerParameter::_internal_group() const {
  return _impl_.group_;
}
inline uint32_t V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.group)
  return _internal_group();
}
inline void V0LayerParameter::_internal_set_group(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.group_ = value;
}
inline void V0LayerParameter::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::_internal_has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_stride() const {
  return _internal_has_stride();
}
inline void V0LayerParameter::clear_stride() {
  _impl_.stride_ = 1u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t V0LayerParameter::_internal_stride() const {
  return _impl_.stride_;
}
inline uint32_t V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.stride)
  return _internal_stride();
}
inline void V0LayerParameter::_internal_set_stride(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.stride_ = value;
}
inline void V0LayerParameter::set_stride(uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.stride)
}

// optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::_internal_has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool V0LayerParameter::has_pool() const {
  return _internal_has_pool();
}
inline void V0LayerParameter::clear_pool() {
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::perception::inference::V0LayerParameter_PoolMethod V0LayerParameter::_internal_pool() const {
  return static_cast< ::apollo::perception::inference::V0LayerParameter_PoolMethod >(_impl_.pool_);
}
inline ::apollo::perception::inference::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.pool)
  return _internal_pool();
}
inline void V0LayerParameter::_internal_set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value) {
  assert(::apollo::perception::inference::V0LayerParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.pool_ = value;
}
inline void V0LayerParameter::set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::_internal_has_dropout_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_dropout_ratio() const {
  return _internal_has_dropout_ratio();
}
inline void V0LayerParameter::clear_dropout_ratio() {
  _impl_.dropout_ratio_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float V0LayerParameter::_internal_dropout_ratio() const {
  return _impl_.dropout_ratio_;
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void V0LayerParameter::_internal_set_dropout_ratio(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.dropout_ratio_ = value;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::_internal_has_local_size() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_local_size() const {
  return _internal_has_local_size();
}
inline void V0LayerParameter::clear_local_size() {
  _impl_.local_size_ = 5u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t V0LayerParameter::_internal_local_size() const {
  return _impl_.local_size_;
}
inline uint32_t V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.local_size)
  return _internal_local_size();
}
inline void V0LayerParameter::_internal_set_local_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.local_size_ = value;
}
inline void V0LayerParameter::set_local_size(uint32_t value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_alpha() const {
  return _internal_has_alpha();
}
inline void V0LayerParameter::clear_alpha() {
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float V0LayerParameter::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.alpha)
  return _internal_alpha();
}
inline void V0LayerParameter::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.alpha_ = value;
}
inline void V0LayerParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::_internal_has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_beta() const {
  return _internal_has_beta();
}
inline void V0LayerParameter::clear_beta() {
  _impl_.beta_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float V0LayerParameter::_internal_beta() const {
  return _impl_.beta_;
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.beta)
  return _internal_beta();
}
inline void V0LayerParameter::_internal_set_beta(float value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.beta_ = value;
}
inline void V0LayerParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::_internal_has_k() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_k() const {
  return _internal_has_k();
}
inline void V0LayerParameter::clear_k() {
  _impl_.k_ = 1;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float V0LayerParameter::_internal_k() const {
  return _impl_.k_;
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.k)
  return _internal_k();
}
inline void V0LayerParameter::_internal_set_k(float value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.k_ = value;
}
inline void V0LayerParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool V0LayerParameter::has_source() const {
  return _internal_has_source();
}
inline void V0LayerParameter::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.source)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_source() const {
  return _impl_.source_.Get();
}
inline void V0LayerParameter::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void V0LayerParameter::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_scale() const {
  return _internal_has_scale();
}
inline void V0LayerParameter::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float V0LayerParameter::_internal_scale() const {
  return _impl_.scale_;
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.scale)
  return _internal_scale();
}
inline void V0LayerParameter::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.scale_ = value;
}
inline void V0LayerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::_internal_has_meanfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool V0LayerParameter::has_meanfile() const {
  return _internal_has_meanfile();
}
inline void V0LayerParameter::clear_meanfile() {
  _impl_.meanfile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.meanfile)
  return _internal_meanfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_meanfile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.meanfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::mutable_meanfile() {
  std::string* _s = _internal_mutable_meanfile();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.meanfile)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_meanfile() const {
  return _impl_.meanfile_.Get();
}
inline void V0LayerParameter::_internal_set_meanfile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.meanfile_.Set(value, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::_internal_mutable_meanfile() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.meanfile_.Mutable(GetArenaForAllocation());
}
inline std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.meanfile)
  if (!_internal_has_meanfile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.meanfile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meanfile_.IsDefault()) {
    _impl_.meanfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void V0LayerParameter::set_allocated_meanfile(std::string* meanfile) {
  if (meanfile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.meanfile_.SetAllocated(meanfile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meanfile_.IsDefault()) {
    _impl_.meanfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::_internal_has_batchsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_batchsize() const {
  return _internal_has_batchsize();
}
inline void V0LayerParameter::clear_batchsize() {
  _impl_.batchsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t V0LayerParameter::_internal_batchsize() const {
  return _impl_.batchsize_;
}
inline uint32_t V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.batchsize)
  return _internal_batchsize();
}
inline void V0LayerParameter::_internal_set_batchsize(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.batchsize_ = value;
}
inline void V0LayerParameter::set_batchsize(uint32_t value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::_internal_has_cropsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_cropsize() const {
  return _internal_has_cropsize();
}
inline void V0LayerParameter::clear_cropsize() {
  _impl_.cropsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t V0LayerParameter::_internal_cropsize() const {
  return _impl_.cropsize_;
}
inline uint32_t V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.cropsize)
  return _internal_cropsize();
}
inline void V0LayerParameter::_internal_set_cropsize(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.cropsize_ = value;
}
inline void V0LayerParameter::set_cropsize(uint32_t value) {
  _internal_set_cropsize(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_mirror() const {
  return _internal_has_mirror();
}
inline void V0LayerParameter::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool V0LayerParameter::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.mirror)
  return _internal_mirror();
}
inline void V0LayerParameter::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.mirror_ = value;
}
inline void V0LayerParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.mirror)
}

// repeated .apollo.perception.inference.BlobProto blobs = 50;
inline int V0LayerParameter::_internal_blobs_size() const {
  return _impl_.blobs_.size();
}
inline int V0LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V0LayerParameter::clear_blobs() {
  _impl_.blobs_.Clear();
}
inline ::apollo::perception::inference::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.blobs)
  return _impl_.blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.blobs)
  return &_impl_.blobs_;
}
inline const ::apollo::perception::inference::BlobProto& V0LayerParameter::_internal_blobs(int index) const {
  return _impl_.blobs_.Get(index);
}
inline const ::apollo::perception::inference::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.blobs)
  return _internal_blobs(index);
}
inline ::apollo::perception::inference::BlobProto* V0LayerParameter::_internal_add_blobs() {
  return _impl_.blobs_.Add();
}
inline ::apollo::perception::inference::BlobProto* V0LayerParameter::add_blobs() {
  ::apollo::perception::inference::BlobProto* _add = _internal_add_blobs();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.blobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.blobs)
  return _impl_.blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::_internal_blobs_lr_size() const {
  return _impl_.blobs_lr_.size();
}
inline int V0LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  _impl_.blobs_lr_.Clear();
}
inline float V0LayerParameter::_internal_blobs_lr(int index) const {
  return _impl_.blobs_lr_.Get(index);
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  _impl_.blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::_internal_add_blobs_lr(float value) {
  _impl_.blobs_lr_.Add(value);
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  _internal_add_blobs_lr(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.blobs_lr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_blobs_lr() const {
  return _impl_.blobs_lr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_blobs_lr() {
  return &_impl_.blobs_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return _internal_mutable_blobs_lr();
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::_internal_weight_decay_size() const {
  return _impl_.weight_decay_.size();
}
inline int V0LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V0LayerParameter::clear_weight_decay() {
  _impl_.weight_decay_.Clear();
}
inline float V0LayerParameter::_internal_weight_decay(int index) const {
  return _impl_.weight_decay_.Get(index);
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.weight_decay)
  return _internal_weight_decay(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  _impl_.weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::_internal_add_weight_decay(float value) {
  _impl_.weight_decay_.Add(value);
}
inline void V0LayerParameter::add_weight_decay(float value) {
  _internal_add_weight_decay(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.weight_decay)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::_internal_weight_decay() const {
  return _impl_.weight_decay_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::_internal_mutable_weight_decay() {
  return &_impl_.weight_decay_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.weight_decay)
  return _internal_mutable_weight_decay();
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::_internal_has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_rand_skip() const {
  return _internal_has_rand_skip();
}
inline void V0LayerParameter::clear_rand_skip() {
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t V0LayerParameter::_internal_rand_skip() const {
  return _impl_.rand_skip_;
}
inline uint32_t V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.rand_skip)
  return _internal_rand_skip();
}
inline void V0LayerParameter::_internal_set_rand_skip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.rand_skip_ = value;
}
inline void V0LayerParameter::set_rand_skip(uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_fg_threshold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return _internal_has_det_fg_threshold();
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  _impl_.det_fg_threshold_ = 0.5f;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float V0LayerParameter::_internal_det_fg_threshold() const {
  return _impl_.det_fg_threshold_;
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_fg_threshold)
  return _internal_det_fg_threshold();
}
inline void V0LayerParameter::_internal_set_det_fg_threshold(float value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.det_fg_threshold_ = value;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  _internal_set_det_fg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::_internal_has_det_bg_threshold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return _internal_has_det_bg_threshold();
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  _impl_.det_bg_threshold_ = 0.5f;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline float V0LayerParameter::_internal_det_bg_threshold() const {
  return _impl_.det_bg_threshold_;
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_bg_threshold)
  return _internal_det_bg_threshold();
}
inline void V0LayerParameter::_internal_set_det_bg_threshold(float value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.det_bg_threshold_ = value;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  _internal_set_det_bg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::_internal_has_det_fg_fraction() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return _internal_has_det_fg_fraction();
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  _impl_.det_fg_fraction_ = 0.25f;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float V0LayerParameter::_internal_det_fg_fraction() const {
  return _impl_.det_fg_fraction_;
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_fg_fraction)
  return _internal_det_fg_fraction();
}
inline void V0LayerParameter::_internal_set_det_fg_fraction(float value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.det_fg_fraction_ = value;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  _internal_set_det_fg_fraction(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::_internal_has_det_context_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_context_pad() const {
  return _internal_has_det_context_pad();
}
inline void V0LayerParameter::clear_det_context_pad() {
  _impl_.det_context_pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t V0LayerParameter::_internal_det_context_pad() const {
  return _impl_.det_context_pad_;
}
inline uint32_t V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_context_pad)
  return _internal_det_context_pad();
}
inline void V0LayerParameter::_internal_set_det_context_pad(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.det_context_pad_ = value;
}
inline void V0LayerParameter::set_det_context_pad(uint32_t value) {
  _internal_set_det_context_pad(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::_internal_has_det_crop_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool V0LayerParameter::has_det_crop_mode() const {
  return _internal_has_det_crop_mode();
}
inline void V0LayerParameter::clear_det_crop_mode() {
  _impl_.det_crop_mode_.ClearToDefault(::apollo::perception::inference::V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_crop_mode)
  if (_impl_.det_crop_mode_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_.get();
  return _internal_det_crop_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V0LayerParameter::set_det_crop_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.det_crop_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::mutable_det_crop_mode() {
  std::string* _s = _internal_mutable_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.det_crop_mode)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_det_crop_mode() const {
  return _impl_.det_crop_mode_.Get();
}
inline void V0LayerParameter::_internal_set_det_crop_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.det_crop_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::_internal_mutable_det_crop_mode() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.det_crop_mode_.Mutable(::apollo::perception::inference::V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArenaForAllocation());
}
inline std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.det_crop_mode)
  if (!_internal_has_det_crop_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.det_crop_mode_.Release();
  return p;
}
inline void V0LayerParameter::set_allocated_det_crop_mode(std::string* det_crop_mode) {
  if (det_crop_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.det_crop_mode_.SetAllocated(det_crop_mode, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::_internal_has_new_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_num() const {
  return _internal_has_new_num();
}
inline void V0LayerParameter::clear_new_num() {
  _impl_.new_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t V0LayerParameter::_internal_new_num() const {
  return _impl_.new_num_;
}
inline int32_t V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_num)
  return _internal_new_num();
}
inline void V0LayerParameter::_internal_set_new_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.new_num_ = value;
}
inline void V0LayerParameter::set_new_num(int32_t value) {
  _internal_set_new_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::_internal_has_new_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_channels() const {
  return _internal_has_new_channels();
}
inline void V0LayerParameter::clear_new_channels() {
  _impl_.new_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t V0LayerParameter::_internal_new_channels() const {
  return _impl_.new_channels_;
}
inline int32_t V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_channels)
  return _internal_new_channels();
}
inline void V0LayerParameter::_internal_set_new_channels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.new_channels_ = value;
}
inline void V0LayerParameter::set_new_channels(int32_t value) {
  _internal_set_new_channels(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::_internal_has_new_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_height() const {
  return _internal_has_new_height();
}
inline void V0LayerParameter::clear_new_height() {
  _impl_.new_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t V0LayerParameter::_internal_new_height() const {
  return _impl_.new_height_;
}
inline int32_t V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_height)
  return _internal_new_height();
}
inline void V0LayerParameter::_internal_set_new_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.new_height_ = value;
}
inline void V0LayerParameter::set_new_height(int32_t value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::_internal_has_new_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_new_width() const {
  return _internal_has_new_width();
}
inline void V0LayerParameter::clear_new_width() {
  _impl_.new_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t V0LayerParameter::_internal_new_width() const {
  return _impl_.new_width_;
}
inline int32_t V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_width)
  return _internal_new_width();
}
inline void V0LayerParameter::_internal_set_new_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.new_width_ = value;
}
inline void V0LayerParameter::set_new_width(int32_t value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::_internal_has_shuffle_images() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_shuffle_images() const {
  return _internal_has_shuffle_images();
}
inline void V0LayerParameter::clear_shuffle_images() {
  _impl_.shuffle_images_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool V0LayerParameter::_internal_shuffle_images() const {
  return _impl_.shuffle_images_;
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.shuffle_images)
  return _internal_shuffle_images();
}
inline void V0LayerParameter::_internal_set_shuffle_images(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.shuffle_images_ = value;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  _internal_set_shuffle_images(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::_internal_has_concat_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool V0LayerParameter::has_concat_dim() const {
  return _internal_has_concat_dim();
}
inline void V0LayerParameter::clear_concat_dim() {
  _impl_.concat_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t V0LayerParameter::_internal_concat_dim() const {
  return _impl_.concat_dim_;
}
inline uint32_t V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.concat_dim)
  return _internal_concat_dim();
}
inline void V0LayerParameter::_internal_set_concat_dim(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.concat_dim_ = value;
}
inline void V0LayerParameter::set_concat_dim(uint32_t value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.concat_dim)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::_internal_has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return _internal_has_hdf5_output_param();
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V0LayerParameter::_internal_hdf5_output_param() const {
  const ::apollo::perception::inference::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::HDF5OutputParameter&>(
      ::apollo::perception::inference::_HDF5OutputParameter_default_instance_);
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(
    ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::unsafe_arena_release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::inference::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::_internal_mutable_hdf5_output_param() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::HDF5OutputParameter>(GetArenaForAllocation());
    _impl_.hdf5_output_param_ = p;
  }
  return _impl_.hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  ::apollo::perception::inference::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
  return _msg;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hdf5_output_param);
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .apollo.perception.inference.FillerParameter filler = 1;
inline bool PReLUParameter::_internal_has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline bool PReLUParameter::has_filler() const {
  return _internal_has_filler();
}
inline void PReLUParameter::clear_filler() {
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::FillerParameter& PReLUParameter::_internal_filler() const {
  const ::apollo::perception::inference::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::FillerParameter&>(
      ::apollo::perception::inference::_FillerParameter_default_instance_);
}
inline const ::apollo::perception::inference::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PReLUParameter.filler)
  return _internal_filler();
}
inline void PReLUParameter::unsafe_arena_set_allocated_filler(
    ::apollo::perception::inference::FillerParameter* filler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = filler;
  if (filler) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.PReLUParameter.filler)
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::release_filler() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::unsafe_arena_release_filler() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.PReLUParameter.filler)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::_internal_mutable_filler() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::FillerParameter>(GetArenaForAllocation());
    _impl_.filler_ = p;
  }
  return _impl_.filler_;
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::mutable_filler() {
  ::apollo::perception::inference::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PReLUParameter.filler)
  return _msg;
}
inline void PReLUParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filler_;
  }
  if (filler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filler);
    if (message_arena != submessage_arena) {
      filler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::_internal_has_channel_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PReLUParameter::has_channel_shared() const {
  return _internal_has_channel_shared();
}
inline void PReLUParameter::clear_channel_shared() {
  _impl_.channel_shared_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PReLUParameter::_internal_channel_shared() const {
  return _impl_.channel_shared_;
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PReLUParameter.channel_shared)
  return _internal_channel_shared();
}
inline void PReLUParameter::_internal_set_channel_shared(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_shared_ = value;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PReLUParameter.channel_shared)
}

// -------------------------------------------------------------------

// PaddingParameter

// optional uint32 pad_t = 1 [default = 0];
inline bool PaddingParameter::_internal_has_pad_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PaddingParameter::has_pad_t() const {
  return _internal_has_pad_t();
}
inline void PaddingParameter::clear_pad_t() {
  _impl_.pad_t_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PaddingParameter::_internal_pad_t() const {
  return _impl_.pad_t_;
}
inline uint32_t PaddingParameter::pad_t() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_t)
  return _internal_pad_t();
}
inline void PaddingParameter::_internal_set_pad_t(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pad_t_ = value;
}
inline void PaddingParameter::set_pad_t(uint32_t value) {
  _internal_set_pad_t(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_t)
}

// optional uint32 pad_b = 2 [default = 0];
inline bool PaddingParameter::_internal_has_pad_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PaddingParameter::has_pad_b() const {
  return _internal_has_pad_b();
}
inline void PaddingParameter::clear_pad_b() {
  _impl_.pad_b_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PaddingParameter::_internal_pad_b() const {
  return _impl_.pad_b_;
}
inline uint32_t PaddingParameter::pad_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_b)
  return _internal_pad_b();
}
inline void PaddingParameter::_internal_set_pad_b(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pad_b_ = value;
}
inline void PaddingParameter::set_pad_b(uint32_t value) {
  _internal_set_pad_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_b)
}

// optional uint32 pad_l = 3 [default = 0];
inline bool PaddingParameter::_internal_has_pad_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PaddingParameter::has_pad_l() const {
  return _internal_has_pad_l();
}
inline void PaddingParameter::clear_pad_l() {
  _impl_.pad_l_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PaddingParameter::_internal_pad_l() const {
  return _impl_.pad_l_;
}
inline uint32_t PaddingParameter::pad_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_l)
  return _internal_pad_l();
}
inline void PaddingParameter::_internal_set_pad_l(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pad_l_ = value;
}
inline void PaddingParameter::set_pad_l(uint32_t value) {
  _internal_set_pad_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_l)
}

// optional uint32 pad_r = 4 [default = 0];
inline bool PaddingParameter::_internal_has_pad_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PaddingParameter::has_pad_r() const {
  return _internal_has_pad_r();
}
inline void PaddingParameter::clear_pad_r() {
  _impl_.pad_r_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PaddingParameter::_internal_pad_r() const {
  return _impl_.pad_r_;
}
inline uint32_t PaddingParameter::pad_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_r)
  return _internal_pad_r();
}
inline void PaddingParameter::_internal_set_pad_r(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pad_r_ = value;
}
inline void PaddingParameter::set_pad_r(uint32_t value) {
  _internal_set_pad_r(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_r)
}

// optional float val = 5 [default = 0];
inline bool PaddingParameter::_internal_has_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PaddingParameter::has_val() const {
  return _internal_has_val();
}
inline void PaddingParameter::clear_val() {
  _impl_.val_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PaddingParameter::_internal_val() const {
  return _impl_.val_;
}
inline float PaddingParameter::val() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.val)
  return _internal_val();
}
inline void PaddingParameter::_internal_set_val(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.val_ = value;
}
inline void PaddingParameter::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.val)
}

// -------------------------------------------------------------------

// YoloLossParameter

// optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
inline bool YoloLossParameter::_internal_has_reg_loss_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YoloLossParameter::has_reg_loss_type() const {
  return _internal_has_reg_loss_type();
}
inline void YoloLossParameter::clear_reg_loss_type() {
  _impl_.reg_loss_type_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::inference::YoloLossParameter_RegLossType YoloLossParameter::_internal_reg_loss_type() const {
  return static_cast< ::apollo::perception::inference::YoloLossParameter_RegLossType >(_impl_.reg_loss_type_);
}
inline ::apollo::perception::inference::YoloLossParameter_RegLossType YoloLossParameter::reg_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloLossParameter.reg_loss_type)
  return _internal_reg_loss_type();
}
inline void YoloLossParameter::_internal_set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value) {
  assert(::apollo::perception::inference::YoloLossParameter_RegLossType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reg_loss_type_ = value;
}
inline void YoloLossParameter::set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value) {
  _internal_set_reg_loss_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloLossParameter.reg_loss_type)
}

// optional int32 target_axis = 2 [default = -1];
inline bool YoloLossParameter::_internal_has_target_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool YoloLossParameter::has_target_axis() const {
  return _internal_has_target_axis();
}
inline void YoloLossParameter::clear_target_axis() {
  _impl_.target_axis_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t YoloLossParameter::_internal_target_axis() const {
  return _impl_.target_axis_;
}
inline int32_t YoloLossParameter::target_axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloLossParameter.target_axis)
  return _internal_target_axis();
}
inline void YoloLossParameter::_internal_set_target_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_axis_ = value;
}
inline void YoloLossParameter::set_target_axis(int32_t value) {
  _internal_set_target_axis(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloLossParameter.target_axis)
}

// -------------------------------------------------------------------

// YoloDumpParameter

// optional string dump_dir = 1;
inline bool YoloDumpParameter::_internal_has_dump_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YoloDumpParameter::has_dump_dir() const {
  return _internal_has_dump_dir();
}
inline void YoloDumpParameter::clear_dump_dir() {
  _impl_.dump_dir_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& YoloDumpParameter::dump_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloDumpParameter.dump_dir)
  return _internal_dump_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void YoloDumpParameter::set_dump_dir(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.dump_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloDumpParameter.dump_dir)
}
inline std::string* YoloDumpParameter::mutable_dump_dir() {
  std::string* _s = _internal_mutable_dump_dir();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloDumpParameter.dump_dir)
  return _s;
}
inline const std::string& YoloDumpParameter::_internal_dump_dir() const {
  return _impl_.dump_dir_.Get();
}
inline void YoloDumpParameter::_internal_set_dump_dir(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dump_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* YoloDumpParameter::_internal_mutable_dump_dir() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dump_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* YoloDumpParameter::release_dump_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.YoloDumpParameter.dump_dir)
  if (!_internal_has_dump_dir()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.dump_dir_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dump_dir_.IsDefault()) {
    _impl_.dump_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void YoloDumpParameter::set_allocated_dump_dir(std::string* dump_dir) {
  if (dump_dir != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dump_dir_.SetAllocated(dump_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dump_dir_.IsDefault()) {
    _impl_.dump_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.YoloDumpParameter.dump_dir)
}

// -------------------------------------------------------------------

// YoloAnchorsParameter

// optional string anchors_file = 1;
inline bool YoloAnchorsParameter::_internal_has_anchors_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YoloAnchorsParameter::has_anchors_file() const {
  return _internal_has_anchors_file();
}
inline void YoloAnchorsParameter::clear_anchors_file() {
  _impl_.anchors_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& YoloAnchorsParameter::anchors_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
  return _internal_anchors_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void YoloAnchorsParameter::set_anchors_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.anchors_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}
inline std::string* YoloAnchorsParameter::mutable_anchors_file() {
  std::string* _s = _internal_mutable_anchors_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
  return _s;
}
inline const std::string& YoloAnchorsParameter::_internal_anchors_file() const {
  return _impl_.anchors_file_.Get();
}
inline void YoloAnchorsParameter::_internal_set_anchors_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.anchors_file_.Set(value, GetArenaForAllocation());
}
inline std::string* YoloAnchorsParameter::_internal_mutable_anchors_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.anchors_file_.Mutable(GetArenaForAllocation());
}
inline std::string* YoloAnchorsParameter::release_anchors_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
  if (!_internal_has_anchors_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.anchors_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anchors_file_.IsDefault()) {
    _impl_.anchors_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void YoloAnchorsParameter::set_allocated_anchors_file(std::string* anchors_file) {
  if (anchors_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.anchors_file_.SetAllocated(anchors_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anchors_file_.IsDefault()) {
    _impl_.anchors_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}

// optional int32 ref_w = 2 [default = 1];
inline bool YoloAnchorsParameter::_internal_has_ref_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool YoloAnchorsParameter::has_ref_w() const {
  return _internal_has_ref_w();
}
inline void YoloAnchorsParameter::clear_ref_w() {
  _impl_.ref_w_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t YoloAnchorsParameter::_internal_ref_w() const {
  return _impl_.ref_w_;
}
inline int32_t YoloAnchorsParameter::ref_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.ref_w)
  return _internal_ref_w();
}
inline void YoloAnchorsParameter::_internal_set_ref_w(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ref_w_ = value;
}
inline void YoloAnchorsParameter::set_ref_w(int32_t value) {
  _internal_set_ref_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.ref_w)
}

// optional int32 ref_h = 3 [default = 1];
inline bool YoloAnchorsParameter::_internal_has_ref_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool YoloAnchorsParameter::has_ref_h() const {
  return _internal_has_ref_h();
}
inline void YoloAnchorsParameter::clear_ref_h() {
  _impl_.ref_h_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t YoloAnchorsParameter::_internal_ref_h() const {
  return _impl_.ref_h_;
}
inline int32_t YoloAnchorsParameter::ref_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.ref_h)
  return _internal_ref_h();
}
inline void YoloAnchorsParameter::_internal_set_ref_h(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ref_h_ = value;
}
inline void YoloAnchorsParameter::set_ref_h(int32_t value) {
  _internal_set_ref_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.ref_h)
}

// -------------------------------------------------------------------

// DimensionStatistics

// optional float mean_h = 1 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_h() const {
  return _internal_has_mean_h();
}
inline void DimensionStatistics::clear_mean_h() {
  _impl_.mean_h_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DimensionStatistics::_internal_mean_h() const {
  return _impl_.mean_h_;
}
inline float DimensionStatistics::mean_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_h)
  return _internal_mean_h();
}
inline void DimensionStatistics::_internal_set_mean_h(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_h_ = value;
}
inline void DimensionStatistics::set_mean_h(float value) {
  _internal_set_mean_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_h)
}

// optional float mean_w = 2 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_w() const {
  return _internal_has_mean_w();
}
inline void DimensionStatistics::clear_mean_w() {
  _impl_.mean_w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DimensionStatistics::_internal_mean_w() const {
  return _impl_.mean_w_;
}
inline float DimensionStatistics::mean_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_w)
  return _internal_mean_w();
}
inline void DimensionStatistics::_internal_set_mean_w(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_w_ = value;
}
inline void DimensionStatistics::set_mean_w(float value) {
  _internal_set_mean_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_w)
}

// optional float mean_l = 3 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_l() const {
  return _internal_has_mean_l();
}
inline void DimensionStatistics::clear_mean_l() {
  _impl_.mean_l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DimensionStatistics::_internal_mean_l() const {
  return _impl_.mean_l_;
}
inline float DimensionStatistics::mean_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_l)
  return _internal_mean_l();
}
inline void DimensionStatistics::_internal_set_mean_l(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mean_l_ = value;
}
inline void DimensionStatistics::set_mean_l(float value) {
  _internal_set_mean_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_l)
}

// optional float std_h = 4 [default = 1];
inline bool DimensionStatistics::_internal_has_std_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_h() const {
  return _internal_has_std_h();
}
inline void DimensionStatistics::clear_std_h() {
  _impl_.std_h_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DimensionStatistics::_internal_std_h() const {
  return _impl_.std_h_;
}
inline float DimensionStatistics::std_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_h)
  return _internal_std_h();
}
inline void DimensionStatistics::_internal_set_std_h(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.std_h_ = value;
}
inline void DimensionStatistics::set_std_h(float value) {
  _internal_set_std_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_h)
}

// optional float std_w = 5 [default = 1];
inline bool DimensionStatistics::_internal_has_std_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_w() const {
  return _internal_has_std_w();
}
inline void DimensionStatistics::clear_std_w() {
  _impl_.std_w_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float DimensionStatistics::_internal_std_w() const {
  return _impl_.std_w_;
}
inline float DimensionStatistics::std_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_w)
  return _internal_std_w();
}
inline void DimensionStatistics::_internal_set_std_w(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.std_w_ = value;
}
inline void DimensionStatistics::set_std_w(float value) {
  _internal_set_std_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_w)
}

// optional float std_l = 6 [default = 1];
inline bool DimensionStatistics::_internal_has_std_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_l() const {
  return _internal_has_std_l();
}
inline void DimensionStatistics::clear_std_l() {
  _impl_.std_l_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DimensionStatistics::_internal_std_l() const {
  return _impl_.std_l_;
}
inline float DimensionStatistics::std_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_l)
  return _internal_std_l();
}
inline void DimensionStatistics::_internal_set_std_l(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.std_l_ = value;
}
inline void DimensionStatistics::set_std_l(float value) {
  _internal_set_std_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_l)
}

// -------------------------------------------------------------------

// YoloTargetParameter

// optional float neg_rois_ratio = 1 [default = 1];
inline bool YoloTargetParameter::_internal_has_neg_rois_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_neg_rois_ratio() const {
  return _internal_has_neg_rois_ratio();
}
inline void YoloTargetParameter::clear_neg_rois_ratio() {
  _impl_.neg_rois_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float YoloTargetParameter::_internal_neg_rois_ratio() const {
  return _impl_.neg_rois_ratio_;
}
inline float YoloTargetParameter::neg_rois_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.neg_rois_ratio)
  return _internal_neg_rois_ratio();
}
inline void YoloTargetParameter::_internal_set_neg_rois_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.neg_rois_ratio_ = value;
}
inline void YoloTargetParameter::set_neg_rois_ratio(float value) {
  _internal_set_neg_rois_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.neg_rois_ratio)
}

// optional float ign_threshold = 2 [default = 0.6];
inline bool YoloTargetParameter::_internal_has_ign_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_ign_threshold() const {
  return _internal_has_ign_threshold();
}
inline void YoloTargetParameter::clear_ign_threshold() {
  _impl_.ign_threshold_ = 0.6f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float YoloTargetParameter::_internal_ign_threshold() const {
  return _impl_.ign_threshold_;
}
inline float YoloTargetParameter::ign_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.ign_threshold)
  return _internal_ign_threshold();
}
inline void YoloTargetParameter::_internal_set_ign_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ign_threshold_ = value;
}
inline void YoloTargetParameter::set_ign_threshold(float value) {
  _internal_set_ign_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.ign_threshold)
}

// optional float neg_threshold = 3 [default = 0.1];
inline bool YoloTargetParameter::_internal_has_neg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_neg_threshold() const {
  return _internal_has_neg_threshold();
}
inline void YoloTargetParameter::clear_neg_threshold() {
  _impl_.neg_threshold_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float YoloTargetParameter::_internal_neg_threshold() const {
  return _impl_.neg_threshold_;
}
inline float YoloTargetParameter::neg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.neg_threshold)
  return _internal_neg_threshold();
}
inline void YoloTargetParameter::_internal_set_neg_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.neg_threshold_ = value;
}
inline void YoloTargetParameter::set_neg_threshold(float value) {
  _internal_set_neg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.neg_threshold)
}

// optional float min_height = 4 [default = 0.05];
inline bool YoloTargetParameter::_internal_has_min_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_min_height() const {
  return _internal_has_min_height();
}
inline void YoloTargetParameter::clear_min_height() {
  _impl_.min_height_ = 0.05f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float YoloTargetParameter::_internal_min_height() const {
  return _impl_.min_height_;
}
inline float YoloTargetParameter::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.min_height)
  return _internal_min_height();
}
inline void YoloTargetParameter::_internal_set_min_height(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_height_ = value;
}
inline void YoloTargetParameter::set_min_height(float value) {
  _internal_set_min_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.min_height)
}

// optional bool bias_match = 5 [default = true];
inline bool YoloTargetParameter::_internal_has_bias_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_bias_match() const {
  return _internal_has_bias_match();
}
inline void YoloTargetParameter::clear_bias_match() {
  _impl_.bias_match_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool YoloTargetParameter::_internal_bias_match() const {
  return _impl_.bias_match_;
}
inline bool YoloTargetParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.bias_match)
  return _internal_bias_match();
}
inline void YoloTargetParameter::_internal_set_bias_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bias_match_ = value;
}
inline void YoloTargetParameter::set_bias_match(bool value) {
  _internal_set_bias_match(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.bias_match)
}

// optional bool rescore = 6 [default = true];
inline bool YoloTargetParameter::_internal_has_rescore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_rescore() const {
  return _internal_has_rescore();
}
inline void YoloTargetParameter::clear_rescore() {
  _impl_.rescore_ = true;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool YoloTargetParameter::_internal_rescore() const {
  return _impl_.rescore_;
}
inline bool YoloTargetParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.rescore)
  return _internal_rescore();
}
inline void YoloTargetParameter::_internal_set_rescore(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rescore_ = value;
}
inline void YoloTargetParameter::set_rescore(bool value) {
  _internal_set_rescore(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.rescore)
}

// optional int32 ori_cyc = 7 [default = 1];
inline bool YoloTargetParameter::_internal_has_ori_cyc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_ori_cyc() const {
  return _internal_has_ori_cyc();
}
inline void YoloTargetParameter::clear_ori_cyc() {
  _impl_.ori_cyc_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t YoloTargetParameter::_internal_ori_cyc() const {
  return _impl_.ori_cyc_;
}
inline int32_t YoloTargetParameter::ori_cyc() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.ori_cyc)
  return _internal_ori_cyc();
}
inline void YoloTargetParameter::_internal_set_ori_cyc(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ori_cyc_ = value;
}
inline void YoloTargetParameter::set_ori_cyc(int32_t value) {
  _internal_set_ori_cyc(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.ori_cyc)
}

// optional float obj_weight = 8 [default = 10];
inline bool YoloTargetParameter::_internal_has_obj_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_obj_weight() const {
  return _internal_has_obj_weight();
}
inline void YoloTargetParameter::clear_obj_weight() {
  _impl_.obj_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float YoloTargetParameter::_internal_obj_weight() const {
  return _impl_.obj_weight_;
}
inline float YoloTargetParameter::obj_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.obj_weight)
  return _internal_obj_weight();
}
inline void YoloTargetParameter::_internal_set_obj_weight(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.obj_weight_ = value;
}
inline void YoloTargetParameter::set_obj_weight(float value) {
  _internal_set_obj_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.obj_weight)
}

// optional float noobj_weight = 9 [default = 1];
inline bool YoloTargetParameter::_internal_has_noobj_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_noobj_weight() const {
  return _internal_has_noobj_weight();
}
inline void YoloTargetParameter::clear_noobj_weight() {
  _impl_.noobj_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float YoloTargetParameter::_internal_noobj_weight() const {
  return _impl_.noobj_weight_;
}
inline float YoloTargetParameter::noobj_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.noobj_weight)
  return _internal_noobj_weight();
}
inline void YoloTargetParameter::_internal_set_noobj_weight(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.noobj_weight_ = value;
}
inline void YoloTargetParameter::set_noobj_weight(float value) {
  _internal_set_noobj_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.noobj_weight)
}

// optional int32 num_classes = 10 [default = 0];
inline bool YoloTargetParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YoloTargetParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void YoloTargetParameter::clear_num_classes() {
  _impl_.num_classes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t YoloTargetParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline int32_t YoloTargetParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.num_classes)
  return _internal_num_classes();
}
inline void YoloTargetParameter::_internal_set_num_classes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_classes_ = value;
}
inline void YoloTargetParameter::set_num_classes(int32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.num_classes)
}

// repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
inline int YoloTargetParameter::_internal_dimension_statistics_size() const {
  return _impl_.dimension_statistics_.size();
}
inline int YoloTargetParameter::dimension_statistics_size() const {
  return _internal_dimension_statistics_size();
}
inline void YoloTargetParameter::clear_dimension_statistics() {
  _impl_.dimension_statistics_.Clear();
}
inline ::apollo::perception::inference::DimensionStatistics* YoloTargetParameter::mutable_dimension_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return _impl_.dimension_statistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >*
YoloTargetParameter::mutable_dimension_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return &_impl_.dimension_statistics_;
}
inline const ::apollo::perception::inference::DimensionStatistics& YoloTargetParameter::_internal_dimension_statistics(int index) const {
  return _impl_.dimension_statistics_.Get(index);
}
inline const ::apollo::perception::inference::DimensionStatistics& YoloTargetParameter::dimension_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return _internal_dimension_statistics(index);
}
inline ::apollo::perception::inference::DimensionStatistics* YoloTargetParameter::_internal_add_dimension_statistics() {
  return _impl_.dimension_statistics_.Add();
}
inline ::apollo::perception::inference::DimensionStatistics* YoloTargetParameter::add_dimension_statistics() {
  ::apollo::perception::inference::DimensionStatistics* _add = _internal_add_dimension_statistics();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >&
YoloTargetParameter::dimension_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return _impl_.dimension_statistics_;
}

// -------------------------------------------------------------------

// RegionProposalParameter

// repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
inline int RegionProposalParameter::_internal_anchorbox_size() const {
  return _impl_.anchorbox_.size();
}
inline int RegionProposalParameter::anchorbox_size() const {
  return _internal_anchorbox_size();
}
inline void RegionProposalParameter::clear_anchorbox() {
  _impl_.anchorbox_.Clear();
}
inline ::apollo::perception::inference::AnchorBox* RegionProposalParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return _impl_.anchorbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionProposalParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return &_impl_.anchorbox_;
}
inline const ::apollo::perception::inference::AnchorBox& RegionProposalParameter::_internal_anchorbox(int index) const {
  return _impl_.anchorbox_.Get(index);
}
inline const ::apollo::perception::inference::AnchorBox& RegionProposalParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return _internal_anchorbox(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionProposalParameter::_internal_add_anchorbox() {
  return _impl_.anchorbox_.Add();
}
inline ::apollo::perception::inference::AnchorBox* RegionProposalParameter::add_anchorbox() {
  ::apollo::perception::inference::AnchorBox* _add = _internal_add_anchorbox();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionProposalParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return _impl_.anchorbox_;
}

// repeated float thresholds = 2;
inline int RegionProposalParameter::_internal_thresholds_size() const {
  return _impl_.thresholds_.size();
}
inline int RegionProposalParameter::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void RegionProposalParameter::clear_thresholds() {
  _impl_.thresholds_.Clear();
}
inline float RegionProposalParameter::_internal_thresholds(int index) const {
  return _impl_.thresholds_.Get(index);
}
inline float RegionProposalParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.thresholds)
  return _internal_thresholds(index);
}
inline void RegionProposalParameter::set_thresholds(int index, float value) {
  _impl_.thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.thresholds)
}
inline void RegionProposalParameter::_internal_add_thresholds(float value) {
  _impl_.thresholds_.Add(value);
}
inline void RegionProposalParameter::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionProposalParameter.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::_internal_thresholds() const {
  return _impl_.thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionProposalParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionProposalParameter.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::_internal_mutable_thresholds() {
  return &_impl_.thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionProposalParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionProposalParameter.thresholds)
  return _internal_mutable_thresholds();
}

// optional float orientation_scale = 14 [default = 0];
inline bool RegionProposalParameter::_internal_has_orientation_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_orientation_scale() const {
  return _internal_has_orientation_scale();
}
inline void RegionProposalParameter::clear_orientation_scale() {
  _impl_.orientation_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float RegionProposalParameter::_internal_orientation_scale() const {
  return _impl_.orientation_scale_;
}
inline float RegionProposalParameter::orientation_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.orientation_scale)
  return _internal_orientation_scale();
}
inline void RegionProposalParameter::_internal_set_orientation_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.orientation_scale_ = value;
}
inline void RegionProposalParameter::set_orientation_scale(float value) {
  _internal_set_orientation_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.orientation_scale)
}

// optional uint32 object_scale = 3;
inline bool RegionProposalParameter::_internal_has_object_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_object_scale() const {
  return _internal_has_object_scale();
}
inline void RegionProposalParameter::clear_object_scale() {
  _impl_.object_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RegionProposalParameter::_internal_object_scale() const {
  return _impl_.object_scale_;
}
inline uint32_t RegionProposalParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.object_scale)
  return _internal_object_scale();
}
inline void RegionProposalParameter::_internal_set_object_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.object_scale_ = value;
}
inline void RegionProposalParameter::set_object_scale(uint32_t value) {
  _internal_set_object_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
inline bool RegionProposalParameter::_internal_has_noobject_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_noobject_scale() const {
  return _internal_has_noobject_scale();
}
inline void RegionProposalParameter::clear_noobject_scale() {
  _impl_.noobject_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RegionProposalParameter::_internal_noobject_scale() const {
  return _impl_.noobject_scale_;
}
inline uint32_t RegionProposalParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.noobject_scale)
  return _internal_noobject_scale();
}
inline void RegionProposalParameter::_internal_set_noobject_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.noobject_scale_ = value;
}
inline void RegionProposalParameter::set_noobject_scale(uint32_t value) {
  _internal_set_noobject_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.noobject_scale)
}

// optional uint32 class_scale = 5;
inline bool RegionProposalParameter::_internal_has_class_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_class_scale() const {
  return _internal_has_class_scale();
}
inline void RegionProposalParameter::clear_class_scale() {
  _impl_.class_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RegionProposalParameter::_internal_class_scale() const {
  return _impl_.class_scale_;
}
inline uint32_t RegionProposalParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.class_scale)
  return _internal_class_scale();
}
inline void RegionProposalParameter::_internal_set_class_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.class_scale_ = value;
}
inline void RegionProposalParameter::set_class_scale(uint32_t value) {
  _internal_set_class_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.class_scale)
}

// optional uint32 coord_scale = 6;
inline bool RegionProposalParameter::_internal_has_coord_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_coord_scale() const {
  return _internal_has_coord_scale();
}
inline void RegionProposalParameter::clear_coord_scale() {
  _impl_.coord_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RegionProposalParameter::_internal_coord_scale() const {
  return _impl_.coord_scale_;
}
inline uint32_t RegionProposalParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.coord_scale)
  return _internal_coord_scale();
}
inline void RegionProposalParameter::_internal_set_coord_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.coord_scale_ = value;
}
inline void RegionProposalParameter::set_coord_scale(uint32_t value) {
  _internal_set_coord_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.coord_scale)
}

// optional float jitter = 7;
inline bool RegionProposalParameter::_internal_has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_jitter() const {
  return _internal_has_jitter();
}
inline void RegionProposalParameter::clear_jitter() {
  _impl_.jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float RegionProposalParameter::_internal_jitter() const {
  return _impl_.jitter_;
}
inline float RegionProposalParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.jitter)
  return _internal_jitter();
}
inline void RegionProposalParameter::_internal_set_jitter(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.jitter_ = value;
}
inline void RegionProposalParameter::set_jitter(float value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.jitter)
}

// optional float bias = 8;
inline bool RegionProposalParameter::_internal_has_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_bias() const {
  return _internal_has_bias();
}
inline void RegionProposalParameter::clear_bias() {
  _impl_.bias_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RegionProposalParameter::_internal_bias() const {
  return _impl_.bias_;
}
inline float RegionProposalParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.bias)
  return _internal_bias();
}
inline void RegionProposalParameter::_internal_set_bias(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bias_ = value;
}
inline void RegionProposalParameter::set_bias(float value) {
  _internal_set_bias(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.bias)
}

// optional bool rescore = 9;
inline bool RegionProposalParameter::_internal_has_rescore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_rescore() const {
  return _internal_has_rescore();
}
inline void RegionProposalParameter::clear_rescore() {
  _impl_.rescore_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool RegionProposalParameter::_internal_rescore() const {
  return _impl_.rescore_;
}
inline bool RegionProposalParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.rescore)
  return _internal_rescore();
}
inline void RegionProposalParameter::_internal_set_rescore(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.rescore_ = value;
}
inline void RegionProposalParameter::set_rescore(bool value) {
  _internal_set_rescore(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.rescore)
}

// optional uint32 num_classes = 10;
inline bool RegionProposalParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void RegionProposalParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RegionProposalParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t RegionProposalParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.num_classes)
  return _internal_num_classes();
}
inline void RegionProposalParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_classes_ = value;
}
inline void RegionProposalParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.num_classes)
}

// optional bool bias_match = 11;
inline bool RegionProposalParameter::_internal_has_bias_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_bias_match() const {
  return _internal_has_bias_match();
}
inline void RegionProposalParameter::clear_bias_match() {
  _impl_.bias_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool RegionProposalParameter::_internal_bias_match() const {
  return _impl_.bias_match_;
}
inline bool RegionProposalParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.bias_match)
  return _internal_bias_match();
}
inline void RegionProposalParameter::_internal_set_bias_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bias_match_ = value;
}
inline void RegionProposalParameter::set_bias_match(bool value) {
  _internal_set_bias_match(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.bias_match)
}

// optional float threshold = 12;
inline bool RegionProposalParameter::_internal_has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_threshold() const {
  return _internal_has_threshold();
}
inline void RegionProposalParameter::clear_threshold() {
  _impl_.threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float RegionProposalParameter::_internal_threshold() const {
  return _impl_.threshold_;
}
inline float RegionProposalParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.threshold)
  return _internal_threshold();
}
inline void RegionProposalParameter::_internal_set_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.threshold_ = value;
}
inline void RegionProposalParameter::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.threshold)
}

// optional uint32 tricky_iter = 13 [default = 400];
inline bool RegionProposalParameter::_internal_has_tricky_iter() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_tricky_iter() const {
  return _internal_has_tricky_iter();
}
inline void RegionProposalParameter::clear_tricky_iter() {
  _impl_.tricky_iter_ = 400u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t RegionProposalParameter::_internal_tricky_iter() const {
  return _impl_.tricky_iter_;
}
inline uint32_t RegionProposalParameter::tricky_iter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.tricky_iter)
  return _internal_tricky_iter();
}
inline void RegionProposalParameter::_internal_set_tricky_iter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tricky_iter_ = value;
}
inline void RegionProposalParameter::set_tricky_iter(uint32_t value) {
  _internal_set_tricky_iter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.tricky_iter)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
inline bool RegionProposalParameter::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool RegionProposalParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void RegionProposalParameter::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionProposalParameter::_internal_nms_param() const {
  const ::apollo::perception::inference::NonMaximumSuppressionParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NonMaximumSuppressionParameter&>(
      ::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionProposalParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.nms_param)
  return _internal_nms_param();
}
inline void RegionProposalParameter::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.RegionProposalParameter.nms_param)
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RegionProposalParameter.nms_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NonMaximumSuppressionParameter>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::mutable_nms_param() {
  ::apollo::perception::inference::NonMaximumSuppressionParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionProposalParameter.nms_param)
  return _msg;
}
inline void RegionProposalParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionProposalParameter.nms_param)
}

// optional int32 keep_top_k = 16 [default = -1];
inline bool RegionProposalParameter::_internal_has_keep_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_keep_top_k() const {
  return _internal_has_keep_top_k();
}
inline void RegionProposalParameter::clear_keep_top_k() {
  _impl_.keep_top_k_ = -1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t RegionProposalParameter::_internal_keep_top_k() const {
  return _impl_.keep_top_k_;
}
inline int32_t RegionProposalParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.keep_top_k)
  return _internal_keep_top_k();
}
inline void RegionProposalParameter::_internal_set_keep_top_k(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.keep_top_k_ = value;
}
inline void RegionProposalParameter::set_keep_top_k(int32_t value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.keep_top_k)
}

// optional float pos_threshold = 17;
inline bool RegionProposalParameter::_internal_has_pos_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_pos_threshold() const {
  return _internal_has_pos_threshold();
}
inline void RegionProposalParameter::clear_pos_threshold() {
  _impl_.pos_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float RegionProposalParameter::_internal_pos_threshold() const {
  return _impl_.pos_threshold_;
}
inline float RegionProposalParameter::pos_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.pos_threshold)
  return _internal_pos_threshold();
}
inline void RegionProposalParameter::_internal_set_pos_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.pos_threshold_ = value;
}
inline void RegionProposalParameter::set_pos_threshold(float value) {
  _internal_set_pos_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.pos_threshold)
}

// optional float neg_threshold = 18;
inline bool RegionProposalParameter::_internal_has_neg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_neg_threshold() const {
  return _internal_has_neg_threshold();
}
inline void RegionProposalParameter::clear_neg_threshold() {
  _impl_.neg_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float RegionProposalParameter::_internal_neg_threshold() const {
  return _impl_.neg_threshold_;
}
inline float RegionProposalParameter::neg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.neg_threshold)
  return _internal_neg_threshold();
}
inline void RegionProposalParameter::_internal_set_neg_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.neg_threshold_ = value;
}
inline void RegionProposalParameter::set_neg_threshold(float value) {
  _internal_set_neg_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.neg_threshold)
}

// optional int32 neg_ratio = 19 [default = 3];
inline bool RegionProposalParameter::_internal_has_neg_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RegionProposalParameter::has_neg_ratio() const {
  return _internal_has_neg_ratio();
}
inline void RegionProposalParameter::clear_neg_ratio() {
  _impl_.neg_ratio_ = 3;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t RegionProposalParameter::_internal_neg_ratio() const {
  return _impl_.neg_ratio_;
}
inline int32_t RegionProposalParameter::neg_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.neg_ratio)
  return _internal_neg_ratio();
}
inline void RegionProposalParameter::_internal_set_neg_ratio(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.neg_ratio_ = value;
}
inline void RegionProposalParameter::set_neg_ratio(int32_t value) {
  _internal_set_neg_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.neg_ratio)
}

// -------------------------------------------------------------------

// RegionParameter

// repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
inline int RegionParameter::_internal_anchorbox_size() const {
  return _impl_.anchorbox_.size();
}
inline int RegionParameter::anchorbox_size() const {
  return _internal_anchorbox_size();
}
inline void RegionParameter::clear_anchorbox() {
  _impl_.anchorbox_.Clear();
}
inline ::apollo::perception::inference::AnchorBox* RegionParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionParameter.anchorbox)
  return _impl_.anchorbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.anchorbox)
  return &_impl_.anchorbox_;
}
inline const ::apollo::perception::inference::AnchorBox& RegionParameter::_internal_anchorbox(int index) const {
  return _impl_.anchorbox_.Get(index);
}
inline const ::apollo::perception::inference::AnchorBox& RegionParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.anchorbox)
  return _internal_anchorbox(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionParameter::_internal_add_anchorbox() {
  return _impl_.anchorbox_.Add();
}
inline ::apollo::perception::inference::AnchorBox* RegionParameter::add_anchorbox() {
  ::apollo::perception::inference::AnchorBox* _add = _internal_add_anchorbox();
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.anchorbox)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.anchorbox)
  return _impl_.anchorbox_;
}

// repeated float thresholds = 2;
inline int RegionParameter::_internal_thresholds_size() const {
  return _impl_.thresholds_.size();
}
inline int RegionParameter::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void RegionParameter::clear_thresholds() {
  _impl_.thresholds_.Clear();
}
inline float RegionParameter::_internal_thresholds(int index) const {
  return _impl_.thresholds_.Get(index);
}
inline float RegionParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.thresholds)
  return _internal_thresholds(index);
}
inline void RegionParameter::set_thresholds(int index, float value) {
  _impl_.thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.thresholds)
}
inline void RegionParameter::_internal_add_thresholds(float value) {
  _impl_.thresholds_.Add(value);
}
inline void RegionParameter::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionParameter::_internal_thresholds() const {
  return _impl_.thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RegionParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionParameter::_internal_mutable_thresholds() {
  return &_impl_.thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RegionParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.thresholds)
  return _internal_mutable_thresholds();
}

// optional float orientation_scale = 14 [default = 0];
inline bool RegionParameter::_internal_has_orientation_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RegionParameter::has_orientation_scale() const {
  return _internal_has_orientation_scale();
}
inline void RegionParameter::clear_orientation_scale() {
  _impl_.orientation_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float RegionParameter::_internal_orientation_scale() const {
  return _impl_.orientation_scale_;
}
inline float RegionParameter::orientation_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.orientation_scale)
  return _internal_orientation_scale();
}
inline void RegionParameter::_internal_set_orientation_scale(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.orientation_scale_ = value;
}
inline void RegionParameter::set_orientation_scale(float value) {
  _internal_set_orientation_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.orientation_scale)
}

// optional float dimension_scale = 15 [default = 0];
inline bool RegionParameter::_internal_has_dimension_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RegionParameter::has_dimension_scale() const {
  return _internal_has_dimension_scale();
}
inline void RegionParameter::clear_dimension_scale() {
  _impl_.dimension_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float RegionParameter::_internal_dimension_scale() const {
  return _impl_.dimension_scale_;
}
inline float RegionParameter::dimension_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.dimension_scale)
  return _internal_dimension_scale();
}
inline void RegionParameter::_internal_set_dimension_scale(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.dimension_scale_ = value;
}
inline void RegionParameter::set_dimension_scale(float value) {
  _internal_set_dimension_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.dimension_scale)
}

// optional float front_scale = 19 [default = 0];
inline bool RegionParameter::_internal_has_front_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RegionParameter::has_front_scale() const {
  return _internal_has_front_scale();
}
inline void RegionParameter::clear_front_scale() {
  _impl_.front_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float RegionParameter::_internal_front_scale() const {
  return _impl_.front_scale_;
}
inline float RegionParameter::front_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.front_scale)
  return _internal_front_scale();
}
inline void RegionParameter::_internal_set_front_scale(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.front_scale_ = value;
}
inline void RegionParameter::set_front_scale(float value) {
  _internal_set_front_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.front_scale)
}

// optional float rear_scale = 20 [default = 0];
inline bool RegionParameter::_internal_has_rear_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RegionParameter::has_rear_scale() const {
  return _internal_has_rear_scale();
}
inline void RegionParameter::clear_rear_scale() {
  _impl_.rear_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float RegionParameter::_internal_rear_scale() const {
  return _impl_.rear_scale_;
}
inline float RegionParameter::rear_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.rear_scale)
  return _internal_rear_scale();
}
inline void RegionParameter::_internal_set_rear_scale(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.rear_scale_ = value;
}
inline void RegionParameter::set_rear_scale(float value) {
  _internal_set_rear_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.rear_scale)
}

// optional uint32 object_scale = 3;
inline bool RegionParameter::_internal_has_object_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionParameter::has_object_scale() const {
  return _internal_has_object_scale();
}
inline void RegionParameter::clear_object_scale() {
  _impl_.object_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RegionParameter::_internal_object_scale() const {
  return _impl_.object_scale_;
}
inline uint32_t RegionParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.object_scale)
  return _internal_object_scale();
}
inline void RegionParameter::_internal_set_object_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.object_scale_ = value;
}
inline void RegionParameter::set_object_scale(uint32_t value) {
  _internal_set_object_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
inline bool RegionParameter::_internal_has_noobject_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionParameter::has_noobject_scale() const {
  return _internal_has_noobject_scale();
}
inline void RegionParameter::clear_noobject_scale() {
  _impl_.noobject_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RegionParameter::_internal_noobject_scale() const {
  return _impl_.noobject_scale_;
}
inline uint32_t RegionParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.noobject_scale)
  return _internal_noobject_scale();
}
inline void RegionParameter::_internal_set_noobject_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.noobject_scale_ = value;
}
inline void RegionParameter::set_noobject_scale(uint32_t value) {
  _internal_set_noobject_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.noobject_scale)
}

// optional float class_scale = 5;
inline bool RegionParameter::_internal_has_class_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionParameter::has_class_scale() const {
  return _internal_has_class_scale();
}
inline void RegionParameter::clear_class_scale() {
  _impl_.class_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float RegionParameter::_internal_class_scale() const {
  return _impl_.class_scale_;
}
inline float RegionParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.class_scale)
  return _internal_class_scale();
}
inline void RegionParameter::_internal_set_class_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.class_scale_ = value;
}
inline void RegionParameter::set_class_scale(float value) {
  _internal_set_class_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.class_scale)
}

// optional uint32 coord_scale = 6;
inline bool RegionParameter::_internal_has_coord_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionParameter::has_coord_scale() const {
  return _internal_has_coord_scale();
}
inline void RegionParameter::clear_coord_scale() {
  _impl_.coord_scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RegionParameter::_internal_coord_scale() const {
  return _impl_.coord_scale_;
}
inline uint32_t RegionParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.coord_scale)
  return _internal_coord_scale();
}
inline void RegionParameter::_internal_set_coord_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.coord_scale_ = value;
}
inline void RegionParameter::set_coord_scale(uint32_t value) {
  _internal_set_coord_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.coord_scale)
}

// optional float jitter = 7;
inline bool RegionParameter::_internal_has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionParameter::has_jitter() const {
  return _internal_has_jitter();
}
inline void RegionParameter::clear_jitter() {
  _impl_.jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float RegionParameter::_internal_jitter() const {
  return _impl_.jitter_;
}
inline float RegionParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.jitter)
  return _internal_jitter();
}
inline void RegionParameter::_internal_set_jitter(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.jitter_ = value;
}
inline void RegionParameter::set_jitter(float value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.jitter)
}

// optional float bias = 8;
inline bool RegionParameter::_internal_has_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionParameter::has_bias() const {
  return _internal_has_bias();
}
inline void RegionParameter::clear_bias() {
  _impl_.bias_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RegionParameter::_internal_bias() const {
  return _impl_.bias_;
}
inline float RegionParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.bias)
  return _internal_bias();
}
inline void RegionParameter::_internal_set_bias(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bias_ = value;
}
inline void RegionParameter::set_bias(float value) {
  _internal_set_bias(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.bias)
}

// optional bool rescore = 9;
inline bool RegionParameter::_internal_has_rescore() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RegionParameter::has_rescore() const {
  return _internal_has_rescore();
}
inline void RegionParameter::clear_rescore() {
  _impl_.rescore_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool RegionParameter::_internal_rescore() const {
  return _impl_.rescore_;
}
inline bool RegionParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.rescore)
  return _internal_rescore();
}
inline void RegionParameter::_internal_set_rescore(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rescore_ = value;
}
inline void RegionParameter::set_rescore(bool value) {
  _internal_set_rescore(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.rescore)
}

// optional uint32 num_classes = 10;
inline bool RegionParameter::_internal_has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RegionParameter::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void RegionParameter::clear_num_classes() {
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RegionParameter::_internal_num_classes() const {
  return _impl_.num_classes_;
}
inline uint32_t RegionParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.num_classes)
  return _internal_num_classes();
}
inline void RegionParameter::_internal_set_num_classes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_classes_ = value;
}
inline void RegionParameter::set_num_classes(uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.num_classes)
}

// optional bool bias_match = 11;
inline bool RegionParameter::_internal_has_bias_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RegionParameter::has_bias_match() const {
  return _internal_has_bias_match();
}
inline void RegionParameter::clear_bias_match() {
  _impl_.bias_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool RegionParameter::_internal_bias_match() const {
  return _impl_.bias_match_;
}
inline bool RegionParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.bias_match)
  return _internal_bias_match();
}
inline void RegionParameter::_internal_set_bias_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bias_match_ = value;
}
inline void RegionParameter::set_bias_match(bool value) {
  _internal_set_bias_match(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.bias_match)
}

// optional float threshold = 12;
inline bool RegionParameter::_internal_has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RegionParameter::has_threshold() const {
  return _internal_has_threshold();
}
inline void RegionParameter::clear_threshold() {
  _impl_.threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float RegionParameter::_internal_threshold() const {
  return _impl_.threshold_;
}
inline float RegionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.threshold)
  return _internal_threshold();
}
inline void RegionParameter::_internal_set_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.threshold_ = value;
}
inline void RegionParameter::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.threshold)
}

// optional uint32 tricky_iter = 13 [default = 400];
inline bool RegionParameter::_internal_has_tricky_iter() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool RegionParameter::has_tricky_iter() const {
  return _internal_has_tricky_iter();
}
inline void RegionParameter::clear_tricky_iter() {
  _impl_.tricky_iter_ = 400u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t RegionParameter::_internal_tricky_iter() const {
  return _impl_.tricky_iter_;
}
inline uint32_t RegionParameter::tricky_iter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.tricky_iter)
  return _internal_tricky_iter();
}
inline void RegionParameter::_internal_set_tricky_iter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tricky_iter_ = value;
}
inline void RegionParameter::set_tricky_iter(uint32_t value) {
  _internal_set_tricky_iter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.tricky_iter)
}

// optional bool use_l1_loss = 16 [default = false];
inline bool RegionParameter::_internal_has_use_l1_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RegionParameter::has_use_l1_loss() const {
  return _internal_has_use_l1_loss();
}
inline void RegionParameter::clear_use_l1_loss() {
  _impl_.use_l1_loss_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool RegionParameter::_internal_use_l1_loss() const {
  return _impl_.use_l1_loss_;
}
inline bool RegionParameter::use_l1_loss() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_l1_loss)
  return _internal_use_l1_loss();
}
inline void RegionParameter::_internal_set_use_l1_loss(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.use_l1_loss_ = value;
}
inline void RegionParameter::set_use_l1_loss(bool value) {
  _internal_set_use_l1_loss(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_l1_loss)
}

// optional bool use_twice_softmax = 17 [default = false];
inline bool RegionParameter::_internal_has_use_twice_softmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RegionParameter::has_use_twice_softmax() const {
  return _internal_has_use_twice_softmax();
}
inline void RegionParameter::clear_use_twice_softmax() {
  _impl_.use_twice_softmax_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool RegionParameter::_internal_use_twice_softmax() const {
  return _impl_.use_twice_softmax_;
}
inline bool RegionParameter::use_twice_softmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_twice_softmax)
  return _internal_use_twice_softmax();
}
inline void RegionParameter::_internal_set_use_twice_softmax(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.use_twice_softmax_ = value;
}
inline void RegionParameter::set_use_twice_softmax(bool value) {
  _internal_set_use_twice_softmax(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_twice_softmax)
}

// optional bool is_anchor_normalized = 18 [default = false];
inline bool RegionParameter::_internal_has_is_anchor_normalized() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool RegionParameter::has_is_anchor_normalized() const {
  return _internal_has_is_anchor_normalized();
}
inline void RegionParameter::clear_is_anchor_normalized() {
  _impl_.is_anchor_normalized_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool RegionParameter::_internal_is_anchor_normalized() const {
  return _impl_.is_anchor_normalized_;
}
inline bool RegionParameter::is_anchor_normalized() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.is_anchor_normalized)
  return _internal_is_anchor_normalized();
}
inline void RegionParameter::_internal_set_is_anchor_normalized(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.is_anchor_normalized_ = value;
}
inline void RegionParameter::set_is_anchor_normalized(bool value) {
  _internal_set_is_anchor_normalized(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.is_anchor_normalized)
}

// repeated bool ori_enable = 21;
inline int RegionParameter::_internal_ori_enable_size() const {
  return _impl_.ori_enable_.size();
}
inline int RegionParameter::ori_enable_size() const {
  return _internal_ori_enable_size();
}
inline void RegionParameter::clear_ori_enable() {
  _impl_.ori_enable_.Clear();
}
inline bool RegionParameter::_internal_ori_enable(int index) const {
  return _impl_.ori_enable_.Get(index);
}
inline bool RegionParameter::ori_enable(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.ori_enable)
  return _internal_ori_enable(index);
}
inline void RegionParameter::set_ori_enable(int index, bool value) {
  _impl_.ori_enable_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.ori_enable)
}
inline void RegionParameter::_internal_add_ori_enable(bool value) {
  _impl_.ori_enable_.Add(value);
}
inline void RegionParameter::add_ori_enable(bool value) {
  _internal_add_ori_enable(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.ori_enable)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RegionParameter::_internal_ori_enable() const {
  return _impl_.ori_enable_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RegionParameter::ori_enable() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.ori_enable)
  return _internal_ori_enable();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RegionParameter::_internal_mutable_ori_enable() {
  return &_impl_.ori_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RegionParameter::mutable_ori_enable() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.ori_enable)
  return _internal_mutable_ori_enable();
}

// optional string anchorfile = 22 [default = "anchor.txt"];
inline bool RegionParameter::_internal_has_anchorfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionParameter::has_anchorfile() const {
  return _internal_has_anchorfile();
}
inline void RegionParameter::clear_anchorfile() {
  _impl_.anchorfile_.ClearToDefault(::apollo::perception::inference::RegionParameter::Impl_::_i_give_permission_to_break_this_code_default_anchorfile_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegionParameter::anchorfile() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.anchorfile)
  if (_impl_.anchorfile_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_anchorfile_.get();
  return _internal_anchorfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionParameter::set_anchorfile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.anchorfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.anchorfile)
}
inline std::string* RegionParameter::mutable_anchorfile() {
  std::string* _s = _internal_mutable_anchorfile();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionParameter.anchorfile)
  return _s;
}
inline const std::string& RegionParameter::_internal_anchorfile() const {
  return _impl_.anchorfile_.Get();
}
inline void RegionParameter::_internal_set_anchorfile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.anchorfile_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionParameter::_internal_mutable_anchorfile() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.anchorfile_.Mutable(::apollo::perception::inference::RegionParameter::Impl_::_i_give_permission_to_break_this_code_default_anchorfile_, GetArenaForAllocation());
}
inline std::string* RegionParameter::release_anchorfile() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.RegionParameter.anchorfile)
  if (!_internal_has_anchorfile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.anchorfile_.Release();
  return p;
}
inline void RegionParameter::set_allocated_anchorfile(std::string* anchorfile) {
  if (anchorfile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.anchorfile_.SetAllocated(anchorfile, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionParameter.anchorfile)
}

// optional bool use_side_box_v2 = 23 [default = false];
inline bool RegionParameter::_internal_has_use_side_box_v2() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool RegionParameter::has_use_side_box_v2() const {
  return _internal_has_use_side_box_v2();
}
inline void RegionParameter::clear_use_side_box_v2() {
  _impl_.use_side_box_v2_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool RegionParameter::_internal_use_side_box_v2() const {
  return _impl_.use_side_box_v2_;
}
inline bool RegionParameter::use_side_box_v2() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_side_box_v2)
  return _internal_use_side_box_v2();
}
inline void RegionParameter::_internal_set_use_side_box_v2(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.use_side_box_v2_ = value;
}
inline void RegionParameter::set_use_side_box_v2(bool value) {
  _internal_set_use_side_box_v2(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_side_box_v2)
}

// optional bool use_side_box_v3 = 24 [default = false];
inline bool RegionParameter::_internal_has_use_side_box_v3() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool RegionParameter::has_use_side_box_v3() const {
  return _internal_has_use_side_box_v3();
}
inline void RegionParameter::clear_use_side_box_v3() {
  _impl_.use_side_box_v3_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool RegionParameter::_internal_use_side_box_v3() const {
  return _impl_.use_side_box_v3_;
}
inline bool RegionParameter::use_side_box_v3() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_side_box_v3)
  return _internal_use_side_box_v3();
}
inline void RegionParameter::_internal_set_use_side_box_v3(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.use_side_box_v3_ = value;
}
inline void RegionParameter::set_use_side_box_v3(bool value) {
  _internal_set_use_side_box_v3(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_side_box_v3)
}

// optional int32 ori_cycle = 25 [default = 1];
inline bool RegionParameter::_internal_has_ori_cycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool RegionParameter::has_ori_cycle() const {
  return _internal_has_ori_cycle();
}
inline void RegionParameter::clear_ori_cycle() {
  _impl_.ori_cycle_ = 1;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t RegionParameter::_internal_ori_cycle() const {
  return _impl_.ori_cycle_;
}
inline int32_t RegionParameter::ori_cycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.ori_cycle)
  return _internal_ori_cycle();
}
inline void RegionParameter::_internal_set_ori_cycle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.ori_cycle_ = value;
}
inline void RegionParameter::set_ori_cycle(int32_t value) {
  _internal_set_ori_cycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.ori_cycle)
}

// -------------------------------------------------------------------

// AnchorBox

// optional float w = 1;
inline bool AnchorBox::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnchorBox::has_w() const {
  return _internal_has_w();
}
inline void AnchorBox::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float AnchorBox::_internal_w() const {
  return _impl_.w_;
}
inline float AnchorBox::w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnchorBox.w)
  return _internal_w();
}
inline void AnchorBox::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.w_ = value;
}
inline void AnchorBox::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnchorBox.w)
}

// optional float h = 2;
inline bool AnchorBox::_internal_has_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnchorBox::has_h() const {
  return _internal_has_h();
}
inline void AnchorBox::clear_h() {
  _impl_.h_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float AnchorBox::_internal_h() const {
  return _impl_.h_;
}
inline float AnchorBox::h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnchorBox.h)
  return _internal_h();
}
inline void AnchorBox::_internal_set_h(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.h_ = value;
}
inline void AnchorBox::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnchorBox.h)
}

// -------------------------------------------------------------------

// ReorgParameter

// optional uint32 stride = 1;
inline bool ReorgParameter::_internal_has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorgParameter::has_stride() const {
  return _internal_has_stride();
}
inline void ReorgParameter::clear_stride() {
  _impl_.stride_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ReorgParameter::_internal_stride() const {
  return _impl_.stride_;
}
inline uint32_t ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReorgParameter.stride)
  return _internal_stride();
}
inline void ReorgParameter::_internal_set_stride(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stride_ = value;
}
inline void ReorgParameter::set_stride(uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReorgParameter.stride)
}

// -------------------------------------------------------------------

// BBoxRegParameter

// repeated float bbox_mean = 1;
inline int BBoxRegParameter::_internal_bbox_mean_size() const {
  return _impl_.bbox_mean_.size();
}
inline int BBoxRegParameter::bbox_mean_size() const {
  return _internal_bbox_mean_size();
}
inline void BBoxRegParameter::clear_bbox_mean() {
  _impl_.bbox_mean_.Clear();
}
inline float BBoxRegParameter::_internal_bbox_mean(int index) const {
  return _impl_.bbox_mean_.Get(index);
}
inline float BBoxRegParameter::bbox_mean(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBoxRegParameter.bbox_mean)
  return _internal_bbox_mean(index);
}
inline void BBoxRegParameter::set_bbox_mean(int index, float value) {
  _impl_.bbox_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBoxRegParameter.bbox_mean)
}
inline void BBoxRegParameter::_internal_add_bbox_mean(float value) {
  _impl_.bbox_mean_.Add(value);
}
inline void BBoxRegParameter::add_bbox_mean(float value) {
  _internal_add_bbox_mean(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BBoxRegParameter.bbox_mean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxRegParameter::_internal_bbox_mean() const {
  return _impl_.bbox_mean_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxRegParameter::bbox_mean() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BBoxRegParameter.bbox_mean)
  return _internal_bbox_mean();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxRegParameter::_internal_mutable_bbox_mean() {
  return &_impl_.bbox_mean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_mean() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BBoxRegParameter.bbox_mean)
  return _internal_mutable_bbox_mean();
}

// repeated float bbox_std = 2;
inline int BBoxRegParameter::_internal_bbox_std_size() const {
  return _impl_.bbox_std_.size();
}
inline int BBoxRegParameter::bbox_std_size() const {
  return _internal_bbox_std_size();
}
inline void BBoxRegParameter::clear_bbox_std() {
  _impl_.bbox_std_.Clear();
}
inline float BBoxRegParameter::_internal_bbox_std(int index) const {
  return _impl_.bbox_std_.Get(index);
}
inline float BBoxRegParameter::bbox_std(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBoxRegParameter.bbox_std)
  return _internal_bbox_std(index);
}
inline void BBoxRegParameter::set_bbox_std(int index, float value) {
  _impl_.bbox_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBoxRegParameter.bbox_std)
}
inline void BBoxRegParameter::_internal_add_bbox_std(float value) {
  _impl_.bbox_std_.Add(value);
}
inline void BBoxRegParameter::add_bbox_std(float value) {
  _internal_add_bbox_std(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BBoxRegParameter.bbox_std)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxRegParameter::_internal_bbox_std() const {
  return _impl_.bbox_std_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxRegParameter::bbox_std() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BBoxRegParameter.bbox_std)
  return _internal_bbox_std();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxRegParameter::_internal_mutable_bbox_std() {
  return &_impl_.bbox_std_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxRegParameter::mutable_bbox_std() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BBoxRegParameter.bbox_std)
  return _internal_mutable_bbox_std();
}

// -------------------------------------------------------------------

// DFMBPSROIAlignParameter

// optional float heat_map_a = 1;
inline bool DFMBPSROIAlignParameter::_internal_has_heat_map_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_heat_map_a() const {
  return _internal_has_heat_map_a();
}
inline void DFMBPSROIAlignParameter::clear_heat_map_a() {
  _impl_.heat_map_a_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DFMBPSROIAlignParameter::_internal_heat_map_a() const {
  return _impl_.heat_map_a_;
}
inline float DFMBPSROIAlignParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.heat_map_a)
  return _internal_heat_map_a();
}
inline void DFMBPSROIAlignParameter::_internal_set_heat_map_a(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.heat_map_a_ = value;
}
inline void DFMBPSROIAlignParameter::set_heat_map_a(float value) {
  _internal_set_heat_map_a(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.heat_map_a)
}

// optional int32 output_dim = 2;
inline bool DFMBPSROIAlignParameter::_internal_has_output_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_output_dim() const {
  return _internal_has_output_dim();
}
inline void DFMBPSROIAlignParameter::clear_output_dim() {
  _impl_.output_dim_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_output_dim() const {
  return _impl_.output_dim_;
}
inline int32_t DFMBPSROIAlignParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.output_dim)
  return _internal_output_dim();
}
inline void DFMBPSROIAlignParameter::_internal_set_output_dim(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_dim_ = value;
}
inline void DFMBPSROIAlignParameter::set_output_dim(int32_t value) {
  _internal_set_output_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.output_dim)
}

// optional int32 group_height = 3;
inline bool DFMBPSROIAlignParameter::_internal_has_group_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_group_height() const {
  return _internal_has_group_height();
}
inline void DFMBPSROIAlignParameter::clear_group_height() {
  _impl_.group_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_group_height() const {
  return _impl_.group_height_;
}
inline int32_t DFMBPSROIAlignParameter::group_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.group_height)
  return _internal_group_height();
}
inline void DFMBPSROIAlignParameter::_internal_set_group_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_height_ = value;
}
inline void DFMBPSROIAlignParameter::set_group_height(int32_t value) {
  _internal_set_group_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.group_height)
}

// optional int32 group_width = 4;
inline bool DFMBPSROIAlignParameter::_internal_has_group_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_group_width() const {
  return _internal_has_group_width();
}
inline void DFMBPSROIAlignParameter::clear_group_width() {
  _impl_.group_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_group_width() const {
  return _impl_.group_width_;
}
inline int32_t DFMBPSROIAlignParameter::group_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.group_width)
  return _internal_group_width();
}
inline void DFMBPSROIAlignParameter::_internal_set_group_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_width_ = value;
}
inline void DFMBPSROIAlignParameter::set_group_width(int32_t value) {
  _internal_set_group_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.group_width)
}

// optional int32 pooled_height = 5;
inline bool DFMBPSROIAlignParameter::_internal_has_pooled_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_pooled_height() const {
  return _internal_has_pooled_height();
}
inline void DFMBPSROIAlignParameter::clear_pooled_height() {
  _impl_.pooled_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_pooled_height() const {
  return _impl_.pooled_height_;
}
inline int32_t DFMBPSROIAlignParameter::pooled_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.pooled_height)
  return _internal_pooled_height();
}
inline void DFMBPSROIAlignParameter::_internal_set_pooled_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pooled_height_ = value;
}
inline void DFMBPSROIAlignParameter::set_pooled_height(int32_t value) {
  _internal_set_pooled_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.pooled_height)
}

// optional int32 pooled_width = 6;
inline bool DFMBPSROIAlignParameter::_internal_has_pooled_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_pooled_width() const {
  return _internal_has_pooled_width();
}
inline void DFMBPSROIAlignParameter::clear_pooled_width() {
  _impl_.pooled_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_pooled_width() const {
  return _impl_.pooled_width_;
}
inline int32_t DFMBPSROIAlignParameter::pooled_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.pooled_width)
  return _internal_pooled_width();
}
inline void DFMBPSROIAlignParameter::_internal_set_pooled_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pooled_width_ = value;
}
inline void DFMBPSROIAlignParameter::set_pooled_width(int32_t value) {
  _internal_set_pooled_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.pooled_width)
}

// optional float pad_ratio = 7;
inline bool DFMBPSROIAlignParameter::_internal_has_pad_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_pad_ratio() const {
  return _internal_has_pad_ratio();
}
inline void DFMBPSROIAlignParameter::clear_pad_ratio() {
  _impl_.pad_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float DFMBPSROIAlignParameter::_internal_pad_ratio() const {
  return _impl_.pad_ratio_;
}
inline float DFMBPSROIAlignParameter::pad_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.pad_ratio)
  return _internal_pad_ratio();
}
inline void DFMBPSROIAlignParameter::_internal_set_pad_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pad_ratio_ = value;
}
inline void DFMBPSROIAlignParameter::set_pad_ratio(float value) {
  _internal_set_pad_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.pad_ratio)
}

// optional int32 sample_per_part = 8;
inline bool DFMBPSROIAlignParameter::_internal_has_sample_per_part() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_sample_per_part() const {
  return _internal_has_sample_per_part();
}
inline void DFMBPSROIAlignParameter::clear_sample_per_part() {
  _impl_.sample_per_part_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_sample_per_part() const {
  return _impl_.sample_per_part_;
}
inline int32_t DFMBPSROIAlignParameter::sample_per_part() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.sample_per_part)
  return _internal_sample_per_part();
}
inline void DFMBPSROIAlignParameter::_internal_set_sample_per_part(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sample_per_part_ = value;
}
inline void DFMBPSROIAlignParameter::set_sample_per_part(int32_t value) {
  _internal_set_sample_per_part(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.sample_per_part)
}

// optional float trans_std = 9 [default = 0];
inline bool DFMBPSROIAlignParameter::_internal_has_trans_std() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_trans_std() const {
  return _internal_has_trans_std();
}
inline void DFMBPSROIAlignParameter::clear_trans_std() {
  _impl_.trans_std_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float DFMBPSROIAlignParameter::_internal_trans_std() const {
  return _impl_.trans_std_;
}
inline float DFMBPSROIAlignParameter::trans_std() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.trans_std)
  return _internal_trans_std();
}
inline void DFMBPSROIAlignParameter::_internal_set_trans_std(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.trans_std_ = value;
}
inline void DFMBPSROIAlignParameter::set_trans_std(float value) {
  _internal_set_trans_std(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.trans_std)
}

// optional int32 part_height = 10 [default = 0];
inline bool DFMBPSROIAlignParameter::_internal_has_part_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_part_height() const {
  return _internal_has_part_height();
}
inline void DFMBPSROIAlignParameter::clear_part_height() {
  _impl_.part_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_part_height() const {
  return _impl_.part_height_;
}
inline int32_t DFMBPSROIAlignParameter::part_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.part_height)
  return _internal_part_height();
}
inline void DFMBPSROIAlignParameter::_internal_set_part_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.part_height_ = value;
}
inline void DFMBPSROIAlignParameter::set_part_height(int32_t value) {
  _internal_set_part_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.part_height)
}

// optional int32 part_width = 11 [default = 0];
inline bool DFMBPSROIAlignParameter::_internal_has_part_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_part_width() const {
  return _internal_has_part_width();
}
inline void DFMBPSROIAlignParameter::clear_part_width() {
  _impl_.part_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t DFMBPSROIAlignParameter::_internal_part_width() const {
  return _impl_.part_width_;
}
inline int32_t DFMBPSROIAlignParameter::part_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.part_width)
  return _internal_part_width();
}
inline void DFMBPSROIAlignParameter::_internal_set_part_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.part_width_ = value;
}
inline void DFMBPSROIAlignParameter::set_part_width(int32_t value) {
  _internal_set_part_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.part_width)
}

// optional float heat_map_b = 12 [default = 0];
inline bool DFMBPSROIAlignParameter::_internal_has_heat_map_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DFMBPSROIAlignParameter::has_heat_map_b() const {
  return _internal_has_heat_map_b();
}
inline void DFMBPSROIAlignParameter::clear_heat_map_b() {
  _impl_.heat_map_b_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float DFMBPSROIAlignParameter::_internal_heat_map_b() const {
  return _impl_.heat_map_b_;
}
inline float DFMBPSROIAlignParameter::heat_map_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DFMBPSROIAlignParameter.heat_map_b)
  return _internal_heat_map_b();
}
inline void DFMBPSROIAlignParameter::_internal_set_heat_map_b(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.heat_map_b_ = value;
}
inline void DFMBPSROIAlignParameter::set_heat_map_b(float value) {
  _internal_set_heat_map_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DFMBPSROIAlignParameter.heat_map_b)
}

// -------------------------------------------------------------------

// DetectionOutputSSDParameter

// optional float heat_map_a = 1;
inline bool DetectionOutputSSDParameter::_internal_has_heat_map_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_heat_map_a() const {
  return _internal_has_heat_map_a();
}
inline void DetectionOutputSSDParameter::clear_heat_map_a() {
  _impl_.heat_map_a_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DetectionOutputSSDParameter::_internal_heat_map_a() const {
  return _impl_.heat_map_a_;
}
inline float DetectionOutputSSDParameter::heat_map_a() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.heat_map_a)
  return _internal_heat_map_a();
}
inline void DetectionOutputSSDParameter::_internal_set_heat_map_a(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.heat_map_a_ = value;
}
inline void DetectionOutputSSDParameter::set_heat_map_a(float value) {
  _internal_set_heat_map_a(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.heat_map_a)
}

// optional float min_size_h = 2 [default = 2];
inline bool DetectionOutputSSDParameter::_internal_has_min_size_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_min_size_h() const {
  return _internal_has_min_size_h();
}
inline void DetectionOutputSSDParameter::clear_min_size_h() {
  _impl_.min_size_h_ = 2;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float DetectionOutputSSDParameter::_internal_min_size_h() const {
  return _impl_.min_size_h_;
}
inline float DetectionOutputSSDParameter::min_size_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.min_size_h)
  return _internal_min_size_h();
}
inline void DetectionOutputSSDParameter::_internal_set_min_size_h(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.min_size_h_ = value;
}
inline void DetectionOutputSSDParameter::set_min_size_h(float value) {
  _internal_set_min_size_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.min_size_h)
}

// optional float min_size_w = 3 [default = 2];
inline bool DetectionOutputSSDParameter::_internal_has_min_size_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_min_size_w() const {
  return _internal_has_min_size_w();
}
inline void DetectionOutputSSDParameter::clear_min_size_w() {
  _impl_.min_size_w_ = 2;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float DetectionOutputSSDParameter::_internal_min_size_w() const {
  return _impl_.min_size_w_;
}
inline float DetectionOutputSSDParameter::min_size_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.min_size_w)
  return _internal_min_size_w();
}
inline void DetectionOutputSSDParameter::_internal_set_min_size_w(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.min_size_w_ = value;
}
inline void DetectionOutputSSDParameter::set_min_size_w(float value) {
  _internal_set_min_size_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.min_size_w)
}

// optional .apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 4 [default = HEIGHT_AND_WIDTH];
inline bool DetectionOutputSSDParameter::_internal_has_min_size_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_min_size_mode() const {
  return _internal_has_min_size_mode();
}
inline void DetectionOutputSSDParameter::clear_min_size_mode() {
  _impl_.min_size_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::_internal_min_size_mode() const {
  return static_cast< ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE >(_impl_.min_size_mode_);
}
inline ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::min_size_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.min_size_mode)
  return _internal_min_size_mode();
}
inline void DetectionOutputSSDParameter::_internal_set_min_size_mode(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE value) {
  assert(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_size_mode_ = value;
}
inline void DetectionOutputSSDParameter::set_min_size_mode(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE value) {
  _internal_set_min_size_mode(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.min_size_mode)
}

// optional float threshold_objectness = 5 [default = 0];
inline bool DetectionOutputSSDParameter::_internal_has_threshold_objectness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_threshold_objectness() const {
  return _internal_has_threshold_objectness();
}
inline void DetectionOutputSSDParameter::clear_threshold_objectness() {
  _impl_.threshold_objectness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DetectionOutputSSDParameter::_internal_threshold_objectness() const {
  return _impl_.threshold_objectness_;
}
inline float DetectionOutputSSDParameter::threshold_objectness() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.threshold_objectness)
  return _internal_threshold_objectness();
}
inline void DetectionOutputSSDParameter::_internal_set_threshold_objectness(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.threshold_objectness_ = value;
}
inline void DetectionOutputSSDParameter::set_threshold_objectness(float value) {
  _internal_set_threshold_objectness(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.threshold_objectness)
}

// optional .apollo.perception.inference.GenAnchorParameter gen_anchor_param = 6;
inline bool DetectionOutputSSDParameter::_internal_has_gen_anchor_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gen_anchor_param_ != nullptr);
  return value;
}
inline bool DetectionOutputSSDParameter::has_gen_anchor_param() const {
  return _internal_has_gen_anchor_param();
}
inline void DetectionOutputSSDParameter::clear_gen_anchor_param() {
  if (_impl_.gen_anchor_param_ != nullptr) _impl_.gen_anchor_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::inference::GenAnchorParameter& DetectionOutputSSDParameter::_internal_gen_anchor_param() const {
  const ::apollo::perception::inference::GenAnchorParameter* p = _impl_.gen_anchor_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::GenAnchorParameter&>(
      ::apollo::perception::inference::_GenAnchorParameter_default_instance_);
}
inline const ::apollo::perception::inference::GenAnchorParameter& DetectionOutputSSDParameter::gen_anchor_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.gen_anchor_param)
  return _internal_gen_anchor_param();
}
inline void DetectionOutputSSDParameter::unsafe_arena_set_allocated_gen_anchor_param(
    ::apollo::perception::inference::GenAnchorParameter* gen_anchor_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gen_anchor_param_);
  }
  _impl_.gen_anchor_param_ = gen_anchor_param;
  if (gen_anchor_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.DetectionOutputSSDParameter.gen_anchor_param)
}
inline ::apollo::perception::inference::GenAnchorParameter* DetectionOutputSSDParameter::release_gen_anchor_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::GenAnchorParameter* temp = _impl_.gen_anchor_param_;
  _impl_.gen_anchor_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::GenAnchorParameter* DetectionOutputSSDParameter::unsafe_arena_release_gen_anchor_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionOutputSSDParameter.gen_anchor_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::inference::GenAnchorParameter* temp = _impl_.gen_anchor_param_;
  _impl_.gen_anchor_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::GenAnchorParameter* DetectionOutputSSDParameter::_internal_mutable_gen_anchor_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gen_anchor_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::GenAnchorParameter>(GetArenaForAllocation());
    _impl_.gen_anchor_param_ = p;
  }
  return _impl_.gen_anchor_param_;
}
inline ::apollo::perception::inference::GenAnchorParameter* DetectionOutputSSDParameter::mutable_gen_anchor_param() {
  ::apollo::perception::inference::GenAnchorParameter* _msg = _internal_mutable_gen_anchor_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputSSDParameter.gen_anchor_param)
  return _msg;
}
inline void DetectionOutputSSDParameter::set_allocated_gen_anchor_param(::apollo::perception::inference::GenAnchorParameter* gen_anchor_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gen_anchor_param_;
  }
  if (gen_anchor_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_anchor_param);
    if (message_arena != submessage_arena) {
      gen_anchor_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_anchor_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.gen_anchor_param_ = gen_anchor_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputSSDParameter.gen_anchor_param)
}

// optional bool refine_out_of_map_bbox = 7 [default = false];
inline bool DetectionOutputSSDParameter::_internal_has_refine_out_of_map_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_refine_out_of_map_bbox() const {
  return _internal_has_refine_out_of_map_bbox();
}
inline void DetectionOutputSSDParameter::clear_refine_out_of_map_bbox() {
  _impl_.refine_out_of_map_bbox_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DetectionOutputSSDParameter::_internal_refine_out_of_map_bbox() const {
  return _impl_.refine_out_of_map_bbox_;
}
inline bool DetectionOutputSSDParameter::refine_out_of_map_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.refine_out_of_map_bbox)
  return _internal_refine_out_of_map_bbox();
}
inline void DetectionOutputSSDParameter::_internal_set_refine_out_of_map_bbox(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.refine_out_of_map_bbox_ = value;
}
inline void DetectionOutputSSDParameter::set_refine_out_of_map_bbox(bool value) {
  _internal_set_refine_out_of_map_bbox(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.refine_out_of_map_bbox)
}

// optional .apollo.perception.inference.NMSSSDParameter nms_param = 8;
inline bool DetectionOutputSSDParameter::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool DetectionOutputSSDParameter::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void DetectionOutputSSDParameter::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::inference::NMSSSDParameter& DetectionOutputSSDParameter::_internal_nms_param() const {
  const ::apollo::perception::inference::NMSSSDParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::inference::NMSSSDParameter&>(
      ::apollo::perception::inference::_NMSSSDParameter_default_instance_);
}
inline const ::apollo::perception::inference::NMSSSDParameter& DetectionOutputSSDParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.nms_param)
  return _internal_nms_param();
}
inline void DetectionOutputSSDParameter::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::inference::NMSSSDParameter* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.inference.DetectionOutputSSDParameter.nms_param)
}
inline ::apollo::perception::inference::NMSSSDParameter* DetectionOutputSSDParameter::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NMSSSDParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::inference::NMSSSDParameter* DetectionOutputSSDParameter::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.inference.DetectionOutputSSDParameter.nms_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::inference::NMSSSDParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::inference::NMSSSDParameter* DetectionOutputSSDParameter::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::inference::NMSSSDParameter>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::inference::NMSSSDParameter* DetectionOutputSSDParameter::mutable_nms_param() {
  ::apollo::perception::inference::NMSSSDParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputSSDParameter.nms_param)
  return _msg;
}
inline void DetectionOutputSSDParameter::set_allocated_nms_param(::apollo::perception::inference::NMSSSDParameter* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputSSDParameter.nms_param)
}

// optional uint32 num_class = 9 [default = 1];
inline bool DetectionOutputSSDParameter::_internal_has_num_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_num_class() const {
  return _internal_has_num_class();
}
inline void DetectionOutputSSDParameter::clear_num_class() {
  _impl_.num_class_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t DetectionOutputSSDParameter::_internal_num_class() const {
  return _impl_.num_class_;
}
inline uint32_t DetectionOutputSSDParameter::num_class() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.num_class)
  return _internal_num_class();
}
inline void DetectionOutputSSDParameter::_internal_set_num_class(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.num_class_ = value;
}
inline void DetectionOutputSSDParameter::set_num_class(uint32_t value) {
  _internal_set_num_class(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.num_class)
}

// optional bool rpn_proposal_output_score = 10 [default = false];
inline bool DetectionOutputSSDParameter::_internal_has_rpn_proposal_output_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_rpn_proposal_output_score() const {
  return _internal_has_rpn_proposal_output_score();
}
inline void DetectionOutputSSDParameter::clear_rpn_proposal_output_score() {
  _impl_.rpn_proposal_output_score_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DetectionOutputSSDParameter::_internal_rpn_proposal_output_score() const {
  return _impl_.rpn_proposal_output_score_;
}
inline bool DetectionOutputSSDParameter::rpn_proposal_output_score() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.rpn_proposal_output_score)
  return _internal_rpn_proposal_output_score();
}
inline void DetectionOutputSSDParameter::_internal_set_rpn_proposal_output_score(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rpn_proposal_output_score_ = value;
}
inline void DetectionOutputSSDParameter::set_rpn_proposal_output_score(bool value) {
  _internal_set_rpn_proposal_output_score(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.rpn_proposal_output_score)
}

// optional bool regress_agnostic = 11;
inline bool DetectionOutputSSDParameter::_internal_has_regress_agnostic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DetectionOutputSSDParameter::has_regress_agnostic() const {
  return _internal_has_regress_agnostic();
}
inline void DetectionOutputSSDParameter::clear_regress_agnostic() {
  _impl_.regress_agnostic_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool DetectionOutputSSDParameter::_internal_regress_agnostic() const {
  return _impl_.regress_agnostic_;
}
inline bool DetectionOutputSSDParameter::regress_agnostic() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.regress_agnostic)
  return _internal_regress_agnostic();
}
inline void DetectionOutputSSDParameter::_internal_set_regress_agnostic(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.regress_agnostic_ = value;
}
inline void DetectionOutputSSDParameter::set_regress_agnostic(bool value) {
  _internal_set_regress_agnostic(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.regress_agnostic)
}

// repeated float threshold = 12;
inline int DetectionOutputSSDParameter::_internal_threshold_size() const {
  return _impl_.threshold_.size();
}
inline int DetectionOutputSSDParameter::threshold_size() const {
  return _internal_threshold_size();
}
inline void DetectionOutputSSDParameter::clear_threshold() {
  _impl_.threshold_.Clear();
}
inline float DetectionOutputSSDParameter::_internal_threshold(int index) const {
  return _impl_.threshold_.Get(index);
}
inline float DetectionOutputSSDParameter::threshold(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputSSDParameter.threshold)
  return _internal_threshold(index);
}
inline void DetectionOutputSSDParameter::set_threshold(int index, float value) {
  _impl_.threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputSSDParameter.threshold)
}
inline void DetectionOutputSSDParameter::_internal_add_threshold(float value) {
  _impl_.threshold_.Add(value);
}
inline void DetectionOutputSSDParameter::add_threshold(float value) {
  _internal_add_threshold(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DetectionOutputSSDParameter.threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionOutputSSDParameter::_internal_threshold() const {
  return _impl_.threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectionOutputSSDParameter::threshold() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DetectionOutputSSDParameter.threshold)
  return _internal_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionOutputSSDParameter::_internal_mutable_threshold() {
  return &_impl_.threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectionOutputSSDParameter::mutable_threshold() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DetectionOutputSSDParameter.threshold)
  return _internal_mutable_threshold();
}

// -------------------------------------------------------------------

// NMSSSDParameter

// optional bool need_nms = 1 [default = true];
inline bool NMSSSDParameter::_internal_has_need_nms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_need_nms() const {
  return _internal_has_need_nms();
}
inline void NMSSSDParameter::clear_need_nms() {
  _impl_.need_nms_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NMSSSDParameter::_internal_need_nms() const {
  return _impl_.need_nms_;
}
inline bool NMSSSDParameter::need_nms() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.need_nms)
  return _internal_need_nms();
}
inline void NMSSSDParameter::_internal_set_need_nms(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.need_nms_ = value;
}
inline void NMSSSDParameter::set_need_nms(bool value) {
  _internal_set_need_nms(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.need_nms)
}

// repeated float overlap_ratio = 2;
inline int NMSSSDParameter::_internal_overlap_ratio_size() const {
  return _impl_.overlap_ratio_.size();
}
inline int NMSSSDParameter::overlap_ratio_size() const {
  return _internal_overlap_ratio_size();
}
inline void NMSSSDParameter::clear_overlap_ratio() {
  _impl_.overlap_ratio_.Clear();
}
inline float NMSSSDParameter::_internal_overlap_ratio(int index) const {
  return _impl_.overlap_ratio_.Get(index);
}
inline float NMSSSDParameter::overlap_ratio(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.overlap_ratio)
  return _internal_overlap_ratio(index);
}
inline void NMSSSDParameter::set_overlap_ratio(int index, float value) {
  _impl_.overlap_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.overlap_ratio)
}
inline void NMSSSDParameter::_internal_add_overlap_ratio(float value) {
  _impl_.overlap_ratio_.Add(value);
}
inline void NMSSSDParameter::add_overlap_ratio(float value) {
  _internal_add_overlap_ratio(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.overlap_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NMSSSDParameter::_internal_overlap_ratio() const {
  return _impl_.overlap_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NMSSSDParameter::overlap_ratio() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.overlap_ratio)
  return _internal_overlap_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NMSSSDParameter::_internal_mutable_overlap_ratio() {
  return &_impl_.overlap_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NMSSSDParameter::mutable_overlap_ratio() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.overlap_ratio)
  return _internal_mutable_overlap_ratio();
}

// repeated uint32 top_n = 3;
inline int NMSSSDParameter::_internal_top_n_size() const {
  return _impl_.top_n_.size();
}
inline int NMSSSDParameter::top_n_size() const {
  return _internal_top_n_size();
}
inline void NMSSSDParameter::clear_top_n() {
  _impl_.top_n_.Clear();
}
inline uint32_t NMSSSDParameter::_internal_top_n(int index) const {
  return _impl_.top_n_.Get(index);
}
inline uint32_t NMSSSDParameter::top_n(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.top_n)
  return _internal_top_n(index);
}
inline void NMSSSDParameter::set_top_n(int index, uint32_t value) {
  _impl_.top_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.top_n)
}
inline void NMSSSDParameter::_internal_add_top_n(uint32_t value) {
  _impl_.top_n_.Add(value);
}
inline void NMSSSDParameter::add_top_n(uint32_t value) {
  _internal_add_top_n(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.top_n)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NMSSSDParameter::_internal_top_n() const {
  return _impl_.top_n_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NMSSSDParameter::top_n() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.top_n)
  return _internal_top_n();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NMSSSDParameter::_internal_mutable_top_n() {
  return &_impl_.top_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NMSSSDParameter::mutable_top_n() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.top_n)
  return _internal_mutable_top_n();
}

// optional bool add_score = 4 [default = false];
inline bool NMSSSDParameter::_internal_has_add_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_add_score() const {
  return _internal_has_add_score();
}
inline void NMSSSDParameter::clear_add_score() {
  _impl_.add_score_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool NMSSSDParameter::_internal_add_score() const {
  return _impl_.add_score_;
}
inline bool NMSSSDParameter::add_score() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.add_score)
  return _internal_add_score();
}
inline void NMSSSDParameter::_internal_set_add_score(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.add_score_ = value;
}
inline void NMSSSDParameter::set_add_score(bool value) {
  _internal_set_add_score(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.add_score)
}

// repeated int32 max_candidate_n = 5;
inline int NMSSSDParameter::_internal_max_candidate_n_size() const {
  return _impl_.max_candidate_n_.size();
}
inline int NMSSSDParameter::max_candidate_n_size() const {
  return _internal_max_candidate_n_size();
}
inline void NMSSSDParameter::clear_max_candidate_n() {
  _impl_.max_candidate_n_.Clear();
}
inline int32_t NMSSSDParameter::_internal_max_candidate_n(int index) const {
  return _impl_.max_candidate_n_.Get(index);
}
inline int32_t NMSSSDParameter::max_candidate_n(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.max_candidate_n)
  return _internal_max_candidate_n(index);
}
inline void NMSSSDParameter::set_max_candidate_n(int index, int32_t value) {
  _impl_.max_candidate_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.max_candidate_n)
}
inline void NMSSSDParameter::_internal_add_max_candidate_n(int32_t value) {
  _impl_.max_candidate_n_.Add(value);
}
inline void NMSSSDParameter::add_max_candidate_n(int32_t value) {
  _internal_add_max_candidate_n(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.max_candidate_n)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NMSSSDParameter::_internal_max_candidate_n() const {
  return _impl_.max_candidate_n_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NMSSSDParameter::max_candidate_n() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.max_candidate_n)
  return _internal_max_candidate_n();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NMSSSDParameter::_internal_mutable_max_candidate_n() {
  return &_impl_.max_candidate_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NMSSSDParameter::mutable_max_candidate_n() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.max_candidate_n)
  return _internal_mutable_max_candidate_n();
}

// repeated bool use_soft_nms = 6;
inline int NMSSSDParameter::_internal_use_soft_nms_size() const {
  return _impl_.use_soft_nms_.size();
}
inline int NMSSSDParameter::use_soft_nms_size() const {
  return _internal_use_soft_nms_size();
}
inline void NMSSSDParameter::clear_use_soft_nms() {
  _impl_.use_soft_nms_.Clear();
}
inline bool NMSSSDParameter::_internal_use_soft_nms(int index) const {
  return _impl_.use_soft_nms_.Get(index);
}
inline bool NMSSSDParameter::use_soft_nms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.use_soft_nms)
  return _internal_use_soft_nms(index);
}
inline void NMSSSDParameter::set_use_soft_nms(int index, bool value) {
  _impl_.use_soft_nms_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.use_soft_nms)
}
inline void NMSSSDParameter::_internal_add_use_soft_nms(bool value) {
  _impl_.use_soft_nms_.Add(value);
}
inline void NMSSSDParameter::add_use_soft_nms(bool value) {
  _internal_add_use_soft_nms(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.use_soft_nms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NMSSSDParameter::_internal_use_soft_nms() const {
  return _impl_.use_soft_nms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NMSSSDParameter::use_soft_nms() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.use_soft_nms)
  return _internal_use_soft_nms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NMSSSDParameter::_internal_mutable_use_soft_nms() {
  return &_impl_.use_soft_nms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NMSSSDParameter::mutable_use_soft_nms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.use_soft_nms)
  return _internal_mutable_use_soft_nms();
}

// optional bool nms_among_classes = 7 [default = false];
inline bool NMSSSDParameter::_internal_has_nms_among_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_nms_among_classes() const {
  return _internal_has_nms_among_classes();
}
inline void NMSSSDParameter::clear_nms_among_classes() {
  _impl_.nms_among_classes_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NMSSSDParameter::_internal_nms_among_classes() const {
  return _impl_.nms_among_classes_;
}
inline bool NMSSSDParameter::nms_among_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.nms_among_classes)
  return _internal_nms_among_classes();
}
inline void NMSSSDParameter::_internal_set_nms_among_classes(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nms_among_classes_ = value;
}
inline void NMSSSDParameter::set_nms_among_classes(bool value) {
  _internal_set_nms_among_classes(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.nms_among_classes)
}

// repeated bool voting = 8;
inline int NMSSSDParameter::_internal_voting_size() const {
  return _impl_.voting_.size();
}
inline int NMSSSDParameter::voting_size() const {
  return _internal_voting_size();
}
inline void NMSSSDParameter::clear_voting() {
  _impl_.voting_.Clear();
}
inline bool NMSSSDParameter::_internal_voting(int index) const {
  return _impl_.voting_.Get(index);
}
inline bool NMSSSDParameter::voting(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.voting)
  return _internal_voting(index);
}
inline void NMSSSDParameter::set_voting(int index, bool value) {
  _impl_.voting_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.voting)
}
inline void NMSSSDParameter::_internal_add_voting(bool value) {
  _impl_.voting_.Add(value);
}
inline void NMSSSDParameter::add_voting(bool value) {
  _internal_add_voting(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.voting)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NMSSSDParameter::_internal_voting() const {
  return _impl_.voting_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
NMSSSDParameter::voting() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.voting)
  return _internal_voting();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NMSSSDParameter::_internal_mutable_voting() {
  return &_impl_.voting_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
NMSSSDParameter::mutable_voting() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.voting)
  return _internal_mutable_voting();
}

// repeated float vote_iou = 9;
inline int NMSSSDParameter::_internal_vote_iou_size() const {
  return _impl_.vote_iou_.size();
}
inline int NMSSSDParameter::vote_iou_size() const {
  return _internal_vote_iou_size();
}
inline void NMSSSDParameter::clear_vote_iou() {
  _impl_.vote_iou_.Clear();
}
inline float NMSSSDParameter::_internal_vote_iou(int index) const {
  return _impl_.vote_iou_.Get(index);
}
inline float NMSSSDParameter::vote_iou(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.vote_iou)
  return _internal_vote_iou(index);
}
inline void NMSSSDParameter::set_vote_iou(int index, float value) {
  _impl_.vote_iou_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.vote_iou)
}
inline void NMSSSDParameter::_internal_add_vote_iou(float value) {
  _impl_.vote_iou_.Add(value);
}
inline void NMSSSDParameter::add_vote_iou(float value) {
  _internal_add_vote_iou(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NMSSSDParameter.vote_iou)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NMSSSDParameter::_internal_vote_iou() const {
  return _impl_.vote_iou_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NMSSSDParameter::vote_iou() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NMSSSDParameter.vote_iou)
  return _internal_vote_iou();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NMSSSDParameter::_internal_mutable_vote_iou() {
  return &_impl_.vote_iou_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NMSSSDParameter::mutable_vote_iou() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NMSSSDParameter.vote_iou)
  return _internal_mutable_vote_iou();
}

// optional float force_identity_iou_thr = 10 [default = 1];
inline bool NMSSSDParameter::_internal_has_force_identity_iou_thr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_force_identity_iou_thr() const {
  return _internal_has_force_identity_iou_thr();
}
inline void NMSSSDParameter::clear_force_identity_iou_thr() {
  _impl_.force_identity_iou_thr_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float NMSSSDParameter::_internal_force_identity_iou_thr() const {
  return _impl_.force_identity_iou_thr_;
}
inline float NMSSSDParameter::force_identity_iou_thr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.force_identity_iou_thr)
  return _internal_force_identity_iou_thr();
}
inline void NMSSSDParameter::_internal_set_force_identity_iou_thr(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.force_identity_iou_thr_ = value;
}
inline void NMSSSDParameter::set_force_identity_iou_thr(float value) {
  _internal_set_force_identity_iou_thr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.force_identity_iou_thr)
}

// optional float force_imparity_iou_thr = 11 [default = 0];
inline bool NMSSSDParameter::_internal_has_force_imparity_iou_thr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_force_imparity_iou_thr() const {
  return _internal_has_force_imparity_iou_thr();
}
inline void NMSSSDParameter::clear_force_imparity_iou_thr() {
  _impl_.force_imparity_iou_thr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NMSSSDParameter::_internal_force_imparity_iou_thr() const {
  return _impl_.force_imparity_iou_thr_;
}
inline float NMSSSDParameter::force_imparity_iou_thr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.force_imparity_iou_thr)
  return _internal_force_imparity_iou_thr();
}
inline void NMSSSDParameter::_internal_set_force_imparity_iou_thr(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.force_imparity_iou_thr_ = value;
}
inline void NMSSSDParameter::set_force_imparity_iou_thr(float value) {
  _internal_set_force_imparity_iou_thr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.force_imparity_iou_thr)
}

// optional int32 nms_gpu_max_n_per_time = 12 [default = -1];
inline bool NMSSSDParameter::_internal_has_nms_gpu_max_n_per_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NMSSSDParameter::has_nms_gpu_max_n_per_time() const {
  return _internal_has_nms_gpu_max_n_per_time();
}
inline void NMSSSDParameter::clear_nms_gpu_max_n_per_time() {
  _impl_.nms_gpu_max_n_per_time_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t NMSSSDParameter::_internal_nms_gpu_max_n_per_time() const {
  return _impl_.nms_gpu_max_n_per_time_;
}
inline int32_t NMSSSDParameter::nms_gpu_max_n_per_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NMSSSDParameter.nms_gpu_max_n_per_time)
  return _internal_nms_gpu_max_n_per_time();
}
inline void NMSSSDParameter::_internal_set_nms_gpu_max_n_per_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nms_gpu_max_n_per_time_ = value;
}
inline void NMSSSDParameter::set_nms_gpu_max_n_per_time(int32_t value) {
  _internal_set_nms_gpu_max_n_per_time(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NMSSSDParameter.nms_gpu_max_n_per_time)
}

// -------------------------------------------------------------------

// GenAnchorParameter

// repeated float anchor_width = 1;
inline int GenAnchorParameter::_internal_anchor_width_size() const {
  return _impl_.anchor_width_.size();
}
inline int GenAnchorParameter::anchor_width_size() const {
  return _internal_anchor_width_size();
}
inline void GenAnchorParameter::clear_anchor_width() {
  _impl_.anchor_width_.Clear();
}
inline float GenAnchorParameter::_internal_anchor_width(int index) const {
  return _impl_.anchor_width_.Get(index);
}
inline float GenAnchorParameter::anchor_width(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.GenAnchorParameter.anchor_width)
  return _internal_anchor_width(index);
}
inline void GenAnchorParameter::set_anchor_width(int index, float value) {
  _impl_.anchor_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.GenAnchorParameter.anchor_width)
}
inline void GenAnchorParameter::_internal_add_anchor_width(float value) {
  _impl_.anchor_width_.Add(value);
}
inline void GenAnchorParameter::add_anchor_width(float value) {
  _internal_add_anchor_width(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.GenAnchorParameter.anchor_width)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenAnchorParameter::_internal_anchor_width() const {
  return _impl_.anchor_width_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenAnchorParameter::anchor_width() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.GenAnchorParameter.anchor_width)
  return _internal_anchor_width();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenAnchorParameter::_internal_mutable_anchor_width() {
  return &_impl_.anchor_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenAnchorParameter::mutable_anchor_width() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.GenAnchorParameter.anchor_width)
  return _internal_mutable_anchor_width();
}

// repeated float anchor_height = 2;
inline int GenAnchorParameter::_internal_anchor_height_size() const {
  return _impl_.anchor_height_.size();
}
inline int GenAnchorParameter::anchor_height_size() const {
  return _internal_anchor_height_size();
}
inline void GenAnchorParameter::clear_anchor_height() {
  _impl_.anchor_height_.Clear();
}
inline float GenAnchorParameter::_internal_anchor_height(int index) const {
  return _impl_.anchor_height_.Get(index);
}
inline float GenAnchorParameter::anchor_height(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.GenAnchorParameter.anchor_height)
  return _internal_anchor_height(index);
}
inline void GenAnchorParameter::set_anchor_height(int index, float value) {
  _impl_.anchor_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.GenAnchorParameter.anchor_height)
}
inline void GenAnchorParameter::_internal_add_anchor_height(float value) {
  _impl_.anchor_height_.Add(value);
}
inline void GenAnchorParameter::add_anchor_height(float value) {
  _internal_add_anchor_height(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.GenAnchorParameter.anchor_height)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenAnchorParameter::_internal_anchor_height() const {
  return _impl_.anchor_height_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenAnchorParameter::anchor_height() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.GenAnchorParameter.anchor_height)
  return _internal_anchor_height();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenAnchorParameter::_internal_mutable_anchor_height() {
  return &_impl_.anchor_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenAnchorParameter::mutable_anchor_height() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.GenAnchorParameter.anchor_height)
  return _internal_mutable_anchor_height();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inference
}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::inference::EmitConstraint_EmitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::EmitConstraint_EmitType>() {
  return ::apollo::perception::inference::EmitConstraint_EmitType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::AnnotatedDatum_AnnotationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::AnnotatedDatum_AnnotationType>() {
  return ::apollo::perception::inference::AnnotatedDatum_AnnotationType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::FillerParameter_VarianceNorm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::FillerParameter_VarianceNorm>() {
  return ::apollo::perception::inference::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ParamSpec_DimCheckMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ParamSpec_DimCheckMode>() {
  return ::apollo::perception::inference::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Resize_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Resize_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Resize_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Pad_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Pad_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Pad_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Interp_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Interp_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Interp_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LossParameter_NormalizationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LossParameter_NormalizationMode>() {
  return ::apollo::perception::inference::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ConvolutionParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ConvolutionParameter_Engine>() {
  return ::apollo::perception::inference::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::DataParameter_DB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::DataParameter_DB>() {
  return ::apollo::perception::inference::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::EltwiseParameter_EltwiseOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::EltwiseParameter_EltwiseOp>() {
  return ::apollo::perception::inference::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::HingeLossParameter_Norm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::HingeLossParameter_Norm>() {
  return ::apollo::perception::inference::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::DatasetParameter_DatasetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::DatasetParameter_DatasetType>() {
  return ::apollo::perception::inference::DatasetParameter_DatasetType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LRNParameter_NormRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LRNParameter_NormRegion>() {
  return ::apollo::perception::inference::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LRNParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LRNParameter_Engine>() {
  return ::apollo::perception::inference::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_LocLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_MatchType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_MiningType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_MiningType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_MiningType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PoolingParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PoolingParameter_PoolMethod>() {
  return ::apollo::perception::inference::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PoolingParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PoolingParameter_Engine>() {
  return ::apollo::perception::inference::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PoolingParameter_RoundMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PoolingParameter_RoundMode>() {
  return ::apollo::perception::inference::PoolingParameter_RoundMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PriorBoxParameter_CodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PriorBoxParameter_CodeType>() {
  return ::apollo::perception::inference::PriorBoxParameter_CodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ReductionParameter_ReductionOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ReductionParameter_ReductionOp>() {
  return ::apollo::perception::inference::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ReLUParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ReLUParameter_Engine>() {
  return ::apollo::perception::inference::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SigmoidParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SigmoidParameter_Engine>() {
  return ::apollo::perception::inference::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SoftmaxParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SoftmaxParameter_Engine>() {
  return ::apollo::perception::inference::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::TanHParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::TanHParameter_Engine>() {
  return ::apollo::perception::inference::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::VideoDataParameter_VideoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::VideoDataParameter_VideoType>() {
  return ::apollo::perception::inference::VideoDataParameter_VideoType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SPPParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SPPParameter_PoolMethod>() {
  return ::apollo::perception::inference::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SPPParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SPPParameter_Engine>() {
  return ::apollo::perception::inference::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V1LayerParameter_LayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V1LayerParameter_LayerType>() {
  return ::apollo::perception::inference::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V1LayerParameter_DimCheckMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V1LayerParameter_DimCheckMode>() {
  return ::apollo::perception::inference::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V0LayerParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V0LayerParameter_PoolMethod>() {
  return ::apollo::perception::inference::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::YoloLossParameter_RegLossType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::YoloLossParameter_RegLossType>() {
  return ::apollo::perception::inference::YoloLossParameter_RegLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE>() {
  return ::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::Phase>() {
  return ::apollo::perception::inference::Phase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2frt_2eproto
