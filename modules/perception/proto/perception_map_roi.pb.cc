// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_map_roi.proto

#include "modules/perception/proto/perception_map_roi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
PROTOBUF_CONSTEXPR PerceptionMapROI_Region::PerceptionMapROI_Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_x_)*/0
  , /*decltype(_impl_.end_x_)*/0
  , /*decltype(_impl_.start_y_)*/0
  , /*decltype(_impl_.end_y_)*/0
  , /*decltype(_impl_.extension_distance_)*/0} {}
struct PerceptionMapROI_RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionMapROI_RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionMapROI_RegionDefaultTypeInternal() {}
  union {
    PerceptionMapROI_Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionMapROI_RegionDefaultTypeInternal _PerceptionMapROI_Region_default_instance_;
PROTOBUF_CONSTEXPR PerceptionMapROI::PerceptionMapROI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.region_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.hdmap_header_)*/nullptr
  , /*decltype(_impl_.origin_x_)*/0
  , /*decltype(_impl_.origin_y_)*/0
  , /*decltype(_impl_.grid_size_)*/0
  , /*decltype(_impl_.num_rows_)*/0
  , /*decltype(_impl_.num_columns_)*/0} {}
struct PerceptionMapROIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionMapROIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionMapROIDefaultTypeInternal() {}
  union {
    PerceptionMapROI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionMapROIDefaultTypeInternal _PerceptionMapROI_default_instance_;
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_.start_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_.end_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_.start_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_.end_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI_Region, _impl_.extension_distance_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.hdmap_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.origin_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.origin_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.grid_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.num_columns_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionMapROI, _impl_.region_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::perception::PerceptionMapROI_Region)},
  { 16, 30, -1, sizeof(::apollo::perception::PerceptionMapROI)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::_PerceptionMapROI_Region_default_instance_._instance,
  &::apollo::perception::_PerceptionMapROI_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/perception/proto/perception_ma"
  "p_roi.proto\022\021apollo.perception\032!modules/"
  "common/proto/header.proto\032\033modules/map/p"
  "roto/map.proto\"\345\002\n\020PerceptionMapROI\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022*\n\014hd"
  "map_header\030\010 \001(\0132\024.apollo.hdmap.Header\022\020"
  "\n\010origin_x\030\002 \001(\001\022\020\n\010origin_y\030\003 \001(\001\022\021\n\tgr"
  "id_size\030\004 \001(\001\022\020\n\010num_rows\030\005 \001(\005\022\023\n\013num_c"
  "olumns\030\006 \001(\005\022:\n\006region\030\007 \003(\0132*.apollo.pe"
  "rception.PerceptionMapROI.Region\032d\n\006Regi"
  "on\022\017\n\007start_x\030\001 \001(\005\022\r\n\005end_x\030\002 \001(\005\022\017\n\007st"
  "art_y\030\003 \001(\005\022\r\n\005end_y\030\004 \001(\005\022\032\n\022extension_"
  "distance\030\005 \001(\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto = {
    false, false, 494, descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto,
    "modules/perception/proto/perception_map_roi.proto",
    &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto(&descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto);
namespace apollo {
namespace perception {

// ===================================================================

class PerceptionMapROI_Region::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionMapROI_Region>()._impl_._has_bits_);
  static void set_has_start_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extension_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PerceptionMapROI_Region::PerceptionMapROI_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionMapROI.Region)
}
PerceptionMapROI_Region::PerceptionMapROI_Region(const PerceptionMapROI_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_x_){}
    , decltype(_impl_.end_x_){}
    , decltype(_impl_.start_y_){}
    , decltype(_impl_.end_y_){}
    , decltype(_impl_.extension_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_x_, &from._impl_.start_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extension_distance_) -
    reinterpret_cast<char*>(&_impl_.start_x_)) + sizeof(_impl_.extension_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionMapROI.Region)
}

inline void PerceptionMapROI_Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_x_){0}
    , decltype(_impl_.end_x_){0}
    , decltype(_impl_.start_y_){0}
    , decltype(_impl_.end_y_){0}
    , decltype(_impl_.extension_distance_){0}
  };
}

PerceptionMapROI_Region::~PerceptionMapROI_Region() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionMapROI.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionMapROI_Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerceptionMapROI_Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionMapROI_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionMapROI.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.start_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.extension_distance_) -
        reinterpret_cast<char*>(&_impl_.start_x_)) + sizeof(_impl_.extension_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionMapROI_Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 start_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_x(&has_bits);
          _impl_.start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_x(&has_bits);
          _impl_.end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start_y(&has_bits);
          _impl_.start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end_y(&has_bits);
          _impl_.end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 extension_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_extension_distance(&has_bits);
          _impl_.extension_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionMapROI_Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionMapROI.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 start_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_x(), target);
  }

  // optional int32 end_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_x(), target);
  }

  // optional int32 start_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_y(), target);
  }

  // optional int32 end_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_y(), target);
  }

  // optional int32 extension_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_extension_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionMapROI.Region)
  return target;
}

size_t PerceptionMapROI_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionMapROI.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 start_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_x());
    }

    // optional int32 end_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_x());
    }

    // optional int32 start_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_y());
    }

    // optional int32 end_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_y());
    }

    // optional int32 extension_distance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extension_distance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionMapROI_Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionMapROI_Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionMapROI_Region::GetClassData() const { return &_class_data_; }

void PerceptionMapROI_Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionMapROI_Region *>(to)->MergeFrom(
      static_cast<const PerceptionMapROI_Region &>(from));
}


void PerceptionMapROI_Region::MergeFrom(const PerceptionMapROI_Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionMapROI.Region)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_x_ = from._impl_.start_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_x_ = from._impl_.end_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.start_y_ = from._impl_.start_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.end_y_ = from._impl_.end_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.extension_distance_ = from._impl_.extension_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionMapROI_Region::CopyFrom(const PerceptionMapROI_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionMapROI.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionMapROI_Region::IsInitialized() const {
  return true;
}

void PerceptionMapROI_Region::InternalSwap(PerceptionMapROI_Region* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionMapROI_Region, _impl_.extension_distance_)
      + sizeof(PerceptionMapROI_Region::_impl_.extension_distance_)
      - PROTOBUF_FIELD_OFFSET(PerceptionMapROI_Region, _impl_.start_x_)>(
          reinterpret_cast<char*>(&_impl_.start_x_),
          reinterpret_cast<char*>(&other->_impl_.start_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionMapROI_Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto[0]);
}

// ===================================================================

class PerceptionMapROI::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionMapROI>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const PerceptionMapROI* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Header& hdmap_header(const PerceptionMapROI* msg);
  static void set_has_hdmap_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_grid_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::common::Header&
PerceptionMapROI::_Internal::header(const PerceptionMapROI* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::hdmap::Header&
PerceptionMapROI::_Internal::hdmap_header(const PerceptionMapROI* msg) {
  return *msg->_impl_.hdmap_header_;
}
void PerceptionMapROI::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PerceptionMapROI::clear_hdmap_header() {
  if (_impl_.hdmap_header_ != nullptr) _impl_.hdmap_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PerceptionMapROI::PerceptionMapROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionMapROI)
}
PerceptionMapROI::PerceptionMapROI(const PerceptionMapROI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_){from._impl_.region_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.hdmap_header_){nullptr}
    , decltype(_impl_.origin_x_){}
    , decltype(_impl_.origin_y_){}
    , decltype(_impl_.grid_size_){}
    , decltype(_impl_.num_rows_){}
    , decltype(_impl_.num_columns_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_hdmap_header()) {
    _impl_.hdmap_header_ = new ::apollo::hdmap::Header(*from._impl_.hdmap_header_);
  }
  ::memcpy(&_impl_.origin_x_, &from._impl_.origin_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_columns_) -
    reinterpret_cast<char*>(&_impl_.origin_x_)) + sizeof(_impl_.num_columns_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionMapROI)
}

inline void PerceptionMapROI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.hdmap_header_){nullptr}
    , decltype(_impl_.origin_x_){0}
    , decltype(_impl_.origin_y_){0}
    , decltype(_impl_.grid_size_){0}
    , decltype(_impl_.num_rows_){0}
    , decltype(_impl_.num_columns_){0}
  };
}

PerceptionMapROI::~PerceptionMapROI() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionMapROI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionMapROI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.hdmap_header_;
}

void PerceptionMapROI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionMapROI::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionMapROI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hdmap_header_ != nullptr);
      _impl_.hdmap_header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_columns_) -
        reinterpret_cast<char*>(&_impl_.origin_x_)) + sizeof(_impl_.num_columns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionMapROI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double origin_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_origin_x(&has_bits);
          _impl_.origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double origin_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_origin_y(&has_bits);
          _impl_.origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grid_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_grid_size(&has_bits);
          _impl_.grid_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_rows(&has_bits);
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_columns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_columns(&has_bits);
          _impl_.num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.PerceptionMapROI.Region region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Header hdmap_header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdmap_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionMapROI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionMapROI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double origin_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_origin_x(), target);
  }

  // optional double origin_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_origin_y(), target);
  }

  // optional double grid_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_grid_size(), target);
  }

  // optional int32 num_rows = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_rows(), target);
  }

  // optional int32 num_columns = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_columns(), target);
  }

  // repeated .apollo.perception.PerceptionMapROI.Region region = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_region_size()); i < n; i++) {
    const auto& repfield = this->_internal_region(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Header hdmap_header = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::hdmap_header(this),
        _Internal::hdmap_header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionMapROI)
  return target;
}

size_t PerceptionMapROI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionMapROI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionMapROI.Region region = 7;
  total_size += 1UL * this->_internal_region_size();
  for (const auto& msg : this->_impl_.region_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.hdmap.Header hdmap_header = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdmap_header_);
    }

    // optional double origin_x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double origin_y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double grid_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 num_rows = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_rows());
    }

    // optional int32 num_columns = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_columns());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionMapROI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionMapROI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionMapROI::GetClassData() const { return &_class_data_; }

void PerceptionMapROI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionMapROI *>(to)->MergeFrom(
      static_cast<const PerceptionMapROI &>(from));
}


void PerceptionMapROI::MergeFrom(const PerceptionMapROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionMapROI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.region_.MergeFrom(from._impl_.region_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hdmap_header()->::apollo::hdmap::Header::MergeFrom(from._internal_hdmap_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.origin_x_ = from._impl_.origin_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.origin_y_ = from._impl_.origin_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.grid_size_ = from._impl_.grid_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.num_rows_ = from._impl_.num_rows_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.num_columns_ = from._impl_.num_columns_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionMapROI::CopyFrom(const PerceptionMapROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionMapROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionMapROI::IsInitialized() const {
  return true;
}

void PerceptionMapROI::InternalSwap(PerceptionMapROI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.region_.InternalSwap(&other->_impl_.region_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionMapROI, _impl_.num_columns_)
      + sizeof(PerceptionMapROI::_impl_.num_columns_)
      - PROTOBUF_FIELD_OFFSET(PerceptionMapROI, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionMapROI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fmap_5froi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionMapROI_Region*
Arena::CreateMaybeMessage< ::apollo::perception::PerceptionMapROI_Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionMapROI_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionMapROI*
Arena::CreateMaybeMessage< ::apollo::perception::PerceptionMapROI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionMapROI >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
