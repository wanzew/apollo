// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/dst_type_fusion_config.proto

#include "modules/perception/proto/dst_type_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace fusion {
PROTOBUF_CONSTEXPR CameraDstTypeFusionParam::CameraDstTypeFusionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_dist_)*/0
  , /*decltype(_impl_.reliability_)*/0
  , /*decltype(_impl_.reliability_for_unknown_)*/0} {}
struct CameraDstTypeFusionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDstTypeFusionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDstTypeFusionParamDefaultTypeInternal() {}
  union {
    CameraDstTypeFusionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDstTypeFusionParamDefaultTypeInternal _CameraDstTypeFusionParam_default_instance_;
PROTOBUF_CONSTEXPR LidarDstTypeFusionParam::LidarDstTypeFusionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reliability_)*/0
  , /*decltype(_impl_.reliability_for_unknown_)*/0} {}
struct LidarDstTypeFusionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDstTypeFusionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDstTypeFusionParamDefaultTypeInternal() {}
  union {
    LidarDstTypeFusionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDstTypeFusionParamDefaultTypeInternal _LidarDstTypeFusionParam_default_instance_;
PROTOBUF_CONSTEXPR DstTypeFusionConfig::DstTypeFusionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_params_)*/{}
  , /*decltype(_impl_.lidar_params_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DstTypeFusionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DstTypeFusionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DstTypeFusionConfigDefaultTypeInternal() {}
  union {
    DstTypeFusionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DstTypeFusionConfigDefaultTypeInternal _DstTypeFusionConfig_default_instance_;
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _impl_.valid_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _impl_.reliability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _impl_.reliability_for_unknown_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _impl_.reliability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _impl_.reliability_for_unknown_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, _impl_.camera_params_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, _impl_.lidar_params_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::perception::fusion::CameraDstTypeFusionParam)},
  { 14, 23, -1, sizeof(::apollo::perception::fusion::LidarDstTypeFusionParam)},
  { 26, -1, -1, sizeof(::apollo::perception::fusion::DstTypeFusionConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::fusion::_CameraDstTypeFusionParam_default_instance_._instance,
  &::apollo::perception::fusion::_LidarDstTypeFusionParam_default_instance_._instance,
  &::apollo::perception::fusion::_DstTypeFusionConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/perception/proto/dst_type_fusi"
  "on_config.proto\022\030apollo.perception.fusio"
  "n\"}\n\030CameraDstTypeFusionParam\022\016\n\004name\030\001 "
  "\001(\t:\000\022\025\n\nvalid_dist\030\002 \001(\001:\0010\022\026\n\013reliabil"
  "ity\030\003 \001(\001:\0010\022\"\n\027reliability_for_unknown\030"
  "\004 \001(\001:\0010\"e\n\027LidarDstTypeFusionParam\022\016\n\004n"
  "ame\030\001 \001(\t:\000\022\026\n\013reliability\030\002 \001(\001:\0010\022\"\n\027r"
  "eliability_for_unknown\030\003 \001(\001:\0010\"\251\001\n\023DstT"
  "ypeFusionConfig\022I\n\rcamera_params\030\001 \003(\01322"
  ".apollo.perception.fusion.CameraDstTypeF"
  "usionParam\022G\n\014lidar_params\030\002 \003(\01321.apoll"
  "o.perception.fusion.LidarDstTypeFusionPa"
  "ram"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = {
    false, false, 483, descriptor_table_protodef_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto,
    "modules/perception/proto/dst_type_fusion_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace fusion {

// ===================================================================

class CameraDstTypeFusionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDstTypeFusionParam>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reliability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reliability_for_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CameraDstTypeFusionParam::CameraDstTypeFusionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.CameraDstTypeFusionParam)
}
CameraDstTypeFusionParam::CameraDstTypeFusionParam(const CameraDstTypeFusionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.valid_dist_){}
    , decltype(_impl_.reliability_){}
    , decltype(_impl_.reliability_for_unknown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valid_dist_, &from._impl_.valid_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reliability_for_unknown_) -
    reinterpret_cast<char*>(&_impl_.valid_dist_)) + sizeof(_impl_.reliability_for_unknown_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.CameraDstTypeFusionParam)
}

inline void CameraDstTypeFusionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.valid_dist_){0}
    , decltype(_impl_.reliability_){0}
    , decltype(_impl_.reliability_for_unknown_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraDstTypeFusionParam::~CameraDstTypeFusionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.CameraDstTypeFusionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDstTypeFusionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CameraDstTypeFusionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDstTypeFusionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.valid_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reliability_for_unknown_) -
        reinterpret_cast<char*>(&_impl_.valid_dist_)) + sizeof(_impl_.reliability_for_unknown_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDstTypeFusionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.fusion.CameraDstTypeFusionParam.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double valid_dist = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_valid_dist(&has_bits);
          _impl_.valid_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reliability = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_reliability(&has_bits);
          _impl_.reliability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reliability_for_unknown = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_reliability_for_unknown(&has_bits);
          _impl_.reliability_for_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraDstTypeFusionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.CameraDstTypeFusionParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double valid_dist = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_valid_dist(), target);
  }

  // optional double reliability = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_reliability(), target);
  }

  // optional double reliability_for_unknown = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_reliability_for_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.CameraDstTypeFusionParam)
  return target;
}

size_t CameraDstTypeFusionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double valid_dist = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reliability = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double reliability_for_unknown = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDstTypeFusionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraDstTypeFusionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDstTypeFusionParam::GetClassData() const { return &_class_data_; }

void CameraDstTypeFusionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraDstTypeFusionParam *>(to)->MergeFrom(
      static_cast<const CameraDstTypeFusionParam &>(from));
}


void CameraDstTypeFusionParam::MergeFrom(const CameraDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.valid_dist_ = from._impl_.valid_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reliability_ = from._impl_.reliability_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.reliability_for_unknown_ = from._impl_.reliability_for_unknown_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDstTypeFusionParam::CopyFrom(const CameraDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDstTypeFusionParam::IsInitialized() const {
  return true;
}

void CameraDstTypeFusionParam::InternalSwap(CameraDstTypeFusionParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDstTypeFusionParam, _impl_.reliability_for_unknown_)
      + sizeof(CameraDstTypeFusionParam::_impl_.reliability_for_unknown_)
      - PROTOBUF_FIELD_OFFSET(CameraDstTypeFusionParam, _impl_.valid_dist_)>(
          reinterpret_cast<char*>(&_impl_.valid_dist_),
          reinterpret_cast<char*>(&other->_impl_.valid_dist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDstTypeFusionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[0]);
}

// ===================================================================

class LidarDstTypeFusionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarDstTypeFusionParam>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reliability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reliability_for_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LidarDstTypeFusionParam::LidarDstTypeFusionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.LidarDstTypeFusionParam)
}
LidarDstTypeFusionParam::LidarDstTypeFusionParam(const LidarDstTypeFusionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.reliability_){}
    , decltype(_impl_.reliability_for_unknown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reliability_, &from._impl_.reliability_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reliability_for_unknown_) -
    reinterpret_cast<char*>(&_impl_.reliability_)) + sizeof(_impl_.reliability_for_unknown_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.LidarDstTypeFusionParam)
}

inline void LidarDstTypeFusionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.reliability_){0}
    , decltype(_impl_.reliability_for_unknown_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LidarDstTypeFusionParam::~LidarDstTypeFusionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.LidarDstTypeFusionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LidarDstTypeFusionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void LidarDstTypeFusionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LidarDstTypeFusionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.reliability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reliability_for_unknown_) -
        reinterpret_cast<char*>(&_impl_.reliability_)) + sizeof(_impl_.reliability_for_unknown_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarDstTypeFusionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.fusion.LidarDstTypeFusionParam.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double reliability = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_reliability(&has_bits);
          _impl_.reliability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reliability_for_unknown = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_reliability_for_unknown(&has_bits);
          _impl_.reliability_for_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LidarDstTypeFusionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.LidarDstTypeFusionParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double reliability = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_reliability(), target);
  }

  // optional double reliability_for_unknown = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_reliability_for_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.LidarDstTypeFusionParam)
  return target;
}

size_t LidarDstTypeFusionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double reliability = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reliability_for_unknown = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarDstTypeFusionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LidarDstTypeFusionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarDstTypeFusionParam::GetClassData() const { return &_class_data_; }

void LidarDstTypeFusionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LidarDstTypeFusionParam *>(to)->MergeFrom(
      static_cast<const LidarDstTypeFusionParam &>(from));
}


void LidarDstTypeFusionParam::MergeFrom(const LidarDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reliability_ = from._impl_.reliability_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reliability_for_unknown_ = from._impl_.reliability_for_unknown_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarDstTypeFusionParam::CopyFrom(const LidarDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDstTypeFusionParam::IsInitialized() const {
  return true;
}

void LidarDstTypeFusionParam::InternalSwap(LidarDstTypeFusionParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarDstTypeFusionParam, _impl_.reliability_for_unknown_)
      + sizeof(LidarDstTypeFusionParam::_impl_.reliability_for_unknown_)
      - PROTOBUF_FIELD_OFFSET(LidarDstTypeFusionParam, _impl_.reliability_)>(
          reinterpret_cast<char*>(&_impl_.reliability_),
          reinterpret_cast<char*>(&other->_impl_.reliability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarDstTypeFusionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[1]);
}

// ===================================================================

class DstTypeFusionConfig::_Internal {
 public:
};

DstTypeFusionConfig::DstTypeFusionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.DstTypeFusionConfig)
}
DstTypeFusionConfig::DstTypeFusionConfig(const DstTypeFusionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.camera_params_){from._impl_.camera_params_}
    , decltype(_impl_.lidar_params_){from._impl_.lidar_params_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.DstTypeFusionConfig)
}

inline void DstTypeFusionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_params_){arena}
    , decltype(_impl_.lidar_params_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DstTypeFusionConfig::~DstTypeFusionConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.DstTypeFusionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DstTypeFusionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_params_.~RepeatedPtrField();
  _impl_.lidar_params_.~RepeatedPtrField();
}

void DstTypeFusionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DstTypeFusionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.DstTypeFusionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_params_.Clear();
  _impl_.lidar_params_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DstTypeFusionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lidar_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DstTypeFusionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.DstTypeFusionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lidar_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_lidar_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.DstTypeFusionConfig)
  return target;
}

size_t DstTypeFusionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.DstTypeFusionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
  total_size += 1UL * this->_internal_camera_params_size();
  for (const auto& msg : this->_impl_.camera_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
  total_size += 1UL * this->_internal_lidar_params_size();
  for (const auto& msg : this->_impl_.lidar_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DstTypeFusionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DstTypeFusionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DstTypeFusionConfig::GetClassData() const { return &_class_data_; }

void DstTypeFusionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DstTypeFusionConfig *>(to)->MergeFrom(
      static_cast<const DstTypeFusionConfig &>(from));
}


void DstTypeFusionConfig::MergeFrom(const DstTypeFusionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.camera_params_.MergeFrom(from._impl_.camera_params_);
  _impl_.lidar_params_.MergeFrom(from._impl_.lidar_params_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DstTypeFusionConfig::CopyFrom(const DstTypeFusionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DstTypeFusionConfig::IsInitialized() const {
  return true;
}

void DstTypeFusionConfig::InternalSwap(DstTypeFusionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camera_params_.InternalSwap(&other->_impl_.camera_params_);
  _impl_.lidar_params_.InternalSwap(&other->_impl_.lidar_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DstTypeFusionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::CameraDstTypeFusionParam*
Arena::CreateMaybeMessage< ::apollo::perception::fusion::CameraDstTypeFusionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::CameraDstTypeFusionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::LidarDstTypeFusionParam*
Arena::CreateMaybeMessage< ::apollo::perception::fusion::LidarDstTypeFusionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::LidarDstTypeFusionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::DstTypeFusionConfig*
Arena::CreateMaybeMessage< ::apollo::perception::fusion::DstTypeFusionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::DstTypeFusionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
