// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/tracker_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace tracker_config {
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace tracker_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::tracker_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::tracker_config::ModelConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace tracker_config {

enum ModelConfigs_MatcherType : int {
  ModelConfigs_MatcherType_HUNGARIAN_MATCHER = 1
};
bool ModelConfigs_MatcherType_IsValid(int value);
constexpr ModelConfigs_MatcherType ModelConfigs_MatcherType_MatcherType_MIN = ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
constexpr ModelConfigs_MatcherType ModelConfigs_MatcherType_MatcherType_MAX = ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
constexpr int ModelConfigs_MatcherType_MatcherType_ARRAYSIZE = ModelConfigs_MatcherType_MatcherType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelConfigs_MatcherType_descriptor();
template<typename T>
inline const std::string& ModelConfigs_MatcherType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelConfigs_MatcherType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelConfigs_MatcherType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelConfigs_MatcherType_descriptor(), enum_t_value);
}
inline bool ModelConfigs_MatcherType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelConfigs_MatcherType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelConfigs_MatcherType>(
    ModelConfigs_MatcherType_descriptor(), name, value);
}
enum ModelConfigs_FilterType : int {
  ModelConfigs_FilterType_KALMAN_FILTER = 1
};
bool ModelConfigs_FilterType_IsValid(int value);
constexpr ModelConfigs_FilterType ModelConfigs_FilterType_FilterType_MIN = ModelConfigs_FilterType_KALMAN_FILTER;
constexpr ModelConfigs_FilterType ModelConfigs_FilterType_FilterType_MAX = ModelConfigs_FilterType_KALMAN_FILTER;
constexpr int ModelConfigs_FilterType_FilterType_ARRAYSIZE = ModelConfigs_FilterType_FilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelConfigs_FilterType_descriptor();
template<typename T>
inline const std::string& ModelConfigs_FilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelConfigs_FilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelConfigs_FilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelConfigs_FilterType_descriptor(), enum_t_value);
}
inline bool ModelConfigs_FilterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelConfigs_FilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelConfigs_FilterType>(
    ModelConfigs_FilterType_descriptor(), name, value);
}
// ===================================================================

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.tracker_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.tracker_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModelConfigs_MatcherType MatcherType;
  static constexpr MatcherType HUNGARIAN_MATCHER =
    ModelConfigs_MatcherType_HUNGARIAN_MATCHER;
  static inline bool MatcherType_IsValid(int value) {
    return ModelConfigs_MatcherType_IsValid(value);
  }
  static constexpr MatcherType MatcherType_MIN =
    ModelConfigs_MatcherType_MatcherType_MIN;
  static constexpr MatcherType MatcherType_MAX =
    ModelConfigs_MatcherType_MatcherType_MAX;
  static constexpr int MatcherType_ARRAYSIZE =
    ModelConfigs_MatcherType_MatcherType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatcherType_descriptor() {
    return ModelConfigs_MatcherType_descriptor();
  }
  template<typename T>
  static inline const std::string& MatcherType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatcherType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatcherType_Name.");
    return ModelConfigs_MatcherType_Name(enum_t_value);
  }
  static inline bool MatcherType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatcherType* value) {
    return ModelConfigs_MatcherType_Parse(name, value);
  }

  typedef ModelConfigs_FilterType FilterType;
  static constexpr FilterType KALMAN_FILTER =
    ModelConfigs_FilterType_KALMAN_FILTER;
  static inline bool FilterType_IsValid(int value) {
    return ModelConfigs_FilterType_IsValid(value);
  }
  static constexpr FilterType FilterType_MIN =
    ModelConfigs_FilterType_FilterType_MIN;
  static constexpr FilterType FilterType_MAX =
    ModelConfigs_FilterType_FilterType_MAX;
  static constexpr int FilterType_ARRAYSIZE =
    ModelConfigs_FilterType_FilterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterType_descriptor() {
    return ModelConfigs_FilterType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterType_Name.");
    return ModelConfigs_FilterType_Name(enum_t_value);
  }
  static inline bool FilterType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FilterType* value) {
    return ModelConfigs_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kCollectAgeMinimumFieldNumber = 8,
    kCollectConsecutiveInvisibleMaximumFieldNumber = 9,
    kMatcherMethodFieldNumber = 3,
    kFilterMethodFieldNumber = 4,
    kTrackCachedHistorySizeMaximumFieldNumber = 5,
    kTrackConsecutiveInvisibleMaximumFieldNumber = 6,
    kTrackVisibleRatioMinimumFieldNumber = 7,
    kAccelerationNoiseMaximumFieldNumber = 10,
    kSpeedNoiseMaximumFieldNumber = 11,
    kMatchDistanceMaximumFieldNumber = 12,
    kLocationDistanceWeightFieldNumber = 13,
    kDirectionDistanceWeightFieldNumber = 14,
    kBboxSizeDistanceWeightFieldNumber = 15,
    kPointNumDistanceWeightFieldNumber = 16,
    kHistogramDistanceWeightFieldNumber = 17,
    kHistogramBinSizeFieldNumber = 18,
    kUseAdaptiveFieldNumber = 19,
    kMeasurementNoiseFieldNumber = 20,
    kInitialVelocityNoiseFieldNumber = 21,
    kXyPropagationNoiseFieldNumber = 22,
    kZPropagationNoiseFieldNumber = 23,
    kBreakdownThresholdMaximumFieldNumber = 24,
  };
  // optional string name = 1 [default = "HmObjectTracker"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.1.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int32 collect_age_minimum = 8 [default = 0];
  bool has_collect_age_minimum() const;
  private:
  bool _internal_has_collect_age_minimum() const;
  public:
  void clear_collect_age_minimum();
  int32_t collect_age_minimum() const;
  void set_collect_age_minimum(int32_t value);
  private:
  int32_t _internal_collect_age_minimum() const;
  void _internal_set_collect_age_minimum(int32_t value);
  public:

  // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
  bool has_collect_consecutive_invisible_maximum() const;
  private:
  bool _internal_has_collect_consecutive_invisible_maximum() const;
  public:
  void clear_collect_consecutive_invisible_maximum();
  int32_t collect_consecutive_invisible_maximum() const;
  void set_collect_consecutive_invisible_maximum(int32_t value);
  private:
  int32_t _internal_collect_consecutive_invisible_maximum() const;
  void _internal_set_collect_consecutive_invisible_maximum(int32_t value);
  public:

  // optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
  bool has_matcher_method() const;
  private:
  bool _internal_has_matcher_method() const;
  public:
  void clear_matcher_method();
  ::apollo::perception::tracker_config::ModelConfigs_MatcherType matcher_method() const;
  void set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value);
  private:
  ::apollo::perception::tracker_config::ModelConfigs_MatcherType _internal_matcher_method() const;
  void _internal_set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value);
  public:

  // optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
  bool has_filter_method() const;
  private:
  bool _internal_has_filter_method() const;
  public:
  void clear_filter_method();
  ::apollo::perception::tracker_config::ModelConfigs_FilterType filter_method() const;
  void set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value);
  private:
  ::apollo::perception::tracker_config::ModelConfigs_FilterType _internal_filter_method() const;
  void _internal_set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value);
  public:

  // optional int32 track_cached_history_size_maximum = 5 [default = 5];
  bool has_track_cached_history_size_maximum() const;
  private:
  bool _internal_has_track_cached_history_size_maximum() const;
  public:
  void clear_track_cached_history_size_maximum();
  int32_t track_cached_history_size_maximum() const;
  void set_track_cached_history_size_maximum(int32_t value);
  private:
  int32_t _internal_track_cached_history_size_maximum() const;
  void _internal_set_track_cached_history_size_maximum(int32_t value);
  public:

  // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
  bool has_track_consecutive_invisible_maximum() const;
  private:
  bool _internal_has_track_consecutive_invisible_maximum() const;
  public:
  void clear_track_consecutive_invisible_maximum();
  int32_t track_consecutive_invisible_maximum() const;
  void set_track_consecutive_invisible_maximum(int32_t value);
  private:
  int32_t _internal_track_consecutive_invisible_maximum() const;
  void _internal_set_track_consecutive_invisible_maximum(int32_t value);
  public:

  // optional float track_visible_ratio_minimum = 7 [default = 0.6];
  bool has_track_visible_ratio_minimum() const;
  private:
  bool _internal_has_track_visible_ratio_minimum() const;
  public:
  void clear_track_visible_ratio_minimum();
  float track_visible_ratio_minimum() const;
  void set_track_visible_ratio_minimum(float value);
  private:
  float _internal_track_visible_ratio_minimum() const;
  void _internal_set_track_visible_ratio_minimum(float value);
  public:

  // optional float acceleration_noise_maximum = 10 [default = 5];
  bool has_acceleration_noise_maximum() const;
  private:
  bool _internal_has_acceleration_noise_maximum() const;
  public:
  void clear_acceleration_noise_maximum();
  float acceleration_noise_maximum() const;
  void set_acceleration_noise_maximum(float value);
  private:
  float _internal_acceleration_noise_maximum() const;
  void _internal_set_acceleration_noise_maximum(float value);
  public:

  // optional float speed_noise_maximum = 11 [default = 0.4];
  bool has_speed_noise_maximum() const;
  private:
  bool _internal_has_speed_noise_maximum() const;
  public:
  void clear_speed_noise_maximum();
  float speed_noise_maximum() const;
  void set_speed_noise_maximum(float value);
  private:
  float _internal_speed_noise_maximum() const;
  void _internal_set_speed_noise_maximum(float value);
  public:

  // optional float match_distance_maximum = 12 [default = 4];
  bool has_match_distance_maximum() const;
  private:
  bool _internal_has_match_distance_maximum() const;
  public:
  void clear_match_distance_maximum();
  float match_distance_maximum() const;
  void set_match_distance_maximum(float value);
  private:
  float _internal_match_distance_maximum() const;
  void _internal_set_match_distance_maximum(float value);
  public:

  // optional float location_distance_weight = 13 [default = 0.6];
  bool has_location_distance_weight() const;
  private:
  bool _internal_has_location_distance_weight() const;
  public:
  void clear_location_distance_weight();
  float location_distance_weight() const;
  void set_location_distance_weight(float value);
  private:
  float _internal_location_distance_weight() const;
  void _internal_set_location_distance_weight(float value);
  public:

  // optional float direction_distance_weight = 14 [default = 0.2];
  bool has_direction_distance_weight() const;
  private:
  bool _internal_has_direction_distance_weight() const;
  public:
  void clear_direction_distance_weight();
  float direction_distance_weight() const;
  void set_direction_distance_weight(float value);
  private:
  float _internal_direction_distance_weight() const;
  void _internal_set_direction_distance_weight(float value);
  public:

  // optional float bbox_size_distance_weight = 15 [default = 0.1];
  bool has_bbox_size_distance_weight() const;
  private:
  bool _internal_has_bbox_size_distance_weight() const;
  public:
  void clear_bbox_size_distance_weight();
  float bbox_size_distance_weight() const;
  void set_bbox_size_distance_weight(float value);
  private:
  float _internal_bbox_size_distance_weight() const;
  void _internal_set_bbox_size_distance_weight(float value);
  public:

  // optional float point_num_distance_weight = 16 [default = 0.1];
  bool has_point_num_distance_weight() const;
  private:
  bool _internal_has_point_num_distance_weight() const;
  public:
  void clear_point_num_distance_weight();
  float point_num_distance_weight() const;
  void set_point_num_distance_weight(float value);
  private:
  float _internal_point_num_distance_weight() const;
  void _internal_set_point_num_distance_weight(float value);
  public:

  // optional float histogram_distance_weight = 17 [default = 0.5];
  bool has_histogram_distance_weight() const;
  private:
  bool _internal_has_histogram_distance_weight() const;
  public:
  void clear_histogram_distance_weight();
  float histogram_distance_weight() const;
  void set_histogram_distance_weight(float value);
  private:
  float _internal_histogram_distance_weight() const;
  void _internal_set_histogram_distance_weight(float value);
  public:

  // optional int32 histogram_bin_size = 18 [default = 10];
  bool has_histogram_bin_size() const;
  private:
  bool _internal_has_histogram_bin_size() const;
  public:
  void clear_histogram_bin_size();
  int32_t histogram_bin_size() const;
  void set_histogram_bin_size(int32_t value);
  private:
  int32_t _internal_histogram_bin_size() const;
  void _internal_set_histogram_bin_size(int32_t value);
  public:

  // optional bool use_adaptive = 19 [default = true];
  bool has_use_adaptive() const;
  private:
  bool _internal_has_use_adaptive() const;
  public:
  void clear_use_adaptive();
  bool use_adaptive() const;
  void set_use_adaptive(bool value);
  private:
  bool _internal_use_adaptive() const;
  void _internal_set_use_adaptive(bool value);
  public:

  // optional float measurement_noise = 20 [default = 0.4];
  bool has_measurement_noise() const;
  private:
  bool _internal_has_measurement_noise() const;
  public:
  void clear_measurement_noise();
  float measurement_noise() const;
  void set_measurement_noise(float value);
  private:
  float _internal_measurement_noise() const;
  void _internal_set_measurement_noise(float value);
  public:

  // optional float initial_velocity_noise = 21 [default = 5];
  bool has_initial_velocity_noise() const;
  private:
  bool _internal_has_initial_velocity_noise() const;
  public:
  void clear_initial_velocity_noise();
  float initial_velocity_noise() const;
  void set_initial_velocity_noise(float value);
  private:
  float _internal_initial_velocity_noise() const;
  void _internal_set_initial_velocity_noise(float value);
  public:

  // optional float xy_propagation_noise = 22 [default = 10];
  bool has_xy_propagation_noise() const;
  private:
  bool _internal_has_xy_propagation_noise() const;
  public:
  void clear_xy_propagation_noise();
  float xy_propagation_noise() const;
  void set_xy_propagation_noise(float value);
  private:
  float _internal_xy_propagation_noise() const;
  void _internal_set_xy_propagation_noise(float value);
  public:

  // optional float z_propagation_noise = 23 [default = 10];
  bool has_z_propagation_noise() const;
  private:
  bool _internal_has_z_propagation_noise() const;
  public:
  void clear_z_propagation_noise();
  float z_propagation_noise() const;
  void set_z_propagation_noise(float value);
  private:
  float _internal_z_propagation_noise() const;
  void _internal_set_z_propagation_noise(float value);
  public:

  // optional float breakdown_threshold_maximum = 24 [default = 10];
  bool has_breakdown_threshold_maximum() const;
  private:
  bool _internal_has_breakdown_threshold_maximum() const;
  public:
  void clear_breakdown_threshold_maximum();
  float breakdown_threshold_maximum() const;
  void set_breakdown_threshold_maximum(float value);
  private:
  float _internal_breakdown_threshold_maximum() const;
  void _internal_set_breakdown_threshold_maximum(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.tracker_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int32_t collect_age_minimum_;
    int32_t collect_consecutive_invisible_maximum_;
    int matcher_method_;
    int filter_method_;
    int32_t track_cached_history_size_maximum_;
    int32_t track_consecutive_invisible_maximum_;
    float track_visible_ratio_minimum_;
    float acceleration_noise_maximum_;
    float speed_noise_maximum_;
    float match_distance_maximum_;
    float location_distance_weight_;
    float direction_distance_weight_;
    float bbox_size_distance_weight_;
    float point_num_distance_weight_;
    float histogram_distance_weight_;
    int32_t histogram_bin_size_;
    bool use_adaptive_;
    float measurement_noise_;
    float initial_velocity_noise_;
    float xy_propagation_noise_;
    float z_propagation_noise_;
    float breakdown_threshold_maximum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConfigs

// optional string name = 1 [default = "HmObjectTracker"];
inline bool ModelConfigs::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelConfigs::has_name() const {
  return _internal_has_name();
}
inline void ModelConfigs::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.name)
}
inline std::string* ModelConfigs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.tracker_config.ModelConfigs.name)
  return _s;
}
inline const std::string& ModelConfigs::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelConfigs::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.tracker_config.ModelConfigs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.tracker_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.1.0"];
inline bool ModelConfigs::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelConfigs::has_version() const {
  return _internal_has_version();
}
inline void ModelConfigs::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.version)
}
inline std::string* ModelConfigs::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.tracker_config.ModelConfigs.version)
  return _s;
}
inline const std::string& ModelConfigs::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ModelConfigs::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.tracker_config.ModelConfigs.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.tracker_config.ModelConfigs.version)
}

// optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
inline bool ModelConfigs::_internal_has_matcher_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelConfigs::has_matcher_method() const {
  return _internal_has_matcher_method();
}
inline void ModelConfigs::clear_matcher_method() {
  _impl_.matcher_method_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::perception::tracker_config::ModelConfigs_MatcherType ModelConfigs::_internal_matcher_method() const {
  return static_cast< ::apollo::perception::tracker_config::ModelConfigs_MatcherType >(_impl_.matcher_method_);
}
inline ::apollo::perception::tracker_config::ModelConfigs_MatcherType ModelConfigs::matcher_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.matcher_method)
  return _internal_matcher_method();
}
inline void ModelConfigs::_internal_set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value) {
  assert(::apollo::perception::tracker_config::ModelConfigs_MatcherType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.matcher_method_ = value;
}
inline void ModelConfigs::set_matcher_method(::apollo::perception::tracker_config::ModelConfigs_MatcherType value) {
  _internal_set_matcher_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.matcher_method)
}

// optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
inline bool ModelConfigs::_internal_has_filter_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelConfigs::has_filter_method() const {
  return _internal_has_filter_method();
}
inline void ModelConfigs::clear_filter_method() {
  _impl_.filter_method_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::perception::tracker_config::ModelConfigs_FilterType ModelConfigs::_internal_filter_method() const {
  return static_cast< ::apollo::perception::tracker_config::ModelConfigs_FilterType >(_impl_.filter_method_);
}
inline ::apollo::perception::tracker_config::ModelConfigs_FilterType ModelConfigs::filter_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.filter_method)
  return _internal_filter_method();
}
inline void ModelConfigs::_internal_set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value) {
  assert(::apollo::perception::tracker_config::ModelConfigs_FilterType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.filter_method_ = value;
}
inline void ModelConfigs::set_filter_method(::apollo::perception::tracker_config::ModelConfigs_FilterType value) {
  _internal_set_filter_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.filter_method)
}

// optional int32 track_cached_history_size_maximum = 5 [default = 5];
inline bool ModelConfigs::_internal_has_track_cached_history_size_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelConfigs::has_track_cached_history_size_maximum() const {
  return _internal_has_track_cached_history_size_maximum();
}
inline void ModelConfigs::clear_track_cached_history_size_maximum() {
  _impl_.track_cached_history_size_maximum_ = 5;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ModelConfigs::_internal_track_cached_history_size_maximum() const {
  return _impl_.track_cached_history_size_maximum_;
}
inline int32_t ModelConfigs::track_cached_history_size_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
  return _internal_track_cached_history_size_maximum();
}
inline void ModelConfigs::_internal_set_track_cached_history_size_maximum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.track_cached_history_size_maximum_ = value;
}
inline void ModelConfigs::set_track_cached_history_size_maximum(int32_t value) {
  _internal_set_track_cached_history_size_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
}

// optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
inline bool ModelConfigs::_internal_has_track_consecutive_invisible_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelConfigs::has_track_consecutive_invisible_maximum() const {
  return _internal_has_track_consecutive_invisible_maximum();
}
inline void ModelConfigs::clear_track_consecutive_invisible_maximum() {
  _impl_.track_consecutive_invisible_maximum_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ModelConfigs::_internal_track_consecutive_invisible_maximum() const {
  return _impl_.track_consecutive_invisible_maximum_;
}
inline int32_t ModelConfigs::track_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
  return _internal_track_consecutive_invisible_maximum();
}
inline void ModelConfigs::_internal_set_track_consecutive_invisible_maximum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.track_consecutive_invisible_maximum_ = value;
}
inline void ModelConfigs::set_track_consecutive_invisible_maximum(int32_t value) {
  _internal_set_track_consecutive_invisible_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
}

// optional float track_visible_ratio_minimum = 7 [default = 0.6];
inline bool ModelConfigs::_internal_has_track_visible_ratio_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelConfigs::has_track_visible_ratio_minimum() const {
  return _internal_has_track_visible_ratio_minimum();
}
inline void ModelConfigs::clear_track_visible_ratio_minimum() {
  _impl_.track_visible_ratio_minimum_ = 0.6f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float ModelConfigs::_internal_track_visible_ratio_minimum() const {
  return _impl_.track_visible_ratio_minimum_;
}
inline float ModelConfigs::track_visible_ratio_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
  return _internal_track_visible_ratio_minimum();
}
inline void ModelConfigs::_internal_set_track_visible_ratio_minimum(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.track_visible_ratio_minimum_ = value;
}
inline void ModelConfigs::set_track_visible_ratio_minimum(float value) {
  _internal_set_track_visible_ratio_minimum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
}

// optional int32 collect_age_minimum = 8 [default = 0];
inline bool ModelConfigs::_internal_has_collect_age_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelConfigs::has_collect_age_minimum() const {
  return _internal_has_collect_age_minimum();
}
inline void ModelConfigs::clear_collect_age_minimum() {
  _impl_.collect_age_minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ModelConfigs::_internal_collect_age_minimum() const {
  return _impl_.collect_age_minimum_;
}
inline int32_t ModelConfigs::collect_age_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.collect_age_minimum)
  return _internal_collect_age_minimum();
}
inline void ModelConfigs::_internal_set_collect_age_minimum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.collect_age_minimum_ = value;
}
inline void ModelConfigs::set_collect_age_minimum(int32_t value) {
  _internal_set_collect_age_minimum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.collect_age_minimum)
}

// optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
inline bool ModelConfigs::_internal_has_collect_consecutive_invisible_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelConfigs::has_collect_consecutive_invisible_maximum() const {
  return _internal_has_collect_consecutive_invisible_maximum();
}
inline void ModelConfigs::clear_collect_consecutive_invisible_maximum() {
  _impl_.collect_consecutive_invisible_maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ModelConfigs::_internal_collect_consecutive_invisible_maximum() const {
  return _impl_.collect_consecutive_invisible_maximum_;
}
inline int32_t ModelConfigs::collect_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
  return _internal_collect_consecutive_invisible_maximum();
}
inline void ModelConfigs::_internal_set_collect_consecutive_invisible_maximum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.collect_consecutive_invisible_maximum_ = value;
}
inline void ModelConfigs::set_collect_consecutive_invisible_maximum(int32_t value) {
  _internal_set_collect_consecutive_invisible_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
}

// optional float acceleration_noise_maximum = 10 [default = 5];
inline bool ModelConfigs::_internal_has_acceleration_noise_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelConfigs::has_acceleration_noise_maximum() const {
  return _internal_has_acceleration_noise_maximum();
}
inline void ModelConfigs::clear_acceleration_noise_maximum() {
  _impl_.acceleration_noise_maximum_ = 5;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ModelConfigs::_internal_acceleration_noise_maximum() const {
  return _impl_.acceleration_noise_maximum_;
}
inline float ModelConfigs::acceleration_noise_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
  return _internal_acceleration_noise_maximum();
}
inline void ModelConfigs::_internal_set_acceleration_noise_maximum(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.acceleration_noise_maximum_ = value;
}
inline void ModelConfigs::set_acceleration_noise_maximum(float value) {
  _internal_set_acceleration_noise_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
}

// optional float speed_noise_maximum = 11 [default = 0.4];
inline bool ModelConfigs::_internal_has_speed_noise_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelConfigs::has_speed_noise_maximum() const {
  return _internal_has_speed_noise_maximum();
}
inline void ModelConfigs::clear_speed_noise_maximum() {
  _impl_.speed_noise_maximum_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ModelConfigs::_internal_speed_noise_maximum() const {
  return _impl_.speed_noise_maximum_;
}
inline float ModelConfigs::speed_noise_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.speed_noise_maximum)
  return _internal_speed_noise_maximum();
}
inline void ModelConfigs::_internal_set_speed_noise_maximum(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.speed_noise_maximum_ = value;
}
inline void ModelConfigs::set_speed_noise_maximum(float value) {
  _internal_set_speed_noise_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.speed_noise_maximum)
}

// optional float match_distance_maximum = 12 [default = 4];
inline bool ModelConfigs::_internal_has_match_distance_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelConfigs::has_match_distance_maximum() const {
  return _internal_has_match_distance_maximum();
}
inline void ModelConfigs::clear_match_distance_maximum() {
  _impl_.match_distance_maximum_ = 4;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float ModelConfigs::_internal_match_distance_maximum() const {
  return _impl_.match_distance_maximum_;
}
inline float ModelConfigs::match_distance_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.match_distance_maximum)
  return _internal_match_distance_maximum();
}
inline void ModelConfigs::_internal_set_match_distance_maximum(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.match_distance_maximum_ = value;
}
inline void ModelConfigs::set_match_distance_maximum(float value) {
  _internal_set_match_distance_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.match_distance_maximum)
}

// optional float location_distance_weight = 13 [default = 0.6];
inline bool ModelConfigs::_internal_has_location_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelConfigs::has_location_distance_weight() const {
  return _internal_has_location_distance_weight();
}
inline void ModelConfigs::clear_location_distance_weight() {
  _impl_.location_distance_weight_ = 0.6f;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float ModelConfigs::_internal_location_distance_weight() const {
  return _impl_.location_distance_weight_;
}
inline float ModelConfigs::location_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.location_distance_weight)
  return _internal_location_distance_weight();
}
inline void ModelConfigs::_internal_set_location_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.location_distance_weight_ = value;
}
inline void ModelConfigs::set_location_distance_weight(float value) {
  _internal_set_location_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.location_distance_weight)
}

// optional float direction_distance_weight = 14 [default = 0.2];
inline bool ModelConfigs::_internal_has_direction_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelConfigs::has_direction_distance_weight() const {
  return _internal_has_direction_distance_weight();
}
inline void ModelConfigs::clear_direction_distance_weight() {
  _impl_.direction_distance_weight_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float ModelConfigs::_internal_direction_distance_weight() const {
  return _impl_.direction_distance_weight_;
}
inline float ModelConfigs::direction_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.direction_distance_weight)
  return _internal_direction_distance_weight();
}
inline void ModelConfigs::_internal_set_direction_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.direction_distance_weight_ = value;
}
inline void ModelConfigs::set_direction_distance_weight(float value) {
  _internal_set_direction_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.direction_distance_weight)
}

// optional float bbox_size_distance_weight = 15 [default = 0.1];
inline bool ModelConfigs::_internal_has_bbox_size_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelConfigs::has_bbox_size_distance_weight() const {
  return _internal_has_bbox_size_distance_weight();
}
inline void ModelConfigs::clear_bbox_size_distance_weight() {
  _impl_.bbox_size_distance_weight_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float ModelConfigs::_internal_bbox_size_distance_weight() const {
  return _impl_.bbox_size_distance_weight_;
}
inline float ModelConfigs::bbox_size_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
  return _internal_bbox_size_distance_weight();
}
inline void ModelConfigs::_internal_set_bbox_size_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.bbox_size_distance_weight_ = value;
}
inline void ModelConfigs::set_bbox_size_distance_weight(float value) {
  _internal_set_bbox_size_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
}

// optional float point_num_distance_weight = 16 [default = 0.1];
inline bool ModelConfigs::_internal_has_point_num_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelConfigs::has_point_num_distance_weight() const {
  return _internal_has_point_num_distance_weight();
}
inline void ModelConfigs::clear_point_num_distance_weight() {
  _impl_.point_num_distance_weight_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ModelConfigs::_internal_point_num_distance_weight() const {
  return _impl_.point_num_distance_weight_;
}
inline float ModelConfigs::point_num_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.point_num_distance_weight)
  return _internal_point_num_distance_weight();
}
inline void ModelConfigs::_internal_set_point_num_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.point_num_distance_weight_ = value;
}
inline void ModelConfigs::set_point_num_distance_weight(float value) {
  _internal_set_point_num_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.point_num_distance_weight)
}

// optional float histogram_distance_weight = 17 [default = 0.5];
inline bool ModelConfigs::_internal_has_histogram_distance_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModelConfigs::has_histogram_distance_weight() const {
  return _internal_has_histogram_distance_weight();
}
inline void ModelConfigs::clear_histogram_distance_weight() {
  _impl_.histogram_distance_weight_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ModelConfigs::_internal_histogram_distance_weight() const {
  return _impl_.histogram_distance_weight_;
}
inline float ModelConfigs::histogram_distance_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.histogram_distance_weight)
  return _internal_histogram_distance_weight();
}
inline void ModelConfigs::_internal_set_histogram_distance_weight(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.histogram_distance_weight_ = value;
}
inline void ModelConfigs::set_histogram_distance_weight(float value) {
  _internal_set_histogram_distance_weight(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.histogram_distance_weight)
}

// optional int32 histogram_bin_size = 18 [default = 10];
inline bool ModelConfigs::_internal_has_histogram_bin_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModelConfigs::has_histogram_bin_size() const {
  return _internal_has_histogram_bin_size();
}
inline void ModelConfigs::clear_histogram_bin_size() {
  _impl_.histogram_bin_size_ = 10;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t ModelConfigs::_internal_histogram_bin_size() const {
  return _impl_.histogram_bin_size_;
}
inline int32_t ModelConfigs::histogram_bin_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.histogram_bin_size)
  return _internal_histogram_bin_size();
}
inline void ModelConfigs::_internal_set_histogram_bin_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.histogram_bin_size_ = value;
}
inline void ModelConfigs::set_histogram_bin_size(int32_t value) {
  _internal_set_histogram_bin_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.histogram_bin_size)
}

// optional bool use_adaptive = 19 [default = true];
inline bool ModelConfigs::_internal_has_use_adaptive() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModelConfigs::has_use_adaptive() const {
  return _internal_has_use_adaptive();
}
inline void ModelConfigs::clear_use_adaptive() {
  _impl_.use_adaptive_ = true;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool ModelConfigs::_internal_use_adaptive() const {
  return _impl_.use_adaptive_;
}
inline bool ModelConfigs::use_adaptive() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.use_adaptive)
  return _internal_use_adaptive();
}
inline void ModelConfigs::_internal_set_use_adaptive(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.use_adaptive_ = value;
}
inline void ModelConfigs::set_use_adaptive(bool value) {
  _internal_set_use_adaptive(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.use_adaptive)
}

// optional float measurement_noise = 20 [default = 0.4];
inline bool ModelConfigs::_internal_has_measurement_noise() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ModelConfigs::has_measurement_noise() const {
  return _internal_has_measurement_noise();
}
inline void ModelConfigs::clear_measurement_noise() {
  _impl_.measurement_noise_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float ModelConfigs::_internal_measurement_noise() const {
  return _impl_.measurement_noise_;
}
inline float ModelConfigs::measurement_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.measurement_noise)
  return _internal_measurement_noise();
}
inline void ModelConfigs::_internal_set_measurement_noise(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.measurement_noise_ = value;
}
inline void ModelConfigs::set_measurement_noise(float value) {
  _internal_set_measurement_noise(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.measurement_noise)
}

// optional float initial_velocity_noise = 21 [default = 5];
inline bool ModelConfigs::_internal_has_initial_velocity_noise() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ModelConfigs::has_initial_velocity_noise() const {
  return _internal_has_initial_velocity_noise();
}
inline void ModelConfigs::clear_initial_velocity_noise() {
  _impl_.initial_velocity_noise_ = 5;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float ModelConfigs::_internal_initial_velocity_noise() const {
  return _impl_.initial_velocity_noise_;
}
inline float ModelConfigs::initial_velocity_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.initial_velocity_noise)
  return _internal_initial_velocity_noise();
}
inline void ModelConfigs::_internal_set_initial_velocity_noise(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.initial_velocity_noise_ = value;
}
inline void ModelConfigs::set_initial_velocity_noise(float value) {
  _internal_set_initial_velocity_noise(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.initial_velocity_noise)
}

// optional float xy_propagation_noise = 22 [default = 10];
inline bool ModelConfigs::_internal_has_xy_propagation_noise() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ModelConfigs::has_xy_propagation_noise() const {
  return _internal_has_xy_propagation_noise();
}
inline void ModelConfigs::clear_xy_propagation_noise() {
  _impl_.xy_propagation_noise_ = 10;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float ModelConfigs::_internal_xy_propagation_noise() const {
  return _impl_.xy_propagation_noise_;
}
inline float ModelConfigs::xy_propagation_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.xy_propagation_noise)
  return _internal_xy_propagation_noise();
}
inline void ModelConfigs::_internal_set_xy_propagation_noise(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.xy_propagation_noise_ = value;
}
inline void ModelConfigs::set_xy_propagation_noise(float value) {
  _internal_set_xy_propagation_noise(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.xy_propagation_noise)
}

// optional float z_propagation_noise = 23 [default = 10];
inline bool ModelConfigs::_internal_has_z_propagation_noise() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ModelConfigs::has_z_propagation_noise() const {
  return _internal_has_z_propagation_noise();
}
inline void ModelConfigs::clear_z_propagation_noise() {
  _impl_.z_propagation_noise_ = 10;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float ModelConfigs::_internal_z_propagation_noise() const {
  return _impl_.z_propagation_noise_;
}
inline float ModelConfigs::z_propagation_noise() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.z_propagation_noise)
  return _internal_z_propagation_noise();
}
inline void ModelConfigs::_internal_set_z_propagation_noise(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.z_propagation_noise_ = value;
}
inline void ModelConfigs::set_z_propagation_noise(float value) {
  _internal_set_z_propagation_noise(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.z_propagation_noise)
}

// optional float breakdown_threshold_maximum = 24 [default = 10];
inline bool ModelConfigs::_internal_has_breakdown_threshold_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ModelConfigs::has_breakdown_threshold_maximum() const {
  return _internal_has_breakdown_threshold_maximum();
}
inline void ModelConfigs::clear_breakdown_threshold_maximum() {
  _impl_.breakdown_threshold_maximum_ = 10;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float ModelConfigs::_internal_breakdown_threshold_maximum() const {
  return _impl_.breakdown_threshold_maximum_;
}
inline float ModelConfigs::breakdown_threshold_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
  return _internal_breakdown_threshold_maximum();
}
inline void ModelConfigs::_internal_set_breakdown_threshold_maximum(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.breakdown_threshold_maximum_ = value;
}
inline void ModelConfigs::set_breakdown_threshold_maximum(float value) {
  _internal_set_breakdown_threshold_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker_config
}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::tracker_config::ModelConfigs_MatcherType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::tracker_config::ModelConfigs_MatcherType>() {
  return ::apollo::perception::tracker_config::ModelConfigs_MatcherType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::tracker_config::ModelConfigs_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::tracker_config::ModelConfigs_FilterType>() {
  return ::apollo::perception::tracker_config::ModelConfigs_FilterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto
