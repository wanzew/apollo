// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/tracker_config.proto

#include "modules/perception/proto/tracker_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace tracker_config {
PROTOBUF_CONSTEXPR ModelConfigs::ModelConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collect_age_minimum_)*/0
  , /*decltype(_impl_.collect_consecutive_invisible_maximum_)*/0
  , /*decltype(_impl_.matcher_method_)*/1
  , /*decltype(_impl_.filter_method_)*/1
  , /*decltype(_impl_.track_cached_history_size_maximum_)*/5
  , /*decltype(_impl_.track_consecutive_invisible_maximum_)*/1
  , /*decltype(_impl_.track_visible_ratio_minimum_)*/0.6f
  , /*decltype(_impl_.acceleration_noise_maximum_)*/5
  , /*decltype(_impl_.speed_noise_maximum_)*/0.4f
  , /*decltype(_impl_.match_distance_maximum_)*/4
  , /*decltype(_impl_.location_distance_weight_)*/0.6f
  , /*decltype(_impl_.direction_distance_weight_)*/0.2f
  , /*decltype(_impl_.bbox_size_distance_weight_)*/0.1f
  , /*decltype(_impl_.point_num_distance_weight_)*/0.1f
  , /*decltype(_impl_.histogram_distance_weight_)*/0.5f
  , /*decltype(_impl_.histogram_bin_size_)*/10
  , /*decltype(_impl_.use_adaptive_)*/true
  , /*decltype(_impl_.measurement_noise_)*/0.4f
  , /*decltype(_impl_.initial_velocity_noise_)*/5
  , /*decltype(_impl_.xy_propagation_noise_)*/10
  , /*decltype(_impl_.z_propagation_noise_)*/10
  , /*decltype(_impl_.breakdown_threshold_maximum_)*/10} {}
struct ModelConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigsDefaultTypeInternal() {}
  union {
    ModelConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace tracker_config
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.matcher_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.filter_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.track_cached_history_size_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.track_consecutive_invisible_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.track_visible_ratio_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.collect_age_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.collect_consecutive_invisible_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.acceleration_noise_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.speed_noise_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.match_distance_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.location_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.direction_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.bbox_size_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.point_num_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.histogram_distance_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.histogram_bin_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.use_adaptive_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.measurement_noise_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.initial_velocity_noise_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.xy_propagation_noise_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.z_propagation_noise_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::tracker_config::ModelConfigs, _impl_.breakdown_threshold_maximum_),
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  2,
  3,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, -1, sizeof(::apollo::perception::tracker_config::ModelConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::tracker_config::_ModelConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/perception/proto/tracker_confi"
  "g.proto\022 apollo.perception.tracker_confi"
  "g\"\314\010\n\014ModelConfigs\022\035\n\004name\030\001 \001(\t:\017HmObje"
  "ctTracker\022\026\n\007version\030\002 \001(\t:\0051.1.0\022e\n\016mat"
  "cher_method\030\003 \001(\0162:.apollo.perception.tr"
  "acker_config.ModelConfigs.MatcherType:\021H"
  "UNGARIAN_MATCHER\022_\n\rfilter_method\030\004 \001(\0162"
  "9.apollo.perception.tracker_config.Model"
  "Configs.FilterType:\rKALMAN_FILTER\022,\n!tra"
  "ck_cached_history_size_maximum\030\005 \001(\005:\0015\022"
  ".\n#track_consecutive_invisible_maximum\030\006"
  " \001(\005:\0011\022(\n\033track_visible_ratio_minimum\030\007"
  " \001(\002:\0030.6\022\036\n\023collect_age_minimum\030\010 \001(\005:\001"
  "0\0220\n%collect_consecutive_invisible_maxim"
  "um\030\t \001(\005:\0010\022%\n\032acceleration_noise_maximu"
  "m\030\n \001(\002:\0015\022 \n\023speed_noise_maximum\030\013 \001(\002:"
  "\0030.4\022!\n\026match_distance_maximum\030\014 \001(\002:\0014\022"
  "%\n\030location_distance_weight\030\r \001(\002:\0030.6\022&"
  "\n\031direction_distance_weight\030\016 \001(\002:\0030.2\022&"
  "\n\031bbox_size_distance_weight\030\017 \001(\002:\0030.1\022&"
  "\n\031point_num_distance_weight\030\020 \001(\002:\0030.1\022&"
  "\n\031histogram_distance_weight\030\021 \001(\002:\0030.5\022\036"
  "\n\022histogram_bin_size\030\022 \001(\005:\00210\022\032\n\014use_ad"
  "aptive\030\023 \001(\010:\004true\022\036\n\021measurement_noise\030"
  "\024 \001(\002:\0030.4\022!\n\026initial_velocity_noise\030\025 \001"
  "(\002:\0015\022 \n\024xy_propagation_noise\030\026 \001(\002:\00210\022"
  "\037\n\023z_propagation_noise\030\027 \001(\002:\00210\022\'\n\033brea"
  "kdown_threshold_maximum\030\030 \001(\002:\00210\"$\n\013Mat"
  "cherType\022\025\n\021HUNGARIAN_MATCHER\020\001\"\037\n\nFilte"
  "rType\022\021\n\rKALMAN_FILTER\020\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto = {
    false, false, 1184, descriptor_table_protodef_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto,
    "modules/perception/proto/tracker_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace tracker_config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelConfigs_MatcherType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[0];
}
bool ModelConfigs_MatcherType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ModelConfigs_MatcherType ModelConfigs::HUNGARIAN_MATCHER;
constexpr ModelConfigs_MatcherType ModelConfigs::MatcherType_MIN;
constexpr ModelConfigs_MatcherType ModelConfigs::MatcherType_MAX;
constexpr int ModelConfigs::MatcherType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelConfigs_FilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[1];
}
bool ModelConfigs_FilterType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ModelConfigs_FilterType ModelConfigs::KALMAN_FILTER;
constexpr ModelConfigs_FilterType ModelConfigs::FilterType_MIN;
constexpr ModelConfigs_FilterType ModelConfigs::FilterType_MAX;
constexpr int ModelConfigs::FilterType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ModelConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelConfigs>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matcher_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filter_method(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_track_cached_history_size_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_track_consecutive_invisible_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_track_visible_ratio_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_collect_age_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collect_consecutive_invisible_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acceleration_noise_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_noise_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_match_distance_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_location_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_direction_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bbox_size_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_point_num_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_histogram_distance_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_histogram_bin_size(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_use_adaptive(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_measurement_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_initial_velocity_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_xy_propagation_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_z_propagation_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_breakdown_threshold_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"HmObjectTracker", 15}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1.1.0", 5}}, {nullptr}};
ModelConfigs::ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.tracker_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.collect_age_minimum_){}
    , decltype(_impl_.collect_consecutive_invisible_maximum_){}
    , decltype(_impl_.matcher_method_){}
    , decltype(_impl_.filter_method_){}
    , decltype(_impl_.track_cached_history_size_maximum_){}
    , decltype(_impl_.track_consecutive_invisible_maximum_){}
    , decltype(_impl_.track_visible_ratio_minimum_){}
    , decltype(_impl_.acceleration_noise_maximum_){}
    , decltype(_impl_.speed_noise_maximum_){}
    , decltype(_impl_.match_distance_maximum_){}
    , decltype(_impl_.location_distance_weight_){}
    , decltype(_impl_.direction_distance_weight_){}
    , decltype(_impl_.bbox_size_distance_weight_){}
    , decltype(_impl_.point_num_distance_weight_){}
    , decltype(_impl_.histogram_distance_weight_){}
    , decltype(_impl_.histogram_bin_size_){}
    , decltype(_impl_.use_adaptive_){}
    , decltype(_impl_.measurement_noise_){}
    , decltype(_impl_.initial_velocity_noise_){}
    , decltype(_impl_.xy_propagation_noise_){}
    , decltype(_impl_.z_propagation_noise_){}
    , decltype(_impl_.breakdown_threshold_maximum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.collect_age_minimum_, &from._impl_.collect_age_minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.breakdown_threshold_maximum_) -
    reinterpret_cast<char*>(&_impl_.collect_age_minimum_)) + sizeof(_impl_.breakdown_threshold_maximum_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.tracker_config.ModelConfigs)
}

inline void ModelConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.collect_age_minimum_){0}
    , decltype(_impl_.collect_consecutive_invisible_maximum_){0}
    , decltype(_impl_.matcher_method_){1}
    , decltype(_impl_.filter_method_){1}
    , decltype(_impl_.track_cached_history_size_maximum_){5}
    , decltype(_impl_.track_consecutive_invisible_maximum_){1}
    , decltype(_impl_.track_visible_ratio_minimum_){0.6f}
    , decltype(_impl_.acceleration_noise_maximum_){5}
    , decltype(_impl_.speed_noise_maximum_){0.4f}
    , decltype(_impl_.match_distance_maximum_){4}
    , decltype(_impl_.location_distance_weight_){0.6f}
    , decltype(_impl_.direction_distance_weight_){0.2f}
    , decltype(_impl_.bbox_size_distance_weight_){0.1f}
    , decltype(_impl_.point_num_distance_weight_){0.1f}
    , decltype(_impl_.histogram_distance_weight_){0.5f}
    , decltype(_impl_.histogram_bin_size_){10}
    , decltype(_impl_.use_adaptive_){true}
    , decltype(_impl_.measurement_noise_){0.4f}
    , decltype(_impl_.initial_velocity_noise_){5}
    , decltype(_impl_.xy_propagation_noise_){10}
    , decltype(_impl_.z_propagation_noise_){10}
    , decltype(_impl_.breakdown_threshold_maximum_){10}
  };
  _impl_.name_.InitDefault();
  _impl_.version_.InitDefault();
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.tracker_config.ModelConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void ModelConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.tracker_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::apollo::perception::tracker_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.collect_age_minimum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.collect_consecutive_invisible_maximum_) -
        reinterpret_cast<char*>(&_impl_.collect_age_minimum_)) + sizeof(_impl_.collect_consecutive_invisible_maximum_));
    _impl_.matcher_method_ = 1;
    _impl_.filter_method_ = 1;
    _impl_.track_cached_history_size_maximum_ = 5;
    _impl_.track_consecutive_invisible_maximum_ = 1;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.track_visible_ratio_minimum_ = 0.6f;
    _impl_.acceleration_noise_maximum_ = 5;
    _impl_.speed_noise_maximum_ = 0.4f;
    _impl_.match_distance_maximum_ = 4;
    _impl_.location_distance_weight_ = 0.6f;
    _impl_.direction_distance_weight_ = 0.2f;
    _impl_.bbox_size_distance_weight_ = 0.1f;
    _impl_.point_num_distance_weight_ = 0.1f;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.histogram_distance_weight_ = 0.5f;
    _impl_.histogram_bin_size_ = 10;
    _impl_.use_adaptive_ = true;
    _impl_.measurement_noise_ = 0.4f;
    _impl_.initial_velocity_noise_ = 5;
    _impl_.xy_propagation_noise_ = 10;
    _impl_.z_propagation_noise_ = 10;
    _impl_.breakdown_threshold_maximum_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = "HmObjectTracker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.tracker_config.ModelConfigs.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2 [default = "1.1.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.tracker_config.ModelConfigs.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::tracker_config::ModelConfigs_MatcherType_IsValid(val))) {
            _internal_set_matcher_method(static_cast<::apollo::perception::tracker_config::ModelConfigs_MatcherType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::tracker_config::ModelConfigs_FilterType_IsValid(val))) {
            _internal_set_filter_method(static_cast<::apollo::perception::tracker_config::ModelConfigs_FilterType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 track_cached_history_size_maximum = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_track_cached_history_size_maximum(&has_bits);
          _impl_.track_cached_history_size_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_track_consecutive_invisible_maximum(&has_bits);
          _impl_.track_consecutive_invisible_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float track_visible_ratio_minimum = 7 [default = 0.6];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_track_visible_ratio_minimum(&has_bits);
          _impl_.track_visible_ratio_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 collect_age_minimum = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_collect_age_minimum(&has_bits);
          _impl_.collect_age_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_collect_consecutive_invisible_maximum(&has_bits);
          _impl_.collect_consecutive_invisible_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float acceleration_noise_maximum = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_acceleration_noise_maximum(&has_bits);
          _impl_.acceleration_noise_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_noise_maximum = 11 [default = 0.4];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_speed_noise_maximum(&has_bits);
          _impl_.speed_noise_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float match_distance_maximum = 12 [default = 4];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_match_distance_maximum(&has_bits);
          _impl_.match_distance_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float location_distance_weight = 13 [default = 0.6];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_location_distance_weight(&has_bits);
          _impl_.location_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float direction_distance_weight = 14 [default = 0.2];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_direction_distance_weight(&has_bits);
          _impl_.direction_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bbox_size_distance_weight = 15 [default = 0.1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_bbox_size_distance_weight(&has_bits);
          _impl_.bbox_size_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float point_num_distance_weight = 16 [default = 0.1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_point_num_distance_weight(&has_bits);
          _impl_.point_num_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float histogram_distance_weight = 17 [default = 0.5];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_histogram_distance_weight(&has_bits);
          _impl_.histogram_distance_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 histogram_bin_size = 18 [default = 10];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_histogram_bin_size(&has_bits);
          _impl_.histogram_bin_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_adaptive = 19 [default = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_use_adaptive(&has_bits);
          _impl_.use_adaptive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float measurement_noise = 20 [default = 0.4];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_measurement_noise(&has_bits);
          _impl_.measurement_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float initial_velocity_noise = 21 [default = 5];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_initial_velocity_noise(&has_bits);
          _impl_.initial_velocity_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xy_propagation_noise = 22 [default = 10];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_xy_propagation_noise(&has_bits);
          _impl_.xy_propagation_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z_propagation_noise = 23 [default = 10];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_z_propagation_noise(&has_bits);
          _impl_.z_propagation_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float breakdown_threshold_maximum = 24 [default = 10];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_breakdown_threshold_maximum(&has_bits);
          _impl_.breakdown_threshold_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.tracker_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = "HmObjectTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.tracker_config.ModelConfigs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2 [default = "1.1.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.tracker_config.ModelConfigs.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_matcher_method(), target);
  }

  // optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_filter_method(), target);
  }

  // optional int32 track_cached_history_size_maximum = 5 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_track_cached_history_size_maximum(), target);
  }

  // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_track_consecutive_invisible_maximum(), target);
  }

  // optional float track_visible_ratio_minimum = 7 [default = 0.6];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_track_visible_ratio_minimum(), target);
  }

  // optional int32 collect_age_minimum = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_collect_age_minimum(), target);
  }

  // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_collect_consecutive_invisible_maximum(), target);
  }

  // optional float acceleration_noise_maximum = 10 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_acceleration_noise_maximum(), target);
  }

  // optional float speed_noise_maximum = 11 [default = 0.4];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_speed_noise_maximum(), target);
  }

  // optional float match_distance_maximum = 12 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_match_distance_maximum(), target);
  }

  // optional float location_distance_weight = 13 [default = 0.6];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_location_distance_weight(), target);
  }

  // optional float direction_distance_weight = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_direction_distance_weight(), target);
  }

  // optional float bbox_size_distance_weight = 15 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_bbox_size_distance_weight(), target);
  }

  // optional float point_num_distance_weight = 16 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_point_num_distance_weight(), target);
  }

  // optional float histogram_distance_weight = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_histogram_distance_weight(), target);
  }

  // optional int32 histogram_bin_size = 18 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_histogram_bin_size(), target);
  }

  // optional bool use_adaptive = 19 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_use_adaptive(), target);
  }

  // optional float measurement_noise = 20 [default = 0.4];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_measurement_noise(), target);
  }

  // optional float initial_velocity_noise = 21 [default = 5];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_initial_velocity_noise(), target);
  }

  // optional float xy_propagation_noise = 22 [default = 10];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_xy_propagation_noise(), target);
  }

  // optional float z_propagation_noise = 23 [default = 10];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_z_propagation_noise(), target);
  }

  // optional float breakdown_threshold_maximum = 24 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_breakdown_threshold_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.tracker_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.tracker_config.ModelConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1 [default = "HmObjectTracker"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2 [default = "1.1.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional int32 collect_age_minimum = 8 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_collect_age_minimum());
    }

    // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_collect_consecutive_invisible_maximum());
    }

    // optional .apollo.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_matcher_method());
    }

    // optional .apollo.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_filter_method());
    }

    // optional int32 track_cached_history_size_maximum = 5 [default = 5];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_track_cached_history_size_maximum());
    }

    // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_track_consecutive_invisible_maximum());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float track_visible_ratio_minimum = 7 [default = 0.6];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float acceleration_noise_maximum = 10 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float speed_noise_maximum = 11 [default = 0.4];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float match_distance_maximum = 12 [default = 4];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float location_distance_weight = 13 [default = 0.6];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float direction_distance_weight = 14 [default = 0.2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float bbox_size_distance_weight = 15 [default = 0.1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float point_num_distance_weight = 16 [default = 0.1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float histogram_distance_weight = 17 [default = 0.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 histogram_bin_size = 18 [default = 10];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_histogram_bin_size());
    }

    // optional bool use_adaptive = 19 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional float measurement_noise = 20 [default = 0.4];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float initial_velocity_noise = 21 [default = 5];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float xy_propagation_noise = 22 [default = 10];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float z_propagation_noise = 23 [default = 10];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float breakdown_threshold_maximum = 24 [default = 10];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigs::GetClassData() const { return &_class_data_; }

void ModelConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelConfigs *>(to)->MergeFrom(
      static_cast<const ModelConfigs &>(from));
}


void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.tracker_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.collect_age_minimum_ = from._impl_.collect_age_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.collect_consecutive_invisible_maximum_ = from._impl_.collect_consecutive_invisible_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.matcher_method_ = from._impl_.matcher_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.filter_method_ = from._impl_.filter_method_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.track_cached_history_size_maximum_ = from._impl_.track_cached_history_size_maximum_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.track_consecutive_invisible_maximum_ = from._impl_.track_consecutive_invisible_maximum_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.track_visible_ratio_minimum_ = from._impl_.track_visible_ratio_minimum_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.acceleration_noise_maximum_ = from._impl_.acceleration_noise_maximum_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.speed_noise_maximum_ = from._impl_.speed_noise_maximum_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.match_distance_maximum_ = from._impl_.match_distance_maximum_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.location_distance_weight_ = from._impl_.location_distance_weight_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.direction_distance_weight_ = from._impl_.direction_distance_weight_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.bbox_size_distance_weight_ = from._impl_.bbox_size_distance_weight_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.point_num_distance_weight_ = from._impl_.point_num_distance_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.histogram_distance_weight_ = from._impl_.histogram_distance_weight_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.histogram_bin_size_ = from._impl_.histogram_bin_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.use_adaptive_ = from._impl_.use_adaptive_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.measurement_noise_ = from._impl_.measurement_noise_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.initial_velocity_noise_ = from._impl_.initial_velocity_noise_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.xy_propagation_noise_ = from._impl_.xy_propagation_noise_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.z_propagation_noise_ = from._impl_.z_propagation_noise_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.breakdown_threshold_maximum_ = from._impl_.breakdown_threshold_maximum_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.tracker_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::InternalSwap(ModelConfigs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.collect_consecutive_invisible_maximum_)
      + sizeof(ModelConfigs::_impl_.collect_consecutive_invisible_maximum_)
      - PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.collect_age_minimum_)>(
          reinterpret_cast<char*>(&_impl_.collect_age_minimum_),
          reinterpret_cast<char*>(&other->_impl_.collect_age_minimum_));
  swap(_impl_.matcher_method_, other->_impl_.matcher_method_);
  swap(_impl_.filter_method_, other->_impl_.filter_method_);
  swap(_impl_.track_cached_history_size_maximum_, other->_impl_.track_cached_history_size_maximum_);
  swap(_impl_.track_consecutive_invisible_maximum_, other->_impl_.track_consecutive_invisible_maximum_);
  swap(_impl_.track_visible_ratio_minimum_, other->_impl_.track_visible_ratio_minimum_);
  swap(_impl_.acceleration_noise_maximum_, other->_impl_.acceleration_noise_maximum_);
  swap(_impl_.speed_noise_maximum_, other->_impl_.speed_noise_maximum_);
  swap(_impl_.match_distance_maximum_, other->_impl_.match_distance_maximum_);
  swap(_impl_.location_distance_weight_, other->_impl_.location_distance_weight_);
  swap(_impl_.direction_distance_weight_, other->_impl_.direction_distance_weight_);
  swap(_impl_.bbox_size_distance_weight_, other->_impl_.bbox_size_distance_weight_);
  swap(_impl_.point_num_distance_weight_, other->_impl_.point_num_distance_weight_);
  swap(_impl_.histogram_distance_weight_, other->_impl_.histogram_distance_weight_);
  swap(_impl_.histogram_bin_size_, other->_impl_.histogram_bin_size_);
  swap(_impl_.use_adaptive_, other->_impl_.use_adaptive_);
  swap(_impl_.measurement_noise_, other->_impl_.measurement_noise_);
  swap(_impl_.initial_velocity_noise_, other->_impl_.initial_velocity_noise_);
  swap(_impl_.xy_propagation_noise_, other->_impl_.xy_propagation_noise_);
  swap(_impl_.z_propagation_noise_, other->_impl_.z_propagation_noise_);
  swap(_impl_.breakdown_threshold_maximum_, other->_impl_.breakdown_threshold_maximum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tracker_config
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::tracker_config::ModelConfigs*
Arena::CreateMaybeMessage< ::apollo::perception::tracker_config::ModelConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::tracker_config::ModelConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
