// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/rt.proto

#include "modules/perception/proto/rt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace inference {
PROTOBUF_CONSTEXPR BlobShape::BlobShape(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dim_)*/{}
  , /*decltype(_impl_._dim_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlobShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobShapeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobShapeDefaultTypeInternal() {}
  union {
    BlobShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
PROTOBUF_CONSTEXPR BlobProto::BlobProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.diff_)*/{}
  , /*decltype(_impl_.double_data_)*/{}
  , /*decltype(_impl_.double_diff_)*/{}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.channels_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.width_)*/0} {}
struct BlobProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobProtoDefaultTypeInternal() {}
  union {
    BlobProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
PROTOBUF_CONSTEXPR Datum::Datum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.float_data_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channels_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.label_)*/0
  , /*decltype(_impl_.encoded_)*/false} {}
struct DatumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatumDefaultTypeInternal() {}
  union {
    Datum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatumDefaultTypeInternal _Datum_default_instance_;
PROTOBUF_CONSTEXPR LabelMapItem::LabelMapItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/0} {}
struct LabelMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelMapItemDefaultTypeInternal() {}
  union {
    LabelMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelMapItemDefaultTypeInternal _LabelMapItem_default_instance_;
PROTOBUF_CONSTEXPR LabelMap::LabelMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelMapDefaultTypeInternal() {}
  union {
    LabelMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelMapDefaultTypeInternal _LabelMap_default_instance_;
PROTOBUF_CONSTEXPR Sampler::Sampler(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_scale_)*/1
  , /*decltype(_impl_.max_scale_)*/1
  , /*decltype(_impl_.min_aspect_ratio_)*/1
  , /*decltype(_impl_.max_aspect_ratio_)*/1} {}
struct SamplerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplerDefaultTypeInternal() {}
  union {
    Sampler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplerDefaultTypeInternal _Sampler_default_instance_;
PROTOBUF_CONSTEXPR SampleConstraint::SampleConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balance_type_)*/{}
  , /*decltype(_impl_.min_jaccard_overlap_)*/0
  , /*decltype(_impl_.max_jaccard_overlap_)*/0
  , /*decltype(_impl_.min_sample_coverage_)*/0
  , /*decltype(_impl_.max_sample_coverage_)*/0
  , /*decltype(_impl_.min_object_coverage_)*/0
  , /*decltype(_impl_.max_object_coverage_)*/0} {}
struct SampleConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampleConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampleConstraintDefaultTypeInternal() {}
  union {
    SampleConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampleConstraintDefaultTypeInternal _SampleConstraint_default_instance_;
PROTOBUF_CONSTEXPR BatchSampler::BatchSampler(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sampler_)*/nullptr
  , /*decltype(_impl_.sample_constraint_)*/nullptr
  , /*decltype(_impl_.max_sample_)*/0u
  , /*decltype(_impl_.use_original_image_)*/true
  , /*decltype(_impl_.max_trials_)*/100u} {}
struct BatchSamplerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchSamplerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchSamplerDefaultTypeInternal() {}
  union {
    BatchSampler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchSamplerDefaultTypeInternal _BatchSampler_default_instance_;
PROTOBUF_CONSTEXPR EmitConstraint::EmitConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emit_type_)*/0
  , /*decltype(_impl_.emit_overlap_)*/0} {}
struct EmitConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmitConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmitConstraintDefaultTypeInternal() {}
  union {
    EmitConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmitConstraintDefaultTypeInternal _EmitConstraint_default_instance_;
PROTOBUF_CONSTEXPR NormalizedBBox::NormalizedBBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xmin_)*/0
  , /*decltype(_impl_.ymin_)*/0
  , /*decltype(_impl_.xmax_)*/0
  , /*decltype(_impl_.ymax_)*/0
  , /*decltype(_impl_.label_)*/0
  , /*decltype(_impl_.difficult_)*/false
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.size_)*/0} {}
struct NormalizedBBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalizedBBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalizedBBoxDefaultTypeInternal() {}
  union {
    NormalizedBBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalizedBBoxDefaultTypeInternal _NormalizedBBox_default_instance_;
PROTOBUF_CONSTEXPR BBox3D::BBox3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.h_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.alpha_)*/0} {}
struct BBox3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BBox3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BBox3DDefaultTypeInternal() {}
  union {
    BBox3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BBox3DDefaultTypeInternal _BBox3D_default_instance_;
PROTOBUF_CONSTEXPR Annotation::Annotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.bbox3d_)*/nullptr
  , /*decltype(_impl_.front_bbox_)*/nullptr
  , /*decltype(_impl_.rear_bbox_)*/nullptr
  , /*decltype(_impl_.instance_id_)*/0} {}
struct AnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationDefaultTypeInternal() {}
  union {
    Annotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationDefaultTypeInternal _Annotation_default_instance_;
PROTOBUF_CONSTEXPR AnnotationGroup::AnnotationGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotation_)*/{}
  , /*decltype(_impl_.group_label_)*/0} {}
struct AnnotationGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotationGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotationGroupDefaultTypeInternal() {}
  union {
    AnnotationGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotationGroupDefaultTypeInternal _AnnotationGroup_default_instance_;
PROTOBUF_CONSTEXPR AnnotatedDatum::AnnotatedDatum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotation_group_)*/{}
  , /*decltype(_impl_.datum_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct AnnotatedDatumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotatedDatumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotatedDatumDefaultTypeInternal() {}
  union {
    AnnotatedDatum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotatedDatumDefaultTypeInternal _AnnotatedDatum_default_instance_;
PROTOBUF_CONSTEXPR FillerParameter::FillerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.mean_)*/0
  , /*decltype(_impl_.variance_norm_)*/0
  , /*decltype(_impl_.sparse_)*/-1
  , /*decltype(_impl_.max_)*/1
  , /*decltype(_impl_.std_)*/1} {}
struct FillerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FillerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FillerParameterDefaultTypeInternal() {}
  union {
    FillerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
PROTOBUF_CONSTEXPR NetParameter::NetParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_.input_dim_)*/{}
  , /*decltype(_impl_.input_shape_)*/{}
  , /*decltype(_impl_.layer_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.force_backward_)*/false
  , /*decltype(_impl_.debug_info_)*/false} {}
struct NetParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetParameterDefaultTypeInternal() {}
  union {
    NetParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetParameterDefaultTypeInternal _NetParameter_default_instance_;
PROTOBUF_CONSTEXPR NetState::NetState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stage_)*/{}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.phase_)*/1} {}
struct NetStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetStateDefaultTypeInternal() {}
  union {
    NetState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetStateDefaultTypeInternal _NetState_default_instance_;
PROTOBUF_CONSTEXPR NetStateRule::NetStateRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stage_)*/{}
  , /*decltype(_impl_.not_stage_)*/{}
  , /*decltype(_impl_.phase_)*/0
  , /*decltype(_impl_.min_level_)*/0
  , /*decltype(_impl_.max_level_)*/0} {}
struct NetStateRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetStateRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetStateRuleDefaultTypeInternal() {}
  union {
    NetStateRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
PROTOBUF_CONSTEXPR ParamSpec::ParamSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.share_mode_)*/0
  , /*decltype(_impl_.lr_mult_)*/1
  , /*decltype(_impl_.decay_mult_)*/1} {}
struct ParamSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamSpecDefaultTypeInternal() {}
  union {
    ParamSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
PROTOBUF_CONSTEXPR LayerParameter::LayerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bottom_)*/{}
  , /*decltype(_impl_.top_)*/{}
  , /*decltype(_impl_.loss_weight_)*/{}
  , /*decltype(_impl_.param_)*/{}
  , /*decltype(_impl_.blobs_)*/{}
  , /*decltype(_impl_.include_)*/{}
  , /*decltype(_impl_.exclude_)*/{}
  , /*decltype(_impl_.propagate_down_)*/{}
  , /*decltype(_impl_.yolo_data_param_)*/{}
  , /*decltype(_impl_.data_prob_param_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform_param_)*/nullptr
  , /*decltype(_impl_.loss_param_)*/nullptr
  , /*decltype(_impl_.accuracy_param_)*/nullptr
  , /*decltype(_impl_.argmax_param_)*/nullptr
  , /*decltype(_impl_.concat_param_)*/nullptr
  , /*decltype(_impl_.contrastive_loss_param_)*/nullptr
  , /*decltype(_impl_.convolution_param_)*/nullptr
  , /*decltype(_impl_.data_param_)*/nullptr
  , /*decltype(_impl_.dropout_param_)*/nullptr
  , /*decltype(_impl_.dummy_data_param_)*/nullptr
  , /*decltype(_impl_.eltwise_param_)*/nullptr
  , /*decltype(_impl_.exp_param_)*/nullptr
  , /*decltype(_impl_.hdf5_data_param_)*/nullptr
  , /*decltype(_impl_.hdf5_output_param_)*/nullptr
  , /*decltype(_impl_.hinge_loss_param_)*/nullptr
  , /*decltype(_impl_.image_data_param_)*/nullptr
  , /*decltype(_impl_.infogain_loss_param_)*/nullptr
  , /*decltype(_impl_.inner_product_param_)*/nullptr
  , /*decltype(_impl_.lrn_param_)*/nullptr
  , /*decltype(_impl_.memory_data_param_)*/nullptr
  , /*decltype(_impl_.mvn_param_)*/nullptr
  , /*decltype(_impl_.pooling_param_)*/nullptr
  , /*decltype(_impl_.power_param_)*/nullptr
  , /*decltype(_impl_.relu_param_)*/nullptr
  , /*decltype(_impl_.sigmoid_param_)*/nullptr
  , /*decltype(_impl_.softmax_param_)*/nullptr
  , /*decltype(_impl_.slice_param_)*/nullptr
  , /*decltype(_impl_.tanh_param_)*/nullptr
  , /*decltype(_impl_.threshold_param_)*/nullptr
  , /*decltype(_impl_.window_data_param_)*/nullptr
  , /*decltype(_impl_.python_param_)*/nullptr
  , /*decltype(_impl_.prelu_param_)*/nullptr
  , /*decltype(_impl_.spp_param_)*/nullptr
  , /*decltype(_impl_.reshape_param_)*/nullptr
  , /*decltype(_impl_.log_param_)*/nullptr
  , /*decltype(_impl_.flatten_param_)*/nullptr
  , /*decltype(_impl_.reduction_param_)*/nullptr
  , /*decltype(_impl_.embed_param_)*/nullptr
  , /*decltype(_impl_.tile_param_)*/nullptr
  , /*decltype(_impl_.batch_norm_param_)*/nullptr
  , /*decltype(_impl_.elu_param_)*/nullptr
  , /*decltype(_impl_.bias_param_)*/nullptr
  , /*decltype(_impl_.scale_param_)*/nullptr
  , /*decltype(_impl_.input_param_)*/nullptr
  , /*decltype(_impl_.crop_param_)*/nullptr
  , /*decltype(_impl_.parameter_param_)*/nullptr
  , /*decltype(_impl_.recurrent_param_)*/nullptr
  , /*decltype(_impl_.annotated_data_param_)*/nullptr
  , /*decltype(_impl_.multibox_loss_param_)*/nullptr
  , /*decltype(_impl_.permute_param_)*/nullptr
  , /*decltype(_impl_.prior_box_param_)*/nullptr
  , /*decltype(_impl_.detection_output_param_)*/nullptr
  , /*decltype(_impl_.detection_evaluate_param_)*/nullptr
  , /*decltype(_impl_.norm_param_)*/nullptr
  , /*decltype(_impl_.video_data_param_)*/nullptr
  , /*decltype(_impl_.dfmb_psroi_pooling_param_)*/nullptr
  , /*decltype(_impl_.bbox_reg_param_)*/nullptr
  , /*decltype(_impl_.detection_output_ssd_param_)*/nullptr
  , /*decltype(_impl_.region_param_)*/nullptr
  , /*decltype(_impl_.reorg_param_)*/nullptr
  , /*decltype(_impl_.region_output_param_)*/nullptr
  , /*decltype(_impl_.region_proposal_param_)*/nullptr
  , /*decltype(_impl_.padding_param_)*/nullptr
  , /*decltype(_impl_.yolo_target_param_)*/nullptr
  , /*decltype(_impl_.yolo_anchors_param_)*/nullptr
  , /*decltype(_impl_.yolo_loss_param_)*/nullptr
  , /*decltype(_impl_.yolo_dump_param_)*/nullptr
  , /*decltype(_impl_.roi_pooling_param_)*/nullptr
  , /*decltype(_impl_.phase_)*/0} {}
struct LayerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerParameterDefaultTypeInternal() {}
  union {
    LayerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
PROTOBUF_CONSTEXPR TransformationParameter::TransformationParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mean_value_)*/{}
  , /*decltype(_impl_.mean_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resize_param_)*/nullptr
  , /*decltype(_impl_.noise_param_)*/nullptr
  , /*decltype(_impl_.emit_constraint_)*/nullptr
  , /*decltype(_impl_.distort_param_)*/nullptr
  , /*decltype(_impl_.expand_param_)*/nullptr
  , /*decltype(_impl_.crop_size_)*/0u
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.force_color_)*/false
  , /*decltype(_impl_.force_gray_)*/false
  , /*decltype(_impl_.crop_h_)*/0u
  , /*decltype(_impl_.crop_w_)*/0u
  , /*decltype(_impl_.jitter_)*/0
  , /*decltype(_impl_.scale_)*/1} {}
struct TransformationParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformationParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformationParameterDefaultTypeInternal() {}
  union {
    TransformationParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
PROTOBUF_CONSTEXPR ResizeParameter::ResizeParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pad_value_)*/{}
  , /*decltype(_impl_.interp_mode_)*/{}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_scale_)*/0u
  , /*decltype(_impl_.width_scale_)*/0u
  , /*decltype(_impl_.pad_mode_)*/1
  , /*decltype(_impl_.prob_)*/1
  , /*decltype(_impl_.resize_mode_)*/1} {}
struct ResizeParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizeParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizeParameterDefaultTypeInternal() {}
  union {
    ResizeParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizeParameterDefaultTypeInternal _ResizeParameter_default_instance_;
PROTOBUF_CONSTEXPR SaltPepperParameter::SaltPepperParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.fraction_)*/0} {}
struct SaltPepperParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaltPepperParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaltPepperParameterDefaultTypeInternal() {}
  union {
    SaltPepperParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaltPepperParameterDefaultTypeInternal _SaltPepperParameter_default_instance_;
PROTOBUF_CONSTEXPR NoiseParameter::NoiseParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.saltpepper_param_)*/nullptr
  , /*decltype(_impl_.prob_)*/0
  , /*decltype(_impl_.hist_eq_)*/false
  , /*decltype(_impl_.inverse_)*/false
  , /*decltype(_impl_.decolorize_)*/false
  , /*decltype(_impl_.gauss_blur_)*/false
  , /*decltype(_impl_.posterize_)*/false
  , /*decltype(_impl_.erode_)*/false
  , /*decltype(_impl_.saltpepper_)*/false
  , /*decltype(_impl_.clahe_)*/false
  , /*decltype(_impl_.convert_to_hsv_)*/false
  , /*decltype(_impl_.convert_to_lab_)*/false
  , /*decltype(_impl_.jpeg_)*/-1} {}
struct NoiseParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoiseParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoiseParameterDefaultTypeInternal() {}
  union {
    NoiseParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoiseParameterDefaultTypeInternal _NoiseParameter_default_instance_;
PROTOBUF_CONSTEXPR DistortionParameter::DistortionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brightness_prob_)*/0
  , /*decltype(_impl_.brightness_delta_)*/0
  , /*decltype(_impl_.contrast_prob_)*/0
  , /*decltype(_impl_.contrast_lower_)*/0
  , /*decltype(_impl_.contrast_upper_)*/0
  , /*decltype(_impl_.hue_prob_)*/0
  , /*decltype(_impl_.hue_delta_)*/0
  , /*decltype(_impl_.saturation_prob_)*/0
  , /*decltype(_impl_.saturation_lower_)*/0
  , /*decltype(_impl_.saturation_upper_)*/0
  , /*decltype(_impl_.random_order_prob_)*/0} {}
struct DistortionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistortionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistortionParameterDefaultTypeInternal() {}
  union {
    DistortionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistortionParameterDefaultTypeInternal _DistortionParameter_default_instance_;
PROTOBUF_CONSTEXPR ExpansionParameter::ExpansionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prob_)*/1
  , /*decltype(_impl_.max_expand_ratio_)*/1} {}
struct ExpansionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpansionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpansionParameterDefaultTypeInternal() {}
  union {
    ExpansionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpansionParameterDefaultTypeInternal _ExpansionParameter_default_instance_;
PROTOBUF_CONSTEXPR LossParameter::LossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_label_)*/0
  , /*decltype(_impl_.normalize_)*/false
  , /*decltype(_impl_.normalization_)*/1} {}
struct LossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LossParameterDefaultTypeInternal() {}
  union {
    LossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LossParameterDefaultTypeInternal _LossParameter_default_instance_;
PROTOBUF_CONSTEXPR AccuracyParameter::AccuracyParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_label_)*/0
  , /*decltype(_impl_.top_k_)*/1u
  , /*decltype(_impl_.axis_)*/1} {}
struct AccuracyParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccuracyParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccuracyParameterDefaultTypeInternal() {}
  union {
    AccuracyParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
PROTOBUF_CONSTEXPR AnnotatedDataParameter::AnnotatedDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.batch_sampler_)*/{}
  , /*decltype(_impl_.label_map_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.anno_type_)*/0
  , /*decltype(_impl_.num_classes_)*/3} {}
struct AnnotatedDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotatedDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotatedDataParameterDefaultTypeInternal() {}
  union {
    AnnotatedDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotatedDataParameterDefaultTypeInternal _AnnotatedDataParameter_default_instance_;
PROTOBUF_CONSTEXPR ArgMaxParameter::ArgMaxParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.out_max_val_)*/false
  , /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.top_k_)*/1u} {}
struct ArgMaxParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgMaxParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgMaxParameterDefaultTypeInternal() {}
  union {
    ArgMaxParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
PROTOBUF_CONSTEXPR ConcatParameter::ConcatParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.concat_dim_)*/1u
  , /*decltype(_impl_.axis_)*/1} {}
struct ConcatParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcatParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcatParameterDefaultTypeInternal() {}
  union {
    ConcatParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
PROTOBUF_CONSTEXPR BatchNormParameter::BatchNormParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.use_global_stats_)*/false
  , /*decltype(_impl_.moving_average_fraction_)*/0.999f
  , /*decltype(_impl_.eps_)*/1e-05f} {}
struct BatchNormParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchNormParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchNormParameterDefaultTypeInternal() {}
  union {
    BatchNormParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
PROTOBUF_CONSTEXPR BiasParameter::BiasParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filler_)*/nullptr
  , /*decltype(_impl_.axis_)*/1
  , /*decltype(_impl_.num_axes_)*/1} {}
struct BiasParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiasParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiasParameterDefaultTypeInternal() {}
  union {
    BiasParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
PROTOBUF_CONSTEXPR ContrastiveLossParameter::ContrastiveLossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legacy_version_)*/false
  , /*decltype(_impl_.margin_)*/1} {}
struct ContrastiveLossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContrastiveLossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContrastiveLossParameterDefaultTypeInternal() {}
  union {
    ContrastiveLossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
PROTOBUF_CONSTEXPR ConvolutionParameter::ConvolutionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pad_)*/{}
  , /*decltype(_impl_.kernel_size_)*/{}
  , /*decltype(_impl_.stride_)*/{}
  , /*decltype(_impl_.dilation_)*/{}
  , /*decltype(_impl_.weight_filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.num_output_)*/0u
  , /*decltype(_impl_.pad_h_)*/0u
  , /*decltype(_impl_.pad_w_)*/0u
  , /*decltype(_impl_.kernel_h_)*/0u
  , /*decltype(_impl_.kernel_w_)*/0u
  , /*decltype(_impl_.stride_h_)*/0u
  , /*decltype(_impl_.stride_w_)*/0u
  , /*decltype(_impl_.engine_)*/0
  , /*decltype(_impl_.force_nd_im2col_)*/false
  , /*decltype(_impl_.axis_)*/1
  , /*decltype(_impl_.bias_term_)*/true
  , /*decltype(_impl_.group_)*/1u} {}
struct ConvolutionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvolutionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvolutionParameterDefaultTypeInternal() {}
  union {
    ConvolutionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
PROTOBUF_CONSTEXPR CropParameter::CropParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offset_)*/{}
  , /*decltype(_impl_.axis_)*/2} {}
struct CropParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CropParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CropParameterDefaultTypeInternal() {}
  union {
    CropParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CropParameterDefaultTypeInternal _CropParameter_default_instance_;
PROTOBUF_CONSTEXPR DataParameter::DataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mean_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0u
  , /*decltype(_impl_.crop_size_)*/0u
  , /*decltype(_impl_.rand_skip_)*/0u
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.force_encoded_color_)*/false
  , /*decltype(_impl_.backend_)*/0
  , /*decltype(_impl_.scale_)*/1
  , /*decltype(_impl_.prefetch_)*/4u} {}
struct DataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataParameterDefaultTypeInternal() {}
  union {
    DataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataParameterDefaultTypeInternal _DataParameter_default_instance_;
PROTOBUF_CONSTEXPR DetectionEvaluateParameter::DetectionEvaluateParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_size_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resize_param_)*/nullptr
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.background_label_id_)*/0u
  , /*decltype(_impl_.overlap_threshold_)*/0.5f
  , /*decltype(_impl_.evaluate_difficult_gt_)*/true} {}
struct DetectionEvaluateParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionEvaluateParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionEvaluateParameterDefaultTypeInternal() {}
  union {
    DetectionEvaluateParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionEvaluateParameterDefaultTypeInternal _DetectionEvaluateParameter_default_instance_;
PROTOBUF_CONSTEXPR NonMaximumSuppressionParameter::NonMaximumSuppressionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_k_)*/0
  , /*decltype(_impl_.nms_threshold_)*/0.3f
  , /*decltype(_impl_.eta_)*/1} {}
struct NonMaximumSuppressionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonMaximumSuppressionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonMaximumSuppressionParameterDefaultTypeInternal() {}
  union {
    NonMaximumSuppressionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonMaximumSuppressionParameterDefaultTypeInternal _NonMaximumSuppressionParameter_default_instance_;
PROTOBUF_CONSTEXPR SaveOutputParameter::SaveOutputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_name_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_map_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_size_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resize_param_)*/nullptr
  , /*decltype(_impl_.num_test_image_)*/0u} {}
struct SaveOutputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveOutputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveOutputParameterDefaultTypeInternal() {}
  union {
    SaveOutputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveOutputParameterDefaultTypeInternal _SaveOutputParameter_default_instance_;
PROTOBUF_CONSTEXPR DetectionOutputParameter::DetectionOutputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.save_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nms_param_)*/nullptr
  , /*decltype(_impl_.save_output_param_)*/nullptr
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.background_label_id_)*/0
  , /*decltype(_impl_.confidence_threshold_)*/0
  , /*decltype(_impl_.variance_encoded_in_target_)*/false
  , /*decltype(_impl_.visualize_)*/false
  , /*decltype(_impl_.visualize_threshold_)*/0
  , /*decltype(_impl_.keep_top_k_)*/-1
  , /*decltype(_impl_.share_location_)*/true
  , /*decltype(_impl_.code_type_)*/1} {}
struct DetectionOutputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionOutputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionOutputParameterDefaultTypeInternal() {}
  union {
    DetectionOutputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionOutputParameterDefaultTypeInternal _DetectionOutputParameter_default_instance_;
PROTOBUF_CONSTEXPR RegionOutputParameter::RegionOutputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anchorbox_)*/{}
  , /*decltype(_impl_.nms_param_)*/nullptr
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.confidence_threshold_)*/0
  , /*decltype(_impl_.nms_type_)*/0
  , /*decltype(_impl_.nms_sigma_)*/0
  , /*decltype(_impl_.is_rpn_)*/false
  , /*decltype(_impl_.keep_top_k_)*/-1} {}
struct RegionOutputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionOutputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionOutputParameterDefaultTypeInternal() {}
  union {
    RegionOutputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionOutputParameterDefaultTypeInternal _RegionOutputParameter_default_instance_;
PROTOBUF_CONSTEXPR DropoutParameter::DropoutParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dropout_ratio_)*/0.5f} {}
struct DropoutParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropoutParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropoutParameterDefaultTypeInternal() {}
  union {
    DropoutParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
PROTOBUF_CONSTEXPR DummyDataParameter::DummyDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_filler_)*/{}
  , /*decltype(_impl_.num_)*/{}
  , /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.height_)*/{}
  , /*decltype(_impl_.width_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DummyDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyDataParameterDefaultTypeInternal() {}
  union {
    DummyDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
PROTOBUF_CONSTEXPR EltwiseParameter::EltwiseParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coeff_)*/{}
  , /*decltype(_impl_.operation_)*/1
  , /*decltype(_impl_.stable_prod_grad_)*/true} {}
struct EltwiseParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EltwiseParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EltwiseParameterDefaultTypeInternal() {}
  union {
    EltwiseParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
PROTOBUF_CONSTEXPR ELUParameter::ELUParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.alpha_)*/1} {}
struct ELUParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ELUParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ELUParameterDefaultTypeInternal() {}
  union {
    ELUParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
PROTOBUF_CONSTEXPR EmbedParameter::EmbedParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weight_filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.num_output_)*/0u
  , /*decltype(_impl_.input_dim_)*/0u
  , /*decltype(_impl_.bias_term_)*/true} {}
struct EmbedParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmbedParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmbedParameterDefaultTypeInternal() {}
  union {
    EmbedParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
PROTOBUF_CONSTEXPR ExpParameter::ExpParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shift_)*/0
  , /*decltype(_impl_.base_)*/-1
  , /*decltype(_impl_.scale_)*/1} {}
struct ExpParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpParameterDefaultTypeInternal() {}
  union {
    ExpParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
PROTOBUF_CONSTEXPR FlattenParameter::FlattenParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_)*/1
  , /*decltype(_impl_.end_axis_)*/-1} {}
struct FlattenParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlattenParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlattenParameterDefaultTypeInternal() {}
  union {
    FlattenParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
PROTOBUF_CONSTEXPR HDF5DataParameter::HDF5DataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0u
  , /*decltype(_impl_.shuffle_)*/false} {}
struct HDF5DataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HDF5DataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HDF5DataParameterDefaultTypeInternal() {}
  union {
    HDF5DataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
PROTOBUF_CONSTEXPR HDF5OutputParameter::HDF5OutputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HDF5OutputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HDF5OutputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HDF5OutputParameterDefaultTypeInternal() {}
  union {
    HDF5OutputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
PROTOBUF_CONSTEXPR HingeLossParameter::HingeLossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.norm_)*/1} {}
struct HingeLossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HingeLossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HingeLossParameterDefaultTypeInternal() {}
  union {
    HingeLossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
PROTOBUF_CONSTEXPR RepeatedList::RepeatedList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.list_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_repeat_)*/1u} {}
struct RepeatedListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedListDefaultTypeInternal() {}
  union {
    RepeatedList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedListDefaultTypeInternal _RepeatedList_default_instance_;
PROTOBUF_CONSTEXPR DatasetParameter::DatasetParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.repeated_list_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shuffle_)*/true
  , /*decltype(_impl_.weight_)*/1
  , /*decltype(_impl_.type_)*/1} {}
struct DatasetParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetParameterDefaultTypeInternal() {}
  union {
    DatasetParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetParameterDefaultTypeInternal _DatasetParameter_default_instance_;
PROTOBUF_CONSTEXPR ImageDataParameter::ImageDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_set_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mean_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crop_size_)*/0u
  , /*decltype(_impl_.rand_skip_)*/0u
  , /*decltype(_impl_.shuffle_)*/false
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.new_height_)*/0u
  , /*decltype(_impl_.new_width_)*/0u
  , /*decltype(_impl_.scale_)*/1
  , /*decltype(_impl_.batch_size_)*/1u
  , /*decltype(_impl_.is_color_)*/true
  , /*decltype(_impl_.prefetch_)*/4u} {}
struct ImageDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDataParameterDefaultTypeInternal() {}
  union {
    ImageDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
PROTOBUF_CONSTEXPR InfogainLossParameter::InfogainLossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct InfogainLossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfogainLossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfogainLossParameterDefaultTypeInternal() {}
  union {
    InfogainLossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
PROTOBUF_CONSTEXPR InnerProductParameter::InnerProductParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weight_filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.num_output_)*/0u
  , /*decltype(_impl_.transpose_)*/false
  , /*decltype(_impl_.bias_term_)*/true
  , /*decltype(_impl_.axis_)*/1} {}
struct InnerProductParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerProductParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerProductParameterDefaultTypeInternal() {}
  union {
    InnerProductParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
PROTOBUF_CONSTEXPR InputParameter::InputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputParameterDefaultTypeInternal() {}
  union {
    InputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputParameterDefaultTypeInternal _InputParameter_default_instance_;
PROTOBUF_CONSTEXPR LogParameter::LogParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shift_)*/0
  , /*decltype(_impl_.base_)*/-1
  , /*decltype(_impl_.scale_)*/1} {}
struct LogParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogParameterDefaultTypeInternal() {}
  union {
    LogParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogParameterDefaultTypeInternal _LogParameter_default_instance_;
PROTOBUF_CONSTEXPR LRNParameter::LRNParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.norm_region_)*/0
  , /*decltype(_impl_.engine_)*/0
  , /*decltype(_impl_.local_size_)*/5u
  , /*decltype(_impl_.alpha_)*/1
  , /*decltype(_impl_.beta_)*/0.75f
  , /*decltype(_impl_.k_)*/1} {}
struct LRNParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LRNParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LRNParameterDefaultTypeInternal() {}
  union {
    LRNParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
PROTOBUF_CONSTEXPR MemoryDataParameter::MemoryDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.batch_size_)*/0u
  , /*decltype(_impl_.channels_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u} {}
struct MemoryDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryDataParameterDefaultTypeInternal() {}
  union {
    MemoryDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
PROTOBUF_CONSTEXPR MultiBoxLossParameter::MultiBoxLossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nms_param_)*/nullptr
  , /*decltype(_impl_.conf_loss_type_)*/0
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.background_label_id_)*/0u
  , /*decltype(_impl_.do_neg_mining_)*/false
  , /*decltype(_impl_.encode_variance_in_target_)*/false
  , /*decltype(_impl_.map_object_to_agnostic_)*/false
  , /*decltype(_impl_.ignore_cross_boundary_bbox_)*/false
  , /*decltype(_impl_.bp_inside_)*/false
  , /*decltype(_impl_.use_prior_for_nms_)*/false
  , /*decltype(_impl_.loc_loss_type_)*/1
  , /*decltype(_impl_.loc_weight_)*/1
  , /*decltype(_impl_.match_type_)*/1
  , /*decltype(_impl_.overlap_threshold_)*/0.5f
  , /*decltype(_impl_.share_location_)*/true
  , /*decltype(_impl_.use_prior_for_matching_)*/true
  , /*decltype(_impl_.use_difficult_gt_)*/true
  , /*decltype(_impl_.neg_pos_ratio_)*/3
  , /*decltype(_impl_.neg_overlap_)*/0.5f
  , /*decltype(_impl_.code_type_)*/1
  , /*decltype(_impl_.mining_type_)*/1
  , /*decltype(_impl_.sample_size_)*/64} {}
struct MultiBoxLossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiBoxLossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiBoxLossParameterDefaultTypeInternal() {}
  union {
    MultiBoxLossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiBoxLossParameterDefaultTypeInternal _MultiBoxLossParameter_default_instance_;
PROTOBUF_CONSTEXPR MVNParameter::MVNParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.across_channels_)*/false
  , /*decltype(_impl_.normalize_variance_)*/true
  , /*decltype(_impl_.eps_)*/1e-09f} {}
struct MVNParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MVNParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MVNParameterDefaultTypeInternal() {}
  union {
    MVNParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
PROTOBUF_CONSTEXPR NormalizeParameter::NormalizeParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scale_filler_)*/nullptr
  , /*decltype(_impl_.across_spatial_)*/true
  , /*decltype(_impl_.channel_shared_)*/true
  , /*decltype(_impl_.eps_)*/1e-10f} {}
struct NormalizeParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalizeParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalizeParameterDefaultTypeInternal() {}
  union {
    NormalizeParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalizeParameterDefaultTypeInternal _NormalizeParameter_default_instance_;
PROTOBUF_CONSTEXPR ParameterParameter::ParameterParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/nullptr} {}
struct ParameterParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterParameterDefaultTypeInternal() {}
  union {
    ParameterParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterParameterDefaultTypeInternal _ParameterParameter_default_instance_;
PROTOBUF_CONSTEXPR PermuteParameter::PermuteParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermuteParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermuteParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermuteParameterDefaultTypeInternal() {}
  union {
    PermuteParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
PROTOBUF_CONSTEXPR PoolingParameter::PoolingParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pool_)*/0
  , /*decltype(_impl_.kernel_size_)*/0u
  , /*decltype(_impl_.pad_)*/0u
  , /*decltype(_impl_.kernel_h_)*/0u
  , /*decltype(_impl_.kernel_w_)*/0u
  , /*decltype(_impl_.stride_h_)*/0u
  , /*decltype(_impl_.stride_w_)*/0u
  , /*decltype(_impl_.pad_h_)*/0u
  , /*decltype(_impl_.pad_w_)*/0u
  , /*decltype(_impl_.engine_)*/0
  , /*decltype(_impl_.global_pooling_)*/false
  , /*decltype(_impl_.round_mode_)*/0
  , /*decltype(_impl_.stride_)*/1u} {}
struct PoolingParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoolingParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoolingParameterDefaultTypeInternal() {}
  union {
    PoolingParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
PROTOBUF_CONSTEXPR PowerParameter::PowerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shift_)*/0
  , /*decltype(_impl_.power_)*/1
  , /*decltype(_impl_.scale_)*/1} {}
struct PowerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerParameterDefaultTypeInternal() {}
  union {
    PowerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
PROTOBUF_CONSTEXPR PriorBoxParameter::PriorBoxParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_size_)*/{}
  , /*decltype(_impl_.max_size_)*/{}
  , /*decltype(_impl_.aspect_ratio_)*/{}
  , /*decltype(_impl_.variance_)*/{}
  , /*decltype(_impl_.clip_)*/false
  , /*decltype(_impl_.img_size_)*/0u
  , /*decltype(_impl_.img_h_)*/0u
  , /*decltype(_impl_.img_w_)*/0u
  , /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_.step_h_)*/0
  , /*decltype(_impl_.step_w_)*/0
  , /*decltype(_impl_.flip_)*/true
  , /*decltype(_impl_.offset_)*/0.5f} {}
struct PriorBoxParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriorBoxParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriorBoxParameterDefaultTypeInternal() {}
  union {
    PriorBoxParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriorBoxParameterDefaultTypeInternal _PriorBoxParameter_default_instance_;
PROTOBUF_CONSTEXPR PythonParameter::PythonParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.module_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.share_in_parallel_)*/false} {}
struct PythonParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PythonParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PythonParameterDefaultTypeInternal() {}
  union {
    PythonParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
PROTOBUF_CONSTEXPR RecurrentParameter::RecurrentParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.weight_filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.num_output_)*/0u
  , /*decltype(_impl_.debug_info_)*/false
  , /*decltype(_impl_.expose_hidden_)*/false} {}
struct RecurrentParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecurrentParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecurrentParameterDefaultTypeInternal() {}
  union {
    RecurrentParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecurrentParameterDefaultTypeInternal _RecurrentParameter_default_instance_;
PROTOBUF_CONSTEXPR ReductionParameter::ReductionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.operation_)*/1
  , /*decltype(_impl_.coeff_)*/1} {}
struct ReductionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReductionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReductionParameterDefaultTypeInternal() {}
  union {
    ReductionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
PROTOBUF_CONSTEXPR ReLUParameter::ReLUParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.negative_slope_)*/0
  , /*decltype(_impl_.engine_)*/0} {}
struct ReLUParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReLUParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReLUParameterDefaultTypeInternal() {}
  union {
    ReLUParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
PROTOBUF_CONSTEXPR ReshapeParameter::ReshapeParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.num_axes_)*/-1} {}
struct ReshapeParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReshapeParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReshapeParameterDefaultTypeInternal() {}
  union {
    ReshapeParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
PROTOBUF_CONSTEXPR ROIPoolingParameter::ROIPoolingParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pooled_h_)*/0u
  , /*decltype(_impl_.pooled_w_)*/0u
  , /*decltype(_impl_.use_floor_)*/false
  , /*decltype(_impl_.spatial_scale_)*/1} {}
struct ROIPoolingParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROIPoolingParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROIPoolingParameterDefaultTypeInternal() {}
  union {
    ROIPoolingParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
PROTOBUF_CONSTEXPR ScaleParameter::ScaleParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.bias_term_)*/false
  , /*decltype(_impl_.axis_)*/1
  , /*decltype(_impl_.num_axes_)*/1} {}
struct ScaleParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaleParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaleParameterDefaultTypeInternal() {}
  union {
    ScaleParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
PROTOBUF_CONSTEXPR SigmoidParameter::SigmoidParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.engine_)*/0} {}
struct SigmoidParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmoidParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmoidParameterDefaultTypeInternal() {}
  union {
    SigmoidParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
PROTOBUF_CONSTEXPR SliceParameter::SliceParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slice_point_)*/{}
  , /*decltype(_impl_.slice_dim_)*/1u
  , /*decltype(_impl_.axis_)*/1} {}
struct SliceParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceParameterDefaultTypeInternal() {}
  union {
    SliceParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
PROTOBUF_CONSTEXPR SoftmaxParameter::SoftmaxParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.engine_)*/0
  , /*decltype(_impl_.axis_)*/1} {}
struct SoftmaxParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftmaxParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftmaxParameterDefaultTypeInternal() {}
  union {
    SoftmaxParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
PROTOBUF_CONSTEXPR TanHParameter::TanHParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.engine_)*/0} {}
struct TanHParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TanHParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TanHParameterDefaultTypeInternal() {}
  union {
    TanHParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
PROTOBUF_CONSTEXPR TileParameter::TileParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tiles_)*/0
  , /*decltype(_impl_.axis_)*/1} {}
struct TileParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileParameterDefaultTypeInternal() {}
  union {
    TileParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileParameterDefaultTypeInternal _TileParameter_default_instance_;
PROTOBUF_CONSTEXPR ThresholdParameter::ThresholdParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threshold_)*/0} {}
struct ThresholdParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThresholdParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThresholdParameterDefaultTypeInternal() {}
  union {
    ThresholdParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
PROTOBUF_CONSTEXPR VideoDataParameter::VideoDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.video_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.video_type_)*/0
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_.skip_frames_)*/0u} {}
struct VideoDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDataParameterDefaultTypeInternal() {}
  union {
    VideoDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDataParameterDefaultTypeInternal _VideoDataParameter_default_instance_;
PROTOBUF_CONSTEXPR WindowDataParameter::WindowDataParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mean_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crop_mode_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_size_)*/0u
  , /*decltype(_impl_.crop_size_)*/0u
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.cache_images_)*/false
  , /*decltype(_impl_.context_pad_)*/0u
  , /*decltype(_impl_.scale_)*/1
  , /*decltype(_impl_.fg_threshold_)*/0.5f
  , /*decltype(_impl_.bg_threshold_)*/0.5f
  , /*decltype(_impl_.fg_fraction_)*/0.25f} {}
struct WindowDataParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WindowDataParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WindowDataParameterDefaultTypeInternal() {}
  union {
    WindowDataParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
PROTOBUF_CONSTEXPR SPPParameter::SPPParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pyramid_height_)*/0u
  , /*decltype(_impl_.pool_)*/0
  , /*decltype(_impl_.engine_)*/0} {}
struct SPPParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SPPParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SPPParameterDefaultTypeInternal() {}
  union {
    SPPParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
PROTOBUF_CONSTEXPR V1LayerParameter::V1LayerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bottom_)*/{}
  , /*decltype(_impl_.top_)*/{}
  , /*decltype(_impl_.blobs_)*/{}
  , /*decltype(_impl_.blobs_lr_)*/{}
  , /*decltype(_impl_.weight_decay_)*/{}
  , /*decltype(_impl_.include_)*/{}
  , /*decltype(_impl_.exclude_)*/{}
  , /*decltype(_impl_.loss_weight_)*/{}
  , /*decltype(_impl_.param_)*/{}
  , /*decltype(_impl_.blob_share_mode_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layer_)*/nullptr
  , /*decltype(_impl_.concat_param_)*/nullptr
  , /*decltype(_impl_.convolution_param_)*/nullptr
  , /*decltype(_impl_.data_param_)*/nullptr
  , /*decltype(_impl_.dropout_param_)*/nullptr
  , /*decltype(_impl_.hdf5_data_param_)*/nullptr
  , /*decltype(_impl_.hdf5_output_param_)*/nullptr
  , /*decltype(_impl_.image_data_param_)*/nullptr
  , /*decltype(_impl_.infogain_loss_param_)*/nullptr
  , /*decltype(_impl_.inner_product_param_)*/nullptr
  , /*decltype(_impl_.lrn_param_)*/nullptr
  , /*decltype(_impl_.pooling_param_)*/nullptr
  , /*decltype(_impl_.window_data_param_)*/nullptr
  , /*decltype(_impl_.power_param_)*/nullptr
  , /*decltype(_impl_.memory_data_param_)*/nullptr
  , /*decltype(_impl_.argmax_param_)*/nullptr
  , /*decltype(_impl_.eltwise_param_)*/nullptr
  , /*decltype(_impl_.threshold_param_)*/nullptr
  , /*decltype(_impl_.dummy_data_param_)*/nullptr
  , /*decltype(_impl_.accuracy_param_)*/nullptr
  , /*decltype(_impl_.hinge_loss_param_)*/nullptr
  , /*decltype(_impl_.relu_param_)*/nullptr
  , /*decltype(_impl_.slice_param_)*/nullptr
  , /*decltype(_impl_.mvn_param_)*/nullptr
  , /*decltype(_impl_.transform_param_)*/nullptr
  , /*decltype(_impl_.tanh_param_)*/nullptr
  , /*decltype(_impl_.sigmoid_param_)*/nullptr
  , /*decltype(_impl_.softmax_param_)*/nullptr
  , /*decltype(_impl_.contrastive_loss_param_)*/nullptr
  , /*decltype(_impl_.exp_param_)*/nullptr
  , /*decltype(_impl_.loss_param_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct V1LayerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V1LayerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V1LayerParameterDefaultTypeInternal() {}
  union {
    V1LayerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
PROTOBUF_CONSTEXPR V0LayerParameter::V0LayerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.blobs_)*/{}
  , /*decltype(_impl_.blobs_lr_)*/{}
  , /*decltype(_impl_.weight_decay_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meanfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det_crop_mode_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_filler_)*/nullptr
  , /*decltype(_impl_.bias_filler_)*/nullptr
  , /*decltype(_impl_.hdf5_output_param_)*/nullptr
  , /*decltype(_impl_.num_output_)*/0u
  , /*decltype(_impl_.pad_)*/0u
  , /*decltype(_impl_.kernelsize_)*/0u
  , /*decltype(_impl_.pool_)*/0
  , /*decltype(_impl_.batchsize_)*/0u
  , /*decltype(_impl_.cropsize_)*/0u
  , /*decltype(_impl_.mirror_)*/false
  , /*decltype(_impl_.shuffle_images_)*/false
  , /*decltype(_impl_.rand_skip_)*/0u
  , /*decltype(_impl_.det_context_pad_)*/0u
  , /*decltype(_impl_.new_num_)*/0
  , /*decltype(_impl_.new_channels_)*/0
  , /*decltype(_impl_.new_height_)*/0
  , /*decltype(_impl_.new_width_)*/0
  , /*decltype(_impl_.concat_dim_)*/1u
  , /*decltype(_impl_.biasterm_)*/true
  , /*decltype(_impl_.group_)*/1u
  , /*decltype(_impl_.stride_)*/1u
  , /*decltype(_impl_.dropout_ratio_)*/0.5f
  , /*decltype(_impl_.local_size_)*/5u
  , /*decltype(_impl_.alpha_)*/1
  , /*decltype(_impl_.beta_)*/0.75f
  , /*decltype(_impl_.scale_)*/1
  , /*decltype(_impl_.k_)*/1
  , /*decltype(_impl_.det_fg_threshold_)*/0.5f
  , /*decltype(_impl_.det_bg_threshold_)*/0.5f
  , /*decltype(_impl_.det_fg_fraction_)*/0.25f} {}
struct V0LayerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V0LayerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V0LayerParameterDefaultTypeInternal() {}
  union {
    V0LayerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
PROTOBUF_CONSTEXPR PReLUParameter::PReLUParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filler_)*/nullptr
  , /*decltype(_impl_.channel_shared_)*/false} {}
struct PReLUParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PReLUParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PReLUParameterDefaultTypeInternal() {}
  union {
    PReLUParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
PROTOBUF_CONSTEXPR PaddingParameter::PaddingParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pad_t_)*/0u
  , /*decltype(_impl_.pad_b_)*/0u
  , /*decltype(_impl_.pad_l_)*/0u
  , /*decltype(_impl_.pad_r_)*/0u
  , /*decltype(_impl_.val_)*/0} {}
struct PaddingParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaddingParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaddingParameterDefaultTypeInternal() {}
  union {
    PaddingParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaddingParameterDefaultTypeInternal _PaddingParameter_default_instance_;
PROTOBUF_CONSTEXPR YoloLossParameter::YoloLossParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reg_loss_type_)*/2
  , /*decltype(_impl_.target_axis_)*/-1} {}
struct YoloLossParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YoloLossParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YoloLossParameterDefaultTypeInternal() {}
  union {
    YoloLossParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YoloLossParameterDefaultTypeInternal _YoloLossParameter_default_instance_;
PROTOBUF_CONSTEXPR YoloDumpParameter::YoloDumpParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dump_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct YoloDumpParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YoloDumpParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YoloDumpParameterDefaultTypeInternal() {}
  union {
    YoloDumpParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YoloDumpParameterDefaultTypeInternal _YoloDumpParameter_default_instance_;
PROTOBUF_CONSTEXPR YoloAnchorsParameter::YoloAnchorsParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anchors_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ref_w_)*/1
  , /*decltype(_impl_.ref_h_)*/1} {}
struct YoloAnchorsParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YoloAnchorsParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YoloAnchorsParameterDefaultTypeInternal() {}
  union {
    YoloAnchorsParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YoloAnchorsParameterDefaultTypeInternal _YoloAnchorsParameter_default_instance_;
PROTOBUF_CONSTEXPR DimensionStatistics::DimensionStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mean_h_)*/0
  , /*decltype(_impl_.mean_w_)*/0
  , /*decltype(_impl_.mean_l_)*/0
  , /*decltype(_impl_.std_l_)*/1
  , /*decltype(_impl_.std_h_)*/1
  , /*decltype(_impl_.std_w_)*/1} {}
struct DimensionStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionStatisticsDefaultTypeInternal() {}
  union {
    DimensionStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionStatisticsDefaultTypeInternal _DimensionStatistics_default_instance_;
PROTOBUF_CONSTEXPR YoloTargetParameter::YoloTargetParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dimension_statistics_)*/{}
  , /*decltype(_impl_.num_classes_)*/0
  , /*decltype(_impl_.neg_rois_ratio_)*/1
  , /*decltype(_impl_.ign_threshold_)*/0.6f
  , /*decltype(_impl_.neg_threshold_)*/0.1f
  , /*decltype(_impl_.min_height_)*/0.05f
  , /*decltype(_impl_.bias_match_)*/true
  , /*decltype(_impl_.rescore_)*/true
  , /*decltype(_impl_.ori_cyc_)*/1
  , /*decltype(_impl_.obj_weight_)*/10
  , /*decltype(_impl_.noobj_weight_)*/1} {}
struct YoloTargetParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YoloTargetParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YoloTargetParameterDefaultTypeInternal() {}
  union {
    YoloTargetParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YoloTargetParameterDefaultTypeInternal _YoloTargetParameter_default_instance_;
PROTOBUF_CONSTEXPR RegionProposalParameter::RegionProposalParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anchorbox_)*/{}
  , /*decltype(_impl_.thresholds_)*/{}
  , /*decltype(_impl_.nms_param_)*/nullptr
  , /*decltype(_impl_.object_scale_)*/0u
  , /*decltype(_impl_.noobject_scale_)*/0u
  , /*decltype(_impl_.class_scale_)*/0u
  , /*decltype(_impl_.coord_scale_)*/0u
  , /*decltype(_impl_.jitter_)*/0
  , /*decltype(_impl_.bias_)*/0
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.rescore_)*/false
  , /*decltype(_impl_.bias_match_)*/false
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_.orientation_scale_)*/0
  , /*decltype(_impl_.pos_threshold_)*/0
  , /*decltype(_impl_.neg_threshold_)*/0
  , /*decltype(_impl_.neg_ratio_)*/3
  , /*decltype(_impl_.tricky_iter_)*/400u
  , /*decltype(_impl_.keep_top_k_)*/-1} {}
struct RegionProposalParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionProposalParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionProposalParameterDefaultTypeInternal() {}
  union {
    RegionProposalParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionProposalParameterDefaultTypeInternal _RegionProposalParameter_default_instance_;
PROTOBUF_CONSTEXPR RegionParameter::RegionParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anchorbox_)*/{}
  , /*decltype(_impl_.thresholds_)*/{}
  , /*decltype(_impl_.ori_enable_)*/{}
  , /*decltype(_impl_.anchorfile_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_scale_)*/0u
  , /*decltype(_impl_.noobject_scale_)*/0u
  , /*decltype(_impl_.class_scale_)*/0
  , /*decltype(_impl_.coord_scale_)*/0u
  , /*decltype(_impl_.jitter_)*/0
  , /*decltype(_impl_.bias_)*/0
  , /*decltype(_impl_.num_classes_)*/0u
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_.rescore_)*/false
  , /*decltype(_impl_.bias_match_)*/false
  , /*decltype(_impl_.use_l1_loss_)*/false
  , /*decltype(_impl_.use_twice_softmax_)*/false
  , /*decltype(_impl_.orientation_scale_)*/0
  , /*decltype(_impl_.dimension_scale_)*/0
  , /*decltype(_impl_.front_scale_)*/0
  , /*decltype(_impl_.rear_scale_)*/0
  , /*decltype(_impl_.is_anchor_normalized_)*/false
  , /*decltype(_impl_.use_side_box_v2_)*/false
  , /*decltype(_impl_.use_side_box_v3_)*/false
  , /*decltype(_impl_.tricky_iter_)*/400u
  , /*decltype(_impl_.ori_cycle_)*/1} {}
struct RegionParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionParameterDefaultTypeInternal() {}
  union {
    RegionParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionParameterDefaultTypeInternal _RegionParameter_default_instance_;
PROTOBUF_CONSTEXPR AnchorBox::AnchorBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.h_)*/0} {}
struct AnchorBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnchorBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnchorBoxDefaultTypeInternal() {}
  union {
    AnchorBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnchorBoxDefaultTypeInternal _AnchorBox_default_instance_;
PROTOBUF_CONSTEXPR ReorgParameter::ReorgParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stride_)*/0u} {}
struct ReorgParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReorgParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReorgParameterDefaultTypeInternal() {}
  union {
    ReorgParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReorgParameterDefaultTypeInternal _ReorgParameter_default_instance_;
PROTOBUF_CONSTEXPR BBoxRegParameter::BBoxRegParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bbox_mean_)*/{}
  , /*decltype(_impl_.bbox_std_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BBoxRegParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BBoxRegParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BBoxRegParameterDefaultTypeInternal() {}
  union {
    BBoxRegParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BBoxRegParameterDefaultTypeInternal _BBoxRegParameter_default_instance_;
PROTOBUF_CONSTEXPR DFMBPSROIAlignParameter::DFMBPSROIAlignParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heat_map_a_)*/0
  , /*decltype(_impl_.output_dim_)*/0
  , /*decltype(_impl_.group_height_)*/0
  , /*decltype(_impl_.group_width_)*/0
  , /*decltype(_impl_.pooled_height_)*/0
  , /*decltype(_impl_.pooled_width_)*/0
  , /*decltype(_impl_.pad_ratio_)*/0
  , /*decltype(_impl_.sample_per_part_)*/0
  , /*decltype(_impl_.trans_std_)*/0
  , /*decltype(_impl_.part_height_)*/0
  , /*decltype(_impl_.part_width_)*/0
  , /*decltype(_impl_.heat_map_b_)*/0} {}
struct DFMBPSROIAlignParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DFMBPSROIAlignParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DFMBPSROIAlignParameterDefaultTypeInternal() {}
  union {
    DFMBPSROIAlignParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DFMBPSROIAlignParameterDefaultTypeInternal _DFMBPSROIAlignParameter_default_instance_;
PROTOBUF_CONSTEXPR DetectionOutputSSDParameter::DetectionOutputSSDParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threshold_)*/{}
  , /*decltype(_impl_.gen_anchor_param_)*/nullptr
  , /*decltype(_impl_.nms_param_)*/nullptr
  , /*decltype(_impl_.heat_map_a_)*/0
  , /*decltype(_impl_.min_size_mode_)*/0
  , /*decltype(_impl_.threshold_objectness_)*/0
  , /*decltype(_impl_.refine_out_of_map_bbox_)*/false
  , /*decltype(_impl_.rpn_proposal_output_score_)*/false
  , /*decltype(_impl_.regress_agnostic_)*/false
  , /*decltype(_impl_.num_class_)*/1u
  , /*decltype(_impl_.min_size_h_)*/2
  , /*decltype(_impl_.min_size_w_)*/2} {}
struct DetectionOutputSSDParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionOutputSSDParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionOutputSSDParameterDefaultTypeInternal() {}
  union {
    DetectionOutputSSDParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionOutputSSDParameterDefaultTypeInternal _DetectionOutputSSDParameter_default_instance_;
PROTOBUF_CONSTEXPR NMSSSDParameter::NMSSSDParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.overlap_ratio_)*/{}
  , /*decltype(_impl_.top_n_)*/{}
  , /*decltype(_impl_.max_candidate_n_)*/{}
  , /*decltype(_impl_.use_soft_nms_)*/{}
  , /*decltype(_impl_.voting_)*/{}
  , /*decltype(_impl_.vote_iou_)*/{}
  , /*decltype(_impl_.add_score_)*/false
  , /*decltype(_impl_.nms_among_classes_)*/false
  , /*decltype(_impl_.force_imparity_iou_thr_)*/0
  , /*decltype(_impl_.nms_gpu_max_n_per_time_)*/-1
  , /*decltype(_impl_.need_nms_)*/true
  , /*decltype(_impl_.force_identity_iou_thr_)*/1} {}
struct NMSSSDParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NMSSSDParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NMSSSDParameterDefaultTypeInternal() {}
  union {
    NMSSSDParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NMSSSDParameterDefaultTypeInternal _NMSSSDParameter_default_instance_;
PROTOBUF_CONSTEXPR GenAnchorParameter::GenAnchorParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.anchor_width_)*/{}
  , /*decltype(_impl_.anchor_height_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenAnchorParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenAnchorParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenAnchorParameterDefaultTypeInternal() {}
  union {
    GenAnchorParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenAnchorParameterDefaultTypeInternal _GenAnchorParameter_default_instance_;
}  // namespace inference
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[103];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[37];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2frt_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2frt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobShape, _impl_.dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.double_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.double_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _impl_.width_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.float_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _impl_.encoded_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _impl_.display_name_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMap, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _impl_.min_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _impl_.max_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _impl_.min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _impl_.max_aspect_ratio_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.min_jaccard_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.max_jaccard_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.min_sample_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.max_sample_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.min_object_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.max_object_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _impl_.balance_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_.use_original_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_.sampler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_.sample_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_.max_sample_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _impl_.max_trials_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _impl_.emit_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _impl_.emit_overlap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.xmin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.ymin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.xmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.ymax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.difficult_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _impl_.size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _impl_.alpha_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_.bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_.bbox3d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_.front_bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _impl_.rear_bbox_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _impl_.group_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _impl_.annotation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _impl_.datum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _impl_.annotation_group_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.sparse_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _impl_.variance_norm_),
  0,
  1,
  2,
  6,
  3,
  7,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.input_shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.input_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.force_backward_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.debug_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _impl_.layers_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _impl_.stage_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_.min_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_.max_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _impl_.not_stage_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _impl_.share_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _impl_.lr_mult_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _impl_.decay_mult_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.loss_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.propagate_down_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.include_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.exclude_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.transform_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.accuracy_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.annotated_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.argmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.batch_norm_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.bbox_reg_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.bias_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.concat_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.contrastive_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.convolution_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.crop_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.detection_evaluate_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.detection_output_ssd_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.dfmb_psroi_pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.dropout_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.dummy_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.eltwise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.elu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.embed_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.exp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.flatten_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.hdf5_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.hdf5_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.hinge_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.image_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.yolo_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.data_prob_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.infogain_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.inner_product_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.input_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.log_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.lrn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.memory_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.multibox_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.region_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.region_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.region_proposal_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.yolo_target_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.yolo_anchors_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.yolo_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.yolo_dump_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.padding_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.reorg_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.mvn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.norm_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.parameter_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.permute_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.power_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.prelu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.python_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.recurrent_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.reduction_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.relu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.reshape_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.roi_pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.scale_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.sigmoid_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.softmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.spp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.slice_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.tanh_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.threshold_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.tile_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.video_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _impl_.window_data_param_),
  0,
  1,
  ~0u,
  ~0u,
  70,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  49,
  5,
  41,
  58,
  43,
  6,
  7,
  8,
  46,
  9,
  54,
  53,
  59,
  57,
  10,
  11,
  12,
  42,
  39,
  13,
  37,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  18,
  19,
  45,
  36,
  20,
  21,
  50,
  60,
  62,
  63,
  65,
  66,
  67,
  68,
  64,
  61,
  22,
  55,
  47,
  51,
  23,
  24,
  33,
  52,
  32,
  48,
  38,
  25,
  35,
  69,
  44,
  26,
  27,
  34,
  28,
  29,
  30,
  40,
  56,
  31,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.crop_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.crop_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.mean_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.force_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.force_gray_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.resize_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.noise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.distort_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.expand_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _impl_.emit_constraint_),
  13,
  7,
  6,
  10,
  11,
  0,
  ~0u,
  8,
  9,
  1,
  2,
  4,
  5,
  12,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.resize_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.height_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.width_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.pad_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.pad_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _impl_.interp_mode_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _impl_.fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _impl_.value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.hist_eq_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.inverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.decolorize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.gauss_blur_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.jpeg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.posterize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.erode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.saltpepper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.saltpepper_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.clahe_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.convert_to_hsv_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _impl_.convert_to_lab_),
  1,
  2,
  3,
  4,
  5,
  12,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.brightness_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.brightness_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.contrast_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.contrast_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.contrast_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.hue_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.hue_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.saturation_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.saturation_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.saturation_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _impl_.random_order_prob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _impl_.max_expand_ratio_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _impl_.ignore_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _impl_.normalization_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _impl_.normalize_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _impl_.top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _impl_.ignore_label_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _impl_.batch_sampler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _impl_.label_map_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _impl_.anno_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _impl_.num_classes_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _impl_.out_max_val_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _impl_.top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _impl_.axis_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _impl_.concat_dim_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _impl_.use_global_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _impl_.moving_average_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _impl_.eps_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _impl_.num_axes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _impl_.filler_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _impl_.margin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _impl_.legacy_version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.dilation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.pad_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.pad_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.kernel_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.kernel_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.stride_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.stride_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _impl_.force_nd_im2col_),
  2,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  0,
  1,
  9,
  11,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _impl_.offset_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.backend_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.force_encoded_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _impl_.prefetch_),
  0,
  2,
  4,
  7,
  8,
  1,
  3,
  5,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.overlap_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.evaluate_difficult_gt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.name_size_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _impl_.resize_param_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _impl_.nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _impl_.top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _impl_.eta_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.output_directory_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.output_name_prefix_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.output_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.label_map_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.name_size_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.num_test_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _impl_.resize_param_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.share_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.save_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.code_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.variance_encoded_in_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.visualize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.visualize_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _impl_.save_file_),
  3,
  10,
  4,
  1,
  2,
  11,
  6,
  9,
  5,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.nms_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.nms_sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _impl_.is_rpn_),
  1,
  0,
  6,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, _impl_.dropout_ratio_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.data_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _impl_.coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _impl_.stable_prod_grad_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, _impl_.alpha_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_.input_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_.bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_.weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _impl_.bias_filler_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _impl_.shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _impl_.end_axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _impl_.shuffle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, _impl_.file_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, _impl_.norm_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _impl_.list_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _impl_.num_repeat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.root_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.shuffle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _impl_.repeated_list_),
  0,
  1,
  3,
  4,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.shuffle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.new_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.new_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.is_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.root_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.prefetch_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _impl_.image_set_),
  0,
  10,
  4,
  5,
  7,
  8,
  11,
  9,
  1,
  3,
  6,
  2,
  12,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, _impl_.source_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _impl_.transpose_),
  2,
  4,
  0,
  1,
  5,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InputParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _impl_.shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.local_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.norm_region_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _impl_.engine_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _impl_.width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.loc_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.conf_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.loc_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.share_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.overlap_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.use_prior_for_matching_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.use_difficult_gt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.do_neg_mining_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.neg_pos_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.neg_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.code_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.encode_variance_in_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.map_object_to_agnostic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.ignore_cross_boundary_bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.bp_inside_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.mining_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.sample_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _impl_.use_prior_for_nms_),
  10,
  1,
  11,
  2,
  14,
  12,
  13,
  15,
  3,
  16,
  4,
  17,
  18,
  19,
  5,
  6,
  7,
  8,
  20,
  0,
  21,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _impl_.normalize_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _impl_.across_channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _impl_.eps_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _impl_.across_spatial_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _impl_.scale_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _impl_.channel_shared_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _impl_.eps_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, _impl_.shape_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PermuteParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PermuteParameter, _impl_.order_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.pad_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.pad_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.kernel_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.kernel_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.stride_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.stride_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.global_pooling_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _impl_.round_mode_),
  0,
  2,
  7,
  8,
  1,
  3,
  4,
  12,
  5,
  6,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _impl_.shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.min_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.max_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.flip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.clip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.img_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.img_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.img_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.step_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.step_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.step_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _impl_.offset_),
  ~0u,
  ~0u,
  ~0u,
  7,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _impl_.param_str_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _impl_.share_in_parallel_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_.weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_.bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_.debug_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _impl_.expose_hidden_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _impl_.coeff_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _impl_.negative_slope_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _impl_.engine_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _impl_.num_axes_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _impl_.pooled_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _impl_.pooled_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _impl_.spatial_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _impl_.use_floor_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_.num_axes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_.filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_.bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _impl_.bias_filler_),
  3,
  4,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, _impl_.engine_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _impl_.slice_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _impl_.slice_dim_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _impl_.axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, _impl_.engine_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _impl_.tiles_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, _impl_.threshold_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _impl_.video_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _impl_.video_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _impl_.skip_frames_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.fg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.bg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.fg_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.context_pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.crop_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.cache_images_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _impl_.root_folder_),
  0,
  9,
  1,
  4,
  5,
  6,
  10,
  11,
  12,
  8,
  2,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _impl_.pyramid_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _impl_.pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _impl_.engine_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.include_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.exclude_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.blob_share_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.blobs_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.weight_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.loss_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.accuracy_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.argmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.concat_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.contrastive_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.convolution_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.dropout_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.dummy_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.eltwise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.exp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.hdf5_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.hdf5_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.hinge_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.image_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.infogain_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.inner_product_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.lrn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.memory_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.mvn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.power_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.relu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.sigmoid_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.softmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.slice_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.tanh_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.threshold_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.window_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.transform_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _impl_.layer_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  32,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  20,
  16,
  2,
  29,
  3,
  4,
  5,
  19,
  17,
  30,
  6,
  7,
  21,
  8,
  9,
  10,
  11,
  15,
  24,
  12,
  14,
  22,
  27,
  28,
  23,
  26,
  18,
  13,
  25,
  31,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.biasterm_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.kernelsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.dropout_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.local_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.meanfile_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.batchsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.cropsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.blobs_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.weight_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.det_fg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.det_bg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.det_fg_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.det_context_pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.det_crop_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.new_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.new_channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.new_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.new_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.shuffle_images_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.concat_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _impl_.hdf5_output_param_),
  0,
  1,
  8,
  23,
  5,
  6,
  9,
  10,
  24,
  25,
  11,
  26,
  27,
  28,
  29,
  31,
  2,
  30,
  3,
  12,
  13,
  14,
  ~0u,
  ~0u,
  ~0u,
  16,
  32,
  33,
  34,
  17,
  4,
  18,
  19,
  20,
  21,
  15,
  22,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _impl_.filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _impl_.channel_shared_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_.pad_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_.pad_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_.pad_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_.pad_r_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _impl_.val_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _impl_.reg_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _impl_.target_axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, _impl_.dump_dir_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _impl_.anchors_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _impl_.ref_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _impl_.ref_h_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.mean_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.mean_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.mean_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.std_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.std_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _impl_.std_l_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.neg_rois_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.ign_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.neg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.min_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.ori_cyc_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.obj_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.noobj_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _impl_.dimension_statistics_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.thresholds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.orientation_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.object_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.noobject_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.class_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.coord_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.tricky_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.pos_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.neg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _impl_.neg_ratio_),
  ~0u,
  ~0u,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  15,
  0,
  16,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.thresholds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.orientation_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.dimension_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.front_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.rear_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.object_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.noobject_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.class_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.coord_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.tricky_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.use_l1_loss_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.use_twice_softmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.is_anchor_normalized_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.ori_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.anchorfile_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.use_side_box_v2_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.use_side_box_v3_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _impl_.ori_cycle_),
  ~0u,
  ~0u,
  13,
  14,
  15,
  16,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  10,
  8,
  20,
  11,
  12,
  17,
  ~0u,
  0,
  18,
  19,
  21,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _impl_.h_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, _impl_.stride_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBoxRegParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBoxRegParameter, _impl_.bbox_mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBoxRegParameter, _impl_.bbox_std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.heat_map_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.output_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.group_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.group_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.pooled_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.pooled_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.pad_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.sample_per_part_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.trans_std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.part_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.part_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DFMBPSROIAlignParameter, _impl_.heat_map_b_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.heat_map_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.min_size_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.min_size_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.min_size_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.threshold_objectness_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.gen_anchor_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.refine_out_of_map_bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.num_class_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.rpn_proposal_output_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.regress_agnostic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputSSDParameter, _impl_.threshold_),
  2,
  9,
  10,
  3,
  4,
  0,
  5,
  1,
  8,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.need_nms_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.overlap_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.top_n_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.add_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.max_candidate_n_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.use_soft_nms_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.nms_among_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.voting_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.vote_iou_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.force_identity_iou_thr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.force_imparity_iou_thr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NMSSSDParameter, _impl_.nms_gpu_max_n_per_time_),
  4,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  5,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::GenAnchorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::GenAnchorParameter, _impl_.anchor_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::GenAnchorParameter, _impl_.anchor_height_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::perception::inference::BlobShape)},
  { 7, 22, -1, sizeof(::apollo::perception::inference::BlobProto)},
  { 31, 44, -1, sizeof(::apollo::perception::inference::Datum)},
  { 51, 60, -1, sizeof(::apollo::perception::inference::LabelMapItem)},
  { 63, -1, -1, sizeof(::apollo::perception::inference::LabelMap)},
  { 70, 80, -1, sizeof(::apollo::perception::inference::Sampler)},
  { 84, 97, -1, sizeof(::apollo::perception::inference::SampleConstraint)},
  { 104, 115, -1, sizeof(::apollo::perception::inference::BatchSampler)},
  { 120, 128, -1, sizeof(::apollo::perception::inference::EmitConstraint)},
  { 130, 144, -1, sizeof(::apollo::perception::inference::NormalizedBBox)},
  { 152, 165, -1, sizeof(::apollo::perception::inference::BBox3D)},
  { 172, 183, -1, sizeof(::apollo::perception::inference::Annotation)},
  { 188, 196, -1, sizeof(::apollo::perception::inference::AnnotationGroup)},
  { 198, 207, -1, sizeof(::apollo::perception::inference::AnnotatedDatum)},
  { 210, 224, -1, sizeof(::apollo::perception::inference::FillerParameter)},
  { 232, 247, -1, sizeof(::apollo::perception::inference::NetParameter)},
  { 256, 265, -1, sizeof(::apollo::perception::inference::NetState)},
  { 268, 279, -1, sizeof(::apollo::perception::inference::NetStateRule)},
  { 284, 294, -1, sizeof(::apollo::perception::inference::ParamSpec)},
  { 298, 385, -1, sizeof(::apollo::perception::inference::LayerParameter)},
  { 466, 487, -1, sizeof(::apollo::perception::inference::TransformationParameter)},
  { 502, 517, -1, sizeof(::apollo::perception::inference::ResizeParameter)},
  { 526, 534, -1, sizeof(::apollo::perception::inference::SaltPepperParameter)},
  { 536, 555, -1, sizeof(::apollo::perception::inference::NoiseParameter)},
  { 568, 585, -1, sizeof(::apollo::perception::inference::DistortionParameter)},
  { 596, 604, -1, sizeof(::apollo::perception::inference::ExpansionParameter)},
  { 606, 615, -1, sizeof(::apollo::perception::inference::LossParameter)},
  { 618, 627, -1, sizeof(::apollo::perception::inference::AccuracyParameter)},
  { 630, 640, -1, sizeof(::apollo::perception::inference::AnnotatedDataParameter)},
  { 644, 653, -1, sizeof(::apollo::perception::inference::ArgMaxParameter)},
  { 656, 664, -1, sizeof(::apollo::perception::inference::ConcatParameter)},
  { 666, 675, -1, sizeof(::apollo::perception::inference::BatchNormParameter)},
  { 678, 687, -1, sizeof(::apollo::perception::inference::BiasParameter)},
  { 690, 698, -1, sizeof(::apollo::perception::inference::ContrastiveLossParameter)},
  { 700, 724, -1, sizeof(::apollo::perception::inference::ConvolutionParameter)},
  { 742, 750, -1, sizeof(::apollo::perception::inference::CropParameter)},
  { 752, 768, -1, sizeof(::apollo::perception::inference::DataParameter)},
  { 778, 790, -1, sizeof(::apollo::perception::inference::DetectionEvaluateParameter)},
  { 796, 805, -1, sizeof(::apollo::perception::inference::NonMaximumSuppressionParameter)},
  { 808, 821, -1, sizeof(::apollo::perception::inference::SaveOutputParameter)},
  { 828, 846, -1, sizeof(::apollo::perception::inference::DetectionOutputParameter)},
  { 858, 872, -1, sizeof(::apollo::perception::inference::RegionOutputParameter)},
  { 880, 887, -1, sizeof(::apollo::perception::inference::DropoutParameter)},
  { 888, -1, -1, sizeof(::apollo::perception::inference::DummyDataParameter)},
  { 900, 909, -1, sizeof(::apollo::perception::inference::EltwiseParameter)},
  { 912, 919, -1, sizeof(::apollo::perception::inference::ELUParameter)},
  { 920, 931, -1, sizeof(::apollo::perception::inference::EmbedParameter)},
  { 936, 945, -1, sizeof(::apollo::perception::inference::ExpParameter)},
  { 948, 956, -1, sizeof(::apollo::perception::inference::FlattenParameter)},
  { 958, 967, -1, sizeof(::apollo::perception::inference::HDF5DataParameter)},
  { 970, 977, -1, sizeof(::apollo::perception::inference::HDF5OutputParameter)},
  { 978, 985, -1, sizeof(::apollo::perception::inference::HingeLossParameter)},
  { 986, 994, -1, sizeof(::apollo::perception::inference::RepeatedList)},
  { 996, 1008, -1, sizeof(::apollo::perception::inference::DatasetParameter)},
  { 1014, 1034, -1, sizeof(::apollo::perception::inference::ImageDataParameter)},
  { 1048, 1055, -1, sizeof(::apollo::perception::inference::InfogainLossParameter)},
  { 1056, 1068, -1, sizeof(::apollo::perception::inference::InnerProductParameter)},
  { 1074, -1, -1, sizeof(::apollo::perception::inference::InputParameter)},
  { 1081, 1090, -1, sizeof(::apollo::perception::inference::LogParameter)},
  { 1093, 1105, -1, sizeof(::apollo::perception::inference::LRNParameter)},
  { 1111, 1121, -1, sizeof(::apollo::perception::inference::MemoryDataParameter)},
  { 1125, 1153, -1, sizeof(::apollo::perception::inference::MultiBoxLossParameter)},
  { 1175, 1184, -1, sizeof(::apollo::perception::inference::MVNParameter)},
  { 1187, 1197, -1, sizeof(::apollo::perception::inference::NormalizeParameter)},
  { 1201, 1208, -1, sizeof(::apollo::perception::inference::ParameterParameter)},
  { 1209, -1, -1, sizeof(::apollo::perception::inference::PermuteParameter)},
  { 1216, 1235, -1, sizeof(::apollo::perception::inference::PoolingParameter)},
  { 1248, 1257, -1, sizeof(::apollo::perception::inference::PowerParameter)},
  { 1260, 1279, -1, sizeof(::apollo::perception::inference::PriorBoxParameter)},
  { 1292, 1302, -1, sizeof(::apollo::perception::inference::PythonParameter)},
  { 1306, 1317, -1, sizeof(::apollo::perception::inference::RecurrentParameter)},
  { 1322, 1331, -1, sizeof(::apollo::perception::inference::ReductionParameter)},
  { 1334, 1342, -1, sizeof(::apollo::perception::inference::ReLUParameter)},
  { 1344, 1353, -1, sizeof(::apollo::perception::inference::ReshapeParameter)},
  { 1356, 1366, -1, sizeof(::apollo::perception::inference::ROIPoolingParameter)},
  { 1370, 1381, -1, sizeof(::apollo::perception::inference::ScaleParameter)},
  { 1386, 1393, -1, sizeof(::apollo::perception::inference::SigmoidParameter)},
  { 1394, 1403, -1, sizeof(::apollo::perception::inference::SliceParameter)},
  { 1406, 1414, -1, sizeof(::apollo::perception::inference::SoftmaxParameter)},
  { 1416, 1423, -1, sizeof(::apollo::perception::inference::TanHParameter)},
  { 1424, 1432, -1, sizeof(::apollo::perception::inference::TileParameter)},
  { 1434, 1441, -1, sizeof(::apollo::perception::inference::ThresholdParameter)},
  { 1442, 1452, -1, sizeof(::apollo::perception::inference::VideoDataParameter)},
  { 1456, 1475, -1, sizeof(::apollo::perception::inference::WindowDataParameter)},
  { 1488, 1497, -1, sizeof(::apollo::perception::inference::SPPParameter)},
  { 1500, 1549, -1, sizeof(::apollo::perception::inference::V1LayerParameter)},
  { 1592, 1636, -1, sizeof(::apollo::perception::inference::V0LayerParameter)},
  { 1674, 1682, -1, sizeof(::apollo::perception::inference::PReLUParameter)},
  { 1684, 1695, -1, sizeof(::apollo::perception::inference::PaddingParameter)},
  { 1700, 1708, -1, sizeof(::apollo::perception::inference::YoloLossParameter)},
  { 1710, 1717, -1, sizeof(::apollo::perception::inference::YoloDumpParameter)},
  { 1718, 1727, -1, sizeof(::apollo::perception::inference::YoloAnchorsParameter)},
  { 1730, 1742, -1, sizeof(::apollo::perception::inference::DimensionStatistics)},
  { 1748, 1765, -1, sizeof(::apollo::perception::inference::YoloTargetParameter)},
  { 1776, 1801, -1, sizeof(::apollo::perception::inference::RegionProposalParameter)},
  { 1820, 1851, -1, sizeof(::apollo::perception::inference::RegionParameter)},
  { 1876, 1884, -1, sizeof(::apollo::perception::inference::AnchorBox)},
  { 1886, 1893, -1, sizeof(::apollo::perception::inference::ReorgParameter)},
  { 1894, -1, -1, sizeof(::apollo::perception::inference::BBoxRegParameter)},
  { 1902, 1920, -1, sizeof(::apollo::perception::inference::DFMBPSROIAlignParameter)},
  { 1932, 1950, -1, sizeof(::apollo::perception::inference::DetectionOutputSSDParameter)},
  { 1962, 1980, -1, sizeof(::apollo::perception::inference::NMSSSDParameter)},
  { 1992, -1, -1, sizeof(::apollo::perception::inference::GenAnchorParameter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::inference::_BlobShape_default_instance_._instance,
  &::apollo::perception::inference::_BlobProto_default_instance_._instance,
  &::apollo::perception::inference::_Datum_default_instance_._instance,
  &::apollo::perception::inference::_LabelMapItem_default_instance_._instance,
  &::apollo::perception::inference::_LabelMap_default_instance_._instance,
  &::apollo::perception::inference::_Sampler_default_instance_._instance,
  &::apollo::perception::inference::_SampleConstraint_default_instance_._instance,
  &::apollo::perception::inference::_BatchSampler_default_instance_._instance,
  &::apollo::perception::inference::_EmitConstraint_default_instance_._instance,
  &::apollo::perception::inference::_NormalizedBBox_default_instance_._instance,
  &::apollo::perception::inference::_BBox3D_default_instance_._instance,
  &::apollo::perception::inference::_Annotation_default_instance_._instance,
  &::apollo::perception::inference::_AnnotationGroup_default_instance_._instance,
  &::apollo::perception::inference::_AnnotatedDatum_default_instance_._instance,
  &::apollo::perception::inference::_FillerParameter_default_instance_._instance,
  &::apollo::perception::inference::_NetParameter_default_instance_._instance,
  &::apollo::perception::inference::_NetState_default_instance_._instance,
  &::apollo::perception::inference::_NetStateRule_default_instance_._instance,
  &::apollo::perception::inference::_ParamSpec_default_instance_._instance,
  &::apollo::perception::inference::_LayerParameter_default_instance_._instance,
  &::apollo::perception::inference::_TransformationParameter_default_instance_._instance,
  &::apollo::perception::inference::_ResizeParameter_default_instance_._instance,
  &::apollo::perception::inference::_SaltPepperParameter_default_instance_._instance,
  &::apollo::perception::inference::_NoiseParameter_default_instance_._instance,
  &::apollo::perception::inference::_DistortionParameter_default_instance_._instance,
  &::apollo::perception::inference::_ExpansionParameter_default_instance_._instance,
  &::apollo::perception::inference::_LossParameter_default_instance_._instance,
  &::apollo::perception::inference::_AccuracyParameter_default_instance_._instance,
  &::apollo::perception::inference::_AnnotatedDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_ArgMaxParameter_default_instance_._instance,
  &::apollo::perception::inference::_ConcatParameter_default_instance_._instance,
  &::apollo::perception::inference::_BatchNormParameter_default_instance_._instance,
  &::apollo::perception::inference::_BiasParameter_default_instance_._instance,
  &::apollo::perception::inference::_ContrastiveLossParameter_default_instance_._instance,
  &::apollo::perception::inference::_ConvolutionParameter_default_instance_._instance,
  &::apollo::perception::inference::_CropParameter_default_instance_._instance,
  &::apollo::perception::inference::_DataParameter_default_instance_._instance,
  &::apollo::perception::inference::_DetectionEvaluateParameter_default_instance_._instance,
  &::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_._instance,
  &::apollo::perception::inference::_SaveOutputParameter_default_instance_._instance,
  &::apollo::perception::inference::_DetectionOutputParameter_default_instance_._instance,
  &::apollo::perception::inference::_RegionOutputParameter_default_instance_._instance,
  &::apollo::perception::inference::_DropoutParameter_default_instance_._instance,
  &::apollo::perception::inference::_DummyDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_EltwiseParameter_default_instance_._instance,
  &::apollo::perception::inference::_ELUParameter_default_instance_._instance,
  &::apollo::perception::inference::_EmbedParameter_default_instance_._instance,
  &::apollo::perception::inference::_ExpParameter_default_instance_._instance,
  &::apollo::perception::inference::_FlattenParameter_default_instance_._instance,
  &::apollo::perception::inference::_HDF5DataParameter_default_instance_._instance,
  &::apollo::perception::inference::_HDF5OutputParameter_default_instance_._instance,
  &::apollo::perception::inference::_HingeLossParameter_default_instance_._instance,
  &::apollo::perception::inference::_RepeatedList_default_instance_._instance,
  &::apollo::perception::inference::_DatasetParameter_default_instance_._instance,
  &::apollo::perception::inference::_ImageDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_InfogainLossParameter_default_instance_._instance,
  &::apollo::perception::inference::_InnerProductParameter_default_instance_._instance,
  &::apollo::perception::inference::_InputParameter_default_instance_._instance,
  &::apollo::perception::inference::_LogParameter_default_instance_._instance,
  &::apollo::perception::inference::_LRNParameter_default_instance_._instance,
  &::apollo::perception::inference::_MemoryDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_MultiBoxLossParameter_default_instance_._instance,
  &::apollo::perception::inference::_MVNParameter_default_instance_._instance,
  &::apollo::perception::inference::_NormalizeParameter_default_instance_._instance,
  &::apollo::perception::inference::_ParameterParameter_default_instance_._instance,
  &::apollo::perception::inference::_PermuteParameter_default_instance_._instance,
  &::apollo::perception::inference::_PoolingParameter_default_instance_._instance,
  &::apollo::perception::inference::_PowerParameter_default_instance_._instance,
  &::apollo::perception::inference::_PriorBoxParameter_default_instance_._instance,
  &::apollo::perception::inference::_PythonParameter_default_instance_._instance,
  &::apollo::perception::inference::_RecurrentParameter_default_instance_._instance,
  &::apollo::perception::inference::_ReductionParameter_default_instance_._instance,
  &::apollo::perception::inference::_ReLUParameter_default_instance_._instance,
  &::apollo::perception::inference::_ReshapeParameter_default_instance_._instance,
  &::apollo::perception::inference::_ROIPoolingParameter_default_instance_._instance,
  &::apollo::perception::inference::_ScaleParameter_default_instance_._instance,
  &::apollo::perception::inference::_SigmoidParameter_default_instance_._instance,
  &::apollo::perception::inference::_SliceParameter_default_instance_._instance,
  &::apollo::perception::inference::_SoftmaxParameter_default_instance_._instance,
  &::apollo::perception::inference::_TanHParameter_default_instance_._instance,
  &::apollo::perception::inference::_TileParameter_default_instance_._instance,
  &::apollo::perception::inference::_ThresholdParameter_default_instance_._instance,
  &::apollo::perception::inference::_VideoDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_WindowDataParameter_default_instance_._instance,
  &::apollo::perception::inference::_SPPParameter_default_instance_._instance,
  &::apollo::perception::inference::_V1LayerParameter_default_instance_._instance,
  &::apollo::perception::inference::_V0LayerParameter_default_instance_._instance,
  &::apollo::perception::inference::_PReLUParameter_default_instance_._instance,
  &::apollo::perception::inference::_PaddingParameter_default_instance_._instance,
  &::apollo::perception::inference::_YoloLossParameter_default_instance_._instance,
  &::apollo::perception::inference::_YoloDumpParameter_default_instance_._instance,
  &::apollo::perception::inference::_YoloAnchorsParameter_default_instance_._instance,
  &::apollo::perception::inference::_DimensionStatistics_default_instance_._instance,
  &::apollo::perception::inference::_YoloTargetParameter_default_instance_._instance,
  &::apollo::perception::inference::_RegionProposalParameter_default_instance_._instance,
  &::apollo::perception::inference::_RegionParameter_default_instance_._instance,
  &::apollo::perception::inference::_AnchorBox_default_instance_._instance,
  &::apollo::perception::inference::_ReorgParameter_default_instance_._instance,
  &::apollo::perception::inference::_BBoxRegParameter_default_instance_._instance,
  &::apollo::perception::inference::_DFMBPSROIAlignParameter_default_instance_._instance,
  &::apollo::perception::inference::_DetectionOutputSSDParameter_default_instance_._instance,
  &::apollo::perception::inference::_NMSSSDParameter_default_instance_._instance,
  &::apollo::perception::inference::_GenAnchorParameter_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2frt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!modules/perception/proto/rt.proto\022\033apo"
  "llo.perception.inference\"\034\n\tBlobShape\022\017\n"
  "\003dim\030\001 \003(\003B\002\020\001\"\342\001\n\tBlobProto\0225\n\005shape\030\007 "
  "\001(\0132&.apollo.perception.inference.BlobSh"
  "ape\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022"
  "\027\n\013double_data\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030"
  "\t \003(\001B\002\020\001\022\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 "
  "\001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005"
  ":\0010\"\201\001\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006heigh"
  "t\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005"
  "label\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encod"
  "ed\030\007 \001(\010:\005false\"A\n\014LabelMapItem\022\014\n\004name\030"
  "\001 \001(\t\022\r\n\005label\030\002 \001(\005\022\024\n\014display_name\030\003 \001"
  "(\t\"C\n\010LabelMap\0227\n\004item\030\001 \003(\0132).apollo.pe"
  "rception.inference.LabelMapItem\"o\n\007Sampl"
  "er\022\024\n\tmin_scale\030\001 \001(\002:\0011\022\024\n\tmax_scale\030\002 "
  "\001(\002:\0011\022\033\n\020min_aspect_ratio\030\003 \001(\002:\0011\022\033\n\020m"
  "ax_aspect_ratio\030\004 \001(\002:\0011\"\326\001\n\020SampleConst"
  "raint\022\033\n\023min_jaccard_overlap\030\001 \001(\002\022\033\n\023ma"
  "x_jaccard_overlap\030\002 \001(\002\022\033\n\023min_sample_co"
  "verage\030\003 \001(\002\022\033\n\023max_sample_coverage\030\004 \001("
  "\002\022\033\n\023min_object_coverage\030\005 \001(\002\022\033\n\023max_ob"
  "ject_coverage\030\006 \001(\002\022\024\n\014balance_type\030\007 \003("
  "\005\"\336\001\n\014BatchSampler\022 \n\022use_original_image"
  "\030\001 \001(\010:\004true\0225\n\007sampler\030\002 \001(\0132$.apollo.p"
  "erception.inference.Sampler\022H\n\021sample_co"
  "nstraint\030\003 \001(\0132-.apollo.perception.infer"
  "ence.SampleConstraint\022\022\n\nmax_sample\030\004 \001("
  "\r\022\027\n\nmax_trials\030\005 \001(\r:\003100\"\240\001\n\016EmitConst"
  "raint\022O\n\temit_type\030\001 \001(\01624.apollo.percep"
  "tion.inference.EmitConstraint.EmitType:\006"
  "CENTER\022\024\n\014emit_overlap\030\002 \001(\002\"\'\n\010EmitType"
  "\022\n\n\006CENTER\020\000\022\017\n\013MIN_OVERLAP\020\001\"\207\001\n\016Normal"
  "izedBBox\022\014\n\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\014\n\004"
  "xmax\030\003 \001(\002\022\014\n\004ymax\030\004 \001(\002\022\r\n\005label\030\005 \001(\005\022"
  "\021\n\tdifficult\030\006 \001(\010\022\r\n\005score\030\007 \001(\002\022\014\n\004siz"
  "e\030\010 \001(\002\"n\n\006BBox3D\022\014\n\001h\030\001 \001(\002:\0010\022\014\n\001w\030\002 \001"
  "(\002:\0010\022\014\n\001l\030\003 \001(\002:\0010\022\014\n\001x\030\004 \001(\002:\0010\022\014\n\001y\030\005"
  " \001(\002:\0010\022\014\n\001z\030\006 \001(\002:\0010\022\020\n\005alpha\030\007 \001(\002:\0010\""
  "\225\002\n\nAnnotation\022\026\n\013instance_id\030\001 \001(\005:\0010\0229"
  "\n\004bbox\030\002 \001(\0132+.apollo.perception.inferen"
  "ce.NormalizedBBox\0223\n\006bbox3d\030\003 \001(\0132#.apol"
  "lo.perception.inference.BBox3D\022\?\n\nfront_"
  "bbox\030\004 \001(\0132+.apollo.perception.inference"
  ".NormalizedBBox\022>\n\trear_bbox\030\005 \001(\0132+.apo"
  "llo.perception.inference.NormalizedBBox\""
  "c\n\017AnnotationGroup\022\023\n\013group_label\030\001 \001(\005\022"
  ";\n\nannotation\030\002 \003(\0132\'.apollo.perception."
  "inference.Annotation\"\213\002\n\016AnnotatedDatum\022"
  "1\n\005datum\030\001 \001(\0132\".apollo.perception.infer"
  "ence.Datum\022H\n\004type\030\002 \001(\0162:.apollo.percep"
  "tion.inference.AnnotatedDatum.Annotation"
  "Type\022F\n\020annotation_group\030\003 \003(\0132,.apollo."
  "perception.inference.AnnotationGroup\"4\n\016"
  "AnnotationType\022\010\n\004BBOX\020\000\022\n\n\006BBOX3D\020\001\022\014\n\010"
  "BBOX3DFR\020\002\"\240\002\n\017FillerParameter\022\026\n\004type\030\001"
  " \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030"
  "\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\001"
  "0\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\022X\n"
  "\rvariance_norm\030\010 \001(\01629.apollo.perception"
  ".inference.FillerParameter.VarianceNorm:"
  "\006FAN_IN\"4\n\014VarianceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007F"
  "AN_OUT\020\001\022\013\n\007AVERAGE\020\002\"\346\002\n\014NetParameter\022\014"
  "\n\004name\030\001 \001(\t\022\r\n\005input\030\003 \003(\t\022;\n\013input_sha"
  "pe\030\010 \003(\0132&.apollo.perception.inference.B"
  "lobShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016force_bac"
  "kward\030\005 \001(\010:\005false\0224\n\005state\030\006 \001(\0132%.apol"
  "lo.perception.inference.NetState\022\031\n\ndebu"
  "g_info\030\007 \001(\010:\005false\022:\n\005layer\030d \003(\0132+.apo"
  "llo.perception.inference.LayerParameter\022"
  "=\n\006layers\030\002 \003(\0132-.apollo.perception.infe"
  "rence.V1LayerParameter\"d\n\010NetState\0227\n\005ph"
  "ase\030\001 \001(\0162\".apollo.perception.inference."
  "Phase:\004TEST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005stage\030\003"
  " \003(\t\"\211\001\n\014NetStateRule\0221\n\005phase\030\001 \001(\0162\".a"
  "pollo.perception.inference.Phase\022\021\n\tmin_"
  "level\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005stage\030"
  "\004 \003(\t\022\021\n\tnot_stage\030\005 \003(\t\"\271\001\n\tParamSpec\022\014"
  "\n\004name\030\001 \001(\t\022G\n\nshare_mode\030\002 \001(\01623.apoll"
  "o.perception.inference.ParamSpec.DimChec"
  "kMode\022\022\n\007lr_mult\030\003 \001(\002:\0011\022\025\n\ndecay_mult\030"
  "\004 \001(\002:\0011\"*\n\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\n"
  "PERMISSIVE\020\001\"\333*\n\016LayerParameter\022\014\n\004name\030"
  "\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003t"
  "op\030\004 \003(\t\0221\n\005phase\030\n \001(\0162\".apollo.percept"
  "ion.inference.Phase\022\023\n\013loss_weight\030\005 \003(\002"
  "\0225\n\005param\030\006 \003(\0132&.apollo.perception.infe"
  "rence.ParamSpec\0225\n\005blobs\030\007 \003(\0132&.apollo."
  "perception.inference.BlobProto\022\026\n\016propag"
  "ate_down\030\013 \003(\010\022:\n\007include\030\010 \003(\0132).apollo"
  ".perception.inference.NetStateRule\022:\n\007ex"
  "clude\030\t \003(\0132).apollo.perception.inferenc"
  "e.NetStateRule\022M\n\017transform_param\030d \001(\0132"
  "4.apollo.perception.inference.Transforma"
  "tionParameter\022>\n\nloss_param\030e \001(\0132*.apol"
  "lo.perception.inference.LossParameter\022F\n"
  "\016accuracy_param\030f \001(\0132..apollo.perceptio"
  "n.inference.AccuracyParameter\022R\n\024annotat"
  "ed_data_param\030\310\001 \001(\01323.apollo.perception"
  ".inference.AnnotatedDataParameter\022B\n\014arg"
  "max_param\030g \001(\0132,.apollo.perception.infe"
  "rence.ArgMaxParameter\022J\n\020batch_norm_para"
  "m\030\213\001 \001(\0132/.apollo.perception.inference.B"
  "atchNormParameter\022F\n\016bbox_reg_param\030\321\001 \001"
  "(\0132-.apollo.perception.inference.BBoxReg"
  "Parameter\022\?\n\nbias_param\030\215\001 \001(\0132*.apollo."
  "perception.inference.BiasParameter\022B\n\014co"
  "ncat_param\030h \001(\0132,.apollo.perception.inf"
  "erence.ConcatParameter\022U\n\026contrastive_lo"
  "ss_param\030i \001(\01325.apollo.perception.infer"
  "ence.ContrastiveLossParameter\022L\n\021convolu"
  "tion_param\030j \001(\01321.apollo.perception.inf"
  "erence.ConvolutionParameter\022\?\n\ncrop_para"
  "m\030\220\001 \001(\0132*.apollo.perception.inference.C"
  "ropParameter\022>\n\ndata_param\030k \001(\0132*.apoll"
  "o.perception.inference.DataParameter\022Z\n\030"
  "detection_evaluate_param\030\315\001 \001(\01327.apollo"
  ".perception.inference.DetectionEvaluateP"
  "arameter\022V\n\026detection_output_param\030\314\001 \001("
  "\01325.apollo.perception.inference.Detectio"
  "nOutputParameter\022]\n\032detection_output_ssd"
  "_param\030\322\001 \001(\01328.apollo.perception.infere"
  "nce.DetectionOutputSSDParameter\022W\n\030dfmb_"
  "psroi_pooling_param\030\320\001 \001(\01324.apollo.perc"
  "eption.inference.DFMBPSROIAlignParameter"
  "\022D\n\rdropout_param\030l \001(\0132-.apollo.percept"
  "ion.inference.DropoutParameter\022I\n\020dummy_"
  "data_param\030m \001(\0132/.apollo.perception.inf"
  "erence.DummyDataParameter\022D\n\reltwise_par"
  "am\030n \001(\0132-.apollo.perception.inference.E"
  "ltwiseParameter\022=\n\telu_param\030\214\001 \001(\0132).ap"
  "ollo.perception.inference.ELUParameter\022A"
  "\n\013embed_param\030\211\001 \001(\0132+.apollo.perception"
  ".inference.EmbedParameter\022<\n\texp_param\030o"
  " \001(\0132).apollo.perception.inference.ExpPa"
  "rameter\022E\n\rflatten_param\030\207\001 \001(\0132-.apollo"
  ".perception.inference.FlattenParameter\022G"
  "\n\017hdf5_data_param\030p \001(\0132..apollo.percept"
  "ion.inference.HDF5DataParameter\022K\n\021hdf5_"
  "output_param\030q \001(\01320.apollo.perception.i"
  "nference.HDF5OutputParameter\022I\n\020hinge_lo"
  "ss_param\030r \001(\0132/.apollo.perception.infer"
  "ence.HingeLossParameter\022I\n\020image_data_pa"
  "ram\030s \001(\0132/.apollo.perception.inference."
  "ImageDataParameter\022J\n\017yolo_data_param\030\347\230"
  "h \003(\0132/.apollo.perception.inference.Imag"
  "eDataParameter\022\031\n\017data_prob_param\030\350\230h \003("
  "\002\022O\n\023infogain_loss_param\030t \001(\01322.apollo."
  "perception.inference.InfogainLossParamet"
  "er\022O\n\023inner_product_param\030u \001(\01322.apollo"
  ".perception.inference.InnerProductParame"
  "ter\022A\n\013input_param\030\217\001 \001(\0132+.apollo.perce"
  "ption.inference.InputParameter\022=\n\tlog_pa"
  "ram\030\206\001 \001(\0132).apollo.perception.inference"
  ".LogParameter\022<\n\tlrn_param\030v \001(\0132).apoll"
  "o.perception.inference.LRNParameter\022K\n\021m"
  "emory_data_param\030w \001(\01320.apollo.percepti"
  "on.inference.MemoryDataParameter\022P\n\023mult"
  "ibox_loss_param\030\311\001 \001(\01322.apollo.percepti"
  "on.inference.MultiBoxLossParameter\022C\n\014re"
  "gion_param\030\254\002 \001(\0132,.apollo.perception.in"
  "ference.RegionParameter\022P\n\023region_output"
  "_param\030\266\002 \001(\01322.apollo.perception.infere"
  "nce.RegionOutputParameter\022T\n\025region_prop"
  "osal_param\030\300\002 \001(\01324.apollo.perception.in"
  "ference.RegionProposalParameter\022M\n\021yolo_"
  "target_param\030\201\300\014 \001(\01320.apollo.perception"
  ".inference.YoloTargetParameter\022O\n\022yolo_a"
  "nchors_param\030\202\300\014 \001(\01321.apollo.perception"
  ".inference.YoloAnchorsParameter\022I\n\017yolo_"
  "loss_param\030\203\300\014 \001(\0132..apollo.perception.i"
  "nference.YoloLossParameter\022I\n\017yolo_dump_"
  "param\030\204\300\014 \001(\0132..apollo.perception.infere"
  "nce.YoloDumpParameter\022E\n\rpadding_param\030\351"
  "\007 \001(\0132-.apollo.perception.inference.Padd"
  "ingParameter\022A\n\013reorg_param\030\255\002 \001(\0132+.apo"
  "llo.perception.inference.ReorgParameter\022"
  "<\n\tmvn_param\030x \001(\0132).apollo.perception.i"
  "nference.MVNParameter\022D\n\nnorm_param\030\316\001 \001"
  "(\0132/.apollo.perception.inference.Normali"
  "zeParameter\022I\n\017parameter_param\030\221\001 \001(\0132/."
  "apollo.perception.inference.ParameterPar"
  "ameter\022E\n\rpermute_param\030\312\001 \001(\0132-.apollo."
  "perception.inference.PermuteParameter\022D\n"
  "\rpooling_param\030y \001(\0132-.apollo.perception"
  ".inference.PoolingParameter\022@\n\013power_par"
  "am\030z \001(\0132+.apollo.perception.inference.P"
  "owerParameter\022A\n\013prelu_param\030\203\001 \001(\0132+.ap"
  "ollo.perception.inference.PReLUParameter"
  "\022H\n\017prior_box_param\030\313\001 \001(\0132..apollo.perc"
  "eption.inference.PriorBoxParameter\022C\n\014py"
  "thon_param\030\202\001 \001(\0132,.apollo.perception.in"
  "ference.PythonParameter\022I\n\017recurrent_par"
  "am\030\222\001 \001(\0132/.apollo.perception.inference."
  "RecurrentParameter\022I\n\017reduction_param\030\210\001"
  " \001(\0132/.apollo.perception.inference.Reduc"
  "tionParameter\022>\n\nrelu_param\030{ \001(\0132*.apol"
  "lo.perception.inference.ReLUParameter\022E\n"
  "\rreshape_param\030\205\001 \001(\0132-.apollo.perceptio"
  "n.inference.ReshapeParameter\022N\n\021roi_pool"
  "ing_param\030\327\307\370\003 \001(\01320.apollo.perception.i"
  "nference.ROIPoolingParameter\022A\n\013scale_pa"
  "ram\030\216\001 \001(\0132+.apollo.perception.inference"
  ".ScaleParameter\022D\n\rsigmoid_param\030| \001(\0132-"
  ".apollo.perception.inference.SigmoidPara"
  "meter\022D\n\rsoftmax_param\030} \001(\0132-.apollo.pe"
  "rception.inference.SoftmaxParameter\022=\n\ts"
  "pp_param\030\204\001 \001(\0132).apollo.perception.infe"
  "rence.SPPParameter\022@\n\013slice_param\030~ \001(\0132"
  "+.apollo.perception.inference.SliceParam"
  "eter\022>\n\ntanh_param\030\177 \001(\0132*.apollo.percep"
  "tion.inference.TanHParameter\022I\n\017threshol"
  "d_param\030\200\001 \001(\0132/.apollo.perception.infer"
  "ence.ThresholdParameter\022\?\n\ntile_param\030\212\001"
  " \001(\0132*.apollo.perception.inference.TileP"
  "arameter\022J\n\020video_data_param\030\317\001 \001(\0132/.ap"
  "ollo.perception.inference.VideoDataParam"
  "eter\022L\n\021window_data_param\030\201\001 \001(\01320.apoll"
  "o.perception.inference.WindowDataParamet"
  "er\"\310\004\n\027TransformationParameter\022\020\n\005scale\030"
  "\001 \001(\002:\0011\022\025\n\006mirror\030\002 \001(\010:\005false\022\024\n\tcrop_"
  "size\030\003 \001(\r:\0010\022\021\n\006crop_h\030\013 \001(\r:\0010\022\021\n\006crop"
  "_w\030\014 \001(\r:\0010\022\021\n\tmean_file\030\004 \001(\t\022\022\n\nmean_v"
  "alue\030\005 \003(\002\022\032\n\013force_color\030\006 \001(\010:\005false\022\031"
  "\n\nforce_gray\030\007 \001(\010:\005false\022B\n\014resize_para"
  "m\030\010 \001(\0132,.apollo.perception.inference.Re"
  "sizeParameter\022@\n\013noise_param\030\t \001(\0132+.apo"
  "llo.perception.inference.NoiseParameter\022"
  "G\n\rdistort_param\030\r \001(\01320.apollo.percepti"
  "on.inference.DistortionParameter\022E\n\014expa"
  "nd_param\030\016 \001(\0132/.apollo.perception.infer"
  "ence.ExpansionParameter\022\016\n\006jitter\030\017 \001(\002\022"
  "D\n\017emit_constraint\030\n \001(\0132+.apollo.percep"
  "tion.inference.EmitConstraint\"\322\004\n\017Resize"
  "Parameter\022\017\n\004prob\030\001 \001(\002:\0011\022S\n\013resize_mod"
  "e\030\002 \001(\01628.apollo.perception.inference.Re"
  "sizeParameter.Resize_mode:\004WARP\022\021\n\006heigh"
  "t\030\003 \001(\r:\0010\022\020\n\005width\030\004 \001(\r:\0010\022\027\n\014height_s"
  "cale\030\010 \001(\r:\0010\022\026\n\013width_scale\030\t \001(\r:\0010\022Q\n"
  "\010pad_mode\030\005 \001(\01625.apollo.perception.infe"
  "rence.ResizeParameter.Pad_mode:\010CONSTANT"
  "\022\021\n\tpad_value\030\006 \003(\002\022M\n\013interp_mode\030\007 \003(\016"
  "28.apollo.perception.inference.ResizePar"
  "ameter.Interp_mode\"G\n\013Resize_mode\022\010\n\004WAR"
  "P\020\001\022\022\n\016FIT_SMALL_SIZE\020\002\022\032\n\026FIT_LARGE_SIZ"
  "E_AND_PAD\020\003\":\n\010Pad_mode\022\014\n\010CONSTANT\020\001\022\014\n"
  "\010MIRRORED\020\002\022\022\n\016REPEAT_NEAREST\020\003\"I\n\013Inter"
  "p_mode\022\n\n\006LINEAR\020\001\022\010\n\004AREA\020\002\022\013\n\007NEAREST\020"
  "\003\022\t\n\005CUBIC\020\004\022\014\n\010LANCZOS4\020\005\"9\n\023SaltPepper"
  "Parameter\022\023\n\010fraction\030\001 \001(\002:\0010\022\r\n\005value\030"
  "\002 \003(\002\"\204\003\n\016NoiseParameter\022\017\n\004prob\030\001 \001(\002:\001"
  "0\022\026\n\007hist_eq\030\002 \001(\010:\005false\022\026\n\007inverse\030\003 \001"
  "(\010:\005false\022\031\n\ndecolorize\030\004 \001(\010:\005false\022\031\n\n"
  "gauss_blur\030\005 \001(\010:\005false\022\020\n\004jpeg\030\006 \001(\002:\002-"
  "1\022\030\n\tposterize\030\007 \001(\010:\005false\022\024\n\005erode\030\010 \001"
  "(\010:\005false\022\031\n\nsaltpepper\030\t \001(\010:\005false\022J\n\020"
  "saltpepper_param\030\n \001(\01320.apollo.percepti"
  "on.inference.SaltPepperParameter\022\024\n\005clah"
  "e\030\013 \001(\010:\005false\022\035\n\016convert_to_hsv\030\014 \001(\010:\005"
  "false\022\035\n\016convert_to_lab\030\r \001(\010:\005false\"\275\002\n"
  "\023DistortionParameter\022\032\n\017brightness_prob\030"
  "\001 \001(\002:\0010\022\033\n\020brightness_delta\030\002 \001(\002:\0010\022\030\n"
  "\rcontrast_prob\030\003 \001(\002:\0010\022\031\n\016contrast_lowe"
  "r\030\004 \001(\002:\0010\022\031\n\016contrast_upper\030\005 \001(\002:\0010\022\023\n"
  "\010hue_prob\030\006 \001(\002:\0010\022\024\n\thue_delta\030\007 \001(\002:\0010"
  "\022\032\n\017saturation_prob\030\010 \001(\002:\0010\022\033\n\020saturati"
  "on_lower\030\t \001(\002:\0010\022\033\n\020saturation_upper\030\n "
  "\001(\002:\0010\022\034\n\021random_order_prob\030\013 \001(\002:\0010\"B\n\022"
  "ExpansionParameter\022\017\n\004prob\030\001 \001(\002:\0011\022\033\n\020m"
  "ax_expand_ratio\030\002 \001(\002:\0011\"\330\001\n\rLossParamet"
  "er\022\024\n\014ignore_label\030\001 \001(\005\022Z\n\rnormalizatio"
  "n\030\003 \001(\0162<.apollo.perception.inference.Lo"
  "ssParameter.NormalizationMode:\005VALID\022\021\n\t"
  "normalize\030\002 \001(\010\"B\n\021NormalizationMode\022\010\n\004"
  "FULL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004NON"
  "E\020\003\"L\n\021AccuracyParameter\022\020\n\005top_k\030\001 \001(\r:"
  "\0011\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ignore_label\030\003 \001("
  "\005\"\337\001\n\026AnnotatedDataParameter\022@\n\rbatch_sa"
  "mpler\030\001 \003(\0132).apollo.perception.inferenc"
  "e.BatchSampler\022\026\n\016label_map_file\030\002 \001(\t\022S"
  "\n\tanno_type\030\003 \001(\0162:.apollo.perception.in"
  "ference.AnnotatedDatum.AnnotationType:\004B"
  "BOX\022\026\n\013num_classes\030\n \001(\005:\0013\"M\n\017ArgMaxPar"
  "ameter\022\032\n\013out_max_val\030\001 \001(\010:\005false\022\020\n\005to"
  "p_k\030\002 \001(\r:\0011\022\014\n\004axis\030\003 \001(\005\"9\n\017ConcatPara"
  "meter\022\017\n\004axis\030\002 \001(\005:\0011\022\025\n\nconcat_dim\030\001 \001"
  "(\r:\0011\"j\n\022BatchNormParameter\022\030\n\020use_globa"
  "l_stats\030\001 \001(\010\022&\n\027moving_average_fraction"
  "\030\002 \001(\002:\0050.999\022\022\n\003eps\030\003 \001(\002:\0051e-05\"s\n\rBia"
  "sParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030"
  "\002 \001(\005:\0011\022<\n\006filler\030\003 \001(\0132,.apollo.percep"
  "tion.inference.FillerParameter\"L\n\030Contra"
  "stiveLossParameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n"
  "\016legacy_version\030\002 \001(\010:\005false\"\276\004\n\024Convolu"
  "tionParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbia"
  "s_term\030\002 \001(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kerne"
  "l_size\030\004 \003(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation"
  "\030\022 \003(\r\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:"
  "\0010\022\020\n\010kernel_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020"
  "\n\010stride_h\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005gr"
  "oup\030\005 \001(\r:\0011\022C\n\rweight_filler\030\007 \001(\0132,.ap"
  "ollo.perception.inference.FillerParamete"
  "r\022A\n\013bias_filler\030\010 \001(\0132,.apollo.percepti"
  "on.inference.FillerParameter\022Q\n\006engine\030\017"
  " \001(\01628.apollo.perception.inference.Convo"
  "lutionParameter.Engine:\007DEFAULT\022\017\n\004axis\030"
  "\020 \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001(\010:\005false"
  "\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CU"
  "DNN\020\002\"0\n\rCropParameter\022\017\n\004axis\030\001 \001(\005:\0012\022"
  "\016\n\006offset\030\002 \003(\r\"\272\002\n\rDataParameter\022\016\n\006sou"
  "rce\030\001 \001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\trand_sk"
  "ip\030\007 \001(\r:\0010\022G\n\007backend\030\010 \001(\0162-.apollo.pe"
  "rception.inference.DataParameter.DB:\007LEV"
  "ELDB\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001("
  "\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:"
  "\005false\022\"\n\023force_encoded_color\030\t \001(\010:\005fal"
  "se\022\023\n\010prefetch\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVELDB"
  "\020\000\022\010\n\004LMDB\020\001\"\362\001\n\032DetectionEvaluateParame"
  "ter\022\023\n\013num_classes\030\001 \001(\r\022\036\n\023background_l"
  "abel_id\030\002 \001(\r:\0010\022\036\n\021overlap_threshold\030\003 "
  "\001(\002:\0030.5\022#\n\025evaluate_difficult_gt\030\004 \001(\010:"
  "\004true\022\026\n\016name_size_file\030\005 \001(\t\022B\n\014resize_"
  "param\030\006 \001(\0132,.apollo.perception.inferenc"
  "e.ResizeParameter\"[\n\036NonMaximumSuppressi"
  "onParameter\022\032\n\rnms_threshold\030\001 \001(\002:\0030.3\022"
  "\r\n\005top_k\030\002 \001(\005\022\016\n\003eta\030\003 \001(\002:\0011\"\356\001\n\023SaveO"
  "utputParameter\022\030\n\020output_directory\030\001 \001(\t"
  "\022\032\n\022output_name_prefix\030\002 \001(\t\022\025\n\routput_f"
  "ormat\030\003 \001(\t\022\026\n\016label_map_file\030\004 \001(\t\022\026\n\016n"
  "ame_size_file\030\005 \001(\t\022\026\n\016num_test_image\030\006 "
  "\001(\r\022B\n\014resize_param\030\007 \001(\0132,.apollo.perce"
  "ption.inference.ResizeParameter\"\211\004\n\030Dete"
  "ctionOutputParameter\022\023\n\013num_classes\030\001 \001("
  "\r\022\034\n\016share_location\030\002 \001(\010:\004true\022\036\n\023backg"
  "round_label_id\030\003 \001(\005:\0010\022N\n\tnms_param\030\004 \001"
  "(\0132;.apollo.perception.inference.NonMaxi"
  "mumSuppressionParameter\022K\n\021save_output_p"
  "aram\030\005 \001(\01320.apollo.perception.inference"
  ".SaveOutputParameter\022R\n\tcode_type\030\006 \001(\0162"
  "7.apollo.perception.inference.PriorBoxPa"
  "rameter.CodeType:\006CORNER\022)\n\032variance_enc"
  "oded_in_target\030\010 \001(\010:\005false\022\026\n\nkeep_top_"
  "k\030\007 \001(\005:\002-1\022\034\n\024confidence_threshold\030\t \001("
  "\002\022\030\n\tvisualize\030\n \001(\010:\005false\022\033\n\023visualize"
  "_threshold\030\013 \001(\002\022\021\n\tsave_file\030\014 \001(\t\"\251\002\n\025"
  "RegionOutputParameter\022\023\n\013num_classes\030\001 \001"
  "(\r\022N\n\tnms_param\030\002 \001(\0132;.apollo.perceptio"
  "n.inference.NonMaximumSuppressionParamet"
  "er\022\026\n\nkeep_top_k\030\003 \001(\005:\002-1\022\034\n\024confidence"
  "_threshold\030\004 \001(\002\0229\n\tanchorbox\030\005 \003(\0132&.ap"
  "ollo.perception.inference.AnchorBox\022\020\n\010n"
  "ms_type\030\006 \001(\005\022\021\n\tnms_sigma\030\007 \001(\002\022\025\n\006is_r"
  "pn\030\010 \001(\010:\005false\".\n\020DropoutParameter\022\032\n\rd"
  "ropout_ratio\030\001 \001(\002:\0030.5\"\314\001\n\022DummyDataPar"
  "ameter\022A\n\013data_filler\030\001 \003(\0132,.apollo.per"
  "ception.inference.FillerParameter\0225\n\005sha"
  "pe\030\006 \003(\0132&.apollo.perception.inference.B"
  "lobShape\022\013\n\003num\030\002 \003(\r\022\020\n\010channels\030\003 \003(\r\022"
  "\016\n\006height\030\004 \003(\r\022\r\n\005width\030\005 \003(\r\"\273\001\n\020Eltwi"
  "seParameter\022O\n\toperation\030\001 \001(\01627.apollo."
  "perception.inference.EltwiseParameter.El"
  "twiseOp:\003SUM\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable_pr"
  "od_grad\030\003 \001(\010:\004true\"\'\n\tEltwiseOp\022\010\n\004PROD"
  "\020\000\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\" \n\014ELUParameter\022\020\n\005"
  "alpha\030\001 \001(\002:\0011\"\330\001\n\016EmbedParameter\022\022\n\nnum"
  "_output\030\001 \001(\r\022\021\n\tinput_dim\030\002 \001(\r\022\027\n\tbias"
  "_term\030\003 \001(\010:\004true\022C\n\rweight_filler\030\004 \001(\013"
  "2,.apollo.perception.inference.FillerPar"
  "ameter\022A\n\013bias_filler\030\005 \001(\0132,.apollo.per"
  "ception.inference.FillerParameter\"D\n\014Exp"
  "Parameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001"
  "(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"9\n\020FlattenParame"
  "ter\022\017\n\004axis\030\001 \001(\005:\0011\022\024\n\010end_axis\030\002 \001(\005:\002"
  "-1\"O\n\021HDF5DataParameter\022\016\n\006source\030\001 \001(\t\022"
  "\022\n\nbatch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005fa"
  "lse\"(\n\023HDF5OutputParameter\022\021\n\tfile_name\030"
  "\001 \001(\t\"t\n\022HingeLossParameter\022F\n\004norm\030\001 \001("
  "\01624.apollo.perception.inference.HingeLos"
  "sParameter.Norm:\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L"
  "2\020\002\"8\n\014RepeatedList\022\021\n\tlist_path\030\001 \001(\t\022\025"
  "\n\nnum_repeat\030\002 \001(\r:\0011\"\226\002\n\020DatasetParamet"
  "er\022\016\n\006source\030\001 \001(\t\022\023\n\013root_folder\030\002 \001(\t\022"
  "\021\n\006weight\030\003 \001(\002:\0011\022M\n\004type\030\004 \001(\01629.apoll"
  "o.perception.inference.DatasetParameter."
  "DatasetType:\004LIST\022\025\n\007shuffle\030\005 \001(\010:\004true"
  "\022@\n\rrepeated_list\030\006 \003(\0132).apollo.percept"
  "ion.inference.RepeatedList\"\"\n\013DatasetTyp"
  "e\022\010\n\004LIST\020\001\022\t\n\005BLOCK\020\002\"\356\002\n\022ImageDataPara"
  "meter\022\016\n\006source\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001("
  "\r:\0011\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 "
  "\001(\010:\005false\022\025\n\nnew_height\030\t \001(\r:\0010\022\024\n\tnew"
  "_width\030\n \001(\r:\0010\022\026\n\010is_color\030\013 \001(\010:\004true\022"
  "\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\t"
  "crop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005fals"
  "e\022\025\n\013root_folder\030\014 \001(\t:\000\022\023\n\010prefetch\030\024 \001"
  "(\r:\0014\022@\n\timage_set\030d \003(\0132-.apollo.percep"
  "tion.inference.DatasetParameter\"\'\n\025Infog"
  "ainLossParameter\022\016\n\006source\030\001 \001(\t\"\367\001\n\025Inn"
  "erProductParameter\022\022\n\nnum_output\030\001 \001(\r\022\027"
  "\n\tbias_term\030\002 \001(\010:\004true\022C\n\rweight_filler"
  "\030\003 \001(\0132,.apollo.perception.inference.Fil"
  "lerParameter\022A\n\013bias_filler\030\004 \001(\0132,.apol"
  "lo.perception.inference.FillerParameter\022"
  "\017\n\004axis\030\005 \001(\005:\0011\022\030\n\ttranspose\030\006 \001(\010:\005fal"
  "se\"G\n\016InputParameter\0225\n\005shape\030\001 \003(\0132&.ap"
  "ollo.perception.inference.BlobShape\"D\n\014L"
  "ogParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002"
  " \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\344\002\n\014LRNParamet"
  "er\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002"
  ":\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022Z\n\013norm_region\030\004"
  " \001(\01624.apollo.perception.inference.LRNPa"
  "rameter.NormRegion:\017ACROSS_CHANNELS\022\014\n\001k"
  "\030\005 \001(\002:\0011\022I\n\006engine\030\006 \001(\01620.apollo.perce"
  "ption.inference.LRNParameter.Engine:\007DEF"
  "AULT\"5\n\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022"
  "\022\n\016WITHIN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT"
  "\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataPa"
  "rameter\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030"
  "\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"\354\t\n"
  "\025MultiBoxLossParameter\022`\n\rloc_loss_type\030"
  "\001 \001(\0162>.apollo.perception.inference.Mult"
  "iBoxLossParameter.LocLossType:\tSMOOTH_L1"
  "\022`\n\016conf_loss_type\030\002 \001(\0162\?.apollo.percep"
  "tion.inference.MultiBoxLossParameter.Con"
  "fLossType:\007SOFTMAX\022\025\n\nloc_weight\030\003 \001(\002:\001"
  "1\022\023\n\013num_classes\030\004 \001(\r\022\034\n\016share_location"
  "\030\005 \001(\010:\004true\022`\n\nmatch_type\030\006 \001(\0162<.apoll"
  "o.perception.inference.MultiBoxLossParam"
  "eter.MatchType:\016PER_PREDICTION\022\036\n\021overla"
  "p_threshold\030\007 \001(\002:\0030.5\022$\n\026use_prior_for_"
  "matching\030\010 \001(\010:\004true\022\036\n\023background_label"
  "_id\030\t \001(\r:\0010\022\036\n\020use_difficult_gt\030\n \001(\010:\004"
  "true\022\025\n\rdo_neg_mining\030\013 \001(\010\022\030\n\rneg_pos_r"
  "atio\030\014 \001(\002:\0013\022\030\n\013neg_overlap\030\r \001(\002:\0030.5\022"
  "R\n\tcode_type\030\016 \001(\01627.apollo.perception.i"
  "nference.PriorBoxParameter.CodeType:\006COR"
  "NER\022(\n\031encode_variance_in_target\030\020 \001(\010:\005"
  "false\022%\n\026map_object_to_agnostic\030\021 \001(\010:\005f"
  "alse\022)\n\032ignore_cross_boundary_bbox\030\022 \001(\010"
  ":\005false\022\030\n\tbp_inside\030\023 \001(\010:\005false\022`\n\013min"
  "ing_type\030\024 \001(\0162=.apollo.perception.infer"
  "ence.MultiBoxLossParameter.MiningType:\014M"
  "AX_NEGATIVE\022N\n\tnms_param\030\025 \001(\0132;.apollo."
  "perception.inference.NonMaximumSuppressi"
  "onParameter\022\027\n\013sample_size\030\026 \001(\005:\00264\022 \n\021"
  "use_prior_for_nms\030\027 \001(\010:\005false\"$\n\013LocLos"
  "sType\022\006\n\002L2\020\000\022\r\n\tSMOOTH_L1\020\001\")\n\014ConfLoss"
  "Type\022\013\n\007SOFTMAX\020\000\022\014\n\010LOGISTIC\020\001\".\n\tMatch"
  "Type\022\r\n\tBIPARTITE\020\000\022\022\n\016PER_PREDICTION\020\001\""
  ":\n\nMiningType\022\010\n\004NONE\020\000\022\020\n\014MAX_NEGATIVE\020"
  "\001\022\020\n\014HARD_EXAMPLE\020\002\"d\n\014MVNParameter\022 \n\022n"
  "ormalize_variance\030\001 \001(\010:\004true\022\036\n\017across_"
  "channels\030\002 \001(\010:\005false\022\022\n\003eps\030\003 \001(\002:\0051e-0"
  "9\"\250\001\n\022NormalizeParameter\022\034\n\016across_spati"
  "al\030\001 \001(\010:\004true\022B\n\014scale_filler\030\002 \001(\0132,.a"
  "pollo.perception.inference.FillerParamet"
  "er\022\034\n\016channel_shared\030\003 \001(\010:\004true\022\022\n\003eps\030"
  "\004 \001(\002:\0051e-10\"K\n\022ParameterParameter\0225\n\005sh"
  "ape\030\001 \001(\0132&.apollo.perception.inference."
  "BlobShape\"!\n\020PermuteParameter\022\r\n\005order\030\001"
  " \003(\r\"\303\004\n\020PoolingParameter\022K\n\004pool\030\001 \001(\0162"
  "8.apollo.perception.inference.PoolingPar"
  "ameter.PoolMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020"
  "\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013ke"
  "rnel_size\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010ker"
  "nel_w\030\006 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride"
  "_h\030\007 \001(\r\022\020\n\010stride_w\030\010 \001(\r\022M\n\006engine\030\013 \001"
  "(\01624.apollo.perception.inference.Pooling"
  "Parameter.Engine:\007DEFAULT\022\035\n\016global_pool"
  "ing\030\014 \001(\010:\005false\022Q\n\nround_mode\030\r \001(\01627.a"
  "pollo.perception.inference.PoolingParame"
  "ter.RoundMode:\004CEIL\".\n\nPoolMethod\022\007\n\003MAX"
  "\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n"
  "\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\" \n\tRoun"
  "dMode\022\010\n\004CEIL\020\000\022\t\n\005FLOOR\020\001\"F\n\016PowerParam"
  "eter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\0011"
  "\022\020\n\005shift\030\003 \001(\002:\0010\"\265\002\n\021PriorBoxParameter"
  "\022\020\n\010min_size\030\001 \003(\002\022\020\n\010max_size\030\002 \003(\002\022\024\n\014"
  "aspect_ratio\030\003 \003(\002\022\022\n\004flip\030\004 \001(\010:\004true\022\023"
  "\n\004clip\030\005 \001(\010:\005false\022\020\n\010variance\030\006 \003(\002\022\020\n"
  "\010img_size\030\007 \001(\r\022\r\n\005img_h\030\010 \001(\r\022\r\n\005img_w\030"
  "\t \001(\r\022\014\n\004step\030\n \001(\002\022\016\n\006step_h\030\013 \001(\002\022\016\n\006s"
  "tep_w\030\014 \001(\002\022\023\n\006offset\030\r \001(\002:\0030.5\"8\n\010Code"
  "Type\022\n\n\006CORNER\020\001\022\017\n\013CENTER_SIZE\020\002\022\017\n\013COR"
  "NER_SIZE\020\003\"g\n\017PythonParameter\022\016\n\006module\030"
  "\001 \001(\t\022\r\n\005layer\030\002 \001(\t\022\023\n\tparam_str\030\003 \001(\t:"
  "\000\022 \n\021share_in_parallel\030\004 \001(\010:\005false\"\354\001\n\022"
  "RecurrentParameter\022\025\n\nnum_output\030\001 \001(\r:\001"
  "0\022C\n\rweight_filler\030\002 \001(\0132,.apollo.percep"
  "tion.inference.FillerParameter\022A\n\013bias_f"
  "iller\030\003 \001(\0132,.apollo.perception.inferenc"
  "e.FillerParameter\022\031\n\ndebug_info\030\004 \001(\010:\005f"
  "alse\022\034\n\rexpose_hidden\030\005 \001(\010:\005false\"\303\001\n\022R"
  "eductionParameter\022S\n\toperation\030\001 \001(\0162;.a"
  "pollo.perception.inference.ReductionPara"
  "meter.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022"
  "\020\n\005coeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020"
  "\001\022\010\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\243\001\n\rReL"
  "UParameter\022\031\n\016negative_slope\030\001 \001(\002:\0010\022J\n"
  "\006engine\030\002 \001(\01621.apollo.perception.infere"
  "nce.ReLUParameter.Engine:\007DEFAULT\"+\n\006Eng"
  "ine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"p"
  "\n\020ReshapeParameter\0225\n\005shape\030\001 \001(\0132&.apol"
  "lo.perception.inference.BlobShape\022\017\n\004axi"
  "s\030\002 \001(\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"s\n\023ROIP"
  "oolingParameter\022\023\n\010pooled_h\030\001 \001(\r:\0010\022\023\n\010"
  "pooled_w\030\002 \001(\r:\0010\022\030\n\rspatial_scale\030\003 \001(\002"
  ":\0011\022\030\n\tuse_floor\030\n \001(\010:\005false\"\321\001\n\016ScaleP"
  "arameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 "
  "\001(\005:\0011\022<\n\006filler\030\003 \001(\0132,.apollo.percepti"
  "on.inference.FillerParameter\022\030\n\tbias_ter"
  "m\030\004 \001(\010:\005false\022A\n\013bias_filler\030\005 \001(\0132,.ap"
  "ollo.perception.inference.FillerParamete"
  "r\"\216\001\n\020SigmoidParameter\022M\n\006engine\030\001 \001(\01624"
  ".apollo.perception.inference.SigmoidPara"
  "meter.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAU"
  "LT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016SliceParam"
  "eter\022\017\n\004axis\030\003 \001(\005:\0011\022\023\n\013slice_point\030\002 \003"
  "(\r\022\024\n\tslice_dim\030\001 \001(\r:\0011\"\237\001\n\020SoftmaxPara"
  "meter\022M\n\006engine\030\001 \001(\01624.apollo.perceptio"
  "n.inference.SoftmaxParameter.Engine:\007DEF"
  "AULT\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAU"
  "LT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\210\001\n\rTanHParam"
  "eter\022J\n\006engine\030\001 \001(\01621.apollo.perception"
  ".inference.TanHParameter.Engine:\007DEFAULT"
  "\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CU"
  "DNN\020\002\"/\n\rTileParameter\022\017\n\004axis\030\001 \001(\005:\0011\022"
  "\r\n\005tiles\030\002 \001(\005\"*\n\022ThresholdParameter\022\024\n\t"
  "threshold\030\001 \001(\002:\0010\"\321\001\n\022VideoDataParamete"
  "r\022U\n\nvideo_type\030\001 \001(\01629.apollo.perceptio"
  "n.inference.VideoDataParameter.VideoType"
  ":\006WEBCAM\022\024\n\tdevice_id\030\002 \001(\005:\0010\022\022\n\nvideo_"
  "file\030\003 \001(\t\022\026\n\013skip_frames\030\004 \001(\r:\0010\"\"\n\tVi"
  "deoType\022\n\n\006WEBCAM\020\000\022\t\n\005VIDEO\020\001\"\301\002\n\023Windo"
  "wDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale\030"
  "\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_siz"
  "e\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030"
  "\006 \001(\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5\022"
  "\031\n\014bg_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fractio"
  "n\030\t \001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027\n"
  "\tcrop_mode\030\013 \001(\t:\004warp\022\033\n\014cache_images\030\014"
  " \001(\010:\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\227\002\n\014S"
  "PPParameter\022\026\n\016pyramid_height\030\001 \001(\r\022G\n\004p"
  "ool\030\002 \001(\01624.apollo.perception.inference."
  "SPPParameter.PoolMethod:\003MAX\022I\n\006engine\030\006"
  " \001(\01620.apollo.perception.inference.SPPPa"
  "rameter.Engine:\007DEFAULT\".\n\nPoolMethod\022\007\n"
  "\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engin"
  "e\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\370\031\n"
  "\020V1LayerParameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top"
  "\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\022:\n\007include\030  \003(\0132)."
  "apollo.perception.inference.NetStateRule"
  "\022:\n\007exclude\030! \003(\0132).apollo.perception.in"
  "ference.NetStateRule\022E\n\004type\030\005 \001(\01627.apo"
  "llo.perception.inference.V1LayerParamete"
  "r.LayerType\0225\n\005blobs\030\006 \003(\0132&.apollo.perc"
  "eption.inference.BlobProto\022\016\n\005param\030\351\007 \003"
  "(\t\022T\n\017blob_share_mode\030\352\007 \003(\0162:.apollo.pe"
  "rception.inference.V1LayerParameter.DimC"
  "heckMode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_dec"
  "ay\030\010 \003(\002\022\023\n\013loss_weight\030# \003(\002\022F\n\016accurac"
  "y_param\030\033 \001(\0132..apollo.perception.infere"
  "nce.AccuracyParameter\022B\n\014argmax_param\030\027 "
  "\001(\0132,.apollo.perception.inference.ArgMax"
  "Parameter\022B\n\014concat_param\030\t \001(\0132,.apollo"
  ".perception.inference.ConcatParameter\022U\n"
  "\026contrastive_loss_param\030( \001(\01325.apollo.p"
  "erception.inference.ContrastiveLossParam"
  "eter\022L\n\021convolution_param\030\n \001(\01321.apollo"
  ".perception.inference.ConvolutionParamet"
  "er\022>\n\ndata_param\030\013 \001(\0132*.apollo.percepti"
  "on.inference.DataParameter\022D\n\rdropout_pa"
  "ram\030\014 \001(\0132-.apollo.perception.inference."
  "DropoutParameter\022I\n\020dummy_data_param\030\032 \001"
  "(\0132/.apollo.perception.inference.DummyDa"
  "taParameter\022D\n\reltwise_param\030\030 \001(\0132-.apo"
  "llo.perception.inference.EltwiseParamete"
  "r\022<\n\texp_param\030) \001(\0132).apollo.perception"
  ".inference.ExpParameter\022G\n\017hdf5_data_par"
  "am\030\r \001(\0132..apollo.perception.inference.H"
  "DF5DataParameter\022K\n\021hdf5_output_param\030\016 "
  "\001(\01320.apollo.perception.inference.HDF5Ou"
  "tputParameter\022I\n\020hinge_loss_param\030\035 \001(\0132"
  "/.apollo.perception.inference.HingeLossP"
  "arameter\022I\n\020image_data_param\030\017 \001(\0132/.apo"
  "llo.perception.inference.ImageDataParame"
  "ter\022O\n\023infogain_loss_param\030\020 \001(\01322.apoll"
  "o.perception.inference.InfogainLossParam"
  "eter\022O\n\023inner_product_param\030\021 \001(\01322.apol"
  "lo.perception.inference.InnerProductPara"
  "meter\022<\n\tlrn_param\030\022 \001(\0132).apollo.percep"
  "tion.inference.LRNParameter\022K\n\021memory_da"
  "ta_param\030\026 \001(\01320.apollo.perception.infer"
  "ence.MemoryDataParameter\022<\n\tmvn_param\030\" "
  "\001(\0132).apollo.perception.inference.MVNPar"
  "ameter\022D\n\rpooling_param\030\023 \001(\0132-.apollo.p"
  "erception.inference.PoolingParameter\022@\n\013"
  "power_param\030\025 \001(\0132+.apollo.perception.in"
  "ference.PowerParameter\022>\n\nrelu_param\030\036 \001"
  "(\0132*.apollo.perception.inference.ReLUPar"
  "ameter\022D\n\rsigmoid_param\030& \001(\0132-.apollo.p"
  "erception.inference.SigmoidParameter\022D\n\r"
  "softmax_param\030\' \001(\0132-.apollo.perception."
  "inference.SoftmaxParameter\022@\n\013slice_para"
  "m\030\037 \001(\0132+.apollo.perception.inference.Sl"
  "iceParameter\022>\n\ntanh_param\030% \001(\0132*.apoll"
  "o.perception.inference.TanHParameter\022H\n\017"
  "threshold_param\030\031 \001(\0132/.apollo.perceptio"
  "n.inference.ThresholdParameter\022K\n\021window"
  "_data_param\030\024 \001(\01320.apollo.perception.in"
  "ference.WindowDataParameter\022M\n\017transform"
  "_param\030$ \001(\01324.apollo.perception.inferen"
  "ce.TransformationParameter\022>\n\nloss_param"
  "\030* \001(\0132*.apollo.perception.inference.Los"
  "sParameter\022<\n\005layer\030\001 \001(\0132-.apollo.perce"
  "ption.inference.V0LayerParameter\"\330\004\n\tLay"
  "erType\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY"
  "\020\001\022\n\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020"
  "CONTRASTIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004D"
  "ATA\020\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n"
  "\nDUMMY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELT"
  "WISE\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DAT"
  "A\020\t\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006"
  "IM2COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOS"
  "S\020\r\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMOR"
  "Y_DATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022"
  "\007\n\003MVN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU"
  "\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY"
  "_LOSS\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOF"
  "TMAX_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TAN"
  "H\020\027\022\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\"*\n\014D"
  "imCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\""
  "\353\010\n\020V0LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004ty"
  "pe\030\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010biasterm"
  "\030\004 \001(\010:\004true\022C\n\rweight_filler\030\005 \001(\0132,.ap"
  "ollo.perception.inference.FillerParamete"
  "r\022A\n\013bias_filler\030\006 \001(\0132,.apollo.percepti"
  "on.inference.FillerParameter\022\016\n\003pad\030\007 \001("
  "\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r:"
  "\0011\022\021\n\006stride\030\n \001(\r:\0011\022K\n\004pool\030\013 \001(\01628.ap"
  "ollo.perception.inference.V0LayerParamet"
  "er.PoolMethod:\003MAX\022\032\n\rdropout_ratio\030\014 \001("
  "\002:\0030.5\022\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016"
  " \001(\002:\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014\n\001k\030\026 \001(\002:\001"
  "1\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021 \001(\002:\0011\022\020\n\010m"
  "eanfile\030\022 \001(\t\022\021\n\tbatchsize\030\023 \001(\r\022\023\n\010crop"
  "size\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(\010:\005false\0225\n\005"
  "blobs\0302 \003(\0132&.apollo.perception.inferenc"
  "e.BlobProto\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_"
  "decay\0304 \003(\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det"
  "_fg_threshold\0306 \001(\002:\0030.5\022\035\n\020det_bg_thres"
  "hold\0307 \001(\002:\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002"
  ":\0040.25\022\032\n\017det_context_pad\030: \001(\r:\0010\022\033\n\rde"
  "t_crop_mode\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005"
  ":\0010\022\027\n\014new_channels\030= \001(\005:\0010\022\025\n\nnew_heig"
  "ht\030> \001(\005:\0010\022\024\n\tnew_width\030\? \001(\005:\0010\022\035\n\016shu"
  "ffle_images\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A"
  " \001(\r:\0011\022L\n\021hdf5_output_param\030\351\007 \001(\01320.ap"
  "ollo.perception.inference.HDF5OutputPara"
  "meter\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n"
  "\nSTOCHASTIC\020\002\"m\n\016PReLUParameter\022<\n\006fille"
  "r\030\001 \001(\0132,.apollo.perception.inference.Fi"
  "llerParameter\022\035\n\016channel_shared\030\002 \001(\010:\005f"
  "alse\"j\n\020PaddingParameter\022\020\n\005pad_t\030\001 \001(\r:"
  "\0010\022\020\n\005pad_b\030\002 \001(\r:\0010\022\020\n\005pad_l\030\003 \001(\r:\0010\022\020"
  "\n\005pad_r\030\004 \001(\r:\0010\022\016\n\003val\030\005 \001(\002:\0010\"\270\001\n\021Yol"
  "oLossParameter\022\\\n\rreg_loss_type\030\001 \001(\0162:."
  "apollo.perception.inference.YoloLossPara"
  "meter.RegLossType:\tSMOOTH_L1\022\027\n\013target_a"
  "xis\030\002 \001(\005:\002-1\",\n\013RegLossType\022\006\n\002L2\020\000\022\006\n\002"
  "L1\020\001\022\r\n\tSMOOTH_L1\020\002\"%\n\021YoloDumpParameter"
  "\022\020\n\010dump_dir\030\001 \001(\t\"P\n\024YoloAnchorsParamet"
  "er\022\024\n\014anchors_file\030\001 \001(\t\022\020\n\005ref_w\030\002 \001(\005:"
  "\0011\022\020\n\005ref_h\030\003 \001(\005:\0011\"\204\001\n\023DimensionStatis"
  "tics\022\021\n\006mean_h\030\001 \001(\002:\0010\022\021\n\006mean_w\030\002 \001(\002:"
  "\0010\022\021\n\006mean_l\030\003 \001(\002:\0010\022\020\n\005std_h\030\004 \001(\002:\0011\022"
  "\020\n\005std_w\030\005 \001(\002:\0011\022\020\n\005std_l\030\006 \001(\002:\0011\"\340\002\n\023"
  "YoloTargetParameter\022\031\n\016neg_rois_ratio\030\001 "
  "\001(\002:\0011\022\032\n\rign_threshold\030\002 \001(\002:\0030.6\022\032\n\rne"
  "g_threshold\030\003 \001(\002:\0030.1\022\030\n\nmin_height\030\004 \001"
  "(\002:\0040.05\022\030\n\nbias_match\030\005 \001(\010:\004true\022\025\n\007re"
  "score\030\006 \001(\010:\004true\022\022\n\007ori_cyc\030\007 \001(\005:\0011\022\026\n"
  "\nobj_weight\030\010 \001(\002:\00210\022\027\n\014noobj_weight\030\t "
  "\001(\002:\0011\022\026\n\013num_classes\030\n \001(\005:\0010\022N\n\024dimens"
  "ion_statistics\030\013 \003(\01320.apollo.perception"
  ".inference.DimensionStatistics\"\217\004\n\027Regio"
  "nProposalParameter\0229\n\tanchorbox\030\001 \003(\0132&."
  "apollo.perception.inference.AnchorBox\022\022\n"
  "\nthresholds\030\002 \003(\002\022\034\n\021orientation_scale\030\016"
  " \001(\002:\0010\022\024\n\014object_scale\030\003 \001(\r\022\026\n\016noobjec"
  "t_scale\030\004 \001(\r\022\023\n\013class_scale\030\005 \001(\r\022\023\n\013co"
  "ord_scale\030\006 \001(\r\022\016\n\006jitter\030\007 \001(\002\022\014\n\004bias\030"
  "\010 \001(\002\022\017\n\007rescore\030\t \001(\010\022\023\n\013num_classes\030\n "
  "\001(\r\022\022\n\nbias_match\030\013 \001(\010\022\021\n\tthreshold\030\014 \001"
  "(\002\022\030\n\013tricky_iter\030\r \001(\r:\003400\022N\n\tnms_para"
  "m\030\017 \001(\0132;.apollo.perception.inference.No"
  "nMaximumSuppressionParameter\022\026\n\nkeep_top"
  "_k\030\020 \001(\005:\002-1\022\025\n\rpos_threshold\030\021 \001(\002\022\025\n\rn"
  "eg_threshold\030\022 \001(\002\022\024\n\tneg_ratio\030\023 \001(\005:\0013"
  "\"\223\005\n\017RegionParameter\0229\n\tanchorbox\030\001 \003(\0132"
  "&.apollo.perception.inference.AnchorBox\022"
  "\022\n\nthresholds\030\002 \003(\002\022\034\n\021orientation_scale"
  "\030\016 \001(\002:\0010\022\032\n\017dimension_scale\030\017 \001(\002:\0010\022\026\n"
  "\013front_scale\030\023 \001(\002:\0010\022\025\n\nrear_scale\030\024 \001("
  "\002:\0010\022\024\n\014object_scale\030\003 \001(\r\022\026\n\016noobject_s"
  "cale\030\004 \001(\r\022\023\n\013class_scale\030\005 \001(\002\022\023\n\013coord"
  "_scale\030\006 \001(\r\022\016\n\006jitter\030\007 \001(\002\022\014\n\004bias\030\010 \001"
  "(\002\022\017\n\007rescore\030\t \001(\010\022\023\n\013num_classes\030\n \001(\r"
  "\022\022\n\nbias_match\030\013 \001(\010\022\021\n\tthreshold\030\014 \001(\002\022"
  "\030\n\013tricky_iter\030\r \001(\r:\003400\022\032\n\013use_l1_loss"
  "\030\020 \001(\010:\005false\022 \n\021use_twice_softmax\030\021 \001(\010"
  ":\005false\022#\n\024is_anchor_normalized\030\022 \001(\010:\005f"
  "alse\022\022\n\nori_enable\030\025 \003(\010\022\036\n\nanchorfile\030\026"
  " \001(\t:\nanchor.txt\022\036\n\017use_side_box_v2\030\027 \001("
  "\010:\005false\022\036\n\017use_side_box_v3\030\030 \001(\010:\005false"
  "\022\024\n\tori_cycle\030\031 \001(\005:\0011\"!\n\tAnchorBox\022\t\n\001w"
  "\030\001 \001(\002\022\t\n\001h\030\002 \001(\002\" \n\016ReorgParameter\022\016\n\006s"
  "tride\030\001 \001(\r\"7\n\020BBoxRegParameter\022\021\n\tbbox_"
  "mean\030\001 \003(\002\022\020\n\010bbox_std\030\002 \003(\002\"\241\002\n\027DFMBPSR"
  "OIAlignParameter\022\022\n\nheat_map_a\030\001 \001(\002\022\022\n\n"
  "output_dim\030\002 \001(\005\022\024\n\014group_height\030\003 \001(\005\022\023"
  "\n\013group_width\030\004 \001(\005\022\025\n\rpooled_height\030\005 \001"
  "(\005\022\024\n\014pooled_width\030\006 \001(\005\022\021\n\tpad_ratio\030\007 "
  "\001(\002\022\027\n\017sample_per_part\030\010 \001(\005\022\024\n\ttrans_st"
  "d\030\t \001(\002:\0010\022\026\n\013part_height\030\n \001(\005:\0010\022\025\n\npa"
  "rt_width\030\013 \001(\005:\0010\022\025\n\nheat_map_b\030\014 \001(\002:\0010"
  "\"\315\004\n\033DetectionOutputSSDParameter\022\022\n\nheat"
  "_map_a\030\001 \001(\002\022\025\n\nmin_size_h\030\002 \001(\002:\0012\022\025\n\nm"
  "in_size_w\030\003 \001(\002:\0012\022o\n\rmin_size_mode\030\004 \001("
  "\0162F.apollo.perception.inference.Detectio"
  "nOutputSSDParameter.MIN_SIZE_MODE:\020HEIGH"
  "T_AND_WIDTH\022\037\n\024threshold_objectness\030\005 \001("
  "\002:\0010\022I\n\020gen_anchor_param\030\006 \001(\0132/.apollo."
  "perception.inference.GenAnchorParameter\022"
  "%\n\026refine_out_of_map_bbox\030\007 \001(\010:\005false\022\?"
  "\n\tnms_param\030\010 \001(\0132,.apollo.perception.in"
  "ference.NMSSSDParameter\022\024\n\tnum_class\030\t \001"
  "(\r:\0011\022(\n\031rpn_proposal_output_score\030\n \001(\010"
  ":\005false\022\030\n\020regress_agnostic\030\013 \001(\010\022\021\n\tthr"
  "eshold\030\014 \003(\002\":\n\rMIN_SIZE_MODE\022\024\n\020HEIGHT_"
  "AND_WIDTH\020\000\022\023\n\017HEIGHT_OR_WIDTH\020\001\"\306\002\n\017NMS"
  "SSDParameter\022\026\n\010need_nms\030\001 \001(\010:\004true\022\025\n\r"
  "overlap_ratio\030\002 \003(\002\022\r\n\005top_n\030\003 \003(\r\022\030\n\tad"
  "d_score\030\004 \001(\010:\005false\022\027\n\017max_candidate_n\030"
  "\005 \003(\005\022\024\n\014use_soft_nms\030\006 \003(\010\022 \n\021nms_among"
  "_classes\030\007 \001(\010:\005false\022\016\n\006voting\030\010 \003(\010\022\020\n"
  "\010vote_iou\030\t \003(\002\022!\n\026force_identity_iou_th"
  "r\030\n \001(\002:\0011\022!\n\026force_imparity_iou_thr\030\013 \001"
  "(\002:\0010\022\"\n\026nms_gpu_max_n_per_time\030\014 \001(\005:\002-"
  "1\"A\n\022GenAnchorParameter\022\024\n\014anchor_width\030"
  "\001 \003(\002\022\025\n\ranchor_height\030\002 \003(\002*\034\n\005Phase\022\t\n"
  "\005TRAIN\020\000\022\010\n\004TEST\020\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2frt_2eproto = {
    false, false, 30058, descriptor_table_protodef_modules_2fperception_2fproto_2frt_2eproto,
    "modules/perception/proto/rt.proto",
    &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once, nullptr, 0, 103,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2frt_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2frt_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2frt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2frt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2frt_2eproto(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
namespace apollo {
namespace perception {
namespace inference {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmitConstraint_EmitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[0];
}
bool EmitConstraint_EmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmitConstraint_EmitType EmitConstraint::CENTER;
constexpr EmitConstraint_EmitType EmitConstraint::MIN_OVERLAP;
constexpr EmitConstraint_EmitType EmitConstraint::EmitType_MIN;
constexpr EmitConstraint_EmitType EmitConstraint::EmitType_MAX;
constexpr int EmitConstraint::EmitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[1];
}
bool AnnotatedDatum_AnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX3D;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX3DFR;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::AnnotationType_MIN;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::AnnotationType_MAX;
constexpr int AnnotatedDatum::AnnotationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[2];
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FillerParameter_VarianceNorm FillerParameter::FAN_IN;
constexpr FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
constexpr FillerParameter_VarianceNorm FillerParameter::AVERAGE;
constexpr FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
constexpr FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
constexpr int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[3];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParamSpec_DimCheckMode ParamSpec::STRICT;
constexpr ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
constexpr ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
constexpr ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
constexpr int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Resize_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[4];
}
bool ResizeParameter_Resize_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResizeParameter_Resize_mode ResizeParameter::WARP;
constexpr ResizeParameter_Resize_mode ResizeParameter::FIT_SMALL_SIZE;
constexpr ResizeParameter_Resize_mode ResizeParameter::FIT_LARGE_SIZE_AND_PAD;
constexpr ResizeParameter_Resize_mode ResizeParameter::Resize_mode_MIN;
constexpr ResizeParameter_Resize_mode ResizeParameter::Resize_mode_MAX;
constexpr int ResizeParameter::Resize_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Pad_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[5];
}
bool ResizeParameter_Pad_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResizeParameter_Pad_mode ResizeParameter::CONSTANT;
constexpr ResizeParameter_Pad_mode ResizeParameter::MIRRORED;
constexpr ResizeParameter_Pad_mode ResizeParameter::REPEAT_NEAREST;
constexpr ResizeParameter_Pad_mode ResizeParameter::Pad_mode_MIN;
constexpr ResizeParameter_Pad_mode ResizeParameter::Pad_mode_MAX;
constexpr int ResizeParameter::Pad_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Interp_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[6];
}
bool ResizeParameter_Interp_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResizeParameter_Interp_mode ResizeParameter::LINEAR;
constexpr ResizeParameter_Interp_mode ResizeParameter::AREA;
constexpr ResizeParameter_Interp_mode ResizeParameter::NEAREST;
constexpr ResizeParameter_Interp_mode ResizeParameter::CUBIC;
constexpr ResizeParameter_Interp_mode ResizeParameter::LANCZOS4;
constexpr ResizeParameter_Interp_mode ResizeParameter::Interp_mode_MIN;
constexpr ResizeParameter_Interp_mode ResizeParameter::Interp_mode_MAX;
constexpr int ResizeParameter::Interp_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[7];
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LossParameter_NormalizationMode LossParameter::FULL;
constexpr LossParameter_NormalizationMode LossParameter::VALID;
constexpr LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
constexpr LossParameter_NormalizationMode LossParameter::NONE;
constexpr LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
constexpr LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
constexpr int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[8];
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
constexpr ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
constexpr ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
constexpr ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
constexpr ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
constexpr int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataParameter_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[9];
}
bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataParameter_DB DataParameter::LEVELDB;
constexpr DataParameter_DB DataParameter::LMDB;
constexpr DataParameter_DB DataParameter::DB_MIN;
constexpr DataParameter_DB DataParameter::DB_MAX;
constexpr int DataParameter::DB_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[10];
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
constexpr int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[11];
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HingeLossParameter_Norm HingeLossParameter::L1;
constexpr HingeLossParameter_Norm HingeLossParameter::L2;
constexpr HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
constexpr HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
constexpr int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetParameter_DatasetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[12];
}
bool DatasetParameter_DatasetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DatasetParameter_DatasetType DatasetParameter::LIST;
constexpr DatasetParameter_DatasetType DatasetParameter::BLOCK;
constexpr DatasetParameter_DatasetType DatasetParameter::DatasetType_MIN;
constexpr DatasetParameter_DatasetType DatasetParameter::DatasetType_MAX;
constexpr int DatasetParameter::DatasetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[13];
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
constexpr LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
constexpr LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
constexpr LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
constexpr int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[14];
}
bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LRNParameter_Engine LRNParameter::DEFAULT;
constexpr LRNParameter_Engine LRNParameter::CAFFE;
constexpr LRNParameter_Engine LRNParameter::CUDNN;
constexpr LRNParameter_Engine LRNParameter::Engine_MIN;
constexpr LRNParameter_Engine LRNParameter::Engine_MAX;
constexpr int LRNParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[15];
}
bool MultiBoxLossParameter_LocLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::L2;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::SMOOTH_L1;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::LocLossType_MIN;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::LocLossType_MAX;
constexpr int MultiBoxLossParameter::LocLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[16];
}
bool MultiBoxLossParameter_ConfLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::SOFTMAX;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::LOGISTIC;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::ConfLossType_MIN;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::ConfLossType_MAX;
constexpr int MultiBoxLossParameter::ConfLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[17];
}
bool MultiBoxLossParameter_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::BIPARTITE;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::PER_PREDICTION;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::MatchType_MIN;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::MatchType_MAX;
constexpr int MultiBoxLossParameter::MatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MiningType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[18];
}
bool MultiBoxLossParameter_MiningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::NONE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MAX_NEGATIVE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::HARD_EXAMPLE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MiningType_MIN;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MiningType_MAX;
constexpr int MultiBoxLossParameter::MiningType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[19];
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PoolingParameter_PoolMethod PoolingParameter::MAX;
constexpr PoolingParameter_PoolMethod PoolingParameter::AVE;
constexpr PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
constexpr PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
constexpr PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
constexpr int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[20];
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PoolingParameter_Engine PoolingParameter::DEFAULT;
constexpr PoolingParameter_Engine PoolingParameter::CAFFE;
constexpr PoolingParameter_Engine PoolingParameter::CUDNN;
constexpr PoolingParameter_Engine PoolingParameter::Engine_MIN;
constexpr PoolingParameter_Engine PoolingParameter::Engine_MAX;
constexpr int PoolingParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_RoundMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[21];
}
bool PoolingParameter_RoundMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PoolingParameter_RoundMode PoolingParameter::CEIL;
constexpr PoolingParameter_RoundMode PoolingParameter::FLOOR;
constexpr PoolingParameter_RoundMode PoolingParameter::RoundMode_MIN;
constexpr PoolingParameter_RoundMode PoolingParameter::RoundMode_MAX;
constexpr int PoolingParameter::RoundMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorBoxParameter_CodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[22];
}
bool PriorBoxParameter_CodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CORNER;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CENTER_SIZE;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CORNER_SIZE;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CodeType_MIN;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CodeType_MAX;
constexpr int PriorBoxParameter::CodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[23];
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReductionParameter_ReductionOp ReductionParameter::SUM;
constexpr ReductionParameter_ReductionOp ReductionParameter::ASUM;
constexpr ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
constexpr ReductionParameter_ReductionOp ReductionParameter::MEAN;
constexpr ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
constexpr ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
constexpr int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[24];
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReLUParameter_Engine ReLUParameter::DEFAULT;
constexpr ReLUParameter_Engine ReLUParameter::CAFFE;
constexpr ReLUParameter_Engine ReLUParameter::CUDNN;
constexpr ReLUParameter_Engine ReLUParameter::Engine_MIN;
constexpr ReLUParameter_Engine ReLUParameter::Engine_MAX;
constexpr int ReLUParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[25];
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SigmoidParameter_Engine SigmoidParameter::DEFAULT;
constexpr SigmoidParameter_Engine SigmoidParameter::CAFFE;
constexpr SigmoidParameter_Engine SigmoidParameter::CUDNN;
constexpr SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
constexpr SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
constexpr int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[26];
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
constexpr SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
constexpr SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
constexpr SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
constexpr SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
constexpr int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TanHParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[27];
}
bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TanHParameter_Engine TanHParameter::DEFAULT;
constexpr TanHParameter_Engine TanHParameter::CAFFE;
constexpr TanHParameter_Engine TanHParameter::CUDNN;
constexpr TanHParameter_Engine TanHParameter::Engine_MIN;
constexpr TanHParameter_Engine TanHParameter::Engine_MAX;
constexpr int TanHParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoDataParameter_VideoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[28];
}
bool VideoDataParameter_VideoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VideoDataParameter_VideoType VideoDataParameter::WEBCAM;
constexpr VideoDataParameter_VideoType VideoDataParameter::VIDEO;
constexpr VideoDataParameter_VideoType VideoDataParameter::VideoType_MIN;
constexpr VideoDataParameter_VideoType VideoDataParameter::VideoType_MAX;
constexpr int VideoDataParameter::VideoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[29];
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SPPParameter_PoolMethod SPPParameter::MAX;
constexpr SPPParameter_PoolMethod SPPParameter::AVE;
constexpr SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
constexpr SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
constexpr SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
constexpr int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[30];
}
bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SPPParameter_Engine SPPParameter::DEFAULT;
constexpr SPPParameter_Engine SPPParameter::CAFFE;
constexpr SPPParameter_Engine SPPParameter::CUDNN;
constexpr SPPParameter_Engine SPPParameter::Engine_MIN;
constexpr SPPParameter_Engine SPPParameter::Engine_MAX;
constexpr int SPPParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[31];
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr V1LayerParameter_LayerType V1LayerParameter::NONE;
constexpr V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
constexpr V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
constexpr V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
constexpr V1LayerParameter_LayerType V1LayerParameter::BNLL;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONCAT;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
constexpr V1LayerParameter_LayerType V1LayerParameter::DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
constexpr V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
constexpr V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
constexpr V1LayerParameter_LayerType V1LayerParameter::EXP;
constexpr V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
constexpr V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
constexpr V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::IM2COL;
constexpr V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
constexpr V1LayerParameter_LayerType V1LayerParameter::LRN;
constexpr V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::MVN;
constexpr V1LayerParameter_LayerType V1LayerParameter::POOLING;
constexpr V1LayerParameter_LayerType V1LayerParameter::POWER;
constexpr V1LayerParameter_LayerType V1LayerParameter::RELU;
constexpr V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
constexpr V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::SILENCE;
constexpr V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
constexpr V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::SPLIT;
constexpr V1LayerParameter_LayerType V1LayerParameter::SLICE;
constexpr V1LayerParameter_LayerType V1LayerParameter::TANH;
constexpr V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
constexpr V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
constexpr V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
constexpr int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[32];
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
constexpr int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[33];
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr V0LayerParameter_PoolMethod V0LayerParameter::MAX;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::AVE;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
constexpr int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YoloLossParameter_RegLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[34];
}
bool YoloLossParameter_RegLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr YoloLossParameter_RegLossType YoloLossParameter::L2;
constexpr YoloLossParameter_RegLossType YoloLossParameter::L1;
constexpr YoloLossParameter_RegLossType YoloLossParameter::SMOOTH_L1;
constexpr YoloLossParameter_RegLossType YoloLossParameter::RegLossType_MIN;
constexpr YoloLossParameter_RegLossType YoloLossParameter::RegLossType_MAX;
constexpr int YoloLossParameter::RegLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectionOutputSSDParameter_MIN_SIZE_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[35];
}
bool DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::HEIGHT_AND_WIDTH;
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::HEIGHT_OR_WIDTH;
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::MIN_SIZE_MODE_MIN;
constexpr DetectionOutputSSDParameter_MIN_SIZE_MODE DetectionOutputSSDParameter::MIN_SIZE_MODE_MAX;
constexpr int DetectionOutputSSDParameter::MIN_SIZE_MODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[36];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BlobShape::_Internal {
 public:
};

BlobShape::BlobShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.dim_){from._impl_.dim_}
    , /*decltype(_impl_._dim_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BlobShape)
}

inline void BlobShape::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dim_){arena}
    , /*decltype(_impl_._dim_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BlobShape)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dim_.~RepeatedField();
}

void BlobShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BlobShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobShape::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dim = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlobShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BlobShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    int byte_size = _impl_._dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BlobShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlobShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobShape::GetClassData() const { return &_class_data_; }

void BlobShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlobShape *>(to)->MergeFrom(
      static_cast<const BlobShape &>(from));
}


void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.dim_.MergeFrom(from._impl_.dim_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::InternalSwap(BlobShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dim_.InternalSwap(&other->_impl_.dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[0]);
}

// ===================================================================

class BlobProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobProto>()._impl_._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const BlobProto* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::BlobShape&
BlobProto::_Internal::shape(const BlobProto* msg) {
  return *msg->_impl_.shape_;
}
BlobProto::BlobProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.diff_){from._impl_.diff_}
    , decltype(_impl_.double_data_){from._impl_.double_data_}
    , decltype(_impl_.double_diff_){from._impl_.double_diff_}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.num_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _impl_.shape_ = new ::apollo::perception::inference::BlobShape(*from._impl_.shape_);
  }
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BlobProto)
}

inline void BlobProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.diff_){arena}
    , decltype(_impl_.double_data_){arena}
    , decltype(_impl_.double_diff_){arena}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.channels_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.width_){0}
  };
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BlobProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.diff_.~RepeatedField();
  _impl_.double_data_.~RepeatedField();
  _impl_.double_diff_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void BlobProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BlobProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.diff_.Clear();
  _impl_.double_data_.Clear();
  _impl_.double_diff_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channels = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float data = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float diff = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BlobShape shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_data = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_double_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_diff = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_double_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlobProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BlobProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_data(), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->_internal_diff_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_diff(), target);
  }

  // optional .apollo.perception.inference.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->_internal_double_data_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_double_data(), target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->_internal_double_diff_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_double_diff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BlobProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_diff_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.BlobShape shape = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
    }

    // optional int32 channels = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
    }

    // optional int32 height = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 width = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlobProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobProto::GetClassData() const { return &_class_data_; }

void BlobProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlobProto *>(to)->MergeFrom(
      static_cast<const BlobProto &>(from));
}


void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_.MergeFrom(from._impl_.data_);
  _impl_.diff_.MergeFrom(from._impl_.diff_);
  _impl_.double_data_.MergeFrom(from._impl_.double_data_);
  _impl_.double_diff_.MergeFrom(from._impl_.double_diff_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.num_ = from._impl_.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.channels_ = from._impl_.channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.width_ = from._impl_.width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  return true;
}

void BlobProto::InternalSwap(BlobProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.diff_.InternalSwap(&other->_impl_.diff_);
  _impl_.double_data_.InternalSwap(&other->_impl_.double_data_);
  _impl_.double_diff_.InternalSwap(&other->_impl_.double_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlobProto, _impl_.width_)
      + sizeof(BlobProto::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(BlobProto, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[1]);
}

// ===================================================================

class Datum::_Internal {
 public:
  using HasBits = decltype(std::declval<Datum>()._impl_._has_bits_);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Datum::Datum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.Datum)
}
Datum::Datum(const Datum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.float_data_){from._impl_.float_data_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.encoded_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _impl_.data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channels_, &from._impl_.channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encoded_) -
    reinterpret_cast<char*>(&_impl_.channels_)) + sizeof(_impl_.encoded_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Datum)
}

inline void Datum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.float_data_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.channels_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.label_){0}
    , decltype(_impl_.encoded_){false}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Datum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Datum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.float_data_.~RepeatedField();
  _impl_.data_.Destroy();
}

void Datum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Datum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.float_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.channels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.encoded_) -
        reinterpret_cast<char*>(&_impl_.channels_)) + sizeof(_impl_.encoded_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Datum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_label(&has_bits);
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float float_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_data(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool encoded = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_encoded(&has_bits);
          _impl_.encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Datum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Datum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0, n = this->_internal_float_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Datum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_float_data_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 channels = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional bool encoded = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Datum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Datum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Datum::GetClassData() const { return &_class_data_; }

void Datum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Datum *>(to)->MergeFrom(
      static_cast<const Datum &>(from));
}


void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.float_data_.MergeFrom(from._impl_.float_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.channels_ = from._impl_.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.label_ = from._impl_.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.encoded_ = from._impl_.encoded_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::InternalSwap(Datum* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.float_data_.InternalSwap(&other->_impl_.float_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Datum, _impl_.encoded_)
      + sizeof(Datum::_impl_.encoded_)
      - PROTOBUF_FIELD_OFFSET(Datum, _impl_.channels_)>(
          reinterpret_cast<char*>(&_impl_.channels_),
          reinterpret_cast<char*>(&other->_impl_.channels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Datum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[2]);
}

// ===================================================================

class LabelMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelMapItem>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LabelMapItem::LabelMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LabelMapItem)
}
LabelMapItem::LabelMapItem(const LabelMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.label_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    _impl_.display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  _impl_.label_ = from._impl_.label_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LabelMapItem)
}

inline void LabelMapItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.label_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LabelMapItem::~LabelMapItem() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LabelMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.display_name_.Destroy();
}

void LabelMapItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LabelMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.label_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LabelMapItem.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_label(&has_bits);
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LabelMapItem.display_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LabelMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LabelMapItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 label = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_label(), target);
  }

  // optional string display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LabelMapItem.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LabelMapItem)
  return target;
}

size_t LabelMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LabelMapItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string display_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional int32 label = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelMapItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelMapItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelMapItem::GetClassData() const { return &_class_data_; }

void LabelMapItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelMapItem *>(to)->MergeFrom(
      static_cast<const LabelMapItem &>(from));
}


void LabelMapItem::MergeFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LabelMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.label_ = from._impl_.label_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelMapItem::CopyFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LabelMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMapItem::IsInitialized() const {
  return true;
}

void LabelMapItem::InternalSwap(LabelMapItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  swap(_impl_.label_, other->_impl_.label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelMapItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[3]);
}

// ===================================================================

class LabelMap::_Internal {
 public:
};

LabelMap::LabelMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LabelMap)
}
LabelMap::LabelMap(const LabelMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LabelMap)
}

inline void LabelMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LabelMap::~LabelMap() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LabelMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void LabelMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabelMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LabelMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.LabelMapItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LabelMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LabelMap)
  return target;
}

size_t LabelMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LabelMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelMap::GetClassData() const { return &_class_data_; }

void LabelMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelMap *>(to)->MergeFrom(
      static_cast<const LabelMap &>(from));
}


void LabelMap::MergeFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LabelMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.item_.MergeFrom(from._impl_.item_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelMap::CopyFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LabelMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMap::IsInitialized() const {
  return true;
}

void LabelMap::InternalSwap(LabelMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[4]);
}

// ===================================================================

class Sampler::_Internal {
 public:
  using HasBits = decltype(std::declval<Sampler>()._impl_._has_bits_);
  static void set_has_min_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Sampler::Sampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.Sampler)
}
Sampler::Sampler(const Sampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_scale_){}
    , decltype(_impl_.max_scale_){}
    , decltype(_impl_.min_aspect_ratio_){}
    , decltype(_impl_.max_aspect_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_scale_, &from._impl_.min_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_aspect_ratio_) -
    reinterpret_cast<char*>(&_impl_.min_scale_)) + sizeof(_impl_.max_aspect_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Sampler)
}

inline void Sampler::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_scale_){1}
    , decltype(_impl_.max_scale_){1}
    , decltype(_impl_.min_aspect_ratio_){1}
    , decltype(_impl_.max_aspect_ratio_){1}
  };
}

Sampler::~Sampler() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Sampler)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sampler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sampler::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sampler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Sampler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.min_scale_ = 1;
    _impl_.max_scale_ = 1;
    _impl_.min_aspect_ratio_ = 1;
    _impl_.max_aspect_ratio_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sampler::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_min_scale(&has_bits);
          _impl_.min_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_scale(&has_bits);
          _impl_.max_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          _impl_.min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          _impl_.max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sampler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Sampler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float min_scale = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_scale(), target);
  }

  // optional float max_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_scale(), target);
  }

  // optional float min_aspect_ratio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_aspect_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Sampler)
  return target;
}

size_t Sampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Sampler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_scale = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_scale = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sampler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sampler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sampler::GetClassData() const { return &_class_data_; }

void Sampler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sampler *>(to)->MergeFrom(
      static_cast<const Sampler &>(from));
}


void Sampler::MergeFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Sampler)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.min_scale_ = from._impl_.min_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_scale_ = from._impl_.max_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_aspect_ratio_ = from._impl_.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_aspect_ratio_ = from._impl_.max_aspect_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sampler::CopyFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sampler::IsInitialized() const {
  return true;
}

void Sampler::InternalSwap(Sampler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.min_scale_, other->_impl_.min_scale_);
  swap(_impl_.max_scale_, other->_impl_.max_scale_);
  swap(_impl_.min_aspect_ratio_, other->_impl_.min_aspect_ratio_);
  swap(_impl_.max_aspect_ratio_, other->_impl_.max_aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sampler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[5]);
}

// ===================================================================

class SampleConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<SampleConstraint>()._impl_._has_bits_);
  static void set_has_min_jaccard_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_jaccard_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_sample_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_sample_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_object_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_object_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SampleConstraint::SampleConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SampleConstraint)
}
SampleConstraint::SampleConstraint(const SampleConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_type_){from._impl_.balance_type_}
    , decltype(_impl_.min_jaccard_overlap_){}
    , decltype(_impl_.max_jaccard_overlap_){}
    , decltype(_impl_.min_sample_coverage_){}
    , decltype(_impl_.max_sample_coverage_){}
    , decltype(_impl_.min_object_coverage_){}
    , decltype(_impl_.max_object_coverage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_jaccard_overlap_, &from._impl_.min_jaccard_overlap_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_object_coverage_) -
    reinterpret_cast<char*>(&_impl_.min_jaccard_overlap_)) + sizeof(_impl_.max_object_coverage_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SampleConstraint)
}

inline void SampleConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_type_){arena}
    , decltype(_impl_.min_jaccard_overlap_){0}
    , decltype(_impl_.max_jaccard_overlap_){0}
    , decltype(_impl_.min_sample_coverage_){0}
    , decltype(_impl_.max_sample_coverage_){0}
    , decltype(_impl_.min_object_coverage_){0}
    , decltype(_impl_.max_object_coverage_){0}
  };
}

SampleConstraint::~SampleConstraint() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SampleConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SampleConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.balance_type_.~RepeatedField();
}

void SampleConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SampleConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SampleConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balance_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.min_jaccard_overlap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_object_coverage_) -
        reinterpret_cast<char*>(&_impl_.min_jaccard_overlap_)) + sizeof(_impl_.max_object_coverage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SampleConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_jaccard_overlap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_min_jaccard_overlap(&has_bits);
          _impl_.min_jaccard_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_jaccard_overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_jaccard_overlap(&has_bits);
          _impl_.max_jaccard_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_sample_coverage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_sample_coverage(&has_bits);
          _impl_.min_sample_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_sample_coverage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_sample_coverage(&has_bits);
          _impl_.max_sample_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_object_coverage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_min_object_coverage(&has_bits);
          _impl_.min_object_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_object_coverage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_max_object_coverage(&has_bits);
          _impl_.max_object_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 balance_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_balance_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_balance_type(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SampleConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SampleConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float min_jaccard_overlap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_jaccard_overlap(), target);
  }

  // optional float max_jaccard_overlap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_jaccard_overlap(), target);
  }

  // optional float min_sample_coverage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_sample_coverage(), target);
  }

  // optional float max_sample_coverage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_sample_coverage(), target);
  }

  // optional float min_object_coverage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_min_object_coverage(), target);
  }

  // optional float max_object_coverage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_max_object_coverage(), target);
  }

  // repeated int32 balance_type = 7;
  for (int i = 0, n = this->_internal_balance_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_balance_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SampleConstraint)
  return target;
}

size_t SampleConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SampleConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 balance_type = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.balance_type_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_balance_type_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float min_jaccard_overlap = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_jaccard_overlap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_sample_coverage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_sample_coverage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float min_object_coverage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float max_object_coverage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SampleConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SampleConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SampleConstraint::GetClassData() const { return &_class_data_; }

void SampleConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SampleConstraint *>(to)->MergeFrom(
      static_cast<const SampleConstraint &>(from));
}


void SampleConstraint::MergeFrom(const SampleConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SampleConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.balance_type_.MergeFrom(from._impl_.balance_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.min_jaccard_overlap_ = from._impl_.min_jaccard_overlap_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_jaccard_overlap_ = from._impl_.max_jaccard_overlap_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_sample_coverage_ = from._impl_.min_sample_coverage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_sample_coverage_ = from._impl_.max_sample_coverage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.min_object_coverage_ = from._impl_.min_object_coverage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_object_coverage_ = from._impl_.max_object_coverage_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SampleConstraint::CopyFrom(const SampleConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SampleConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleConstraint::IsInitialized() const {
  return true;
}

void SampleConstraint::InternalSwap(SampleConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.balance_type_.InternalSwap(&other->_impl_.balance_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SampleConstraint, _impl_.max_object_coverage_)
      + sizeof(SampleConstraint::_impl_.max_object_coverage_)
      - PROTOBUF_FIELD_OFFSET(SampleConstraint, _impl_.min_jaccard_overlap_)>(
          reinterpret_cast<char*>(&_impl_.min_jaccard_overlap_),
          reinterpret_cast<char*>(&other->_impl_.min_jaccard_overlap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[6]);
}

// ===================================================================

class BatchSampler::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchSampler>()._impl_._has_bits_);
  static void set_has_use_original_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::Sampler& sampler(const BatchSampler* msg);
  static void set_has_sampler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::SampleConstraint& sample_constraint(const BatchSampler* msg);
  static void set_has_sample_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_trials(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::Sampler&
BatchSampler::_Internal::sampler(const BatchSampler* msg) {
  return *msg->_impl_.sampler_;
}
const ::apollo::perception::inference::SampleConstraint&
BatchSampler::_Internal::sample_constraint(const BatchSampler* msg) {
  return *msg->_impl_.sample_constraint_;
}
BatchSampler::BatchSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BatchSampler)
}
BatchSampler::BatchSampler(const BatchSampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sampler_){nullptr}
    , decltype(_impl_.sample_constraint_){nullptr}
    , decltype(_impl_.max_sample_){}
    , decltype(_impl_.use_original_image_){}
    , decltype(_impl_.max_trials_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sampler()) {
    _impl_.sampler_ = new ::apollo::perception::inference::Sampler(*from._impl_.sampler_);
  }
  if (from._internal_has_sample_constraint()) {
    _impl_.sample_constraint_ = new ::apollo::perception::inference::SampleConstraint(*from._impl_.sample_constraint_);
  }
  ::memcpy(&_impl_.max_sample_, &from._impl_.max_sample_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_trials_) -
    reinterpret_cast<char*>(&_impl_.max_sample_)) + sizeof(_impl_.max_trials_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BatchSampler)
}

inline void BatchSampler::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sampler_){nullptr}
    , decltype(_impl_.sample_constraint_){nullptr}
    , decltype(_impl_.max_sample_){0u}
    , decltype(_impl_.use_original_image_){true}
    , decltype(_impl_.max_trials_){100u}
  };
}

BatchSampler::~BatchSampler() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BatchSampler)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchSampler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sampler_;
  if (this != internal_default_instance()) delete _impl_.sample_constraint_;
}

void BatchSampler::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BatchSampler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.sampler_ != nullptr);
      _impl_.sampler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sample_constraint_ != nullptr);
      _impl_.sample_constraint_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    _impl_.max_sample_ = 0u;
    _impl_.use_original_image_ = true;
    _impl_.max_trials_ = 100u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchSampler::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_original_image = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_original_image(&has_bits);
          _impl_.use_original_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.Sampler sampler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_sample(&has_bits);
          _impl_.max_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_trials = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_trials(&has_bits);
          _impl_.max_trials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchSampler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BatchSampler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_original_image = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_original_image(), target);
  }

  // optional .apollo.perception.inference.Sampler sampler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sampler(this),
        _Internal::sampler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sample_constraint(this),
        _Internal::sample_constraint(this).GetCachedSize(), target, stream);
  }

  // optional uint32 max_sample = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_sample(), target);
  }

  // optional uint32 max_trials = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_trials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BatchSampler)
  return target;
}

size_t BatchSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BatchSampler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.Sampler sampler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sampler_);
    }

    // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sample_constraint_);
    }

    // optional uint32 max_sample = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_sample());
    }

    // optional bool use_original_image = 1 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_trials = 5 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_trials());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchSampler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchSampler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchSampler::GetClassData() const { return &_class_data_; }

void BatchSampler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchSampler *>(to)->MergeFrom(
      static_cast<const BatchSampler &>(from));
}


void BatchSampler::MergeFrom(const BatchSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BatchSampler)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sampler()->::apollo::perception::inference::Sampler::MergeFrom(from._internal_sampler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sample_constraint()->::apollo::perception::inference::SampleConstraint::MergeFrom(from._internal_sample_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_sample_ = from._impl_.max_sample_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.use_original_image_ = from._impl_.use_original_image_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.max_trials_ = from._impl_.max_trials_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchSampler::CopyFrom(const BatchSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BatchSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSampler::IsInitialized() const {
  return true;
}

void BatchSampler::InternalSwap(BatchSampler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchSampler, _impl_.max_sample_)
      + sizeof(BatchSampler::_impl_.max_sample_)
      - PROTOBUF_FIELD_OFFSET(BatchSampler, _impl_.sampler_)>(
          reinterpret_cast<char*>(&_impl_.sampler_),
          reinterpret_cast<char*>(&other->_impl_.sampler_));
  swap(_impl_.use_original_image_, other->_impl_.use_original_image_);
  swap(_impl_.max_trials_, other->_impl_.max_trials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchSampler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[7]);
}

// ===================================================================

class EmitConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<EmitConstraint>()._impl_._has_bits_);
  static void set_has_emit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emit_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EmitConstraint::EmitConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.EmitConstraint)
}
EmitConstraint::EmitConstraint(const EmitConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emit_type_){}
    , decltype(_impl_.emit_overlap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.emit_type_, &from._impl_.emit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.emit_overlap_) -
    reinterpret_cast<char*>(&_impl_.emit_type_)) + sizeof(_impl_.emit_overlap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EmitConstraint)
}

inline void EmitConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emit_type_){0}
    , decltype(_impl_.emit_overlap_){0}
  };
}

EmitConstraint::~EmitConstraint() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EmitConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmitConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmitConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmitConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EmitConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.emit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.emit_overlap_) -
        reinterpret_cast<char*>(&_impl_.emit_type_)) + sizeof(_impl_.emit_overlap_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmitConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::EmitConstraint_EmitType_IsValid(val))) {
            _internal_set_emit_type(static_cast<::apollo::perception::inference::EmitConstraint_EmitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float emit_overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_emit_overlap(&has_bits);
          _impl_.emit_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmitConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EmitConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_emit_type(), target);
  }

  // optional float emit_overlap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_emit_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EmitConstraint)
  return target;
}

size_t EmitConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EmitConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_emit_type());
    }

    // optional float emit_overlap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmitConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmitConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmitConstraint::GetClassData() const { return &_class_data_; }

void EmitConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmitConstraint *>(to)->MergeFrom(
      static_cast<const EmitConstraint &>(from));
}


void EmitConstraint::MergeFrom(const EmitConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EmitConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.emit_type_ = from._impl_.emit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.emit_overlap_ = from._impl_.emit_overlap_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmitConstraint::CopyFrom(const EmitConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EmitConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitConstraint::IsInitialized() const {
  return true;
}

void EmitConstraint::InternalSwap(EmitConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmitConstraint, _impl_.emit_overlap_)
      + sizeof(EmitConstraint::_impl_.emit_overlap_)
      - PROTOBUF_FIELD_OFFSET(EmitConstraint, _impl_.emit_type_)>(
          reinterpret_cast<char*>(&_impl_.emit_type_),
          reinterpret_cast<char*>(&other->_impl_.emit_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmitConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[8]);
}

// ===================================================================

class NormalizedBBox::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedBBox>()._impl_._has_bits_);
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ymax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_difficult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

NormalizedBBox::NormalizedBBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NormalizedBBox)
}
NormalizedBBox::NormalizedBBox(const NormalizedBBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xmin_){}
    , decltype(_impl_.ymin_){}
    , decltype(_impl_.xmax_){}
    , decltype(_impl_.ymax_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.difficult_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xmin_, &from._impl_.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.xmin_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NormalizedBBox)
}

inline void NormalizedBBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xmin_){0}
    , decltype(_impl_.ymin_){0}
    , decltype(_impl_.xmax_){0}
    , decltype(_impl_.ymax_){0}
    , decltype(_impl_.label_){0}
    , decltype(_impl_.difficult_){false}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.size_){0}
  };
}

NormalizedBBox::~NormalizedBBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NormalizedBBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalizedBBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NormalizedBBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalizedBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NormalizedBBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.xmin_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizedBBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_xmin(&has_bits);
          _impl_.xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_ymin(&has_bits);
          _impl_.ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xmax(&has_bits);
          _impl_.xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_ymax(&has_bits);
          _impl_.ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_label(&has_bits);
          _impl_.label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool difficult = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_difficult(&has_bits);
          _impl_.difficult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalizedBBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NormalizedBBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_ymin(), target);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xmax(), target);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ymax(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_label(), target);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_difficult(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_score(), target);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NormalizedBBox)
  return target;
}

size_t NormalizedBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NormalizedBBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float xmax = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ymax = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional bool difficult = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float score = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NormalizedBBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NormalizedBBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NormalizedBBox::GetClassData() const { return &_class_data_; }

void NormalizedBBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NormalizedBBox *>(to)->MergeFrom(
      static_cast<const NormalizedBBox &>(from));
}


void NormalizedBBox::MergeFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.xmin_ = from._impl_.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ymin_ = from._impl_.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.xmax_ = from._impl_.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ymax_ = from._impl_.ymax_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.label_ = from._impl_.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.difficult_ = from._impl_.difficult_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.size_ = from._impl_.size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NormalizedBBox::CopyFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedBBox::IsInitialized() const {
  return true;
}

void NormalizedBBox::InternalSwap(NormalizedBBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalizedBBox, _impl_.size_)
      + sizeof(NormalizedBBox::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(NormalizedBBox, _impl_.xmin_)>(
          reinterpret_cast<char*>(&_impl_.xmin_),
          reinterpret_cast<char*>(&other->_impl_.xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedBBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[9]);
}

// ===================================================================

class BBox3D::_Internal {
 public:
  using HasBits = decltype(std::declval<BBox3D>()._impl_._has_bits_);
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BBox3D::BBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BBox3D)
}
BBox3D::BBox3D(const BBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.h_){}
    , decltype(_impl_.w_){}
    , decltype(_impl_.l_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.alpha_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.h_, &from._impl_.h_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alpha_) -
    reinterpret_cast<char*>(&_impl_.h_)) + sizeof(_impl_.alpha_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BBox3D)
}

inline void BBox3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.h_){0}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.alpha_){0}
  };
}

BBox3D::~BBox3D() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BBox3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BBox3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BBox3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.alpha_) -
        reinterpret_cast<char*>(&_impl_.h_)) + sizeof(_impl_.alpha_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_h(&has_bits);
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_alpha(&has_bits);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBox3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BBox3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_h(), target);
  }

  // optional float w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_w(), target);
  }

  // optional float l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_l(), target);
  }

  // optional float x = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // optional float y = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // optional float z = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // optional float alpha = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BBox3D)
  return target;
}

size_t BBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BBox3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float x = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float alpha = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBox3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBox3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBox3D::GetClassData() const { return &_class_data_; }

void BBox3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBox3D *>(to)->MergeFrom(
      static_cast<const BBox3D &>(from));
}


void BBox3D::MergeFrom(const BBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.h_ = from._impl_.h_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.w_ = from._impl_.w_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.l_ = from._impl_.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.alpha_ = from._impl_.alpha_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBox3D::CopyFrom(const BBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox3D::IsInitialized() const {
  return true;
}

void BBox3D::InternalSwap(BBox3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox3D, _impl_.alpha_)
      + sizeof(BBox3D::_impl_.alpha_)
      - PROTOBUF_FIELD_OFFSET(BBox3D, _impl_.h_)>(
          reinterpret_cast<char*>(&_impl_.h_),
          reinterpret_cast<char*>(&other->_impl_.h_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[10]);
}

// ===================================================================

class Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotation>()._impl_._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& bbox(const Annotation* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::BBox3D& bbox3d(const Annotation* msg);
  static void set_has_bbox3d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& front_bbox(const Annotation* msg);
  static void set_has_front_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& rear_bbox(const Annotation* msg);
  static void set_has_rear_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::bbox(const Annotation* msg) {
  return *msg->_impl_.bbox_;
}
const ::apollo::perception::inference::BBox3D&
Annotation::_Internal::bbox3d(const Annotation* msg) {
  return *msg->_impl_.bbox3d_;
}
const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::front_bbox(const Annotation* msg) {
  return *msg->_impl_.front_bbox_;
}
const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::rear_bbox(const Annotation* msg) {
  return *msg->_impl_.rear_bbox_;
}
Annotation::Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.bbox3d_){nullptr}
    , decltype(_impl_.front_bbox_){nullptr}
    , decltype(_impl_.rear_bbox_){nullptr}
    , decltype(_impl_.instance_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    _impl_.bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from._impl_.bbox_);
  }
  if (from._internal_has_bbox3d()) {
    _impl_.bbox3d_ = new ::apollo::perception::inference::BBox3D(*from._impl_.bbox3d_);
  }
  if (from._internal_has_front_bbox()) {
    _impl_.front_bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from._impl_.front_bbox_);
  }
  if (from._internal_has_rear_bbox()) {
    _impl_.rear_bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from._impl_.rear_bbox_);
  }
  _impl_.instance_id_ = from._impl_.instance_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Annotation)
}

inline void Annotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.bbox3d_){nullptr}
    , decltype(_impl_.front_bbox_){nullptr}
    , decltype(_impl_.rear_bbox_){nullptr}
    , decltype(_impl_.instance_id_){0}
  };
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Annotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bbox_;
  if (this != internal_default_instance()) delete _impl_.bbox3d_;
  if (this != internal_default_instance()) delete _impl_.front_bbox_;
  if (this != internal_default_instance()) delete _impl_.rear_bbox_;
}

void Annotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Annotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.bbox_ != nullptr);
      _impl_.bbox_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bbox3d_ != nullptr);
      _impl_.bbox3d_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.front_bbox_ != nullptr);
      _impl_.front_bbox_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rear_bbox_ != nullptr);
      _impl_.rear_bbox_->Clear();
    }
  }
  _impl_.instance_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 instance_id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_instance_id(&has_bits);
          _impl_.instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BBox3D bbox3d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Annotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Annotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 instance_id = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.BBox3D bbox3d = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bbox3d(this),
        _Internal::bbox3d(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::front_bbox(this),
        _Internal::front_bbox(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rear_bbox(this),
        _Internal::rear_bbox(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Annotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox_);
    }

    // optional .apollo.perception.inference.BBox3D bbox3d = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox3d_);
    }

    // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.front_bbox_);
    }

    // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rear_bbox_);
    }

    // optional int32 instance_id = 1 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_instance_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Annotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Annotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Annotation::GetClassData() const { return &_class_data_; }

void Annotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Annotation *>(to)->MergeFrom(
      static_cast<const Annotation &>(from));
}


void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_bbox());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bbox3d()->::apollo::perception::inference::BBox3D::MergeFrom(from._internal_bbox3d());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_front_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_front_bbox());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rear_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_rear_bbox());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.instance_id_ = from._impl_.instance_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Annotation, _impl_.instance_id_)
      + sizeof(Annotation::_impl_.instance_id_)
      - PROTOBUF_FIELD_OFFSET(Annotation, _impl_.bbox_)>(
          reinterpret_cast<char*>(&_impl_.bbox_),
          reinterpret_cast<char*>(&other->_impl_.bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[11]);
}

// ===================================================================

class AnnotationGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotationGroup>()._impl_._has_bits_);
  static void set_has_group_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AnnotationGroup::AnnotationGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.AnnotationGroup)
}
AnnotationGroup::AnnotationGroup(const AnnotationGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_){from._impl_.annotation_}
    , decltype(_impl_.group_label_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_label_ = from._impl_.group_label_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotationGroup)
}

inline void AnnotationGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_){arena}
    , decltype(_impl_.group_label_){0}
  };
}

AnnotationGroup::~AnnotationGroup() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotationGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotationGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_.~RepeatedPtrField();
}

void AnnotationGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotationGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_.Clear();
  _impl_.group_label_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 group_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_label(&has_bits);
          _impl_.group_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotationGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotationGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 group_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_label(), target);
  }

  // repeated .apollo.perception.inference.Annotation annotation = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotationGroup)
  return target;
}

size_t AnnotationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotationGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.Annotation annotation = 2;
  total_size += 1UL * this->_internal_annotation_size();
  for (const auto& msg : this->_impl_.annotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 group_label = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationGroup::GetClassData() const { return &_class_data_; }

void AnnotationGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotationGroup *>(to)->MergeFrom(
      static_cast<const AnnotationGroup &>(from));
}


void AnnotationGroup::MergeFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.annotation_.MergeFrom(from._impl_.annotation_);
  if (from._internal_has_group_label()) {
    _internal_set_group_label(from._internal_group_label());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationGroup::CopyFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationGroup::IsInitialized() const {
  return true;
}

void AnnotationGroup::InternalSwap(AnnotationGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotation_.InternalSwap(&other->_impl_.annotation_);
  swap(_impl_.group_label_, other->_impl_.group_label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[12]);
}

// ===================================================================

class AnnotatedDatum::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotatedDatum>()._impl_._has_bits_);
  static const ::apollo::perception::inference::Datum& datum(const AnnotatedDatum* msg);
  static void set_has_datum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::Datum&
AnnotatedDatum::_Internal::datum(const AnnotatedDatum* msg) {
  return *msg->_impl_.datum_;
}
AnnotatedDatum::AnnotatedDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.AnnotatedDatum)
}
AnnotatedDatum::AnnotatedDatum(const AnnotatedDatum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_group_){from._impl_.annotation_group_}
    , decltype(_impl_.datum_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datum()) {
    _impl_.datum_ = new ::apollo::perception::inference::Datum(*from._impl_.datum_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotatedDatum)
}

inline void AnnotatedDatum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_group_){arena}
    , decltype(_impl_.datum_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

AnnotatedDatum::~AnnotatedDatum() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotatedDatum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotatedDatum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_group_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.datum_;
}

void AnnotatedDatum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotatedDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotatedDatum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_group_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.datum_ != nullptr);
    _impl_.datum_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotatedDatum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Datum datum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_datum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::AnnotatedDatum_AnnotationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotatedDatum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotatedDatum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.Datum datum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::datum(this),
        _Internal::datum(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_group_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_group(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotatedDatum)
  return target;
}

size_t AnnotatedDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotatedDatum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  total_size += 1UL * this->_internal_annotation_group_size();
  for (const auto& msg : this->_impl_.annotation_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.Datum datum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.datum_);
    }

    // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotatedDatum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotatedDatum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotatedDatum::GetClassData() const { return &_class_data_; }

void AnnotatedDatum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotatedDatum *>(to)->MergeFrom(
      static_cast<const AnnotatedDatum &>(from));
}


void AnnotatedDatum::MergeFrom(const AnnotatedDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotatedDatum)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.annotation_group_.MergeFrom(from._impl_.annotation_group_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_datum()->::apollo::perception::inference::Datum::MergeFrom(from._internal_datum());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotatedDatum::CopyFrom(const AnnotatedDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotatedDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedDatum::IsInitialized() const {
  return true;
}

void AnnotatedDatum::InternalSwap(AnnotatedDatum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotation_group_.InternalSwap(&other->_impl_.annotation_group_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotatedDatum, _impl_.type_)
      + sizeof(AnnotatedDatum::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AnnotatedDatum, _impl_.datum_)>(
          reinterpret_cast<char*>(&_impl_.datum_),
          reinterpret_cast<char*>(&other->_impl_.datum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedDatum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[13]);
}

// ===================================================================

class FillerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FillerParameter>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_std(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_variance_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_{{{"constant", 8}}, {nullptr}};
FillerParameter::FillerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.mean_){}
    , decltype(_impl_.variance_norm_){}
    , decltype(_impl_.sparse_){}
    , decltype(_impl_.max_){}
    , decltype(_impl_.std_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  if (from._internal_has_type()) {
    _impl_.type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.std_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.std_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.FillerParameter)
}

inline void FillerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.min_){0}
    , decltype(_impl_.mean_){0}
    , decltype(_impl_.variance_norm_){0}
    , decltype(_impl_.sparse_){-1}
    , decltype(_impl_.max_){1}
    , decltype(_impl_.std_){1}
  };
  _impl_.type_.InitDefault();
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.FillerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FillerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void FillerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.FillerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_.ClearToDefault(::apollo::perception::inference::FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.variance_norm_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.variance_norm_));
    _impl_.sparse_ = -1;
    _impl_.max_ = 1;
    _impl_.std_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1 [default = "constant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.FillerParameter.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min(&has_bits);
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_mean(&has_bits);
          _impl_.mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_std(&has_bits);
          _impl_.std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sparse = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sparse(&has_bits);
          _impl_.sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::FillerParameter_VarianceNorm_IsValid(val))) {
            _internal_set_variance_norm(static_cast<::apollo::perception::inference::FillerParameter_VarianceNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FillerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.FillerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.FillerParameter.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min(), target);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_sparse(), target);
  }

  // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_variance_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.FillerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 1 [default = "constant"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional float value = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_variance_norm());
    }

    // optional int32 sparse = 7 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sparse());
    }

    // optional float max = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FillerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FillerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FillerParameter::GetClassData() const { return &_class_data_; }

void FillerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FillerParameter *>(to)->MergeFrom(
      static_cast<const FillerParameter &>(from));
}


void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mean_ = from._impl_.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.variance_norm_ = from._impl_.variance_norm_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.sparse_ = from._impl_.sparse_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.max_ = from._impl_.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.std_ = from._impl_.std_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::InternalSwap(FillerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillerParameter, _impl_.variance_norm_)
      + sizeof(FillerParameter::_impl_.variance_norm_)
      - PROTOBUF_FIELD_OFFSET(FillerParameter, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
  swap(_impl_.sparse_, other->_impl_.sparse_);
  swap(_impl_.max_, other->_impl_.max_);
  swap(_impl_.std_, other->_impl_.std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FillerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[14]);
}

// ===================================================================

class NetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NetParameter>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_backward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::NetState& state(const NetParameter* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::NetState&
NetParameter::_Internal::state(const NetParameter* msg) {
  return *msg->_impl_.state_;
}
NetParameter::NetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.input_){from._impl_.input_}
    , decltype(_impl_.input_dim_){from._impl_.input_dim_}
    , decltype(_impl_.input_shape_){from._impl_.input_shape_}
    , decltype(_impl_.layer_){from._impl_.layer_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.force_backward_){}
    , decltype(_impl_.debug_info_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    _impl_.state_ = new ::apollo::perception::inference::NetState(*from._impl_.state_);
  }
  ::memcpy(&_impl_.force_backward_, &from._impl_.force_backward_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.debug_info_) -
    reinterpret_cast<char*>(&_impl_.force_backward_)) + sizeof(_impl_.debug_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetParameter)
}

inline void NetParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layers_){arena}
    , decltype(_impl_.input_){arena}
    , decltype(_impl_.input_dim_){arena}
    , decltype(_impl_.input_shape_){arena}
    , decltype(_impl_.layer_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.force_backward_){false}
    , decltype(_impl_.debug_info_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.input_.~RepeatedPtrField();
  _impl_.input_dim_.~RepeatedField();
  _impl_.input_shape_.~RepeatedPtrField();
  _impl_.layer_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
}

void NetParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.input_.Clear();
  _impl_.input_dim_.Clear();
  _impl_.input_shape_.Clear();
  _impl_.layer_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  ::memset(&_impl_.force_backward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.debug_info_) -
      reinterpret_cast<char*>(&_impl_.force_backward_)) + sizeof(_impl_.debug_info_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.NetParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.NetParameter.input");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 input_dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_dim(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_backward = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_force_backward(&has_bits);
          _impl_.force_backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NetState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_info = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_debug_info(&has_bits);
          _impl_.debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobShape input_shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.LayerParameter layer = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetParameter.input");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0, n = this->_internal_input_dim_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_dim(i), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_force_backward(), target);
  }

  // optional .apollo.perception.inference.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_debug_info(), target);
  }

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_.size());
  for (int i = 0, n = _impl_.input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_.Get(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_dim_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_dim_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  total_size += 1UL * this->_internal_input_shape_size();
  for (const auto& msg : this->_impl_.input_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  total_size += 2UL * this->_internal_layer_size();
  for (const auto& msg : this->_impl_.layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.NetState state = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

    // optional bool force_backward = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool debug_info = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetParameter::GetClassData() const { return &_class_data_; }

void NetParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetParameter *>(to)->MergeFrom(
      static_cast<const NetParameter &>(from));
}


void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.layers_.MergeFrom(from._impl_.layers_);
  _impl_.input_.MergeFrom(from._impl_.input_);
  _impl_.input_dim_.MergeFrom(from._impl_.input_dim_);
  _impl_.input_shape_.MergeFrom(from._impl_.input_shape_);
  _impl_.layer_.MergeFrom(from._impl_.layer_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::apollo::perception::inference::NetState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.force_backward_ = from._impl_.force_backward_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.debug_info_ = from._impl_.debug_info_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.input_dim_.InternalSwap(&other->_impl_.input_dim_);
  _impl_.input_shape_.InternalSwap(&other->_impl_.input_shape_);
  _impl_.layer_.InternalSwap(&other->_impl_.layer_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetParameter, _impl_.debug_info_)
      + sizeof(NetParameter::_impl_.debug_info_)
      - PROTOBUF_FIELD_OFFSET(NetParameter, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[15]);
}

// ===================================================================

class NetState::_Internal {
 public:
  using HasBits = decltype(std::declval<NetState>()._impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetState::NetState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NetState)
}
NetState::NetState(const NetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){from._impl_.stage_}
    , decltype(_impl_.level_){}
    , decltype(_impl_.phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.phase_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetState)
}

inline void NetState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){arena}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.phase_){1}
  };
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_.~RepeatedPtrField();
}

void NetState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.level_ = 0;
    _impl_.phase_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.NetState.stage");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->_internal_stage_size(); i < n; i++) {
    const auto& s = this->_internal_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetState.stage");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stage_.size());
  for (int i = 0, n = _impl_.stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stage_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 level = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetState::GetClassData() const { return &_class_data_; }

void NetState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetState *>(to)->MergeFrom(
      static_cast<const NetState &>(from));
}


void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.stage_.MergeFrom(from._impl_.stage_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phase_ = from._impl_.phase_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::InternalSwap(NetState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stage_.InternalSwap(&other->_impl_.stage_);
  swap(_impl_.level_, other->_impl_.level_);
  swap(_impl_.phase_, other->_impl_.phase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[16]);
}

// ===================================================================

class NetStateRule::_Internal {
 public:
  using HasBits = decltype(std::declval<NetStateRule>()._impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NetStateRule::NetStateRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NetStateRule)
}
NetStateRule::NetStateRule(const NetStateRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){from._impl_.stage_}
    , decltype(_impl_.not_stage_){from._impl_.not_stage_}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.min_level_){}
    , decltype(_impl_.max_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phase_, &from._impl_.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_level_) -
    reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.max_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetStateRule)
}

inline void NetStateRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){arena}
    , decltype(_impl_.not_stage_){arena}
    , decltype(_impl_.phase_){0}
    , decltype(_impl_.min_level_){0}
    , decltype(_impl_.max_level_){0}
  };
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetStateRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetStateRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_.~RepeatedPtrField();
  _impl_.not_stage_.~RepeatedPtrField();
}

void NetStateRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetStateRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_.Clear();
  _impl_.not_stage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_level_) -
        reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.max_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetStateRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min_level(&has_bits);
          _impl_.min_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_level(&has_bits);
          _impl_.max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.NetStateRule.stage");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string not_stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_not_stage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.NetStateRule.not_stage");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetStateRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetStateRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_level(), target);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->_internal_stage_size(); i < n; i++) {
    const auto& s = this->_internal_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetStateRule.stage");
    target = stream->WriteString(4, s, target);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->_internal_not_stage_size(); i < n; i++) {
    const auto& s = this->_internal_not_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetStateRule.not_stage");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetStateRule)
  return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetStateRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stage_.size());
  for (int i = 0, n = _impl_.stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stage_.Get(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.not_stage_.size());
  for (int i = 0, n = _impl_.not_stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.not_stage_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.Phase phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional int32 min_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_level());
    }

    // optional int32 max_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetStateRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetStateRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetStateRule::GetClassData() const { return &_class_data_; }

void NetStateRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetStateRule *>(to)->MergeFrom(
      static_cast<const NetStateRule &>(from));
}


void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.stage_.MergeFrom(from._impl_.stage_);
  _impl_.not_stage_.MergeFrom(from._impl_.not_stage_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.phase_ = from._impl_.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.min_level_ = from._impl_.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_level_ = from._impl_.max_level_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {
  return true;
}

void NetStateRule::InternalSwap(NetStateRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stage_.InternalSwap(&other->_impl_.stage_);
  _impl_.not_stage_.InternalSwap(&other->_impl_.not_stage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetStateRule, _impl_.max_level_)
      + sizeof(NetStateRule::_impl_.max_level_)
      - PROTOBUF_FIELD_OFFSET(NetStateRule, _impl_.phase_)>(
          reinterpret_cast<char*>(&_impl_.phase_),
          reinterpret_cast<char*>(&other->_impl_.phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetStateRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[17]);
}

// ===================================================================

class ParamSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ParamSpec>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_share_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lr_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decay_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ParamSpec::ParamSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.share_mode_){}
    , decltype(_impl_.lr_mult_){}
    , decltype(_impl_.decay_mult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.share_mode_, &from._impl_.share_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.decay_mult_) -
    reinterpret_cast<char*>(&_impl_.share_mode_)) + sizeof(_impl_.decay_mult_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ParamSpec)
}

inline void ParamSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.share_mode_){0}
    , decltype(_impl_.lr_mult_){1}
    , decltype(_impl_.decay_mult_){1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ParamSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParamSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ParamSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ParamSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    _impl_.share_mode_ = 0;
    _impl_.lr_mult_ = 1;
    _impl_.decay_mult_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.ParamSpec.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ParamSpec_DimCheckMode_IsValid(val))) {
            _internal_set_share_mode(static_cast<::apollo::perception::inference::ParamSpec_DimCheckMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float lr_mult = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_lr_mult(&has_bits);
          _impl_.lr_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float decay_mult = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_decay_mult(&has_bits);
          _impl_.decay_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParamSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ParamSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ParamSpec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_decay_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ParamSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamSpec::GetClassData() const { return &_class_data_; }

void ParamSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamSpec *>(to)->MergeFrom(
      static_cast<const ParamSpec &>(from));
}


void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.share_mode_ = from._impl_.share_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lr_mult_ = from._impl_.lr_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.decay_mult_ = from._impl_.decay_mult_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::InternalSwap(ParamSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.share_mode_, other->_impl_.share_mode_);
  swap(_impl_.lr_mult_, other->_impl_.lr_mult_);
  swap(_impl_.decay_mult_, other->_impl_.decay_mult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[18]);
}

// ===================================================================

class LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerParameter>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::apollo::perception::inference::TransformationParameter& transform_param(const LayerParameter* msg);
  static void set_has_transform_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::LossParameter& loss_param(const LayerParameter* msg);
  static void set_has_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::AccuracyParameter& accuracy_param(const LayerParameter* msg);
  static void set_has_accuracy_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::AnnotatedDataParameter& annotated_data_param(const LayerParameter* msg);
  static void set_has_annotated_data_param(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::apollo::perception::inference::ArgMaxParameter& argmax_param(const LayerParameter* msg);
  static void set_has_argmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::BatchNormParameter& batch_norm_param(const LayerParameter* msg);
  static void set_has_batch_norm_param(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::apollo::perception::inference::BBoxRegParameter& bbox_reg_param(const LayerParameter* msg);
  static void set_has_bbox_reg_param(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::apollo::perception::inference::BiasParameter& bias_param(const LayerParameter* msg);
  static void set_has_bias_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::apollo::perception::inference::ConcatParameter& concat_param(const LayerParameter* msg);
  static void set_has_concat_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param(const LayerParameter* msg);
  static void set_has_contrastive_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::perception::inference::ConvolutionParameter& convolution_param(const LayerParameter* msg);
  static void set_has_convolution_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::CropParameter& crop_param(const LayerParameter* msg);
  static void set_has_crop_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::apollo::perception::inference::DataParameter& data_param(const LayerParameter* msg);
  static void set_has_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::DetectionEvaluateParameter& detection_evaluate_param(const LayerParameter* msg);
  static void set_has_detection_evaluate_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::apollo::perception::inference::DetectionOutputParameter& detection_output_param(const LayerParameter* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::apollo::perception::inference::DetectionOutputSSDParameter& detection_output_ssd_param(const LayerParameter* msg);
  static void set_has_detection_output_ssd_param(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::apollo::perception::inference::DFMBPSROIAlignParameter& dfmb_psroi_pooling_param(const LayerParameter* msg);
  static void set_has_dfmb_psroi_pooling_param(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::apollo::perception::inference::DropoutParameter& dropout_param(const LayerParameter* msg);
  static void set_has_dropout_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::inference::DummyDataParameter& dummy_data_param(const LayerParameter* msg);
  static void set_has_dummy_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::perception::inference::EltwiseParameter& eltwise_param(const LayerParameter* msg);
  static void set_has_eltwise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::ELUParameter& elu_param(const LayerParameter* msg);
  static void set_has_elu_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::apollo::perception::inference::EmbedParameter& embed_param(const LayerParameter* msg);
  static void set_has_embed_param(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::apollo::perception::inference::ExpParameter& exp_param(const LayerParameter* msg);
  static void set_has_exp_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::FlattenParameter& flatten_param(const LayerParameter* msg);
  static void set_has_flatten_param(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param(const LayerParameter* msg);
  static void set_has_hdf5_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param(const LayerParameter* msg);
  static void set_has_hinge_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::inference::ImageDataParameter& image_data_param(const LayerParameter* msg);
  static void set_has_image_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param(const LayerParameter* msg);
  static void set_has_infogain_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::perception::inference::InnerProductParameter& inner_product_param(const LayerParameter* msg);
  static void set_has_inner_product_param(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::perception::inference::InputParameter& input_param(const LayerParameter* msg);
  static void set_has_input_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::apollo::perception::inference::LogParameter& log_param(const LayerParameter* msg);
  static void set_has_log_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::apollo::perception::inference::LRNParameter& lrn_param(const LayerParameter* msg);
  static void set_has_lrn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::MemoryDataParameter& memory_data_param(const LayerParameter* msg);
  static void set_has_memory_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::perception::inference::MultiBoxLossParameter& multibox_loss_param(const LayerParameter* msg);
  static void set_has_multibox_loss_param(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::apollo::perception::inference::RegionParameter& region_param(const LayerParameter* msg);
  static void set_has_region_param(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::apollo::perception::inference::RegionOutputParameter& region_output_param(const LayerParameter* msg);
  static void set_has_region_output_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::apollo::perception::inference::RegionProposalParameter& region_proposal_param(const LayerParameter* msg);
  static void set_has_region_proposal_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::apollo::perception::inference::YoloTargetParameter& yolo_target_param(const LayerParameter* msg);
  static void set_has_yolo_target_param(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::apollo::perception::inference::YoloAnchorsParameter& yolo_anchors_param(const LayerParameter* msg);
  static void set_has_yolo_anchors_param(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::apollo::perception::inference::YoloLossParameter& yolo_loss_param(const LayerParameter* msg);
  static void set_has_yolo_loss_param(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::apollo::perception::inference::YoloDumpParameter& yolo_dump_param(const LayerParameter* msg);
  static void set_has_yolo_dump_param(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::apollo::perception::inference::PaddingParameter& padding_param(const LayerParameter* msg);
  static void set_has_padding_param(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::apollo::perception::inference::ReorgParameter& reorg_param(const LayerParameter* msg);
  static void set_has_reorg_param(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::apollo::perception::inference::MVNParameter& mvn_param(const LayerParameter* msg);
  static void set_has_mvn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::NormalizeParameter& norm_param(const LayerParameter* msg);
  static void set_has_norm_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::apollo::perception::inference::ParameterParameter& parameter_param(const LayerParameter* msg);
  static void set_has_parameter_param(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::apollo::perception::inference::PermuteParameter& permute_param(const LayerParameter* msg);
  static void set_has_permute_param(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::apollo::perception::inference::PoolingParameter& pooling_param(const LayerParameter* msg);
  static void set_has_pooling_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::PowerParameter& power_param(const LayerParameter* msg);
  static void set_has_power_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::perception::inference::PReLUParameter& prelu_param(const LayerParameter* msg);
  static void set_has_prelu_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::apollo::perception::inference::PriorBoxParameter& prior_box_param(const LayerParameter* msg);
  static void set_has_prior_box_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::apollo::perception::inference::PythonParameter& python_param(const LayerParameter* msg);
  static void set_has_python_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::perception::inference::RecurrentParameter& recurrent_param(const LayerParameter* msg);
  static void set_has_recurrent_param(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::apollo::perception::inference::ReductionParameter& reduction_param(const LayerParameter* msg);
  static void set_has_reduction_param(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::apollo::perception::inference::ReLUParameter& relu_param(const LayerParameter* msg);
  static void set_has_relu_param(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::perception::inference::ReshapeParameter& reshape_param(const LayerParameter* msg);
  static void set_has_reshape_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::apollo::perception::inference::ROIPoolingParameter& roi_pooling_param(const LayerParameter* msg);
  static void set_has_roi_pooling_param(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::apollo::perception::inference::ScaleParameter& scale_param(const LayerParameter* msg);
  static void set_has_scale_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::apollo::perception::inference::SigmoidParameter& sigmoid_param(const LayerParameter* msg);
  static void set_has_sigmoid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::perception::inference::SoftmaxParameter& softmax_param(const LayerParameter* msg);
  static void set_has_softmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::perception::inference::SPPParameter& spp_param(const LayerParameter* msg);
  static void set_has_spp_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::apollo::perception::inference::SliceParameter& slice_param(const LayerParameter* msg);
  static void set_has_slice_param(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::perception::inference::TanHParameter& tanh_param(const LayerParameter* msg);
  static void set_has_tanh_param(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::perception::inference::ThresholdParameter& threshold_param(const LayerParameter* msg);
  static void set_has_threshold_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::perception::inference::TileParameter& tile_param(const LayerParameter* msg);
  static void set_has_tile_param(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::apollo::perception::inference::VideoDataParameter& video_data_param(const LayerParameter* msg);
  static void set_has_video_data_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::apollo::perception::inference::WindowDataParameter& window_data_param(const LayerParameter* msg);
  static void set_has_window_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

const ::apollo::perception::inference::TransformationParameter&
LayerParameter::_Internal::transform_param(const LayerParameter* msg) {
  return *msg->_impl_.transform_param_;
}
const ::apollo::perception::inference::LossParameter&
LayerParameter::_Internal::loss_param(const LayerParameter* msg) {
  return *msg->_impl_.loss_param_;
}
const ::apollo::perception::inference::AccuracyParameter&
LayerParameter::_Internal::accuracy_param(const LayerParameter* msg) {
  return *msg->_impl_.accuracy_param_;
}
const ::apollo::perception::inference::AnnotatedDataParameter&
LayerParameter::_Internal::annotated_data_param(const LayerParameter* msg) {
  return *msg->_impl_.annotated_data_param_;
}
const ::apollo::perception::inference::ArgMaxParameter&
LayerParameter::_Internal::argmax_param(const LayerParameter* msg) {
  return *msg->_impl_.argmax_param_;
}
const ::apollo::perception::inference::BatchNormParameter&
LayerParameter::_Internal::batch_norm_param(const LayerParameter* msg) {
  return *msg->_impl_.batch_norm_param_;
}
const ::apollo::perception::inference::BBoxRegParameter&
LayerParameter::_Internal::bbox_reg_param(const LayerParameter* msg) {
  return *msg->_impl_.bbox_reg_param_;
}
const ::apollo::perception::inference::BiasParameter&
LayerParameter::_Internal::bias_param(const LayerParameter* msg) {
  return *msg->_impl_.bias_param_;
}
const ::apollo::perception::inference::ConcatParameter&
LayerParameter::_Internal::concat_param(const LayerParameter* msg) {
  return *msg->_impl_.concat_param_;
}
const ::apollo::perception::inference::ContrastiveLossParameter&
LayerParameter::_Internal::contrastive_loss_param(const LayerParameter* msg) {
  return *msg->_impl_.contrastive_loss_param_;
}
const ::apollo::perception::inference::ConvolutionParameter&
LayerParameter::_Internal::convolution_param(const LayerParameter* msg) {
  return *msg->_impl_.convolution_param_;
}
const ::apollo::perception::inference::CropParameter&
LayerParameter::_Internal::crop_param(const LayerParameter* msg) {
  return *msg->_impl_.crop_param_;
}
const ::apollo::perception::inference::DataParameter&
LayerParameter::_Internal::data_param(const LayerParameter* msg) {
  return *msg->_impl_.data_param_;
}
const ::apollo::perception::inference::DetectionEvaluateParameter&
LayerParameter::_Internal::detection_evaluate_param(const LayerParameter* msg) {
  return *msg->_impl_.detection_evaluate_param_;
}
const ::apollo::perception::inference::DetectionOutputParameter&
LayerParameter::_Internal::detection_output_param(const LayerParameter* msg) {
  return *msg->_impl_.detection_output_param_;
}
const ::apollo::perception::inference::DetectionOutputSSDParameter&
LayerParameter::_Internal::detection_output_ssd_param(const LayerParameter* msg) {
  return *msg->_impl_.detection_output_ssd_param_;
}
const ::apollo::perception::inference::DFMBPSROIAlignParameter&
LayerParameter::_Internal::dfmb_psroi_pooling_param(const LayerParameter* msg) {
  return *msg->_impl_.dfmb_psroi_pooling_param_;
}
const ::apollo::perception::inference::DropoutParameter&
LayerParameter::_Internal::dropout_param(const LayerParameter* msg) {
  return *msg->_impl_.dropout_param_;
}
const ::apollo::perception::inference::DummyDataParameter&
LayerParameter::_Internal::dummy_data_param(const LayerParameter* msg) {
  return *msg->_impl_.dummy_data_param_;
}
const ::apollo::perception::inference::EltwiseParameter&
LayerParameter::_Internal::eltwise_param(const LayerParameter* msg) {
  return *msg->_impl_.eltwise_param_;
}
const ::apollo::perception::inference::ELUParameter&
LayerParameter::_Internal::elu_param(const LayerParameter* msg) {
  return *msg->_impl_.elu_param_;
}
const ::apollo::perception::inference::EmbedParameter&
LayerParameter::_Internal::embed_param(const LayerParameter* msg) {
  return *msg->_impl_.embed_param_;
}
const ::apollo::perception::inference::ExpParameter&
LayerParameter::_Internal::exp_param(const LayerParameter* msg) {
  return *msg->_impl_.exp_param_;
}
const ::apollo::perception::inference::FlattenParameter&
LayerParameter::_Internal::flatten_param(const LayerParameter* msg) {
  return *msg->_impl_.flatten_param_;
}
const ::apollo::perception::inference::HDF5DataParameter&
LayerParameter::_Internal::hdf5_data_param(const LayerParameter* msg) {
  return *msg->_impl_.hdf5_data_param_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
LayerParameter::_Internal::hdf5_output_param(const LayerParameter* msg) {
  return *msg->_impl_.hdf5_output_param_;
}
const ::apollo::perception::inference::HingeLossParameter&
LayerParameter::_Internal::hinge_loss_param(const LayerParameter* msg) {
  return *msg->_impl_.hinge_loss_param_;
}
const ::apollo::perception::inference::ImageDataParameter&
LayerParameter::_Internal::image_data_param(const LayerParameter* msg) {
  return *msg->_impl_.image_data_param_;
}
const ::apollo::perception::inference::InfogainLossParameter&
LayerParameter::_Internal::infogain_loss_param(const LayerParameter* msg) {
  return *msg->_impl_.infogain_loss_param_;
}
const ::apollo::perception::inference::InnerProductParameter&
LayerParameter::_Internal::inner_product_param(const LayerParameter* msg) {
  return *msg->_impl_.inner_product_param_;
}
const ::apollo::perception::inference::InputParameter&
LayerParameter::_Internal::input_param(const LayerParameter* msg) {
  return *msg->_impl_.input_param_;
}
const ::apollo::perception::inference::LogParameter&
LayerParameter::_Internal::log_param(const LayerParameter* msg) {
  return *msg->_impl_.log_param_;
}
const ::apollo::perception::inference::LRNParameter&
LayerParameter::_Internal::lrn_param(const LayerParameter* msg) {
  return *msg->_impl_.lrn_param_;
}
const ::apollo::perception::inference::MemoryDataParameter&
LayerParameter::_Internal::memory_data_param(const LayerParameter* msg) {
  return *msg->_impl_.memory_data_param_;
}
const ::apollo::perception::inference::MultiBoxLossParameter&
LayerParameter::_Internal::multibox_loss_param(const LayerParameter* msg) {
  return *msg->_impl_.multibox_loss_param_;
}
const ::apollo::perception::inference::RegionParameter&
LayerParameter::_Internal::region_param(const LayerParameter* msg) {
  return *msg->_impl_.region_param_;
}
const ::apollo::perception::inference::RegionOutputParameter&
LayerParameter::_Internal::region_output_param(const LayerParameter* msg) {
  return *msg->_impl_.region_output_param_;
}
const ::apollo::perception::inference::RegionProposalParameter&
LayerParameter::_Internal::region_proposal_param(const LayerParameter* msg) {
  return *msg->_impl_.region_proposal_param_;
}
const ::apollo::perception::inference::YoloTargetParameter&
LayerParameter::_Internal::yolo_target_param(const LayerParameter* msg) {
  return *msg->_impl_.yolo_target_param_;
}
const ::apollo::perception::inference::YoloAnchorsParameter&
LayerParameter::_Internal::yolo_anchors_param(const LayerParameter* msg) {
  return *msg->_impl_.yolo_anchors_param_;
}
const ::apollo::perception::inference::YoloLossParameter&
LayerParameter::_Internal::yolo_loss_param(const LayerParameter* msg) {
  return *msg->_impl_.yolo_loss_param_;
}
const ::apollo::perception::inference::YoloDumpParameter&
LayerParameter::_Internal::yolo_dump_param(const LayerParameter* msg) {
  return *msg->_impl_.yolo_dump_param_;
}
const ::apollo::perception::inference::PaddingParameter&
LayerParameter::_Internal::padding_param(const LayerParameter* msg) {
  return *msg->_impl_.padding_param_;
}
const ::apollo::perception::inference::ReorgParameter&
LayerParameter::_Internal::reorg_param(const LayerParameter* msg) {
  return *msg->_impl_.reorg_param_;
}
const ::apollo::perception::inference::MVNParameter&
LayerParameter::_Internal::mvn_param(const LayerParameter* msg) {
  return *msg->_impl_.mvn_param_;
}
const ::apollo::perception::inference::NormalizeParameter&
LayerParameter::_Internal::norm_param(const LayerParameter* msg) {
  return *msg->_impl_.norm_param_;
}
const ::apollo::perception::inference::ParameterParameter&
LayerParameter::_Internal::parameter_param(const LayerParameter* msg) {
  return *msg->_impl_.parameter_param_;
}
const ::apollo::perception::inference::PermuteParameter&
LayerParameter::_Internal::permute_param(const LayerParameter* msg) {
  return *msg->_impl_.permute_param_;
}
const ::apollo::perception::inference::PoolingParameter&
LayerParameter::_Internal::pooling_param(const LayerParameter* msg) {
  return *msg->_impl_.pooling_param_;
}
const ::apollo::perception::inference::PowerParameter&
LayerParameter::_Internal::power_param(const LayerParameter* msg) {
  return *msg->_impl_.power_param_;
}
const ::apollo::perception::inference::PReLUParameter&
LayerParameter::_Internal::prelu_param(const LayerParameter* msg) {
  return *msg->_impl_.prelu_param_;
}
const ::apollo::perception::inference::PriorBoxParameter&
LayerParameter::_Internal::prior_box_param(const LayerParameter* msg) {
  return *msg->_impl_.prior_box_param_;
}
const ::apollo::perception::inference::PythonParameter&
LayerParameter::_Internal::python_param(const LayerParameter* msg) {
  return *msg->_impl_.python_param_;
}
const ::apollo::perception::inference::RecurrentParameter&
LayerParameter::_Internal::recurrent_param(const LayerParameter* msg) {
  return *msg->_impl_.recurrent_param_;
}
const ::apollo::perception::inference::ReductionParameter&
LayerParameter::_Internal::reduction_param(const LayerParameter* msg) {
  return *msg->_impl_.reduction_param_;
}
const ::apollo::perception::inference::ReLUParameter&
LayerParameter::_Internal::relu_param(const LayerParameter* msg) {
  return *msg->_impl_.relu_param_;
}
const ::apollo::perception::inference::ReshapeParameter&
LayerParameter::_Internal::reshape_param(const LayerParameter* msg) {
  return *msg->_impl_.reshape_param_;
}
const ::apollo::perception::inference::ROIPoolingParameter&
LayerParameter::_Internal::roi_pooling_param(const LayerParameter* msg) {
  return *msg->_impl_.roi_pooling_param_;
}
const ::apollo::perception::inference::ScaleParameter&
LayerParameter::_Internal::scale_param(const LayerParameter* msg) {
  return *msg->_impl_.scale_param_;
}
const ::apollo::perception::inference::SigmoidParameter&
LayerParameter::_Internal::sigmoid_param(const LayerParameter* msg) {
  return *msg->_impl_.sigmoid_param_;
}
const ::apollo::perception::inference::SoftmaxParameter&
LayerParameter::_Internal::softmax_param(const LayerParameter* msg) {
  return *msg->_impl_.softmax_param_;
}
const ::apollo::perception::inference::SPPParameter&
LayerParameter::_Internal::spp_param(const LayerParameter* msg) {
  return *msg->_impl_.spp_param_;
}
const ::apollo::perception::inference::SliceParameter&
LayerParameter::_Internal::slice_param(const LayerParameter* msg) {
  return *msg->_impl_.slice_param_;
}
const ::apollo::perception::inference::TanHParameter&
LayerParameter::_Internal::tanh_param(const LayerParameter* msg) {
  return *msg->_impl_.tanh_param_;
}
const ::apollo::perception::inference::ThresholdParameter&
LayerParameter::_Internal::threshold_param(const LayerParameter* msg) {
  return *msg->_impl_.threshold_param_;
}
const ::apollo::perception::inference::TileParameter&
LayerParameter::_Internal::tile_param(const LayerParameter* msg) {
  return *msg->_impl_.tile_param_;
}
const ::apollo::perception::inference::VideoDataParameter&
LayerParameter::_Internal::video_data_param(const LayerParameter* msg) {
  return *msg->_impl_.video_data_param_;
}
const ::apollo::perception::inference::WindowDataParameter&
LayerParameter::_Internal::window_data_param(const LayerParameter* msg) {
  return *msg->_impl_.window_data_param_;
}
LayerParameter::LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_){from._impl_.bottom_}
    , decltype(_impl_.top_){from._impl_.top_}
    , decltype(_impl_.loss_weight_){from._impl_.loss_weight_}
    , decltype(_impl_.param_){from._impl_.param_}
    , decltype(_impl_.blobs_){from._impl_.blobs_}
    , decltype(_impl_.include_){from._impl_.include_}
    , decltype(_impl_.exclude_){from._impl_.exclude_}
    , decltype(_impl_.propagate_down_){from._impl_.propagate_down_}
    , decltype(_impl_.yolo_data_param_){from._impl_.yolo_data_param_}
    , decltype(_impl_.data_prob_param_){from._impl_.data_prob_param_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.transform_param_){nullptr}
    , decltype(_impl_.loss_param_){nullptr}
    , decltype(_impl_.accuracy_param_){nullptr}
    , decltype(_impl_.argmax_param_){nullptr}
    , decltype(_impl_.concat_param_){nullptr}
    , decltype(_impl_.contrastive_loss_param_){nullptr}
    , decltype(_impl_.convolution_param_){nullptr}
    , decltype(_impl_.data_param_){nullptr}
    , decltype(_impl_.dropout_param_){nullptr}
    , decltype(_impl_.dummy_data_param_){nullptr}
    , decltype(_impl_.eltwise_param_){nullptr}
    , decltype(_impl_.exp_param_){nullptr}
    , decltype(_impl_.hdf5_data_param_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.hinge_loss_param_){nullptr}
    , decltype(_impl_.image_data_param_){nullptr}
    , decltype(_impl_.infogain_loss_param_){nullptr}
    , decltype(_impl_.inner_product_param_){nullptr}
    , decltype(_impl_.lrn_param_){nullptr}
    , decltype(_impl_.memory_data_param_){nullptr}
    , decltype(_impl_.mvn_param_){nullptr}
    , decltype(_impl_.pooling_param_){nullptr}
    , decltype(_impl_.power_param_){nullptr}
    , decltype(_impl_.relu_param_){nullptr}
    , decltype(_impl_.sigmoid_param_){nullptr}
    , decltype(_impl_.softmax_param_){nullptr}
    , decltype(_impl_.slice_param_){nullptr}
    , decltype(_impl_.tanh_param_){nullptr}
    , decltype(_impl_.threshold_param_){nullptr}
    , decltype(_impl_.window_data_param_){nullptr}
    , decltype(_impl_.python_param_){nullptr}
    , decltype(_impl_.prelu_param_){nullptr}
    , decltype(_impl_.spp_param_){nullptr}
    , decltype(_impl_.reshape_param_){nullptr}
    , decltype(_impl_.log_param_){nullptr}
    , decltype(_impl_.flatten_param_){nullptr}
    , decltype(_impl_.reduction_param_){nullptr}
    , decltype(_impl_.embed_param_){nullptr}
    , decltype(_impl_.tile_param_){nullptr}
    , decltype(_impl_.batch_norm_param_){nullptr}
    , decltype(_impl_.elu_param_){nullptr}
    , decltype(_impl_.bias_param_){nullptr}
    , decltype(_impl_.scale_param_){nullptr}
    , decltype(_impl_.input_param_){nullptr}
    , decltype(_impl_.crop_param_){nullptr}
    , decltype(_impl_.parameter_param_){nullptr}
    , decltype(_impl_.recurrent_param_){nullptr}
    , decltype(_impl_.annotated_data_param_){nullptr}
    , decltype(_impl_.multibox_loss_param_){nullptr}
    , decltype(_impl_.permute_param_){nullptr}
    , decltype(_impl_.prior_box_param_){nullptr}
    , decltype(_impl_.detection_output_param_){nullptr}
    , decltype(_impl_.detection_evaluate_param_){nullptr}
    , decltype(_impl_.norm_param_){nullptr}
    , decltype(_impl_.video_data_param_){nullptr}
    , decltype(_impl_.dfmb_psroi_pooling_param_){nullptr}
    , decltype(_impl_.bbox_reg_param_){nullptr}
    , decltype(_impl_.detection_output_ssd_param_){nullptr}
    , decltype(_impl_.region_param_){nullptr}
    , decltype(_impl_.reorg_param_){nullptr}
    , decltype(_impl_.region_output_param_){nullptr}
    , decltype(_impl_.region_proposal_param_){nullptr}
    , decltype(_impl_.padding_param_){nullptr}
    , decltype(_impl_.yolo_target_param_){nullptr}
    , decltype(_impl_.yolo_anchors_param_){nullptr}
    , decltype(_impl_.yolo_loss_param_){nullptr}
    , decltype(_impl_.yolo_dump_param_){nullptr}
    , decltype(_impl_.roi_pooling_param_){nullptr}
    , decltype(_impl_.phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _impl_.type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transform_param()) {
    _impl_.transform_param_ = new ::apollo::perception::inference::TransformationParameter(*from._impl_.transform_param_);
  }
  if (from._internal_has_loss_param()) {
    _impl_.loss_param_ = new ::apollo::perception::inference::LossParameter(*from._impl_.loss_param_);
  }
  if (from._internal_has_accuracy_param()) {
    _impl_.accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter(*from._impl_.accuracy_param_);
  }
  if (from._internal_has_argmax_param()) {
    _impl_.argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter(*from._impl_.argmax_param_);
  }
  if (from._internal_has_concat_param()) {
    _impl_.concat_param_ = new ::apollo::perception::inference::ConcatParameter(*from._impl_.concat_param_);
  }
  if (from._internal_has_contrastive_loss_param()) {
    _impl_.contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter(*from._impl_.contrastive_loss_param_);
  }
  if (from._internal_has_convolution_param()) {
    _impl_.convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter(*from._impl_.convolution_param_);
  }
  if (from._internal_has_data_param()) {
    _impl_.data_param_ = new ::apollo::perception::inference::DataParameter(*from._impl_.data_param_);
  }
  if (from._internal_has_dropout_param()) {
    _impl_.dropout_param_ = new ::apollo::perception::inference::DropoutParameter(*from._impl_.dropout_param_);
  }
  if (from._internal_has_dummy_data_param()) {
    _impl_.dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter(*from._impl_.dummy_data_param_);
  }
  if (from._internal_has_eltwise_param()) {
    _impl_.eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter(*from._impl_.eltwise_param_);
  }
  if (from._internal_has_exp_param()) {
    _impl_.exp_param_ = new ::apollo::perception::inference::ExpParameter(*from._impl_.exp_param_);
  }
  if (from._internal_has_hdf5_data_param()) {
    _impl_.hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter(*from._impl_.hdf5_data_param_);
  }
  if (from._internal_has_hdf5_output_param()) {
    _impl_.hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from._impl_.hdf5_output_param_);
  }
  if (from._internal_has_hinge_loss_param()) {
    _impl_.hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter(*from._impl_.hinge_loss_param_);
  }
  if (from._internal_has_image_data_param()) {
    _impl_.image_data_param_ = new ::apollo::perception::inference::ImageDataParameter(*from._impl_.image_data_param_);
  }
  if (from._internal_has_infogain_loss_param()) {
    _impl_.infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter(*from._impl_.infogain_loss_param_);
  }
  if (from._internal_has_inner_product_param()) {
    _impl_.inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter(*from._impl_.inner_product_param_);
  }
  if (from._internal_has_lrn_param()) {
    _impl_.lrn_param_ = new ::apollo::perception::inference::LRNParameter(*from._impl_.lrn_param_);
  }
  if (from._internal_has_memory_data_param()) {
    _impl_.memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter(*from._impl_.memory_data_param_);
  }
  if (from._internal_has_mvn_param()) {
    _impl_.mvn_param_ = new ::apollo::perception::inference::MVNParameter(*from._impl_.mvn_param_);
  }
  if (from._internal_has_pooling_param()) {
    _impl_.pooling_param_ = new ::apollo::perception::inference::PoolingParameter(*from._impl_.pooling_param_);
  }
  if (from._internal_has_power_param()) {
    _impl_.power_param_ = new ::apollo::perception::inference::PowerParameter(*from._impl_.power_param_);
  }
  if (from._internal_has_relu_param()) {
    _impl_.relu_param_ = new ::apollo::perception::inference::ReLUParameter(*from._impl_.relu_param_);
  }
  if (from._internal_has_sigmoid_param()) {
    _impl_.sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter(*from._impl_.sigmoid_param_);
  }
  if (from._internal_has_softmax_param()) {
    _impl_.softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter(*from._impl_.softmax_param_);
  }
  if (from._internal_has_slice_param()) {
    _impl_.slice_param_ = new ::apollo::perception::inference::SliceParameter(*from._impl_.slice_param_);
  }
  if (from._internal_has_tanh_param()) {
    _impl_.tanh_param_ = new ::apollo::perception::inference::TanHParameter(*from._impl_.tanh_param_);
  }
  if (from._internal_has_threshold_param()) {
    _impl_.threshold_param_ = new ::apollo::perception::inference::ThresholdParameter(*from._impl_.threshold_param_);
  }
  if (from._internal_has_window_data_param()) {
    _impl_.window_data_param_ = new ::apollo::perception::inference::WindowDataParameter(*from._impl_.window_data_param_);
  }
  if (from._internal_has_python_param()) {
    _impl_.python_param_ = new ::apollo::perception::inference::PythonParameter(*from._impl_.python_param_);
  }
  if (from._internal_has_prelu_param()) {
    _impl_.prelu_param_ = new ::apollo::perception::inference::PReLUParameter(*from._impl_.prelu_param_);
  }
  if (from._internal_has_spp_param()) {
    _impl_.spp_param_ = new ::apollo::perception::inference::SPPParameter(*from._impl_.spp_param_);
  }
  if (from._internal_has_reshape_param()) {
    _impl_.reshape_param_ = new ::apollo::perception::inference::ReshapeParameter(*from._impl_.reshape_param_);
  }
  if (from._internal_has_log_param()) {
    _impl_.log_param_ = new ::apollo::perception::inference::LogParameter(*from._impl_.log_param_);
  }
  if (from._internal_has_flatten_param()) {
    _impl_.flatten_param_ = new ::apollo::perception::inference::FlattenParameter(*from._impl_.flatten_param_);
  }
  if (from._internal_has_reduction_param()) {
    _impl_.reduction_param_ = new ::apollo::perception::inference::ReductionParameter(*from._impl_.reduction_param_);
  }
  if (from._internal_has_embed_param()) {
    _impl_.embed_param_ = new ::apollo::perception::inference::EmbedParameter(*from._impl_.embed_param_);
  }
  if (from._internal_has_tile_param()) {
    _impl_.tile_param_ = new ::apollo::perception::inference::TileParameter(*from._impl_.tile_param_);
  }
  if (from._internal_has_batch_norm_param()) {
    _impl_.batch_norm_param_ = new ::apollo::perception::inference::BatchNormParameter(*from._impl_.batch_norm_param_);
  }
  if (from._internal_has_elu_param()) {
    _impl_.elu_param_ = new ::apollo::perception::inference::ELUParameter(*from._impl_.elu_param_);
  }
  if (from._internal_has_bias_param()) {
    _impl_.bias_param_ = new ::apollo::perception::inference::BiasParameter(*from._impl_.bias_param_);
  }
  if (from._internal_has_scale_param()) {
    _impl_.scale_param_ = new ::apollo::perception::inference::ScaleParameter(*from._impl_.scale_param_);
  }
  if (from._internal_has_input_param()) {
    _impl_.input_param_ = new ::apollo::perception::inference::InputParameter(*from._impl_.input_param_);
  }
  if (from._internal_has_crop_param()) {
    _impl_.crop_param_ = new ::apollo::perception::inference::CropParameter(*from._impl_.crop_param_);
  }
  if (from._internal_has_parameter_param()) {
    _impl_.parameter_param_ = new ::apollo::perception::inference::ParameterParameter(*from._impl_.parameter_param_);
  }
  if (from._internal_has_recurrent_param()) {
    _impl_.recurrent_param_ = new ::apollo::perception::inference::RecurrentParameter(*from._impl_.recurrent_param_);
  }
  if (from._internal_has_annotated_data_param()) {
    _impl_.annotated_data_param_ = new ::apollo::perception::inference::AnnotatedDataParameter(*from._impl_.annotated_data_param_);
  }
  if (from._internal_has_multibox_loss_param()) {
    _impl_.multibox_loss_param_ = new ::apollo::perception::inference::MultiBoxLossParameter(*from._impl_.multibox_loss_param_);
  }
  if (from._internal_has_permute_param()) {
    _impl_.permute_param_ = new ::apollo::perception::inference::PermuteParameter(*from._impl_.permute_param_);
  }
  if (from._internal_has_prior_box_param()) {
    _impl_.prior_box_param_ = new ::apollo::perception::inference::PriorBoxParameter(*from._impl_.prior_box_param_);
  }
  if (from._internal_has_detection_output_param()) {
    _impl_.detection_output_param_ = new ::apollo::perception::inference::DetectionOutputParameter(*from._impl_.detection_output_param_);
  }
  if (from._internal_has_detection_evaluate_param()) {
    _impl_.detection_evaluate_param_ = new ::apollo::perception::inference::DetectionEvaluateParameter(*from._impl_.detection_evaluate_param_);
  }
  if (from._internal_has_norm_param()) {
    _impl_.norm_param_ = new ::apollo::perception::inference::NormalizeParameter(*from._impl_.norm_param_);
  }
  if (from._internal_has_video_data_param()) {
    _impl_.video_data_param_ = new ::apollo::perception::inference::VideoDataParameter(*from._impl_.video_data_param_);
  }
  if (from._internal_has_dfmb_psroi_pooling_param()) {
    _impl_.dfmb_psroi_pooling_param_ = new ::apollo::perception::inference::DFMBPSROIAlignParameter(*from._impl_.dfmb_psroi_pooling_param_);
  }
  if (from._internal_has_bbox_reg_param()) {
    _impl_.bbox_reg_param_ = new ::apollo::perception::inference::BBoxRegParameter(*from._impl_.bbox_reg_param_);
  }
  if (from._internal_has_detection_output_ssd_param()) {
    _impl_.detection_output_ssd_param_ = new ::apollo::perception::inference::DetectionOutputSSDParameter(*from._impl_.detection_output_ssd_param_);
  }
  if (from._internal_has_region_param()) {
    _impl_.region_param_ = new ::apollo::perception::inference::RegionParameter(*from._impl_.region_param_);
  }
  if (from._internal_has_reorg_param()) {
    _impl_.reorg_param_ = new ::apollo::perception::inference::ReorgParameter(*from._impl_.reorg_param_);
  }
  if (from._internal_has_region_output_param()) {
    _impl_.region_output_param_ = new ::apollo::perception::inference::RegionOutputParameter(*from._impl_.region_output_param_);
  }
  if (from._internal_has_region_proposal_param()) {
    _impl_.region_proposal_param_ = new ::apollo::perception::inference::RegionProposalParameter(*from._impl_.region_proposal_param_);
  }
  if (from._internal_has_padding_param()) {
    _impl_.padding_param_ = new ::apollo::perception::inference::PaddingParameter(*from._impl_.padding_param_);
  }
  if (from._internal_has_yolo_target_param()) {
    _impl_.yolo_target_param_ = new ::apollo::perception::inference::YoloTargetParameter(*from._impl_.yolo_target_param_);
  }
  if (from._internal_has_yolo_anchors_param()) {
    _impl_.yolo_anchors_param_ = new ::apollo::perception::inference::YoloAnchorsParameter(*from._impl_.yolo_anchors_param_);
  }
  if (from._internal_has_yolo_loss_param()) {
    _impl_.yolo_loss_param_ = new ::apollo::perception::inference::YoloLossParameter(*from._impl_.yolo_loss_param_);
  }
  if (from._internal_has_yolo_dump_param()) {
    _impl_.yolo_dump_param_ = new ::apollo::perception::inference::YoloDumpParameter(*from._impl_.yolo_dump_param_);
  }
  if (from._internal_has_roi_pooling_param()) {
    _impl_.roi_pooling_param_ = new ::apollo::perception::inference::ROIPoolingParameter(*from._impl_.roi_pooling_param_);
  }
  _impl_.phase_ = from._impl_.phase_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LayerParameter)
}

inline void LayerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_){arena}
    , decltype(_impl_.top_){arena}
    , decltype(_impl_.loss_weight_){arena}
    , decltype(_impl_.param_){arena}
    , decltype(_impl_.blobs_){arena}
    , decltype(_impl_.include_){arena}
    , decltype(_impl_.exclude_){arena}
    , decltype(_impl_.propagate_down_){arena}
    , decltype(_impl_.yolo_data_param_){arena}
    , decltype(_impl_.data_prob_param_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.transform_param_){nullptr}
    , decltype(_impl_.loss_param_){nullptr}
    , decltype(_impl_.accuracy_param_){nullptr}
    , decltype(_impl_.argmax_param_){nullptr}
    , decltype(_impl_.concat_param_){nullptr}
    , decltype(_impl_.contrastive_loss_param_){nullptr}
    , decltype(_impl_.convolution_param_){nullptr}
    , decltype(_impl_.data_param_){nullptr}
    , decltype(_impl_.dropout_param_){nullptr}
    , decltype(_impl_.dummy_data_param_){nullptr}
    , decltype(_impl_.eltwise_param_){nullptr}
    , decltype(_impl_.exp_param_){nullptr}
    , decltype(_impl_.hdf5_data_param_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.hinge_loss_param_){nullptr}
    , decltype(_impl_.image_data_param_){nullptr}
    , decltype(_impl_.infogain_loss_param_){nullptr}
    , decltype(_impl_.inner_product_param_){nullptr}
    , decltype(_impl_.lrn_param_){nullptr}
    , decltype(_impl_.memory_data_param_){nullptr}
    , decltype(_impl_.mvn_param_){nullptr}
    , decltype(_impl_.pooling_param_){nullptr}
    , decltype(_impl_.power_param_){nullptr}
    , decltype(_impl_.relu_param_){nullptr}
    , decltype(_impl_.sigmoid_param_){nullptr}
    , decltype(_impl_.softmax_param_){nullptr}
    , decltype(_impl_.slice_param_){nullptr}
    , decltype(_impl_.tanh_param_){nullptr}
    , decltype(_impl_.threshold_param_){nullptr}
    , decltype(_impl_.window_data_param_){nullptr}
    , decltype(_impl_.python_param_){nullptr}
    , decltype(_impl_.prelu_param_){nullptr}
    , decltype(_impl_.spp_param_){nullptr}
    , decltype(_impl_.reshape_param_){nullptr}
    , decltype(_impl_.log_param_){nullptr}
    , decltype(_impl_.flatten_param_){nullptr}
    , decltype(_impl_.reduction_param_){nullptr}
    , decltype(_impl_.embed_param_){nullptr}
    , decltype(_impl_.tile_param_){nullptr}
    , decltype(_impl_.batch_norm_param_){nullptr}
    , decltype(_impl_.elu_param_){nullptr}
    , decltype(_impl_.bias_param_){nullptr}
    , decltype(_impl_.scale_param_){nullptr}
    , decltype(_impl_.input_param_){nullptr}
    , decltype(_impl_.crop_param_){nullptr}
    , decltype(_impl_.parameter_param_){nullptr}
    , decltype(_impl_.recurrent_param_){nullptr}
    , decltype(_impl_.annotated_data_param_){nullptr}
    , decltype(_impl_.multibox_loss_param_){nullptr}
    , decltype(_impl_.permute_param_){nullptr}
    , decltype(_impl_.prior_box_param_){nullptr}
    , decltype(_impl_.detection_output_param_){nullptr}
    , decltype(_impl_.detection_evaluate_param_){nullptr}
    , decltype(_impl_.norm_param_){nullptr}
    , decltype(_impl_.video_data_param_){nullptr}
    , decltype(_impl_.dfmb_psroi_pooling_param_){nullptr}
    , decltype(_impl_.bbox_reg_param_){nullptr}
    , decltype(_impl_.detection_output_ssd_param_){nullptr}
    , decltype(_impl_.region_param_){nullptr}
    , decltype(_impl_.reorg_param_){nullptr}
    , decltype(_impl_.region_output_param_){nullptr}
    , decltype(_impl_.region_proposal_param_){nullptr}
    , decltype(_impl_.padding_param_){nullptr}
    , decltype(_impl_.yolo_target_param_){nullptr}
    , decltype(_impl_.yolo_anchors_param_){nullptr}
    , decltype(_impl_.yolo_loss_param_){nullptr}
    , decltype(_impl_.yolo_dump_param_){nullptr}
    , decltype(_impl_.roi_pooling_param_){nullptr}
    , decltype(_impl_.phase_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LayerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bottom_.~RepeatedPtrField();
  _impl_.top_.~RepeatedPtrField();
  _impl_.loss_weight_.~RepeatedField();
  _impl_.param_.~RepeatedPtrField();
  _impl_.blobs_.~RepeatedPtrField();
  _impl_.include_.~RepeatedPtrField();
  _impl_.exclude_.~RepeatedPtrField();
  _impl_.propagate_down_.~RepeatedField();
  _impl_.yolo_data_param_.~RepeatedPtrField();
  _impl_.data_prob_param_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_param_;
  if (this != internal_default_instance()) delete _impl_.loss_param_;
  if (this != internal_default_instance()) delete _impl_.accuracy_param_;
  if (this != internal_default_instance()) delete _impl_.argmax_param_;
  if (this != internal_default_instance()) delete _impl_.concat_param_;
  if (this != internal_default_instance()) delete _impl_.contrastive_loss_param_;
  if (this != internal_default_instance()) delete _impl_.convolution_param_;
  if (this != internal_default_instance()) delete _impl_.data_param_;
  if (this != internal_default_instance()) delete _impl_.dropout_param_;
  if (this != internal_default_instance()) delete _impl_.dummy_data_param_;
  if (this != internal_default_instance()) delete _impl_.eltwise_param_;
  if (this != internal_default_instance()) delete _impl_.exp_param_;
  if (this != internal_default_instance()) delete _impl_.hdf5_data_param_;
  if (this != internal_default_instance()) delete _impl_.hdf5_output_param_;
  if (this != internal_default_instance()) delete _impl_.hinge_loss_param_;
  if (this != internal_default_instance()) delete _impl_.image_data_param_;
  if (this != internal_default_instance()) delete _impl_.infogain_loss_param_;
  if (this != internal_default_instance()) delete _impl_.inner_product_param_;
  if (this != internal_default_instance()) delete _impl_.lrn_param_;
  if (this != internal_default_instance()) delete _impl_.memory_data_param_;
  if (this != internal_default_instance()) delete _impl_.mvn_param_;
  if (this != internal_default_instance()) delete _impl_.pooling_param_;
  if (this != internal_default_instance()) delete _impl_.power_param_;
  if (this != internal_default_instance()) delete _impl_.relu_param_;
  if (this != internal_default_instance()) delete _impl_.sigmoid_param_;
  if (this != internal_default_instance()) delete _impl_.softmax_param_;
  if (this != internal_default_instance()) delete _impl_.slice_param_;
  if (this != internal_default_instance()) delete _impl_.tanh_param_;
  if (this != internal_default_instance()) delete _impl_.threshold_param_;
  if (this != internal_default_instance()) delete _impl_.window_data_param_;
  if (this != internal_default_instance()) delete _impl_.python_param_;
  if (this != internal_default_instance()) delete _impl_.prelu_param_;
  if (this != internal_default_instance()) delete _impl_.spp_param_;
  if (this != internal_default_instance()) delete _impl_.reshape_param_;
  if (this != internal_default_instance()) delete _impl_.log_param_;
  if (this != internal_default_instance()) delete _impl_.flatten_param_;
  if (this != internal_default_instance()) delete _impl_.reduction_param_;
  if (this != internal_default_instance()) delete _impl_.embed_param_;
  if (this != internal_default_instance()) delete _impl_.tile_param_;
  if (this != internal_default_instance()) delete _impl_.batch_norm_param_;
  if (this != internal_default_instance()) delete _impl_.elu_param_;
  if (this != internal_default_instance()) delete _impl_.bias_param_;
  if (this != internal_default_instance()) delete _impl_.scale_param_;
  if (this != internal_default_instance()) delete _impl_.input_param_;
  if (this != internal_default_instance()) delete _impl_.crop_param_;
  if (this != internal_default_instance()) delete _impl_.parameter_param_;
  if (this != internal_default_instance()) delete _impl_.recurrent_param_;
  if (this != internal_default_instance()) delete _impl_.annotated_data_param_;
  if (this != internal_default_instance()) delete _impl_.multibox_loss_param_;
  if (this != internal_default_instance()) delete _impl_.permute_param_;
  if (this != internal_default_instance()) delete _impl_.prior_box_param_;
  if (this != internal_default_instance()) delete _impl_.detection_output_param_;
  if (this != internal_default_instance()) delete _impl_.detection_evaluate_param_;
  if (this != internal_default_instance()) delete _impl_.norm_param_;
  if (this != internal_default_instance()) delete _impl_.video_data_param_;
  if (this != internal_default_instance()) delete _impl_.dfmb_psroi_pooling_param_;
  if (this != internal_default_instance()) delete _impl_.bbox_reg_param_;
  if (this != internal_default_instance()) delete _impl_.detection_output_ssd_param_;
  if (this != internal_default_instance()) delete _impl_.region_param_;
  if (this != internal_default_instance()) delete _impl_.reorg_param_;
  if (this != internal_default_instance()) delete _impl_.region_output_param_;
  if (this != internal_default_instance()) delete _impl_.region_proposal_param_;
  if (this != internal_default_instance()) delete _impl_.padding_param_;
  if (this != internal_default_instance()) delete _impl_.yolo_target_param_;
  if (this != internal_default_instance()) delete _impl_.yolo_anchors_param_;
  if (this != internal_default_instance()) delete _impl_.yolo_loss_param_;
  if (this != internal_default_instance()) delete _impl_.yolo_dump_param_;
  if (this != internal_default_instance()) delete _impl_.roi_pooling_param_;
}

void LayerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bottom_.Clear();
  _impl_.top_.Clear();
  _impl_.loss_weight_.Clear();
  _impl_.param_.Clear();
  _impl_.blobs_.Clear();
  _impl_.include_.Clear();
  _impl_.exclude_.Clear();
  _impl_.propagate_down_.Clear();
  _impl_.yolo_data_param_.Clear();
  _impl_.data_prob_param_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.transform_param_ != nullptr);
      _impl_.transform_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.loss_param_ != nullptr);
      _impl_.loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.accuracy_param_ != nullptr);
      _impl_.accuracy_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.argmax_param_ != nullptr);
      _impl_.argmax_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.concat_param_ != nullptr);
      _impl_.concat_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.contrastive_loss_param_ != nullptr);
      _impl_.contrastive_loss_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.convolution_param_ != nullptr);
      _impl_.convolution_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.data_param_ != nullptr);
      _impl_.data_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.dropout_param_ != nullptr);
      _impl_.dropout_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.dummy_data_param_ != nullptr);
      _impl_.dummy_data_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.eltwise_param_ != nullptr);
      _impl_.eltwise_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.exp_param_ != nullptr);
      _impl_.exp_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.hdf5_data_param_ != nullptr);
      _impl_.hdf5_data_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.hdf5_output_param_ != nullptr);
      _impl_.hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.hinge_loss_param_ != nullptr);
      _impl_.hinge_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.image_data_param_ != nullptr);
      _impl_.image_data_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.infogain_loss_param_ != nullptr);
      _impl_.infogain_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.inner_product_param_ != nullptr);
      _impl_.inner_product_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.lrn_param_ != nullptr);
      _impl_.lrn_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.memory_data_param_ != nullptr);
      _impl_.memory_data_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.mvn_param_ != nullptr);
      _impl_.mvn_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.pooling_param_ != nullptr);
      _impl_.pooling_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.power_param_ != nullptr);
      _impl_.power_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.relu_param_ != nullptr);
      _impl_.relu_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.sigmoid_param_ != nullptr);
      _impl_.sigmoid_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.softmax_param_ != nullptr);
      _impl_.softmax_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.slice_param_ != nullptr);
      _impl_.slice_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tanh_param_ != nullptr);
      _impl_.tanh_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.threshold_param_ != nullptr);
      _impl_.threshold_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.window_data_param_ != nullptr);
      _impl_.window_data_param_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.python_param_ != nullptr);
      _impl_.python_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.prelu_param_ != nullptr);
      _impl_.prelu_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.spp_param_ != nullptr);
      _impl_.spp_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.reshape_param_ != nullptr);
      _impl_.reshape_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.log_param_ != nullptr);
      _impl_.log_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.flatten_param_ != nullptr);
      _impl_.flatten_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.reduction_param_ != nullptr);
      _impl_.reduction_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.embed_param_ != nullptr);
      _impl_.embed_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tile_param_ != nullptr);
      _impl_.tile_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.batch_norm_param_ != nullptr);
      _impl_.batch_norm_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.elu_param_ != nullptr);
      _impl_.elu_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.bias_param_ != nullptr);
      _impl_.bias_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.scale_param_ != nullptr);
      _impl_.scale_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.input_param_ != nullptr);
      _impl_.input_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.crop_param_ != nullptr);
      _impl_.crop_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.parameter_param_ != nullptr);
      _impl_.parameter_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.recurrent_param_ != nullptr);
      _impl_.recurrent_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.annotated_data_param_ != nullptr);
      _impl_.annotated_data_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.multibox_loss_param_ != nullptr);
      _impl_.multibox_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.permute_param_ != nullptr);
      _impl_.permute_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.prior_box_param_ != nullptr);
      _impl_.prior_box_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.detection_output_param_ != nullptr);
      _impl_.detection_output_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.detection_evaluate_param_ != nullptr);
      _impl_.detection_evaluate_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.norm_param_ != nullptr);
      _impl_.norm_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.video_data_param_ != nullptr);
      _impl_.video_data_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.dfmb_psroi_pooling_param_ != nullptr);
      _impl_.dfmb_psroi_pooling_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.bbox_reg_param_ != nullptr);
      _impl_.bbox_reg_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.detection_output_ssd_param_ != nullptr);
      _impl_.detection_output_ssd_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.region_param_ != nullptr);
      _impl_.region_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.reorg_param_ != nullptr);
      _impl_.reorg_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.region_output_param_ != nullptr);
      _impl_.region_output_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.region_proposal_param_ != nullptr);
      _impl_.region_proposal_param_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.padding_param_ != nullptr);
      _impl_.padding_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.yolo_target_param_ != nullptr);
      _impl_.yolo_target_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.yolo_anchors_param_ != nullptr);
      _impl_.yolo_anchors_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.yolo_loss_param_ != nullptr);
      _impl_.yolo_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.yolo_dump_param_ != nullptr);
      _impl_.yolo_dump_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.roi_pooling_param_ != nullptr);
      _impl_.roi_pooling_param_->Clear();
    }
  }
  _impl_.phase_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bottom();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.bottom");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.top");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float loss_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_loss_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_loss_weight(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ParamSpec param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule include = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_include(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule exclude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.Phase phase = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated bool propagate_down = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_propagate_down(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_propagate_down(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter loss_param = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_accuracy_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_argmax_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrastive_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter data_param = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropout_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dummy_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_eltwise_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpParameter exp_param = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinge_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_infogain_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_product_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrn_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvn_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pooling_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PowerParameter power_param = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_relu_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigmoid_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_softmax_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SliceParameter slice_param = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tanh_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PythonParameter python_param = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prelu_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter spp_param = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spp_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reshape_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LogParameter log_param = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reduction_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_embed_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TileParameter tile_param = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_norm_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ELUParameter elu_param = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_elu_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BiasParameter bias_param = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InputParameter input_param = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.CropParameter crop_param = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_crop_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotated_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multibox_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_permute_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior_box_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_evaluate_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_norm_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_dfmb_psroi_pooling_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BBoxRegParameter bbox_reg_param = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox_reg_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionOutputSSDParameter detection_output_ssd_param = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_ssd_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionParameter region_param = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reorg_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_proposal_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
      case 204801:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_target_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
      case 204802:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_anchors_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
      case 204803:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
      case 204804:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_dump_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
      case 1707111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_add_yolo_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float data_prob_param = 1707112;
      case 1707112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _internal_add_data_prob_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_prob_param(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
      case 8266711:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_pooling_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->_internal_bottom_size(); i < n; i++) {
    const auto& s = this->_internal_bottom(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.bottom");
    target = stream->WriteString(3, s, target);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->_internal_top_size(); i < n; i++) {
    const auto& s = this->_internal_top(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.top");
    target = stream->WriteString(4, s, target);
  }

  // repeated float loss_weight = 5;
  for (int i = 0, n = this->_internal_loss_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_loss_weight(i), target);
  }

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_param_size()); i < n; i++) {
    const auto& repfield = this->_internal_param(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_blobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_include_size()); i < n; i++) {
    const auto& repfield = this->_internal_include(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exclude_size()); i < n; i++) {
    const auto& repfield = this->_internal_exclude(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .apollo.perception.inference.Phase phase = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_phase(), target);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0, n = this->_internal_propagate_down_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_propagate_down(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::transform_param(this),
        _Internal::transform_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::loss_param(this),
        _Internal::loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::accuracy_param(this),
        _Internal::accuracy_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::argmax_param(this),
        _Internal::argmax_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::concat_param(this),
        _Internal::concat_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::contrastive_loss_param(this),
        _Internal::contrastive_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::convolution_param(this),
        _Internal::convolution_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::data_param(this),
        _Internal::data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::dropout_param(this),
        _Internal::dropout_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::dummy_data_param(this),
        _Internal::dummy_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::eltwise_param(this),
        _Internal::eltwise_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::exp_param(this),
        _Internal::exp_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::hdf5_data_param(this),
        _Internal::hdf5_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::hdf5_output_param(this),
        _Internal::hdf5_output_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::hinge_loss_param(this),
        _Internal::hinge_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::image_data_param(this),
        _Internal::image_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::infogain_loss_param(this),
        _Internal::infogain_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::inner_product_param(this),
        _Internal::inner_product_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::lrn_param(this),
        _Internal::lrn_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::memory_data_param(this),
        _Internal::memory_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::mvn_param(this),
        _Internal::mvn_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::pooling_param(this),
        _Internal::pooling_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(122, _Internal::power_param(this),
        _Internal::power_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::relu_param(this),
        _Internal::relu_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::sigmoid_param(this),
        _Internal::sigmoid_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, _Internal::softmax_param(this),
        _Internal::softmax_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::slice_param(this),
        _Internal::slice_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(127, _Internal::tanh_param(this),
        _Internal::tanh_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::threshold_param(this),
        _Internal::threshold_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::window_data_param(this),
        _Internal::window_data_param(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .apollo.perception.inference.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::python_param(this),
        _Internal::python_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::prelu_param(this),
        _Internal::prelu_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::spp_param(this),
        _Internal::spp_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::reshape_param(this),
        _Internal::reshape_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::log_param(this),
        _Internal::log_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(135, _Internal::flatten_param(this),
        _Internal::flatten_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(136, _Internal::reduction_param(this),
        _Internal::reduction_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(137, _Internal::embed_param(this),
        _Internal::embed_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(138, _Internal::tile_param(this),
        _Internal::tile_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, _Internal::batch_norm_param(this),
        _Internal::batch_norm_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, _Internal::elu_param(this),
        _Internal::elu_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(141, _Internal::bias_param(this),
        _Internal::bias_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(142, _Internal::scale_param(this),
        _Internal::scale_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(143, _Internal::input_param(this),
        _Internal::input_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.CropParameter crop_param = 144;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(144, _Internal::crop_param(this),
        _Internal::crop_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(145, _Internal::parameter_param(this),
        _Internal::parameter_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(146, _Internal::recurrent_param(this),
        _Internal::recurrent_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, _Internal::annotated_data_param(this),
        _Internal::annotated_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(201, _Internal::multibox_loss_param(this),
        _Internal::multibox_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(202, _Internal::permute_param(this),
        _Internal::permute_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(203, _Internal::prior_box_param(this),
        _Internal::prior_box_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204, _Internal::detection_output_param(this),
        _Internal::detection_output_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(205, _Internal::detection_evaluate_param(this),
        _Internal::detection_evaluate_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(206, _Internal::norm_param(this),
        _Internal::norm_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(207, _Internal::video_data_param(this),
        _Internal::video_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(208, _Internal::dfmb_psroi_pooling_param(this),
        _Internal::dfmb_psroi_pooling_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.BBoxRegParameter bbox_reg_param = 209;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(209, _Internal::bbox_reg_param(this),
        _Internal::bbox_reg_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DetectionOutputSSDParameter detection_output_ssd_param = 210;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(210, _Internal::detection_output_ssd_param(this),
        _Internal::detection_output_ssd_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.RegionParameter region_param = 300;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::region_param(this),
        _Internal::region_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::reorg_param(this),
        _Internal::reorg_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(310, _Internal::region_output_param(this),
        _Internal::region_output_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::region_proposal_param(this),
        _Internal::region_proposal_param(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::padding_param(this),
        _Internal::padding_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204801, _Internal::yolo_target_param(this),
        _Internal::yolo_target_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204802, _Internal::yolo_anchors_param(this),
        _Internal::yolo_anchors_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204803, _Internal::yolo_loss_param(this),
        _Internal::yolo_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204804, _Internal::yolo_dump_param(this),
        _Internal::yolo_dump_param(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_yolo_data_param_size()); i < n; i++) {
    const auto& repfield = this->_internal_yolo_data_param(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1707111, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float data_prob_param = 1707112;
  for (int i = 0, n = this->_internal_data_prob_param_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1707112, this->_internal_data_prob_param(i), target);
  }

  // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8266711, _Internal::roi_pooling_param(this),
        _Internal::roi_pooling_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bottom_.size());
  for (int i = 0, n = _impl_.bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bottom_.Get(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.top_.size());
  for (int i = 0, n = _impl_.top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.top_.Get(i));
  }

  // repeated float loss_weight = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_loss_weight_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  total_size += 1UL * this->_internal_param_size();
  for (const auto& msg : this->_impl_.param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->_impl_.blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  total_size += 1UL * this->_internal_include_size();
  for (const auto& msg : this->_impl_.include_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  total_size += 1UL * this->_internal_exclude_size();
  for (const auto& msg : this->_impl_.exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool propagate_down = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_propagate_down_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_propagate_down_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  total_size += 4UL * this->_internal_yolo_data_param_size();
  for (const auto& msg : this->_impl_.yolo_data_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float data_prob_param = 1707112;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_prob_param_size());
    size_t data_size = 4UL * count;
    total_size += 4 *
                  ::_pbi::FromIntSize(this->_internal_data_prob_param_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transform_param_);
    }

    // optional .apollo.perception.inference.LossParameter loss_param = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loss_param_);
    }

    // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accuracy_param_);
    }

    // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.argmax_param_);
    }

    // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.concat_param_);
    }

    // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contrastive_loss_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.convolution_param_);
    }

    // optional .apollo.perception.inference.DataParameter data_param = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_param_);
    }

    // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dropout_param_);
    }

    // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dummy_data_param_);
    }

    // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.eltwise_param_);
    }

    // optional .apollo.perception.inference.ExpParameter exp_param = 111;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exp_param_);
    }

    // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdf5_data_param_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hinge_loss_param_);
    }

    // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_data_param_);
    }

    // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.infogain_loss_param_);
    }

    // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inner_product_param_);
    }

    // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lrn_param_);
    }

    // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.memory_data_param_);
    }

    // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mvn_param_);
    }

    // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pooling_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.PowerParameter power_param = 122;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.power_param_);
    }

    // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relu_param_);
    }

    // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sigmoid_param_);
    }

    // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.softmax_param_);
    }

    // optional .apollo.perception.inference.SliceParameter slice_param = 126;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slice_param_);
    }

    // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tanh_param_);
    }

    // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.threshold_param_);
    }

    // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_data_param_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.PythonParameter python_param = 130;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.python_param_);
    }

    // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.prelu_param_);
    }

    // optional .apollo.perception.inference.SPPParameter spp_param = 132;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spp_param_);
    }

    // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reshape_param_);
    }

    // optional .apollo.perception.inference.LogParameter log_param = 134;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.log_param_);
    }

    // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.flatten_param_);
    }

    // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reduction_param_);
    }

    // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.embed_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.TileParameter tile_param = 138;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tile_param_);
    }

    // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.batch_norm_param_);
    }

    // optional .apollo.perception.inference.ELUParameter elu_param = 140;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.elu_param_);
    }

    // optional .apollo.perception.inference.BiasParameter bias_param = 141;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_param_);
    }

    // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scale_param_);
    }

    // optional .apollo.perception.inference.InputParameter input_param = 143;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_param_);
    }

    // optional .apollo.perception.inference.CropParameter crop_param = 144;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.crop_param_);
    }

    // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameter_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recurrent_param_);
    }

    // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotated_data_param_);
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.multibox_loss_param_);
    }

    // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.permute_param_);
    }

    // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.prior_box_param_);
    }

    // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.detection_output_param_);
    }

    // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.detection_evaluate_param_);
    }

    // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.norm_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.video_data_param_);
    }

    // optional .apollo.perception.inference.DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dfmb_psroi_pooling_param_);
    }

    // optional .apollo.perception.inference.BBoxRegParameter bbox_reg_param = 209;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox_reg_param_);
    }

    // optional .apollo.perception.inference.DetectionOutputSSDParameter detection_output_ssd_param = 210;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.detection_output_ssd_param_);
    }

    // optional .apollo.perception.inference.RegionParameter region_param = 300;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.region_param_);
    }

    // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reorg_param_);
    }

    // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.region_output_param_);
    }

    // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.region_proposal_param_);
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.padding_param_);
    }

    // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yolo_target_param_);
    }

    // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yolo_anchors_param_);
    }

    // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yolo_loss_param_);
    }

    // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yolo_dump_param_);
    }

    // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
    if (cached_has_bits & 0x00000020u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_pooling_param_);
    }

    // optional .apollo.perception.inference.Phase phase = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerParameter::GetClassData() const { return &_class_data_; }

void LayerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayerParameter *>(to)->MergeFrom(
      static_cast<const LayerParameter &>(from));
}


void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bottom_.MergeFrom(from._impl_.bottom_);
  _impl_.top_.MergeFrom(from._impl_.top_);
  _impl_.loss_weight_.MergeFrom(from._impl_.loss_weight_);
  _impl_.param_.MergeFrom(from._impl_.param_);
  _impl_.blobs_.MergeFrom(from._impl_.blobs_);
  _impl_.include_.MergeFrom(from._impl_.include_);
  _impl_.exclude_.MergeFrom(from._impl_.exclude_);
  _impl_.propagate_down_.MergeFrom(from._impl_.propagate_down_);
  _impl_.yolo_data_param_.MergeFrom(from._impl_.yolo_data_param_);
  _impl_.data_prob_param_.MergeFrom(from._impl_.data_prob_param_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transform_param()->::apollo::perception::inference::TransformationParameter::MergeFrom(from._internal_transform_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_loss_param()->::apollo::perception::inference::LossParameter::MergeFrom(from._internal_loss_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_accuracy_param()->::apollo::perception::inference::AccuracyParameter::MergeFrom(from._internal_accuracy_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_argmax_param()->::apollo::perception::inference::ArgMaxParameter::MergeFrom(from._internal_argmax_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_concat_param()->::apollo::perception::inference::ConcatParameter::MergeFrom(from._internal_concat_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_contrastive_loss_param()->::apollo::perception::inference::ContrastiveLossParameter::MergeFrom(from._internal_contrastive_loss_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_convolution_param()->::apollo::perception::inference::ConvolutionParameter::MergeFrom(from._internal_convolution_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_data_param()->::apollo::perception::inference::DataParameter::MergeFrom(from._internal_data_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_dropout_param()->::apollo::perception::inference::DropoutParameter::MergeFrom(from._internal_dropout_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_dummy_data_param()->::apollo::perception::inference::DummyDataParameter::MergeFrom(from._internal_dummy_data_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_eltwise_param()->::apollo::perception::inference::EltwiseParameter::MergeFrom(from._internal_eltwise_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_exp_param()->::apollo::perception::inference::ExpParameter::MergeFrom(from._internal_exp_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_hdf5_data_param()->::apollo::perception::inference::HDF5DataParameter::MergeFrom(from._internal_hdf5_data_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_hinge_loss_param()->::apollo::perception::inference::HingeLossParameter::MergeFrom(from._internal_hinge_loss_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_image_data_param()->::apollo::perception::inference::ImageDataParameter::MergeFrom(from._internal_image_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_infogain_loss_param()->::apollo::perception::inference::InfogainLossParameter::MergeFrom(from._internal_infogain_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_inner_product_param()->::apollo::perception::inference::InnerProductParameter::MergeFrom(from._internal_inner_product_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_lrn_param()->::apollo::perception::inference::LRNParameter::MergeFrom(from._internal_lrn_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_memory_data_param()->::apollo::perception::inference::MemoryDataParameter::MergeFrom(from._internal_memory_data_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_mvn_param()->::apollo::perception::inference::MVNParameter::MergeFrom(from._internal_mvn_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_pooling_param()->::apollo::perception::inference::PoolingParameter::MergeFrom(from._internal_pooling_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_power_param()->::apollo::perception::inference::PowerParameter::MergeFrom(from._internal_power_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_relu_param()->::apollo::perception::inference::ReLUParameter::MergeFrom(from._internal_relu_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_sigmoid_param()->::apollo::perception::inference::SigmoidParameter::MergeFrom(from._internal_sigmoid_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_softmax_param()->::apollo::perception::inference::SoftmaxParameter::MergeFrom(from._internal_softmax_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_slice_param()->::apollo::perception::inference::SliceParameter::MergeFrom(from._internal_slice_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_tanh_param()->::apollo::perception::inference::TanHParameter::MergeFrom(from._internal_tanh_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_threshold_param()->::apollo::perception::inference::ThresholdParameter::MergeFrom(from._internal_threshold_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_window_data_param()->::apollo::perception::inference::WindowDataParameter::MergeFrom(from._internal_window_data_param());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_python_param()->::apollo::perception::inference::PythonParameter::MergeFrom(from._internal_python_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prelu_param()->::apollo::perception::inference::PReLUParameter::MergeFrom(from._internal_prelu_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spp_param()->::apollo::perception::inference::SPPParameter::MergeFrom(from._internal_spp_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reshape_param()->::apollo::perception::inference::ReshapeParameter::MergeFrom(from._internal_reshape_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_log_param()->::apollo::perception::inference::LogParameter::MergeFrom(from._internal_log_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_flatten_param()->::apollo::perception::inference::FlattenParameter::MergeFrom(from._internal_flatten_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_reduction_param()->::apollo::perception::inference::ReductionParameter::MergeFrom(from._internal_reduction_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_embed_param()->::apollo::perception::inference::EmbedParameter::MergeFrom(from._internal_embed_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tile_param()->::apollo::perception::inference::TileParameter::MergeFrom(from._internal_tile_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_batch_norm_param()->::apollo::perception::inference::BatchNormParameter::MergeFrom(from._internal_batch_norm_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_elu_param()->::apollo::perception::inference::ELUParameter::MergeFrom(from._internal_elu_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_bias_param()->::apollo::perception::inference::BiasParameter::MergeFrom(from._internal_bias_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_scale_param()->::apollo::perception::inference::ScaleParameter::MergeFrom(from._internal_scale_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_input_param()->::apollo::perception::inference::InputParameter::MergeFrom(from._internal_input_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_crop_param()->::apollo::perception::inference::CropParameter::MergeFrom(from._internal_crop_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_parameter_param()->::apollo::perception::inference::ParameterParameter::MergeFrom(from._internal_parameter_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_recurrent_param()->::apollo::perception::inference::RecurrentParameter::MergeFrom(from._internal_recurrent_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_annotated_data_param()->::apollo::perception::inference::AnnotatedDataParameter::MergeFrom(from._internal_annotated_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_multibox_loss_param()->::apollo::perception::inference::MultiBoxLossParameter::MergeFrom(from._internal_multibox_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_permute_param()->::apollo::perception::inference::PermuteParameter::MergeFrom(from._internal_permute_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_prior_box_param()->::apollo::perception::inference::PriorBoxParameter::MergeFrom(from._internal_prior_box_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_detection_output_param()->::apollo::perception::inference::DetectionOutputParameter::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_detection_evaluate_param()->::apollo::perception::inference::DetectionEvaluateParameter::MergeFrom(from._internal_detection_evaluate_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_norm_param()->::apollo::perception::inference::NormalizeParameter::MergeFrom(from._internal_norm_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_video_data_param()->::apollo::perception::inference::VideoDataParameter::MergeFrom(from._internal_video_data_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_dfmb_psroi_pooling_param()->::apollo::perception::inference::DFMBPSROIAlignParameter::MergeFrom(from._internal_dfmb_psroi_pooling_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_bbox_reg_param()->::apollo::perception::inference::BBoxRegParameter::MergeFrom(from._internal_bbox_reg_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_detection_output_ssd_param()->::apollo::perception::inference::DetectionOutputSSDParameter::MergeFrom(from._internal_detection_output_ssd_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_region_param()->::apollo::perception::inference::RegionParameter::MergeFrom(from._internal_region_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_reorg_param()->::apollo::perception::inference::ReorgParameter::MergeFrom(from._internal_reorg_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_region_output_param()->::apollo::perception::inference::RegionOutputParameter::MergeFrom(from._internal_region_output_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_region_proposal_param()->::apollo::perception::inference::RegionProposalParameter::MergeFrom(from._internal_region_proposal_param());
    }
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_padding_param()->::apollo::perception::inference::PaddingParameter::MergeFrom(from._internal_padding_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_yolo_target_param()->::apollo::perception::inference::YoloTargetParameter::MergeFrom(from._internal_yolo_target_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_yolo_anchors_param()->::apollo::perception::inference::YoloAnchorsParameter::MergeFrom(from._internal_yolo_anchors_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_yolo_loss_param()->::apollo::perception::inference::YoloLossParameter::MergeFrom(from._internal_yolo_loss_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_yolo_dump_param()->::apollo::perception::inference::YoloDumpParameter::MergeFrom(from._internal_yolo_dump_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_roi_pooling_param()->::apollo::perception::inference::ROIPoolingParameter::MergeFrom(from._internal_roi_pooling_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.phase_ = from._impl_.phase_;
    }
    _impl_._has_bits_[2] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  _impl_.bottom_.InternalSwap(&other->_impl_.bottom_);
  _impl_.top_.InternalSwap(&other->_impl_.top_);
  _impl_.loss_weight_.InternalSwap(&other->_impl_.loss_weight_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  _impl_.blobs_.InternalSwap(&other->_impl_.blobs_);
  _impl_.include_.InternalSwap(&other->_impl_.include_);
  _impl_.exclude_.InternalSwap(&other->_impl_.exclude_);
  _impl_.propagate_down_.InternalSwap(&other->_impl_.propagate_down_);
  _impl_.yolo_data_param_.InternalSwap(&other->_impl_.yolo_data_param_);
  _impl_.data_prob_param_.InternalSwap(&other->_impl_.data_prob_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerParameter, _impl_.phase_)
      + sizeof(LayerParameter::_impl_.phase_)
      - PROTOBUF_FIELD_OFFSET(LayerParameter, _impl_.transform_param_)>(
          reinterpret_cast<char*>(&_impl_.transform_param_),
          reinterpret_cast<char*>(&other->_impl_.transform_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[19]);
}

// ===================================================================

class TransformationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformationParameter>()._impl_._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crop_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_crop_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_force_gray(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const TransformationParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NoiseParameter& noise_param(const TransformationParameter* msg);
  static void set_has_noise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::DistortionParameter& distort_param(const TransformationParameter* msg);
  static void set_has_distort_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::ExpansionParameter& expand_param(const TransformationParameter* msg);
  static void set_has_expand_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::EmitConstraint& emit_constraint(const TransformationParameter* msg);
  static void set_has_emit_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
TransformationParameter::_Internal::resize_param(const TransformationParameter* msg) {
  return *msg->_impl_.resize_param_;
}
const ::apollo::perception::inference::NoiseParameter&
TransformationParameter::_Internal::noise_param(const TransformationParameter* msg) {
  return *msg->_impl_.noise_param_;
}
const ::apollo::perception::inference::DistortionParameter&
TransformationParameter::_Internal::distort_param(const TransformationParameter* msg) {
  return *msg->_impl_.distort_param_;
}
const ::apollo::perception::inference::ExpansionParameter&
TransformationParameter::_Internal::expand_param(const TransformationParameter* msg) {
  return *msg->_impl_.expand_param_;
}
const ::apollo::perception::inference::EmitConstraint&
TransformationParameter::_Internal::emit_constraint(const TransformationParameter* msg) {
  return *msg->_impl_.emit_constraint_;
}
TransformationParameter::TransformationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_value_){from._impl_.mean_value_}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.noise_param_){nullptr}
    , decltype(_impl_.emit_constraint_){nullptr}
    , decltype(_impl_.distort_param_){nullptr}
    , decltype(_impl_.expand_param_){nullptr}
    , decltype(_impl_.crop_size_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.force_color_){}
    , decltype(_impl_.force_gray_){}
    , decltype(_impl_.crop_h_){}
    , decltype(_impl_.crop_w_){}
    , decltype(_impl_.jitter_){}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mean_file()) {
    _impl_.mean_file_.Set(from._internal_mean_file(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resize_param()) {
    _impl_.resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from._impl_.resize_param_);
  }
  if (from._internal_has_noise_param()) {
    _impl_.noise_param_ = new ::apollo::perception::inference::NoiseParameter(*from._impl_.noise_param_);
  }
  if (from._internal_has_emit_constraint()) {
    _impl_.emit_constraint_ = new ::apollo::perception::inference::EmitConstraint(*from._impl_.emit_constraint_);
  }
  if (from._internal_has_distort_param()) {
    _impl_.distort_param_ = new ::apollo::perception::inference::DistortionParameter(*from._impl_.distort_param_);
  }
  if (from._internal_has_expand_param()) {
    _impl_.expand_param_ = new ::apollo::perception::inference::ExpansionParameter(*from._impl_.expand_param_);
  }
  ::memcpy(&_impl_.crop_size_, &from._impl_.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.crop_size_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TransformationParameter)
}

inline void TransformationParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_value_){arena}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.noise_param_){nullptr}
    , decltype(_impl_.emit_constraint_){nullptr}
    , decltype(_impl_.distort_param_){nullptr}
    , decltype(_impl_.expand_param_){nullptr}
    , decltype(_impl_.crop_size_){0u}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.force_color_){false}
    , decltype(_impl_.force_gray_){false}
    , decltype(_impl_.crop_h_){0u}
    , decltype(_impl_.crop_w_){0u}
    , decltype(_impl_.jitter_){0}
    , decltype(_impl_.scale_){1}
  };
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TransformationParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransformationParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mean_value_.~RepeatedField();
  _impl_.mean_file_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resize_param_;
  if (this != internal_default_instance()) delete _impl_.noise_param_;
  if (this != internal_default_instance()) delete _impl_.emit_constraint_;
  if (this != internal_default_instance()) delete _impl_.distort_param_;
  if (this != internal_default_instance()) delete _impl_.expand_param_;
}

void TransformationParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TransformationParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mean_value_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mean_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.resize_param_ != nullptr);
      _impl_.resize_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.noise_param_ != nullptr);
      _impl_.noise_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.emit_constraint_ != nullptr);
      _impl_.emit_constraint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.distort_param_ != nullptr);
      _impl_.distort_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.expand_param_ != nullptr);
      _impl_.expand_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mirror_) -
        reinterpret_cast<char*>(&_impl_.crop_size_)) + sizeof(_impl_.mirror_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.force_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.jitter_) -
        reinterpret_cast<char*>(&_impl_.force_color_)) + sizeof(_impl_.jitter_));
    _impl_.scale_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformationParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_size = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_crop_size(&has_bits);
          _impl_.crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mean_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.TransformationParameter.mean_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated float mean_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mean_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mean_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_color = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_force_color(&has_bits);
          _impl_.force_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_gray = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_force_gray(&has_bits);
          _impl_.force_gray_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_noise_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_h = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_crop_h(&has_bits);
          _impl_.crop_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_w = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_crop_w(&has_bits);
          _impl_.crop_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_distort_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_expand_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float jitter = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformationParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TransformationParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crop_size(), target);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.TransformationParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mean_file(), target);
  }

  // repeated float mean_value = 5;
  for (int i = 0, n = this->_internal_mean_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mean_value(i), target);
  }

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_force_gray(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::resize_param(this),
        _Internal::resize_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::noise_param(this),
        _Internal::noise_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::emit_constraint(this),
        _Internal::emit_constraint(this).GetCachedSize(), target, stream);
  }

  // optional uint32 crop_h = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crop_h(), target);
  }

  // optional uint32 crop_w = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_crop_w(), target);
  }

  // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::distort_param(this),
        _Internal::distort_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::expand_param(this),
        _Internal::expand_param(this).GetCachedSize(), target, stream);
  }

  // optional float jitter = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_jitter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TransformationParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_mean_value_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mean_file = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resize_param_);
    }

    // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.noise_param_);
    }

    // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.emit_constraint_);
    }

    // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.distort_param_);
    }

    // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expand_param_);
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_size());
    }

    // optional bool mirror = 2 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool force_color = 6 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_h = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_h());
    }

    // optional uint32 crop_w = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_w());
    }

    // optional float jitter = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float scale = 1 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformationParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformationParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformationParameter::GetClassData() const { return &_class_data_; }

void TransformationParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformationParameter *>(to)->MergeFrom(
      static_cast<const TransformationParameter &>(from));
}


void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.mean_value_.MergeFrom(from._impl_.mean_value_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_noise_param()->::apollo::perception::inference::NoiseParameter::MergeFrom(from._internal_noise_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_emit_constraint()->::apollo::perception::inference::EmitConstraint::MergeFrom(from._internal_emit_constraint());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_distort_param()->::apollo::perception::inference::DistortionParameter::MergeFrom(from._internal_distort_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_expand_param()->::apollo::perception::inference::ExpansionParameter::MergeFrom(from._internal_expand_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.crop_size_ = from._impl_.crop_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.mirror_ = from._impl_.mirror_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.force_color_ = from._impl_.force_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.force_gray_ = from._impl_.force_gray_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.crop_h_ = from._impl_.crop_h_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.crop_w_ = from._impl_.crop_w_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.jitter_ = from._impl_.jitter_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
  return true;
}

void TransformationParameter::InternalSwap(TransformationParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mean_value_.InternalSwap(&other->_impl_.mean_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mean_file_, lhs_arena,
      &other->_impl_.mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformationParameter, _impl_.jitter_)
      + sizeof(TransformationParameter::_impl_.jitter_)
      - PROTOBUF_FIELD_OFFSET(TransformationParameter, _impl_.resize_param_)>(
          reinterpret_cast<char*>(&_impl_.resize_param_),
          reinterpret_cast<char*>(&other->_impl_.resize_param_));
  swap(_impl_.scale_, other->_impl_.scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformationParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[20]);
}

// ===================================================================

class ResizeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ResizeParameter>()._impl_._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_resize_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pad_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ResizeParameter::ResizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ResizeParameter)
}
ResizeParameter::ResizeParameter(const ResizeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_value_){from._impl_.pad_value_}
    , decltype(_impl_.interp_mode_){from._impl_.interp_mode_}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_scale_){}
    , decltype(_impl_.width_scale_){}
    , decltype(_impl_.pad_mode_){}
    , decltype(_impl_.prob_){}
    , decltype(_impl_.resize_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resize_mode_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.resize_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ResizeParameter)
}

inline void ResizeParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_value_){arena}
    , decltype(_impl_.interp_mode_){arena}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_scale_){0u}
    , decltype(_impl_.width_scale_){0u}
    , decltype(_impl_.pad_mode_){1}
    , decltype(_impl_.prob_){1}
    , decltype(_impl_.resize_mode_){1}
  };
}

ResizeParameter::~ResizeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ResizeParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResizeParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pad_value_.~RepeatedField();
  _impl_.interp_mode_.~RepeatedField();
}

void ResizeParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ResizeParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pad_value_.Clear();
  _impl_.interp_mode_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_scale_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_scale_));
    _impl_.pad_mode_ = 1;
    _impl_.prob_ = 1;
    _impl_.resize_mode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Resize_mode_IsValid(val))) {
            _internal_set_resize_mode(static_cast<::apollo::perception::inference::ResizeParameter_Resize_mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Pad_mode_IsValid(val))) {
            _internal_set_pad_mode(static_cast<::apollo::perception::inference::ResizeParameter_Pad_mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated float pad_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pad_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(val))) {
              _internal_add_interp_mode(static_cast<::apollo::perception::inference::ResizeParameter_Interp_mode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_interp_mode(), ptr, ctx, ::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height_scale = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_height_scale(&has_bits);
          _impl_.height_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width_scale = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_width_scale(&has_bits);
          _impl_.width_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResizeParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ResizeParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float prob = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resize_mode(), target);
  }

  // optional uint32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pad_mode(), target);
  }

  // repeated float pad_value = 6;
  for (int i = 0, n = this->_internal_pad_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pad_value(i), target);
  }

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  for (int i = 0, n = this->_internal_interp_mode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_interp_mode(i), target);
  }

  // optional uint32 height_scale = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_height_scale(), target);
  }

  // optional uint32 width_scale = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_width_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ResizeParameter)
  return target;
}

size_t ResizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ResizeParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pad_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pad_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pad_value_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_interp_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_interp_mode(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 height = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height_scale = 8 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height_scale());
    }

    // optional uint32 width_scale = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width_scale());
    }

    // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pad_mode());
    }

    // optional float prob = 1 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_resize_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizeParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResizeParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizeParameter::GetClassData() const { return &_class_data_; }

void ResizeParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResizeParameter *>(to)->MergeFrom(
      static_cast<const ResizeParameter &>(from));
}


void ResizeParameter::MergeFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.pad_value_.MergeFrom(from._impl_.pad_value_);
  _impl_.interp_mode_.MergeFrom(from._impl_.interp_mode_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.height_scale_ = from._impl_.height_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_scale_ = from._impl_.width_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pad_mode_ = from._impl_.pad_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.prob_ = from._impl_.prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.resize_mode_ = from._impl_.resize_mode_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizeParameter::CopyFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeParameter::IsInitialized() const {
  return true;
}

void ResizeParameter::InternalSwap(ResizeParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pad_value_.InternalSwap(&other->_impl_.pad_value_);
  _impl_.interp_mode_.InternalSwap(&other->_impl_.interp_mode_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeParameter, _impl_.width_scale_)
      + sizeof(ResizeParameter::_impl_.width_scale_)
      - PROTOBUF_FIELD_OFFSET(ResizeParameter, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
  swap(_impl_.pad_mode_, other->_impl_.pad_mode_);
  swap(_impl_.prob_, other->_impl_.prob_);
  swap(_impl_.resize_mode_, other->_impl_.resize_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[21]);
}

// ===================================================================

class SaltPepperParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SaltPepperParameter>()._impl_._has_bits_);
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SaltPepperParameter::SaltPepperParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SaltPepperParameter)
}
SaltPepperParameter::SaltPepperParameter(const SaltPepperParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.fraction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fraction_ = from._impl_.fraction_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SaltPepperParameter)
}

inline void SaltPepperParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){arena}
    , decltype(_impl_.fraction_){0}
  };
}

SaltPepperParameter::~SaltPepperParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SaltPepperParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaltPepperParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void SaltPepperParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaltPepperParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SaltPepperParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.fraction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaltPepperParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float fraction = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_fraction(&has_bits);
          _impl_.fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaltPepperParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SaltPepperParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float fraction = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_fraction(), target);
  }

  // repeated float value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SaltPepperParameter)
  return target;
}

size_t SaltPepperParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SaltPepperParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  // optional float fraction = 1 [default = 0];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaltPepperParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaltPepperParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaltPepperParameter::GetClassData() const { return &_class_data_; }

void SaltPepperParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaltPepperParameter *>(to)->MergeFrom(
      static_cast<const SaltPepperParameter &>(from));
}


void SaltPepperParameter::MergeFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SaltPepperParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.value_.MergeFrom(from._impl_.value_);
  if (from._internal_has_fraction()) {
    _internal_set_fraction(from._internal_fraction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaltPepperParameter::CopyFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SaltPepperParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaltPepperParameter::IsInitialized() const {
  return true;
}

void SaltPepperParameter::InternalSwap(SaltPepperParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  swap(_impl_.fraction_, other->_impl_.fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaltPepperParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[22]);
}

// ===================================================================

class NoiseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NoiseParameter>()._impl_._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hist_eq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_decolorize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gauss_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jpeg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_posterize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_erode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saltpepper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::SaltPepperParameter& saltpepper_param(const NoiseParameter* msg);
  static void set_has_saltpepper_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clahe(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_convert_to_hsv(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_convert_to_lab(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::apollo::perception::inference::SaltPepperParameter&
NoiseParameter::_Internal::saltpepper_param(const NoiseParameter* msg) {
  return *msg->_impl_.saltpepper_param_;
}
NoiseParameter::NoiseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NoiseParameter)
}
NoiseParameter::NoiseParameter(const NoiseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saltpepper_param_){nullptr}
    , decltype(_impl_.prob_){}
    , decltype(_impl_.hist_eq_){}
    , decltype(_impl_.inverse_){}
    , decltype(_impl_.decolorize_){}
    , decltype(_impl_.gauss_blur_){}
    , decltype(_impl_.posterize_){}
    , decltype(_impl_.erode_){}
    , decltype(_impl_.saltpepper_){}
    , decltype(_impl_.clahe_){}
    , decltype(_impl_.convert_to_hsv_){}
    , decltype(_impl_.convert_to_lab_){}
    , decltype(_impl_.jpeg_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_saltpepper_param()) {
    _impl_.saltpepper_param_ = new ::apollo::perception::inference::SaltPepperParameter(*from._impl_.saltpepper_param_);
  }
  ::memcpy(&_impl_.prob_, &from._impl_.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jpeg_) -
    reinterpret_cast<char*>(&_impl_.prob_)) + sizeof(_impl_.jpeg_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NoiseParameter)
}

inline void NoiseParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saltpepper_param_){nullptr}
    , decltype(_impl_.prob_){0}
    , decltype(_impl_.hist_eq_){false}
    , decltype(_impl_.inverse_){false}
    , decltype(_impl_.decolorize_){false}
    , decltype(_impl_.gauss_blur_){false}
    , decltype(_impl_.posterize_){false}
    , decltype(_impl_.erode_){false}
    , decltype(_impl_.saltpepper_){false}
    , decltype(_impl_.clahe_){false}
    , decltype(_impl_.convert_to_hsv_){false}
    , decltype(_impl_.convert_to_lab_){false}
    , decltype(_impl_.jpeg_){-1}
  };
}

NoiseParameter::~NoiseParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NoiseParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoiseParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.saltpepper_param_;
}

void NoiseParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NoiseParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.saltpepper_param_ != nullptr);
    _impl_.saltpepper_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.erode_) -
        reinterpret_cast<char*>(&_impl_.prob_)) + sizeof(_impl_.erode_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.saltpepper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.convert_to_lab_) -
        reinterpret_cast<char*>(&_impl_.saltpepper_)) + sizeof(_impl_.convert_to_lab_));
    _impl_.jpeg_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoiseParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool hist_eq = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hist_eq(&has_bits);
          _impl_.hist_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inverse = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inverse(&has_bits);
          _impl_.inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool decolorize = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_decolorize(&has_bits);
          _impl_.decolorize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gauss_blur = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gauss_blur(&has_bits);
          _impl_.gauss_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float jpeg = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_jpeg(&has_bits);
          _impl_.jpeg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool posterize = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_posterize(&has_bits);
          _impl_.posterize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool erode = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_erode(&has_bits);
          _impl_.erode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool saltpepper = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_saltpepper(&has_bits);
          _impl_.saltpepper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_saltpepper_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clahe = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_clahe(&has_bits);
          _impl_.clahe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool convert_to_hsv = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_convert_to_hsv(&has_bits);
          _impl_.convert_to_hsv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool convert_to_lab = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_convert_to_lab(&has_bits);
          _impl_.convert_to_lab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoiseParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NoiseParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float prob = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional bool hist_eq = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_hist_eq(), target);
  }

  // optional bool inverse = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_inverse(), target);
  }

  // optional bool decolorize = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_decolorize(), target);
  }

  // optional bool gauss_blur = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_gauss_blur(), target);
  }

  // optional float jpeg = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_jpeg(), target);
  }

  // optional bool posterize = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_posterize(), target);
  }

  // optional bool erode = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_erode(), target);
  }

  // optional bool saltpepper = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_saltpepper(), target);
  }

  // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::saltpepper_param(this),
        _Internal::saltpepper_param(this).GetCachedSize(), target, stream);
  }

  // optional bool clahe = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_clahe(), target);
  }

  // optional bool convert_to_hsv = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_convert_to_hsv(), target);
  }

  // optional bool convert_to_lab = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_convert_to_lab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NoiseParameter)
  return target;
}

size_t NoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NoiseParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.saltpepper_param_);
    }

    // optional float prob = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool hist_eq = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool inverse = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool decolorize = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool gauss_blur = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool posterize = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool erode = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool saltpepper = 9 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool clahe = 11 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_hsv = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_lab = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional float jpeg = 6 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoiseParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NoiseParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoiseParameter::GetClassData() const { return &_class_data_; }

void NoiseParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NoiseParameter *>(to)->MergeFrom(
      static_cast<const NoiseParameter &>(from));
}


void NoiseParameter::MergeFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_saltpepper_param()->::apollo::perception::inference::SaltPepperParameter::MergeFrom(from._internal_saltpepper_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.prob_ = from._impl_.prob_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hist_eq_ = from._impl_.hist_eq_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.inverse_ = from._impl_.inverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.decolorize_ = from._impl_.decolorize_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.gauss_blur_ = from._impl_.gauss_blur_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.posterize_ = from._impl_.posterize_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.erode_ = from._impl_.erode_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.saltpepper_ = from._impl_.saltpepper_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.clahe_ = from._impl_.clahe_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.convert_to_hsv_ = from._impl_.convert_to_hsv_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.convert_to_lab_ = from._impl_.convert_to_lab_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.jpeg_ = from._impl_.jpeg_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoiseParameter::CopyFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseParameter::IsInitialized() const {
  return true;
}

void NoiseParameter::InternalSwap(NoiseParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoiseParameter, _impl_.convert_to_lab_)
      + sizeof(NoiseParameter::_impl_.convert_to_lab_)
      - PROTOBUF_FIELD_OFFSET(NoiseParameter, _impl_.saltpepper_param_)>(
          reinterpret_cast<char*>(&_impl_.saltpepper_param_),
          reinterpret_cast<char*>(&other->_impl_.saltpepper_param_));
  swap(_impl_.jpeg_, other->_impl_.jpeg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[23]);
}

// ===================================================================

class DistortionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DistortionParameter>()._impl_._has_bits_);
  static void set_has_brightness_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brightness_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contrast_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contrast_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contrast_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hue_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hue_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_saturation_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saturation_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_saturation_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_random_order_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

DistortionParameter::DistortionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DistortionParameter)
}
DistortionParameter::DistortionParameter(const DistortionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brightness_prob_){}
    , decltype(_impl_.brightness_delta_){}
    , decltype(_impl_.contrast_prob_){}
    , decltype(_impl_.contrast_lower_){}
    , decltype(_impl_.contrast_upper_){}
    , decltype(_impl_.hue_prob_){}
    , decltype(_impl_.hue_delta_){}
    , decltype(_impl_.saturation_prob_){}
    , decltype(_impl_.saturation_lower_){}
    , decltype(_impl_.saturation_upper_){}
    , decltype(_impl_.random_order_prob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brightness_prob_, &from._impl_.brightness_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.random_order_prob_) -
    reinterpret_cast<char*>(&_impl_.brightness_prob_)) + sizeof(_impl_.random_order_prob_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DistortionParameter)
}

inline void DistortionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brightness_prob_){0}
    , decltype(_impl_.brightness_delta_){0}
    , decltype(_impl_.contrast_prob_){0}
    , decltype(_impl_.contrast_lower_){0}
    , decltype(_impl_.contrast_upper_){0}
    , decltype(_impl_.hue_prob_){0}
    , decltype(_impl_.hue_delta_){0}
    , decltype(_impl_.saturation_prob_){0}
    , decltype(_impl_.saturation_lower_){0}
    , decltype(_impl_.saturation_upper_){0}
    , decltype(_impl_.random_order_prob_){0}
  };
}

DistortionParameter::~DistortionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DistortionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistortionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistortionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistortionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DistortionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.brightness_prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.saturation_prob_) -
        reinterpret_cast<char*>(&_impl_.brightness_prob_)) + sizeof(_impl_.saturation_prob_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.saturation_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.random_order_prob_) -
        reinterpret_cast<char*>(&_impl_.saturation_lower_)) + sizeof(_impl_.random_order_prob_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistortionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float brightness_prob = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_brightness_prob(&has_bits);
          _impl_.brightness_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float brightness_delta = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_brightness_delta(&has_bits);
          _impl_.brightness_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float contrast_prob = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_contrast_prob(&has_bits);
          _impl_.contrast_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float contrast_lower = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_contrast_lower(&has_bits);
          _impl_.contrast_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float contrast_upper = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_contrast_upper(&has_bits);
          _impl_.contrast_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float hue_prob = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_hue_prob(&has_bits);
          _impl_.hue_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float hue_delta = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_hue_delta(&has_bits);
          _impl_.hue_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float saturation_prob = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_saturation_prob(&has_bits);
          _impl_.saturation_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float saturation_lower = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_saturation_lower(&has_bits);
          _impl_.saturation_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float saturation_upper = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_saturation_upper(&has_bits);
          _impl_.saturation_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float random_order_prob = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_random_order_prob(&has_bits);
          _impl_.random_order_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistortionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DistortionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float brightness_prob = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_brightness_prob(), target);
  }

  // optional float brightness_delta = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_brightness_delta(), target);
  }

  // optional float contrast_prob = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_contrast_prob(), target);
  }

  // optional float contrast_lower = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_contrast_lower(), target);
  }

  // optional float contrast_upper = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_contrast_upper(), target);
  }

  // optional float hue_prob = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hue_prob(), target);
  }

  // optional float hue_delta = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_hue_delta(), target);
  }

  // optional float saturation_prob = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_saturation_prob(), target);
  }

  // optional float saturation_lower = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_saturation_lower(), target);
  }

  // optional float saturation_upper = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_saturation_upper(), target);
  }

  // optional float random_order_prob = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_random_order_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DistortionParameter)
  return target;
}

size_t DistortionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DistortionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float brightness_prob = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float brightness_delta = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float contrast_prob = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float contrast_lower = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float contrast_upper = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float hue_prob = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float hue_delta = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float saturation_prob = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float saturation_lower = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float saturation_upper = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float random_order_prob = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistortionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistortionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistortionParameter::GetClassData() const { return &_class_data_; }

void DistortionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistortionParameter *>(to)->MergeFrom(
      static_cast<const DistortionParameter &>(from));
}


void DistortionParameter::MergeFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DistortionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brightness_prob_ = from._impl_.brightness_prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brightness_delta_ = from._impl_.brightness_delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.contrast_prob_ = from._impl_.contrast_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.contrast_lower_ = from._impl_.contrast_lower_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.contrast_upper_ = from._impl_.contrast_upper_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.hue_prob_ = from._impl_.hue_prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.hue_delta_ = from._impl_.hue_delta_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.saturation_prob_ = from._impl_.saturation_prob_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.saturation_lower_ = from._impl_.saturation_lower_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.saturation_upper_ = from._impl_.saturation_upper_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.random_order_prob_ = from._impl_.random_order_prob_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistortionParameter::CopyFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DistortionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortionParameter::IsInitialized() const {
  return true;
}

void DistortionParameter::InternalSwap(DistortionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistortionParameter, _impl_.random_order_prob_)
      + sizeof(DistortionParameter::_impl_.random_order_prob_)
      - PROTOBUF_FIELD_OFFSET(DistortionParameter, _impl_.brightness_prob_)>(
          reinterpret_cast<char*>(&_impl_.brightness_prob_),
          reinterpret_cast<char*>(&other->_impl_.brightness_prob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistortionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[24]);
}

// ===================================================================

class ExpansionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpansionParameter>()._impl_._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_expand_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExpansionParameter::ExpansionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ExpansionParameter)
}
ExpansionParameter::ExpansionParameter(const ExpansionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prob_){}
    , decltype(_impl_.max_expand_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.prob_, &from._impl_.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_expand_ratio_) -
    reinterpret_cast<char*>(&_impl_.prob_)) + sizeof(_impl_.max_expand_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ExpansionParameter)
}

inline void ExpansionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prob_){1}
    , decltype(_impl_.max_expand_ratio_){1}
  };
}

ExpansionParameter::~ExpansionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ExpansionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpansionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpansionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpansionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ExpansionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.prob_ = 1;
    _impl_.max_expand_ratio_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpansionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_expand_ratio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_expand_ratio(&has_bits);
          _impl_.max_expand_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpansionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ExpansionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float prob = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional float max_expand_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_expand_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ExpansionParameter)
  return target;
}

size_t ExpansionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ExpansionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float prob = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_expand_ratio = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpansionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpansionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpansionParameter::GetClassData() const { return &_class_data_; }

void ExpansionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExpansionParameter *>(to)->MergeFrom(
      static_cast<const ExpansionParameter &>(from));
}


void ExpansionParameter::MergeFrom(const ExpansionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ExpansionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prob_ = from._impl_.prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_expand_ratio_ = from._impl_.max_expand_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpansionParameter::CopyFrom(const ExpansionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ExpansionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpansionParameter::IsInitialized() const {
  return true;
}

void ExpansionParameter::InternalSwap(ExpansionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.prob_, other->_impl_.prob_);
  swap(_impl_.max_expand_ratio_, other->_impl_.max_expand_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpansionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[25]);
}

// ===================================================================

class LossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LossParameter>()._impl_._has_bits_);
  static void set_has_ignore_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normalization(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_normalize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LossParameter::LossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_label_){}
    , decltype(_impl_.normalize_){}
    , decltype(_impl_.normalization_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_label_, &from._impl_.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.normalization_) -
    reinterpret_cast<char*>(&_impl_.ignore_label_)) + sizeof(_impl_.normalization_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LossParameter)
}

inline void LossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_label_){0}
    , decltype(_impl_.normalize_){false}
    , decltype(_impl_.normalization_){1}
  };
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ignore_label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.normalize_) -
        reinterpret_cast<char*>(&_impl_.ignore_label_)) + sizeof(_impl_.normalize_));
    _impl_.normalization_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ignore_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_label(&has_bits);
          _impl_.ignore_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool normalize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_normalize(&has_bits);
          _impl_.normalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LossParameter_NormalizationMode_IsValid(val))) {
            _internal_set_normalization(static_cast<::apollo::perception::inference::LossParameter_NormalizationMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_normalize(), target);
  }

  // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_normalization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ignore_label());
    }

    // optional bool normalize = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_normalization());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LossParameter::GetClassData() const { return &_class_data_; }

void LossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LossParameter *>(to)->MergeFrom(
      static_cast<const LossParameter &>(from));
}


void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_label_ = from._impl_.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.normalize_ = from._impl_.normalize_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.normalization_ = from._impl_.normalization_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  return true;
}

void LossParameter::InternalSwap(LossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossParameter, _impl_.normalize_)
      + sizeof(LossParameter::_impl_.normalize_)
      - PROTOBUF_FIELD_OFFSET(LossParameter, _impl_.ignore_label_)>(
          reinterpret_cast<char*>(&_impl_.ignore_label_),
          reinterpret_cast<char*>(&other->_impl_.ignore_label_));
  swap(_impl_.normalization_, other->_impl_.normalization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[26]);
}

// ===================================================================

class AccuracyParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AccuracyParameter>()._impl_._has_bits_);
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ignore_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccuracyParameter::AccuracyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_label_){}
    , decltype(_impl_.top_k_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_label_, &from._impl_.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.ignore_label_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AccuracyParameter)
}

inline void AccuracyParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_label_){0}
    , decltype(_impl_.top_k_){1u}
    , decltype(_impl_.axis_){1}
  };
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AccuracyParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccuracyParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccuracyParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AccuracyParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.ignore_label_ = 0;
    _impl_.top_k_ = 1u;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccuracyParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 top_k = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top_k(&has_bits);
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ignore_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ignore_label(&has_bits);
          _impl_.ignore_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccuracyParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AccuracyParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ignore_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AccuracyParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccuracyParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccuracyParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccuracyParameter::GetClassData() const { return &_class_data_; }

void AccuracyParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccuracyParameter *>(to)->MergeFrom(
      static_cast<const AccuracyParameter &>(from));
}


void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_label_ = from._impl_.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_k_ = from._impl_.top_k_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
  return true;
}

void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ignore_label_, other->_impl_.ignore_label_);
  swap(_impl_.top_k_, other->_impl_.top_k_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccuracyParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[27]);
}

// ===================================================================

class AnnotatedDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotatedDataParameter>()._impl_._has_bits_);
  static void set_has_label_map_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anno_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AnnotatedDataParameter::AnnotatedDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.AnnotatedDataParameter)
}
AnnotatedDataParameter::AnnotatedDataParameter(const AnnotatedDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_sampler_){from._impl_.batch_sampler_}
    , decltype(_impl_.label_map_file_){}
    , decltype(_impl_.anno_type_){}
    , decltype(_impl_.num_classes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_map_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label_map_file()) {
    _impl_.label_map_file_.Set(from._internal_label_map_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.anno_type_, &from._impl_.anno_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_classes_) -
    reinterpret_cast<char*>(&_impl_.anno_type_)) + sizeof(_impl_.num_classes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotatedDataParameter)
}

inline void AnnotatedDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_sampler_){arena}
    , decltype(_impl_.label_map_file_){}
    , decltype(_impl_.anno_type_){0}
    , decltype(_impl_.num_classes_){3}
  };
  _impl_.label_map_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnnotatedDataParameter::~AnnotatedDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotatedDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotatedDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.batch_sampler_.~RepeatedPtrField();
  _impl_.label_map_file_.Destroy();
}

void AnnotatedDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnotatedDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotatedDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.batch_sampler_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.label_map_file_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.anno_type_ = 0;
    _impl_.num_classes_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotatedDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batch_sampler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string label_map_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label_map_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.AnnotatedDataParameter.label_map_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(val))) {
            _internal_set_anno_type(static_cast<::apollo::perception::inference::AnnotatedDatum_AnnotationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_classes = 10 [default = 3];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotatedDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotatedDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_batch_sampler_size()); i < n; i++) {
    const auto& repfield = this->_internal_batch_sampler(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string label_map_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_file().data(), static_cast<int>(this->_internal_label_map_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.AnnotatedDataParameter.label_map_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label_map_file(), target);
  }

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_anno_type(), target);
  }

  // optional int32 num_classes = 10 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_classes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotatedDataParameter)
  return target;
}

size_t AnnotatedDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotatedDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  total_size += 1UL * this->_internal_batch_sampler_size();
  for (const auto& msg : this->_impl_.batch_sampler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string label_map_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_file());
    }

    // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_anno_type());
    }

    // optional int32 num_classes = 10 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_classes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotatedDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotatedDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotatedDataParameter::GetClassData() const { return &_class_data_; }

void AnnotatedDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnnotatedDataParameter *>(to)->MergeFrom(
      static_cast<const AnnotatedDataParameter &>(from));
}


void AnnotatedDataParameter::MergeFrom(const AnnotatedDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotatedDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.batch_sampler_.MergeFrom(from._impl_.batch_sampler_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label_map_file(from._internal_label_map_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.anno_type_ = from._impl_.anno_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotatedDataParameter::CopyFrom(const AnnotatedDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotatedDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedDataParameter::IsInitialized() const {
  return true;
}

void AnnotatedDataParameter::InternalSwap(AnnotatedDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.batch_sampler_.InternalSwap(&other->_impl_.batch_sampler_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_map_file_, lhs_arena,
      &other->_impl_.label_map_file_, rhs_arena
  );
  swap(_impl_.anno_type_, other->_impl_.anno_type_);
  swap(_impl_.num_classes_, other->_impl_.num_classes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[28]);
}

// ===================================================================

class ArgMaxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgMaxParameter>()._impl_._has_bits_);
  static void set_has_out_max_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArgMaxParameter::ArgMaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ArgMaxParameter)
}
ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_max_val_){}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.top_k_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.out_max_val_, &from._impl_.out_max_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.top_k_) -
    reinterpret_cast<char*>(&_impl_.out_max_val_)) + sizeof(_impl_.top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ArgMaxParameter)
}

inline void ArgMaxParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_max_val_){false}
    , decltype(_impl_.axis_){0}
    , decltype(_impl_.top_k_){1u}
  };
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ArgMaxParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArgMaxParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ArgMaxParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ArgMaxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.out_max_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.axis_) -
        reinterpret_cast<char*>(&_impl_.out_max_val_)) + sizeof(_impl_.axis_));
    _impl_.top_k_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgMaxParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool out_max_val = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_out_max_val(&has_bits);
          _impl_.out_max_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 top_k = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArgMaxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ArgMaxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ArgMaxParameter)
  return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ArgMaxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool out_max_val = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional uint32 top_k = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_k());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArgMaxParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArgMaxParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArgMaxParameter::GetClassData() const { return &_class_data_; }

void ArgMaxParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArgMaxParameter *>(to)->MergeFrom(
      static_cast<const ArgMaxParameter &>(from));
}


void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.out_max_val_ = from._impl_.out_max_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.top_k_ = from._impl_.top_k_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {
  return true;
}

void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgMaxParameter, _impl_.axis_)
      + sizeof(ArgMaxParameter::_impl_.axis_)
      - PROTOBUF_FIELD_OFFSET(ArgMaxParameter, _impl_.out_max_val_)>(
          reinterpret_cast<char*>(&_impl_.out_max_val_),
          reinterpret_cast<char*>(&other->_impl_.out_max_val_));
  swap(_impl_.top_k_, other->_impl_.top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgMaxParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[29]);
}

// ===================================================================

class ConcatParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_concat_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConcatParameter::ConcatParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concat_dim_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.concat_dim_, &from._impl_.concat_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.concat_dim_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ConcatParameter)
}

inline void ConcatParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concat_dim_){1u}
    , decltype(_impl_.axis_){1}
  };
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ConcatParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConcatParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConcatParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ConcatParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.concat_dim_ = 1u;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcatParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_concat_dim(&has_bits);
          _impl_.concat_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConcatParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ConcatParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ConcatParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcatParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcatParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcatParameter::GetClassData() const { return &_class_data_; }

void ConcatParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConcatParameter *>(to)->MergeFrom(
      static_cast<const ConcatParameter &>(from));
}


void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.concat_dim_ = from._impl_.concat_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  return true;
}

void ConcatParameter::InternalSwap(ConcatParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.concat_dim_, other->_impl_.concat_dim_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[30]);
}

// ===================================================================

class BatchNormParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNormParameter>()._impl_._has_bits_);
  static void set_has_use_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moving_average_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BatchNormParameter::BatchNormParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.use_global_stats_){}
    , decltype(_impl_.moving_average_fraction_){}
    , decltype(_impl_.eps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.use_global_stats_, &from._impl_.use_global_stats_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eps_) -
    reinterpret_cast<char*>(&_impl_.use_global_stats_)) + sizeof(_impl_.eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BatchNormParameter)
}

inline void BatchNormParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.use_global_stats_){false}
    , decltype(_impl_.moving_average_fraction_){0.999f}
    , decltype(_impl_.eps_){1e-05f}
  };
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BatchNormParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchNormParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchNormParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BatchNormParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.use_global_stats_ = false;
    _impl_.moving_average_fraction_ = 0.999f;
    _impl_.eps_ = 1e-05f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchNormParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_global_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_global_stats(&has_bits);
          _impl_.use_global_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_moving_average_fraction(&has_bits);
          _impl_.moving_average_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float eps = 3 [default = 1e-05];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_eps(&has_bits);
          _impl_.eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchNormParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BatchNormParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BatchNormParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool use_global_stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchNormParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchNormParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchNormParameter::GetClassData() const { return &_class_data_; }

void BatchNormParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchNormParameter *>(to)->MergeFrom(
      static_cast<const BatchNormParameter &>(from));
}


void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.use_global_stats_ = from._impl_.use_global_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.moving_average_fraction_ = from._impl_.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.eps_ = from._impl_.eps_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
  return true;
}

void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.use_global_stats_, other->_impl_.use_global_stats_);
  swap(_impl_.moving_average_fraction_, other->_impl_.moving_average_fraction_);
  swap(_impl_.eps_, other->_impl_.eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNormParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[31]);
}

// ===================================================================

class BiasParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BiasParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& filler(const BiasParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::FillerParameter&
BiasParameter::_Internal::filler(const BiasParameter* msg) {
  return *msg->_impl_.filler_;
}
BiasParameter::BiasParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BiasParameter)
}
BiasParameter::BiasParameter(const BiasParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.num_axes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filler()) {
    _impl_.filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.filler_);
  }
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_axes_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BiasParameter)
}

inline void BiasParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.axis_){1}
    , decltype(_impl_.num_axes_){1}
  };
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BiasParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiasParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filler_;
}

void BiasParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BiasParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.filler_ != nullptr);
      _impl_.filler_->Clear();
    }
    _impl_.axis_ = 1;
    _impl_.num_axes_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiasParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          _impl_.num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiasParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BiasParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filler(this),
        _Internal::filler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BiasParameter)
  return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BiasParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filler_);
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiasParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BiasParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiasParameter::GetClassData() const { return &_class_data_; }

void BiasParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiasParameter *>(to)->MergeFrom(
      static_cast<const BiasParameter &>(from));
}


void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_axes_ = from._impl_.num_axes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {
  return true;
}

void BiasParameter::InternalSwap(BiasParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.filler_, other->_impl_.filler_);
  swap(_impl_.axis_, other->_impl_.axis_);
  swap(_impl_.num_axes_, other->_impl_.num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiasParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[32]);
}

// ===================================================================

class ContrastiveLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ContrastiveLossParameter>()._impl_._has_bits_);
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContrastiveLossParameter::ContrastiveLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ContrastiveLossParameter)
}
ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_version_){}
    , decltype(_impl_.margin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.legacy_version_, &from._impl_.legacy_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.margin_) -
    reinterpret_cast<char*>(&_impl_.legacy_version_)) + sizeof(_impl_.margin_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ContrastiveLossParameter)
}

inline void ContrastiveLossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_version_){false}
    , decltype(_impl_.margin_){1}
  };
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ContrastiveLossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContrastiveLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ContrastiveLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.legacy_version_ = false;
    _impl_.margin_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContrastiveLossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float margin = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_margin(&has_bits);
          _impl_.margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool legacy_version = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_legacy_version(&has_bits);
          _impl_.legacy_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContrastiveLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ContrastiveLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_legacy_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ContrastiveLossParameter)
  return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ContrastiveLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool legacy_version = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContrastiveLossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContrastiveLossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContrastiveLossParameter::GetClassData() const { return &_class_data_; }

void ContrastiveLossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContrastiveLossParameter *>(to)->MergeFrom(
      static_cast<const ContrastiveLossParameter &>(from));
}


void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.legacy_version_ = from._impl_.legacy_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.margin_ = from._impl_.margin_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {
  return true;
}

void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.legacy_version_, other->_impl_.legacy_version_);
  swap(_impl_.margin_, other->_impl_.margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContrastiveLossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[33]);
}

// ===================================================================

class ConvolutionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvolutionParameter>()._impl_._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pad_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pad_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kernel_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kernel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stride_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stride_w(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const ConvolutionParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const ConvolutionParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_force_nd_im2col(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::perception::inference::FillerParameter&
ConvolutionParameter::_Internal::weight_filler(const ConvolutionParameter* msg) {
  return *msg->_impl_.weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
ConvolutionParameter::_Internal::bias_filler(const ConvolutionParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
ConvolutionParameter::ConvolutionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_){from._impl_.pad_}
    , decltype(_impl_.kernel_size_){from._impl_.kernel_size_}
    , decltype(_impl_.stride_){from._impl_.stride_}
    , decltype(_impl_.dilation_){from._impl_.dilation_}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.pad_h_){}
    , decltype(_impl_.pad_w_){}
    , decltype(_impl_.kernel_h_){}
    , decltype(_impl_.kernel_w_){}
    , decltype(_impl_.stride_h_){}
    , decltype(_impl_.stride_w_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.force_nd_im2col_){}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.bias_term_){}
    , decltype(_impl_.group_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    _impl_.weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.weight_filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  ::memcpy(&_impl_.num_output_, &from._impl_.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_) -
    reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.group_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ConvolutionParameter)
}

inline void ConvolutionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_){arena}
    , decltype(_impl_.kernel_size_){arena}
    , decltype(_impl_.stride_){arena}
    , decltype(_impl_.dilation_){arena}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){0u}
    , decltype(_impl_.pad_h_){0u}
    , decltype(_impl_.pad_w_){0u}
    , decltype(_impl_.kernel_h_){0u}
    , decltype(_impl_.kernel_w_){0u}
    , decltype(_impl_.stride_h_){0u}
    , decltype(_impl_.stride_w_){0u}
    , decltype(_impl_.engine_){0}
    , decltype(_impl_.force_nd_im2col_){false}
    , decltype(_impl_.axis_){1}
    , decltype(_impl_.bias_term_){true}
    , decltype(_impl_.group_){1u}
  };
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ConvolutionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvolutionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pad_.~RepeatedField();
  _impl_.kernel_size_.~RepeatedField();
  _impl_.stride_.~RepeatedField();
  _impl_.dilation_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.weight_filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
}

void ConvolutionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ConvolutionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pad_.Clear();
  _impl_.kernel_size_.Clear();
  _impl_.stride_.Clear();
  _impl_.dilation_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.weight_filler_ != nullptr);
      _impl_.weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stride_h_) -
        reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.stride_h_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.stride_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.force_nd_im2col_) -
        reinterpret_cast<char*>(&_impl_.stride_w_)) + sizeof(_impl_.force_nd_im2col_));
    _impl_.axis_ = 1;
    _impl_.bias_term_ = true;
    _impl_.group_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvolutionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          _impl_.bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 pad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pad(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 kernel_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_kernel_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_group(&has_bits);
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stride = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_h = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pad_h(&has_bits);
          _impl_.pad_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_w = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pad_w(&has_bits);
          _impl_.pad_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_h = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_kernel_h(&has_bits);
          _impl_.kernel_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_kernel_w(&has_bits);
          _impl_.kernel_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride_h = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_stride_h(&has_bits);
          _impl_.stride_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride_w = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_stride_w(&has_bits);
          _impl_.stride_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ConvolutionParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::ConvolutionParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_nd_im2col = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_force_nd_im2col(&has_bits);
          _impl_.force_nd_im2col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dilation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dilation(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvolutionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ConvolutionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->_internal_pad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0, n = this->_internal_kernel_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kernel_size(i), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_group(), target);
  }

  // repeated uint32 stride = 6;
  for (int i = 0, n = this->_internal_stride_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stride(i), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::weight_filler(this),
        _Internal::weight_filler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_stride_w(), target);
  }

  // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0, n = this->_internal_dilation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_dilation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ConvolutionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pad = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pad_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.kernel_size_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stride_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dilation_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_dilation_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_w());
    }

    // optional uint32 kernel_h = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride_h());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 stride_w = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride_w());
    }

    // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 axis = 16 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional bool bias_term = 2 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvolutionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConvolutionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvolutionParameter::GetClassData() const { return &_class_data_; }

void ConvolutionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConvolutionParameter *>(to)->MergeFrom(
      static_cast<const ConvolutionParameter &>(from));
}


void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.pad_.MergeFrom(from._impl_.pad_);
  _impl_.kernel_size_.MergeFrom(from._impl_.kernel_size_);
  _impl_.stride_.MergeFrom(from._impl_.stride_);
  _impl_.dilation_.MergeFrom(from._impl_.dilation_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pad_h_ = from._impl_.pad_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pad_w_ = from._impl_.pad_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.kernel_h_ = from._impl_.kernel_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.kernel_w_ = from._impl_.kernel_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.stride_h_ = from._impl_.stride_h_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.stride_w_ = from._impl_.stride_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.force_nd_im2col_ = from._impl_.force_nd_im2col_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.bias_term_ = from._impl_.bias_term_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.group_ = from._impl_.group_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  return true;
}

void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pad_.InternalSwap(&other->_impl_.pad_);
  _impl_.kernel_size_.InternalSwap(&other->_impl_.kernel_size_);
  _impl_.stride_.InternalSwap(&other->_impl_.stride_);
  _impl_.dilation_.InternalSwap(&other->_impl_.dilation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionParameter, _impl_.force_nd_im2col_)
      + sizeof(ConvolutionParameter::_impl_.force_nd_im2col_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionParameter, _impl_.weight_filler_)>(
          reinterpret_cast<char*>(&_impl_.weight_filler_),
          reinterpret_cast<char*>(&other->_impl_.weight_filler_));
  swap(_impl_.axis_, other->_impl_.axis_);
  swap(_impl_.bias_term_, other->_impl_.bias_term_);
  swap(_impl_.group_, other->_impl_.group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[34]);
}

// ===================================================================

class CropParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CropParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CropParameter::CropParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.CropParameter)
}
CropParameter::CropParameter(const CropParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){from._impl_.offset_}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.axis_ = from._impl_.axis_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.CropParameter)
}

inline void CropParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){arena}
    , decltype(_impl_.axis_){2}
  };
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.CropParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CropParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offset_.~RepeatedField();
}

void CropParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.CropParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_.Clear();
  _impl_.axis_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CropParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_offset(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CropParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.CropParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0, n = this->_internal_offset_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.CropParameter)
  return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.CropParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 offset = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.offset_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_offset_size());
    total_size += data_size;
  }

  // optional int32 axis = 1 [default = 2];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CropParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CropParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CropParameter::GetClassData() const { return &_class_data_; }

void CropParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CropParameter *>(to)->MergeFrom(
      static_cast<const CropParameter &>(from));
}


void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.offset_.MergeFrom(from._impl_.offset_);
  if (from._internal_has_axis()) {
    _internal_set_axis(from._internal_axis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
  return true;
}

void CropParameter::InternalSwap(CropParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.offset_.InternalSwap(&other->_impl_.offset_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CropParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[35]);
}

// ===================================================================

class DataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DataParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force_encoded_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prefetch(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

DataParameter::DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.crop_size_){}
    , decltype(_impl_.rand_skip_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.force_encoded_color_){}
    , decltype(_impl_.backend_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.prefetch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mean_file()) {
    _impl_.mean_file_.Set(from._internal_mean_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prefetch_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.prefetch_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DataParameter)
}

inline void DataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.batch_size_){0u}
    , decltype(_impl_.crop_size_){0u}
    , decltype(_impl_.rand_skip_){0u}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.force_encoded_color_){false}
    , decltype(_impl_.backend_){0}
    , decltype(_impl_.scale_){1}
    , decltype(_impl_.prefetch_){4u}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.Destroy();
  _impl_.mean_file_.Destroy();
}

void DataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mean_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.backend_) -
        reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.backend_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.scale_ = 1;
    _impl_.prefetch_ = 4u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DataParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DataParameter.mean_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          _impl_.crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rand_skip(&has_bits);
          _impl_.rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::DataParameter_DB_IsValid(val))) {
            _internal_set_backend(static_cast<::apollo::perception::inference::DataParameter_DB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool force_encoded_color = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_force_encoded_color(&has_bits);
          _impl_.force_encoded_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prefetch = 10 [default = 4];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_prefetch(&has_bits);
          _impl_.prefetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rand_skip(), target);
  }

  // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_prefetch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional uint32 batch_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rand_skip());
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool force_encoded_color = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_backend());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prefetch());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataParameter::GetClassData() const { return &_class_data_; }

void DataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataParameter *>(to)->MergeFrom(
      static_cast<const DataParameter &>(from));
}


void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.batch_size_ = from._impl_.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.crop_size_ = from._impl_.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rand_skip_ = from._impl_.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mirror_ = from._impl_.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.force_encoded_color_ = from._impl_.force_encoded_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.backend_ = from._impl_.backend_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.prefetch_ = from._impl_.prefetch_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
  return true;
}

void DataParameter::InternalSwap(DataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mean_file_, lhs_arena,
      &other->_impl_.mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataParameter, _impl_.backend_)
      + sizeof(DataParameter::_impl_.backend_)
      - PROTOBUF_FIELD_OFFSET(DataParameter, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
  swap(_impl_.scale_, other->_impl_.scale_);
  swap(_impl_.prefetch_, other->_impl_.prefetch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[36]);
}

// ===================================================================

class DetectionEvaluateParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionEvaluateParameter>()._impl_._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overlap_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_evaluate_difficult_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name_size_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const DetectionEvaluateParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
DetectionEvaluateParameter::_Internal::resize_param(const DetectionEvaluateParameter* msg) {
  return *msg->_impl_.resize_param_;
}
DetectionEvaluateParameter::DetectionEvaluateParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DetectionEvaluateParameter)
}
DetectionEvaluateParameter::DetectionEvaluateParameter(const DetectionEvaluateParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_size_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.background_label_id_){}
    , decltype(_impl_.overlap_threshold_){}
    , decltype(_impl_.evaluate_difficult_gt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_size_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_size_file()) {
    _impl_.name_size_file_.Set(from._internal_name_size_file(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resize_param()) {
    _impl_.resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from._impl_.resize_param_);
  }
  ::memcpy(&_impl_.num_classes_, &from._impl_.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.evaluate_difficult_gt_) -
    reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.evaluate_difficult_gt_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DetectionEvaluateParameter)
}

inline void DetectionEvaluateParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_size_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.background_label_id_){0u}
    , decltype(_impl_.overlap_threshold_){0.5f}
    , decltype(_impl_.evaluate_difficult_gt_){true}
  };
  _impl_.name_size_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetectionEvaluateParameter::~DetectionEvaluateParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DetectionEvaluateParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionEvaluateParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_size_file_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resize_param_;
}

void DetectionEvaluateParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionEvaluateParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DetectionEvaluateParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_size_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.resize_param_ != nullptr);
      _impl_.resize_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_label_id_) -
        reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.background_label_id_));
    _impl_.overlap_threshold_ = 0.5f;
    _impl_.evaluate_difficult_gt_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionEvaluateParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 background_label_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_background_label_id(&has_bits);
          _impl_.background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float overlap_threshold = 3 [default = 0.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_overlap_threshold(&has_bits);
          _impl_.overlap_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool evaluate_difficult_gt = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_evaluate_difficult_gt(&has_bits);
          _impl_.evaluate_difficult_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name_size_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name_size_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DetectionEvaluateParameter.name_size_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionEvaluateParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DetectionEvaluateParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional uint32 background_label_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_background_label_id(), target);
  }

  // optional float overlap_threshold = 3 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_overlap_threshold(), target);
  }

  // optional bool evaluate_difficult_gt = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_evaluate_difficult_gt(), target);
  }

  // optional string name_size_file = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_size_file().data(), static_cast<int>(this->_internal_name_size_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DetectionEvaluateParameter.name_size_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_size_file(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resize_param(this),
        _Internal::resize_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DetectionEvaluateParameter)
  return target;
}

size_t DetectionEvaluateParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DetectionEvaluateParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name_size_file = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_size_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resize_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

    // optional uint32 background_label_id = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_background_label_id());
    }

    // optional float overlap_threshold = 3 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool evaluate_difficult_gt = 4 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionEvaluateParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectionEvaluateParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionEvaluateParameter::GetClassData() const { return &_class_data_; }

void DetectionEvaluateParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectionEvaluateParameter *>(to)->MergeFrom(
      static_cast<const DetectionEvaluateParameter &>(from));
}


void DetectionEvaluateParameter::MergeFrom(const DetectionEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_size_file(from._internal_name_size_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.background_label_id_ = from._impl_.background_label_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.overlap_threshold_ = from._impl_.overlap_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.evaluate_difficult_gt_ = from._impl_.evaluate_difficult_gt_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionEvaluateParameter::CopyFrom(const DetectionEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionEvaluateParameter::IsInitialized() const {
  return true;
}

void DetectionEvaluateParameter::InternalSwap(DetectionEvaluateParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_size_file_, lhs_arena,
      &other->_impl_.name_size_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionEvaluateParameter, _impl_.background_label_id_)
      + sizeof(DetectionEvaluateParameter::_impl_.background_label_id_)
      - PROTOBUF_FIELD_OFFSET(DetectionEvaluateParameter, _impl_.resize_param_)>(
          reinterpret_cast<char*>(&_impl_.resize_param_),
          reinterpret_cast<char*>(&other->_impl_.resize_param_));
  swap(_impl_.overlap_threshold_, other->_impl_.overlap_threshold_);
  swap(_impl_.evaluate_difficult_gt_, other->_impl_.evaluate_difficult_gt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionEvaluateParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[37]);
}

// ===================================================================

class NonMaximumSuppressionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NonMaximumSuppressionParameter>()._impl_._has_bits_);
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NonMaximumSuppressionParameter::NonMaximumSuppressionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NonMaximumSuppressionParameter)
}
NonMaximumSuppressionParameter::NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_k_){}
    , decltype(_impl_.nms_threshold_){}
    , decltype(_impl_.eta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top_k_, &from._impl_.top_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eta_) -
    reinterpret_cast<char*>(&_impl_.top_k_)) + sizeof(_impl_.eta_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NonMaximumSuppressionParameter)
}

inline void NonMaximumSuppressionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_k_){0}
    , decltype(_impl_.nms_threshold_){0.3f}
    , decltype(_impl_.eta_){1}
  };
}

NonMaximumSuppressionParameter::~NonMaximumSuppressionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NonMaximumSuppressionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonMaximumSuppressionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NonMaximumSuppressionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NonMaximumSuppressionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.top_k_ = 0;
    _impl_.nms_threshold_ = 0.3f;
    _impl_.eta_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonMaximumSuppressionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float nms_threshold = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_nms_threshold(&has_bits);
          _impl_.nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          _impl_.top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float eta = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_eta(&has_bits);
          _impl_.eta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonMaximumSuppressionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_nms_threshold(), target);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional float eta = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_eta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NonMaximumSuppressionParameter)
  return target;
}

size_t NonMaximumSuppressionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 top_k = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top_k());
    }

    // optional float nms_threshold = 1 [default = 0.3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float eta = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonMaximumSuppressionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NonMaximumSuppressionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonMaximumSuppressionParameter::GetClassData() const { return &_class_data_; }

void NonMaximumSuppressionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NonMaximumSuppressionParameter *>(to)->MergeFrom(
      static_cast<const NonMaximumSuppressionParameter &>(from));
}


void NonMaximumSuppressionParameter::MergeFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.top_k_ = from._impl_.top_k_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nms_threshold_ = from._impl_.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.eta_ = from._impl_.eta_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonMaximumSuppressionParameter::CopyFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonMaximumSuppressionParameter::IsInitialized() const {
  return true;
}

void NonMaximumSuppressionParameter::InternalSwap(NonMaximumSuppressionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.top_k_, other->_impl_.top_k_);
  swap(_impl_.nms_threshold_, other->_impl_.nms_threshold_);
  swap(_impl_.eta_, other->_impl_.eta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NonMaximumSuppressionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[38]);
}

// ===================================================================

class SaveOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveOutputParameter>()._impl_._has_bits_);
  static void set_has_output_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_name_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label_map_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name_size_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_test_image(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const SaveOutputParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
SaveOutputParameter::_Internal::resize_param(const SaveOutputParameter* msg) {
  return *msg->_impl_.resize_param_;
}
SaveOutputParameter::SaveOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SaveOutputParameter)
}
SaveOutputParameter::SaveOutputParameter(const SaveOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_directory_){}
    , decltype(_impl_.output_name_prefix_){}
    , decltype(_impl_.output_format_){}
    , decltype(_impl_.label_map_file_){}
    , decltype(_impl_.name_size_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.num_test_image_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_directory()) {
    _impl_.output_directory_.Set(from._internal_output_directory(), 
      GetArenaForAllocation());
  }
  _impl_.output_name_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_name_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_name_prefix()) {
    _impl_.output_name_prefix_.Set(from._internal_output_name_prefix(), 
      GetArenaForAllocation());
  }
  _impl_.output_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_format()) {
    _impl_.output_format_.Set(from._internal_output_format(), 
      GetArenaForAllocation());
  }
  _impl_.label_map_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label_map_file()) {
    _impl_.label_map_file_.Set(from._internal_label_map_file(), 
      GetArenaForAllocation());
  }
  _impl_.name_size_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_size_file()) {
    _impl_.name_size_file_.Set(from._internal_name_size_file(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resize_param()) {
    _impl_.resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from._impl_.resize_param_);
  }
  _impl_.num_test_image_ = from._impl_.num_test_image_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SaveOutputParameter)
}

inline void SaveOutputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_directory_){}
    , decltype(_impl_.output_name_prefix_){}
    , decltype(_impl_.output_format_){}
    , decltype(_impl_.label_map_file_){}
    , decltype(_impl_.name_size_file_){}
    , decltype(_impl_.resize_param_){nullptr}
    , decltype(_impl_.num_test_image_){0u}
  };
  _impl_.output_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_name_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_name_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_map_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_map_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_size_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_size_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveOutputParameter::~SaveOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SaveOutputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_directory_.Destroy();
  _impl_.output_name_prefix_.Destroy();
  _impl_.output_format_.Destroy();
  _impl_.label_map_file_.Destroy();
  _impl_.name_size_file_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resize_param_;
}

void SaveOutputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SaveOutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_name_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.label_map_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.name_size_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.resize_param_ != nullptr);
      _impl_.resize_param_->Clear();
    }
  }
  _impl_.num_test_image_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveOutputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_directory");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string output_name_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_output_name_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_name_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string output_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_output_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string label_map_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label_map_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.label_map_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name_size_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name_size_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.name_size_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_test_image = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_test_image(&has_bits);
          _impl_.num_test_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveOutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SaveOutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string output_directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_directory().data(), static_cast<int>(this->_internal_output_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_directory(), target);
  }

  // optional string output_name_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_name_prefix().data(), static_cast<int>(this->_internal_output_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_name_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_name_prefix(), target);
  }

  // optional string output_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_format().data(), static_cast<int>(this->_internal_output_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output_format(), target);
  }

  // optional string label_map_file = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_file().data(), static_cast<int>(this->_internal_label_map_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.label_map_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label_map_file(), target);
  }

  // optional string name_size_file = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_size_file().data(), static_cast<int>(this->_internal_name_size_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.name_size_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_size_file(), target);
  }

  // optional uint32 num_test_image = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_test_image(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::resize_param(this),
        _Internal::resize_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SaveOutputParameter)
  return target;
}

size_t SaveOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SaveOutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string output_directory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_directory());
    }

    // optional string output_name_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_name_prefix());
    }

    // optional string output_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_format());
    }

    // optional string label_map_file = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_file());
    }

    // optional string name_size_file = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_size_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resize_param_);
    }

    // optional uint32 num_test_image = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_test_image());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveOutputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaveOutputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveOutputParameter::GetClassData() const { return &_class_data_; }

void SaveOutputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaveOutputParameter *>(to)->MergeFrom(
      static_cast<const SaveOutputParameter &>(from));
}


void SaveOutputParameter::MergeFrom(const SaveOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SaveOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_output_directory(from._internal_output_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_name_prefix(from._internal_output_name_prefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_format(from._internal_output_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_label_map_file(from._internal_label_map_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_name_size_file(from._internal_name_size_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.num_test_image_ = from._impl_.num_test_image_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveOutputParameter::CopyFrom(const SaveOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SaveOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOutputParameter::IsInitialized() const {
  return true;
}

void SaveOutputParameter::InternalSwap(SaveOutputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_directory_, lhs_arena,
      &other->_impl_.output_directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_name_prefix_, lhs_arena,
      &other->_impl_.output_name_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_format_, lhs_arena,
      &other->_impl_.output_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_map_file_, lhs_arena,
      &other->_impl_.label_map_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_size_file_, lhs_arena,
      &other->_impl_.name_size_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveOutputParameter, _impl_.num_test_image_)
      + sizeof(SaveOutputParameter::_impl_.num_test_image_)
      - PROTOBUF_FIELD_OFFSET(SaveOutputParameter, _impl_.resize_param_)>(
          reinterpret_cast<char*>(&_impl_.resize_param_),
          reinterpret_cast<char*>(&other->_impl_.resize_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveOutputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[39]);
}

// ===================================================================

class DetectionOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionOutputParameter>()._impl_._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const DetectionOutputParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::SaveOutputParameter& save_output_param(const DetectionOutputParameter* msg);
  static void set_has_save_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_variance_encoded_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_visualize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_visualize_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_save_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
DetectionOutputParameter::_Internal::nms_param(const DetectionOutputParameter* msg) {
  return *msg->_impl_.nms_param_;
}
const ::apollo::perception::inference::SaveOutputParameter&
DetectionOutputParameter::_Internal::save_output_param(const DetectionOutputParameter* msg) {
  return *msg->_impl_.save_output_param_;
}
DetectionOutputParameter::DetectionOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DetectionOutputParameter)
}
DetectionOutputParameter::DetectionOutputParameter(const DetectionOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_file_){}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.save_output_param_){nullptr}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.background_label_id_){}
    , decltype(_impl_.confidence_threshold_){}
    , decltype(_impl_.variance_encoded_in_target_){}
    , decltype(_impl_.visualize_){}
    , decltype(_impl_.visualize_threshold_){}
    , decltype(_impl_.keep_top_k_){}
    , decltype(_impl_.share_location_){}
    , decltype(_impl_.code_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.save_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_save_file()) {
    _impl_.save_file_.Set(from._internal_save_file(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from._impl_.nms_param_);
  }
  if (from._internal_has_save_output_param()) {
    _impl_.save_output_param_ = new ::apollo::perception::inference::SaveOutputParameter(*from._impl_.save_output_param_);
  }
  ::memcpy(&_impl_.num_classes_, &from._impl_.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_type_) -
    reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.code_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DetectionOutputParameter)
}

inline void DetectionOutputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_file_){}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.save_output_param_){nullptr}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.background_label_id_){0}
    , decltype(_impl_.confidence_threshold_){0}
    , decltype(_impl_.variance_encoded_in_target_){false}
    , decltype(_impl_.visualize_){false}
    , decltype(_impl_.visualize_threshold_){0}
    , decltype(_impl_.keep_top_k_){-1}
    , decltype(_impl_.share_location_){true}
    , decltype(_impl_.code_type_){1}
  };
  _impl_.save_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetectionOutputParameter::~DetectionOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DetectionOutputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.save_file_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nms_param_;
  if (this != internal_default_instance()) delete _impl_.save_output_param_;
}

void DetectionOutputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DetectionOutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.save_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
      _impl_.nms_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.save_output_param_ != nullptr);
      _impl_.save_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.visualize_) -
        reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.visualize_));
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.visualize_threshold_ = 0;
    _impl_.keep_top_k_ = -1;
    _impl_.share_location_ = true;
    _impl_.code_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionOutputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_location = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_share_location(&has_bits);
          _impl_.share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 background_label_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_background_label_id(&has_bits);
          _impl_.background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(val))) {
            _internal_set_code_type(static_cast<::apollo::perception::inference::PriorBoxParameter_CodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_keep_top_k(&has_bits);
          _impl_.keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool variance_encoded_in_target = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_variance_encoded_in_target(&has_bits);
          _impl_.variance_encoded_in_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          _impl_.confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool visualize = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_visualize(&has_bits);
          _impl_.visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float visualize_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_visualize_threshold(&has_bits);
          _impl_.visualize_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string save_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_save_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DetectionOutputParameter.save_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionOutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DetectionOutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 2 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_share_location(), target);
  }

  // optional int32 background_label_id = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_background_label_id(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::save_output_param(this),
        _Internal::save_output_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_code_type(), target);
  }

  // optional int32 keep_top_k = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_top_k(), target);
  }

  // optional bool variance_encoded_in_target = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_variance_encoded_in_target(), target);
  }

  // optional float confidence_threshold = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence_threshold(), target);
  }

  // optional bool visualize = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_visualize(), target);
  }

  // optional float visualize_threshold = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_visualize_threshold(), target);
  }

  // optional string save_file = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_file().data(), static_cast<int>(this->_internal_save_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DetectionOutputParameter.save_file");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_save_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DetectionOutputParameter)
  return target;
}

size_t DetectionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DetectionOutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string save_file = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_file());
    }

    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

    // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.save_output_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

    // optional int32 background_label_id = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_label_id());
    }

    // optional float confidence_threshold = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool variance_encoded_in_target = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool visualize = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float visualize_threshold = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 7 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keep_top_k());
    }

    // optional bool share_location = 2 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionOutputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectionOutputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionOutputParameter::GetClassData() const { return &_class_data_; }

void DetectionOutputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectionOutputParameter *>(to)->MergeFrom(
      static_cast<const DetectionOutputParameter &>(from));
}


void DetectionOutputParameter::MergeFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_save_file(from._internal_save_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_save_output_param()->::apollo::perception::inference::SaveOutputParameter::MergeFrom(from._internal_save_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.background_label_id_ = from._impl_.background_label_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.confidence_threshold_ = from._impl_.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.variance_encoded_in_target_ = from._impl_.variance_encoded_in_target_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.visualize_ = from._impl_.visualize_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.visualize_threshold_ = from._impl_.visualize_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.keep_top_k_ = from._impl_.keep_top_k_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.share_location_ = from._impl_.share_location_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.code_type_ = from._impl_.code_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionOutputParameter::CopyFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DetectionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOutputParameter::IsInitialized() const {
  return true;
}

void DetectionOutputParameter::InternalSwap(DetectionOutputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_file_, lhs_arena,
      &other->_impl_.save_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionOutputParameter, _impl_.visualize_threshold_)
      + sizeof(DetectionOutputParameter::_impl_.visualize_threshold_)
      - PROTOBUF_FIELD_OFFSET(DetectionOutputParameter, _impl_.nms_param_)>(
          reinterpret_cast<char*>(&_impl_.nms_param_),
          reinterpret_cast<char*>(&other->_impl_.nms_param_));
  swap(_impl_.keep_top_k_, other->_impl_.keep_top_k_);
  swap(_impl_.share_location_, other->_impl_.share_location_);
  swap(_impl_.code_type_, other->_impl_.code_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionOutputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[40]);
}

// ===================================================================

class RegionOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionOutputParameter>()._impl_._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const RegionOutputParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nms_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nms_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_rpn(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
RegionOutputParameter::_Internal::nms_param(const RegionOutputParameter* msg) {
  return *msg->_impl_.nms_param_;
}
RegionOutputParameter::RegionOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.RegionOutputParameter)
}
RegionOutputParameter::RegionOutputParameter(const RegionOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){from._impl_.anchorbox_}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.confidence_threshold_){}
    , decltype(_impl_.nms_type_){}
    , decltype(_impl_.nms_sigma_){}
    , decltype(_impl_.is_rpn_){}
    , decltype(_impl_.keep_top_k_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from._impl_.nms_param_);
  }
  ::memcpy(&_impl_.num_classes_, &from._impl_.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keep_top_k_) -
    reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.keep_top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionOutputParameter)
}

inline void RegionOutputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){arena}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.confidence_threshold_){0}
    , decltype(_impl_.nms_type_){0}
    , decltype(_impl_.nms_sigma_){0}
    , decltype(_impl_.is_rpn_){false}
    , decltype(_impl_.keep_top_k_){-1}
  };
}

RegionOutputParameter::~RegionOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionOutputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anchorbox_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.nms_param_;
}

void RegionOutputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionOutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.anchorbox_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
    _impl_.nms_param_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_rpn_) -
        reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.is_rpn_));
    _impl_.keep_top_k_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionOutputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_keep_top_k(&has_bits);
          _impl_.keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          _impl_.confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 nms_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_nms_type(&has_bits);
          _impl_.nms_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float nms_sigma = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_nms_sigma(&has_bits);
          _impl_.nms_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rpn = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_rpn(&has_bits);
          _impl_.is_rpn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionOutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionOutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 keep_top_k = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_keep_top_k(), target);
  }

  // optional float confidence_threshold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence_threshold(), target);
  }

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_anchorbox_size()); i < n; i++) {
    const auto& repfield = this->_internal_anchorbox(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 nms_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_nms_type(), target);
  }

  // optional float nms_sigma = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_nms_sigma(), target);
  }

  // optional bool is_rpn = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_rpn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionOutputParameter)
  return target;
}

size_t RegionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionOutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->_impl_.anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

    // optional float confidence_threshold = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 nms_type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nms_type());
    }

    // optional float nms_sigma = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool is_rpn = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 keep_top_k = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keep_top_k());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionOutputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegionOutputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionOutputParameter::GetClassData() const { return &_class_data_; }

void RegionOutputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegionOutputParameter *>(to)->MergeFrom(
      static_cast<const RegionOutputParameter &>(from));
}


void RegionOutputParameter::MergeFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.anchorbox_.MergeFrom(from._impl_.anchorbox_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.confidence_threshold_ = from._impl_.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.nms_type_ = from._impl_.nms_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.nms_sigma_ = from._impl_.nms_sigma_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_rpn_ = from._impl_.is_rpn_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.keep_top_k_ = from._impl_.keep_top_k_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionOutputParameter::CopyFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOutputParameter::IsInitialized() const {
  return true;
}

void RegionOutputParameter::InternalSwap(RegionOutputParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.anchorbox_.InternalSwap(&other->_impl_.anchorbox_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionOutputParameter, _impl_.is_rpn_)
      + sizeof(RegionOutputParameter::_impl_.is_rpn_)
      - PROTOBUF_FIELD_OFFSET(RegionOutputParameter, _impl_.nms_param_)>(
          reinterpret_cast<char*>(&_impl_.nms_param_),
          reinterpret_cast<char*>(&other->_impl_.nms_param_));
  swap(_impl_.keep_top_k_, other->_impl_.keep_top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionOutputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[41]);
}

// ===================================================================

class DropoutParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DropoutParameter>()._impl_._has_bits_);
  static void set_has_dropout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DropoutParameter::DropoutParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dropout_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dropout_ratio_ = from._impl_.dropout_ratio_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DropoutParameter)
}

inline void DropoutParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dropout_ratio_){0.5f}
  };
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DropoutParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropoutParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DropoutParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DropoutParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dropout_ratio_ = 0.5f;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropoutParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_dropout_ratio(&has_bits);
          _impl_.dropout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropoutParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DropoutParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_dropout_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DropoutParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float dropout_ratio = 1 [default = 0.5];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropoutParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropoutParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropoutParameter::GetClassData() const { return &_class_data_; }

void DropoutParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropoutParameter *>(to)->MergeFrom(
      static_cast<const DropoutParameter &>(from));
}


void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dropout_ratio()) {
    _internal_set_dropout_ratio(from._internal_dropout_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  return true;
}

void DropoutParameter::InternalSwap(DropoutParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dropout_ratio_, other->_impl_.dropout_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropoutParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[42]);
}

// ===================================================================

class DummyDataParameter::_Internal {
 public:
};

DummyDataParameter::DummyDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DummyDataParameter)
}
DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_filler_){from._impl_.data_filler_}
    , decltype(_impl_.num_){from._impl_.num_}
    , decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.height_){from._impl_.height_}
    , decltype(_impl_.width_){from._impl_.width_}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DummyDataParameter)
}

inline void DummyDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_filler_){arena}
    , decltype(_impl_.num_){arena}
    , decltype(_impl_.channels_){arena}
    , decltype(_impl_.height_){arena}
    , decltype(_impl_.width_){arena}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DummyDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DummyDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_filler_.~RepeatedPtrField();
  _impl_.num_.~RepeatedField();
  _impl_.channels_.~RepeatedField();
  _impl_.height_.~RepeatedField();
  _impl_.width_.~RepeatedField();
  _impl_.shape_.~RepeatedPtrField();
}

void DummyDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DummyDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_filler_.Clear();
  _impl_.num_.Clear();
  _impl_.channels_.Clear();
  _impl_.height_.Clear();
  _impl_.width_.Clear();
  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_filler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_num(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_height(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_width(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_width(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobShape shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DummyDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DummyDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_filler_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_filler(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 num = 2;
  for (int i = 0, n = this->_internal_num_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(i), target);
  }

  // repeated uint32 channels = 3;
  for (int i = 0, n = this->_internal_channels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channels(i), target);
  }

  // repeated uint32 height = 4;
  for (int i = 0, n = this->_internal_height_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(i), target);
  }

  // repeated uint32 width = 5;
  for (int i = 0, n = this->_internal_width_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(i), target);
  }

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DummyDataParameter)
  return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DummyDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  total_size += 1UL * this->_internal_data_filler_size();
  for (const auto& msg : this->_impl_.data_filler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.num_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.channels_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_channels_size());
    total_size += data_size;
  }

  // repeated uint32 height = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.height_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_height_size());
    total_size += data_size;
  }

  // repeated uint32 width = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.width_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_width_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DummyDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyDataParameter::GetClassData() const { return &_class_data_; }

void DummyDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DummyDataParameter *>(to)->MergeFrom(
      static_cast<const DummyDataParameter &>(from));
}


void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_filler_.MergeFrom(from._impl_.data_filler_);
  _impl_.num_.MergeFrom(from._impl_.num_);
  _impl_.channels_.MergeFrom(from._impl_.channels_);
  _impl_.height_.MergeFrom(from._impl_.height_);
  _impl_.width_.MergeFrom(from._impl_.width_);
  _impl_.shape_.MergeFrom(from._impl_.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {
  return true;
}

void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_filler_.InternalSwap(&other->_impl_.data_filler_);
  _impl_.num_.InternalSwap(&other->_impl_.num_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  _impl_.height_.InternalSwap(&other->_impl_.height_);
  _impl_.width_.InternalSwap(&other->_impl_.width_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[43]);
}

// ===================================================================

class EltwiseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<EltwiseParameter>()._impl_._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stable_prod_grad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EltwiseParameter::EltwiseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coeff_){from._impl_.coeff_}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.stable_prod_grad_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.operation_, &from._impl_.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stable_prod_grad_) -
    reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.stable_prod_grad_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EltwiseParameter)
}

inline void EltwiseParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coeff_){arena}
    , decltype(_impl_.operation_){1}
    , decltype(_impl_.stable_prod_grad_){true}
  };
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EltwiseParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EltwiseParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coeff_.~RepeatedField();
}

void EltwiseParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EltwiseParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coeff_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.operation_ = 1;
    _impl_.stable_prod_grad_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EltwiseParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::EltwiseParameter_EltwiseOp_IsValid(val))) {
            _internal_set_operation(static_cast<::apollo::perception::inference::EltwiseParameter_EltwiseOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated float coeff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coeff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coeff(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stable_prod_grad = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stable_prod_grad(&has_bits);
          _impl_.stable_prod_grad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EltwiseParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EltwiseParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0, n = this->_internal_coeff_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_stable_prod_grad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EltwiseParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coeff = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coeff_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_coeff_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EltwiseParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EltwiseParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EltwiseParameter::GetClassData() const { return &_class_data_; }

void EltwiseParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EltwiseParameter *>(to)->MergeFrom(
      static_cast<const EltwiseParameter &>(from));
}


void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.coeff_.MergeFrom(from._impl_.coeff_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.operation_ = from._impl_.operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stable_prod_grad_ = from._impl_.stable_prod_grad_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
  return true;
}

void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.coeff_.InternalSwap(&other->_impl_.coeff_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_.stable_prod_grad_, other->_impl_.stable_prod_grad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EltwiseParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[44]);
}

// ===================================================================

class ELUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ELUParameter>()._impl_._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ELUParameter::ELUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ELUParameter)
}
ELUParameter::ELUParameter(const ELUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alpha_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.alpha_ = from._impl_.alpha_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ELUParameter)
}

inline void ELUParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alpha_){1}
  };
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ELUParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ELUParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ELUParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ELUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alpha_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ELUParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float alpha = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ELUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ELUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ELUParameter)
  return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ELUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float alpha = 1 [default = 1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ELUParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ELUParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ELUParameter::GetClassData() const { return &_class_data_; }

void ELUParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ELUParameter *>(to)->MergeFrom(
      static_cast<const ELUParameter &>(from));
}


void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alpha()) {
    _internal_set_alpha(from._internal_alpha());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {
  return true;
}

void ELUParameter::InternalSwap(ELUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.alpha_, other->_impl_.alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ELUParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[45]);
}

// ===================================================================

class EmbedParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<EmbedParameter>()._impl_._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const EmbedParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const EmbedParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
EmbedParameter::_Internal::weight_filler(const EmbedParameter* msg) {
  return *msg->_impl_.weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
EmbedParameter::_Internal::bias_filler(const EmbedParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
EmbedParameter::EmbedParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.EmbedParameter)
}
EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.input_dim_){}
    , decltype(_impl_.bias_term_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    _impl_.weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.weight_filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  ::memcpy(&_impl_.num_output_, &from._impl_.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bias_term_) -
    reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.bias_term_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EmbedParameter)
}

inline void EmbedParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){0u}
    , decltype(_impl_.input_dim_){0u}
    , decltype(_impl_.bias_term_){true}
  };
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EmbedParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmbedParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weight_filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
}

void EmbedParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EmbedParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.weight_filler_ != nullptr);
      _impl_.weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_dim_) -
        reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.input_dim_));
    _impl_.bias_term_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmbedParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 input_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_input_dim(&has_bits);
          _impl_.input_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bias_term(&has_bits);
          _impl_.bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmbedParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EmbedParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::weight_filler(this),
        _Internal::weight_filler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EmbedParameter)
  return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EmbedParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional uint32 input_dim = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmbedParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmbedParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmbedParameter::GetClassData() const { return &_class_data_; }

void EmbedParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmbedParameter *>(to)->MergeFrom(
      static_cast<const EmbedParameter &>(from));
}


void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.input_dim_ = from._impl_.input_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bias_term_ = from._impl_.bias_term_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {
  return true;
}

void EmbedParameter::InternalSwap(EmbedParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmbedParameter, _impl_.input_dim_)
      + sizeof(EmbedParameter::_impl_.input_dim_)
      - PROTOBUF_FIELD_OFFSET(EmbedParameter, _impl_.weight_filler_)>(
          reinterpret_cast<char*>(&_impl_.weight_filler_),
          reinterpret_cast<char*>(&other->_impl_.weight_filler_));
  swap(_impl_.bias_term_, other->_impl_.bias_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmbedParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[46]);
}

// ===================================================================

class ExpParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpParameter>()._impl_._has_bits_);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExpParameter::ExpParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ExpParameter)
}
ExpParameter::ExpParameter(const ExpParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shift_, &from._impl_.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.shift_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ExpParameter)
}

inline void ExpParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){0}
    , decltype(_impl_.base_){-1}
    , decltype(_impl_.scale_){1}
  };
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ExpParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ExpParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.shift_ = 0;
    _impl_.base_ = -1;
    _impl_.scale_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          _impl_.shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ExpParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ExpParameter)
  return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ExpParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpParameter::GetClassData() const { return &_class_data_; }

void ExpParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExpParameter *>(to)->MergeFrom(
      static_cast<const ExpParameter &>(from));
}


void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.shift_ = from._impl_.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
  return true;
}

void ExpParameter::InternalSwap(ExpParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shift_, other->_impl_.shift_);
  swap(_impl_.base_, other->_impl_.base_);
  swap(_impl_.scale_, other->_impl_.scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[47]);
}

// ===================================================================

class FlattenParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FlattenParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FlattenParameter::FlattenParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.end_axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_axis_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.end_axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.FlattenParameter)
}

inline void FlattenParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){1}
    , decltype(_impl_.end_axis_){-1}
  };
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.FlattenParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlattenParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlattenParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.FlattenParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.axis_ = 1;
    _impl_.end_axis_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlattenParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_axis = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_axis(&has_bits);
          _impl_.end_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlattenParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.FlattenParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.FlattenParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlattenParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlattenParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlattenParameter::GetClassData() const { return &_class_data_; }

void FlattenParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlattenParameter *>(to)->MergeFrom(
      static_cast<const FlattenParameter &>(from));
}


void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_axis_ = from._impl_.end_axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
  return true;
}

void FlattenParameter::InternalSwap(FlattenParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.axis_, other->_impl_.axis_);
  swap(_impl_.end_axis_, other->_impl_.end_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[48]);
}

// ===================================================================

class HDF5DataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HDF5DataParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HDF5DataParameter::HDF5DataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.HDF5DataParameter)
}
HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.shuffle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shuffle_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.shuffle_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HDF5DataParameter)
}

inline void HDF5DataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.batch_size_){0u}
    , decltype(_impl_.shuffle_){false}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HDF5DataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HDF5DataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.Destroy();
}

void HDF5DataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HDF5DataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.source_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shuffle_) -
        reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.shuffle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HDF5DataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.HDF5DataParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_size(&has_bits);
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shuffle = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shuffle(&has_bits);
          _impl_.shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HDF5DataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HDF5DataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.HDF5DataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_shuffle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HDF5DataParameter)
  return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HDF5DataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional uint32 batch_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HDF5DataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HDF5DataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HDF5DataParameter::GetClassData() const { return &_class_data_; }

void HDF5DataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HDF5DataParameter *>(to)->MergeFrom(
      static_cast<const HDF5DataParameter &>(from));
}


void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.batch_size_ = from._impl_.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.shuffle_ = from._impl_.shuffle_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {
  return true;
}

void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HDF5DataParameter, _impl_.shuffle_)
      + sizeof(HDF5DataParameter::_impl_.shuffle_)
      - PROTOBUF_FIELD_OFFSET(HDF5DataParameter, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HDF5DataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[49]);
}

// ===================================================================

class HDF5OutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HDF5OutputParameter>()._impl_._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HDF5OutputParameter::HDF5OutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.HDF5OutputParameter)
}
HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _impl_.file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HDF5OutputParameter)
}

inline void HDF5OutputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HDF5OutputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HDF5OutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HDF5OutputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.file_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HDF5OutputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.HDF5OutputParameter.file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HDF5OutputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HDF5OutputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.HDF5OutputParameter.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HDF5OutputParameter)
  return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HDF5OutputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string file_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HDF5OutputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HDF5OutputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HDF5OutputParameter::GetClassData() const { return &_class_data_; }

void HDF5OutputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HDF5OutputParameter *>(to)->MergeFrom(
      static_cast<const HDF5OutputParameter &>(from));
}


void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_name()) {
    _internal_set_file_name(from._internal_file_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {
  return true;
}

void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HDF5OutputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[50]);
}

// ===================================================================

class HingeLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HingeLossParameter>()._impl_._has_bits_);
  static void set_has_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HingeLossParameter::HingeLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.HingeLossParameter)
}
HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.norm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.norm_ = from._impl_.norm_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HingeLossParameter)
}

inline void HingeLossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.norm_){1}
  };
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HingeLossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HingeLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HingeLossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HingeLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.norm_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HingeLossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::HingeLossParameter_Norm_IsValid(val))) {
            _internal_set_norm(static_cast<::apollo::perception::inference::HingeLossParameter_Norm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HingeLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HingeLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HingeLossParameter)
  return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HingeLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_norm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HingeLossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HingeLossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HingeLossParameter::GetClassData() const { return &_class_data_; }

void HingeLossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HingeLossParameter *>(to)->MergeFrom(
      static_cast<const HingeLossParameter &>(from));
}


void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_norm()) {
    _internal_set_norm(from._internal_norm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {
  return true;
}

void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.norm_, other->_impl_.norm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HingeLossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[51]);
}

// ===================================================================

class RepeatedList::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedList>()._impl_._has_bits_);
  static void set_has_list_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_repeat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RepeatedList::RepeatedList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.RepeatedList)
}
RepeatedList::RepeatedList(const RepeatedList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_path_){}
    , decltype(_impl_.num_repeat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.list_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_list_path()) {
    _impl_.list_path_.Set(from._internal_list_path(), 
      GetArenaForAllocation());
  }
  _impl_.num_repeat_ = from._impl_.num_repeat_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RepeatedList)
}

inline void RepeatedList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_path_){}
    , decltype(_impl_.num_repeat_){1u}
  };
  _impl_.list_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.list_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RepeatedList::~RepeatedList() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RepeatedList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatedList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_path_.Destroy();
}

void RepeatedList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepeatedList::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RepeatedList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.list_path_.ClearNonDefaultToEmpty();
    }
    _impl_.num_repeat_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatedList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string list_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_list_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.RepeatedList.list_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_repeat = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_repeat(&has_bits);
          _impl_.num_repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatedList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RepeatedList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string list_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_list_path().data(), static_cast<int>(this->_internal_list_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.RepeatedList.list_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_path(), target);
  }

  // optional uint32 num_repeat = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RepeatedList)
  return target;
}

size_t RepeatedList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RepeatedList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string list_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_list_path());
    }

    // optional uint32 num_repeat = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_repeat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatedList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepeatedList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatedList::GetClassData() const { return &_class_data_; }

void RepeatedList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepeatedList *>(to)->MergeFrom(
      static_cast<const RepeatedList &>(from));
}


void RepeatedList::MergeFrom(const RepeatedList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RepeatedList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_list_path(from._internal_list_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.num_repeat_ = from._impl_.num_repeat_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatedList::CopyFrom(const RepeatedList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RepeatedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedList::IsInitialized() const {
  return true;
}

void RepeatedList::InternalSwap(RepeatedList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.list_path_, lhs_arena,
      &other->_impl_.list_path_, rhs_arena
  );
  swap(_impl_.num_repeat_, other->_impl_.num_repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[52]);
}

// ===================================================================

class DatasetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DatasetParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DatasetParameter::DatasetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DatasetParameter)
}
DatasetParameter::DatasetParameter(const DatasetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_list_){from._impl_.repeated_list_}
    , decltype(_impl_.source_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.shuffle_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_root_folder()) {
    _impl_.root_folder_.Set(from._internal_root_folder(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shuffle_, &from._impl_.shuffle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.shuffle_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DatasetParameter)
}

inline void DatasetParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_list_){arena}
    , decltype(_impl_.source_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.shuffle_){true}
    , decltype(_impl_.weight_){1}
    , decltype(_impl_.type_){1}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetParameter::~DatasetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DatasetParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.repeated_list_.~RepeatedPtrField();
  _impl_.source_.Destroy();
  _impl_.root_folder_.Destroy();
}

void DatasetParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DatasetParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.repeated_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.root_folder_.ClearNonDefaultToEmpty();
    }
    _impl_.shuffle_ = true;
    _impl_.weight_ = 1;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DatasetParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string root_folder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.DatasetParameter.root_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float weight = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_weight(&has_bits);
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::DatasetParameter_DatasetType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::DatasetParameter_DatasetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool shuffle = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shuffle(&has_bits);
          _impl_.shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DatasetParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DatasetParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional string root_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DatasetParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_root_folder(), target);
  }

  // optional float weight = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(), target);
  }

  // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bool shuffle = 5 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_shuffle(), target);
  }

  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DatasetParameter)
  return target;
}

size_t DatasetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DatasetParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  total_size += 1UL * this->_internal_repeated_list_size();
  for (const auto& msg : this->_impl_.repeated_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string root_folder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional bool shuffle = 5 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float weight = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatasetParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetParameter::GetClassData() const { return &_class_data_; }

void DatasetParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DatasetParameter *>(to)->MergeFrom(
      static_cast<const DatasetParameter &>(from));
}


void DatasetParameter::MergeFrom(const DatasetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DatasetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.repeated_list_.MergeFrom(from._impl_.repeated_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_root_folder(from._internal_root_folder());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.shuffle_ = from._impl_.shuffle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.weight_ = from._impl_.weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetParameter::CopyFrom(const DatasetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DatasetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetParameter::IsInitialized() const {
  return true;
}

void DatasetParameter::InternalSwap(DatasetParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.repeated_list_.InternalSwap(&other->_impl_.repeated_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_folder_, lhs_arena,
      &other->_impl_.root_folder_, rhs_arena
  );
  swap(_impl_.shuffle_, other->_impl_.shuffle_);
  swap(_impl_.weight_, other->_impl_.weight_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[53]);
}

// ===================================================================

class ImageDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageDataParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefetch(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ImageDataParameter::ImageDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ImageDataParameter)
}
ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_set_){from._impl_.image_set_}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.crop_size_){}
    , decltype(_impl_.rand_skip_){}
    , decltype(_impl_.shuffle_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.new_height_){}
    , decltype(_impl_.new_width_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.is_color_){}
    , decltype(_impl_.prefetch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mean_file()) {
    _impl_.mean_file_.Set(from._internal_mean_file(), 
      GetArenaForAllocation());
  }
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_root_folder()) {
    _impl_.root_folder_.Set(from._internal_root_folder(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.crop_size_, &from._impl_.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prefetch_) -
    reinterpret_cast<char*>(&_impl_.crop_size_)) + sizeof(_impl_.prefetch_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ImageDataParameter)
}

inline void ImageDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_set_){arena}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.crop_size_){0u}
    , decltype(_impl_.rand_skip_){0u}
    , decltype(_impl_.shuffle_){false}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.new_height_){0u}
    , decltype(_impl_.new_width_){0u}
    , decltype(_impl_.scale_){1}
    , decltype(_impl_.batch_size_){1u}
    , decltype(_impl_.is_color_){true}
    , decltype(_impl_.prefetch_){4u}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ImageDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_set_.~RepeatedPtrField();
  _impl_.source_.Destroy();
  _impl_.mean_file_.Destroy();
  _impl_.root_folder_.Destroy();
}

void ImageDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ImageDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_set_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mean_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.root_folder_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_height_) -
        reinterpret_cast<char*>(&_impl_.crop_size_)) + sizeof(_impl_.new_height_));
  }
  if (cached_has_bits & 0x00001f00u) {
    _impl_.new_width_ = 0u;
    _impl_.scale_ = 1;
    _impl_.batch_size_ = 1u;
    _impl_.is_color_ = true;
    _impl_.prefetch_ = 4u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.mean_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          _impl_.crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rand_skip(&has_bits);
          _impl_.rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shuffle = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shuffle(&has_bits);
          _impl_.shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_height = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_new_height(&has_bits);
          _impl_.new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_width = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_new_width(&has_bits);
          _impl_.new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_color = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_color(&has_bits);
          _impl_.is_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string root_folder = 12 [default = ""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.root_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prefetch = 20 [default = 4];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_prefetch(&has_bits);
          _impl_.prefetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_image_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ImageDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_root_folder(), target);
  }

  // optional uint32 prefetch = 20 [default = 4];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_prefetch(), target);
  }

  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ImageDataParameter)
  return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ImageDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  total_size += 2UL * this->_internal_image_set_size();
  for (const auto& msg : this->_impl_.image_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string root_folder = 12 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_height());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 new_width = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_width());
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional bool is_color = 11 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 prefetch = 20 [default = 4];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_prefetch());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageDataParameter::GetClassData() const { return &_class_data_; }

void ImageDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageDataParameter *>(to)->MergeFrom(
      static_cast<const ImageDataParameter &>(from));
}


void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.image_set_.MergeFrom(from._impl_.image_set_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_root_folder(from._internal_root_folder());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.crop_size_ = from._impl_.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rand_skip_ = from._impl_.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.shuffle_ = from._impl_.shuffle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.mirror_ = from._impl_.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.new_height_ = from._impl_.new_height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.new_width_ = from._impl_.new_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.batch_size_ = from._impl_.batch_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.is_color_ = from._impl_.is_color_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.prefetch_ = from._impl_.prefetch_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {
  return true;
}

void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_set_.InternalSwap(&other->_impl_.image_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mean_file_, lhs_arena,
      &other->_impl_.mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_folder_, lhs_arena,
      &other->_impl_.root_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageDataParameter, _impl_.new_width_)
      + sizeof(ImageDataParameter::_impl_.new_width_)
      - PROTOBUF_FIELD_OFFSET(ImageDataParameter, _impl_.crop_size_)>(
          reinterpret_cast<char*>(&_impl_.crop_size_),
          reinterpret_cast<char*>(&other->_impl_.crop_size_));
  swap(_impl_.scale_, other->_impl_.scale_);
  swap(_impl_.batch_size_, other->_impl_.batch_size_);
  swap(_impl_.is_color_, other->_impl_.is_color_);
  swap(_impl_.prefetch_, other->_impl_.prefetch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[54]);
}

// ===================================================================

class InfogainLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InfogainLossParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InfogainLossParameter::InfogainLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.InfogainLossParameter)
}
InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InfogainLossParameter)
}

inline void InfogainLossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InfogainLossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfogainLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.Destroy();
}

void InfogainLossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InfogainLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.source_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfogainLossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.InfogainLossParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfogainLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InfogainLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.InfogainLossParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InfogainLossParameter)
  return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InfogainLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string source = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfogainLossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfogainLossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfogainLossParameter::GetClassData() const { return &_class_data_; }

void InfogainLossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InfogainLossParameter *>(to)->MergeFrom(
      static_cast<const InfogainLossParameter &>(from));
}


void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
  return true;
}

void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfogainLossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[55]);
}

// ===================================================================

class InnerProductParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InnerProductParameter>()._impl_._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const InnerProductParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const InnerProductParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::FillerParameter&
InnerProductParameter::_Internal::weight_filler(const InnerProductParameter* msg) {
  return *msg->_impl_.weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
InnerProductParameter::_Internal::bias_filler(const InnerProductParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
InnerProductParameter::InnerProductParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.transpose_){}
    , decltype(_impl_.bias_term_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    _impl_.weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.weight_filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  ::memcpy(&_impl_.num_output_, &from._impl_.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InnerProductParameter)
}

inline void InnerProductParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){0u}
    , decltype(_impl_.transpose_){false}
    , decltype(_impl_.bias_term_){true}
    , decltype(_impl_.axis_){1}
  };
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InnerProductParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerProductParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weight_filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
}

void InnerProductParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InnerProductParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.weight_filler_ != nullptr);
      _impl_.weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.transpose_) -
        reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.transpose_));
    _impl_.bias_term_ = true;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerProductParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          _impl_.bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool transpose = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_transpose(&has_bits);
          _impl_.transpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerProductParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InnerProductParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::weight_filler(this),
        _Internal::weight_filler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_transpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InnerProductParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional bool transpose = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerProductParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InnerProductParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerProductParameter::GetClassData() const { return &_class_data_; }

void InnerProductParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InnerProductParameter *>(to)->MergeFrom(
      static_cast<const InnerProductParameter &>(from));
}


void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.transpose_ = from._impl_.transpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bias_term_ = from._impl_.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  return true;
}

void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InnerProductParameter, _impl_.transpose_)
      + sizeof(InnerProductParameter::_impl_.transpose_)
      - PROTOBUF_FIELD_OFFSET(InnerProductParameter, _impl_.weight_filler_)>(
          reinterpret_cast<char*>(&_impl_.weight_filler_),
          reinterpret_cast<char*>(&other->_impl_.weight_filler_));
  swap(_impl_.bias_term_, other->_impl_.bias_term_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerProductParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[56]);
}

// ===================================================================

class InputParameter::_Internal {
 public:
};

InputParameter::InputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InputParameter)
}

inline void InputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
}

void InputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobShape shape = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobShape shape = 1;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputParameter::GetClassData() const { return &_class_data_; }

void InputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputParameter *>(to)->MergeFrom(
      static_cast<const InputParameter &>(from));
}


void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.shape_.MergeFrom(from._impl_.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[57]);
}

// ===================================================================

class LogParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LogParameter>()._impl_._has_bits_);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogParameter::LogParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LogParameter)
}
LogParameter::LogParameter(const LogParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shift_, &from._impl_.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.shift_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LogParameter)
}

inline void LogParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){0}
    , decltype(_impl_.base_){-1}
    , decltype(_impl_.scale_){1}
  };
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LogParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LogParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.shift_ = 0;
    _impl_.base_ = -1;
    _impl_.scale_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          _impl_.shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LogParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LogParameter)
  return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LogParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogParameter::GetClassData() const { return &_class_data_; }

void LogParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogParameter *>(to)->MergeFrom(
      static_cast<const LogParameter &>(from));
}


void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.shift_ = from._impl_.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {
  return true;
}

void LogParameter::InternalSwap(LogParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shift_, other->_impl_.shift_);
  swap(_impl_.base_, other->_impl_.base_);
  swap(_impl_.scale_, other->_impl_.scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[58]);
}

// ===================================================================

class LRNParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LRNParameter>()._impl_._has_bits_);
  static void set_has_local_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_norm_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LRNParameter::LRNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.LRNParameter)
}
LRNParameter::LRNParameter(const LRNParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.norm_region_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.local_size_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.k_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.norm_region_, &from._impl_.norm_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k_) -
    reinterpret_cast<char*>(&_impl_.norm_region_)) + sizeof(_impl_.k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LRNParameter)
}

inline void LRNParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.norm_region_){0}
    , decltype(_impl_.engine_){0}
    , decltype(_impl_.local_size_){5u}
    , decltype(_impl_.alpha_){1}
    , decltype(_impl_.beta_){0.75f}
    , decltype(_impl_.k_){1}
  };
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LRNParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LRNParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LRNParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LRNParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.norm_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.engine_) -
        reinterpret_cast<char*>(&_impl_.norm_region_)) + sizeof(_impl_.engine_));
    _impl_.local_size_ = 5u;
    _impl_.alpha_ = 1;
    _impl_.beta_ = 0.75f;
    _impl_.k_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LRNParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 local_size = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_local_size(&has_bits);
          _impl_.local_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_alpha(&has_bits);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float beta = 3 [default = 0.75];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_beta(&has_bits);
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LRNParameter_NormRegion_IsValid(val))) {
            _internal_set_norm_region(static_cast<::apollo::perception::inference::LRNParameter_NormRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float k = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_k(&has_bits);
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LRNParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::LRNParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LRNParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LRNParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_beta(), target);
  }

  // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_k(), target);
  }

  // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LRNParameter)
  return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LRNParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_norm_region());
    }

    // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float k = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LRNParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LRNParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LRNParameter::GetClassData() const { return &_class_data_; }

void LRNParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LRNParameter *>(to)->MergeFrom(
      static_cast<const LRNParameter &>(from));
}


void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.norm_region_ = from._impl_.norm_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.local_size_ = from._impl_.local_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.beta_ = from._impl_.beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.k_ = from._impl_.k_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
  return true;
}

void LRNParameter::InternalSwap(LRNParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LRNParameter, _impl_.engine_)
      + sizeof(LRNParameter::_impl_.engine_)
      - PROTOBUF_FIELD_OFFSET(LRNParameter, _impl_.norm_region_)>(
          reinterpret_cast<char*>(&_impl_.norm_region_),
          reinterpret_cast<char*>(&other->_impl_.norm_region_));
  swap(_impl_.local_size_, other->_impl_.local_size_);
  swap(_impl_.alpha_, other->_impl_.alpha_);
  swap(_impl_.beta_, other->_impl_.beta_);
  swap(_impl_.k_, other->_impl_.k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LRNParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[59]);
}

// ===================================================================

class MemoryDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryDataParameter>()._impl_._has_bits_);
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemoryDataParameter::MemoryDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.MemoryDataParameter)
}
MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MemoryDataParameter)
}

inline void MemoryDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batch_size_){0u}
    , decltype(_impl_.channels_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
  };
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MemoryDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MemoryDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_batch_size(&has_bits);
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MemoryDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MemoryDataParameter)
  return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MemoryDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 batch_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional uint32 channels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoryDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryDataParameter::GetClassData() const { return &_class_data_; }

void MemoryDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemoryDataParameter *>(to)->MergeFrom(
      static_cast<const MemoryDataParameter &>(from));
}


void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.batch_size_ = from._impl_.batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.channels_ = from._impl_.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_ = from._impl_.width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {
  return true;
}

void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryDataParameter, _impl_.width_)
      + sizeof(MemoryDataParameter::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(MemoryDataParameter, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[60]);
}

// ===================================================================

class MultiBoxLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiBoxLossParameter>()._impl_._has_bits_);
  static void set_has_loc_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_conf_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loc_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_overlap_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_prior_for_matching(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_difficult_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_do_neg_mining(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_neg_pos_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_neg_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_encode_variance_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_map_object_to_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_cross_boundary_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bp_inside(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mining_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const MultiBoxLossParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_use_prior_for_nms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
MultiBoxLossParameter::_Internal::nms_param(const MultiBoxLossParameter* msg) {
  return *msg->_impl_.nms_param_;
}
MultiBoxLossParameter::MultiBoxLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.MultiBoxLossParameter)
}
MultiBoxLossParameter::MultiBoxLossParameter(const MultiBoxLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.conf_loss_type_){}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.background_label_id_){}
    , decltype(_impl_.do_neg_mining_){}
    , decltype(_impl_.encode_variance_in_target_){}
    , decltype(_impl_.map_object_to_agnostic_){}
    , decltype(_impl_.ignore_cross_boundary_bbox_){}
    , decltype(_impl_.bp_inside_){}
    , decltype(_impl_.use_prior_for_nms_){}
    , decltype(_impl_.loc_loss_type_){}
    , decltype(_impl_.loc_weight_){}
    , decltype(_impl_.match_type_){}
    , decltype(_impl_.overlap_threshold_){}
    , decltype(_impl_.share_location_){}
    , decltype(_impl_.use_prior_for_matching_){}
    , decltype(_impl_.use_difficult_gt_){}
    , decltype(_impl_.neg_pos_ratio_){}
    , decltype(_impl_.neg_overlap_){}
    , decltype(_impl_.code_type_){}
    , decltype(_impl_.mining_type_){}
    , decltype(_impl_.sample_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from._impl_.nms_param_);
  }
  ::memcpy(&_impl_.conf_loss_type_, &from._impl_.conf_loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sample_size_) -
    reinterpret_cast<char*>(&_impl_.conf_loss_type_)) + sizeof(_impl_.sample_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MultiBoxLossParameter)
}

inline void MultiBoxLossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.conf_loss_type_){0}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.background_label_id_){0u}
    , decltype(_impl_.do_neg_mining_){false}
    , decltype(_impl_.encode_variance_in_target_){false}
    , decltype(_impl_.map_object_to_agnostic_){false}
    , decltype(_impl_.ignore_cross_boundary_bbox_){false}
    , decltype(_impl_.bp_inside_){false}
    , decltype(_impl_.use_prior_for_nms_){false}
    , decltype(_impl_.loc_loss_type_){1}
    , decltype(_impl_.loc_weight_){1}
    , decltype(_impl_.match_type_){1}
    , decltype(_impl_.overlap_threshold_){0.5f}
    , decltype(_impl_.share_location_){true}
    , decltype(_impl_.use_prior_for_matching_){true}
    , decltype(_impl_.use_difficult_gt_){true}
    , decltype(_impl_.neg_pos_ratio_){3}
    , decltype(_impl_.neg_overlap_){0.5f}
    , decltype(_impl_.code_type_){1}
    , decltype(_impl_.mining_type_){1}
    , decltype(_impl_.sample_size_){64}
  };
}

MultiBoxLossParameter::~MultiBoxLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MultiBoxLossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiBoxLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nms_param_;
}

void MultiBoxLossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiBoxLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MultiBoxLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
    _impl_.nms_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.conf_loss_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ignore_cross_boundary_bbox_) -
        reinterpret_cast<char*>(&_impl_.conf_loss_type_)) + sizeof(_impl_.ignore_cross_boundary_bbox_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bp_inside_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_prior_for_nms_) -
        reinterpret_cast<char*>(&_impl_.bp_inside_)) + sizeof(_impl_.use_prior_for_nms_));
    _impl_.loc_loss_type_ = 1;
    _impl_.loc_weight_ = 1;
    _impl_.match_type_ = 1;
    _impl_.overlap_threshold_ = 0.5f;
    _impl_.share_location_ = true;
    _impl_.use_prior_for_matching_ = true;
  }
  if (cached_has_bits & 0x003f0000u) {
    _impl_.use_difficult_gt_ = true;
    _impl_.neg_pos_ratio_ = 3;
    _impl_.neg_overlap_ = 0.5f;
    _impl_.code_type_ = 1;
    _impl_.mining_type_ = 1;
    _impl_.sample_size_ = 64;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiBoxLossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_LocLossType_IsValid(val))) {
            _internal_set_loc_loss_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_LocLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_IsValid(val))) {
            _internal_set_conf_loss_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_ConfLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float loc_weight = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_loc_weight(&has_bits);
          _impl_.loc_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_classes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_location = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_share_location(&has_bits);
          _impl_.share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float overlap_threshold = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_overlap_threshold(&has_bits);
          _impl_.overlap_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_prior_for_matching = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_use_prior_for_matching(&has_bits);
          _impl_.use_prior_for_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 background_label_id = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_background_label_id(&has_bits);
          _impl_.background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_difficult_gt = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_use_difficult_gt(&has_bits);
          _impl_.use_difficult_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool do_neg_mining = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_do_neg_mining(&has_bits);
          _impl_.do_neg_mining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float neg_pos_ratio = 12 [default = 3];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_neg_pos_ratio(&has_bits);
          _impl_.neg_pos_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float neg_overlap = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_neg_overlap(&has_bits);
          _impl_.neg_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(val))) {
            _internal_set_code_type(static_cast<::apollo::perception::inference::PriorBoxParameter_CodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool encode_variance_in_target = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_encode_variance_in_target(&has_bits);
          _impl_.encode_variance_in_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool map_object_to_agnostic = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_map_object_to_agnostic(&has_bits);
          _impl_.map_object_to_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_cross_boundary_bbox = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ignore_cross_boundary_bbox(&has_bits);
          _impl_.ignore_cross_boundary_bbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bp_inside = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_bp_inside(&has_bits);
          _impl_.bp_inside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_MiningType_IsValid(val))) {
            _internal_set_mining_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_MiningType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sample_size = 22 [default = 64];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_sample_size(&has_bits);
          _impl_.sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_prior_for_nms = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_prior_for_nms(&has_bits);
          _impl_.use_prior_for_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiBoxLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MultiBoxLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_loc_loss_type(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_conf_loss_type(), target);
  }

  // optional float loc_weight = 3 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_loc_weight(), target);
  }

  // optional uint32 num_classes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 5 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_share_location(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_match_type(), target);
  }

  // optional float overlap_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_overlap_threshold(), target);
  }

  // optional bool use_prior_for_matching = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_use_prior_for_matching(), target);
  }

  // optional uint32 background_label_id = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_background_label_id(), target);
  }

  // optional bool use_difficult_gt = 10 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_use_difficult_gt(), target);
  }

  // optional bool do_neg_mining = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_do_neg_mining(), target);
  }

  // optional float neg_pos_ratio = 12 [default = 3];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_neg_pos_ratio(), target);
  }

  // optional float neg_overlap = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_neg_overlap(), target);
  }

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_code_type(), target);
  }

  // optional bool encode_variance_in_target = 16 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_encode_variance_in_target(), target);
  }

  // optional bool map_object_to_agnostic = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_map_object_to_agnostic(), target);
  }

  // optional bool ignore_cross_boundary_bbox = 18 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_ignore_cross_boundary_bbox(), target);
  }

  // optional bool bp_inside = 19 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_bp_inside(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_mining_type(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 sample_size = 22 [default = 64];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_sample_size(), target);
  }

  // optional bool use_prior_for_nms = 23 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_use_prior_for_nms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MultiBoxLossParameter)
  return target;
}

size_t MultiBoxLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MultiBoxLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_conf_loss_type());
    }

    // optional uint32 num_classes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

    // optional uint32 background_label_id = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_background_label_id());
    }

    // optional bool do_neg_mining = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool encode_variance_in_target = 16 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool map_object_to_agnostic = 17 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_cross_boundary_bbox = 18 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool bp_inside = 19 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_prior_for_nms = 23 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_loc_loss_type());
    }

    // optional float loc_weight = 3 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional float overlap_threshold = 7 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional bool share_location = 5 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool use_prior_for_matching = 8 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool use_difficult_gt = 10 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional float neg_pos_ratio = 12 [default = 3];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float neg_overlap = 13 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code_type());
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mining_type());
    }

    // optional int32 sample_size = 22 [default = 64];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_sample_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiBoxLossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiBoxLossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiBoxLossParameter::GetClassData() const { return &_class_data_; }

void MultiBoxLossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiBoxLossParameter *>(to)->MergeFrom(
      static_cast<const MultiBoxLossParameter &>(from));
}


void MultiBoxLossParameter::MergeFrom(const MultiBoxLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MultiBoxLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.conf_loss_type_ = from._impl_.conf_loss_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.background_label_id_ = from._impl_.background_label_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.do_neg_mining_ = from._impl_.do_neg_mining_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.encode_variance_in_target_ = from._impl_.encode_variance_in_target_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.map_object_to_agnostic_ = from._impl_.map_object_to_agnostic_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ignore_cross_boundary_bbox_ = from._impl_.ignore_cross_boundary_bbox_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.bp_inside_ = from._impl_.bp_inside_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.use_prior_for_nms_ = from._impl_.use_prior_for_nms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.loc_loss_type_ = from._impl_.loc_loss_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.loc_weight_ = from._impl_.loc_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.match_type_ = from._impl_.match_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.overlap_threshold_ = from._impl_.overlap_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.share_location_ = from._impl_.share_location_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.use_prior_for_matching_ = from._impl_.use_prior_for_matching_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.use_difficult_gt_ = from._impl_.use_difficult_gt_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.neg_pos_ratio_ = from._impl_.neg_pos_ratio_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.neg_overlap_ = from._impl_.neg_overlap_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.code_type_ = from._impl_.code_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.mining_type_ = from._impl_.mining_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.sample_size_ = from._impl_.sample_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiBoxLossParameter::CopyFrom(const MultiBoxLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MultiBoxLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBoxLossParameter::IsInitialized() const {
  return true;
}

void MultiBoxLossParameter::InternalSwap(MultiBoxLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiBoxLossParameter, _impl_.use_prior_for_nms_)
      + sizeof(MultiBoxLossParameter::_impl_.use_prior_for_nms_)
      - PROTOBUF_FIELD_OFFSET(MultiBoxLossParameter, _impl_.nms_param_)>(
          reinterpret_cast<char*>(&_impl_.nms_param_),
          reinterpret_cast<char*>(&other->_impl_.nms_param_));
  swap(_impl_.loc_loss_type_, other->_impl_.loc_loss_type_);
  swap(_impl_.loc_weight_, other->_impl_.loc_weight_);
  swap(_impl_.match_type_, other->_impl_.match_type_);
  swap(_impl_.overlap_threshold_, other->_impl_.overlap_threshold_);
  swap(_impl_.share_location_, other->_impl_.share_location_);
  swap(_impl_.use_prior_for_matching_, other->_impl_.use_prior_for_matching_);
  swap(_impl_.use_difficult_gt_, other->_impl_.use_difficult_gt_);
  swap(_impl_.neg_pos_ratio_, other->_impl_.neg_pos_ratio_);
  swap(_impl_.neg_overlap_, other->_impl_.neg_overlap_);
  swap(_impl_.code_type_, other->_impl_.code_type_);
  swap(_impl_.mining_type_, other->_impl_.mining_type_);
  swap(_impl_.sample_size_, other->_impl_.sample_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiBoxLossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[61]);
}

// ===================================================================

class MVNParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MVNParameter>()._impl_._has_bits_);
  static void set_has_normalize_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_across_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MVNParameter::MVNParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.MVNParameter)
}
MVNParameter::MVNParameter(const MVNParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.across_channels_){}
    , decltype(_impl_.normalize_variance_){}
    , decltype(_impl_.eps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.across_channels_, &from._impl_.across_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eps_) -
    reinterpret_cast<char*>(&_impl_.across_channels_)) + sizeof(_impl_.eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MVNParameter)
}

inline void MVNParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.across_channels_){false}
    , decltype(_impl_.normalize_variance_){true}
    , decltype(_impl_.eps_){1e-09f}
  };
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MVNParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MVNParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MVNParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MVNParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.across_channels_ = false;
    _impl_.normalize_variance_ = true;
    _impl_.eps_ = 1e-09f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MVNParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool normalize_variance = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_normalize_variance(&has_bits);
          _impl_.normalize_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool across_channels = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_across_channels(&has_bits);
          _impl_.across_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float eps = 3 [default = 1e-09];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_eps(&has_bits);
          _impl_.eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MVNParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MVNParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MVNParameter)
  return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MVNParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool across_channels = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool normalize_variance = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MVNParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MVNParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MVNParameter::GetClassData() const { return &_class_data_; }

void MVNParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MVNParameter *>(to)->MergeFrom(
      static_cast<const MVNParameter &>(from));
}


void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.across_channels_ = from._impl_.across_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.normalize_variance_ = from._impl_.normalize_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.eps_ = from._impl_.eps_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {
  return true;
}

void MVNParameter::InternalSwap(MVNParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.across_channels_, other->_impl_.across_channels_);
  swap(_impl_.normalize_variance_, other->_impl_.normalize_variance_);
  swap(_impl_.eps_, other->_impl_.eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MVNParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[62]);
}

// ===================================================================

class NormalizeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizeParameter>()._impl_._has_bits_);
  static void set_has_across_spatial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::FillerParameter& scale_filler(const NormalizeParameter* msg);
  static void set_has_scale_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::FillerParameter&
NormalizeParameter::_Internal::scale_filler(const NormalizeParameter* msg) {
  return *msg->_impl_.scale_filler_;
}
NormalizeParameter::NormalizeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NormalizeParameter)
}
NormalizeParameter::NormalizeParameter(const NormalizeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_filler_){nullptr}
    , decltype(_impl_.across_spatial_){}
    , decltype(_impl_.channel_shared_){}
    , decltype(_impl_.eps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scale_filler()) {
    _impl_.scale_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.scale_filler_);
  }
  ::memcpy(&_impl_.across_spatial_, &from._impl_.across_spatial_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eps_) -
    reinterpret_cast<char*>(&_impl_.across_spatial_)) + sizeof(_impl_.eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NormalizeParameter)
}

inline void NormalizeParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_filler_){nullptr}
    , decltype(_impl_.across_spatial_){true}
    , decltype(_impl_.channel_shared_){true}
    , decltype(_impl_.eps_){1e-10f}
  };
}

NormalizeParameter::~NormalizeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NormalizeParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalizeParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scale_filler_;
}

void NormalizeParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NormalizeParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.scale_filler_ != nullptr);
      _impl_.scale_filler_->Clear();
    }
    _impl_.across_spatial_ = true;
    _impl_.channel_shared_ = true;
    _impl_.eps_ = 1e-10f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalizeParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool across_spatial = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_across_spatial(&has_bits);
          _impl_.across_spatial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_shared = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel_shared(&has_bits);
          _impl_.channel_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float eps = 4 [default = 1e-10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_eps(&has_bits);
          _impl_.eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalizeParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NormalizeParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool across_spatial = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_across_spatial(), target);
  }

  // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scale_filler(this),
        _Internal::scale_filler(this).GetCachedSize(), target, stream);
  }

  // optional bool channel_shared = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_channel_shared(), target);
  }

  // optional float eps = 4 [default = 1e-10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NormalizeParameter)
  return target;
}

size_t NormalizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NormalizeParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scale_filler_);
    }

    // optional bool across_spatial = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool channel_shared = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float eps = 4 [default = 1e-10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NormalizeParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NormalizeParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NormalizeParameter::GetClassData() const { return &_class_data_; }

void NormalizeParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NormalizeParameter *>(to)->MergeFrom(
      static_cast<const NormalizeParameter &>(from));
}


void NormalizeParameter::MergeFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NormalizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scale_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_scale_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.across_spatial_ = from._impl_.across_spatial_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.channel_shared_ = from._impl_.channel_shared_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.eps_ = from._impl_.eps_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NormalizeParameter::CopyFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeParameter::IsInitialized() const {
  return true;
}

void NormalizeParameter::InternalSwap(NormalizeParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.scale_filler_, other->_impl_.scale_filler_);
  swap(_impl_.across_spatial_, other->_impl_.across_spatial_);
  swap(_impl_.channel_shared_, other->_impl_.channel_shared_);
  swap(_impl_.eps_, other->_impl_.eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizeParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[63]);
}

// ===================================================================

class ParameterParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ParameterParameter>()._impl_._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const ParameterParameter* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::BlobShape&
ParameterParameter::_Internal::shape(const ParameterParameter* msg) {
  return *msg->_impl_.shape_;
}
ParameterParameter::ParameterParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ParameterParameter)
}
ParameterParameter::ParameterParameter(const ParameterParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _impl_.shape_ = new ::apollo::perception::inference::BlobShape(*from._impl_.shape_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ParameterParameter)
}

inline void ParameterParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
  };
}

ParameterParameter::~ParameterParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ParameterParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParameterParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void ParameterParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ParameterParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ParameterParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ParameterParameter)
  return target;
}

size_t ParameterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ParameterParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.BlobShape shape = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterParameter::GetClassData() const { return &_class_data_; }

void ParameterParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParameterParameter *>(to)->MergeFrom(
      static_cast<const ParameterParameter &>(from));
}


void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ParameterParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {
  return true;
}

void ParameterParameter::InternalSwap(ParameterParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shape_, other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[64]);
}

// ===================================================================

class PermuteParameter::_Internal {
 public:
};

PermuteParameter::PermuteParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PermuteParameter)
}
PermuteParameter::PermuteParameter(const PermuteParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.order_){from._impl_.order_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PermuteParameter)
}

inline void PermuteParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PermuteParameter::~PermuteParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PermuteParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermuteParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_.~RepeatedField();
}

void PermuteParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermuteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PermuteParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermuteParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermuteParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PermuteParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  for (int i = 0, n = this->_internal_order_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_order(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PermuteParameter)
  return target;
}

size_t PermuteParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PermuteParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.order_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_order_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermuteParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PermuteParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermuteParameter::GetClassData() const { return &_class_data_; }

void PermuteParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PermuteParameter *>(to)->MergeFrom(
      static_cast<const PermuteParameter &>(from));
}


void PermuteParameter::MergeFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.order_.MergeFrom(from._impl_.order_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermuteParameter::CopyFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermuteParameter::IsInitialized() const {
  return true;
}

void PermuteParameter::InternalSwap(PermuteParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_.InternalSwap(&other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermuteParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[65]);
}

// ===================================================================

class PoolingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PoolingParameter>()._impl_._has_bits_);
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pad_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pad_w(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_stride_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stride_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_global_pooling(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_round_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

PoolingParameter::PoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pool_){}
    , decltype(_impl_.kernel_size_){}
    , decltype(_impl_.pad_){}
    , decltype(_impl_.kernel_h_){}
    , decltype(_impl_.kernel_w_){}
    , decltype(_impl_.stride_h_){}
    , decltype(_impl_.stride_w_){}
    , decltype(_impl_.pad_h_){}
    , decltype(_impl_.pad_w_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.global_pooling_){}
    , decltype(_impl_.round_mode_){}
    , decltype(_impl_.stride_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pool_, &from._impl_.pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stride_) -
    reinterpret_cast<char*>(&_impl_.pool_)) + sizeof(_impl_.stride_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PoolingParameter)
}

inline void PoolingParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pool_){0}
    , decltype(_impl_.kernel_size_){0u}
    , decltype(_impl_.pad_){0u}
    , decltype(_impl_.kernel_h_){0u}
    , decltype(_impl_.kernel_w_){0u}
    , decltype(_impl_.stride_h_){0u}
    , decltype(_impl_.stride_w_){0u}
    , decltype(_impl_.pad_h_){0u}
    , decltype(_impl_.pad_w_){0u}
    , decltype(_impl_.engine_){0}
    , decltype(_impl_.global_pooling_){false}
    , decltype(_impl_.round_mode_){0}
    , decltype(_impl_.stride_){1u}
  };
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PoolingParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoolingParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoolingParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PoolingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pad_h_) -
        reinterpret_cast<char*>(&_impl_.pool_)) + sizeof(_impl_.pad_h_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.pad_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.round_mode_) -
        reinterpret_cast<char*>(&_impl_.pad_w_)) + sizeof(_impl_.round_mode_));
    _impl_.stride_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoolingParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PoolingParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::PoolingParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kernel_size(&has_bits);
          _impl_.kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pad(&has_bits);
          _impl_.pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kernel_h(&has_bits);
          _impl_.kernel_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernel_w = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kernel_w(&has_bits);
          _impl_.kernel_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride_h = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stride_h(&has_bits);
          _impl_.stride_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride_w = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_stride_w(&has_bits);
          _impl_.stride_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_h = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pad_h(&has_bits);
          _impl_.pad_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_w = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pad_w(&has_bits);
          _impl_.pad_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PoolingParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::PoolingParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool global_pooling = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_global_pooling(&has_bits);
          _impl_.global_pooling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter.RoundMode round_mode = 13 [default = CEIL];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PoolingParameter_RoundMode_IsValid(val))) {
            _internal_set_round_mode(static_cast<::apollo::perception::inference::PoolingParameter_RoundMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoolingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PoolingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pad_w(), target);
  }

  // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_global_pooling(), target);
  }

  // optional .apollo.perception.inference.PoolingParameter.RoundMode round_mode = 13 [default = CEIL];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_round_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PoolingParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional uint32 kernel_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_size());
    }

    // optional uint32 pad = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad());
    }

    // optional uint32 kernel_h = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernel_w());
    }

    // optional uint32 stride_h = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride_h());
    }

    // optional uint32 stride_w = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride_w());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_h());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 pad_w = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_w());
    }

    // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.PoolingParameter.RoundMode round_mode = 13 [default = CEIL];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_round_mode());
    }

    // optional uint32 stride = 3 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoolingParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoolingParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoolingParameter::GetClassData() const { return &_class_data_; }

void PoolingParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoolingParameter *>(to)->MergeFrom(
      static_cast<const PoolingParameter &>(from));
}


void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pool_ = from._impl_.pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.kernel_size_ = from._impl_.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pad_ = from._impl_.pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.kernel_h_ = from._impl_.kernel_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.kernel_w_ = from._impl_.kernel_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.stride_h_ = from._impl_.stride_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.stride_w_ = from._impl_.stride_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pad_h_ = from._impl_.pad_h_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.pad_w_ = from._impl_.pad_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.global_pooling_ = from._impl_.global_pooling_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.round_mode_ = from._impl_.round_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.stride_ = from._impl_.stride_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  return true;
}

void PoolingParameter::InternalSwap(PoolingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoolingParameter, _impl_.round_mode_)
      + sizeof(PoolingParameter::_impl_.round_mode_)
      - PROTOBUF_FIELD_OFFSET(PoolingParameter, _impl_.pool_)>(
          reinterpret_cast<char*>(&_impl_.pool_),
          reinterpret_cast<char*>(&other->_impl_.pool_));
  swap(_impl_.stride_, other->_impl_.stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolingParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[66]);
}

// ===================================================================

class PowerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerParameter>()._impl_._has_bits_);
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerParameter::PowerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PowerParameter)
}
PowerParameter::PowerParameter(const PowerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shift_, &from._impl_.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.shift_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PowerParameter)
}

inline void PowerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_){0}
    , decltype(_impl_.power_){1}
    , decltype(_impl_.scale_){1}
  };
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PowerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PowerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PowerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.shift_ = 0;
    _impl_.power_ = 1;
    _impl_.scale_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float power = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_power(&has_bits);
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          _impl_.shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PowerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PowerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PowerParameter)
  return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PowerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float power = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PowerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PowerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PowerParameter::GetClassData() const { return &_class_data_; }

void PowerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PowerParameter *>(to)->MergeFrom(
      static_cast<const PowerParameter &>(from));
}


void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.shift_ = from._impl_.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.power_ = from._impl_.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
  return true;
}

void PowerParameter::InternalSwap(PowerParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shift_, other->_impl_.shift_);
  swap(_impl_.power_, other->_impl_.power_);
  swap(_impl_.scale_, other->_impl_.scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[67]);
}

// ===================================================================

class PriorBoxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorBoxParameter>()._impl_._has_bits_);
  static void set_has_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_img_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_step_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PriorBoxParameter::PriorBoxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PriorBoxParameter)
}
PriorBoxParameter::PriorBoxParameter(const PriorBoxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_size_){from._impl_.min_size_}
    , decltype(_impl_.max_size_){from._impl_.max_size_}
    , decltype(_impl_.aspect_ratio_){from._impl_.aspect_ratio_}
    , decltype(_impl_.variance_){from._impl_.variance_}
    , decltype(_impl_.clip_){}
    , decltype(_impl_.img_size_){}
    , decltype(_impl_.img_h_){}
    , decltype(_impl_.img_w_){}
    , decltype(_impl_.step_){}
    , decltype(_impl_.step_h_){}
    , decltype(_impl_.step_w_){}
    , decltype(_impl_.flip_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.clip_, &from._impl_.clip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.clip_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PriorBoxParameter)
}

inline void PriorBoxParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_size_){arena}
    , decltype(_impl_.max_size_){arena}
    , decltype(_impl_.aspect_ratio_){arena}
    , decltype(_impl_.variance_){arena}
    , decltype(_impl_.clip_){false}
    , decltype(_impl_.img_size_){0u}
    , decltype(_impl_.img_h_){0u}
    , decltype(_impl_.img_w_){0u}
    , decltype(_impl_.step_){0}
    , decltype(_impl_.step_h_){0}
    , decltype(_impl_.step_w_){0}
    , decltype(_impl_.flip_){true}
    , decltype(_impl_.offset_){0.5f}
  };
}

PriorBoxParameter::~PriorBoxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PriorBoxParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriorBoxParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_size_.~RepeatedField();
  _impl_.max_size_.~RepeatedField();
  _impl_.aspect_ratio_.~RepeatedField();
  _impl_.variance_.~RepeatedField();
}

void PriorBoxParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriorBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PriorBoxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_size_.Clear();
  _impl_.max_size_.Clear();
  _impl_.aspect_ratio_.Clear();
  _impl_.variance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.clip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.step_w_) -
        reinterpret_cast<char*>(&_impl_.clip_)) + sizeof(_impl_.step_w_));
    _impl_.flip_ = true;
  }
  _impl_.offset_ = 0.5f;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriorBoxParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float min_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aspect_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_aspect_ratio(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool flip = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flip(&has_bits);
          _impl_.flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clip = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clip(&has_bits);
          _impl_.clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_variance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_variance(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_img_size(&has_bits);
          _impl_.img_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_img_h(&has_bits);
          _impl_.img_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 img_w = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_img_w(&has_bits);
          _impl_.img_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_step(&has_bits);
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float step_h = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_step_h(&has_bits);
          _impl_.step_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float step_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_step_w(&has_bits);
          _impl_.step_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float offset = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PriorBoxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PriorBoxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float min_size = 1;
  for (int i = 0, n = this->_internal_min_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_min_size(i), target);
  }

  // repeated float max_size = 2;
  for (int i = 0, n = this->_internal_max_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_size(i), target);
  }

  // repeated float aspect_ratio = 3;
  for (int i = 0, n = this->_internal_aspect_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_aspect_ratio(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool flip = 4 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_flip(), target);
  }

  // optional bool clip = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_clip(), target);
  }

  // repeated float variance = 6;
  for (int i = 0, n = this->_internal_variance_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_variance(i), target);
  }

  // optional uint32 img_size = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_img_size(), target);
  }

  // optional uint32 img_h = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_img_h(), target);
  }

  // optional uint32 img_w = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_img_w(), target);
  }

  // optional float step = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_step(), target);
  }

  // optional float step_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_step_h(), target);
  }

  // optional float step_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_step_w(), target);
  }

  // optional float offset = 13 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PriorBoxParameter)
  return target;
}

size_t PriorBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PriorBoxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_size = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_min_size_size());
    total_size += data_size;
  }

  // repeated float max_size = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_size_size());
    total_size += data_size;
  }

  // repeated float aspect_ratio = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aspect_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_aspect_ratio_size());
    total_size += data_size;
  }

  // repeated float variance = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variance_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_variance_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool clip = 5 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 img_size = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_size());
    }

    // optional uint32 img_h = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_h());
    }

    // optional uint32 img_w = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_img_w());
    }

    // optional float step = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float step_h = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float step_w = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool flip = 4 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional float offset = 13 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriorBoxParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriorBoxParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriorBoxParameter::GetClassData() const { return &_class_data_; }

void PriorBoxParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PriorBoxParameter *>(to)->MergeFrom(
      static_cast<const PriorBoxParameter &>(from));
}


void PriorBoxParameter::MergeFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.min_size_.MergeFrom(from._impl_.min_size_);
  _impl_.max_size_.MergeFrom(from._impl_.max_size_);
  _impl_.aspect_ratio_.MergeFrom(from._impl_.aspect_ratio_);
  _impl_.variance_.MergeFrom(from._impl_.variance_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.clip_ = from._impl_.clip_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.img_size_ = from._impl_.img_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.img_h_ = from._impl_.img_h_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.img_w_ = from._impl_.img_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.step_ = from._impl_.step_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.step_h_ = from._impl_.step_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.step_w_ = from._impl_.step_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.flip_ = from._impl_.flip_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriorBoxParameter::CopyFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PriorBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorBoxParameter::IsInitialized() const {
  return true;
}

void PriorBoxParameter::InternalSwap(PriorBoxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.min_size_.InternalSwap(&other->_impl_.min_size_);
  _impl_.max_size_.InternalSwap(&other->_impl_.max_size_);
  _impl_.aspect_ratio_.InternalSwap(&other->_impl_.aspect_ratio_);
  _impl_.variance_.InternalSwap(&other->_impl_.variance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriorBoxParameter, _impl_.step_w_)
      + sizeof(PriorBoxParameter::_impl_.step_w_)
      - PROTOBUF_FIELD_OFFSET(PriorBoxParameter, _impl_.clip_)>(
          reinterpret_cast<char*>(&_impl_.clip_),
          reinterpret_cast<char*>(&other->_impl_.clip_));
  swap(_impl_.flip_, other->_impl_.flip_);
  swap(_impl_.offset_, other->_impl_.offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorBoxParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[68]);
}

// ===================================================================

class PythonParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PythonParameter>()._impl_._has_bits_);
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_share_in_parallel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PythonParameter::PythonParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PythonParameter)
}
PythonParameter::PythonParameter(const PythonParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.param_str_){}
    , decltype(_impl_.share_in_parallel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module()) {
    _impl_.module_.Set(from._internal_module(), 
      GetArenaForAllocation());
  }
  _impl_.layer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layer()) {
    _impl_.layer_.Set(from._internal_layer(), 
      GetArenaForAllocation());
  }
  _impl_.param_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param_str()) {
    _impl_.param_str_.Set(from._internal_param_str(), 
      GetArenaForAllocation());
  }
  _impl_.share_in_parallel_ = from._impl_.share_in_parallel_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PythonParameter)
}

inline void PythonParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.param_str_){}
    , decltype(_impl_.share_in_parallel_){false}
  };
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PythonParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PythonParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_.Destroy();
  _impl_.layer_.Destroy();
  _impl_.param_str_.Destroy();
}

void PythonParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PythonParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.module_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.layer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.param_str_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.share_in_parallel_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PythonParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.module");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_layer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.layer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string param_str = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_param_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.param_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool share_in_parallel = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_share_in_parallel(&has_bits);
          _impl_.share_in_parallel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PythonParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PythonParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.module");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module(), target);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layer().data(), static_cast<int>(this->_internal_layer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.layer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param_str().data(), static_cast<int>(this->_internal_param_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.param_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_share_in_parallel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PythonParameter)
  return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PythonParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string module = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional string layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer());
    }

    // optional string param_str = 3 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PythonParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PythonParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PythonParameter::GetClassData() const { return &_class_data_; }

void PythonParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PythonParameter *>(to)->MergeFrom(
      static_cast<const PythonParameter &>(from));
}


void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_module(from._internal_module());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_layer(from._internal_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param_str(from._internal_param_str());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.share_in_parallel_ = from._impl_.share_in_parallel_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {
  return true;
}

void PythonParameter::InternalSwap(PythonParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_, lhs_arena,
      &other->_impl_.module_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layer_, lhs_arena,
      &other->_impl_.layer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_str_, lhs_arena,
      &other->_impl_.param_str_, rhs_arena
  );
  swap(_impl_.share_in_parallel_, other->_impl_.share_in_parallel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PythonParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[69]);
}

// ===================================================================

class RecurrentParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RecurrentParameter>()._impl_._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const RecurrentParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const RecurrentParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expose_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::FillerParameter&
RecurrentParameter::_Internal::weight_filler(const RecurrentParameter* msg) {
  return *msg->_impl_.weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
RecurrentParameter::_Internal::bias_filler(const RecurrentParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
RecurrentParameter::RecurrentParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.RecurrentParameter)
}
RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.debug_info_){}
    , decltype(_impl_.expose_hidden_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    _impl_.weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.weight_filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  ::memcpy(&_impl_.num_output_, &from._impl_.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expose_hidden_) -
    reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.expose_hidden_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RecurrentParameter)
}

inline void RecurrentParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.num_output_){0u}
    , decltype(_impl_.debug_info_){false}
    , decltype(_impl_.expose_hidden_){false}
  };
}

RecurrentParameter::~RecurrentParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RecurrentParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecurrentParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weight_filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
}

void RecurrentParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RecurrentParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.weight_filler_ != nullptr);
      _impl_.weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expose_hidden_) -
        reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.expose_hidden_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecurrentParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_output = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_info = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_debug_info(&has_bits);
          _impl_.debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool expose_hidden = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expose_hidden(&has_bits);
          _impl_.expose_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecurrentParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RecurrentParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_output = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::weight_filler(this),
        _Internal::weight_filler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  // optional bool debug_info = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_debug_info(), target);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_expose_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RecurrentParameter)
  return target;
}

size_t RecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RecurrentParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional uint32 num_output = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional bool debug_info = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool expose_hidden = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecurrentParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecurrentParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecurrentParameter::GetClassData() const { return &_class_data_; }

void RecurrentParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecurrentParameter *>(to)->MergeFrom(
      static_cast<const RecurrentParameter &>(from));
}


void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.debug_info_ = from._impl_.debug_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.expose_hidden_ = from._impl_.expose_hidden_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {
  return true;
}

void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecurrentParameter, _impl_.expose_hidden_)
      + sizeof(RecurrentParameter::_impl_.expose_hidden_)
      - PROTOBUF_FIELD_OFFSET(RecurrentParameter, _impl_.weight_filler_)>(
          reinterpret_cast<char*>(&_impl_.weight_filler_),
          reinterpret_cast<char*>(&other->_impl_.weight_filler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecurrentParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[70]);
}

// ===================================================================

class ReductionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReductionParameter>()._impl_._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReductionParameter::ReductionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ReductionParameter)
}
ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.coeff_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coeff_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.coeff_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReductionParameter)
}

inline void ReductionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){0}
    , decltype(_impl_.operation_){1}
    , decltype(_impl_.coeff_){1}
  };
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReductionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReductionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReductionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReductionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.axis_ = 0;
    _impl_.operation_ = 1;
    _impl_.coeff_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReductionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ReductionParameter_ReductionOp_IsValid(val))) {
            _internal_set_operation(static_cast<::apollo::perception::inference::ReductionParameter_ReductionOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float coeff = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_coeff(&has_bits);
          _impl_.coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReductionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReductionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReductionParameter)
  return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReductionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional float coeff = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReductionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReductionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReductionParameter::GetClassData() const { return &_class_data_; }

void ReductionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReductionParameter *>(to)->MergeFrom(
      static_cast<const ReductionParameter &>(from));
}


void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.operation_ = from._impl_.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.coeff_ = from._impl_.coeff_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {
  return true;
}

void ReductionParameter::InternalSwap(ReductionParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.axis_, other->_impl_.axis_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_.coeff_, other->_impl_.coeff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReductionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[71]);
}

// ===================================================================

class ReLUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReLUParameter>()._impl_._has_bits_);
  static void set_has_negative_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReLUParameter::ReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_slope_){}
    , decltype(_impl_.engine_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.negative_slope_, &from._impl_.negative_slope_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.engine_) -
    reinterpret_cast<char*>(&_impl_.negative_slope_)) + sizeof(_impl_.engine_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReLUParameter)
}

inline void ReLUParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.negative_slope_){0}
    , decltype(_impl_.engine_){0}
  };
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReLUParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReLUParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReLUParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReLUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.negative_slope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.engine_) -
        reinterpret_cast<char*>(&_impl_.negative_slope_)) + sizeof(_impl_.engine_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReLUParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float negative_slope = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_negative_slope(&has_bits);
          _impl_.negative_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ReLUParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::ReLUParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReLUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReLUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_negative_slope(), target);
  }

  // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReLUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float negative_slope = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReLUParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReLUParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReLUParameter::GetClassData() const { return &_class_data_; }

void ReLUParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReLUParameter *>(to)->MergeFrom(
      static_cast<const ReLUParameter &>(from));
}


void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.negative_slope_ = from._impl_.negative_slope_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
  return true;
}

void ReLUParameter::InternalSwap(ReLUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReLUParameter, _impl_.engine_)
      + sizeof(ReLUParameter::_impl_.engine_)
      - PROTOBUF_FIELD_OFFSET(ReLUParameter, _impl_.negative_slope_)>(
          reinterpret_cast<char*>(&_impl_.negative_slope_),
          reinterpret_cast<char*>(&other->_impl_.negative_slope_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLUParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[72]);
}

// ===================================================================

class ReshapeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReshapeParameter>()._impl_._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const ReshapeParameter* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::inference::BlobShape&
ReshapeParameter::_Internal::shape(const ReshapeParameter* msg) {
  return *msg->_impl_.shape_;
}
ReshapeParameter::ReshapeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ReshapeParameter)
}
ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.num_axes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _impl_.shape_ = new ::apollo::perception::inference::BlobShape(*from._impl_.shape_);
  }
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_axes_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReshapeParameter)
}

inline void ReshapeParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.axis_){0}
    , decltype(_impl_.num_axes_){-1}
  };
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReshapeParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReshapeParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void ReshapeParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReshapeParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.axis_ = 0;
    _impl_.num_axes_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReshapeParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_axes(&has_bits);
          _impl_.num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReshapeParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReshapeParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_axes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReshapeParameter)
  return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReshapeParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.BlobShape shape = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReshapeParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReshapeParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReshapeParameter::GetClassData() const { return &_class_data_; }

void ReshapeParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReshapeParameter *>(to)->MergeFrom(
      static_cast<const ReshapeParameter &>(from));
}


void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_axes_ = from._impl_.num_axes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
  return true;
}

void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReshapeParameter, _impl_.axis_)
      + sizeof(ReshapeParameter::_impl_.axis_)
      - PROTOBUF_FIELD_OFFSET(ReshapeParameter, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
  swap(_impl_.num_axes_, other->_impl_.num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReshapeParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[73]);
}

// ===================================================================

class ROIPoolingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIPoolingParameter>()._impl_._has_bits_);
  static void set_has_pooled_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pooled_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spatial_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ROIPoolingParameter::ROIPoolingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ROIPoolingParameter)
}
ROIPoolingParameter::ROIPoolingParameter(const ROIPoolingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pooled_h_){}
    , decltype(_impl_.pooled_w_){}
    , decltype(_impl_.use_floor_){}
    , decltype(_impl_.spatial_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pooled_h_, &from._impl_.pooled_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spatial_scale_) -
    reinterpret_cast<char*>(&_impl_.pooled_h_)) + sizeof(_impl_.spatial_scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ROIPoolingParameter)
}

inline void ROIPoolingParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pooled_h_){0u}
    , decltype(_impl_.pooled_w_){0u}
    , decltype(_impl_.use_floor_){false}
    , decltype(_impl_.spatial_scale_){1}
  };
}

ROIPoolingParameter::~ROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ROIPoolingParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROIPoolingParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROIPoolingParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.pooled_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_floor_) -
        reinterpret_cast<char*>(&_impl_.pooled_h_)) + sizeof(_impl_.use_floor_));
    _impl_.spatial_scale_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROIPoolingParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pooled_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pooled_h(&has_bits);
          _impl_.pooled_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pooled_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pooled_w(&has_bits);
          _impl_.pooled_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float spatial_scale = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_spatial_scale(&has_bits);
          _impl_.spatial_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_floor = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_use_floor(&has_bits);
          _impl_.use_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROIPoolingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ROIPoolingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pooled_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pooled_h(), target);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pooled_w(), target);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_spatial_scale(), target);
  }

  // optional bool use_floor = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_use_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ROIPoolingParameter)
  return target;
}

size_t ROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ROIPoolingParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 pooled_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pooled_h());
    }

    // optional uint32 pooled_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pooled_w());
    }

    // optional bool use_floor = 10 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float spatial_scale = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROIPoolingParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROIPoolingParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROIPoolingParameter::GetClassData() const { return &_class_data_; }

void ROIPoolingParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROIPoolingParameter *>(to)->MergeFrom(
      static_cast<const ROIPoolingParameter &>(from));
}


void ROIPoolingParameter::MergeFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pooled_h_ = from._impl_.pooled_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pooled_w_ = from._impl_.pooled_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.use_floor_ = from._impl_.use_floor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.spatial_scale_ = from._impl_.spatial_scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROIPoolingParameter::CopyFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIPoolingParameter::IsInitialized() const {
  return true;
}

void ROIPoolingParameter::InternalSwap(ROIPoolingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ROIPoolingParameter, _impl_.use_floor_)
      + sizeof(ROIPoolingParameter::_impl_.use_floor_)
      - PROTOBUF_FIELD_OFFSET(ROIPoolingParameter, _impl_.pooled_h_)>(
          reinterpret_cast<char*>(&_impl_.pooled_h_),
          reinterpret_cast<char*>(&other->_impl_.pooled_h_));
  swap(_impl_.spatial_scale_, other->_impl_.spatial_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIPoolingParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[74]);
}

// ===================================================================

class ScaleParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaleParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& filler(const ScaleParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const ScaleParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
ScaleParameter::_Internal::filler(const ScaleParameter* msg) {
  return *msg->_impl_.filler_;
}
const ::apollo::perception::inference::FillerParameter&
ScaleParameter::_Internal::bias_filler(const ScaleParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
ScaleParameter::ScaleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ScaleParameter)
}
ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.bias_term_){}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.num_axes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filler()) {
    _impl_.filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  ::memcpy(&_impl_.bias_term_, &from._impl_.bias_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_axes_) -
    reinterpret_cast<char*>(&_impl_.bias_term_)) + sizeof(_impl_.num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ScaleParameter)
}

inline void ScaleParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.bias_term_){false}
    , decltype(_impl_.axis_){1}
    , decltype(_impl_.num_axes_){1}
  };
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ScaleParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScaleParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
}

void ScaleParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ScaleParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.filler_ != nullptr);
      _impl_.filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    _impl_.bias_term_ = false;
    _impl_.axis_ = 1;
    _impl_.num_axes_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaleParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          _impl_.num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_term = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bias_term(&has_bits);
          _impl_.bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScaleParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ScaleParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filler(this),
        _Internal::filler(this).GetCachedSize(), target, stream);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ScaleParameter)
  return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ScaleParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScaleParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScaleParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScaleParameter::GetClassData() const { return &_class_data_; }

void ScaleParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScaleParameter *>(to)->MergeFrom(
      static_cast<const ScaleParameter &>(from));
}


void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bias_term_ = from._impl_.bias_term_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.num_axes_ = from._impl_.num_axes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {
  return true;
}

void ScaleParameter::InternalSwap(ScaleParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaleParameter, _impl_.bias_term_)
      + sizeof(ScaleParameter::_impl_.bias_term_)
      - PROTOBUF_FIELD_OFFSET(ScaleParameter, _impl_.filler_)>(
          reinterpret_cast<char*>(&_impl_.filler_),
          reinterpret_cast<char*>(&other->_impl_.filler_));
  swap(_impl_.axis_, other->_impl_.axis_);
  swap(_impl_.num_axes_, other->_impl_.num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[75]);
}

// ===================================================================

class SigmoidParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SigmoidParameter>()._impl_._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SigmoidParameter::SigmoidParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SigmoidParameter)
}
SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.engine_ = from._impl_.engine_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SigmoidParameter)
}

inline void SigmoidParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){0}
  };
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SigmoidParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmoidParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SigmoidParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SigmoidParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.engine_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmoidParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SigmoidParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SigmoidParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmoidParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SigmoidParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SigmoidParameter)
  return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SigmoidParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmoidParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SigmoidParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmoidParameter::GetClassData() const { return &_class_data_; }

void SigmoidParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SigmoidParameter *>(to)->MergeFrom(
      static_cast<const SigmoidParameter &>(from));
}


void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {
  return true;
}

void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.engine_, other->_impl_.engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[76]);
}

// ===================================================================

class SliceParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SliceParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slice_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SliceParameter::SliceParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SliceParameter)
}
SliceParameter::SliceParameter(const SliceParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slice_point_){from._impl_.slice_point_}
    , decltype(_impl_.slice_dim_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slice_dim_, &from._impl_.slice_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.slice_dim_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SliceParameter)
}

inline void SliceParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slice_point_){arena}
    , decltype(_impl_.slice_dim_){1u}
    , decltype(_impl_.axis_){1}
  };
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SliceParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SliceParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slice_point_.~RepeatedField();
}

void SliceParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SliceParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slice_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.slice_dim_ = 1u;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slice_dim(&has_bits);
          _impl_.slice_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 slice_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_slice_point(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slice_point(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SliceParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SliceParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0, n = this->_internal_slice_point_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SliceParameter)
  return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SliceParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 slice_point = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.slice_point_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_slice_point_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slice_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slice_dim());
    }

    // optional int32 axis = 3 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SliceParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SliceParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SliceParameter::GetClassData() const { return &_class_data_; }

void SliceParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SliceParameter *>(to)->MergeFrom(
      static_cast<const SliceParameter &>(from));
}


void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.slice_point_.MergeFrom(from._impl_.slice_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.slice_dim_ = from._impl_.slice_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {
  return true;
}

void SliceParameter::InternalSwap(SliceParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slice_point_.InternalSwap(&other->_impl_.slice_point_);
  swap(_impl_.slice_dim_, other->_impl_.slice_dim_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[77]);
}

// ===================================================================

class SoftmaxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftmaxParameter>()._impl_._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SoftmaxParameter::SoftmaxParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SoftmaxParameter)
}
SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.engine_, &from._impl_.engine_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.engine_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SoftmaxParameter)
}

inline void SoftmaxParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){0}
    , decltype(_impl_.axis_){1}
  };
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SoftmaxParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SoftmaxParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SoftmaxParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SoftmaxParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.engine_ = 0;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftmaxParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SoftmaxParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SoftmaxParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SoftmaxParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SoftmaxParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SoftmaxParameter)
  return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SoftmaxParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SoftmaxParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SoftmaxParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SoftmaxParameter::GetClassData() const { return &_class_data_; }

void SoftmaxParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SoftmaxParameter *>(to)->MergeFrom(
      static_cast<const SoftmaxParameter &>(from));
}


void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {
  return true;
}

void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.engine_, other->_impl_.engine_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftmaxParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[78]);
}

// ===================================================================

class TanHParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TanHParameter>()._impl_._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TanHParameter::TanHParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.TanHParameter)
}
TanHParameter::TanHParameter(const TanHParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.engine_ = from._impl_.engine_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TanHParameter)
}

inline void TanHParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.engine_){0}
  };
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TanHParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TanHParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TanHParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TanHParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.engine_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TanHParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::TanHParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::TanHParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TanHParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TanHParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TanHParameter)
  return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TanHParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TanHParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TanHParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TanHParameter::GetClassData() const { return &_class_data_; }

void TanHParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TanHParameter *>(to)->MergeFrom(
      static_cast<const TanHParameter &>(from));
}


void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {
  return true;
}

void TanHParameter::InternalSwap(TanHParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.engine_, other->_impl_.engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TanHParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[79]);
}

// ===================================================================

class TileParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TileParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TileParameter::TileParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.TileParameter)
}
TileParameter::TileParameter(const TileParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tiles_){}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tiles_, &from._impl_.tiles_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_) -
    reinterpret_cast<char*>(&_impl_.tiles_)) + sizeof(_impl_.axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TileParameter)
}

inline void TileParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tiles_){0}
    , decltype(_impl_.axis_){1}
  };
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TileParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TileParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.tiles_ = 0;
    _impl_.axis_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tiles(&has_bits);
          _impl_.tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TileParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tiles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TileParameter)
  return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TileParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tiles = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tiles());
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileParameter::GetClassData() const { return &_class_data_; }

void TileParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileParameter *>(to)->MergeFrom(
      static_cast<const TileParameter &>(from));
}


void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tiles_ = from._impl_.tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {
  return true;
}

void TileParameter::InternalSwap(TileParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tiles_, other->_impl_.tiles_);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[80]);
}

// ===================================================================

class ThresholdParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ThresholdParameter>()._impl_._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThresholdParameter::ThresholdParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ThresholdParameter)
}
ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.threshold_ = from._impl_.threshold_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ThresholdParameter)
}

inline void ThresholdParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){0}
  };
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ThresholdParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThresholdParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThresholdParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ThresholdParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threshold_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float threshold = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThresholdParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ThresholdParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ThresholdParameter)
  return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ThresholdParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float threshold = 1 [default = 0];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThresholdParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThresholdParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThresholdParameter::GetClassData() const { return &_class_data_; }

void ThresholdParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThresholdParameter *>(to)->MergeFrom(
      static_cast<const ThresholdParameter &>(from));
}


void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold()) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {
  return true;
}

void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.threshold_, other->_impl_.threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[81]);
}

// ===================================================================

class VideoDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoDataParameter>()._impl_._has_bits_);
  static void set_has_video_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skip_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

VideoDataParameter::VideoDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.VideoDataParameter)
}
VideoDataParameter::VideoDataParameter(const VideoDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.video_file_){}
    , decltype(_impl_.video_type_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.skip_frames_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.video_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_video_file()) {
    _impl_.video_file_.Set(from._internal_video_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.video_type_, &from._impl_.video_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skip_frames_) -
    reinterpret_cast<char*>(&_impl_.video_type_)) + sizeof(_impl_.skip_frames_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.VideoDataParameter)
}

inline void VideoDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.video_file_){}
    , decltype(_impl_.video_type_){0}
    , decltype(_impl_.device_id_){0}
    , decltype(_impl_.skip_frames_){0u}
  };
  _impl_.video_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.video_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoDataParameter::~VideoDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.VideoDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.video_file_.Destroy();
}

void VideoDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.VideoDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.video_file_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.video_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.skip_frames_) -
        reinterpret_cast<char*>(&_impl_.video_type_)) + sizeof(_impl_.skip_frames_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::VideoDataParameter_VideoType_IsValid(val))) {
            _internal_set_video_type(static_cast<::apollo::perception::inference::VideoDataParameter_VideoType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_device_id(&has_bits);
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string video_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_video_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.VideoDataParameter.video_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 skip_frames = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skip_frames(&has_bits);
          _impl_.skip_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.VideoDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_video_type(), target);
  }

  // optional int32 device_id = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  // optional string video_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_file().data(), static_cast<int>(this->_internal_video_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.VideoDataParameter.video_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_video_file(), target);
  }

  // optional uint32 skip_frames = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skip_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.VideoDataParameter)
  return target;
}

size_t VideoDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.VideoDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string video_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_file());
    }

    // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_video_type());
    }

    // optional int32 device_id = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
    }

    // optional uint32 skip_frames = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skip_frames());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoDataParameter::GetClassData() const { return &_class_data_; }

void VideoDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoDataParameter *>(to)->MergeFrom(
      static_cast<const VideoDataParameter &>(from));
}


void VideoDataParameter::MergeFrom(const VideoDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.VideoDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_file(from._internal_video_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.video_type_ = from._impl_.video_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.device_id_ = from._impl_.device_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.skip_frames_ = from._impl_.skip_frames_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoDataParameter::CopyFrom(const VideoDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.VideoDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDataParameter::IsInitialized() const {
  return true;
}

void VideoDataParameter::InternalSwap(VideoDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.video_file_, lhs_arena,
      &other->_impl_.video_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoDataParameter, _impl_.skip_frames_)
      + sizeof(VideoDataParameter::_impl_.skip_frames_)
      - PROTOBUF_FIELD_OFFSET(VideoDataParameter, _impl_.video_type_)>(
          reinterpret_cast<char*>(&_impl_.video_type_),
          reinterpret_cast<char*>(&other->_impl_.video_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[82]);
}

// ===================================================================

class WindowDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowDataParameter>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fg_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_context_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_images(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_{{{"warp", 4}}, {nullptr}};
WindowDataParameter::WindowDataParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.WindowDataParameter)
}
WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.crop_mode_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.crop_size_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.cache_images_){}
    , decltype(_impl_.context_pad_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.fg_threshold_){}
    , decltype(_impl_.bg_threshold_){}
    , decltype(_impl_.fg_fraction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mean_file()) {
    _impl_.mean_file_.Set(from._internal_mean_file(), 
      GetArenaForAllocation());
  }
  _impl_.crop_mode_.InitDefault();
  if (from._internal_has_crop_mode()) {
    _impl_.crop_mode_.Set(from._internal_crop_mode(), 
      GetArenaForAllocation());
  }
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_root_folder()) {
    _impl_.root_folder_.Set(from._internal_root_folder(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_size_, &from._impl_.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fg_fraction_) -
    reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.WindowDataParameter)
}

inline void WindowDataParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){}
    , decltype(_impl_.mean_file_){}
    , decltype(_impl_.crop_mode_){}
    , decltype(_impl_.root_folder_){}
    , decltype(_impl_.batch_size_){0u}
    , decltype(_impl_.crop_size_){0u}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.cache_images_){false}
    , decltype(_impl_.context_pad_){0u}
    , decltype(_impl_.scale_){1}
    , decltype(_impl_.fg_threshold_){0.5f}
    , decltype(_impl_.bg_threshold_){0.5f}
    , decltype(_impl_.fg_fraction_){0.25f}
  };
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mean_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crop_mode_.InitDefault();
  _impl_.root_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.WindowDataParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WindowDataParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_.Destroy();
  _impl_.mean_file_.Destroy();
  _impl_.crop_mode_.Destroy();
  _impl_.root_folder_.Destroy();
}

void WindowDataParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.WindowDataParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mean_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.crop_mode_.ClearToDefault(::apollo::perception::inference::WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.root_folder_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cache_images_) -
        reinterpret_cast<char*>(&_impl_.batch_size_)) + sizeof(_impl_.cache_images_));
  }
  if (cached_has_bits & 0x00001f00u) {
    _impl_.context_pad_ = 0u;
    _impl_.scale_ = 1;
    _impl_.fg_threshold_ = 0.5f;
    _impl_.bg_threshold_ = 0.5f;
    _impl_.fg_fraction_ = 0.25f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowDataParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.mean_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          _impl_.crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fg_threshold = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_fg_threshold(&has_bits);
          _impl_.fg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bg_threshold = 8 [default = 0.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_bg_threshold(&has_bits);
          _impl_.bg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fg_fraction = 9 [default = 0.25];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_fg_fraction(&has_bits);
          _impl_.fg_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 context_pad = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_context_pad(&has_bits);
          _impl_.context_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string crop_mode = 11 [default = "warp"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_crop_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.crop_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool cache_images = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cache_images(&has_bits);
          _impl_.cache_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string root_folder = 13 [default = ""];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.root_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowDataParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.WindowDataParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_crop_mode().data(), static_cast<int>(this->_internal_crop_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.crop_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_root_folder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.WindowDataParameter)
  return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.WindowDataParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_crop_mode());
    }

    // optional string root_folder = 13 [default = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional uint32 batch_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool cache_images = 12 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 context_pad = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context_pad());
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float fg_fraction = 9 [default = 0.25];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowDataParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WindowDataParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowDataParameter::GetClassData() const { return &_class_data_; }

void WindowDataParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WindowDataParameter *>(to)->MergeFrom(
      static_cast<const WindowDataParameter &>(from));
}


void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mean_file(from._internal_mean_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_crop_mode(from._internal_crop_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_root_folder(from._internal_root_folder());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.batch_size_ = from._impl_.batch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.crop_size_ = from._impl_.crop_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.mirror_ = from._impl_.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.cache_images_ = from._impl_.cache_images_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.context_pad_ = from._impl_.context_pad_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.fg_threshold_ = from._impl_.fg_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.bg_threshold_ = from._impl_.bg_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.fg_fraction_ = from._impl_.fg_fraction_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {
  return true;
}

void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mean_file_, lhs_arena,
      &other->_impl_.mean_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crop_mode_, lhs_arena,
      &other->_impl_.crop_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_folder_, lhs_arena,
      &other->_impl_.root_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowDataParameter, _impl_.context_pad_)
      + sizeof(WindowDataParameter::_impl_.context_pad_)
      - PROTOBUF_FIELD_OFFSET(WindowDataParameter, _impl_.batch_size_)>(
          reinterpret_cast<char*>(&_impl_.batch_size_),
          reinterpret_cast<char*>(&other->_impl_.batch_size_));
  swap(_impl_.scale_, other->_impl_.scale_);
  swap(_impl_.fg_threshold_, other->_impl_.fg_threshold_);
  swap(_impl_.bg_threshold_, other->_impl_.bg_threshold_);
  swap(_impl_.fg_fraction_, other->_impl_.fg_fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowDataParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[83]);
}

// ===================================================================

class SPPParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SPPParameter>()._impl_._has_bits_);
  static void set_has_pyramid_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SPPParameter::SPPParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.SPPParameter)
}
SPPParameter::SPPParameter(const SPPParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pyramid_height_){}
    , decltype(_impl_.pool_){}
    , decltype(_impl_.engine_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pyramid_height_, &from._impl_.pyramid_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.engine_) -
    reinterpret_cast<char*>(&_impl_.pyramid_height_)) + sizeof(_impl_.engine_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SPPParameter)
}

inline void SPPParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pyramid_height_){0u}
    , decltype(_impl_.pool_){0}
    , decltype(_impl_.engine_){0}
  };
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SPPParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SPPParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SPPParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SPPParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pyramid_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.engine_) -
        reinterpret_cast<char*>(&_impl_.pyramid_height_)) + sizeof(_impl_.engine_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPPParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pyramid_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pyramid_height(&has_bits);
          _impl_.pyramid_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SPPParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::SPPParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SPPParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SPPParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPPParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SPPParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pyramid_height(), target);
  }

  // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pool(), target);
  }

  // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SPPParameter)
  return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SPPParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pyramid_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pyramid_height());
    }

    // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPPParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPPParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPPParameter::GetClassData() const { return &_class_data_; }

void SPPParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPPParameter *>(to)->MergeFrom(
      static_cast<const SPPParameter &>(from));
}


void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pyramid_height_ = from._impl_.pyramid_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pool_ = from._impl_.pool_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.engine_ = from._impl_.engine_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {
  return true;
}

void SPPParameter::InternalSwap(SPPParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPPParameter, _impl_.engine_)
      + sizeof(SPPParameter::_impl_.engine_)
      - PROTOBUF_FIELD_OFFSET(SPPParameter, _impl_.pyramid_height_)>(
          reinterpret_cast<char*>(&_impl_.pyramid_height_),
          reinterpret_cast<char*>(&other->_impl_.pyramid_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPPParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[84]);
}

// ===================================================================

class V1LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<V1LayerParameter>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::perception::inference::AccuracyParameter& accuracy_param(const V1LayerParameter* msg);
  static void set_has_accuracy_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::ArgMaxParameter& argmax_param(const V1LayerParameter* msg);
  static void set_has_argmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::inference::ConcatParameter& concat_param(const V1LayerParameter* msg);
  static void set_has_concat_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param(const V1LayerParameter* msg);
  static void set_has_contrastive_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::perception::inference::ConvolutionParameter& convolution_param(const V1LayerParameter* msg);
  static void set_has_convolution_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::DataParameter& data_param(const V1LayerParameter* msg);
  static void set_has_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::DropoutParameter& dropout_param(const V1LayerParameter* msg);
  static void set_has_dropout_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::DummyDataParameter& dummy_data_param(const V1LayerParameter* msg);
  static void set_has_dummy_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::perception::inference::EltwiseParameter& eltwise_param(const V1LayerParameter* msg);
  static void set_has_eltwise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::perception::inference::ExpParameter& exp_param(const V1LayerParameter* msg);
  static void set_has_exp_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param(const V1LayerParameter* msg);
  static void set_has_hdf5_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const V1LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param(const V1LayerParameter* msg);
  static void set_has_hinge_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::perception::inference::ImageDataParameter& image_data_param(const V1LayerParameter* msg);
  static void set_has_image_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param(const V1LayerParameter* msg);
  static void set_has_infogain_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::InnerProductParameter& inner_product_param(const V1LayerParameter* msg);
  static void set_has_inner_product_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::inference::LRNParameter& lrn_param(const V1LayerParameter* msg);
  static void set_has_lrn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::perception::inference::MemoryDataParameter& memory_data_param(const V1LayerParameter* msg);
  static void set_has_memory_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::MVNParameter& mvn_param(const V1LayerParameter* msg);
  static void set_has_mvn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::perception::inference::PoolingParameter& pooling_param(const V1LayerParameter* msg);
  static void set_has_pooling_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::PowerParameter& power_param(const V1LayerParameter* msg);
  static void set_has_power_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::perception::inference::ReLUParameter& relu_param(const V1LayerParameter* msg);
  static void set_has_relu_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::SigmoidParameter& sigmoid_param(const V1LayerParameter* msg);
  static void set_has_sigmoid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::perception::inference::SoftmaxParameter& softmax_param(const V1LayerParameter* msg);
  static void set_has_softmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::perception::inference::SliceParameter& slice_param(const V1LayerParameter* msg);
  static void set_has_slice_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::TanHParameter& tanh_param(const V1LayerParameter* msg);
  static void set_has_tanh_param(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::perception::inference::ThresholdParameter& threshold_param(const V1LayerParameter* msg);
  static void set_has_threshold_param(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::perception::inference::WindowDataParameter& window_data_param(const V1LayerParameter* msg);
  static void set_has_window_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::TransformationParameter& transform_param(const V1LayerParameter* msg);
  static void set_has_transform_param(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::perception::inference::LossParameter& loss_param(const V1LayerParameter* msg);
  static void set_has_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::apollo::perception::inference::V0LayerParameter& layer(const V1LayerParameter* msg);
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::AccuracyParameter&
V1LayerParameter::_Internal::accuracy_param(const V1LayerParameter* msg) {
  return *msg->_impl_.accuracy_param_;
}
const ::apollo::perception::inference::ArgMaxParameter&
V1LayerParameter::_Internal::argmax_param(const V1LayerParameter* msg) {
  return *msg->_impl_.argmax_param_;
}
const ::apollo::perception::inference::ConcatParameter&
V1LayerParameter::_Internal::concat_param(const V1LayerParameter* msg) {
  return *msg->_impl_.concat_param_;
}
const ::apollo::perception::inference::ContrastiveLossParameter&
V1LayerParameter::_Internal::contrastive_loss_param(const V1LayerParameter* msg) {
  return *msg->_impl_.contrastive_loss_param_;
}
const ::apollo::perception::inference::ConvolutionParameter&
V1LayerParameter::_Internal::convolution_param(const V1LayerParameter* msg) {
  return *msg->_impl_.convolution_param_;
}
const ::apollo::perception::inference::DataParameter&
V1LayerParameter::_Internal::data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.data_param_;
}
const ::apollo::perception::inference::DropoutParameter&
V1LayerParameter::_Internal::dropout_param(const V1LayerParameter* msg) {
  return *msg->_impl_.dropout_param_;
}
const ::apollo::perception::inference::DummyDataParameter&
V1LayerParameter::_Internal::dummy_data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.dummy_data_param_;
}
const ::apollo::perception::inference::EltwiseParameter&
V1LayerParameter::_Internal::eltwise_param(const V1LayerParameter* msg) {
  return *msg->_impl_.eltwise_param_;
}
const ::apollo::perception::inference::ExpParameter&
V1LayerParameter::_Internal::exp_param(const V1LayerParameter* msg) {
  return *msg->_impl_.exp_param_;
}
const ::apollo::perception::inference::HDF5DataParameter&
V1LayerParameter::_Internal::hdf5_data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.hdf5_data_param_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
V1LayerParameter::_Internal::hdf5_output_param(const V1LayerParameter* msg) {
  return *msg->_impl_.hdf5_output_param_;
}
const ::apollo::perception::inference::HingeLossParameter&
V1LayerParameter::_Internal::hinge_loss_param(const V1LayerParameter* msg) {
  return *msg->_impl_.hinge_loss_param_;
}
const ::apollo::perception::inference::ImageDataParameter&
V1LayerParameter::_Internal::image_data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.image_data_param_;
}
const ::apollo::perception::inference::InfogainLossParameter&
V1LayerParameter::_Internal::infogain_loss_param(const V1LayerParameter* msg) {
  return *msg->_impl_.infogain_loss_param_;
}
const ::apollo::perception::inference::InnerProductParameter&
V1LayerParameter::_Internal::inner_product_param(const V1LayerParameter* msg) {
  return *msg->_impl_.inner_product_param_;
}
const ::apollo::perception::inference::LRNParameter&
V1LayerParameter::_Internal::lrn_param(const V1LayerParameter* msg) {
  return *msg->_impl_.lrn_param_;
}
const ::apollo::perception::inference::MemoryDataParameter&
V1LayerParameter::_Internal::memory_data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.memory_data_param_;
}
const ::apollo::perception::inference::MVNParameter&
V1LayerParameter::_Internal::mvn_param(const V1LayerParameter* msg) {
  return *msg->_impl_.mvn_param_;
}
const ::apollo::perception::inference::PoolingParameter&
V1LayerParameter::_Internal::pooling_param(const V1LayerParameter* msg) {
  return *msg->_impl_.pooling_param_;
}
const ::apollo::perception::inference::PowerParameter&
V1LayerParameter::_Internal::power_param(const V1LayerParameter* msg) {
  return *msg->_impl_.power_param_;
}
const ::apollo::perception::inference::ReLUParameter&
V1LayerParameter::_Internal::relu_param(const V1LayerParameter* msg) {
  return *msg->_impl_.relu_param_;
}
const ::apollo::perception::inference::SigmoidParameter&
V1LayerParameter::_Internal::sigmoid_param(const V1LayerParameter* msg) {
  return *msg->_impl_.sigmoid_param_;
}
const ::apollo::perception::inference::SoftmaxParameter&
V1LayerParameter::_Internal::softmax_param(const V1LayerParameter* msg) {
  return *msg->_impl_.softmax_param_;
}
const ::apollo::perception::inference::SliceParameter&
V1LayerParameter::_Internal::slice_param(const V1LayerParameter* msg) {
  return *msg->_impl_.slice_param_;
}
const ::apollo::perception::inference::TanHParameter&
V1LayerParameter::_Internal::tanh_param(const V1LayerParameter* msg) {
  return *msg->_impl_.tanh_param_;
}
const ::apollo::perception::inference::ThresholdParameter&
V1LayerParameter::_Internal::threshold_param(const V1LayerParameter* msg) {
  return *msg->_impl_.threshold_param_;
}
const ::apollo::perception::inference::WindowDataParameter&
V1LayerParameter::_Internal::window_data_param(const V1LayerParameter* msg) {
  return *msg->_impl_.window_data_param_;
}
const ::apollo::perception::inference::TransformationParameter&
V1LayerParameter::_Internal::transform_param(const V1LayerParameter* msg) {
  return *msg->_impl_.transform_param_;
}
const ::apollo::perception::inference::LossParameter&
V1LayerParameter::_Internal::loss_param(const V1LayerParameter* msg) {
  return *msg->_impl_.loss_param_;
}
const ::apollo::perception::inference::V0LayerParameter&
V1LayerParameter::_Internal::layer(const V1LayerParameter* msg) {
  return *msg->_impl_.layer_;
}
V1LayerParameter::V1LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.V1LayerParameter)
}
V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_){from._impl_.bottom_}
    , decltype(_impl_.top_){from._impl_.top_}
    , decltype(_impl_.blobs_){from._impl_.blobs_}
    , decltype(_impl_.blobs_lr_){from._impl_.blobs_lr_}
    , decltype(_impl_.weight_decay_){from._impl_.weight_decay_}
    , decltype(_impl_.include_){from._impl_.include_}
    , decltype(_impl_.exclude_){from._impl_.exclude_}
    , decltype(_impl_.loss_weight_){from._impl_.loss_weight_}
    , decltype(_impl_.param_){from._impl_.param_}
    , decltype(_impl_.blob_share_mode_){from._impl_.blob_share_mode_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.layer_){nullptr}
    , decltype(_impl_.concat_param_){nullptr}
    , decltype(_impl_.convolution_param_){nullptr}
    , decltype(_impl_.data_param_){nullptr}
    , decltype(_impl_.dropout_param_){nullptr}
    , decltype(_impl_.hdf5_data_param_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.image_data_param_){nullptr}
    , decltype(_impl_.infogain_loss_param_){nullptr}
    , decltype(_impl_.inner_product_param_){nullptr}
    , decltype(_impl_.lrn_param_){nullptr}
    , decltype(_impl_.pooling_param_){nullptr}
    , decltype(_impl_.window_data_param_){nullptr}
    , decltype(_impl_.power_param_){nullptr}
    , decltype(_impl_.memory_data_param_){nullptr}
    , decltype(_impl_.argmax_param_){nullptr}
    , decltype(_impl_.eltwise_param_){nullptr}
    , decltype(_impl_.threshold_param_){nullptr}
    , decltype(_impl_.dummy_data_param_){nullptr}
    , decltype(_impl_.accuracy_param_){nullptr}
    , decltype(_impl_.hinge_loss_param_){nullptr}
    , decltype(_impl_.relu_param_){nullptr}
    , decltype(_impl_.slice_param_){nullptr}
    , decltype(_impl_.mvn_param_){nullptr}
    , decltype(_impl_.transform_param_){nullptr}
    , decltype(_impl_.tanh_param_){nullptr}
    , decltype(_impl_.sigmoid_param_){nullptr}
    , decltype(_impl_.softmax_param_){nullptr}
    , decltype(_impl_.contrastive_loss_param_){nullptr}
    , decltype(_impl_.exp_param_){nullptr}
    , decltype(_impl_.loss_param_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_layer()) {
    _impl_.layer_ = new ::apollo::perception::inference::V0LayerParameter(*from._impl_.layer_);
  }
  if (from._internal_has_concat_param()) {
    _impl_.concat_param_ = new ::apollo::perception::inference::ConcatParameter(*from._impl_.concat_param_);
  }
  if (from._internal_has_convolution_param()) {
    _impl_.convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter(*from._impl_.convolution_param_);
  }
  if (from._internal_has_data_param()) {
    _impl_.data_param_ = new ::apollo::perception::inference::DataParameter(*from._impl_.data_param_);
  }
  if (from._internal_has_dropout_param()) {
    _impl_.dropout_param_ = new ::apollo::perception::inference::DropoutParameter(*from._impl_.dropout_param_);
  }
  if (from._internal_has_hdf5_data_param()) {
    _impl_.hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter(*from._impl_.hdf5_data_param_);
  }
  if (from._internal_has_hdf5_output_param()) {
    _impl_.hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from._impl_.hdf5_output_param_);
  }
  if (from._internal_has_image_data_param()) {
    _impl_.image_data_param_ = new ::apollo::perception::inference::ImageDataParameter(*from._impl_.image_data_param_);
  }
  if (from._internal_has_infogain_loss_param()) {
    _impl_.infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter(*from._impl_.infogain_loss_param_);
  }
  if (from._internal_has_inner_product_param()) {
    _impl_.inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter(*from._impl_.inner_product_param_);
  }
  if (from._internal_has_lrn_param()) {
    _impl_.lrn_param_ = new ::apollo::perception::inference::LRNParameter(*from._impl_.lrn_param_);
  }
  if (from._internal_has_pooling_param()) {
    _impl_.pooling_param_ = new ::apollo::perception::inference::PoolingParameter(*from._impl_.pooling_param_);
  }
  if (from._internal_has_window_data_param()) {
    _impl_.window_data_param_ = new ::apollo::perception::inference::WindowDataParameter(*from._impl_.window_data_param_);
  }
  if (from._internal_has_power_param()) {
    _impl_.power_param_ = new ::apollo::perception::inference::PowerParameter(*from._impl_.power_param_);
  }
  if (from._internal_has_memory_data_param()) {
    _impl_.memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter(*from._impl_.memory_data_param_);
  }
  if (from._internal_has_argmax_param()) {
    _impl_.argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter(*from._impl_.argmax_param_);
  }
  if (from._internal_has_eltwise_param()) {
    _impl_.eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter(*from._impl_.eltwise_param_);
  }
  if (from._internal_has_threshold_param()) {
    _impl_.threshold_param_ = new ::apollo::perception::inference::ThresholdParameter(*from._impl_.threshold_param_);
  }
  if (from._internal_has_dummy_data_param()) {
    _impl_.dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter(*from._impl_.dummy_data_param_);
  }
  if (from._internal_has_accuracy_param()) {
    _impl_.accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter(*from._impl_.accuracy_param_);
  }
  if (from._internal_has_hinge_loss_param()) {
    _impl_.hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter(*from._impl_.hinge_loss_param_);
  }
  if (from._internal_has_relu_param()) {
    _impl_.relu_param_ = new ::apollo::perception::inference::ReLUParameter(*from._impl_.relu_param_);
  }
  if (from._internal_has_slice_param()) {
    _impl_.slice_param_ = new ::apollo::perception::inference::SliceParameter(*from._impl_.slice_param_);
  }
  if (from._internal_has_mvn_param()) {
    _impl_.mvn_param_ = new ::apollo::perception::inference::MVNParameter(*from._impl_.mvn_param_);
  }
  if (from._internal_has_transform_param()) {
    _impl_.transform_param_ = new ::apollo::perception::inference::TransformationParameter(*from._impl_.transform_param_);
  }
  if (from._internal_has_tanh_param()) {
    _impl_.tanh_param_ = new ::apollo::perception::inference::TanHParameter(*from._impl_.tanh_param_);
  }
  if (from._internal_has_sigmoid_param()) {
    _impl_.sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter(*from._impl_.sigmoid_param_);
  }
  if (from._internal_has_softmax_param()) {
    _impl_.softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter(*from._impl_.softmax_param_);
  }
  if (from._internal_has_contrastive_loss_param()) {
    _impl_.contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter(*from._impl_.contrastive_loss_param_);
  }
  if (from._internal_has_exp_param()) {
    _impl_.exp_param_ = new ::apollo::perception::inference::ExpParameter(*from._impl_.exp_param_);
  }
  if (from._internal_has_loss_param()) {
    _impl_.loss_param_ = new ::apollo::perception::inference::LossParameter(*from._impl_.loss_param_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.V1LayerParameter)
}

inline void V1LayerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_){arena}
    , decltype(_impl_.top_){arena}
    , decltype(_impl_.blobs_){arena}
    , decltype(_impl_.blobs_lr_){arena}
    , decltype(_impl_.weight_decay_){arena}
    , decltype(_impl_.include_){arena}
    , decltype(_impl_.exclude_){arena}
    , decltype(_impl_.loss_weight_){arena}
    , decltype(_impl_.param_){arena}
    , decltype(_impl_.blob_share_mode_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.layer_){nullptr}
    , decltype(_impl_.concat_param_){nullptr}
    , decltype(_impl_.convolution_param_){nullptr}
    , decltype(_impl_.data_param_){nullptr}
    , decltype(_impl_.dropout_param_){nullptr}
    , decltype(_impl_.hdf5_data_param_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.image_data_param_){nullptr}
    , decltype(_impl_.infogain_loss_param_){nullptr}
    , decltype(_impl_.inner_product_param_){nullptr}
    , decltype(_impl_.lrn_param_){nullptr}
    , decltype(_impl_.pooling_param_){nullptr}
    , decltype(_impl_.window_data_param_){nullptr}
    , decltype(_impl_.power_param_){nullptr}
    , decltype(_impl_.memory_data_param_){nullptr}
    , decltype(_impl_.argmax_param_){nullptr}
    , decltype(_impl_.eltwise_param_){nullptr}
    , decltype(_impl_.threshold_param_){nullptr}
    , decltype(_impl_.dummy_data_param_){nullptr}
    , decltype(_impl_.accuracy_param_){nullptr}
    , decltype(_impl_.hinge_loss_param_){nullptr}
    , decltype(_impl_.relu_param_){nullptr}
    , decltype(_impl_.slice_param_){nullptr}
    , decltype(_impl_.mvn_param_){nullptr}
    , decltype(_impl_.transform_param_){nullptr}
    , decltype(_impl_.tanh_param_){nullptr}
    , decltype(_impl_.sigmoid_param_){nullptr}
    , decltype(_impl_.softmax_param_){nullptr}
    , decltype(_impl_.contrastive_loss_param_){nullptr}
    , decltype(_impl_.exp_param_){nullptr}
    , decltype(_impl_.loss_param_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.V1LayerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V1LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bottom_.~RepeatedPtrField();
  _impl_.top_.~RepeatedPtrField();
  _impl_.blobs_.~RepeatedPtrField();
  _impl_.blobs_lr_.~RepeatedField();
  _impl_.weight_decay_.~RepeatedField();
  _impl_.include_.~RepeatedPtrField();
  _impl_.exclude_.~RepeatedPtrField();
  _impl_.loss_weight_.~RepeatedField();
  _impl_.param_.~RepeatedPtrField();
  _impl_.blob_share_mode_.~RepeatedField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.layer_;
  if (this != internal_default_instance()) delete _impl_.concat_param_;
  if (this != internal_default_instance()) delete _impl_.convolution_param_;
  if (this != internal_default_instance()) delete _impl_.data_param_;
  if (this != internal_default_instance()) delete _impl_.dropout_param_;
  if (this != internal_default_instance()) delete _impl_.hdf5_data_param_;
  if (this != internal_default_instance()) delete _impl_.hdf5_output_param_;
  if (this != internal_default_instance()) delete _impl_.image_data_param_;
  if (this != internal_default_instance()) delete _impl_.infogain_loss_param_;
  if (this != internal_default_instance()) delete _impl_.inner_product_param_;
  if (this != internal_default_instance()) delete _impl_.lrn_param_;
  if (this != internal_default_instance()) delete _impl_.pooling_param_;
  if (this != internal_default_instance()) delete _impl_.window_data_param_;
  if (this != internal_default_instance()) delete _impl_.power_param_;
  if (this != internal_default_instance()) delete _impl_.memory_data_param_;
  if (this != internal_default_instance()) delete _impl_.argmax_param_;
  if (this != internal_default_instance()) delete _impl_.eltwise_param_;
  if (this != internal_default_instance()) delete _impl_.threshold_param_;
  if (this != internal_default_instance()) delete _impl_.dummy_data_param_;
  if (this != internal_default_instance()) delete _impl_.accuracy_param_;
  if (this != internal_default_instance()) delete _impl_.hinge_loss_param_;
  if (this != internal_default_instance()) delete _impl_.relu_param_;
  if (this != internal_default_instance()) delete _impl_.slice_param_;
  if (this != internal_default_instance()) delete _impl_.mvn_param_;
  if (this != internal_default_instance()) delete _impl_.transform_param_;
  if (this != internal_default_instance()) delete _impl_.tanh_param_;
  if (this != internal_default_instance()) delete _impl_.sigmoid_param_;
  if (this != internal_default_instance()) delete _impl_.softmax_param_;
  if (this != internal_default_instance()) delete _impl_.contrastive_loss_param_;
  if (this != internal_default_instance()) delete _impl_.exp_param_;
  if (this != internal_default_instance()) delete _impl_.loss_param_;
}

void V1LayerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.V1LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bottom_.Clear();
  _impl_.top_.Clear();
  _impl_.blobs_.Clear();
  _impl_.blobs_lr_.Clear();
  _impl_.weight_decay_.Clear();
  _impl_.include_.Clear();
  _impl_.exclude_.Clear();
  _impl_.loss_weight_.Clear();
  _impl_.param_.Clear();
  _impl_.blob_share_mode_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.layer_ != nullptr);
      _impl_.layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.concat_param_ != nullptr);
      _impl_.concat_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.convolution_param_ != nullptr);
      _impl_.convolution_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.data_param_ != nullptr);
      _impl_.data_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.dropout_param_ != nullptr);
      _impl_.dropout_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.hdf5_data_param_ != nullptr);
      _impl_.hdf5_data_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.hdf5_output_param_ != nullptr);
      _impl_.hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.image_data_param_ != nullptr);
      _impl_.image_data_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.infogain_loss_param_ != nullptr);
      _impl_.infogain_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.inner_product_param_ != nullptr);
      _impl_.inner_product_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.lrn_param_ != nullptr);
      _impl_.lrn_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.pooling_param_ != nullptr);
      _impl_.pooling_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.window_data_param_ != nullptr);
      _impl_.window_data_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.power_param_ != nullptr);
      _impl_.power_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.memory_data_param_ != nullptr);
      _impl_.memory_data_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.argmax_param_ != nullptr);
      _impl_.argmax_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.eltwise_param_ != nullptr);
      _impl_.eltwise_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.threshold_param_ != nullptr);
      _impl_.threshold_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.dummy_data_param_ != nullptr);
      _impl_.dummy_data_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.accuracy_param_ != nullptr);
      _impl_.accuracy_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.hinge_loss_param_ != nullptr);
      _impl_.hinge_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.relu_param_ != nullptr);
      _impl_.relu_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.slice_param_ != nullptr);
      _impl_.slice_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.mvn_param_ != nullptr);
      _impl_.mvn_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.transform_param_ != nullptr);
      _impl_.transform_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tanh_param_ != nullptr);
      _impl_.tanh_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.sigmoid_param_ != nullptr);
      _impl_.sigmoid_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.softmax_param_ != nullptr);
      _impl_.softmax_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.contrastive_loss_param_ != nullptr);
      _impl_.contrastive_loss_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.exp_param_ != nullptr);
      _impl_.exp_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.loss_param_ != nullptr);
      _impl_.loss_param_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V1LayerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.V0LayerParameter layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string bottom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bottom();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.bottom");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.top");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V1LayerParameter_LayerType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::V1LayerParameter_LayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float blobs_lr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_blobs_lr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_blobs_lr(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float weight_decay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weight_decay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight_decay(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter data_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropout_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_infogain_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_product_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrn_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pooling_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PowerParameter power_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_argmax_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_eltwise_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_dummy_data_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_accuracy_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinge_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_relu_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SliceParameter slice_param = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule include = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_include(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule exclude = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvn_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float loss_weight = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_loss_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<285>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_loss_weight(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tanh_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigmoid_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_softmax_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrastive_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpParameter exp_param = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter loss_param = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_param();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.param");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(val))) {
              _internal_add_blob_share_mode(static_cast<::apollo::perception::inference::V1LayerParameter_DimCheckMode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1002, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8016>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_blob_share_mode(), ptr, ctx, ::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid, &_internal_metadata_, 1002);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V1LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.V1LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::layer(this),
        _Internal::layer(this).GetCachedSize(), target, stream);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->_internal_bottom_size(); i < n; i++) {
    const auto& s = this->_internal_bottom(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.bottom");
    target = stream->WriteString(2, s, target);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->_internal_top_size(); i < n; i++) {
    const auto& s = this->_internal_top(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.top");
    target = stream->WriteString(3, s, target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_blobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0, n = this->_internal_blobs_lr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_blobs_lr(i), target);
  }

  // repeated float weight_decay = 8;
  for (int i = 0, n = this->_internal_weight_decay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_weight_decay(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::concat_param(this),
        _Internal::concat_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::convolution_param(this),
        _Internal::convolution_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::data_param(this),
        _Internal::data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dropout_param(this),
        _Internal::dropout_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::hdf5_data_param(this),
        _Internal::hdf5_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::hdf5_output_param(this),
        _Internal::hdf5_output_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::image_data_param(this),
        _Internal::image_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::infogain_loss_param(this),
        _Internal::infogain_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::inner_product_param(this),
        _Internal::inner_product_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::lrn_param(this),
        _Internal::lrn_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::pooling_param(this),
        _Internal::pooling_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::window_data_param(this),
        _Internal::window_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::power_param(this),
        _Internal::power_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::memory_data_param(this),
        _Internal::memory_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::argmax_param(this),
        _Internal::argmax_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::eltwise_param(this),
        _Internal::eltwise_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::threshold_param(this),
        _Internal::threshold_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::dummy_data_param(this),
        _Internal::dummy_data_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::accuracy_param(this),
        _Internal::accuracy_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::hinge_loss_param(this),
        _Internal::hinge_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::relu_param(this),
        _Internal::relu_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::slice_param(this),
        _Internal::slice_param(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_include_size()); i < n; i++) {
    const auto& repfield = this->_internal_include(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exclude_size()); i < n; i++) {
    const auto& repfield = this->_internal_exclude(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::mvn_param(this),
        _Internal::mvn_param(this).GetCachedSize(), target, stream);
  }

  // repeated float loss_weight = 35;
  for (int i = 0, n = this->_internal_loss_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_loss_weight(i), target);
  }

  // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::transform_param(this),
        _Internal::transform_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::tanh_param(this),
        _Internal::tanh_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::sigmoid_param(this),
        _Internal::sigmoid_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::softmax_param(this),
        _Internal::softmax_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::contrastive_loss_param(this),
        _Internal::contrastive_loss_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::exp_param(this),
        _Internal::exp_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::loss_param(this),
        _Internal::loss_param(this).GetCachedSize(), target, stream);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->_internal_param_size(); i < n; i++) {
    const auto& s = this->_internal_param(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.param");
    target = stream->WriteString(1001, s, target);
  }

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0, n = this->_internal_blob_share_mode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1002, this->_internal_blob_share_mode(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.V1LayerParameter)
  return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.V1LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bottom_.size());
  for (int i = 0, n = _impl_.bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bottom_.Get(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.top_.size());
  for (int i = 0, n = _impl_.top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.top_.Get(i));
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->_impl_.blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float blobs_lr = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_weight_decay_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  total_size += 2UL * this->_internal_include_size();
  for (const auto& msg : this->_impl_.include_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  total_size += 2UL * this->_internal_exclude_size();
  for (const auto& msg : this->_impl_.exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float loss_weight = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_loss_weight_size());
    total_size += data_size;
  }

  // repeated string param = 1001;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.param_.size());
  for (int i = 0, n = _impl_.param_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.param_.Get(i));
  }

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_blob_share_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_blob_share_mode(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.V0LayerParameter layer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layer_);
    }

    // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.concat_param_);
    }

    // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.convolution_param_);
    }

    // optional .apollo.perception.inference.DataParameter data_param = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_param_);
    }

    // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dropout_param_);
    }

    // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdf5_data_param_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_data_param_);
    }

    // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.infogain_loss_param_);
    }

    // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inner_product_param_);
    }

    // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lrn_param_);
    }

    // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pooling_param_);
    }

    // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.window_data_param_);
    }

    // optional .apollo.perception.inference.PowerParameter power_param = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.power_param_);
    }

    // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.memory_data_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.argmax_param_);
    }

    // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.eltwise_param_);
    }

    // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.threshold_param_);
    }

    // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dummy_data_param_);
    }

    // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accuracy_param_);
    }

    // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hinge_loss_param_);
    }

    // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relu_param_);
    }

    // optional .apollo.perception.inference.SliceParameter slice_param = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slice_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mvn_param_);
    }

    // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transform_param_);
    }

    // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tanh_param_);
    }

    // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sigmoid_param_);
    }

    // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.softmax_param_);
    }

    // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contrastive_loss_param_);
    }

    // optional .apollo.perception.inference.ExpParameter exp_param = 41;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exp_param_);
    }

    // optional .apollo.perception.inference.LossParameter loss_param = 42;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loss_param_);
    }

  }
  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V1LayerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V1LayerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V1LayerParameter::GetClassData() const { return &_class_data_; }

void V1LayerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V1LayerParameter *>(to)->MergeFrom(
      static_cast<const V1LayerParameter &>(from));
}


void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bottom_.MergeFrom(from._impl_.bottom_);
  _impl_.top_.MergeFrom(from._impl_.top_);
  _impl_.blobs_.MergeFrom(from._impl_.blobs_);
  _impl_.blobs_lr_.MergeFrom(from._impl_.blobs_lr_);
  _impl_.weight_decay_.MergeFrom(from._impl_.weight_decay_);
  _impl_.include_.MergeFrom(from._impl_.include_);
  _impl_.exclude_.MergeFrom(from._impl_.exclude_);
  _impl_.loss_weight_.MergeFrom(from._impl_.loss_weight_);
  _impl_.param_.MergeFrom(from._impl_.param_);
  _impl_.blob_share_mode_.MergeFrom(from._impl_.blob_share_mode_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layer()->::apollo::perception::inference::V0LayerParameter::MergeFrom(from._internal_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_concat_param()->::apollo::perception::inference::ConcatParameter::MergeFrom(from._internal_concat_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_convolution_param()->::apollo::perception::inference::ConvolutionParameter::MergeFrom(from._internal_convolution_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_param()->::apollo::perception::inference::DataParameter::MergeFrom(from._internal_data_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dropout_param()->::apollo::perception::inference::DropoutParameter::MergeFrom(from._internal_dropout_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_hdf5_data_param()->::apollo::perception::inference::HDF5DataParameter::MergeFrom(from._internal_hdf5_data_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_image_data_param()->::apollo::perception::inference::ImageDataParameter::MergeFrom(from._internal_image_data_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_infogain_loss_param()->::apollo::perception::inference::InfogainLossParameter::MergeFrom(from._internal_infogain_loss_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_inner_product_param()->::apollo::perception::inference::InnerProductParameter::MergeFrom(from._internal_inner_product_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_lrn_param()->::apollo::perception::inference::LRNParameter::MergeFrom(from._internal_lrn_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_pooling_param()->::apollo::perception::inference::PoolingParameter::MergeFrom(from._internal_pooling_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_window_data_param()->::apollo::perception::inference::WindowDataParameter::MergeFrom(from._internal_window_data_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_power_param()->::apollo::perception::inference::PowerParameter::MergeFrom(from._internal_power_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_memory_data_param()->::apollo::perception::inference::MemoryDataParameter::MergeFrom(from._internal_memory_data_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_argmax_param()->::apollo::perception::inference::ArgMaxParameter::MergeFrom(from._internal_argmax_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_eltwise_param()->::apollo::perception::inference::EltwiseParameter::MergeFrom(from._internal_eltwise_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_threshold_param()->::apollo::perception::inference::ThresholdParameter::MergeFrom(from._internal_threshold_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_dummy_data_param()->::apollo::perception::inference::DummyDataParameter::MergeFrom(from._internal_dummy_data_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_accuracy_param()->::apollo::perception::inference::AccuracyParameter::MergeFrom(from._internal_accuracy_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_hinge_loss_param()->::apollo::perception::inference::HingeLossParameter::MergeFrom(from._internal_hinge_loss_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_relu_param()->::apollo::perception::inference::ReLUParameter::MergeFrom(from._internal_relu_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_slice_param()->::apollo::perception::inference::SliceParameter::MergeFrom(from._internal_slice_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_mvn_param()->::apollo::perception::inference::MVNParameter::MergeFrom(from._internal_mvn_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_transform_param()->::apollo::perception::inference::TransformationParameter::MergeFrom(from._internal_transform_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tanh_param()->::apollo::perception::inference::TanHParameter::MergeFrom(from._internal_tanh_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_sigmoid_param()->::apollo::perception::inference::SigmoidParameter::MergeFrom(from._internal_sigmoid_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_softmax_param()->::apollo::perception::inference::SoftmaxParameter::MergeFrom(from._internal_softmax_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_contrastive_loss_param()->::apollo::perception::inference::ContrastiveLossParameter::MergeFrom(from._internal_contrastive_loss_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_exp_param()->::apollo::perception::inference::ExpParameter::MergeFrom(from._internal_exp_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_loss_param()->::apollo::perception::inference::LossParameter::MergeFrom(from._internal_loss_param());
    }
  }
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {
  return true;
}

void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.bottom_.InternalSwap(&other->_impl_.bottom_);
  _impl_.top_.InternalSwap(&other->_impl_.top_);
  _impl_.blobs_.InternalSwap(&other->_impl_.blobs_);
  _impl_.blobs_lr_.InternalSwap(&other->_impl_.blobs_lr_);
  _impl_.weight_decay_.InternalSwap(&other->_impl_.weight_decay_);
  _impl_.include_.InternalSwap(&other->_impl_.include_);
  _impl_.exclude_.InternalSwap(&other->_impl_.exclude_);
  _impl_.loss_weight_.InternalSwap(&other->_impl_.loss_weight_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  _impl_.blob_share_mode_.InternalSwap(&other->_impl_.blob_share_mode_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V1LayerParameter, _impl_.type_)
      + sizeof(V1LayerParameter::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(V1LayerParameter, _impl_.layer_)>(
          reinterpret_cast<char*>(&_impl_.layer_),
          reinterpret_cast<char*>(&other->_impl_.layer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V1LayerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[85]);
}

// ===================================================================

class V0LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<V0LayerParameter>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_biasterm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const V0LayerParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const V0LayerParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_kernelsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dropout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_local_size(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_meanfile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_batchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cropsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_det_fg_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_det_bg_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_det_fg_fraction(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_det_context_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_det_crop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_num(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_new_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_shuffle_images(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_concat_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const V0LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::inference::FillerParameter&
V0LayerParameter::_Internal::weight_filler(const V0LayerParameter* msg) {
  return *msg->_impl_.weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
V0LayerParameter::_Internal::bias_filler(const V0LayerParameter* msg) {
  return *msg->_impl_.bias_filler_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
V0LayerParameter::_Internal::hdf5_output_param(const V0LayerParameter* msg) {
  return *msg->_impl_.hdf5_output_param_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_{{{"warp", 4}}, {nullptr}};
V0LayerParameter::V0LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.V0LayerParameter)
}
V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blobs_){from._impl_.blobs_}
    , decltype(_impl_.blobs_lr_){from._impl_.blobs_lr_}
    , decltype(_impl_.weight_decay_){from._impl_.weight_decay_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.meanfile_){}
    , decltype(_impl_.det_crop_mode_){}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.pad_){}
    , decltype(_impl_.kernelsize_){}
    , decltype(_impl_.pool_){}
    , decltype(_impl_.batchsize_){}
    , decltype(_impl_.cropsize_){}
    , decltype(_impl_.mirror_){}
    , decltype(_impl_.shuffle_images_){}
    , decltype(_impl_.rand_skip_){}
    , decltype(_impl_.det_context_pad_){}
    , decltype(_impl_.new_num_){}
    , decltype(_impl_.new_channels_){}
    , decltype(_impl_.new_height_){}
    , decltype(_impl_.new_width_){}
    , decltype(_impl_.concat_dim_){}
    , decltype(_impl_.biasterm_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.stride_){}
    , decltype(_impl_.dropout_ratio_){}
    , decltype(_impl_.local_size_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.det_fg_threshold_){}
    , decltype(_impl_.det_bg_threshold_){}
    , decltype(_impl_.det_fg_fraction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _impl_.type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _impl_.source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  _impl_.meanfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meanfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_meanfile()) {
    _impl_.meanfile_.Set(from._internal_meanfile(), 
      GetArenaForAllocation());
  }
  _impl_.det_crop_mode_.InitDefault();
  if (from._internal_has_det_crop_mode()) {
    _impl_.det_crop_mode_.Set(from._internal_det_crop_mode(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_weight_filler()) {
    _impl_.weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.weight_filler_);
  }
  if (from._internal_has_bias_filler()) {
    _impl_.bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.bias_filler_);
  }
  if (from._internal_has_hdf5_output_param()) {
    _impl_.hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from._impl_.hdf5_output_param_);
  }
  ::memcpy(&_impl_.num_output_, &from._impl_.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.det_fg_fraction_) -
    reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.det_fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.V0LayerParameter)
}

inline void V0LayerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blobs_){arena}
    , decltype(_impl_.blobs_lr_){arena}
    , decltype(_impl_.weight_decay_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.meanfile_){}
    , decltype(_impl_.det_crop_mode_){}
    , decltype(_impl_.weight_filler_){nullptr}
    , decltype(_impl_.bias_filler_){nullptr}
    , decltype(_impl_.hdf5_output_param_){nullptr}
    , decltype(_impl_.num_output_){0u}
    , decltype(_impl_.pad_){0u}
    , decltype(_impl_.kernelsize_){0u}
    , decltype(_impl_.pool_){0}
    , decltype(_impl_.batchsize_){0u}
    , decltype(_impl_.cropsize_){0u}
    , decltype(_impl_.mirror_){false}
    , decltype(_impl_.shuffle_images_){false}
    , decltype(_impl_.rand_skip_){0u}
    , decltype(_impl_.det_context_pad_){0u}
    , decltype(_impl_.new_num_){0}
    , decltype(_impl_.new_channels_){0}
    , decltype(_impl_.new_height_){0}
    , decltype(_impl_.new_width_){0}
    , decltype(_impl_.concat_dim_){1u}
    , decltype(_impl_.biasterm_){true}
    , decltype(_impl_.group_){1u}
    , decltype(_impl_.stride_){1u}
    , decltype(_impl_.dropout_ratio_){0.5f}
    , decltype(_impl_.local_size_){5u}
    , decltype(_impl_.alpha_){1}
    , decltype(_impl_.beta_){0.75f}
    , decltype(_impl_.scale_){1}
    , decltype(_impl_.k_){1}
    , decltype(_impl_.det_fg_threshold_){0.5f}
    , decltype(_impl_.det_bg_threshold_){0.5f}
    , decltype(_impl_.det_fg_fraction_){0.25f}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meanfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meanfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.det_crop_mode_.InitDefault();
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.V0LayerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V0LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blobs_.~RepeatedPtrField();
  _impl_.blobs_lr_.~RepeatedField();
  _impl_.weight_decay_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.source_.Destroy();
  _impl_.meanfile_.Destroy();
  _impl_.det_crop_mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weight_filler_;
  if (this != internal_default_instance()) delete _impl_.bias_filler_;
  if (this != internal_default_instance()) delete _impl_.hdf5_output_param_;
}

void V0LayerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.V0LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blobs_.Clear();
  _impl_.blobs_lr_.Clear();
  _impl_.weight_decay_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.meanfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.det_crop_mode_.ClearToDefault(::apollo::perception::inference::V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.weight_filler_ != nullptr);
      _impl_.weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.bias_filler_ != nullptr);
      _impl_.bias_filler_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.hdf5_output_param_ != nullptr);
      _impl_.hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shuffle_images_) -
        reinterpret_cast<char*>(&_impl_.num_output_)) + sizeof(_impl_.shuffle_images_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.rand_skip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_width_) -
        reinterpret_cast<char*>(&_impl_.rand_skip_)) + sizeof(_impl_.new_width_));
    _impl_.concat_dim_ = 1u;
    _impl_.biasterm_ = true;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.group_ = 1u;
    _impl_.stride_ = 1u;
    _impl_.dropout_ratio_ = 0.5f;
    _impl_.local_size_ = 5u;
    _impl_.alpha_ = 1;
    _impl_.beta_ = 0.75f;
    _impl_.scale_ = 1;
    _impl_.k_ = 1;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    _impl_.det_fg_threshold_ = 0.5f;
    _impl_.det_bg_threshold_ = 0.5f;
    _impl_.det_fg_fraction_ = 0.25f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V0LayerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_output(&_impl_._has_bits_);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool biasterm = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_biasterm(&_impl_._has_bits_);
          _impl_.biasterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_pad(&_impl_._has_bits_);
          _impl_.pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kernelsize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_kernelsize(&_impl_._has_bits_);
          _impl_.kernelsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_group(&_impl_._has_bits_);
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_stride(&_impl_._has_bits_);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V0LayerParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::V0LayerParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float dropout_ratio = 12 [default = 0.5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_dropout_ratio(&_impl_._has_bits_);
          _impl_.dropout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 local_size = 13 [default = 5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_local_size(&_impl_._has_bits_);
          _impl_.local_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 14 [default = 1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_alpha(&_impl_._has_bits_);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float beta = 15 [default = 0.75];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_beta(&_impl_._has_bits_);
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_scale(&_impl_._has_bits_);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string meanfile = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_meanfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.meanfile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batchsize = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_batchsize(&_impl_._has_bits_);
          _impl_.batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cropsize = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_cropsize(&_impl_._has_bits_);
          _impl_.cropsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mirror = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_mirror(&_impl_._has_bits_);
          _impl_.mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float k = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_k(&_impl_._has_bits_);
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float blobs_lr = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_blobs_lr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<413>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_blobs_lr(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float weight_decay = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_weight_decay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<421>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight_decay(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 53 [default = 0];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_rand_skip(&_impl_._has_bits_);
          _impl_.rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_det_fg_threshold(&_impl_._has_bits_);
          _impl_.det_fg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_det_bg_threshold(&_impl_._has_bits_);
          _impl_.det_bg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_det_fg_fraction(&_impl_._has_bits_);
          _impl_.det_fg_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 det_context_pad = 58 [default = 0];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_det_context_pad(&_impl_._has_bits_);
          _impl_.det_context_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string det_crop_mode = 59 [default = "warp"];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_det_crop_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.det_crop_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_num = 60 [default = 0];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_new_num(&_impl_._has_bits_);
          _impl_.new_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_channels = 61 [default = 0];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_new_channels(&_impl_._has_bits_);
          _impl_.new_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_height = 62 [default = 0];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_new_height(&_impl_._has_bits_);
          _impl_.new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_width = 63 [default = 0];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_new_width(&_impl_._has_bits_);
          _impl_.new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shuffle_images = 64 [default = false];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_shuffle_images(&_impl_._has_bits_);
          _impl_.shuffle_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 concat_dim = 65 [default = 1];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_concat_dim(&_impl_._has_bits_);
          _impl_.concat_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V0LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.V0LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_biasterm(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::weight_filler(this),
        _Internal::weight_filler(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::bias_filler(this),
        _Internal::bias_filler(this).GetCachedSize(), target, stream);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stride(), target);
  }

  // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_beta(), target);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.source");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_scale(), target);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meanfile().data(), static_cast<int>(this->_internal_meanfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.meanfile");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_k(), target);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_blobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0, n = this->_internal_blobs_lr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(51, this->_internal_blobs_lr(i), target);
  }

  // repeated float weight_decay = 52;
  for (int i = 0, n = this->_internal_weight_decay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(52, this->_internal_weight_decay(i), target);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_rand_skip(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(54, this->_internal_det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(55, this->_internal_det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(56, this->_internal_det_fg_fraction(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det_crop_mode().data(), static_cast<int>(this->_internal_det_crop_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.det_crop_mode");
    target = stream->WriteStringMaybeAliased(
        59, this->_internal_det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(60, this->_internal_new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(61, this->_internal_new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(62, this->_internal_new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(63, this->_internal_new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(64, this->_internal_shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(65, this->_internal_concat_dim(), target);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::hdf5_output_param(this),
        _Internal::hdf5_output_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.V0LayerParameter)
  return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.V0LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  total_size += 2UL * this->_internal_blobs_size();
  for (const auto& msg : this->_impl_.blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float blobs_lr = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_weight_decay_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string source = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string meanfile = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_meanfile());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det_crop_mode());
    }

    // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_filler_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 num_output = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional uint32 pad = 7 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad());
    }

    // optional uint32 kernelsize = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kernelsize());
    }

    // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional uint32 batchsize = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cropsize());
    }

    // optional bool mirror = 21 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool shuffle_images = 64 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 rand_skip = 53 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rand_skip());
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_det_context_pad());
    }

    // optional int32 new_num = 60 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_new_num());
    }

    // optional int32 new_channels = 61 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_new_height());
    }

    // optional int32 new_width = 63 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_new_width());
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_concat_dim());
    }

    // optional bool biasterm = 4 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 group = 9 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional float scale = 17 [default = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float k = 22 [default = 1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional float det_fg_threshold = 54 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V0LayerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V0LayerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V0LayerParameter::GetClassData() const { return &_class_data_; }

void V0LayerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V0LayerParameter *>(to)->MergeFrom(
      static_cast<const V0LayerParameter &>(from));
}


void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.blobs_.MergeFrom(from._impl_.blobs_);
  _impl_.blobs_lr_.MergeFrom(from._impl_.blobs_lr_);
  _impl_.weight_decay_.MergeFrom(from._impl_.weight_decay_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_meanfile(from._internal_meanfile());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_det_crop_mode(from._internal_det_crop_mode());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.pad_ = from._impl_.pad_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.kernelsize_ = from._impl_.kernelsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.pool_ = from._impl_.pool_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.batchsize_ = from._impl_.batchsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.cropsize_ = from._impl_.cropsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.mirror_ = from._impl_.mirror_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.shuffle_images_ = from._impl_.shuffle_images_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.rand_skip_ = from._impl_.rand_skip_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.det_context_pad_ = from._impl_.det_context_pad_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.new_num_ = from._impl_.new_num_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.new_channels_ = from._impl_.new_channels_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.new_height_ = from._impl_.new_height_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.new_width_ = from._impl_.new_width_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.concat_dim_ = from._impl_.concat_dim_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.biasterm_ = from._impl_.biasterm_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.group_ = from._impl_.group_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.stride_ = from._impl_.stride_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.dropout_ratio_ = from._impl_.dropout_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.local_size_ = from._impl_.local_size_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.beta_ = from._impl_.beta_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.k_ = from._impl_.k_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.det_fg_threshold_ = from._impl_.det_fg_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.det_bg_threshold_ = from._impl_.det_bg_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.det_fg_fraction_ = from._impl_.det_fg_fraction_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {
  return true;
}

void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.blobs_.InternalSwap(&other->_impl_.blobs_);
  _impl_.blobs_lr_.InternalSwap(&other->_impl_.blobs_lr_);
  _impl_.weight_decay_.InternalSwap(&other->_impl_.weight_decay_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meanfile_, lhs_arena,
      &other->_impl_.meanfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det_crop_mode_, lhs_arena,
      &other->_impl_.det_crop_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V0LayerParameter, _impl_.new_width_)
      + sizeof(V0LayerParameter::_impl_.new_width_)
      - PROTOBUF_FIELD_OFFSET(V0LayerParameter, _impl_.weight_filler_)>(
          reinterpret_cast<char*>(&_impl_.weight_filler_),
          reinterpret_cast<char*>(&other->_impl_.weight_filler_));
  swap(_impl_.concat_dim_, other->_impl_.concat_dim_);
  swap(_impl_.biasterm_, other->_impl_.biasterm_);
  swap(_impl_.group_, other->_impl_.group_);
  swap(_impl_.stride_, other->_impl_.stride_);
  swap(_impl_.dropout_ratio_, other->_impl_.dropout_ratio_);
  swap(_impl_.local_size_, other->_impl_.local_size_);
  swap(_impl_.alpha_, other->_impl_.alpha_);
  swap(_impl_.beta_, other->_impl_.beta_);
  swap(_impl_.scale_, other->_impl_.scale_);
  swap(_impl_.k_, other->_impl_.k_);
  swap(_impl_.det_fg_threshold_, other->_impl_.det_fg_threshold_);
  swap(_impl_.det_bg_threshold_, other->_impl_.det_bg_threshold_);
  swap(_impl_.det_fg_fraction_, other->_impl_.det_fg_fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V0LayerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[86]);
}

// ===================================================================

class PReLUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PReLUParameter>()._impl_._has_bits_);
  static const ::apollo::perception::inference::FillerParameter& filler(const PReLUParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
PReLUParameter::_Internal::filler(const PReLUParameter* msg) {
  return *msg->_impl_.filler_;
}
PReLUParameter::PReLUParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PReLUParameter)
}
PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.channel_shared_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filler()) {
    _impl_.filler_ = new ::apollo::perception::inference::FillerParameter(*from._impl_.filler_);
  }
  _impl_.channel_shared_ = from._impl_.channel_shared_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PReLUParameter)
}

inline void PReLUParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filler_){nullptr}
    , decltype(_impl_.channel_shared_){false}
  };
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PReLUParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PReLUParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filler_;
}

void PReLUParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PReLUParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.filler_ != nullptr);
    _impl_.filler_->Clear();
  }
  _impl_.channel_shared_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PReLUParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.FillerParameter filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_shared = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_shared(&has_bits);
          _impl_.channel_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PReLUParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PReLUParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filler(this),
        _Internal::filler(this).GetCachedSize(), target, stream);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_channel_shared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PReLUParameter)
  return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PReLUParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.FillerParameter filler = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PReLUParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PReLUParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PReLUParameter::GetClassData() const { return &_class_data_; }

void PReLUParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PReLUParameter *>(to)->MergeFrom(
      static_cast<const PReLUParameter &>(from));
}


void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.channel_shared_ = from._impl_.channel_shared_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {
  return true;
}

void PReLUParameter::InternalSwap(PReLUParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PReLUParameter, _impl_.channel_shared_)
      + sizeof(PReLUParameter::_impl_.channel_shared_)
      - PROTOBUF_FIELD_OFFSET(PReLUParameter, _impl_.filler_)>(
          reinterpret_cast<char*>(&_impl_.filler_),
          reinterpret_cast<char*>(&other->_impl_.filler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PReLUParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[87]);
}

// ===================================================================

class PaddingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PaddingParameter>()._impl_._has_bits_);
  static void set_has_pad_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pad_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pad_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pad_r(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PaddingParameter::PaddingParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.PaddingParameter)
}
PaddingParameter::PaddingParameter(const PaddingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_t_){}
    , decltype(_impl_.pad_b_){}
    , decltype(_impl_.pad_l_){}
    , decltype(_impl_.pad_r_){}
    , decltype(_impl_.val_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pad_t_, &from._impl_.pad_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.pad_t_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PaddingParameter)
}

inline void PaddingParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pad_t_){0u}
    , decltype(_impl_.pad_b_){0u}
    , decltype(_impl_.pad_l_){0u}
    , decltype(_impl_.pad_r_){0u}
    , decltype(_impl_.val_){0}
  };
}

PaddingParameter::~PaddingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PaddingParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaddingParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaddingParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaddingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PaddingParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.pad_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_) -
        reinterpret_cast<char*>(&_impl_.pad_t_)) + sizeof(_impl_.val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaddingParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pad_t = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pad_t(&has_bits);
          _impl_.pad_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_b = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pad_b(&has_bits);
          _impl_.pad_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pad_l(&has_bits);
          _impl_.pad_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pad_r = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pad_r(&has_bits);
          _impl_.pad_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float val = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_val(&has_bits);
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaddingParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PaddingParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pad_t = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pad_t(), target);
  }

  // optional uint32 pad_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pad_b(), target);
  }

  // optional uint32 pad_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pad_l(), target);
  }

  // optional uint32 pad_r = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pad_r(), target);
  }

  // optional float val = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PaddingParameter)
  return target;
}

size_t PaddingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PaddingParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pad_t = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_t());
    }

    // optional uint32 pad_b = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_b());
    }

    // optional uint32 pad_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_l());
    }

    // optional uint32 pad_r = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pad_r());
    }

    // optional float val = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaddingParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaddingParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaddingParameter::GetClassData() const { return &_class_data_; }

void PaddingParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaddingParameter *>(to)->MergeFrom(
      static_cast<const PaddingParameter &>(from));
}


void PaddingParameter::MergeFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PaddingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pad_t_ = from._impl_.pad_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pad_b_ = from._impl_.pad_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pad_l_ = from._impl_.pad_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pad_r_ = from._impl_.pad_r_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.val_ = from._impl_.val_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaddingParameter::CopyFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PaddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingParameter::IsInitialized() const {
  return true;
}

void PaddingParameter::InternalSwap(PaddingParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaddingParameter, _impl_.val_)
      + sizeof(PaddingParameter::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(PaddingParameter, _impl_.pad_t_)>(
          reinterpret_cast<char*>(&_impl_.pad_t_),
          reinterpret_cast<char*>(&other->_impl_.pad_t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[88]);
}

// ===================================================================

class YoloLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloLossParameter>()._impl_._has_bits_);
  static void set_has_reg_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

YoloLossParameter::YoloLossParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.YoloLossParameter)
}
YoloLossParameter::YoloLossParameter(const YoloLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reg_loss_type_){}
    , decltype(_impl_.target_axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reg_loss_type_, &from._impl_.reg_loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_axis_) -
    reinterpret_cast<char*>(&_impl_.reg_loss_type_)) + sizeof(_impl_.target_axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloLossParameter)
}

inline void YoloLossParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reg_loss_type_){2}
    , decltype(_impl_.target_axis_){-1}
  };
}

YoloLossParameter::~YoloLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloLossParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YoloLossParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YoloLossParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YoloLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloLossParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.reg_loss_type_ = 2;
    _impl_.target_axis_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YoloLossParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::YoloLossParameter_RegLossType_IsValid(val))) {
            _internal_set_reg_loss_type(static_cast<::apollo::perception::inference::YoloLossParameter_RegLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_axis = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_axis(&has_bits);
          _impl_.target_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YoloLossParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloLossParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg_loss_type(), target);
  }

  // optional int32 target_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloLossParameter)
  return target;
}

size_t YoloLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloLossParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reg_loss_type());
    }

    // optional int32 target_axis = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_axis());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YoloLossParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YoloLossParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YoloLossParameter::GetClassData() const { return &_class_data_; }

void YoloLossParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YoloLossParameter *>(to)->MergeFrom(
      static_cast<const YoloLossParameter &>(from));
}


void YoloLossParameter::MergeFrom(const YoloLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reg_loss_type_ = from._impl_.reg_loss_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_axis_ = from._impl_.target_axis_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YoloLossParameter::CopyFrom(const YoloLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloLossParameter::IsInitialized() const {
  return true;
}

void YoloLossParameter::InternalSwap(YoloLossParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reg_loss_type_, other->_impl_.reg_loss_type_);
  swap(_impl_.target_axis_, other->_impl_.target_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloLossParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[89]);
}

// ===================================================================

class YoloDumpParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloDumpParameter>()._impl_._has_bits_);
  static void set_has_dump_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

YoloDumpParameter::YoloDumpParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.YoloDumpParameter)
}
YoloDumpParameter::YoloDumpParameter(const YoloDumpParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dump_dir_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dump_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dump_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dump_dir()) {
    _impl_.dump_dir_.Set(from._internal_dump_dir(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloDumpParameter)
}

inline void YoloDumpParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dump_dir_){}
  };
  _impl_.dump_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dump_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

YoloDumpParameter::~YoloDumpParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloDumpParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YoloDumpParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dump_dir_.Destroy();
}

void YoloDumpParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YoloDumpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloDumpParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dump_dir_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YoloDumpParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string dump_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dump_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.YoloDumpParameter.dump_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YoloDumpParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloDumpParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dump_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dump_dir().data(), static_cast<int>(this->_internal_dump_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.YoloDumpParameter.dump_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dump_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloDumpParameter)
  return target;
}

size_t YoloDumpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloDumpParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string dump_dir = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dump_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YoloDumpParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YoloDumpParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YoloDumpParameter::GetClassData() const { return &_class_data_; }

void YoloDumpParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YoloDumpParameter *>(to)->MergeFrom(
      static_cast<const YoloDumpParameter &>(from));
}


void YoloDumpParameter::MergeFrom(const YoloDumpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloDumpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dump_dir()) {
    _internal_set_dump_dir(from._internal_dump_dir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YoloDumpParameter::CopyFrom(const YoloDumpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloDumpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloDumpParameter::IsInitialized() const {
  return true;
}

void YoloDumpParameter::InternalSwap(YoloDumpParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dump_dir_, lhs_arena,
      &other->_impl_.dump_dir_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloDumpParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[90]);
}

// ===================================================================

class YoloAnchorsParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloAnchorsParameter>()._impl_._has_bits_);
  static void set_has_anchors_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

YoloAnchorsParameter::YoloAnchorsParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.YoloAnchorsParameter)
}
YoloAnchorsParameter::YoloAnchorsParameter(const YoloAnchorsParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchors_file_){}
    , decltype(_impl_.ref_w_){}
    , decltype(_impl_.ref_h_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.anchors_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.anchors_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_anchors_file()) {
    _impl_.anchors_file_.Set(from._internal_anchors_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ref_w_, &from._impl_.ref_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ref_h_) -
    reinterpret_cast<char*>(&_impl_.ref_w_)) + sizeof(_impl_.ref_h_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloAnchorsParameter)
}

inline void YoloAnchorsParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchors_file_){}
    , decltype(_impl_.ref_w_){1}
    , decltype(_impl_.ref_h_){1}
  };
  _impl_.anchors_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.anchors_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

YoloAnchorsParameter::~YoloAnchorsParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloAnchorsParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YoloAnchorsParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anchors_file_.Destroy();
}

void YoloAnchorsParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YoloAnchorsParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloAnchorsParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.anchors_file_.ClearNonDefaultToEmpty();
    }
    _impl_.ref_w_ = 1;
    _impl_.ref_h_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YoloAnchorsParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string anchors_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_anchors_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.YoloAnchorsParameter.anchors_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 ref_w = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ref_w(&has_bits);
          _impl_.ref_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ref_h = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ref_h(&has_bits);
          _impl_.ref_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YoloAnchorsParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloAnchorsParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string anchors_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchors_file().data(), static_cast<int>(this->_internal_anchors_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.YoloAnchorsParameter.anchors_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_anchors_file(), target);
  }

  // optional int32 ref_w = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ref_w(), target);
  }

  // optional int32 ref_h = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ref_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloAnchorsParameter)
  return target;
}

size_t YoloAnchorsParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloAnchorsParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string anchors_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchors_file());
    }

    // optional int32 ref_w = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ref_w());
    }

    // optional int32 ref_h = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ref_h());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YoloAnchorsParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YoloAnchorsParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YoloAnchorsParameter::GetClassData() const { return &_class_data_; }

void YoloAnchorsParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YoloAnchorsParameter *>(to)->MergeFrom(
      static_cast<const YoloAnchorsParameter &>(from));
}


void YoloAnchorsParameter::MergeFrom(const YoloAnchorsParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloAnchorsParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_anchors_file(from._internal_anchors_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ref_w_ = from._impl_.ref_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ref_h_ = from._impl_.ref_h_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YoloAnchorsParameter::CopyFrom(const YoloAnchorsParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloAnchorsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloAnchorsParameter::IsInitialized() const {
  return true;
}

void YoloAnchorsParameter::InternalSwap(YoloAnchorsParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.anchors_file_, lhs_arena,
      &other->_impl_.anchors_file_, rhs_arena
  );
  swap(_impl_.ref_w_, other->_impl_.ref_w_);
  swap(_impl_.ref_h_, other->_impl_.ref_h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloAnchorsParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[91]);
}

// ===================================================================

class DimensionStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<DimensionStatistics>()._impl_._has_bits_);
  static void set_has_mean_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_std_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DimensionStatistics::DimensionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DimensionStatistics)
}
DimensionStatistics::DimensionStatistics(const DimensionStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_h_){}
    , decltype(_impl_.mean_w_){}
    , decltype(_impl_.mean_l_){}
    , decltype(_impl_.std_l_){}
    , decltype(_impl_.std_h_){}
    , decltype(_impl_.std_w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mean_h_, &from._impl_.mean_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.std_w_) -
    reinterpret_cast<char*>(&_impl_.mean_h_)) + sizeof(_impl_.std_w_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DimensionStatistics)
}

inline void DimensionStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_h_){0}
    , decltype(_impl_.mean_w_){0}
    , decltype(_impl_.mean_l_){0}
    , decltype(_impl_.std_l_){1}
    , decltype(_impl_.std_h_){1}
    , decltype(_impl_.std_w_){1}
  };
}

DimensionStatistics::~DimensionStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DimensionStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DimensionStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DimensionStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DimensionStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DimensionStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.mean_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mean_l_) -
        reinterpret_cast<char*>(&_impl_.mean_h_)) + sizeof(_impl_.mean_l_));
    _impl_.std_l_ = 1;
    _impl_.std_h_ = 1;
    _impl_.std_w_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DimensionStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float mean_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_mean_h(&has_bits);
          _impl_.mean_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_mean_w(&has_bits);
          _impl_.mean_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_mean_l(&has_bits);
          _impl_.mean_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_h = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_std_h(&has_bits);
          _impl_.std_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_w = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_std_w(&has_bits);
          _impl_.std_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_l = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_std_l(&has_bits);
          _impl_.std_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DimensionStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DimensionStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float mean_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mean_h(), target);
  }

  // optional float mean_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_mean_w(), target);
  }

  // optional float mean_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_l(), target);
  }

  // optional float std_h = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_std_h(), target);
  }

  // optional float std_w = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_std_w(), target);
  }

  // optional float std_l = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_std_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DimensionStatistics)
  return target;
}

size_t DimensionStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DimensionStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float mean_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float mean_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float mean_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float std_l = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float std_h = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float std_w = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DimensionStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DimensionStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DimensionStatistics::GetClassData() const { return &_class_data_; }

void DimensionStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DimensionStatistics *>(to)->MergeFrom(
      static_cast<const DimensionStatistics &>(from));
}


void DimensionStatistics::MergeFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mean_h_ = from._impl_.mean_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mean_w_ = from._impl_.mean_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mean_l_ = from._impl_.mean_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.std_l_ = from._impl_.std_l_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.std_h_ = from._impl_.std_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.std_w_ = from._impl_.std_w_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DimensionStatistics::CopyFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatistics::IsInitialized() const {
  return true;
}

void DimensionStatistics::InternalSwap(DimensionStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DimensionStatistics, _impl_.mean_l_)
      + sizeof(DimensionStatistics::_impl_.mean_l_)
      - PROTOBUF_FIELD_OFFSET(DimensionStatistics, _impl_.mean_h_)>(
          reinterpret_cast<char*>(&_impl_.mean_h_),
          reinterpret_cast<char*>(&other->_impl_.mean_h_));
  swap(_impl_.std_l_, other->_impl_.std_l_);
  swap(_impl_.std_h_, other->_impl_.std_h_);
  swap(_impl_.std_w_, other->_impl_.std_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimensionStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[92]);
}

// ===================================================================

class YoloTargetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloTargetParameter>()._impl_._has_bits_);
  static void set_has_neg_rois_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ign_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ori_cyc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obj_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_noobj_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

YoloTargetParameter::YoloTargetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.YoloTargetParameter)
}
YoloTargetParameter::YoloTargetParameter(const YoloTargetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dimension_statistics_){from._impl_.dimension_statistics_}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.neg_rois_ratio_){}
    , decltype(_impl_.ign_threshold_){}
    , decltype(_impl_.neg_threshold_){}
    , decltype(_impl_.min_height_){}
    , decltype(_impl_.bias_match_){}
    , decltype(_impl_.rescore_){}
    , decltype(_impl_.ori_cyc_){}
    , decltype(_impl_.obj_weight_){}
    , decltype(_impl_.noobj_weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_classes_, &from._impl_.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.noobj_weight_) -
    reinterpret_cast<char*>(&_impl_.num_classes_)) + sizeof(_impl_.noobj_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloTargetParameter)
}

inline void YoloTargetParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dimension_statistics_){arena}
    , decltype(_impl_.num_classes_){0}
    , decltype(_impl_.neg_rois_ratio_){1}
    , decltype(_impl_.ign_threshold_){0.6f}
    , decltype(_impl_.neg_threshold_){0.1f}
    , decltype(_impl_.min_height_){0.05f}
    , decltype(_impl_.bias_match_){true}
    , decltype(_impl_.rescore_){true}
    , decltype(_impl_.ori_cyc_){1}
    , decltype(_impl_.obj_weight_){10}
    , decltype(_impl_.noobj_weight_){1}
  };
}

YoloTargetParameter::~YoloTargetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloTargetParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YoloTargetParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimension_statistics_.~RepeatedPtrField();
}

void YoloTargetParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YoloTargetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloTargetParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimension_statistics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.num_classes_ = 0;
    _impl_.neg_rois_ratio_ = 1;
    _impl_.ign_threshold_ = 0.6f;
    _impl_.neg_threshold_ = 0.1f;
    _impl_.min_height_ = 0.05f;
    _impl_.bias_match_ = true;
    _impl_.rescore_ = true;
    _impl_.ori_cyc_ = 1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.obj_weight_ = 10;
    _impl_.noobj_weight_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YoloTargetParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float neg_rois_ratio = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_neg_rois_ratio(&has_bits);
          _impl_.neg_rois_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ign_threshold = 2 [default = 0.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_ign_threshold(&has_bits);
          _impl_.ign_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float neg_threshold = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_neg_threshold(&has_bits);
          _impl_.neg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_height = 4 [default = 0.05];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_min_height(&has_bits);
          _impl_.min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_match = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bias_match(&has_bits);
          _impl_.bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rescore = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rescore(&has_bits);
          _impl_.rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ori_cyc = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ori_cyc(&has_bits);
          _impl_.ori_cyc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float obj_weight = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_obj_weight(&has_bits);
          _impl_.obj_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float noobj_weight = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_noobj_weight(&has_bits);
          _impl_.noobj_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_classes = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimension_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YoloTargetParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloTargetParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float neg_rois_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_neg_rois_ratio(), target);
  }

  // optional float ign_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_ign_threshold(), target);
  }

  // optional float neg_threshold = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_neg_threshold(), target);
  }

  // optional float min_height = 4 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_min_height(), target);
  }

  // optional bool bias_match = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bias_match(), target);
  }

  // optional bool rescore = 6 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_rescore(), target);
  }

  // optional int32 ori_cyc = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ori_cyc(), target);
  }

  // optional float obj_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_obj_weight(), target);
  }

  // optional float noobj_weight = 9 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_noobj_weight(), target);
  }

  // optional int32 num_classes = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimension_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimension_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloTargetParameter)
  return target;
}

size_t YoloTargetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloTargetParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  total_size += 1UL * this->_internal_dimension_statistics_size();
  for (const auto& msg : this->_impl_.dimension_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 num_classes = 10 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_classes());
    }

    // optional float neg_rois_ratio = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ign_threshold = 2 [default = 0.6];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float neg_threshold = 3 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float min_height = 4 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool bias_match = 5 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rescore = 6 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 ori_cyc = 7 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ori_cyc());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float obj_weight = 8 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float noobj_weight = 9 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YoloTargetParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YoloTargetParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YoloTargetParameter::GetClassData() const { return &_class_data_; }

void YoloTargetParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YoloTargetParameter *>(to)->MergeFrom(
      static_cast<const YoloTargetParameter &>(from));
}


void YoloTargetParameter::MergeFrom(const YoloTargetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloTargetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.dimension_statistics_.MergeFrom(from._impl_.dimension_statistics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.neg_rois_ratio_ = from._impl_.neg_rois_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ign_threshold_ = from._impl_.ign_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.neg_threshold_ = from._impl_.neg_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.min_height_ = from._impl_.min_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.bias_match_ = from._impl_.bias_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rescore_ = from._impl_.rescore_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ori_cyc_ = from._impl_.ori_cyc_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.obj_weight_ = from._impl_.obj_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.noobj_weight_ = from._impl_.noobj_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YoloTargetParameter::CopyFrom(const YoloTargetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloTargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloTargetParameter::IsInitialized() const {
  return true;
}

void YoloTargetParameter::InternalSwap(YoloTargetParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dimension_statistics_.InternalSwap(&other->_impl_.dimension_statistics_);
  swap(_impl_.num_classes_, other->_impl_.num_classes_);
  swap(_impl_.neg_rois_ratio_, other->_impl_.neg_rois_ratio_);
  swap(_impl_.ign_threshold_, other->_impl_.ign_threshold_);
  swap(_impl_.neg_threshold_, other->_impl_.neg_threshold_);
  swap(_impl_.min_height_, other->_impl_.min_height_);
  swap(_impl_.bias_match_, other->_impl_.bias_match_);
  swap(_impl_.rescore_, other->_impl_.rescore_);
  swap(_impl_.ori_cyc_, other->_impl_.ori_cyc_);
  swap(_impl_.obj_weight_, other->_impl_.obj_weight_);
  swap(_impl_.noobj_weight_, other->_impl_.noobj_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloTargetParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[93]);
}

// ===================================================================

class RegionProposalParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionProposalParameter>()._impl_._has_bits_);
  static void set_has_orientation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_noobject_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coord_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tricky_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const RegionProposalParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pos_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_neg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_neg_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
RegionProposalParameter::_Internal::nms_param(const RegionProposalParameter* msg) {
  return *msg->_impl_.nms_param_;
}
RegionProposalParameter::RegionProposalParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.RegionProposalParameter)
}
RegionProposalParameter::RegionProposalParameter(const RegionProposalParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){from._impl_.anchorbox_}
    , decltype(_impl_.thresholds_){from._impl_.thresholds_}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.object_scale_){}
    , decltype(_impl_.noobject_scale_){}
    , decltype(_impl_.class_scale_){}
    , decltype(_impl_.coord_scale_){}
    , decltype(_impl_.jitter_){}
    , decltype(_impl_.bias_){}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.rescore_){}
    , decltype(_impl_.bias_match_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.orientation_scale_){}
    , decltype(_impl_.pos_threshold_){}
    , decltype(_impl_.neg_threshold_){}
    , decltype(_impl_.neg_ratio_){}
    , decltype(_impl_.tricky_iter_){}
    , decltype(_impl_.keep_top_k_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from._impl_.nms_param_);
  }
  ::memcpy(&_impl_.object_scale_, &from._impl_.object_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keep_top_k_) -
    reinterpret_cast<char*>(&_impl_.object_scale_)) + sizeof(_impl_.keep_top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionProposalParameter)
}

inline void RegionProposalParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){arena}
    , decltype(_impl_.thresholds_){arena}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.object_scale_){0u}
    , decltype(_impl_.noobject_scale_){0u}
    , decltype(_impl_.class_scale_){0u}
    , decltype(_impl_.coord_scale_){0u}
    , decltype(_impl_.jitter_){0}
    , decltype(_impl_.bias_){0}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.rescore_){false}
    , decltype(_impl_.bias_match_){false}
    , decltype(_impl_.threshold_){0}
    , decltype(_impl_.orientation_scale_){0}
    , decltype(_impl_.pos_threshold_){0}
    , decltype(_impl_.neg_threshold_){0}
    , decltype(_impl_.neg_ratio_){3}
    , decltype(_impl_.tricky_iter_){400u}
    , decltype(_impl_.keep_top_k_){-1}
  };
}

RegionProposalParameter::~RegionProposalParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionProposalParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionProposalParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anchorbox_.~RepeatedPtrField();
  _impl_.thresholds_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.nms_param_;
}

void RegionProposalParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionProposalParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionProposalParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.anchorbox_.Clear();
  _impl_.thresholds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
    _impl_.nms_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.object_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_classes_) -
        reinterpret_cast<char*>(&_impl_.object_scale_)) + sizeof(_impl_.num_classes_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.rescore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.neg_threshold_) -
        reinterpret_cast<char*>(&_impl_.rescore_)) + sizeof(_impl_.neg_threshold_));
    _impl_.neg_ratio_ = 3;
    _impl_.tricky_iter_ = 400u;
  }
  _impl_.keep_top_k_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionProposalParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 object_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_object_scale(&has_bits);
          _impl_.object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 noobject_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_noobject_scale(&has_bits);
          _impl_.noobject_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_class_scale(&has_bits);
          _impl_.class_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coord_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_coord_scale(&has_bits);
          _impl_.coord_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float jitter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_bias(&has_bits);
          _impl_.bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool rescore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_rescore(&has_bits);
          _impl_.rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_classes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_match = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bias_match(&has_bits);
          _impl_.bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tricky_iter = 13 [default = 400];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tricky_iter(&has_bits);
          _impl_.tricky_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation_scale = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_orientation_scale(&has_bits);
          _impl_.orientation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_keep_top_k(&has_bits);
          _impl_.keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_threshold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_pos_threshold(&has_bits);
          _impl_.pos_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float neg_threshold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_neg_threshold(&has_bits);
          _impl_.neg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 neg_ratio = 19 [default = 3];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_neg_ratio(&has_bits);
          _impl_.neg_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionProposalParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionProposalParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_anchorbox_size()); i < n; i++) {
    const auto& repfield = this->_internal_anchorbox(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float thresholds = 2;
  for (int i = 0, n = this->_internal_thresholds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_thresholds(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_scale(), target);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_noobject_scale(), target);
  }

  // optional uint32 class_scale = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_class_scale(), target);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_coord_scale(), target);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_jitter(), target);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bias(), target);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_rescore(), target);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bias_match(), target);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_threshold(), target);
  }

  // optional uint32 tricky_iter = 13 [default = 400];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tricky_iter(), target);
  }

  // optional float orientation_scale = 14 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_orientation_scale(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 keep_top_k = 16 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_keep_top_k(), target);
  }

  // optional float pos_threshold = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_pos_threshold(), target);
  }

  // optional float neg_threshold = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_neg_threshold(), target);
  }

  // optional int32 neg_ratio = 19 [default = 3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_neg_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionProposalParameter)
  return target;
}

size_t RegionProposalParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionProposalParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->_impl_.anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float thresholds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_thresholds_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

    // optional uint32 object_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_scale());
    }

    // optional uint32 noobject_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_noobject_scale());
    }

    // optional uint32 class_scale = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_class_scale());
    }

    // optional uint32 coord_scale = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_scale());
    }

    // optional float jitter = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float bias = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_classes = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool rescore = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool bias_match = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float threshold = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float orientation_scale = 14 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float pos_threshold = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float neg_threshold = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 neg_ratio = 19 [default = 3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_neg_ratio());
    }

    // optional uint32 tricky_iter = 13 [default = 400];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tricky_iter());
    }

  }
  // optional int32 keep_top_k = 16 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_keep_top_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionProposalParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegionProposalParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionProposalParameter::GetClassData() const { return &_class_data_; }

void RegionProposalParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegionProposalParameter *>(to)->MergeFrom(
      static_cast<const RegionProposalParameter &>(from));
}


void RegionProposalParameter::MergeFrom(const RegionProposalParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionProposalParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.anchorbox_.MergeFrom(from._impl_.anchorbox_);
  _impl_.thresholds_.MergeFrom(from._impl_.thresholds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.object_scale_ = from._impl_.object_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.noobject_scale_ = from._impl_.noobject_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.class_scale_ = from._impl_.class_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.coord_scale_ = from._impl_.coord_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.jitter_ = from._impl_.jitter_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.bias_ = from._impl_.bias_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.rescore_ = from._impl_.rescore_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.bias_match_ = from._impl_.bias_match_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.orientation_scale_ = from._impl_.orientation_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.pos_threshold_ = from._impl_.pos_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.neg_threshold_ = from._impl_.neg_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.neg_ratio_ = from._impl_.neg_ratio_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.tricky_iter_ = from._impl_.tricky_iter_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_keep_top_k(from._internal_keep_top_k());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionProposalParameter::CopyFrom(const RegionProposalParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionProposalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionProposalParameter::IsInitialized() const {
  return true;
}

void RegionProposalParameter::InternalSwap(RegionProposalParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.anchorbox_.InternalSwap(&other->_impl_.anchorbox_);
  _impl_.thresholds_.InternalSwap(&other->_impl_.thresholds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionProposalParameter, _impl_.neg_threshold_)
      + sizeof(RegionProposalParameter::_impl_.neg_threshold_)
      - PROTOBUF_FIELD_OFFSET(RegionProposalParameter, _impl_.nms_param_)>(
          reinterpret_cast<char*>(&_impl_.nms_param_),
          reinterpret_cast<char*>(&other->_impl_.nms_param_));
  swap(_impl_.neg_ratio_, other->_impl_.neg_ratio_);
  swap(_impl_.tricky_iter_, other->_impl_.tricky_iter_);
  swap(_impl_.keep_top_k_, other->_impl_.keep_top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionProposalParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[94]);
}

// ===================================================================

class RegionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionParameter>()._impl_._has_bits_);
  static void set_has_orientation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dimension_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_front_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rear_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_noobject_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coord_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tricky_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_use_l1_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_twice_softmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_anchor_normalized(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_anchorfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_side_box_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_use_side_box_v3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ori_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString RegionParameter::Impl_::_i_give_permission_to_break_this_code_default_anchorfile_{{{"anchor.txt", 10}}, {nullptr}};
RegionParameter::RegionParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.RegionParameter)
}
RegionParameter::RegionParameter(const RegionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){from._impl_.anchorbox_}
    , decltype(_impl_.thresholds_){from._impl_.thresholds_}
    , decltype(_impl_.ori_enable_){from._impl_.ori_enable_}
    , decltype(_impl_.anchorfile_){}
    , decltype(_impl_.object_scale_){}
    , decltype(_impl_.noobject_scale_){}
    , decltype(_impl_.class_scale_){}
    , decltype(_impl_.coord_scale_){}
    , decltype(_impl_.jitter_){}
    , decltype(_impl_.bias_){}
    , decltype(_impl_.num_classes_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.rescore_){}
    , decltype(_impl_.bias_match_){}
    , decltype(_impl_.use_l1_loss_){}
    , decltype(_impl_.use_twice_softmax_){}
    , decltype(_impl_.orientation_scale_){}
    , decltype(_impl_.dimension_scale_){}
    , decltype(_impl_.front_scale_){}
    , decltype(_impl_.rear_scale_){}
    , decltype(_impl_.is_anchor_normalized_){}
    , decltype(_impl_.use_side_box_v2_){}
    , decltype(_impl_.use_side_box_v3_){}
    , decltype(_impl_.tricky_iter_){}
    , decltype(_impl_.ori_cycle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.anchorfile_.InitDefault();
  if (from._internal_has_anchorfile()) {
    _impl_.anchorfile_.Set(from._internal_anchorfile(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_scale_, &from._impl_.object_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ori_cycle_) -
    reinterpret_cast<char*>(&_impl_.object_scale_)) + sizeof(_impl_.ori_cycle_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionParameter)
}

inline void RegionParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchorbox_){arena}
    , decltype(_impl_.thresholds_){arena}
    , decltype(_impl_.ori_enable_){arena}
    , decltype(_impl_.anchorfile_){}
    , decltype(_impl_.object_scale_){0u}
    , decltype(_impl_.noobject_scale_){0u}
    , decltype(_impl_.class_scale_){0}
    , decltype(_impl_.coord_scale_){0u}
    , decltype(_impl_.jitter_){0}
    , decltype(_impl_.bias_){0}
    , decltype(_impl_.num_classes_){0u}
    , decltype(_impl_.threshold_){0}
    , decltype(_impl_.rescore_){false}
    , decltype(_impl_.bias_match_){false}
    , decltype(_impl_.use_l1_loss_){false}
    , decltype(_impl_.use_twice_softmax_){false}
    , decltype(_impl_.orientation_scale_){0}
    , decltype(_impl_.dimension_scale_){0}
    , decltype(_impl_.front_scale_){0}
    , decltype(_impl_.rear_scale_){0}
    , decltype(_impl_.is_anchor_normalized_){false}
    , decltype(_impl_.use_side_box_v2_){false}
    , decltype(_impl_.use_side_box_v3_){false}
    , decltype(_impl_.tricky_iter_){400u}
    , decltype(_impl_.ori_cycle_){1}
  };
  _impl_.anchorfile_.InitDefault();
}

RegionParameter::~RegionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anchorbox_.~RepeatedPtrField();
  _impl_.thresholds_.~RepeatedField();
  _impl_.ori_enable_.~RepeatedField();
  _impl_.anchorfile_.Destroy();
}

void RegionParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.anchorbox_.Clear();
  _impl_.thresholds_.Clear();
  _impl_.ori_enable_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.anchorfile_.ClearToDefault(::apollo::perception::inference::RegionParameter::Impl_::_i_give_permission_to_break_this_code_default_anchorfile_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.object_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_classes_) -
        reinterpret_cast<char*>(&_impl_.object_scale_)) + sizeof(_impl_.num_classes_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.front_scale_) -
        reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.front_scale_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.rear_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_side_box_v3_) -
        reinterpret_cast<char*>(&_impl_.rear_scale_)) + sizeof(_impl_.use_side_box_v3_));
    _impl_.tricky_iter_ = 400u;
    _impl_.ori_cycle_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 object_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_object_scale(&has_bits);
          _impl_.object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 noobject_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_noobject_scale(&has_bits);
          _impl_.noobject_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float class_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_class_scale(&has_bits);
          _impl_.class_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coord_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_coord_scale(&has_bits);
          _impl_.coord_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float jitter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_bias(&has_bits);
          _impl_.bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool rescore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_rescore(&has_bits);
          _impl_.rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_classes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          _impl_.num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bias_match = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bias_match(&has_bits);
          _impl_.bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tricky_iter = 13 [default = 400];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tricky_iter(&has_bits);
          _impl_.tricky_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation_scale = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_orientation_scale(&has_bits);
          _impl_.orientation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float dimension_scale = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_dimension_scale(&has_bits);
          _impl_.dimension_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_l1_loss = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_use_l1_loss(&has_bits);
          _impl_.use_l1_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_twice_softmax = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_use_twice_softmax(&has_bits);
          _impl_.use_twice_softmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_anchor_normalized = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_anchor_normalized(&has_bits);
          _impl_.is_anchor_normalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float front_scale = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_front_scale(&has_bits);
          _impl_.front_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rear_scale = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_rear_scale(&has_bits);
          _impl_.rear_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated bool ori_enable = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ori_enable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_ori_enable(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string anchorfile = 22 [default = "anchor.txt"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_anchorfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.inference.RegionParameter.anchorfile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_side_box_v2 = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_side_box_v2(&has_bits);
          _impl_.use_side_box_v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_side_box_v3 = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_use_side_box_v3(&has_bits);
          _impl_.use_side_box_v3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ori_cycle = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_ori_cycle(&has_bits);
          _impl_.ori_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_anchorbox_size()); i < n; i++) {
    const auto& repfield = this->_internal_anchorbox(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float thresholds = 2;
  for (int i = 0, n = this->_internal_thresholds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_thresholds(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_scale(), target);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_noobject_scale(), target);
  }

  // optional float class_scale = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_class_scale(), target);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_coord_scale(), target);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_jitter(), target);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bias(), target);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_rescore(), target);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_bias_match(), target);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_threshold(), target);
  }

  // optional uint32 tricky_iter = 13 [default = 400];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tricky_iter(), target);
  }

  // optional float orientation_scale = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_orientation_scale(), target);
  }

  // optional float dimension_scale = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_dimension_scale(), target);
  }

  // optional bool use_l1_loss = 16 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_use_l1_loss(), target);
  }

  // optional bool use_twice_softmax = 17 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_use_twice_softmax(), target);
  }

  // optional bool is_anchor_normalized = 18 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_anchor_normalized(), target);
  }

  // optional float front_scale = 19 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_front_scale(), target);
  }

  // optional float rear_scale = 20 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_rear_scale(), target);
  }

  // repeated bool ori_enable = 21;
  for (int i = 0, n = this->_internal_ori_enable_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_ori_enable(i), target);
  }

  // optional string anchorfile = 22 [default = "anchor.txt"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchorfile().data(), static_cast<int>(this->_internal_anchorfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.RegionParameter.anchorfile");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_anchorfile(), target);
  }

  // optional bool use_side_box_v2 = 23 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_use_side_box_v2(), target);
  }

  // optional bool use_side_box_v3 = 24 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_use_side_box_v3(), target);
  }

  // optional int32 ori_cycle = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_ori_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionParameter)
  return target;
}

size_t RegionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->_impl_.anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float thresholds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_thresholds_size());
    total_size += data_size;
  }

  // repeated bool ori_enable = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ori_enable_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_ori_enable_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string anchorfile = 22 [default = "anchor.txt"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchorfile());
    }

    // optional uint32 object_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_scale());
    }

    // optional uint32 noobject_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_noobject_scale());
    }

    // optional float class_scale = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 coord_scale = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_scale());
    }

    // optional float jitter = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float bias = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_classes = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_classes());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float threshold = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool rescore = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool bias_match = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool use_l1_loss = 16 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_twice_softmax = 17 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional float orientation_scale = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float dimension_scale = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float front_scale = 19 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional float rear_scale = 20 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool is_anchor_normalized = 18 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool use_side_box_v2 = 23 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool use_side_box_v3 = 24 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 tricky_iter = 13 [default = 400];
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tricky_iter());
    }

    // optional int32 ori_cycle = 25 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_ori_cycle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegionParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionParameter::GetClassData() const { return &_class_data_; }

void RegionParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegionParameter *>(to)->MergeFrom(
      static_cast<const RegionParameter &>(from));
}


void RegionParameter::MergeFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.anchorbox_.MergeFrom(from._impl_.anchorbox_);
  _impl_.thresholds_.MergeFrom(from._impl_.thresholds_);
  _impl_.ori_enable_.MergeFrom(from._impl_.ori_enable_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_anchorfile(from._internal_anchorfile());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.object_scale_ = from._impl_.object_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.noobject_scale_ = from._impl_.noobject_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.class_scale_ = from._impl_.class_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.coord_scale_ = from._impl_.coord_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.jitter_ = from._impl_.jitter_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.bias_ = from._impl_.bias_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.num_classes_ = from._impl_.num_classes_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.rescore_ = from._impl_.rescore_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.bias_match_ = from._impl_.bias_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.use_l1_loss_ = from._impl_.use_l1_loss_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.use_twice_softmax_ = from._impl_.use_twice_softmax_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.orientation_scale_ = from._impl_.orientation_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.dimension_scale_ = from._impl_.dimension_scale_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.front_scale_ = from._impl_.front_scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.rear_scale_ = from._impl_.rear_scale_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.is_anchor_normalized_ = from._impl_.is_anchor_normalized_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.use_side_box_v2_ = from._impl_.use_side_box_v2_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.use_side_box_v3_ = from._impl_.use_side_box_v3_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.tricky_iter_ = from._impl_.tricky_iter_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.ori_cycle_ = from._impl_.ori_cycle_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionParameter::CopyFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionParameter::IsInitialized() const {
  return true;
}

void RegionParameter::InternalSwap(RegionParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.anchorbox_.InternalSwap(&other->_impl_.anchorbox_);
  _impl_.thresholds_.InternalSwap(&other->_impl_.thresholds_);
  _impl_.ori_enable_.InternalSwap(&other->_impl_.ori_enable_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.anchorfile_, lhs_arena,
      &other->_impl_.anchorfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionParameter, _impl_.use_side_box_v3_)
      + sizeof(RegionParameter::_impl_.use_side_box_v3_)
      - PROTOBUF_FIELD_OFFSET(RegionParameter, _impl_.object_scale_)>(
          reinterpret_cast<char*>(&_impl_.object_scale_),
          reinterpret_cast<char*>(&other->_impl_.object_scale_));
  swap(_impl_.tricky_iter_, other->_impl_.tricky_iter_);
  swap(_impl_.ori_cycle_, other->_impl_.ori_cycle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[95]);
}

// ===================================================================

class AnchorBox::_Internal {
 public:
  using HasBits = decltype(std::declval<AnchorBox>()._impl_._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AnchorBox::AnchorBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.AnchorBox)
}
AnchorBox::AnchorBox(const AnchorBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.w_){}
    , decltype(_impl_.h_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.h_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.h_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnchorBox)
}

inline void AnchorBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.h_){0}
  };
}

AnchorBox::~AnchorBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnchorBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnchorBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnchorBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnchorBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnchorBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.h_) -
        reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.h_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnchorBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_h(&has_bits);
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnchorBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnchorBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // optional float h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnchorBox)
  return target;
}

size_t AnchorBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnchorBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnchorBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnchorBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnchorBox::GetClassData() const { return &_class_data_; }

void AnchorBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnchorBox *>(to)->MergeFrom(
      static_cast<const AnchorBox &>(from));
}


void AnchorBox::MergeFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnchorBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.w_ = from._impl_.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.h_ = from._impl_.h_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnchorBox::CopyFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnchorBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorBox::IsInitialized() const {
  return true;
}

void AnchorBox::InternalSwap(AnchorBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnchorBox, _impl_.h_)
      + sizeof(AnchorBox::_impl_.h_)
      - PROTOBUF_FIELD_OFFSET(AnchorBox, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[96]);
}

// ===================================================================

class ReorgParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorgParameter>()._impl_._has_bits_);
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorgParameter::ReorgParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.ReorgParameter)
}
ReorgParameter::ReorgParameter(const ReorgParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stride_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stride_ = from._impl_.stride_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReorgParameter)
}

inline void ReorgParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stride_){0u}
  };
}

ReorgParameter::~ReorgParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReorgParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReorgParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorgParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReorgParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReorgParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stride_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorgParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorgParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReorgParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReorgParameter)
  return target;
}

size_t ReorgParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReorgParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 stride = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorgParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorgParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorgParameter::GetClassData() const { return &_class_data_; }

void ReorgParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorgParameter *>(to)->MergeFrom(
      static_cast<const ReorgParameter &>(from));
}


void ReorgParameter::MergeFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReorgParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stride()) {
    _internal_set_stride(from._internal_stride());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorgParameter::CopyFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorgParameter::IsInitialized() const {
  return true;
}

void ReorgParameter::InternalSwap(ReorgParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stride_, other->_impl_.stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorgParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[97]);
}

// ===================================================================

class BBoxRegParameter::_Internal {
 public:
};

BBoxRegParameter::BBoxRegParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.BBoxRegParameter)
}
BBoxRegParameter::BBoxRegParameter(const BBoxRegParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_mean_){from._impl_.bbox_mean_}
    , decltype(_impl_.bbox_std_){from._impl_.bbox_std_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BBoxRegParameter)
}

inline void BBoxRegParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_mean_){arena}
    , decltype(_impl_.bbox_std_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BBoxRegParameter::~BBoxRegParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BBoxRegParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BBoxRegParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bbox_mean_.~RepeatedField();
  _impl_.bbox_std_.~RepeatedField();
}

void BBoxRegParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BBoxRegParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BBoxRegParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bbox_mean_.Clear();
  _impl_.bbox_std_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBoxRegParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float bbox_mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bbox_mean(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bbox_mean(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float bbox_std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bbox_std(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bbox_std(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBoxRegParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BBoxRegParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bbox_mean = 1;
  for (int i = 0, n = this->_internal_bbox_mean_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_bbox_mean(i), target);
  }

  // repeated float bbox_std = 2;
  for (int i = 0, n = this->_internal_bbox_std_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_bbox_std(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BBoxRegParameter)
  return target;
}

size_t BBoxRegParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BBoxRegParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bbox_mean = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bbox_mean_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bbox_mean_size());
    total_size += data_size;
  }

  // repeated float bbox_std = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bbox_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bbox_std_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBoxRegParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBoxRegParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBoxRegParameter::GetClassData() const { return &_class_data_; }

void BBoxRegParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBoxRegParameter *>(to)->MergeFrom(
      static_cast<const BBoxRegParameter &>(from));
}


void BBoxRegParameter::MergeFrom(const BBoxRegParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BBoxRegParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bbox_mean_.MergeFrom(from._impl_.bbox_mean_);
  _impl_.bbox_std_.MergeFrom(from._impl_.bbox_std_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBoxRegParameter::CopyFrom(const BBoxRegParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BBoxRegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxRegParameter::IsInitialized() const {
  return true;
}

void BBoxRegParameter::InternalSwap(BBoxRegParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bbox_mean_.InternalSwap(&other->_impl_.bbox_mean_);
  _impl_.bbox_std_.InternalSwap(&other->_impl_.bbox_std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBoxRegParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[98]);
}

// ===================================================================

class DFMBPSROIAlignParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DFMBPSROIAlignParameter>()._impl_._has_bits_);
  static void set_has_heat_map_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pooled_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pooled_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pad_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sample_per_part(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trans_std(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_part_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_part_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_heat_map_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

DFMBPSROIAlignParameter::DFMBPSROIAlignParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DFMBPSROIAlignParameter)
}
DFMBPSROIAlignParameter::DFMBPSROIAlignParameter(const DFMBPSROIAlignParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heat_map_a_){}
    , decltype(_impl_.output_dim_){}
    , decltype(_impl_.group_height_){}
    , decltype(_impl_.group_width_){}
    , decltype(_impl_.pooled_height_){}
    , decltype(_impl_.pooled_width_){}
    , decltype(_impl_.pad_ratio_){}
    , decltype(_impl_.sample_per_part_){}
    , decltype(_impl_.trans_std_){}
    , decltype(_impl_.part_height_){}
    , decltype(_impl_.part_width_){}
    , decltype(_impl_.heat_map_b_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heat_map_a_, &from._impl_.heat_map_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heat_map_b_) -
    reinterpret_cast<char*>(&_impl_.heat_map_a_)) + sizeof(_impl_.heat_map_b_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DFMBPSROIAlignParameter)
}

inline void DFMBPSROIAlignParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heat_map_a_){0}
    , decltype(_impl_.output_dim_){0}
    , decltype(_impl_.group_height_){0}
    , decltype(_impl_.group_width_){0}
    , decltype(_impl_.pooled_height_){0}
    , decltype(_impl_.pooled_width_){0}
    , decltype(_impl_.pad_ratio_){0}
    , decltype(_impl_.sample_per_part_){0}
    , decltype(_impl_.trans_std_){0}
    , decltype(_impl_.part_height_){0}
    , decltype(_impl_.part_width_){0}
    , decltype(_impl_.heat_map_b_){0}
  };
}

DFMBPSROIAlignParameter::~DFMBPSROIAlignParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DFMBPSROIAlignParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DFMBPSROIAlignParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DFMBPSROIAlignParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DFMBPSROIAlignParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DFMBPSROIAlignParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.heat_map_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sample_per_part_) -
        reinterpret_cast<char*>(&_impl_.heat_map_a_)) + sizeof(_impl_.sample_per_part_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.trans_std_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heat_map_b_) -
        reinterpret_cast<char*>(&_impl_.trans_std_)) + sizeof(_impl_.heat_map_b_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFMBPSROIAlignParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float heat_map_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_heat_map_a(&has_bits);
          _impl_.heat_map_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_output_dim(&has_bits);
          _impl_.output_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_height(&has_bits);
          _impl_.group_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_group_width(&has_bits);
          _impl_.group_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pooled_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pooled_height(&has_bits);
          _impl_.pooled_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pooled_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pooled_width(&has_bits);
          _impl_.pooled_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pad_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pad_ratio(&has_bits);
          _impl_.pad_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sample_per_part = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sample_per_part(&has_bits);
          _impl_.sample_per_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float trans_std = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_trans_std(&has_bits);
          _impl_.trans_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 part_height = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_part_height(&has_bits);
          _impl_.part_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 part_width = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_part_width(&has_bits);
          _impl_.part_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float heat_map_b = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_heat_map_b(&has_bits);
          _impl_.heat_map_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DFMBPSROIAlignParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DFMBPSROIAlignParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float heat_map_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_heat_map_a(), target);
  }

  // optional int32 output_dim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_dim(), target);
  }

  // optional int32 group_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_group_height(), target);
  }

  // optional int32 group_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_group_width(), target);
  }

  // optional int32 pooled_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pooled_height(), target);
  }

  // optional int32 pooled_width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_pooled_width(), target);
  }

  // optional float pad_ratio = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pad_ratio(), target);
  }

  // optional int32 sample_per_part = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_sample_per_part(), target);
  }

  // optional float trans_std = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_trans_std(), target);
  }

  // optional int32 part_height = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_part_height(), target);
  }

  // optional int32 part_width = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_part_width(), target);
  }

  // optional float heat_map_b = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_heat_map_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DFMBPSROIAlignParameter)
  return target;
}

size_t DFMBPSROIAlignParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DFMBPSROIAlignParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float heat_map_a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 output_dim = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_dim());
    }

    // optional int32 group_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_height());
    }

    // optional int32 group_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_width());
    }

    // optional int32 pooled_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pooled_height());
    }

    // optional int32 pooled_width = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pooled_width());
    }

    // optional float pad_ratio = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 sample_per_part = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_per_part());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float trans_std = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 part_height = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_part_height());
    }

    // optional int32 part_width = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_part_width());
    }

    // optional float heat_map_b = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DFMBPSROIAlignParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DFMBPSROIAlignParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DFMBPSROIAlignParameter::GetClassData() const { return &_class_data_; }

void DFMBPSROIAlignParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DFMBPSROIAlignParameter *>(to)->MergeFrom(
      static_cast<const DFMBPSROIAlignParameter &>(from));
}


void DFMBPSROIAlignParameter::MergeFrom(const DFMBPSROIAlignParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DFMBPSROIAlignParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heat_map_a_ = from._impl_.heat_map_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_dim_ = from._impl_.output_dim_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.group_height_ = from._impl_.group_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.group_width_ = from._impl_.group_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pooled_height_ = from._impl_.pooled_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pooled_width_ = from._impl_.pooled_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.pad_ratio_ = from._impl_.pad_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.sample_per_part_ = from._impl_.sample_per_part_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.trans_std_ = from._impl_.trans_std_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.part_height_ = from._impl_.part_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.part_width_ = from._impl_.part_width_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.heat_map_b_ = from._impl_.heat_map_b_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DFMBPSROIAlignParameter::CopyFrom(const DFMBPSROIAlignParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DFMBPSROIAlignParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFMBPSROIAlignParameter::IsInitialized() const {
  return true;
}

void DFMBPSROIAlignParameter::InternalSwap(DFMBPSROIAlignParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFMBPSROIAlignParameter, _impl_.heat_map_b_)
      + sizeof(DFMBPSROIAlignParameter::_impl_.heat_map_b_)
      - PROTOBUF_FIELD_OFFSET(DFMBPSROIAlignParameter, _impl_.heat_map_a_)>(
          reinterpret_cast<char*>(&_impl_.heat_map_a_),
          reinterpret_cast<char*>(&other->_impl_.heat_map_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFMBPSROIAlignParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[99]);
}

// ===================================================================

class DetectionOutputSSDParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionOutputSSDParameter>()._impl_._has_bits_);
  static void set_has_heat_map_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_size_h(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_size_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_size_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_threshold_objectness(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::GenAnchorParameter& gen_anchor_param(const DetectionOutputSSDParameter* msg);
  static void set_has_gen_anchor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_refine_out_of_map_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::NMSSSDParameter& nms_param(const DetectionOutputSSDParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_class(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rpn_proposal_output_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_regress_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::inference::GenAnchorParameter&
DetectionOutputSSDParameter::_Internal::gen_anchor_param(const DetectionOutputSSDParameter* msg) {
  return *msg->_impl_.gen_anchor_param_;
}
const ::apollo::perception::inference::NMSSSDParameter&
DetectionOutputSSDParameter::_Internal::nms_param(const DetectionOutputSSDParameter* msg) {
  return *msg->_impl_.nms_param_;
}
DetectionOutputSSDParameter::DetectionOutputSSDParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.DetectionOutputSSDParameter)
}
DetectionOutputSSDParameter::DetectionOutputSSDParameter(const DetectionOutputSSDParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){from._impl_.threshold_}
    , decltype(_impl_.gen_anchor_param_){nullptr}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.heat_map_a_){}
    , decltype(_impl_.min_size_mode_){}
    , decltype(_impl_.threshold_objectness_){}
    , decltype(_impl_.refine_out_of_map_bbox_){}
    , decltype(_impl_.rpn_proposal_output_score_){}
    , decltype(_impl_.regress_agnostic_){}
    , decltype(_impl_.num_class_){}
    , decltype(_impl_.min_size_h_){}
    , decltype(_impl_.min_size_w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gen_anchor_param()) {
    _impl_.gen_anchor_param_ = new ::apollo::perception::inference::GenAnchorParameter(*from._impl_.gen_anchor_param_);
  }
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::inference::NMSSSDParameter(*from._impl_.nms_param_);
  }
  ::memcpy(&_impl_.heat_map_a_, &from._impl_.heat_map_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_size_w_) -
    reinterpret_cast<char*>(&_impl_.heat_map_a_)) + sizeof(_impl_.min_size_w_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DetectionOutputSSDParameter)
}

inline void DetectionOutputSSDParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_){arena}
    , decltype(_impl_.gen_anchor_param_){nullptr}
    , decltype(_impl_.nms_param_){nullptr}
    , decltype(_impl_.heat_map_a_){0}
    , decltype(_impl_.min_size_mode_){0}
    , decltype(_impl_.threshold_objectness_){0}
    , decltype(_impl_.refine_out_of_map_bbox_){false}
    , decltype(_impl_.rpn_proposal_output_score_){false}
    , decltype(_impl_.regress_agnostic_){false}
    , decltype(_impl_.num_class_){1u}
    , decltype(_impl_.min_size_h_){2}
    , decltype(_impl_.min_size_w_){2}
  };
}

DetectionOutputSSDParameter::~DetectionOutputSSDParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DetectionOutputSSDParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionOutputSSDParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threshold_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.gen_anchor_param_;
  if (this != internal_default_instance()) delete _impl_.nms_param_;
}

void DetectionOutputSSDParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionOutputSSDParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DetectionOutputSSDParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threshold_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.gen_anchor_param_ != nullptr);
      _impl_.gen_anchor_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
      _impl_.nms_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.heat_map_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.regress_agnostic_) -
        reinterpret_cast<char*>(&_impl_.heat_map_a_)) + sizeof(_impl_.regress_agnostic_));
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.num_class_ = 1u;
    _impl_.min_size_h_ = 2;
    _impl_.min_size_w_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionOutputSSDParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float heat_map_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_heat_map_a(&has_bits);
          _impl_.heat_map_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_size_h = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_min_size_h(&has_bits);
          _impl_.min_size_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_size_w = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_size_w(&has_bits);
          _impl_.min_size_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 4 [default = HEIGHT_AND_WIDTH];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE_IsValid(val))) {
            _internal_set_min_size_mode(static_cast<::apollo::perception::inference::DetectionOutputSSDParameter_MIN_SIZE_MODE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float threshold_objectness = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_threshold_objectness(&has_bits);
          _impl_.threshold_objectness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.GenAnchorParameter gen_anchor_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_anchor_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool refine_out_of_map_bbox = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_refine_out_of_map_bbox(&has_bits);
          _impl_.refine_out_of_map_bbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NMSSSDParameter nms_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_class = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_num_class(&has_bits);
          _impl_.num_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rpn_proposal_output_score = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rpn_proposal_output_score(&has_bits);
          _impl_.rpn_proposal_output_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool regress_agnostic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_regress_agnostic(&has_bits);
          _impl_.regress_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_threshold(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionOutputSSDParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DetectionOutputSSDParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float heat_map_a = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_heat_map_a(), target);
  }

  // optional float min_size_h = 2 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_min_size_h(), target);
  }

  // optional float min_size_w = 3 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_size_w(), target);
  }

  // optional .apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 4 [default = HEIGHT_AND_WIDTH];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_min_size_mode(), target);
  }

  // optional float threshold_objectness = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_threshold_objectness(), target);
  }

  // optional .apollo.perception.inference.GenAnchorParameter gen_anchor_param = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gen_anchor_param(this),
        _Internal::gen_anchor_param(this).GetCachedSize(), target, stream);
  }

  // optional bool refine_out_of_map_bbox = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_refine_out_of_map_bbox(), target);
  }

  // optional .apollo.perception.inference.NMSSSDParameter nms_param = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  // optional uint32 num_class = 9 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_class(), target);
  }

  // optional bool rpn_proposal_output_score = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_rpn_proposal_output_score(), target);
  }

  // optional bool regress_agnostic = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_regress_agnostic(), target);
  }

  // repeated float threshold = 12;
  for (int i = 0, n = this->_internal_threshold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_threshold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DetectionOutputSSDParameter)
  return target;
}

size_t DetectionOutputSSDParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DetectionOutputSSDParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float threshold = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_threshold_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.GenAnchorParameter gen_anchor_param = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gen_anchor_param_);
    }

    // optional .apollo.perception.inference.NMSSSDParameter nms_param = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

    // optional float heat_map_a = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE min_size_mode = 4 [default = HEIGHT_AND_WIDTH];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_min_size_mode());
    }

    // optional float threshold_objectness = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool refine_out_of_map_bbox = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rpn_proposal_output_score = 10 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool regress_agnostic = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 num_class = 9 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_class());
    }

    // optional float min_size_h = 2 [default = 2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float min_size_w = 3 [default = 2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionOutputSSDParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectionOutputSSDParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionOutputSSDParameter::GetClassData() const { return &_class_data_; }

void DetectionOutputSSDParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectionOutputSSDParameter *>(to)->MergeFrom(
      static_cast<const DetectionOutputSSDParameter &>(from));
}


void DetectionOutputSSDParameter::MergeFrom(const DetectionOutputSSDParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DetectionOutputSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.threshold_.MergeFrom(from._impl_.threshold_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gen_anchor_param()->::apollo::perception::inference::GenAnchorParameter::MergeFrom(from._internal_gen_anchor_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NMSSSDParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.heat_map_a_ = from._impl_.heat_map_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.min_size_mode_ = from._impl_.min_size_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.threshold_objectness_ = from._impl_.threshold_objectness_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.refine_out_of_map_bbox_ = from._impl_.refine_out_of_map_bbox_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rpn_proposal_output_score_ = from._impl_.rpn_proposal_output_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.regress_agnostic_ = from._impl_.regress_agnostic_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.num_class_ = from._impl_.num_class_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.min_size_h_ = from._impl_.min_size_h_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.min_size_w_ = from._impl_.min_size_w_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionOutputSSDParameter::CopyFrom(const DetectionOutputSSDParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DetectionOutputSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOutputSSDParameter::IsInitialized() const {
  return true;
}

void DetectionOutputSSDParameter::InternalSwap(DetectionOutputSSDParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.threshold_.InternalSwap(&other->_impl_.threshold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionOutputSSDParameter, _impl_.regress_agnostic_)
      + sizeof(DetectionOutputSSDParameter::_impl_.regress_agnostic_)
      - PROTOBUF_FIELD_OFFSET(DetectionOutputSSDParameter, _impl_.gen_anchor_param_)>(
          reinterpret_cast<char*>(&_impl_.gen_anchor_param_),
          reinterpret_cast<char*>(&other->_impl_.gen_anchor_param_));
  swap(_impl_.num_class_, other->_impl_.num_class_);
  swap(_impl_.min_size_h_, other->_impl_.min_size_h_);
  swap(_impl_.min_size_w_, other->_impl_.min_size_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionOutputSSDParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[100]);
}

// ===================================================================

class NMSSSDParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NMSSSDParameter>()._impl_._has_bits_);
  static void set_has_need_nms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_add_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_among_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_identity_iou_thr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force_imparity_iou_thr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nms_gpu_max_n_per_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NMSSSDParameter::NMSSSDParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.NMSSSDParameter)
}
NMSSSDParameter::NMSSSDParameter(const NMSSSDParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_ratio_){from._impl_.overlap_ratio_}
    , decltype(_impl_.top_n_){from._impl_.top_n_}
    , decltype(_impl_.max_candidate_n_){from._impl_.max_candidate_n_}
    , decltype(_impl_.use_soft_nms_){from._impl_.use_soft_nms_}
    , decltype(_impl_.voting_){from._impl_.voting_}
    , decltype(_impl_.vote_iou_){from._impl_.vote_iou_}
    , decltype(_impl_.add_score_){}
    , decltype(_impl_.nms_among_classes_){}
    , decltype(_impl_.force_imparity_iou_thr_){}
    , decltype(_impl_.nms_gpu_max_n_per_time_){}
    , decltype(_impl_.need_nms_){}
    , decltype(_impl_.force_identity_iou_thr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.add_score_, &from._impl_.add_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_identity_iou_thr_) -
    reinterpret_cast<char*>(&_impl_.add_score_)) + sizeof(_impl_.force_identity_iou_thr_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NMSSSDParameter)
}

inline void NMSSSDParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_ratio_){arena}
    , decltype(_impl_.top_n_){arena}
    , decltype(_impl_.max_candidate_n_){arena}
    , decltype(_impl_.use_soft_nms_){arena}
    , decltype(_impl_.voting_){arena}
    , decltype(_impl_.vote_iou_){arena}
    , decltype(_impl_.add_score_){false}
    , decltype(_impl_.nms_among_classes_){false}
    , decltype(_impl_.force_imparity_iou_thr_){0}
    , decltype(_impl_.nms_gpu_max_n_per_time_){-1}
    , decltype(_impl_.need_nms_){true}
    , decltype(_impl_.force_identity_iou_thr_){1}
  };
}

NMSSSDParameter::~NMSSSDParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NMSSSDParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NMSSSDParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overlap_ratio_.~RepeatedField();
  _impl_.top_n_.~RepeatedField();
  _impl_.max_candidate_n_.~RepeatedField();
  _impl_.use_soft_nms_.~RepeatedField();
  _impl_.voting_.~RepeatedField();
  _impl_.vote_iou_.~RepeatedField();
}

void NMSSSDParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NMSSSDParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NMSSSDParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlap_ratio_.Clear();
  _impl_.top_n_.Clear();
  _impl_.max_candidate_n_.Clear();
  _impl_.use_soft_nms_.Clear();
  _impl_.voting_.Clear();
  _impl_.vote_iou_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.add_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.force_imparity_iou_thr_) -
        reinterpret_cast<char*>(&_impl_.add_score_)) + sizeof(_impl_.force_imparity_iou_thr_));
    _impl_.nms_gpu_max_n_per_time_ = -1;
    _impl_.need_nms_ = true;
    _impl_.force_identity_iou_thr_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NMSSSDParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool need_nms = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_need_nms(&has_bits);
          _impl_.need_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float overlap_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_overlap_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_overlap_ratio(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 top_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_top_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_top_n(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_score = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_add_score(&has_bits);
          _impl_.add_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 max_candidate_n = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_candidate_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_max_candidate_n(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool use_soft_nms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_use_soft_nms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_use_soft_nms(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool nms_among_classes = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nms_among_classes(&has_bits);
          _impl_.nms_among_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool voting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_voting(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_voting(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float vote_iou = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_iou(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vote_iou(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float force_identity_iou_thr = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_force_identity_iou_thr(&has_bits);
          _impl_.force_identity_iou_thr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float force_imparity_iou_thr = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_force_imparity_iou_thr(&has_bits);
          _impl_.force_imparity_iou_thr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nms_gpu_max_n_per_time = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_nms_gpu_max_n_per_time(&has_bits);
          _impl_.nms_gpu_max_n_per_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NMSSSDParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NMSSSDParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool need_nms = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_need_nms(), target);
  }

  // repeated float overlap_ratio = 2;
  for (int i = 0, n = this->_internal_overlap_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_overlap_ratio(i), target);
  }

  // repeated uint32 top_n = 3;
  for (int i = 0, n = this->_internal_top_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_n(i), target);
  }

  // optional bool add_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_add_score(), target);
  }

  // repeated int32 max_candidate_n = 5;
  for (int i = 0, n = this->_internal_max_candidate_n_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_candidate_n(i), target);
  }

  // repeated bool use_soft_nms = 6;
  for (int i = 0, n = this->_internal_use_soft_nms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_soft_nms(i), target);
  }

  // optional bool nms_among_classes = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_nms_among_classes(), target);
  }

  // repeated bool voting = 8;
  for (int i = 0, n = this->_internal_voting_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_voting(i), target);
  }

  // repeated float vote_iou = 9;
  for (int i = 0, n = this->_internal_vote_iou_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_vote_iou(i), target);
  }

  // optional float force_identity_iou_thr = 10 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_force_identity_iou_thr(), target);
  }

  // optional float force_imparity_iou_thr = 11 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_force_imparity_iou_thr(), target);
  }

  // optional int32 nms_gpu_max_n_per_time = 12 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_nms_gpu_max_n_per_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NMSSSDParameter)
  return target;
}

size_t NMSSSDParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NMSSSDParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float overlap_ratio = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_overlap_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_overlap_ratio_size());
    total_size += data_size;
  }

  // repeated uint32 top_n = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.top_n_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_top_n_size());
    total_size += data_size;
  }

  // repeated int32 max_candidate_n = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.max_candidate_n_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_candidate_n_size());
    total_size += data_size;
  }

  // repeated bool use_soft_nms = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_use_soft_nms_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_use_soft_nms_size());
    total_size += data_size;
  }

  // repeated bool voting = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_voting_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_voting_size());
    total_size += data_size;
  }

  // repeated float vote_iou = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vote_iou_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_iou_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool add_score = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool nms_among_classes = 7 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float force_imparity_iou_thr = 11 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 nms_gpu_max_n_per_time = 12 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nms_gpu_max_n_per_time());
    }

    // optional bool need_nms = 1 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float force_identity_iou_thr = 10 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NMSSSDParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NMSSSDParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NMSSSDParameter::GetClassData() const { return &_class_data_; }

void NMSSSDParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NMSSSDParameter *>(to)->MergeFrom(
      static_cast<const NMSSSDParameter &>(from));
}


void NMSSSDParameter::MergeFrom(const NMSSSDParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NMSSSDParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.overlap_ratio_.MergeFrom(from._impl_.overlap_ratio_);
  _impl_.top_n_.MergeFrom(from._impl_.top_n_);
  _impl_.max_candidate_n_.MergeFrom(from._impl_.max_candidate_n_);
  _impl_.use_soft_nms_.MergeFrom(from._impl_.use_soft_nms_);
  _impl_.voting_.MergeFrom(from._impl_.voting_);
  _impl_.vote_iou_.MergeFrom(from._impl_.vote_iou_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.add_score_ = from._impl_.add_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nms_among_classes_ = from._impl_.nms_among_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.force_imparity_iou_thr_ = from._impl_.force_imparity_iou_thr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.nms_gpu_max_n_per_time_ = from._impl_.nms_gpu_max_n_per_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.need_nms_ = from._impl_.need_nms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.force_identity_iou_thr_ = from._impl_.force_identity_iou_thr_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NMSSSDParameter::CopyFrom(const NMSSSDParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NMSSSDParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSSSDParameter::IsInitialized() const {
  return true;
}

void NMSSSDParameter::InternalSwap(NMSSSDParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.overlap_ratio_.InternalSwap(&other->_impl_.overlap_ratio_);
  _impl_.top_n_.InternalSwap(&other->_impl_.top_n_);
  _impl_.max_candidate_n_.InternalSwap(&other->_impl_.max_candidate_n_);
  _impl_.use_soft_nms_.InternalSwap(&other->_impl_.use_soft_nms_);
  _impl_.voting_.InternalSwap(&other->_impl_.voting_);
  _impl_.vote_iou_.InternalSwap(&other->_impl_.vote_iou_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NMSSSDParameter, _impl_.force_imparity_iou_thr_)
      + sizeof(NMSSSDParameter::_impl_.force_imparity_iou_thr_)
      - PROTOBUF_FIELD_OFFSET(NMSSSDParameter, _impl_.add_score_)>(
          reinterpret_cast<char*>(&_impl_.add_score_),
          reinterpret_cast<char*>(&other->_impl_.add_score_));
  swap(_impl_.nms_gpu_max_n_per_time_, other->_impl_.nms_gpu_max_n_per_time_);
  swap(_impl_.need_nms_, other->_impl_.need_nms_);
  swap(_impl_.force_identity_iou_thr_, other->_impl_.force_identity_iou_thr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NMSSSDParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[101]);
}

// ===================================================================

class GenAnchorParameter::_Internal {
 public:
};

GenAnchorParameter::GenAnchorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.inference.GenAnchorParameter)
}
GenAnchorParameter::GenAnchorParameter(const GenAnchorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.anchor_width_){from._impl_.anchor_width_}
    , decltype(_impl_.anchor_height_){from._impl_.anchor_height_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.GenAnchorParameter)
}

inline void GenAnchorParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.anchor_width_){arena}
    , decltype(_impl_.anchor_height_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenAnchorParameter::~GenAnchorParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.GenAnchorParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenAnchorParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.anchor_width_.~RepeatedField();
  _impl_.anchor_height_.~RepeatedField();
}

void GenAnchorParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenAnchorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.GenAnchorParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.anchor_width_.Clear();
  _impl_.anchor_height_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenAnchorParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float anchor_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_width(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_width(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float anchor_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_height(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_height(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenAnchorParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.GenAnchorParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float anchor_width = 1;
  for (int i = 0, n = this->_internal_anchor_width_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_anchor_width(i), target);
  }

  // repeated float anchor_height = 2;
  for (int i = 0, n = this->_internal_anchor_height_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_anchor_height(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.GenAnchorParameter)
  return target;
}

size_t GenAnchorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.GenAnchorParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float anchor_width = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_width_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_anchor_width_size());
    total_size += data_size;
  }

  // repeated float anchor_height = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_height_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_anchor_height_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenAnchorParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenAnchorParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenAnchorParameter::GetClassData() const { return &_class_data_; }

void GenAnchorParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenAnchorParameter *>(to)->MergeFrom(
      static_cast<const GenAnchorParameter &>(from));
}


void GenAnchorParameter::MergeFrom(const GenAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.GenAnchorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.anchor_width_.MergeFrom(from._impl_.anchor_width_);
  _impl_.anchor_height_.MergeFrom(from._impl_.anchor_height_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenAnchorParameter::CopyFrom(const GenAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.GenAnchorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenAnchorParameter::IsInitialized() const {
  return true;
}

void GenAnchorParameter::InternalSwap(GenAnchorParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.anchor_width_.InternalSwap(&other->_impl_.anchor_width_);
  _impl_.anchor_height_.InternalSwap(&other->_impl_.anchor_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenAnchorParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[102]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inference
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BlobShape*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BlobShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BlobShape >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BlobProto*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BlobProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BlobProto >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Datum*
Arena::CreateMaybeMessage< ::apollo::perception::inference::Datum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::Datum >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LabelMapItem*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LabelMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LabelMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LabelMap*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LabelMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LabelMap >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Sampler*
Arena::CreateMaybeMessage< ::apollo::perception::inference::Sampler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::Sampler >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SampleConstraint*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SampleConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SampleConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BatchSampler*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BatchSampler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BatchSampler >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EmitConstraint*
Arena::CreateMaybeMessage< ::apollo::perception::inference::EmitConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::EmitConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NormalizedBBox*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NormalizedBBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NormalizedBBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BBox3D*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Annotation*
Arena::CreateMaybeMessage< ::apollo::perception::inference::Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotationGroup*
Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotationGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::AnnotationGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotatedDatum*
Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotatedDatum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::AnnotatedDatum >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::FillerParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::FillerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::FillerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NetParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetState*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NetState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NetState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetStateRule*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NetStateRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NetStateRule >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ParamSpec*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ParamSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ParamSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LayerParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LayerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TransformationParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::TransformationParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::TransformationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ResizeParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ResizeParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ResizeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SaltPepperParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SaltPepperParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SaltPepperParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NoiseParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NoiseParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NoiseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DistortionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DistortionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DistortionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ExpansionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ExpansionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ExpansionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AccuracyParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::AccuracyParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::AccuracyParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotatedDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotatedDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::AnnotatedDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ArgMaxParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ArgMaxParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ArgMaxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ConcatParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ConcatParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ConcatParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BatchNormParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BatchNormParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BatchNormParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BiasParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BiasParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BiasParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ContrastiveLossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ContrastiveLossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ContrastiveLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ConvolutionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ConvolutionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ConvolutionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::CropParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::CropParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::CropParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DetectionEvaluateParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DetectionEvaluateParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DetectionEvaluateParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NonMaximumSuppressionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NonMaximumSuppressionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NonMaximumSuppressionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SaveOutputParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SaveOutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SaveOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DetectionOutputParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DetectionOutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DetectionOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionOutputParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionOutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::RegionOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DropoutParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DropoutParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DropoutParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DummyDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DummyDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DummyDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EltwiseParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::EltwiseParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::EltwiseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ELUParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ELUParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ELUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EmbedParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::EmbedParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::EmbedParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ExpParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ExpParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ExpParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::FlattenParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::FlattenParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::FlattenParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HDF5DataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::HDF5DataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::HDF5DataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HDF5OutputParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::HDF5OutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::HDF5OutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HingeLossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::HingeLossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::HingeLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RepeatedList*
Arena::CreateMaybeMessage< ::apollo::perception::inference::RepeatedList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::RepeatedList >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DatasetParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DatasetParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DatasetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ImageDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ImageDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ImageDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InfogainLossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::InfogainLossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::InfogainLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InnerProductParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::InnerProductParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::InnerProductParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InputParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::InputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LogParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LogParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LogParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LRNParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::LRNParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::LRNParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MemoryDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::MemoryDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::MemoryDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MultiBoxLossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::MultiBoxLossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::MultiBoxLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MVNParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::MVNParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::MVNParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NormalizeParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NormalizeParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NormalizeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ParameterParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ParameterParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ParameterParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PermuteParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PermuteParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PermuteParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PoolingParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PoolingParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PoolingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PowerParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PowerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PowerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PriorBoxParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PriorBoxParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PriorBoxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PythonParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PythonParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PythonParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RecurrentParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::RecurrentParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::RecurrentParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReductionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ReductionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ReductionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReLUParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ReLUParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ReLUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReshapeParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ReshapeParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ReshapeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ROIPoolingParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ROIPoolingParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ROIPoolingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ScaleParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ScaleParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ScaleParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SigmoidParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SigmoidParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SigmoidParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SliceParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SliceParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SliceParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SoftmaxParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SoftmaxParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SoftmaxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TanHParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::TanHParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::TanHParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TileParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::TileParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::TileParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ThresholdParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ThresholdParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ThresholdParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::VideoDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::VideoDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::VideoDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::WindowDataParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::WindowDataParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::WindowDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SPPParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::SPPParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::SPPParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::V1LayerParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::V1LayerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::V1LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::V0LayerParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::V0LayerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::V0LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PReLUParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PReLUParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PReLUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PaddingParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::PaddingParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::PaddingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloLossParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloLossParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::YoloLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloDumpParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloDumpParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::YoloDumpParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloAnchorsParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloAnchorsParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::YoloAnchorsParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DimensionStatistics*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DimensionStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DimensionStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloTargetParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloTargetParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::YoloTargetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionProposalParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionProposalParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::RegionProposalParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::RegionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnchorBox*
Arena::CreateMaybeMessage< ::apollo::perception::inference::AnchorBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::AnchorBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReorgParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::ReorgParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::ReorgParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BBoxRegParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::BBoxRegParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::BBoxRegParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DFMBPSROIAlignParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DFMBPSROIAlignParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DFMBPSROIAlignParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DetectionOutputSSDParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::DetectionOutputSSDParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::DetectionOutputSSDParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NMSSSDParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::NMSSSDParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::NMSSSDParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::GenAnchorParameter*
Arena::CreateMaybeMessage< ::apollo::perception::inference::GenAnchorParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::inference::GenAnchorParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
