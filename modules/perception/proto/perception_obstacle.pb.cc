// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

#include "modules/perception/proto/perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR PerceptionObstacle::PerceptionObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_point_)*/{}
  , /*decltype(_impl_.point_cloud_)*/{}
  , /*decltype(_impl_.drops_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.tracking_time_)*/0
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.confidence_type_)*/1
  , /*decltype(_impl_.confidence_)*/1} {}
struct PerceptionObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionObstacleDefaultTypeInternal() {}
  union {
    PerceptionObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
PROTOBUF_CONSTEXPR CIPVInfo::CIPVInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.potential_cipv_id_)*/{}
  , /*decltype(_impl_.cipv_id_)*/0} {}
struct CIPVInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIPVInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIPVInfoDefaultTypeInternal() {}
  union {
    CIPVInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIPVInfoDefaultTypeInternal _CIPVInfo_default_instance_;
PROTOBUF_CONSTEXPR LaneMarker::LaneMarker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.lane_type_)*/0
  , /*decltype(_impl_.model_degree_)*/0
  , /*decltype(_impl_.c0_position_)*/0
  , /*decltype(_impl_.c1_heading_angle_)*/0
  , /*decltype(_impl_.c2_curvature_)*/0
  , /*decltype(_impl_.c3_curvature_derivative_)*/0
  , /*decltype(_impl_.view_range_)*/0
  , /*decltype(_impl_.longitude_start_)*/0
  , /*decltype(_impl_.longitude_end_)*/0} {}
struct LaneMarkerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneMarkerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneMarkerDefaultTypeInternal() {}
  union {
    LaneMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneMarkerDefaultTypeInternal _LaneMarker_default_instance_;
PROTOBUF_CONSTEXPR LaneMarkers::LaneMarkers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_left_lane_marker_)*/{}
  , /*decltype(_impl_.next_right_lane_marker_)*/{}
  , /*decltype(_impl_.left_lane_marker_)*/nullptr
  , /*decltype(_impl_.right_lane_marker_)*/nullptr} {}
struct LaneMarkersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneMarkersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneMarkersDefaultTypeInternal() {}
  union {
    LaneMarkers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneMarkersDefaultTypeInternal _LaneMarkers_default_instance_;
PROTOBUF_CONSTEXPR PerceptionObstacles::PerceptionObstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.perception_obstacle_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.lane_marker_)*/nullptr
  , /*decltype(_impl_.cipv_info_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0} {}
struct PerceptionObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionObstaclesDefaultTypeInternal() {}
  union {
    PerceptionObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Point, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Point, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.point_cloud_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.confidence_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacle, _impl_.drops_),
  4,
  0,
  2,
  1,
  3,
  6,
  7,
  ~0u,
  8,
  5,
  9,
  ~0u,
  11,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _impl_.cipv_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::CIPVInfo, _impl_.potential_cipv_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.model_degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.c0_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.c1_heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.c2_curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.c3_curvature_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.view_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.longitude_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarker, _impl_.longitude_end_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _impl_.left_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _impl_.right_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _impl_.next_left_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::LaneMarkers, _impl_.next_right_lane_marker_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_.perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_.lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::PerceptionObstacles, _impl_.cipv_info_),
  ~0u,
  0,
  3,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::Point)},
  { 12, 33, -1, sizeof(::apollo::perception::PerceptionObstacle)},
  { 48, 56, -1, sizeof(::apollo::perception::CIPVInfo)},
  { 58, 74, -1, sizeof(::apollo::perception::LaneMarker)},
  { 84, 94, -1, sizeof(::apollo::perception::LaneMarkers)},
  { 98, 109, -1, sizeof(::apollo::perception::PerceptionObstacles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::_Point_default_instance_._instance,
  &::apollo::perception::_PerceptionObstacle_default_instance_._instance,
  &::apollo::perception::_CIPVInfo_default_instance_._instance,
  &::apollo::perception::_LaneMarker_default_instance_._instance,
  &::apollo::perception::_LaneMarkers_default_instance_._instance,
  &::apollo::perception::_PerceptionObstacles_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/perception/proto/perception_ob"
  "stacle.proto\022\021apollo.perception\032%modules"
  "/common/proto/error_code.proto\032!modules/"
  "common/proto/header.proto\032 modules/map/p"
  "roto/map_lane.proto\"(\n\005Point\022\t\n\001x\030\001 \001(\001\022"
  "\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\302\005\n\022PerceptionObst"
  "acle\022\n\n\002id\030\001 \001(\005\022*\n\010position\030\002 \001(\0132\030.apo"
  "llo.perception.Point\022\r\n\005theta\030\003 \001(\001\022*\n\010v"
  "elocity\030\004 \001(\0132\030.apollo.perception.Point\022"
  "\016\n\006length\030\005 \001(\001\022\r\n\005width\030\006 \001(\001\022\016\n\006height"
  "\030\007 \001(\001\022/\n\rpolygon_point\030\010 \003(\0132\030.apollo.p"
  "erception.Point\022\025\n\rtracking_time\030\t \001(\001\0228"
  "\n\004type\030\n \001(\0162*.apollo.perception.Percept"
  "ionObstacle.Type\022\021\n\ttimestamp\030\013 \001(\001\022\027\n\013p"
  "oint_cloud\030\014 \003(\001B\002\020\001\022\025\n\nconfidence\030\r \001(\001"
  ":\0011\022]\n\017confidence_type\030\016 \001(\01624.apollo.pe"
  "rception.PerceptionObstacle.ConfidenceTy"
  "pe:\016CONFIDENCE_CNN\022\'\n\005drops\030\017 \003(\0132\030.apol"
  "lo.perception.Point\"i\n\004Type\022\013\n\007UNKNOWN\020\000"
  "\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVAB"
  "LE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEH"
  "ICLE\020\005\"R\n\016ConfidenceType\022\026\n\022CONFIDENCE_U"
  "NKNOWN\020\000\022\022\n\016CONFIDENCE_CNN\020\001\022\024\n\020CONFIDEN"
  "CE_RADAR\020\002\"6\n\010CIPVInfo\022\017\n\007cipv_id\030\001 \001(\005\022"
  "\031\n\021potential_cipv_id\030\002 \003(\005\"\225\002\n\nLaneMarke"
  "r\0226\n\tlane_type\030\001 \001(\0162#.apollo.hdmap.Lane"
  "BoundaryType.Type\022\017\n\007quality\030\002 \001(\001\022\024\n\014mo"
  "del_degree\030\003 \001(\005\022\023\n\013c0_position\030\004 \001(\001\022\030\n"
  "\020c1_heading_angle\030\005 \001(\001\022\024\n\014c2_curvature\030"
  "\006 \001(\001\022\037\n\027c3_curvature_derivative\030\007 \001(\001\022\022"
  "\n\nview_range\030\010 \001(\001\022\027\n\017longitude_start\030\t "
  "\001(\001\022\025\n\rlongitude_end\030\n \001(\001\"\375\001\n\013LaneMarke"
  "rs\0227\n\020left_lane_marker\030\001 \001(\0132\035.apollo.pe"
  "rception.LaneMarker\0228\n\021right_lane_marker"
  "\030\002 \001(\0132\035.apollo.perception.LaneMarker\022<\n"
  "\025next_left_lane_marker\030\003 \003(\0132\035.apollo.pe"
  "rception.LaneMarker\022=\n\026next_right_lane_m"
  "arker\030\004 \003(\0132\035.apollo.perception.LaneMark"
  "er\"\227\002\n\023PerceptionObstacles\022B\n\023perception"
  "_obstacle\030\001 \003(\0132%.apollo.perception.Perc"
  "eptionObstacle\022%\n\006header\030\002 \001(\0132\025.apollo."
  "common.Header\0220\n\nerror_code\030\003 \001(\0162\030.apol"
  "lo.common.ErrorCode:\002OK\0223\n\013lane_marker\030\004"
  " \001(\0132\036.apollo.perception.LaneMarkers\022.\n\t"
  "cipv_info\030\005 \001(\0132\033.apollo.perception.CIPV"
  "Info"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto = {
    false, false, 1804, descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
    "modules/perception/proto/perception_obstacle.proto",
    &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto(&descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[0];
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
constexpr PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
constexpr PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
constexpr PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
constexpr int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[1];
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
constexpr int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:apollo.perception.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)
      + sizeof(Point::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[0]);
}

// ===================================================================

class PerceptionObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacle>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::Point& position(const PerceptionObstacle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::Point& velocity(const PerceptionObstacle* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_confidence_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::perception::Point&
PerceptionObstacle::_Internal::position(const PerceptionObstacle* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::perception::Point&
PerceptionObstacle::_Internal::velocity(const PerceptionObstacle* msg) {
  return *msg->_impl_.velocity_;
}
PerceptionObstacle::PerceptionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){from._impl_.polygon_point_}
    , decltype(_impl_.point_cloud_){from._impl_.point_cloud_}
    , decltype(_impl_.drops_){from._impl_.drops_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.tracking_time_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.confidence_type_){}
    , decltype(_impl_.confidence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::perception::Point(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::perception::Point(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.theta_, &from._impl_.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.theta_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacle)
}

inline void PerceptionObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){arena}
    , decltype(_impl_.point_cloud_){arena}
    , decltype(_impl_.drops_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.tracking_time_){0}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.confidence_type_){1}
    , decltype(_impl_.confidence_){1}
  };
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_point_.~RepeatedPtrField();
  _impl_.point_cloud_.~RepeatedField();
  _impl_.drops_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void PerceptionObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_point_.Clear();
  _impl_.point_cloud_.Clear();
  _impl_.drops_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.theta_)) + sizeof(_impl_.height_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.tracking_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.tracking_time_)) + sizeof(_impl_.timestamp_));
    _impl_.confidence_type_ = 1;
    _impl_.confidence_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.Point velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.Point polygon_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_tracking_time(&has_bits);
          _impl_.tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double point_cloud = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_point_cloud(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 97) {
          _internal_add_point_cloud(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(val))) {
            _internal_set_confidence_type(static_cast<::apollo::perception::PerceptionObstacle_ConfidenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.Point drops = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.perception.Point position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  // optional .apollo.perception.Point velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_height(), target);
  }

  // repeated .apollo.perception.Point polygon_point = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_tracking_time(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->_internal_point_cloud_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_point_cloud(), target);
  }

  // optional double confidence = 13 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_confidence(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_confidence_type(), target);
  }

  // repeated .apollo.perception.Point drops = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drops_size()); i < n; i++) {
    const auto& repfield = this->_internal_drops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.Point polygon_point = 8;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->_impl_.polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_point_cloud_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .apollo.perception.Point drops = 15;
  total_size += 1UL * this->_internal_drops_size();
  for (const auto& msg : this->_impl_.drops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.Point position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.perception.Point velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional double theta = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double tracking_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_confidence_type());
    }

    // optional double confidence = 13 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionObstacle::GetClassData() const { return &_class_data_; }

void PerceptionObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionObstacle *>(to)->MergeFrom(
      static_cast<const PerceptionObstacle &>(from));
}


void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_point_.MergeFrom(from._impl_.polygon_point_);
  _impl_.point_cloud_.MergeFrom(from._impl_.point_cloud_);
  _impl_.drops_.MergeFrom(from._impl_.drops_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::perception::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::perception::Point::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.height_ = from._impl_.height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.tracking_time_ = from._impl_.tracking_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.confidence_type_ = from._impl_.confidence_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polygon_point_.InternalSwap(&other->_impl_.polygon_point_);
  _impl_.point_cloud_.InternalSwap(&other->_impl_.point_cloud_);
  _impl_.drops_.InternalSwap(&other->_impl_.drops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacle, _impl_.timestamp_)
      + sizeof(PerceptionObstacle::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacle, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.confidence_type_, other->_impl_.confidence_type_);
  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[1]);
}

// ===================================================================

class CIPVInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CIPVInfo>()._impl_._has_bits_);
  static void set_has_cipv_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CIPVInfo::CIPVInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.CIPVInfo)
}
CIPVInfo::CIPVInfo(const CIPVInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.potential_cipv_id_){from._impl_.potential_cipv_id_}
    , decltype(_impl_.cipv_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cipv_id_ = from._impl_.cipv_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.CIPVInfo)
}

inline void CIPVInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.potential_cipv_id_){arena}
    , decltype(_impl_.cipv_id_){0}
  };
}

CIPVInfo::~CIPVInfo() {
  // @@protoc_insertion_point(destructor:apollo.perception.CIPVInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIPVInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.potential_cipv_id_.~RepeatedField();
}

void CIPVInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CIPVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.CIPVInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.potential_cipv_id_.Clear();
  _impl_.cipv_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPVInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cipv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cipv_id(&has_bits);
          _impl_.cipv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 potential_cipv_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_potential_cipv_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIPVInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.CIPVInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cipv_id(), target);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0, n = this->_internal_potential_cipv_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_potential_cipv_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.CIPVInfo)
  return target;
}

size_t CIPVInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.CIPVInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 potential_cipv_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.potential_cipv_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_potential_cipv_id_size());
    total_size += data_size;
  }

  // optional int32 cipv_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cipv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CIPVInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CIPVInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CIPVInfo::GetClassData() const { return &_class_data_; }

void CIPVInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CIPVInfo *>(to)->MergeFrom(
      static_cast<const CIPVInfo &>(from));
}


void CIPVInfo::MergeFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.potential_cipv_id_.MergeFrom(from._impl_.potential_cipv_id_);
  if (from._internal_has_cipv_id()) {
    _internal_set_cipv_id(from._internal_cipv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CIPVInfo::CopyFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVInfo::IsInitialized() const {
  return true;
}

void CIPVInfo::InternalSwap(CIPVInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.potential_cipv_id_.InternalSwap(&other->_impl_.potential_cipv_id_);
  swap(_impl_.cipv_id_, other->_impl_.cipv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPVInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[2]);
}

// ===================================================================

class LaneMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarker>()._impl_._has_bits_);
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c0_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c1_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_c2_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_c3_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_view_range(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_longitude_start(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitude_end(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

LaneMarker::LaneMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.LaneMarker)
}
LaneMarker::LaneMarker(const LaneMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.lane_type_){}
    , decltype(_impl_.model_degree_){}
    , decltype(_impl_.c0_position_){}
    , decltype(_impl_.c1_heading_angle_){}
    , decltype(_impl_.c2_curvature_){}
    , decltype(_impl_.c3_curvature_derivative_){}
    , decltype(_impl_.view_range_){}
    , decltype(_impl_.longitude_start_){}
    , decltype(_impl_.longitude_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_end_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.longitude_end_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarker)
}

inline void LaneMarker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.lane_type_){0}
    , decltype(_impl_.model_degree_){0}
    , decltype(_impl_.c0_position_){0}
    , decltype(_impl_.c1_heading_angle_){0}
    , decltype(_impl_.c2_curvature_){0}
    , decltype(_impl_.c3_curvature_derivative_){0}
    , decltype(_impl_.view_range_){0}
    , decltype(_impl_.longitude_start_){0}
    , decltype(_impl_.longitude_end_){0}
  };
}

LaneMarker::~LaneMarker() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneMarker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.view_range_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.view_range_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.longitude_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_end_) -
        reinterpret_cast<char*>(&_impl_.longitude_start_)) + sizeof(_impl_.longitude_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneMarker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::LaneBoundaryType_Type_IsValid(val))) {
            _internal_set_lane_type(static_cast<::apollo::hdmap::LaneBoundaryType_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          _impl_.model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double c0_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_c0_position(&has_bits);
          _impl_.c0_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c1_heading_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_c1_heading_angle(&has_bits);
          _impl_.c1_heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c2_curvature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_c2_curvature(&has_bits);
          _impl_.c2_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c3_curvature_derivative = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_c3_curvature_derivative(&has_bits);
          _impl_.c3_curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_view_range(&has_bits);
          _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_start = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_longitude_start(&has_bits);
          _impl_.longitude_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_end = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_longitude_end(&has_bits);
          _impl_.longitude_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneMarker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lane_type(), target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_c0_position(), target);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_c1_heading_angle(), target);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_c3_curvature_derivative(), target);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_view_range(), target);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_longitude_start(), target);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarker)
  return target;
}

size_t LaneMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double quality = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_type());
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_degree());
    }

    // optional double c0_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double view_range = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double longitude_start = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double longitude_end = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneMarker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneMarker::GetClassData() const { return &_class_data_; }

void LaneMarker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneMarker *>(to)->MergeFrom(
      static_cast<const LaneMarker &>(from));
}


void LaneMarker::MergeFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lane_type_ = from._impl_.lane_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.model_degree_ = from._impl_.model_degree_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.c0_position_ = from._impl_.c0_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.c1_heading_angle_ = from._impl_.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.c2_curvature_ = from._impl_.c2_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.c3_curvature_derivative_ = from._impl_.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.view_range_ = from._impl_.view_range_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.longitude_start_ = from._impl_.longitude_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.longitude_end_ = from._impl_.longitude_end_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneMarker::CopyFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarker::IsInitialized() const {
  return true;
}

void LaneMarker::InternalSwap(LaneMarker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneMarker, _impl_.longitude_end_)
      + sizeof(LaneMarker::_impl_.longitude_end_)
      - PROTOBUF_FIELD_OFFSET(LaneMarker, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[3]);
}

// ===================================================================

class LaneMarkers::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneMarkers>()._impl_._has_bits_);
  static const ::apollo::perception::LaneMarker& left_lane_marker(const LaneMarkers* msg);
  static void set_has_left_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::LaneMarker& right_lane_marker(const LaneMarkers* msg);
  static void set_has_right_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::LaneMarker&
LaneMarkers::_Internal::left_lane_marker(const LaneMarkers* msg) {
  return *msg->_impl_.left_lane_marker_;
}
const ::apollo::perception::LaneMarker&
LaneMarkers::_Internal::right_lane_marker(const LaneMarkers* msg) {
  return *msg->_impl_.right_lane_marker_;
}
LaneMarkers::LaneMarkers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.LaneMarkers)
}
LaneMarkers::LaneMarkers(const LaneMarkers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_left_lane_marker_){from._impl_.next_left_lane_marker_}
    , decltype(_impl_.next_right_lane_marker_){from._impl_.next_right_lane_marker_}
    , decltype(_impl_.left_lane_marker_){nullptr}
    , decltype(_impl_.right_lane_marker_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_lane_marker()) {
    _impl_.left_lane_marker_ = new ::apollo::perception::LaneMarker(*from._impl_.left_lane_marker_);
  }
  if (from._internal_has_right_lane_marker()) {
    _impl_.right_lane_marker_ = new ::apollo::perception::LaneMarker(*from._impl_.right_lane_marker_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.LaneMarkers)
}

inline void LaneMarkers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_left_lane_marker_){arena}
    , decltype(_impl_.next_right_lane_marker_){arena}
    , decltype(_impl_.left_lane_marker_){nullptr}
    , decltype(_impl_.right_lane_marker_){nullptr}
  };
}

LaneMarkers::~LaneMarkers() {
  // @@protoc_insertion_point(destructor:apollo.perception.LaneMarkers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneMarkers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_left_lane_marker_.~RepeatedPtrField();
  _impl_.next_right_lane_marker_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.left_lane_marker_;
  if (this != internal_default_instance()) delete _impl_.right_lane_marker_;
}

void LaneMarkers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.LaneMarkers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_left_lane_marker_.Clear();
  _impl_.next_right_lane_marker_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.left_lane_marker_ != nullptr);
      _impl_.left_lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.right_lane_marker_ != nullptr);
      _impl_.right_lane_marker_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneMarkers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.LaneMarker left_lane_marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_lane_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarker right_lane_marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_lane_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_left_lane_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_right_lane_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneMarkers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.LaneMarkers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::left_lane_marker(this),
        _Internal::left_lane_marker(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::right_lane_marker(this),
        _Internal::right_lane_marker(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_next_left_lane_marker_size()); i < n; i++) {
    const auto& repfield = this->_internal_next_left_lane_marker(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_next_right_lane_marker_size()); i < n; i++) {
    const auto& repfield = this->_internal_next_right_lane_marker(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.LaneMarkers)
  return target;
}

size_t LaneMarkers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.LaneMarkers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  total_size += 1UL * this->_internal_next_left_lane_marker_size();
  for (const auto& msg : this->_impl_.next_left_lane_marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  total_size += 1UL * this->_internal_next_right_lane_marker_size();
  for (const auto& msg : this->_impl_.next_right_lane_marker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.LaneMarker left_lane_marker = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_lane_marker_);
    }

    // optional .apollo.perception.LaneMarker right_lane_marker = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_lane_marker_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneMarkers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneMarkers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneMarkers::GetClassData() const { return &_class_data_; }

void LaneMarkers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneMarkers *>(to)->MergeFrom(
      static_cast<const LaneMarkers &>(from));
}


void LaneMarkers::MergeFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.next_left_lane_marker_.MergeFrom(from._impl_.next_left_lane_marker_);
  _impl_.next_right_lane_marker_.MergeFrom(from._impl_.next_right_lane_marker_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from._internal_left_lane_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_lane_marker()->::apollo::perception::LaneMarker::MergeFrom(from._internal_right_lane_marker());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneMarkers::CopyFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkers::IsInitialized() const {
  return true;
}

void LaneMarkers::InternalSwap(LaneMarkers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.next_left_lane_marker_.InternalSwap(&other->_impl_.next_left_lane_marker_);
  _impl_.next_right_lane_marker_.InternalSwap(&other->_impl_.next_right_lane_marker_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneMarkers, _impl_.right_lane_marker_)
      + sizeof(LaneMarkers::_impl_.right_lane_marker_)
      - PROTOBUF_FIELD_OFFSET(LaneMarkers, _impl_.left_lane_marker_)>(
          reinterpret_cast<char*>(&_impl_.left_lane_marker_),
          reinterpret_cast<char*>(&other->_impl_.left_lane_marker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[4]);
}

// ===================================================================

class PerceptionObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacles>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const PerceptionObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const PerceptionObstacles* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::CIPVInfo& cipv_info(const PerceptionObstacles* msg);
  static void set_has_cipv_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
PerceptionObstacles::_Internal::header(const PerceptionObstacles* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::perception::LaneMarkers&
PerceptionObstacles::_Internal::lane_marker(const PerceptionObstacles* msg) {
  return *msg->_impl_.lane_marker_;
}
const ::apollo::perception::CIPVInfo&
PerceptionObstacles::_Internal::cipv_info(const PerceptionObstacles* msg) {
  return *msg->_impl_.cipv_info_;
}
void PerceptionObstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PerceptionObstacles::PerceptionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){from._impl_.perception_obstacle_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.cipv_info_){nullptr}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_lane_marker()) {
    _impl_.lane_marker_ = new ::apollo::perception::LaneMarkers(*from._impl_.lane_marker_);
  }
  if (from._internal_has_cipv_info()) {
    _impl_.cipv_info_ = new ::apollo::perception::CIPVInfo(*from._impl_.cipv_info_);
  }
  _impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.PerceptionObstacles)
}

inline void PerceptionObstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.cipv_info_){nullptr}
    , decltype(_impl_.error_code_){0}
  };
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.perception.PerceptionObstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.perception_obstacle_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.lane_marker_;
  if (this != internal_default_instance()) delete _impl_.cipv_info_;
}

void PerceptionObstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.PerceptionObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.perception_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lane_marker_ != nullptr);
      _impl_.lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cipv_info_ != nullptr);
      _impl_.cipv_info_->Clear();
    }
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perception_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.CIPVInfo cipv_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cipv_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.PerceptionObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perception_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_perception_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lane_marker(this),
        _Internal::lane_marker(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cipv_info(this),
        _Internal::cipv_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.PerceptionObstacles)
  return target;
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.PerceptionObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  total_size += 1UL * this->_internal_perception_obstacle_size();
  for (const auto& msg : this->_impl_.perception_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_marker_);
    }

    // optional .apollo.perception.CIPVInfo cipv_info = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cipv_info_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionObstacles::GetClassData() const { return &_class_data_; }

void PerceptionObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionObstacles *>(to)->MergeFrom(
      static_cast<const PerceptionObstacles &>(from));
}


void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.perception_obstacle_.MergeFrom(from._impl_.perception_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cipv_info()->::apollo::perception::CIPVInfo::MergeFrom(from._internal_cipv_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.perception_obstacle_.InternalSwap(&other->_impl_.perception_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacles, _impl_.error_code_)
      + sizeof(PerceptionObstacles::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacles, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::Point*
Arena::CreateMaybeMessage< ::apollo::perception::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionObstacle*
Arena::CreateMaybeMessage< ::apollo::perception::PerceptionObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::CIPVInfo*
Arena::CreateMaybeMessage< ::apollo::perception::CIPVInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::CIPVInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::LaneMarker*
Arena::CreateMaybeMessage< ::apollo::perception::LaneMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::LaneMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::LaneMarkers*
Arena::CreateMaybeMessage< ::apollo::perception::LaneMarkers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::LaneMarkers >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::PerceptionObstacles*
Arena::CreateMaybeMessage< ::apollo::perception::PerceptionObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::PerceptionObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
