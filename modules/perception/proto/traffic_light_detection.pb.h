// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
namespace apollo {
namespace perception {
class TrafficLight;
struct TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightBox;
struct TrafficLightBoxDefaultTypeInternal;
extern TrafficLightBoxDefaultTypeInternal _TrafficLightBox_default_instance_;
class TrafficLightDebug;
struct TrafficLightDebugDefaultTypeInternal;
extern TrafficLightDebugDefaultTypeInternal _TrafficLightDebug_default_instance_;
class TrafficLightDetection;
struct TrafficLightDetectionDefaultTypeInternal;
extern TrafficLightDetectionDefaultTypeInternal _TrafficLightDetection_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::TrafficLight* Arena::CreateMaybeMessage<::apollo::perception::TrafficLight>(Arena*);
template<> ::apollo::perception::TrafficLightBox* Arena::CreateMaybeMessage<::apollo::perception::TrafficLightBox>(Arena*);
template<> ::apollo::perception::TrafficLightDebug* Arena::CreateMaybeMessage<::apollo::perception::TrafficLightDebug>(Arena*);
template<> ::apollo::perception::TrafficLightDetection* Arena::CreateMaybeMessage<::apollo::perception::TrafficLightDetection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

enum TrafficLight_Color : int {
  TrafficLight_Color_UNKNOWN = 0,
  TrafficLight_Color_RED = 1,
  TrafficLight_Color_YELLOW = 2,
  TrafficLight_Color_GREEN = 3,
  TrafficLight_Color_BLACK = 4
};
bool TrafficLight_Color_IsValid(int value);
constexpr TrafficLight_Color TrafficLight_Color_Color_MIN = TrafficLight_Color_UNKNOWN;
constexpr TrafficLight_Color TrafficLight_Color_Color_MAX = TrafficLight_Color_BLACK;
constexpr int TrafficLight_Color_Color_ARRAYSIZE = TrafficLight_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Color_descriptor();
template<typename T>
inline const std::string& TrafficLight_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficLight_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficLight_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficLight_Color_descriptor(), enum_t_value);
}
inline bool TrafficLight_Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficLight_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficLight_Color>(
    TrafficLight_Color_descriptor(), name, value);
}
// ===================================================================

class TrafficLightBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightBox) */ {
 public:
  inline TrafficLightBox() : TrafficLightBox(nullptr) {}
  ~TrafficLightBox() override;
  explicit PROTOBUF_CONSTEXPR TrafficLightBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLightBox(const TrafficLightBox& from);
  TrafficLightBox(TrafficLightBox&& from) noexcept
    : TrafficLightBox() {
    *this = ::std::move(from);
  }

  inline TrafficLightBox& operator=(const TrafficLightBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightBox& operator=(TrafficLightBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLightBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLightBox* internal_default_instance() {
    return reinterpret_cast<const TrafficLightBox*>(
               &_TrafficLightBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficLightBox& a, TrafficLightBox& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLightBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLightBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLightBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLightBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLightBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.TrafficLightBox";
  }
  protected:
  explicit TrafficLightBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kColorFieldNumber = 5,
    kSelectedFieldNumber = 6,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional .apollo.perception.TrafficLight.Color color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);
  private:
  ::apollo::perception::TrafficLight_Color _internal_color() const;
  void _internal_set_color(::apollo::perception::TrafficLight_Color value);
  public:

  // optional bool selected = 6;
  bool has_selected() const;
  private:
  bool _internal_has_selected() const;
  public:
  void clear_selected();
  bool selected() const;
  void set_selected(bool value);
  private:
  bool _internal_selected() const;
  void _internal_set_selected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    int32_t width_;
    int32_t height_;
    int color_;
    bool selected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightDebug) */ {
 public:
  inline TrafficLightDebug() : TrafficLightDebug(nullptr) {}
  ~TrafficLightDebug() override;
  explicit PROTOBUF_CONSTEXPR TrafficLightDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLightDebug(const TrafficLightDebug& from);
  TrafficLightDebug(TrafficLightDebug&& from) noexcept
    : TrafficLightDebug() {
    *this = ::std::move(from);
  }

  inline TrafficLightDebug& operator=(const TrafficLightDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightDebug& operator=(TrafficLightDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLightDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLightDebug* internal_default_instance() {
    return reinterpret_cast<const TrafficLightDebug*>(
               &_TrafficLightDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficLightDebug& a, TrafficLightDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLightDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLightDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLightDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLightDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLightDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.TrafficLightDebug";
  }
  protected:
  explicit TrafficLightDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxFieldNumber = 2,
    kCropboxFieldNumber = 1,
    kSignalNumFieldNumber = 3,
    kValidPosFieldNumber = 4,
    kTsDiffPosFieldNumber = 5,
    kTsDiffSysFieldNumber = 6,
    kDistanceToStopLineFieldNumber = 8,
    kProjectErrorFieldNumber = 7,
    kCameraIdFieldNumber = 9,
  };
  // repeated .apollo.perception.TrafficLightBox box = 2;
  int box_size() const;
  private:
  int _internal_box_size() const;
  public:
  void clear_box();
  ::apollo::perception::TrafficLightBox* mutable_box(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_box();
  private:
  const ::apollo::perception::TrafficLightBox& _internal_box(int index) const;
  ::apollo::perception::TrafficLightBox* _internal_add_box();
  public:
  const ::apollo::perception::TrafficLightBox& box(int index) const;
  ::apollo::perception::TrafficLightBox* add_box();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      box() const;

  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  bool has_cropbox() const;
  private:
  bool _internal_has_cropbox() const;
  public:
  void clear_cropbox();
  const ::apollo::perception::TrafficLightBox& cropbox() const;
  PROTOBUF_NODISCARD ::apollo::perception::TrafficLightBox* release_cropbox();
  ::apollo::perception::TrafficLightBox* mutable_cropbox();
  void set_allocated_cropbox(::apollo::perception::TrafficLightBox* cropbox);
  private:
  const ::apollo::perception::TrafficLightBox& _internal_cropbox() const;
  ::apollo::perception::TrafficLightBox* _internal_mutable_cropbox();
  public:
  void unsafe_arena_set_allocated_cropbox(
      ::apollo::perception::TrafficLightBox* cropbox);
  ::apollo::perception::TrafficLightBox* unsafe_arena_release_cropbox();

  // optional int32 signal_num = 3;
  bool has_signal_num() const;
  private:
  bool _internal_has_signal_num() const;
  public:
  void clear_signal_num();
  int32_t signal_num() const;
  void set_signal_num(int32_t value);
  private:
  int32_t _internal_signal_num() const;
  void _internal_set_signal_num(int32_t value);
  public:

  // optional int32 valid_pos = 4;
  bool has_valid_pos() const;
  private:
  bool _internal_has_valid_pos() const;
  public:
  void clear_valid_pos();
  int32_t valid_pos() const;
  void set_valid_pos(int32_t value);
  private:
  int32_t _internal_valid_pos() const;
  void _internal_set_valid_pos(int32_t value);
  public:

  // optional double ts_diff_pos = 5;
  bool has_ts_diff_pos() const;
  private:
  bool _internal_has_ts_diff_pos() const;
  public:
  void clear_ts_diff_pos();
  double ts_diff_pos() const;
  void set_ts_diff_pos(double value);
  private:
  double _internal_ts_diff_pos() const;
  void _internal_set_ts_diff_pos(double value);
  public:

  // optional double ts_diff_sys = 6;
  bool has_ts_diff_sys() const;
  private:
  bool _internal_has_ts_diff_sys() const;
  public:
  void clear_ts_diff_sys();
  double ts_diff_sys() const;
  void set_ts_diff_sys(double value);
  private:
  double _internal_ts_diff_sys() const;
  void _internal_set_ts_diff_sys(double value);
  public:

  // optional double distance_to_stop_line = 8;
  bool has_distance_to_stop_line() const;
  private:
  bool _internal_has_distance_to_stop_line() const;
  public:
  void clear_distance_to_stop_line();
  double distance_to_stop_line() const;
  void set_distance_to_stop_line(double value);
  private:
  double _internal_distance_to_stop_line() const;
  void _internal_set_distance_to_stop_line(double value);
  public:

  // optional int32 project_error = 7;
  bool has_project_error() const;
  private:
  bool _internal_has_project_error() const;
  public:
  void clear_project_error();
  int32_t project_error() const;
  void set_project_error(int32_t value);
  private:
  int32_t _internal_project_error() const;
  void _internal_set_project_error(int32_t value);
  public:

  // optional int32 camera_id = 9;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  int32_t camera_id() const;
  void set_camera_id(int32_t value);
  private:
  int32_t _internal_camera_id() const;
  void _internal_set_camera_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLightBox > box_;
    ::apollo::perception::TrafficLightBox* cropbox_;
    int32_t signal_num_;
    int32_t valid_pos_;
    double ts_diff_pos_;
    double ts_diff_sys_;
    double distance_to_stop_line_;
    int32_t project_error_;
    int32_t camera_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {}
  ~TrafficLight() override;
  explicit PROTOBUF_CONSTEXPR TrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.TrafficLight";
  }
  protected:
  explicit TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficLight_Color Color;
  static constexpr Color UNKNOWN =
    TrafficLight_Color_UNKNOWN;
  static constexpr Color RED =
    TrafficLight_Color_RED;
  static constexpr Color YELLOW =
    TrafficLight_Color_YELLOW;
  static constexpr Color GREEN =
    TrafficLight_Color_GREEN;
  static constexpr Color BLACK =
    TrafficLight_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return TrafficLight_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    TrafficLight_Color_Color_MIN;
  static constexpr Color Color_MAX =
    TrafficLight_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    TrafficLight_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return TrafficLight_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return TrafficLight_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Color* value) {
    return TrafficLight_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTrackingTimeFieldNumber = 4,
    kColorFieldNumber = 1,
    kConfidenceFieldNumber = 3,
  };
  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double tracking_time = 4;
  bool has_tracking_time() const;
  private:
  bool _internal_has_tracking_time() const;
  public:
  void clear_tracking_time();
  double tracking_time() const;
  void set_tracking_time(double value);
  private:
  double _internal_tracking_time() const;
  void _internal_set_tracking_time(double value);
  public:

  // optional .apollo.perception.TrafficLight.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);
  private:
  ::apollo::perception::TrafficLight_Color _internal_color() const;
  void _internal_set_color(::apollo::perception::TrafficLight_Color value);
  public:

  // optional double confidence = 3 [default = 1];
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double tracking_time_;
    int color_;
    double confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightDetection) */ {
 public:
  inline TrafficLightDetection() : TrafficLightDetection(nullptr) {}
  ~TrafficLightDetection() override;
  explicit PROTOBUF_CONSTEXPR TrafficLightDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLightDetection(const TrafficLightDetection& from);
  TrafficLightDetection(TrafficLightDetection&& from) noexcept
    : TrafficLightDetection() {
    *this = ::std::move(from);
  }

  inline TrafficLightDetection& operator=(const TrafficLightDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightDetection& operator=(TrafficLightDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLightDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLightDetection* internal_default_instance() {
    return reinterpret_cast<const TrafficLightDetection*>(
               &_TrafficLightDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrafficLightDetection& a, TrafficLightDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightDetection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLightDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLightDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLightDetection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLightDetection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLightDetection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightDetection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.TrafficLightDetection";
  }
  protected:
  explicit TrafficLightDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kTrafficLightDebugFieldNumber = 3,
    kContainLightsFieldNumber = 4,
  };
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  int traffic_light_size() const;
  private:
  int _internal_traffic_light_size() const;
  public:
  void clear_traffic_light();
  ::apollo::perception::TrafficLight* mutable_traffic_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLight >*
      mutable_traffic_light();
  private:
  const ::apollo::perception::TrafficLight& _internal_traffic_light(int index) const;
  ::apollo::perception::TrafficLight* _internal_add_traffic_light();
  public:
  const ::apollo::perception::TrafficLight& traffic_light(int index) const;
  ::apollo::perception::TrafficLight* add_traffic_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLight >&
      traffic_light() const;

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  bool has_traffic_light_debug() const;
  private:
  bool _internal_has_traffic_light_debug() const;
  public:
  void clear_traffic_light_debug();
  const ::apollo::perception::TrafficLightDebug& traffic_light_debug() const;
  PROTOBUF_NODISCARD ::apollo::perception::TrafficLightDebug* release_traffic_light_debug();
  ::apollo::perception::TrafficLightDebug* mutable_traffic_light_debug();
  void set_allocated_traffic_light_debug(::apollo::perception::TrafficLightDebug* traffic_light_debug);
  private:
  const ::apollo::perception::TrafficLightDebug& _internal_traffic_light_debug() const;
  ::apollo::perception::TrafficLightDebug* _internal_mutable_traffic_light_debug();
  public:
  void unsafe_arena_set_allocated_traffic_light_debug(
      ::apollo::perception::TrafficLightDebug* traffic_light_debug);
  ::apollo::perception::TrafficLightDebug* unsafe_arena_release_traffic_light_debug();

  // optional bool contain_lights = 4;
  bool has_contain_lights() const;
  private:
  bool _internal_has_contain_lights() const;
  public:
  void clear_contain_lights();
  bool contain_lights() const;
  void set_contain_lights(bool value);
  private:
  bool _internal_contain_lights() const;
  void _internal_set_contain_lights(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLight > traffic_light_;
    ::apollo::common::Header* header_;
    ::apollo::perception::TrafficLightDebug* traffic_light_debug_;
    bool contain_lights_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLightBox

// optional int32 x = 1;
inline bool TrafficLightBox::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficLightBox::has_x() const {
  return _internal_has_x();
}
inline void TrafficLightBox::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TrafficLightBox::_internal_x() const {
  return _impl_.x_;
}
inline int32_t TrafficLightBox::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.x)
  return _internal_x();
}
inline void TrafficLightBox::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void TrafficLightBox::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.x)
}

// optional int32 y = 2;
inline bool TrafficLightBox::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLightBox::has_y() const {
  return _internal_has_y();
}
inline void TrafficLightBox::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TrafficLightBox::_internal_y() const {
  return _impl_.y_;
}
inline int32_t TrafficLightBox::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.y)
  return _internal_y();
}
inline void TrafficLightBox::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void TrafficLightBox::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.y)
}

// optional int32 width = 3;
inline bool TrafficLightBox::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLightBox::has_width() const {
  return _internal_has_width();
}
inline void TrafficLightBox::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t TrafficLightBox::_internal_width() const {
  return _impl_.width_;
}
inline int32_t TrafficLightBox::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.width)
  return _internal_width();
}
inline void TrafficLightBox::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void TrafficLightBox::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.width)
}

// optional int32 height = 4;
inline bool TrafficLightBox::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficLightBox::has_height() const {
  return _internal_has_height();
}
inline void TrafficLightBox::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t TrafficLightBox::_internal_height() const {
  return _impl_.height_;
}
inline int32_t TrafficLightBox::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.height)
  return _internal_height();
}
inline void TrafficLightBox::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_ = value;
}
inline void TrafficLightBox::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.height)
}

// optional .apollo.perception.TrafficLight.Color color = 5;
inline bool TrafficLightBox::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficLightBox::has_color() const {
  return _internal_has_color();
}
inline void TrafficLightBox::clear_color() {
  _impl_.color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::perception::TrafficLight_Color TrafficLightBox::_internal_color() const {
  return static_cast< ::apollo::perception::TrafficLight_Color >(_impl_.color_);
}
inline ::apollo::perception::TrafficLight_Color TrafficLightBox::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.color)
  return _internal_color();
}
inline void TrafficLightBox::_internal_set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.color_ = value;
}
inline void TrafficLightBox::set_color(::apollo::perception::TrafficLight_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.color)
}

// optional bool selected = 6;
inline bool TrafficLightBox::_internal_has_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrafficLightBox::has_selected() const {
  return _internal_has_selected();
}
inline void TrafficLightBox::clear_selected() {
  _impl_.selected_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TrafficLightBox::_internal_selected() const {
  return _impl_.selected_;
}
inline bool TrafficLightBox::selected() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.selected)
  return _internal_selected();
}
inline void TrafficLightBox::_internal_set_selected(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.selected_ = value;
}
inline void TrafficLightBox::set_selected(bool value) {
  _internal_set_selected(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.selected)
}

// -------------------------------------------------------------------

// TrafficLightDebug

// optional .apollo.perception.TrafficLightBox cropbox = 1;
inline bool TrafficLightDebug::_internal_has_cropbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cropbox_ != nullptr);
  return value;
}
inline bool TrafficLightDebug::has_cropbox() const {
  return _internal_has_cropbox();
}
inline void TrafficLightDebug::clear_cropbox() {
  if (_impl_.cropbox_ != nullptr) _impl_.cropbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::_internal_cropbox() const {
  const ::apollo::perception::TrafficLightBox* p = _impl_.cropbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::TrafficLightBox&>(
      ::apollo::perception::_TrafficLightBox_default_instance_);
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::cropbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.cropbox)
  return _internal_cropbox();
}
inline void TrafficLightDebug::unsafe_arena_set_allocated_cropbox(
    ::apollo::perception::TrafficLightBox* cropbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cropbox_);
  }
  _impl_.cropbox_ = cropbox;
  if (cropbox) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.TrafficLightDebug.cropbox)
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::release_cropbox() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::TrafficLightBox* temp = _impl_.cropbox_;
  _impl_.cropbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::unsafe_arena_release_cropbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDebug.cropbox)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::TrafficLightBox* temp = _impl_.cropbox_;
  _impl_.cropbox_ = nullptr;
  return temp;
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::_internal_mutable_cropbox() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cropbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::TrafficLightBox>(GetArenaForAllocation());
    _impl_.cropbox_ = p;
  }
  return _impl_.cropbox_;
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_cropbox() {
  ::apollo::perception::TrafficLightBox* _msg = _internal_mutable_cropbox();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.cropbox)
  return _msg;
}
inline void TrafficLightDebug::set_allocated_cropbox(::apollo::perception::TrafficLightBox* cropbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cropbox_;
  }
  if (cropbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cropbox);
    if (message_arena != submessage_arena) {
      cropbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cropbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cropbox_ = cropbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDebug.cropbox)
}

// repeated .apollo.perception.TrafficLightBox box = 2;
inline int TrafficLightDebug::_internal_box_size() const {
  return _impl_.box_.size();
}
inline int TrafficLightDebug::box_size() const {
  return _internal_box_size();
}
inline void TrafficLightDebug::clear_box() {
  _impl_.box_.Clear();
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_box(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.box)
  return _impl_.box_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_box() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.box)
  return &_impl_.box_;
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::_internal_box(int index) const {
  return _impl_.box_.Get(index);
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::box(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.box)
  return _internal_box(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::_internal_add_box() {
  return _impl_.box_.Add();
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_box() {
  ::apollo::perception::TrafficLightBox* _add = _internal_add_box();
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.box)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::box() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.box)
  return _impl_.box_;
}

// optional int32 signal_num = 3;
inline bool TrafficLightDebug::_internal_has_signal_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_signal_num() const {
  return _internal_has_signal_num();
}
inline void TrafficLightDebug::clear_signal_num() {
  _impl_.signal_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TrafficLightDebug::_internal_signal_num() const {
  return _impl_.signal_num_;
}
inline int32_t TrafficLightDebug::signal_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.signal_num)
  return _internal_signal_num();
}
inline void TrafficLightDebug::_internal_set_signal_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.signal_num_ = value;
}
inline void TrafficLightDebug::set_signal_num(int32_t value) {
  _internal_set_signal_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.signal_num)
}

// optional int32 valid_pos = 4;
inline bool TrafficLightDebug::_internal_has_valid_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_valid_pos() const {
  return _internal_has_valid_pos();
}
inline void TrafficLightDebug::clear_valid_pos() {
  _impl_.valid_pos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t TrafficLightDebug::_internal_valid_pos() const {
  return _impl_.valid_pos_;
}
inline int32_t TrafficLightDebug::valid_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.valid_pos)
  return _internal_valid_pos();
}
inline void TrafficLightDebug::_internal_set_valid_pos(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.valid_pos_ = value;
}
inline void TrafficLightDebug::set_valid_pos(int32_t value) {
  _internal_set_valid_pos(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.valid_pos)
}

// optional double ts_diff_pos = 5;
inline bool TrafficLightDebug::_internal_has_ts_diff_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_ts_diff_pos() const {
  return _internal_has_ts_diff_pos();
}
inline void TrafficLightDebug::clear_ts_diff_pos() {
  _impl_.ts_diff_pos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double TrafficLightDebug::_internal_ts_diff_pos() const {
  return _impl_.ts_diff_pos_;
}
inline double TrafficLightDebug::ts_diff_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_pos)
  return _internal_ts_diff_pos();
}
inline void TrafficLightDebug::_internal_set_ts_diff_pos(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ts_diff_pos_ = value;
}
inline void TrafficLightDebug::set_ts_diff_pos(double value) {
  _internal_set_ts_diff_pos(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_pos)
}

// optional double ts_diff_sys = 6;
inline bool TrafficLightDebug::_internal_has_ts_diff_sys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_ts_diff_sys() const {
  return _internal_has_ts_diff_sys();
}
inline void TrafficLightDebug::clear_ts_diff_sys() {
  _impl_.ts_diff_sys_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double TrafficLightDebug::_internal_ts_diff_sys() const {
  return _impl_.ts_diff_sys_;
}
inline double TrafficLightDebug::ts_diff_sys() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_sys)
  return _internal_ts_diff_sys();
}
inline void TrafficLightDebug::_internal_set_ts_diff_sys(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ts_diff_sys_ = value;
}
inline void TrafficLightDebug::set_ts_diff_sys(double value) {
  _internal_set_ts_diff_sys(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_sys)
}

// optional int32 project_error = 7;
inline bool TrafficLightDebug::_internal_has_project_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_project_error() const {
  return _internal_has_project_error();
}
inline void TrafficLightDebug::clear_project_error() {
  _impl_.project_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t TrafficLightDebug::_internal_project_error() const {
  return _impl_.project_error_;
}
inline int32_t TrafficLightDebug::project_error() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.project_error)
  return _internal_project_error();
}
inline void TrafficLightDebug::_internal_set_project_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.project_error_ = value;
}
inline void TrafficLightDebug::set_project_error(int32_t value) {
  _internal_set_project_error(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.project_error)
}

// optional double distance_to_stop_line = 8;
inline bool TrafficLightDebug::_internal_has_distance_to_stop_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_distance_to_stop_line() const {
  return _internal_has_distance_to_stop_line();
}
inline void TrafficLightDebug::clear_distance_to_stop_line() {
  _impl_.distance_to_stop_line_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double TrafficLightDebug::_internal_distance_to_stop_line() const {
  return _impl_.distance_to_stop_line_;
}
inline double TrafficLightDebug::distance_to_stop_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.distance_to_stop_line)
  return _internal_distance_to_stop_line();
}
inline void TrafficLightDebug::_internal_set_distance_to_stop_line(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.distance_to_stop_line_ = value;
}
inline void TrafficLightDebug::set_distance_to_stop_line(double value) {
  _internal_set_distance_to_stop_line(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.distance_to_stop_line)
}

// optional int32 camera_id = 9;
inline bool TrafficLightDebug::_internal_has_camera_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrafficLightDebug::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void TrafficLightDebug::clear_camera_id() {
  _impl_.camera_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t TrafficLightDebug::_internal_camera_id() const {
  return _impl_.camera_id_;
}
inline int32_t TrafficLightDebug::camera_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.camera_id)
  return _internal_camera_id();
}
inline void TrafficLightDebug::_internal_set_camera_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.camera_id_ = value;
}
inline void TrafficLightDebug::set_camera_id(int32_t value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.camera_id)
}

// -------------------------------------------------------------------

// TrafficLight

// optional .apollo.perception.TrafficLight.Color color = 1;
inline bool TrafficLight::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLight::has_color() const {
  return _internal_has_color();
}
inline void TrafficLight::clear_color() {
  _impl_.color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::perception::TrafficLight_Color TrafficLight::_internal_color() const {
  return static_cast< ::apollo::perception::TrafficLight_Color >(_impl_.color_);
}
inline ::apollo::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.color)
  return _internal_color();
}
inline void TrafficLight::_internal_set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.color_ = value;
}
inline void TrafficLight::set_color(::apollo::perception::TrafficLight_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.color)
}

// optional string id = 2;
inline bool TrafficLight::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficLight::has_id() const {
  return _internal_has_id();
}
inline void TrafficLight::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.id)
}
inline std::string* TrafficLight::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLight.id)
  return _s;
}
inline const std::string& TrafficLight::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TrafficLight::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLight.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrafficLight::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLight.id)
}

// optional double confidence = 3 [default = 1];
inline bool TrafficLight::_internal_has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficLight::has_confidence() const {
  return _internal_has_confidence();
}
inline void TrafficLight::clear_confidence() {
  _impl_.confidence_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double TrafficLight::_internal_confidence() const {
  return _impl_.confidence_;
}
inline double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.confidence)
  return _internal_confidence();
}
inline void TrafficLight::_internal_set_confidence(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.confidence_ = value;
}
inline void TrafficLight::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.confidence)
}

// optional double tracking_time = 4;
inline bool TrafficLight::_internal_has_tracking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLight::has_tracking_time() const {
  return _internal_has_tracking_time();
}
inline void TrafficLight::clear_tracking_time() {
  _impl_.tracking_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TrafficLight::_internal_tracking_time() const {
  return _impl_.tracking_time_;
}
inline double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.tracking_time)
  return _internal_tracking_time();
}
inline void TrafficLight::_internal_set_tracking_time(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tracking_time_ = value;
}
inline void TrafficLight::set_tracking_time(double value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.tracking_time)
}

// -------------------------------------------------------------------

// TrafficLightDetection

// optional .apollo.common.Header header = 2;
inline bool TrafficLightDetection::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool TrafficLightDetection::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& TrafficLightDetection::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& TrafficLightDetection::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.header)
  return _internal_header();
}
inline void TrafficLightDetection::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.TrafficLightDetection.header)
}
inline ::apollo::common::Header* TrafficLightDetection::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* TrafficLightDetection::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* TrafficLightDetection::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* TrafficLightDetection::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.header)
  return _msg;
}
inline void TrafficLightDetection::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.header)
}

// repeated .apollo.perception.TrafficLight traffic_light = 1;
inline int TrafficLightDetection::_internal_traffic_light_size() const {
  return _impl_.traffic_light_.size();
}
inline int TrafficLightDetection::traffic_light_size() const {
  return _internal_traffic_light_size();
}
inline void TrafficLightDetection::clear_traffic_light() {
  _impl_.traffic_light_.Clear();
}
inline ::apollo::perception::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light)
  return _impl_.traffic_light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDetection.traffic_light)
  return &_impl_.traffic_light_;
}
inline const ::apollo::perception::TrafficLight& TrafficLightDetection::_internal_traffic_light(int index) const {
  return _impl_.traffic_light_.Get(index);
}
inline const ::apollo::perception::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light)
  return _internal_traffic_light(index);
}
inline ::apollo::perception::TrafficLight* TrafficLightDetection::_internal_add_traffic_light() {
  return _impl_.traffic_light_.Add();
}
inline ::apollo::perception::TrafficLight* TrafficLightDetection::add_traffic_light() {
  ::apollo::perception::TrafficLight* _add = _internal_add_traffic_light();
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDetection.traffic_light)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDetection.traffic_light)
  return _impl_.traffic_light_;
}

// optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
inline bool TrafficLightDetection::_internal_has_traffic_light_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_light_debug_ != nullptr);
  return value;
}
inline bool TrafficLightDetection::has_traffic_light_debug() const {
  return _internal_has_traffic_light_debug();
}
inline void TrafficLightDetection::clear_traffic_light_debug() {
  if (_impl_.traffic_light_debug_ != nullptr) _impl_.traffic_light_debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::TrafficLightDebug& TrafficLightDetection::_internal_traffic_light_debug() const {
  const ::apollo::perception::TrafficLightDebug* p = _impl_.traffic_light_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::TrafficLightDebug&>(
      ::apollo::perception::_TrafficLightDebug_default_instance_);
}
inline const ::apollo::perception::TrafficLightDebug& TrafficLightDetection::traffic_light_debug() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return _internal_traffic_light_debug();
}
inline void TrafficLightDetection::unsafe_arena_set_allocated_traffic_light_debug(
    ::apollo::perception::TrafficLightDebug* traffic_light_debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_light_debug_);
  }
  _impl_.traffic_light_debug_ = traffic_light_debug;
  if (traffic_light_debug) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.TrafficLightDetection.traffic_light_debug)
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::release_traffic_light_debug() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::TrafficLightDebug* temp = _impl_.traffic_light_debug_;
  _impl_.traffic_light_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::unsafe_arena_release_traffic_light_debug() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.traffic_light_debug)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::TrafficLightDebug* temp = _impl_.traffic_light_debug_;
  _impl_.traffic_light_debug_ = nullptr;
  return temp;
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::_internal_mutable_traffic_light_debug() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.traffic_light_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::TrafficLightDebug>(GetArenaForAllocation());
    _impl_.traffic_light_debug_ = p;
  }
  return _impl_.traffic_light_debug_;
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::mutable_traffic_light_debug() {
  ::apollo::perception::TrafficLightDebug* _msg = _internal_mutable_traffic_light_debug();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return _msg;
}
inline void TrafficLightDetection::set_allocated_traffic_light_debug(::apollo::perception::TrafficLightDebug* traffic_light_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.traffic_light_debug_;
  }
  if (traffic_light_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_light_debug);
    if (message_arena != submessage_arena) {
      traffic_light_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_debug, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.traffic_light_debug_ = traffic_light_debug;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.traffic_light_debug)
}

// optional bool contain_lights = 4;
inline bool TrafficLightDetection::_internal_has_contain_lights() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLightDetection::has_contain_lights() const {
  return _internal_has_contain_lights();
}
inline void TrafficLightDetection::clear_contain_lights() {
  _impl_.contain_lights_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TrafficLightDetection::_internal_contain_lights() const {
  return _impl_.contain_lights_;
}
inline bool TrafficLightDetection::contain_lights() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.contain_lights)
  return _internal_contain_lights();
}
inline void TrafficLightDetection::_internal_set_contain_lights(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.contain_lights_ = value;
}
inline void TrafficLightDetection::set_contain_lights(bool value) {
  _internal_set_contain_lights(value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDetection.contain_lights)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::TrafficLight_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::TrafficLight_Color>() {
  return ::apollo::perception::TrafficLight_Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto
