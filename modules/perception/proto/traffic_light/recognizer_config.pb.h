// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/recognizer_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace traffic_light {
namespace recognizer_config {
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
class RecognizerConfig;
struct RecognizerConfigDefaultTypeInternal;
extern RecognizerConfigDefaultTypeInternal _RecognizerConfig_default_instance_;
}  // namespace recognizer_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::traffic_light::recognizer_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::recognizer_config::ModelConfigs>(Arena*);
template<> ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::recognizer_config::RecognizerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace traffic_light {
namespace recognizer_config {

// ===================================================================

class RecognizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.recognizer_config.RecognizerConfig) */ {
 public:
  inline RecognizerConfig() : RecognizerConfig(nullptr) {}
  ~RecognizerConfig() override;
  explicit PROTOBUF_CONSTEXPR RecognizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecognizerConfig(const RecognizerConfig& from);
  RecognizerConfig(RecognizerConfig&& from) noexcept
    : RecognizerConfig() {
    *this = ::std::move(from);
  }

  inline RecognizerConfig& operator=(const RecognizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizerConfig& operator=(RecognizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizerConfig* internal_default_instance() {
    return reinterpret_cast<const RecognizerConfig*>(
               &_RecognizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecognizerConfig& a, RecognizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecognizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecognizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecognizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.recognizer_config.RecognizerConfig";
  }
  protected:
  explicit RecognizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kClassifyModelFieldNumber = 3,
    kClassifyNetFieldNumber = 4,
    kClassifyThresholdFieldNumber = 5,
    kClassifyResizeWidthFieldNumber = 6,
    kClassifyResizeHeightFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string classify_model = 3;
  bool has_classify_model() const;
  private:
  bool _internal_has_classify_model() const;
  public:
  void clear_classify_model();
  const std::string& classify_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classify_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classify_model();
  PROTOBUF_NODISCARD std::string* release_classify_model();
  void set_allocated_classify_model(std::string* classify_model);
  private:
  const std::string& _internal_classify_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classify_model(const std::string& value);
  std::string* _internal_mutable_classify_model();
  public:

  // optional string classify_net = 4;
  bool has_classify_net() const;
  private:
  bool _internal_has_classify_net() const;
  public:
  void clear_classify_net();
  const std::string& classify_net() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classify_net(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classify_net();
  PROTOBUF_NODISCARD std::string* release_classify_net();
  void set_allocated_classify_net(std::string* classify_net);
  private:
  const std::string& _internal_classify_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classify_net(const std::string& value);
  std::string* _internal_mutable_classify_net();
  public:

  // optional float classify_threshold = 5;
  bool has_classify_threshold() const;
  private:
  bool _internal_has_classify_threshold() const;
  public:
  void clear_classify_threshold();
  float classify_threshold() const;
  void set_classify_threshold(float value);
  private:
  float _internal_classify_threshold() const;
  void _internal_set_classify_threshold(float value);
  public:

  // optional int32 classify_resize_width = 6;
  bool has_classify_resize_width() const;
  private:
  bool _internal_has_classify_resize_width() const;
  public:
  void clear_classify_resize_width();
  int32_t classify_resize_width() const;
  void set_classify_resize_width(int32_t value);
  private:
  int32_t _internal_classify_resize_width() const;
  void _internal_set_classify_resize_width(int32_t value);
  public:

  // optional int32 classify_resize_height = 7;
  bool has_classify_resize_height() const;
  private:
  bool _internal_has_classify_resize_height() const;
  public:
  void clear_classify_resize_height();
  int32_t classify_resize_height() const;
  void set_classify_resize_height(int32_t value);
  private:
  int32_t _internal_classify_resize_height() const;
  void _internal_set_classify_resize_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.recognizer_config.RecognizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classify_model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classify_net_;
    float classify_threshold_;
    int32_t classify_resize_width_;
    int32_t classify_resize_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.recognizer_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.recognizer_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecognizerConfigFieldNumber = 1,
  };
  // repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
  int recognizer_config_size() const;
  private:
  int _internal_recognizer_config_size() const;
  public:
  void clear_recognizer_config();
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* mutable_recognizer_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >*
      mutable_recognizer_config();
  private:
  const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& _internal_recognizer_config(int index) const;
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* _internal_add_recognizer_config();
  public:
  const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& recognizer_config(int index) const;
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* add_recognizer_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >&
      recognizer_config() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.recognizer_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig > recognizer_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecognizerConfig

// optional string name = 1;
inline bool RecognizerConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecognizerConfig::has_name() const {
  return _internal_has_name();
}
inline void RecognizerConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecognizerConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizerConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}
inline std::string* RecognizerConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  return _s;
}
inline const std::string& RecognizerConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RecognizerConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizerConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizerConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecognizerConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.name)
}

// optional string version = 2;
inline bool RecognizerConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecognizerConfig::has_version() const {
  return _internal_has_version();
}
inline void RecognizerConfig::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecognizerConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizerConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}
inline std::string* RecognizerConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  return _s;
}
inline const std::string& RecognizerConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void RecognizerConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizerConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizerConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecognizerConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.version)
}

// optional string classify_model = 3;
inline bool RecognizerConfig::_internal_has_classify_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecognizerConfig::has_classify_model() const {
  return _internal_has_classify_model();
}
inline void RecognizerConfig::clear_classify_model() {
  _impl_.classify_model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RecognizerConfig::classify_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return _internal_classify_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizerConfig::set_classify_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.classify_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}
inline std::string* RecognizerConfig::mutable_classify_model() {
  std::string* _s = _internal_mutable_classify_model();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  return _s;
}
inline const std::string& RecognizerConfig::_internal_classify_model() const {
  return _impl_.classify_model_.Get();
}
inline void RecognizerConfig::_internal_set_classify_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.classify_model_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizerConfig::_internal_mutable_classify_model() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.classify_model_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizerConfig::release_classify_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
  if (!_internal_has_classify_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.classify_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classify_model_.IsDefault()) {
    _impl_.classify_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecognizerConfig::set_allocated_classify_model(std::string* classify_model) {
  if (classify_model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.classify_model_.SetAllocated(classify_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classify_model_.IsDefault()) {
    _impl_.classify_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_model)
}

// optional string classify_net = 4;
inline bool RecognizerConfig::_internal_has_classify_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecognizerConfig::has_classify_net() const {
  return _internal_has_classify_net();
}
inline void RecognizerConfig::clear_classify_net() {
  _impl_.classify_net_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RecognizerConfig::classify_net() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return _internal_classify_net();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecognizerConfig::set_classify_net(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.classify_net_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}
inline std::string* RecognizerConfig::mutable_classify_net() {
  std::string* _s = _internal_mutable_classify_net();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  return _s;
}
inline const std::string& RecognizerConfig::_internal_classify_net() const {
  return _impl_.classify_net_.Get();
}
inline void RecognizerConfig::_internal_set_classify_net(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.classify_net_.Set(value, GetArenaForAllocation());
}
inline std::string* RecognizerConfig::_internal_mutable_classify_net() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.classify_net_.Mutable(GetArenaForAllocation());
}
inline std::string* RecognizerConfig::release_classify_net() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
  if (!_internal_has_classify_net()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.classify_net_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classify_net_.IsDefault()) {
    _impl_.classify_net_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecognizerConfig::set_allocated_classify_net(std::string* classify_net) {
  if (classify_net != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.classify_net_.SetAllocated(classify_net, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classify_net_.IsDefault()) {
    _impl_.classify_net_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_net)
}

// optional float classify_threshold = 5;
inline bool RecognizerConfig::_internal_has_classify_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecognizerConfig::has_classify_threshold() const {
  return _internal_has_classify_threshold();
}
inline void RecognizerConfig::clear_classify_threshold() {
  _impl_.classify_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float RecognizerConfig::_internal_classify_threshold() const {
  return _impl_.classify_threshold_;
}
inline float RecognizerConfig::classify_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
  return _internal_classify_threshold();
}
inline void RecognizerConfig::_internal_set_classify_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.classify_threshold_ = value;
}
inline void RecognizerConfig::set_classify_threshold(float value) {
  _internal_set_classify_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_threshold)
}

// optional int32 classify_resize_width = 6;
inline bool RecognizerConfig::_internal_has_classify_resize_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RecognizerConfig::has_classify_resize_width() const {
  return _internal_has_classify_resize_width();
}
inline void RecognizerConfig::clear_classify_resize_width() {
  _impl_.classify_resize_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t RecognizerConfig::_internal_classify_resize_width() const {
  return _impl_.classify_resize_width_;
}
inline int32_t RecognizerConfig::classify_resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
  return _internal_classify_resize_width();
}
inline void RecognizerConfig::_internal_set_classify_resize_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.classify_resize_width_ = value;
}
inline void RecognizerConfig::set_classify_resize_width(int32_t value) {
  _internal_set_classify_resize_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_width)
}

// optional int32 classify_resize_height = 7;
inline bool RecognizerConfig::_internal_has_classify_resize_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RecognizerConfig::has_classify_resize_height() const {
  return _internal_has_classify_resize_height();
}
inline void RecognizerConfig::clear_classify_resize_height() {
  _impl_.classify_resize_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t RecognizerConfig::_internal_classify_resize_height() const {
  return _impl_.classify_resize_height_;
}
inline int32_t RecognizerConfig::classify_resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
  return _internal_classify_resize_height();
}
inline void RecognizerConfig::_internal_set_classify_resize_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.classify_resize_height_ = value;
}
inline void RecognizerConfig::set_classify_resize_height(int32_t value) {
  _internal_set_classify_resize_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.recognizer_config.RecognizerConfig.classify_resize_height)
}

// -------------------------------------------------------------------

// ModelConfigs

// repeated .apollo.perception.traffic_light.recognizer_config.RecognizerConfig recognizer_config = 1;
inline int ModelConfigs::_internal_recognizer_config_size() const {
  return _impl_.recognizer_config_.size();
}
inline int ModelConfigs::recognizer_config_size() const {
  return _internal_recognizer_config_size();
}
inline void ModelConfigs::clear_recognizer_config() {
  _impl_.recognizer_config_.Clear();
}
inline ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::mutable_recognizer_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return _impl_.recognizer_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >*
ModelConfigs::mutable_recognizer_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return &_impl_.recognizer_config_;
}
inline const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& ModelConfigs::_internal_recognizer_config(int index) const {
  return _impl_.recognizer_config_.Get(index);
}
inline const ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig& ModelConfigs::recognizer_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return _internal_recognizer_config(index);
}
inline ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::_internal_add_recognizer_config() {
  return _impl_.recognizer_config_.Add();
}
inline ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* ModelConfigs::add_recognizer_config() {
  ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig* _add = _internal_add_recognizer_config();
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::recognizer_config::RecognizerConfig >&
ModelConfigs::recognizer_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.recognizer_config.ModelConfigs.recognizer_config)
  return _impl_.recognizer_config_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recognizer_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2frecognizer_5fconfig_2eproto
