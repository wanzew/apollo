// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/multi_camera_projection_config.proto

#include "modules/perception/proto/traffic_light/multi_camera_projection_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {
PROTOBUF_CONSTEXPR CameraFocusConfig::CameraFocusConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera_extrinsic_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera_intrinsic_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CameraFocusConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraFocusConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraFocusConfigDefaultTypeInternal() {}
  union {
    CameraFocusConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraFocusConfigDefaultTypeInternal _CameraFocusConfig_default_instance_;
PROTOBUF_CONSTEXPR MultiCamerasProjectionConfig::MultiCamerasProjectionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_names_)*/{}
  , /*decltype(_impl_.camera_focus_config_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.single_projection_)*/{nullptr, ::_pbi::ConstantInitialized{}}} {}
struct MultiCamerasProjectionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCamerasProjectionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCamerasProjectionConfigDefaultTypeInternal() {}
  union {
    MultiCamerasProjectionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCamerasProjectionConfigDefaultTypeInternal _MultiCamerasProjectionConfig_default_instance_;
PROTOBUF_CONSTEXPR ModelConfigs::ModelConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.multi_camera_projection_config_)*/nullptr} {}
struct ModelConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigsDefaultTypeInternal() {}
  union {
    ModelConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig, _impl_.camera_extrinsic_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig, _impl_.camera_intrinsic_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_.single_projection_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_.camera_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig, _impl_.camera_focus_config_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs, _impl_.multi_camera_projection_config_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig)},
  { 12, 23, -1, sizeof(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig)},
  { 28, 35, -1, sizeof(::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::traffic_light::multi_camera_projection_config::_CameraFocusConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::multi_camera_projection_config::_MultiCamerasProjectionConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::multi_camera_projection_config::_ModelConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nKmodules/perception/proto/traffic_light"
  "/multi_camera_projection_config.proto\022>a"
  "pollo.perception.traffic_light.multi_cam"
  "era_projection_config\"_\n\021CameraFocusConf"
  "ig\022\014\n\004name\030\001 \001(\t\022\035\n\025camera_extrinsic_fil"
  "e\030\002 \001(\t\022\035\n\025camera_intrinsic_file\030\003 \001(\t\"\221"
  "\002\n\034MultiCamerasProjectionConfig\022$\n\004name\030"
  "\001 \001(\t:\026MultiCamerasProjection\022\026\n\007version"
  "\030\002 \001(\t:\0051.0.0\022-\n\021single_projection\030\003 \001(\t"
  ":\022BoundaryProjection\022\024\n\014camera_names\030\004 \003"
  "(\t\022n\n\023camera_focus_config\030\005 \003(\0132Q.apollo"
  ".perception.traffic_light.multi_camera_p"
  "rojection_config.CameraFocusConfig\"\225\001\n\014M"
  "odelConfigs\022\204\001\n\036multi_camera_projection_"
  "config\030\001 \001(\0132\\.apollo.perception.traffic"
  "_light.multi_camera_projection_config.Mu"
  "ltiCamerasProjectionConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto = {
    false, false, 666, descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto,
    "modules/perception/proto/traffic_light/multi_camera_projection_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {

// ===================================================================

class CameraFocusConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraFocusConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_extrinsic_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_intrinsic_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CameraFocusConfig::CameraFocusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}
CameraFocusConfig::CameraFocusConfig(const CameraFocusConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.camera_extrinsic_file_){}
    , decltype(_impl_.camera_intrinsic_file_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.camera_extrinsic_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_extrinsic_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_extrinsic_file()) {
    _impl_.camera_extrinsic_file_.Set(from._internal_camera_extrinsic_file(), 
      GetArenaForAllocation());
  }
  _impl_.camera_intrinsic_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_intrinsic_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_intrinsic_file()) {
    _impl_.camera_intrinsic_file_.Set(from._internal_camera_intrinsic_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

inline void CameraFocusConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.camera_extrinsic_file_){}
    , decltype(_impl_.camera_intrinsic_file_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.camera_extrinsic_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_extrinsic_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.camera_intrinsic_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_intrinsic_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraFocusConfig::~CameraFocusConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraFocusConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.camera_extrinsic_file_.Destroy();
  _impl_.camera_intrinsic_file_.Destroy();
}

void CameraFocusConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraFocusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.camera_extrinsic_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.camera_intrinsic_file_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraFocusConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string camera_extrinsic_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_extrinsic_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string camera_intrinsic_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_camera_intrinsic_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraFocusConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string camera_extrinsic_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_extrinsic_file().data(), static_cast<int>(this->_internal_camera_extrinsic_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_extrinsic_file(), target);
  }

  // optional string camera_intrinsic_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_intrinsic_file().data(), static_cast<int>(this->_internal_camera_intrinsic_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_camera_intrinsic_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return target;
}

size_t CameraFocusConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string camera_extrinsic_file = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_extrinsic_file());
    }

    // optional string camera_intrinsic_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_intrinsic_file());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraFocusConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraFocusConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraFocusConfig::GetClassData() const { return &_class_data_; }

void CameraFocusConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraFocusConfig *>(to)->MergeFrom(
      static_cast<const CameraFocusConfig &>(from));
}


void CameraFocusConfig::MergeFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_camera_extrinsic_file(from._internal_camera_extrinsic_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_camera_intrinsic_file(from._internal_camera_intrinsic_file());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraFocusConfig::CopyFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFocusConfig::IsInitialized() const {
  return true;
}

void CameraFocusConfig::InternalSwap(CameraFocusConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_extrinsic_file_, lhs_arena,
      &other->_impl_.camera_extrinsic_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_intrinsic_file_, lhs_arena,
      &other->_impl_.camera_intrinsic_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraFocusConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto[0]);
}

// ===================================================================

class MultiCamerasProjectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiCamerasProjectionConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"MultiCamerasProjection", 22}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_single_projection_{{{"BoundaryProjection", 18}}, {nullptr}};
MultiCamerasProjectionConfig::MultiCamerasProjectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}
MultiCamerasProjectionConfig::MultiCamerasProjectionConfig(const MultiCamerasProjectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_names_){from._impl_.camera_names_}
    , decltype(_impl_.camera_focus_config_){from._impl_.camera_focus_config_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.single_projection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  _impl_.single_projection_.InitDefault();
  if (from._internal_has_single_projection()) {
    _impl_.single_projection_.Set(from._internal_single_projection(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

inline void MultiCamerasProjectionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_names_){arena}
    , decltype(_impl_.camera_focus_config_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.single_projection_){}
  };
  _impl_.name_.InitDefault();
  _impl_.version_.InitDefault();
  _impl_.single_projection_.InitDefault();
}

MultiCamerasProjectionConfig::~MultiCamerasProjectionConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCamerasProjectionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_names_.~RepeatedPtrField();
  _impl_.camera_focus_config_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.single_projection_.Destroy();
}

void MultiCamerasProjectionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCamerasProjectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_names_.Clear();
  _impl_.camera_focus_config_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.single_projection_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_single_projection_, GetArenaForAllocation());
       }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCamerasProjectionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = "MultiCamerasProjection"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2 [default = "1.0.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string single_projection = 3 [default = "BoundaryProjection"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_single_projection();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string camera_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_camera_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_focus_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCamerasProjectionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = "MultiCamerasProjection"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_single_projection().data(), static_cast<int>(this->_internal_single_projection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_single_projection(), target);
  }

  // repeated string camera_names = 4;
  for (int i = 0, n = this->_internal_camera_names_size(); i < n; i++) {
    const auto& s = this->_internal_camera_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_focus_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_focus_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return target;
}

size_t MultiCamerasProjectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string camera_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.camera_names_.size());
  for (int i = 0, n = _impl_.camera_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.camera_names_.Get(i));
  }

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  total_size += 1UL * this->_internal_camera_focus_config_size();
  for (const auto& msg : this->_impl_.camera_focus_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [default = "MultiCamerasProjection"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string single_projection = 3 [default = "BoundaryProjection"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_single_projection());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCamerasProjectionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiCamerasProjectionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCamerasProjectionConfig::GetClassData() const { return &_class_data_; }

void MultiCamerasProjectionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiCamerasProjectionConfig *>(to)->MergeFrom(
      static_cast<const MultiCamerasProjectionConfig &>(from));
}


void MultiCamerasProjectionConfig::MergeFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.camera_names_.MergeFrom(from._impl_.camera_names_);
  _impl_.camera_focus_config_.MergeFrom(from._impl_.camera_focus_config_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_single_projection(from._internal_single_projection());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCamerasProjectionConfig::CopyFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCamerasProjectionConfig::IsInitialized() const {
  return true;
}

void MultiCamerasProjectionConfig::InternalSwap(MultiCamerasProjectionConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.camera_names_.InternalSwap(&other->_impl_.camera_names_);
  _impl_.camera_focus_config_.InternalSwap(&other->_impl_.camera_focus_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.single_projection_, lhs_arena,
      &other->_impl_.single_projection_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCamerasProjectionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto[1]);
}

// ===================================================================

class ModelConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelConfigs>()._impl_._has_bits_);
  static const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& multi_camera_projection_config(const ModelConfigs* msg);
  static void set_has_multi_camera_projection_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig&
ModelConfigs::_Internal::multi_camera_projection_config(const ModelConfigs* msg) {
  return *msg->_impl_.multi_camera_projection_config_;
}
ModelConfigs::ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multi_camera_projection_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_multi_camera_projection_config()) {
    _impl_.multi_camera_projection_config_ = new ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig(*from._impl_.multi_camera_projection_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

inline void ModelConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multi_camera_projection_config_){nullptr}
  };
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.multi_camera_projection_config_;
}

void ModelConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.multi_camera_projection_config_ != nullptr);
    _impl_.multi_camera_projection_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_camera_projection_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::multi_camera_projection_config(this),
        _Internal::multi_camera_projection_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.multi_camera_projection_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigs::GetClassData() const { return &_class_data_; }

void ModelConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelConfigs *>(to)->MergeFrom(
      static_cast<const ModelConfigs &>(from));
}


void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_multi_camera_projection_config()) {
    _internal_mutable_multi_camera_projection_config()->::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::MergeFrom(from._internal_multi_camera_projection_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::InternalSwap(ModelConfigs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.multi_camera_projection_config_, other->_impl_.multi_camera_projection_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
