// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/subnode_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace traffic_light {
namespace subnode_config {
class SubnodeConfig;
struct SubnodeConfigDefaultTypeInternal;
extern SubnodeConfigDefaultTypeInternal _SubnodeConfig_default_instance_;
class TLPreprocessorSubnodeConfig;
struct TLPreprocessorSubnodeConfigDefaultTypeInternal;
extern TLPreprocessorSubnodeConfigDefaultTypeInternal _TLPreprocessorSubnodeConfig_default_instance_;
class TLProcSubnodeConfig;
struct TLProcSubnodeConfigDefaultTypeInternal;
extern TLProcSubnodeConfigDefaultTypeInternal _TLProcSubnodeConfig_default_instance_;
}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::traffic_light::subnode_config::SubnodeConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::subnode_config::SubnodeConfig>(Arena*);
template<> ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig>(Arena*);
template<> ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace traffic_light {
namespace subnode_config {

// ===================================================================

class TLPreprocessorSubnodeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig) */ {
 public:
  inline TLPreprocessorSubnodeConfig() : TLPreprocessorSubnodeConfig(nullptr) {}
  ~TLPreprocessorSubnodeConfig() override;
  explicit PROTOBUF_CONSTEXPR TLPreprocessorSubnodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLPreprocessorSubnodeConfig(const TLPreprocessorSubnodeConfig& from);
  TLPreprocessorSubnodeConfig(TLPreprocessorSubnodeConfig&& from) noexcept
    : TLPreprocessorSubnodeConfig() {
    *this = ::std::move(from);
  }

  inline TLPreprocessorSubnodeConfig& operator=(const TLPreprocessorSubnodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLPreprocessorSubnodeConfig& operator=(TLPreprocessorSubnodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLPreprocessorSubnodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLPreprocessorSubnodeConfig* internal_default_instance() {
    return reinterpret_cast<const TLPreprocessorSubnodeConfig*>(
               &_TLPreprocessorSubnodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TLPreprocessorSubnodeConfig& a, TLPreprocessorSubnodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TLPreprocessorSubnodeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLPreprocessorSubnodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLPreprocessorSubnodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLPreprocessorSubnodeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLPreprocessorSubnodeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TLPreprocessorSubnodeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLPreprocessorSubnodeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig";
  }
  protected:
  explicit TLPreprocessorSubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kQueryTfInvervalSecondsFieldNumber = 5,
    kMaxAheadSecondsFieldNumber = 3,
    kMaxProcessImageFpsFieldNumber = 4,
  };
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  bool has_query_tf_inverval_seconds() const;
  private:
  bool _internal_has_query_tf_inverval_seconds() const;
  public:
  void clear_query_tf_inverval_seconds();
  float query_tf_inverval_seconds() const;
  void set_query_tf_inverval_seconds(float value);
  private:
  float _internal_query_tf_inverval_seconds() const;
  void _internal_set_query_tf_inverval_seconds(float value);
  public:

  // optional float max_ahead_seconds = 3 [default = 0.3];
  bool has_max_ahead_seconds() const;
  private:
  bool _internal_has_max_ahead_seconds() const;
  public:
  void clear_max_ahead_seconds();
  float max_ahead_seconds() const;
  void set_max_ahead_seconds(float value);
  private:
  float _internal_max_ahead_seconds() const;
  void _internal_set_max_ahead_seconds(float value);
  public:

  // optional float max_process_image_fps = 4 [default = 8];
  bool has_max_process_image_fps() const;
  private:
  bool _internal_has_max_process_image_fps() const;
  public:
  void clear_max_process_image_fps();
  float max_process_image_fps() const;
  void set_max_process_image_fps(float value);
  private:
  float _internal_max_process_image_fps() const;
  void _internal_set_max_process_image_fps(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    float query_tf_inverval_seconds_;
    float max_ahead_seconds_;
    float max_process_image_fps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TLProcSubnodeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig) */ {
 public:
  inline TLProcSubnodeConfig() : TLProcSubnodeConfig(nullptr) {}
  ~TLProcSubnodeConfig() override;
  explicit PROTOBUF_CONSTEXPR TLProcSubnodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLProcSubnodeConfig(const TLProcSubnodeConfig& from);
  TLProcSubnodeConfig(TLProcSubnodeConfig&& from) noexcept
    : TLProcSubnodeConfig() {
    *this = ::std::move(from);
  }

  inline TLProcSubnodeConfig& operator=(const TLProcSubnodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLProcSubnodeConfig& operator=(TLProcSubnodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLProcSubnodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLProcSubnodeConfig* internal_default_instance() {
    return reinterpret_cast<const TLProcSubnodeConfig*>(
               &_TLProcSubnodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TLProcSubnodeConfig& a, TLProcSubnodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TLProcSubnodeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLProcSubnodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLProcSubnodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLProcSubnodeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLProcSubnodeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TLProcSubnodeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLProcSubnodeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig";
  }
  protected:
  explicit TLProcSubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kImageBorderFieldNumber = 3,
    kValidTsIntervalFieldNumber = 4,
  };
  // optional string name = 1 [default = "TLProcSubnode"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int32 image_border = 3 [default = 100];
  bool has_image_border() const;
  private:
  bool _internal_has_image_border() const;
  public:
  void clear_image_border();
  int32_t image_border() const;
  void set_image_border(int32_t value);
  private:
  int32_t _internal_image_border() const;
  void _internal_set_image_border(int32_t value);
  public:

  // optional float valid_ts_interval = 4 [default = 0.5];
  bool has_valid_ts_interval() const;
  private:
  bool _internal_has_valid_ts_interval() const;
  public:
  void clear_valid_ts_interval();
  float valid_ts_interval() const;
  void set_valid_ts_interval(float value);
  private:
  float _internal_valid_ts_interval() const;
  void _internal_set_valid_ts_interval(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int32_t image_border_;
    float valid_ts_interval_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SubnodeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.subnode_config.SubnodeConfig) */ {
 public:
  inline SubnodeConfig() : SubnodeConfig(nullptr) {}
  ~SubnodeConfig() override;
  explicit PROTOBUF_CONSTEXPR SubnodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubnodeConfig(const SubnodeConfig& from);
  SubnodeConfig(SubnodeConfig&& from) noexcept
    : SubnodeConfig() {
    *this = ::std::move(from);
  }

  inline SubnodeConfig& operator=(const SubnodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubnodeConfig& operator=(SubnodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubnodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubnodeConfig* internal_default_instance() {
    return reinterpret_cast<const SubnodeConfig*>(
               &_SubnodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubnodeConfig& a, SubnodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SubnodeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubnodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubnodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubnodeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubnodeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubnodeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubnodeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.subnode_config.SubnodeConfig";
  }
  protected:
  explicit SubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlPreprocessorSubnodeConfigFieldNumber = 1,
    kTlProcSubnodeConfigFieldNumber = 2,
  };
  // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  bool has_tl_preprocessor_subnode_config() const;
  private:
  bool _internal_has_tl_preprocessor_subnode_config() const;
  public:
  void clear_tl_preprocessor_subnode_config();
  const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& tl_preprocessor_subnode_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* release_tl_preprocessor_subnode_config();
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* mutable_tl_preprocessor_subnode_config();
  void set_allocated_tl_preprocessor_subnode_config(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config);
  private:
  const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& _internal_tl_preprocessor_subnode_config() const;
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* _internal_mutable_tl_preprocessor_subnode_config();
  public:
  void unsafe_arena_set_allocated_tl_preprocessor_subnode_config(
      ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config);
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* unsafe_arena_release_tl_preprocessor_subnode_config();

  // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  bool has_tl_proc_subnode_config() const;
  private:
  bool _internal_has_tl_proc_subnode_config() const;
  public:
  void clear_tl_proc_subnode_config();
  const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& tl_proc_subnode_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* release_tl_proc_subnode_config();
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* mutable_tl_proc_subnode_config();
  void set_allocated_tl_proc_subnode_config(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config);
  private:
  const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& _internal_tl_proc_subnode_config() const;
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* _internal_mutable_tl_proc_subnode_config();
  public:
  void unsafe_arena_set_allocated_tl_proc_subnode_config(
      ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config);
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* unsafe_arena_release_tl_proc_subnode_config();

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config_;
    ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TLPreprocessorSubnodeConfig

// optional string name = 1 [default = "TLPreprocessorSubnode"];
inline bool TLPreprocessorSubnodeConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TLPreprocessorSubnodeConfig::has_name() const {
  return _internal_has_name();
}
inline void TLPreprocessorSubnodeConfig::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TLPreprocessorSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLPreprocessorSubnodeConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
inline std::string* TLPreprocessorSubnodeConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  return _s;
}
inline const std::string& TLPreprocessorSubnodeConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TLPreprocessorSubnodeConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TLPreprocessorSubnodeConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* TLPreprocessorSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void TLPreprocessorSubnodeConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool TLPreprocessorSubnodeConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TLPreprocessorSubnodeConfig::has_version() const {
  return _internal_has_version();
}
inline void TLPreprocessorSubnodeConfig::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TLPreprocessorSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLPreprocessorSubnodeConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
inline std::string* TLPreprocessorSubnodeConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  return _s;
}
inline const std::string& TLPreprocessorSubnodeConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void TLPreprocessorSubnodeConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* TLPreprocessorSubnodeConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* TLPreprocessorSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void TLPreprocessorSubnodeConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}

// optional float max_ahead_seconds = 3 [default = 0.3];
inline bool TLPreprocessorSubnodeConfig::_internal_has_max_ahead_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TLPreprocessorSubnodeConfig::has_max_ahead_seconds() const {
  return _internal_has_max_ahead_seconds();
}
inline void TLPreprocessorSubnodeConfig::clear_max_ahead_seconds() {
  _impl_.max_ahead_seconds_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TLPreprocessorSubnodeConfig::_internal_max_ahead_seconds() const {
  return _impl_.max_ahead_seconds_;
}
inline float TLPreprocessorSubnodeConfig::max_ahead_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
  return _internal_max_ahead_seconds();
}
inline void TLPreprocessorSubnodeConfig::_internal_set_max_ahead_seconds(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_ahead_seconds_ = value;
}
inline void TLPreprocessorSubnodeConfig::set_max_ahead_seconds(float value) {
  _internal_set_max_ahead_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
}

// optional float max_process_image_fps = 4 [default = 8];
inline bool TLPreprocessorSubnodeConfig::_internal_has_max_process_image_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TLPreprocessorSubnodeConfig::has_max_process_image_fps() const {
  return _internal_has_max_process_image_fps();
}
inline void TLPreprocessorSubnodeConfig::clear_max_process_image_fps() {
  _impl_.max_process_image_fps_ = 8;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float TLPreprocessorSubnodeConfig::_internal_max_process_image_fps() const {
  return _impl_.max_process_image_fps_;
}
inline float TLPreprocessorSubnodeConfig::max_process_image_fps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
  return _internal_max_process_image_fps();
}
inline void TLPreprocessorSubnodeConfig::_internal_set_max_process_image_fps(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_process_image_fps_ = value;
}
inline void TLPreprocessorSubnodeConfig::set_max_process_image_fps(float value) {
  _internal_set_max_process_image_fps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
}

// optional float query_tf_inverval_seconds = 5 [default = 0.2];
inline bool TLPreprocessorSubnodeConfig::_internal_has_query_tf_inverval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TLPreprocessorSubnodeConfig::has_query_tf_inverval_seconds() const {
  return _internal_has_query_tf_inverval_seconds();
}
inline void TLPreprocessorSubnodeConfig::clear_query_tf_inverval_seconds() {
  _impl_.query_tf_inverval_seconds_ = 0.2f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float TLPreprocessorSubnodeConfig::_internal_query_tf_inverval_seconds() const {
  return _impl_.query_tf_inverval_seconds_;
}
inline float TLPreprocessorSubnodeConfig::query_tf_inverval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
  return _internal_query_tf_inverval_seconds();
}
inline void TLPreprocessorSubnodeConfig::_internal_set_query_tf_inverval_seconds(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.query_tf_inverval_seconds_ = value;
}
inline void TLPreprocessorSubnodeConfig::set_query_tf_inverval_seconds(float value) {
  _internal_set_query_tf_inverval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
}

// -------------------------------------------------------------------

// TLProcSubnodeConfig

// optional string name = 1 [default = "TLProcSubnode"];
inline bool TLProcSubnodeConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TLProcSubnodeConfig::has_name() const {
  return _internal_has_name();
}
inline void TLProcSubnodeConfig::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TLProcSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLProcSubnodeConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
inline std::string* TLProcSubnodeConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  return _s;
}
inline const std::string& TLProcSubnodeConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TLProcSubnodeConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TLProcSubnodeConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* TLProcSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void TLProcSubnodeConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool TLProcSubnodeConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TLProcSubnodeConfig::has_version() const {
  return _internal_has_version();
}
inline void TLProcSubnodeConfig::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TLProcSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLProcSubnodeConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
inline std::string* TLProcSubnodeConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  return _s;
}
inline const std::string& TLProcSubnodeConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void TLProcSubnodeConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* TLProcSubnodeConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* TLProcSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void TLProcSubnodeConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}

// optional int32 image_border = 3 [default = 100];
inline bool TLProcSubnodeConfig::_internal_has_image_border() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TLProcSubnodeConfig::has_image_border() const {
  return _internal_has_image_border();
}
inline void TLProcSubnodeConfig::clear_image_border() {
  _impl_.image_border_ = 100;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t TLProcSubnodeConfig::_internal_image_border() const {
  return _impl_.image_border_;
}
inline int32_t TLProcSubnodeConfig::image_border() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
  return _internal_image_border();
}
inline void TLProcSubnodeConfig::_internal_set_image_border(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.image_border_ = value;
}
inline void TLProcSubnodeConfig::set_image_border(int32_t value) {
  _internal_set_image_border(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
}

// optional float valid_ts_interval = 4 [default = 0.5];
inline bool TLProcSubnodeConfig::_internal_has_valid_ts_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TLProcSubnodeConfig::has_valid_ts_interval() const {
  return _internal_has_valid_ts_interval();
}
inline void TLProcSubnodeConfig::clear_valid_ts_interval() {
  _impl_.valid_ts_interval_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TLProcSubnodeConfig::_internal_valid_ts_interval() const {
  return _impl_.valid_ts_interval_;
}
inline float TLProcSubnodeConfig::valid_ts_interval() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
  return _internal_valid_ts_interval();
}
inline void TLProcSubnodeConfig::_internal_set_valid_ts_interval(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.valid_ts_interval_ = value;
}
inline void TLProcSubnodeConfig::set_valid_ts_interval(float value) {
  _internal_set_valid_ts_interval(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
}

// -------------------------------------------------------------------

// SubnodeConfig

// optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
inline bool SubnodeConfig::_internal_has_tl_preprocessor_subnode_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tl_preprocessor_subnode_config_ != nullptr);
  return value;
}
inline bool SubnodeConfig::has_tl_preprocessor_subnode_config() const {
  return _internal_has_tl_preprocessor_subnode_config();
}
inline void SubnodeConfig::clear_tl_preprocessor_subnode_config() {
  if (_impl_.tl_preprocessor_subnode_config_ != nullptr) _impl_.tl_preprocessor_subnode_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& SubnodeConfig::_internal_tl_preprocessor_subnode_config() const {
  const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* p = _impl_.tl_preprocessor_subnode_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig&>(
      ::apollo::perception::traffic_light::subnode_config::_TLPreprocessorSubnodeConfig_default_instance_);
}
inline const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& SubnodeConfig::tl_preprocessor_subnode_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return _internal_tl_preprocessor_subnode_config();
}
inline void SubnodeConfig::unsafe_arena_set_allocated_tl_preprocessor_subnode_config(
    ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tl_preprocessor_subnode_config_);
  }
  _impl_.tl_preprocessor_subnode_config_ = tl_preprocessor_subnode_config;
  if (tl_preprocessor_subnode_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
}
inline ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::release_tl_preprocessor_subnode_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* temp = _impl_.tl_preprocessor_subnode_config_;
  _impl_.tl_preprocessor_subnode_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::unsafe_arena_release_tl_preprocessor_subnode_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* temp = _impl_.tl_preprocessor_subnode_config_;
  _impl_.tl_preprocessor_subnode_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::_internal_mutable_tl_preprocessor_subnode_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tl_preprocessor_subnode_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig>(GetArenaForAllocation());
    _impl_.tl_preprocessor_subnode_config_ = p;
  }
  return _impl_.tl_preprocessor_subnode_config_;
}
inline ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::mutable_tl_preprocessor_subnode_config() {
  ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* _msg = _internal_mutable_tl_preprocessor_subnode_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return _msg;
}
inline void SubnodeConfig::set_allocated_tl_preprocessor_subnode_config(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tl_preprocessor_subnode_config_;
  }
  if (tl_preprocessor_subnode_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tl_preprocessor_subnode_config);
    if (message_arena != submessage_arena) {
      tl_preprocessor_subnode_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tl_preprocessor_subnode_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tl_preprocessor_subnode_config_ = tl_preprocessor_subnode_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
}

// optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
inline bool SubnodeConfig::_internal_has_tl_proc_subnode_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tl_proc_subnode_config_ != nullptr);
  return value;
}
inline bool SubnodeConfig::has_tl_proc_subnode_config() const {
  return _internal_has_tl_proc_subnode_config();
}
inline void SubnodeConfig::clear_tl_proc_subnode_config() {
  if (_impl_.tl_proc_subnode_config_ != nullptr) _impl_.tl_proc_subnode_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& SubnodeConfig::_internal_tl_proc_subnode_config() const {
  const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* p = _impl_.tl_proc_subnode_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig&>(
      ::apollo::perception::traffic_light::subnode_config::_TLProcSubnodeConfig_default_instance_);
}
inline const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& SubnodeConfig::tl_proc_subnode_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return _internal_tl_proc_subnode_config();
}
inline void SubnodeConfig::unsafe_arena_set_allocated_tl_proc_subnode_config(
    ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tl_proc_subnode_config_);
  }
  _impl_.tl_proc_subnode_config_ = tl_proc_subnode_config;
  if (tl_proc_subnode_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
}
inline ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::release_tl_proc_subnode_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* temp = _impl_.tl_proc_subnode_config_;
  _impl_.tl_proc_subnode_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::unsafe_arena_release_tl_proc_subnode_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* temp = _impl_.tl_proc_subnode_config_;
  _impl_.tl_proc_subnode_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::_internal_mutable_tl_proc_subnode_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tl_proc_subnode_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig>(GetArenaForAllocation());
    _impl_.tl_proc_subnode_config_ = p;
  }
  return _impl_.tl_proc_subnode_config_;
}
inline ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::mutable_tl_proc_subnode_config() {
  ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* _msg = _internal_mutable_tl_proc_subnode_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return _msg;
}
inline void SubnodeConfig::set_allocated_tl_proc_subnode_config(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tl_proc_subnode_config_;
  }
  if (tl_proc_subnode_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tl_proc_subnode_config);
    if (message_arena != submessage_arena) {
      tl_proc_subnode_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tl_proc_subnode_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tl_proc_subnode_config_ = tl_proc_subnode_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto
