// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/reviser_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace traffic_light {
namespace reviser_config {
class ColorReviserConfig;
struct ColorReviserConfigDefaultTypeInternal;
extern ColorReviserConfigDefaultTypeInternal _ColorReviserConfig_default_instance_;
class HMMReviserConfig;
struct HMMReviserConfigDefaultTypeInternal;
extern HMMReviserConfigDefaultTypeInternal _HMMReviserConfig_default_instance_;
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::reviser_config::ColorReviserConfig>(Arena*);
template<> ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::reviser_config::HMMReviserConfig>(Arena*);
template<> ::apollo::perception::traffic_light::reviser_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::reviser_config::ModelConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace traffic_light {
namespace reviser_config {

// ===================================================================

class HMMReviserConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.reviser_config.HMMReviserConfig) */ {
 public:
  inline HMMReviserConfig() : HMMReviserConfig(nullptr) {}
  ~HMMReviserConfig() override;
  explicit PROTOBUF_CONSTEXPR HMMReviserConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMMReviserConfig(const HMMReviserConfig& from);
  HMMReviserConfig(HMMReviserConfig&& from) noexcept
    : HMMReviserConfig() {
    *this = ::std::move(from);
  }

  inline HMMReviserConfig& operator=(const HMMReviserConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMMReviserConfig& operator=(HMMReviserConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HMMReviserConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMMReviserConfig* internal_default_instance() {
    return reinterpret_cast<const HMMReviserConfig*>(
               &_HMMReviserConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HMMReviserConfig& a, HMMReviserConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HMMReviserConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMMReviserConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HMMReviserConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HMMReviserConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HMMReviserConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HMMReviserConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMMReviserConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.reviser_config.HMMReviserConfig";
  }
  protected:
  explicit HMMReviserConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kParamFileFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string param_file = 3;
  bool has_param_file() const;
  private:
  bool _internal_has_param_file() const;
  public:
  void clear_param_file();
  const std::string& param_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_file();
  PROTOBUF_NODISCARD std::string* release_param_file();
  void set_allocated_param_file(std::string* param_file);
  private:
  const std::string& _internal_param_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_file(const std::string& value);
  std::string* _internal_mutable_param_file();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_file_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ColorReviserConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.reviser_config.ColorReviserConfig) */ {
 public:
  inline ColorReviserConfig() : ColorReviserConfig(nullptr) {}
  ~ColorReviserConfig() override;
  explicit PROTOBUF_CONSTEXPR ColorReviserConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorReviserConfig(const ColorReviserConfig& from);
  ColorReviserConfig(ColorReviserConfig&& from) noexcept
    : ColorReviserConfig() {
    *this = ::std::move(from);
  }

  inline ColorReviserConfig& operator=(const ColorReviserConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorReviserConfig& operator=(ColorReviserConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorReviserConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorReviserConfig* internal_default_instance() {
    return reinterpret_cast<const ColorReviserConfig*>(
               &_ColorReviserConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorReviserConfig& a, ColorReviserConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorReviserConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorReviserConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorReviserConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorReviserConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorReviserConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorReviserConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorReviserConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.reviser_config.ColorReviserConfig";
  }
  protected:
  explicit ColorReviserConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kEnableFieldNumber = 3,
    kBlinkTimeFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int32 enable = 3;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  int32_t enable() const;
  void set_enable(int32_t value);
  private:
  int32_t _internal_enable() const;
  void _internal_set_enable(int32_t value);
  public:

  // optional float blink_time = 4;
  bool has_blink_time() const;
  private:
  bool _internal_has_blink_time() const;
  public:
  void clear_blink_time();
  float blink_time() const;
  void set_blink_time(float value);
  private:
  float _internal_blink_time() const;
  void _internal_set_blink_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int32_t enable_;
    float blink_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.reviser_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.reviser_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHmmReviserConfigFieldNumber = 1,
    kColorReviserConfigFieldNumber = 2,
  };
  // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  bool has_hmm_reviser_config() const;
  private:
  bool _internal_has_hmm_reviser_config() const;
  public:
  void clear_hmm_reviser_config();
  const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& hmm_reviser_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* release_hmm_reviser_config();
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* mutable_hmm_reviser_config();
  void set_allocated_hmm_reviser_config(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config);
  private:
  const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& _internal_hmm_reviser_config() const;
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* _internal_mutable_hmm_reviser_config();
  public:
  void unsafe_arena_set_allocated_hmm_reviser_config(
      ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config);
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* unsafe_arena_release_hmm_reviser_config();

  // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  bool has_color_reviser_config() const;
  private:
  bool _internal_has_color_reviser_config() const;
  public:
  void clear_color_reviser_config();
  const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& color_reviser_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* release_color_reviser_config();
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* mutable_color_reviser_config();
  void set_allocated_color_reviser_config(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config);
  private:
  const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& _internal_color_reviser_config() const;
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* _internal_mutable_color_reviser_config();
  public:
  void unsafe_arena_set_allocated_color_reviser_config(
      ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config);
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* unsafe_arena_release_color_reviser_config();

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.reviser_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config_;
    ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HMMReviserConfig

// optional string name = 1;
inline bool HMMReviserConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMMReviserConfig::has_name() const {
  return _internal_has_name();
}
inline void HMMReviserConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HMMReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMMReviserConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
inline std::string* HMMReviserConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return _s;
}
inline const std::string& HMMReviserConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HMMReviserConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMMReviserConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}

// optional string version = 2;
inline bool HMMReviserConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HMMReviserConfig::has_version() const {
  return _internal_has_version();
}
inline void HMMReviserConfig::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HMMReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMMReviserConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
inline std::string* HMMReviserConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return _s;
}
inline const std::string& HMMReviserConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void HMMReviserConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMMReviserConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}

// optional string param_file = 3;
inline bool HMMReviserConfig::_internal_has_param_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMMReviserConfig::has_param_file() const {
  return _internal_has_param_file();
}
inline void HMMReviserConfig::clear_param_file() {
  _impl_.param_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HMMReviserConfig::param_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return _internal_param_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HMMReviserConfig::set_param_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.param_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
inline std::string* HMMReviserConfig::mutable_param_file() {
  std::string* _s = _internal_mutable_param_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return _s;
}
inline const std::string& HMMReviserConfig::_internal_param_file() const {
  return _impl_.param_file_.Get();
}
inline void HMMReviserConfig::_internal_set_param_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_file_.Set(value, GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::_internal_mutable_param_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.param_file_.Mutable(GetArenaForAllocation());
}
inline std::string* HMMReviserConfig::release_param_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  if (!_internal_has_param_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.param_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_file_.IsDefault()) {
    _impl_.param_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HMMReviserConfig::set_allocated_param_file(std::string* param_file) {
  if (param_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.param_file_.SetAllocated(param_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_file_.IsDefault()) {
    _impl_.param_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}

// -------------------------------------------------------------------

// ColorReviserConfig

// optional string name = 1;
inline bool ColorReviserConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorReviserConfig::has_name() const {
  return _internal_has_name();
}
inline void ColorReviserConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColorReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorReviserConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
inline std::string* ColorReviserConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return _s;
}
inline const std::string& ColorReviserConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ColorReviserConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorReviserConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColorReviserConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}

// optional string version = 2;
inline bool ColorReviserConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorReviserConfig::has_version() const {
  return _internal_has_version();
}
inline void ColorReviserConfig::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ColorReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorReviserConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
inline std::string* ColorReviserConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return _s;
}
inline const std::string& ColorReviserConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ColorReviserConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorReviserConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColorReviserConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}

// optional int32 enable = 3;
inline bool ColorReviserConfig::_internal_has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColorReviserConfig::has_enable() const {
  return _internal_has_enable();
}
inline void ColorReviserConfig::clear_enable() {
  _impl_.enable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ColorReviserConfig::_internal_enable() const {
  return _impl_.enable_;
}
inline int32_t ColorReviserConfig::enable() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
  return _internal_enable();
}
inline void ColorReviserConfig::_internal_set_enable(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enable_ = value;
}
inline void ColorReviserConfig::set_enable(int32_t value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
}

// optional float blink_time = 4;
inline bool ColorReviserConfig::_internal_has_blink_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColorReviserConfig::has_blink_time() const {
  return _internal_has_blink_time();
}
inline void ColorReviserConfig::clear_blink_time() {
  _impl_.blink_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ColorReviserConfig::_internal_blink_time() const {
  return _impl_.blink_time_;
}
inline float ColorReviserConfig::blink_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
  return _internal_blink_time();
}
inline void ColorReviserConfig::_internal_set_blink_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blink_time_ = value;
}
inline void ColorReviserConfig::set_blink_time(float value) {
  _internal_set_blink_time(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
}

// -------------------------------------------------------------------

// ModelConfigs

// optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
inline bool ModelConfigs::_internal_has_hmm_reviser_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hmm_reviser_config_ != nullptr);
  return value;
}
inline bool ModelConfigs::has_hmm_reviser_config() const {
  return _internal_has_hmm_reviser_config();
}
inline void ModelConfigs::clear_hmm_reviser_config() {
  if (_impl_.hmm_reviser_config_ != nullptr) _impl_.hmm_reviser_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& ModelConfigs::_internal_hmm_reviser_config() const {
  const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* p = _impl_.hmm_reviser_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig&>(
      ::apollo::perception::traffic_light::reviser_config::_HMMReviserConfig_default_instance_);
}
inline const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& ModelConfigs::hmm_reviser_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return _internal_hmm_reviser_config();
}
inline void ModelConfigs::unsafe_arena_set_allocated_hmm_reviser_config(
    ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hmm_reviser_config_);
  }
  _impl_.hmm_reviser_config_ = hmm_reviser_config;
  if (hmm_reviser_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
}
inline ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::release_hmm_reviser_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* temp = _impl_.hmm_reviser_config_;
  _impl_.hmm_reviser_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::unsafe_arena_release_hmm_reviser_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* temp = _impl_.hmm_reviser_config_;
  _impl_.hmm_reviser_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::_internal_mutable_hmm_reviser_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.hmm_reviser_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::traffic_light::reviser_config::HMMReviserConfig>(GetArenaForAllocation());
    _impl_.hmm_reviser_config_ = p;
  }
  return _impl_.hmm_reviser_config_;
}
inline ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::mutable_hmm_reviser_config() {
  ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* _msg = _internal_mutable_hmm_reviser_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return _msg;
}
inline void ModelConfigs::set_allocated_hmm_reviser_config(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hmm_reviser_config_;
  }
  if (hmm_reviser_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hmm_reviser_config);
    if (message_arena != submessage_arena) {
      hmm_reviser_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hmm_reviser_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hmm_reviser_config_ = hmm_reviser_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
}

// optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
inline bool ModelConfigs::_internal_has_color_reviser_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_reviser_config_ != nullptr);
  return value;
}
inline bool ModelConfigs::has_color_reviser_config() const {
  return _internal_has_color_reviser_config();
}
inline void ModelConfigs::clear_color_reviser_config() {
  if (_impl_.color_reviser_config_ != nullptr) _impl_.color_reviser_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& ModelConfigs::_internal_color_reviser_config() const {
  const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* p = _impl_.color_reviser_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig&>(
      ::apollo::perception::traffic_light::reviser_config::_ColorReviserConfig_default_instance_);
}
inline const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& ModelConfigs::color_reviser_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return _internal_color_reviser_config();
}
inline void ModelConfigs::unsafe_arena_set_allocated_color_reviser_config(
    ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_reviser_config_);
  }
  _impl_.color_reviser_config_ = color_reviser_config;
  if (color_reviser_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
}
inline ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::release_color_reviser_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* temp = _impl_.color_reviser_config_;
  _impl_.color_reviser_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::unsafe_arena_release_color_reviser_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* temp = _impl_.color_reviser_config_;
  _impl_.color_reviser_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::_internal_mutable_color_reviser_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.color_reviser_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::traffic_light::reviser_config::ColorReviserConfig>(GetArenaForAllocation());
    _impl_.color_reviser_config_ = p;
  }
  return _impl_.color_reviser_config_;
}
inline ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::mutable_color_reviser_config() {
  ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* _msg = _internal_mutable_color_reviser_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return _msg;
}
inline void ModelConfigs::set_allocated_color_reviser_config(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_reviser_config_;
  }
  if (color_reviser_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color_reviser_config);
    if (message_arena != submessage_arena) {
      color_reviser_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_reviser_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.color_reviser_config_ = color_reviser_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto
