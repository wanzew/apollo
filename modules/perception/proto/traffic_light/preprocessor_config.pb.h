// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/preprocessor_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace traffic_light {
namespace preprocessor_config {
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace preprocessor_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::traffic_light::preprocessor_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::preprocessor_config::ModelConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace traffic_light {
namespace preprocessor_config {

// ===================================================================

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.preprocessor_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.preprocessor_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kNoSignalsIntervalSecondsFieldNumber = 7,
    kMaxCachedLightsSizeFieldNumber = 3,
    kProjectionImageColsFieldNumber = 4,
    kProjectionImageRowsFieldNumber = 5,
    kSyncIntervalSecondsFieldNumber = 6,
  };
  // optional string name = 1 [default = "TLPreprocessor"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional float no_signals_interval_seconds = 7 [default = 0.5];
  bool has_no_signals_interval_seconds() const;
  private:
  bool _internal_has_no_signals_interval_seconds() const;
  public:
  void clear_no_signals_interval_seconds();
  float no_signals_interval_seconds() const;
  void set_no_signals_interval_seconds(float value);
  private:
  float _internal_no_signals_interval_seconds() const;
  void _internal_set_no_signals_interval_seconds(float value);
  public:

  // optional int32 max_cached_lights_size = 3 [default = 100];
  bool has_max_cached_lights_size() const;
  private:
  bool _internal_has_max_cached_lights_size() const;
  public:
  void clear_max_cached_lights_size();
  int32_t max_cached_lights_size() const;
  void set_max_cached_lights_size(int32_t value);
  private:
  int32_t _internal_max_cached_lights_size() const;
  void _internal_set_max_cached_lights_size(int32_t value);
  public:

  // optional int32 projection_image_cols = 4 [default = 1920];
  bool has_projection_image_cols() const;
  private:
  bool _internal_has_projection_image_cols() const;
  public:
  void clear_projection_image_cols();
  int32_t projection_image_cols() const;
  void set_projection_image_cols(int32_t value);
  private:
  int32_t _internal_projection_image_cols() const;
  void _internal_set_projection_image_cols(int32_t value);
  public:

  // optional int32 projection_image_rows = 5 [default = 1080];
  bool has_projection_image_rows() const;
  private:
  bool _internal_has_projection_image_rows() const;
  public:
  void clear_projection_image_rows();
  int32_t projection_image_rows() const;
  void set_projection_image_rows(int32_t value);
  private:
  int32_t _internal_projection_image_rows() const;
  void _internal_set_projection_image_rows(int32_t value);
  public:

  // optional float sync_interval_seconds = 6 [default = 0.1];
  bool has_sync_interval_seconds() const;
  private:
  bool _internal_has_sync_interval_seconds() const;
  public:
  void clear_sync_interval_seconds();
  float sync_interval_seconds() const;
  void set_sync_interval_seconds(float value);
  private:
  float _internal_sync_interval_seconds() const;
  void _internal_set_sync_interval_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.preprocessor_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    float no_signals_interval_seconds_;
    int32_t max_cached_lights_size_;
    int32_t projection_image_cols_;
    int32_t projection_image_rows_;
    float sync_interval_seconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConfigs

// optional string name = 1 [default = "TLPreprocessor"];
inline bool ModelConfigs::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelConfigs::has_name() const {
  return _internal_has_name();
}
inline void ModelConfigs::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::preprocessor_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}
inline std::string* ModelConfigs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  return _s;
}
inline const std::string& ModelConfigs::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModelConfigs::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::traffic_light::preprocessor_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool ModelConfigs::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelConfigs::has_version() const {
  return _internal_has_version();
}
inline void ModelConfigs::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::preprocessor_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConfigs::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}
inline std::string* ModelConfigs::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  return _s;
}
inline const std::string& ModelConfigs::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ModelConfigs::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelConfigs::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::traffic_light::preprocessor_config::ModelConfigs::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void ModelConfigs::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}

// optional int32 max_cached_lights_size = 3 [default = 100];
inline bool ModelConfigs::_internal_has_max_cached_lights_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelConfigs::has_max_cached_lights_size() const {
  return _internal_has_max_cached_lights_size();
}
inline void ModelConfigs::clear_max_cached_lights_size() {
  _impl_.max_cached_lights_size_ = 100;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ModelConfigs::_internal_max_cached_lights_size() const {
  return _impl_.max_cached_lights_size_;
}
inline int32_t ModelConfigs::max_cached_lights_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.max_cached_lights_size)
  return _internal_max_cached_lights_size();
}
inline void ModelConfigs::_internal_set_max_cached_lights_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_cached_lights_size_ = value;
}
inline void ModelConfigs::set_max_cached_lights_size(int32_t value) {
  _internal_set_max_cached_lights_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.max_cached_lights_size)
}

// optional int32 projection_image_cols = 4 [default = 1920];
inline bool ModelConfigs::_internal_has_projection_image_cols() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelConfigs::has_projection_image_cols() const {
  return _internal_has_projection_image_cols();
}
inline void ModelConfigs::clear_projection_image_cols() {
  _impl_.projection_image_cols_ = 1920;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ModelConfigs::_internal_projection_image_cols() const {
  return _impl_.projection_image_cols_;
}
inline int32_t ModelConfigs::projection_image_cols() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_cols)
  return _internal_projection_image_cols();
}
inline void ModelConfigs::_internal_set_projection_image_cols(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.projection_image_cols_ = value;
}
inline void ModelConfigs::set_projection_image_cols(int32_t value) {
  _internal_set_projection_image_cols(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_cols)
}

// optional int32 projection_image_rows = 5 [default = 1080];
inline bool ModelConfigs::_internal_has_projection_image_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelConfigs::has_projection_image_rows() const {
  return _internal_has_projection_image_rows();
}
inline void ModelConfigs::clear_projection_image_rows() {
  _impl_.projection_image_rows_ = 1080;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ModelConfigs::_internal_projection_image_rows() const {
  return _impl_.projection_image_rows_;
}
inline int32_t ModelConfigs::projection_image_rows() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_rows)
  return _internal_projection_image_rows();
}
inline void ModelConfigs::_internal_set_projection_image_rows(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.projection_image_rows_ = value;
}
inline void ModelConfigs::set_projection_image_rows(int32_t value) {
  _internal_set_projection_image_rows(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_rows)
}

// optional float sync_interval_seconds = 6 [default = 0.1];
inline bool ModelConfigs::_internal_has_sync_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelConfigs::has_sync_interval_seconds() const {
  return _internal_has_sync_interval_seconds();
}
inline void ModelConfigs::clear_sync_interval_seconds() {
  _impl_.sync_interval_seconds_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ModelConfigs::_internal_sync_interval_seconds() const {
  return _impl_.sync_interval_seconds_;
}
inline float ModelConfigs::sync_interval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.sync_interval_seconds)
  return _internal_sync_interval_seconds();
}
inline void ModelConfigs::_internal_set_sync_interval_seconds(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sync_interval_seconds_ = value;
}
inline void ModelConfigs::set_sync_interval_seconds(float value) {
  _internal_set_sync_interval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.sync_interval_seconds)
}

// optional float no_signals_interval_seconds = 7 [default = 0.5];
inline bool ModelConfigs::_internal_has_no_signals_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelConfigs::has_no_signals_interval_seconds() const {
  return _internal_has_no_signals_interval_seconds();
}
inline void ModelConfigs::clear_no_signals_interval_seconds() {
  _impl_.no_signals_interval_seconds_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ModelConfigs::_internal_no_signals_interval_seconds() const {
  return _impl_.no_signals_interval_seconds_;
}
inline float ModelConfigs::no_signals_interval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.no_signals_interval_seconds)
  return _internal_no_signals_interval_seconds();
}
inline void ModelConfigs::_internal_set_no_signals_interval_seconds(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.no_signals_interval_seconds_ = value;
}
inline void ModelConfigs::set_no_signals_interval_seconds(float value) {
  _internal_set_no_signals_interval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.preprocessor_config.ModelConfigs.no_signals_interval_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace preprocessor_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto
