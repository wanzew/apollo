// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/reviser_config.proto

#include "modules/perception/proto/traffic_light/reviser_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace traffic_light {
namespace reviser_config {
PROTOBUF_CONSTEXPR HMMReviserConfig::HMMReviserConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HMMReviserConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HMMReviserConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HMMReviserConfigDefaultTypeInternal() {}
  union {
    HMMReviserConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HMMReviserConfigDefaultTypeInternal _HMMReviserConfig_default_instance_;
PROTOBUF_CONSTEXPR ColorReviserConfig::ColorReviserConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_.blink_time_)*/0} {}
struct ColorReviserConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorReviserConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorReviserConfigDefaultTypeInternal() {}
  union {
    ColorReviserConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorReviserConfigDefaultTypeInternal _ColorReviserConfig_default_instance_;
PROTOBUF_CONSTEXPR ModelConfigs::ModelConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hmm_reviser_config_)*/nullptr
  , /*decltype(_impl_.color_reviser_config_)*/nullptr} {}
struct ModelConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelConfigsDefaultTypeInternal() {}
  union {
    ModelConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig, _impl_.param_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig, _impl_.blink_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ModelConfigs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ModelConfigs, _impl_.hmm_reviser_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::reviser_config::ModelConfigs, _impl_.color_reviser_config_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::traffic_light::reviser_config::HMMReviserConfig)},
  { 12, 22, -1, sizeof(::apollo::perception::traffic_light::reviser_config::ColorReviserConfig)},
  { 26, 34, -1, sizeof(::apollo::perception::traffic_light::reviser_config::ModelConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::traffic_light::reviser_config::_HMMReviserConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::reviser_config::_ColorReviserConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::reviser_config::_ModelConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/perception/proto/traffic_light"
  "/reviser_config.proto\022.apollo.perception"
  ".traffic_light.reviser_config\"E\n\020HMMRevi"
  "serConfig\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t"
  "\022\022\n\nparam_file\030\003 \001(\t\"W\n\022ColorReviserConf"
  "ig\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\016\n\006ena"
  "ble\030\003 \001(\005\022\022\n\nblink_time\030\004 \001(\002\"\316\001\n\014ModelC"
  "onfigs\022\\\n\022hmm_reviser_config\030\001 \001(\0132@.apo"
  "llo.perception.traffic_light.reviser_con"
  "fig.HMMReviserConfig\022`\n\024color_reviser_co"
  "nfig\030\002 \001(\0132B.apollo.perception.traffic_l"
  "ight.reviser_config.ColorReviserConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto = {
    false, false, 478, descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto,
    "modules/perception/proto/traffic_light/reviser_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace traffic_light {
namespace reviser_config {

// ===================================================================

class HMMReviserConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HMMReviserConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HMMReviserConfig::HMMReviserConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
}
HMMReviserConfig::HMMReviserConfig(const HMMReviserConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.param_file_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  _impl_.param_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_param_file()) {
    _impl_.param_file_.Set(from._internal_param_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
}

inline void HMMReviserConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.param_file_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HMMReviserConfig::~HMMReviserConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HMMReviserConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.param_file_.Destroy();
}

void HMMReviserConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HMMReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.param_file_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMMReviserConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string param_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_param_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HMMReviserConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string param_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param_file().data(), static_cast<int>(this->_internal_param_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  return target;
}

size_t HMMReviserConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string param_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param_file());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HMMReviserConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HMMReviserConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HMMReviserConfig::GetClassData() const { return &_class_data_; }

void HMMReviserConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HMMReviserConfig *>(to)->MergeFrom(
      static_cast<const HMMReviserConfig &>(from));
}


void HMMReviserConfig::MergeFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param_file(from._internal_param_file());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HMMReviserConfig::CopyFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMMReviserConfig::IsInitialized() const {
  return true;
}

void HMMReviserConfig::InternalSwap(HMMReviserConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_file_, lhs_arena,
      &other->_impl_.param_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HMMReviserConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto[0]);
}

// ===================================================================

class ColorReviserConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorReviserConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blink_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColorReviserConfig::ColorReviserConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
}
ColorReviserConfig::ColorReviserConfig(const ColorReviserConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.blink_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enable_, &from._impl_.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blink_time_) -
    reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.blink_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
}

inline void ColorReviserConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.enable_){0}
    , decltype(_impl_.blink_time_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColorReviserConfig::~ColorReviserConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorReviserConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void ColorReviserConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColorReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.blink_time_) -
        reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.blink_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorReviserConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float blink_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_blink_time(&has_bits);
          _impl_.blink_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorReviserConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.reviser_config.ColorReviserConfig.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional int32 enable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_enable(), target);
  }

  // optional float blink_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_blink_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  return target;
}

size_t ColorReviserConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional int32 enable = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
    }

    // optional float blink_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorReviserConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorReviserConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorReviserConfig::GetClassData() const { return &_class_data_; }

void ColorReviserConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorReviserConfig *>(to)->MergeFrom(
      static_cast<const ColorReviserConfig &>(from));
}


void ColorReviserConfig::MergeFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.blink_time_ = from._impl_.blink_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorReviserConfig::CopyFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorReviserConfig::IsInitialized() const {
  return true;
}

void ColorReviserConfig::InternalSwap(ColorReviserConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorReviserConfig, _impl_.blink_time_)
      + sizeof(ColorReviserConfig::_impl_.blink_time_)
      - PROTOBUF_FIELD_OFFSET(ColorReviserConfig, _impl_.enable_)>(
          reinterpret_cast<char*>(&_impl_.enable_),
          reinterpret_cast<char*>(&other->_impl_.enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorReviserConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto[1]);
}

// ===================================================================

class ModelConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelConfigs>()._impl_._has_bits_);
  static const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig& hmm_reviser_config(const ModelConfigs* msg);
  static void set_has_hmm_reviser_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig& color_reviser_config(const ModelConfigs* msg);
  static void set_has_color_reviser_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig&
ModelConfigs::_Internal::hmm_reviser_config(const ModelConfigs* msg) {
  return *msg->_impl_.hmm_reviser_config_;
}
const ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig&
ModelConfigs::_Internal::color_reviser_config(const ModelConfigs* msg) {
  return *msg->_impl_.color_reviser_config_;
}
ModelConfigs::ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hmm_reviser_config_){nullptr}
    , decltype(_impl_.color_reviser_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hmm_reviser_config()) {
    _impl_.hmm_reviser_config_ = new ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig(*from._impl_.hmm_reviser_config_);
  }
  if (from._internal_has_color_reviser_config()) {
    _impl_.color_reviser_config_ = new ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig(*from._impl_.color_reviser_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
}

inline void ModelConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hmm_reviser_config_){nullptr}
    , decltype(_impl_.color_reviser_config_){nullptr}
  };
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hmm_reviser_config_;
  if (this != internal_default_instance()) delete _impl_.color_reviser_config_;
}

void ModelConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.hmm_reviser_config_ != nullptr);
      _impl_.hmm_reviser_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.color_reviser_config_ != nullptr);
      _impl_.color_reviser_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hmm_reviser_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_reviser_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hmm_reviser_config(this),
        _Internal::hmm_reviser_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::color_reviser_config(this),
        _Internal::color_reviser_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hmm_reviser_config_);
    }

    // optional .apollo.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_reviser_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelConfigs::GetClassData() const { return &_class_data_; }

void ModelConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelConfigs *>(to)->MergeFrom(
      static_cast<const ModelConfigs &>(from));
}


void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hmm_reviser_config()->::apollo::perception::traffic_light::reviser_config::HMMReviserConfig::MergeFrom(from._internal_hmm_reviser_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_color_reviser_config()->::apollo::perception::traffic_light::reviser_config::ColorReviserConfig::MergeFrom(from._internal_color_reviser_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.reviser_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::InternalSwap(ModelConfigs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.color_reviser_config_)
      + sizeof(ModelConfigs::_impl_.color_reviser_config_)
      - PROTOBUF_FIELD_OFFSET(ModelConfigs, _impl_.hmm_reviser_config_)>(
          reinterpret_cast<char*>(&_impl_.hmm_reviser_config_),
          reinterpret_cast<char*>(&other->_impl_.hmm_reviser_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::reviser_config::HMMReviserConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::reviser_config::ColorReviserConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::reviser_config::ModelConfigs*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::reviser_config::ModelConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::reviser_config::ModelConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
