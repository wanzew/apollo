// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/multi_camera_projection_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {
class CameraFocusConfig;
struct CameraFocusConfigDefaultTypeInternal;
extern CameraFocusConfigDefaultTypeInternal _CameraFocusConfig_default_instance_;
class ModelConfigs;
struct ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
class MultiCamerasProjectionConfig;
struct MultiCamerasProjectionConfigDefaultTypeInternal;
extern MultiCamerasProjectionConfigDefaultTypeInternal _MultiCamerasProjectionConfig_default_instance_;
}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig>(Arena*);
template<> ::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::multi_camera_projection_config::ModelConfigs>(Arena*);
template<> ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* Arena::CreateMaybeMessage<::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {

// ===================================================================

class CameraFocusConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig) */ {
 public:
  inline CameraFocusConfig() : CameraFocusConfig(nullptr) {}
  ~CameraFocusConfig() override;
  explicit PROTOBUF_CONSTEXPR CameraFocusConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraFocusConfig(const CameraFocusConfig& from);
  CameraFocusConfig(CameraFocusConfig&& from) noexcept
    : CameraFocusConfig() {
    *this = ::std::move(from);
  }

  inline CameraFocusConfig& operator=(const CameraFocusConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraFocusConfig& operator=(CameraFocusConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraFocusConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraFocusConfig* internal_default_instance() {
    return reinterpret_cast<const CameraFocusConfig*>(
               &_CameraFocusConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraFocusConfig& a, CameraFocusConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraFocusConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraFocusConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraFocusConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraFocusConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraFocusConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraFocusConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraFocusConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig";
  }
  protected:
  explicit CameraFocusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCameraExtrinsicFileFieldNumber = 2,
    kCameraIntrinsicFileFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string camera_extrinsic_file = 2;
  bool has_camera_extrinsic_file() const;
  private:
  bool _internal_has_camera_extrinsic_file() const;
  public:
  void clear_camera_extrinsic_file();
  const std::string& camera_extrinsic_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_extrinsic_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_extrinsic_file();
  PROTOBUF_NODISCARD std::string* release_camera_extrinsic_file();
  void set_allocated_camera_extrinsic_file(std::string* camera_extrinsic_file);
  private:
  const std::string& _internal_camera_extrinsic_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_extrinsic_file(const std::string& value);
  std::string* _internal_mutable_camera_extrinsic_file();
  public:

  // optional string camera_intrinsic_file = 3;
  bool has_camera_intrinsic_file() const;
  private:
  bool _internal_has_camera_intrinsic_file() const;
  public:
  void clear_camera_intrinsic_file();
  const std::string& camera_intrinsic_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_intrinsic_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_intrinsic_file();
  PROTOBUF_NODISCARD std::string* release_camera_intrinsic_file();
  void set_allocated_camera_intrinsic_file(std::string* camera_intrinsic_file);
  private:
  const std::string& _internal_camera_intrinsic_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_intrinsic_file(const std::string& value);
  std::string* _internal_mutable_camera_intrinsic_file();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_extrinsic_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_intrinsic_file_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MultiCamerasProjectionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig) */ {
 public:
  inline MultiCamerasProjectionConfig() : MultiCamerasProjectionConfig(nullptr) {}
  ~MultiCamerasProjectionConfig() override;
  explicit PROTOBUF_CONSTEXPR MultiCamerasProjectionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCamerasProjectionConfig(const MultiCamerasProjectionConfig& from);
  MultiCamerasProjectionConfig(MultiCamerasProjectionConfig&& from) noexcept
    : MultiCamerasProjectionConfig() {
    *this = ::std::move(from);
  }

  inline MultiCamerasProjectionConfig& operator=(const MultiCamerasProjectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCamerasProjectionConfig& operator=(MultiCamerasProjectionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiCamerasProjectionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCamerasProjectionConfig* internal_default_instance() {
    return reinterpret_cast<const MultiCamerasProjectionConfig*>(
               &_MultiCamerasProjectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiCamerasProjectionConfig& a, MultiCamerasProjectionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCamerasProjectionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCamerasProjectionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCamerasProjectionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCamerasProjectionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiCamerasProjectionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiCamerasProjectionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCamerasProjectionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig";
  }
  protected:
  explicit MultiCamerasProjectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNamesFieldNumber = 4,
    kCameraFocusConfigFieldNumber = 5,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSingleProjectionFieldNumber = 3,
  };
  // repeated string camera_names = 4;
  int camera_names_size() const;
  private:
  int _internal_camera_names_size() const;
  public:
  void clear_camera_names();
  const std::string& camera_names(int index) const;
  std::string* mutable_camera_names(int index);
  void set_camera_names(int index, const std::string& value);
  void set_camera_names(int index, std::string&& value);
  void set_camera_names(int index, const char* value);
  void set_camera_names(int index, const char* value, size_t size);
  std::string* add_camera_names();
  void add_camera_names(const std::string& value);
  void add_camera_names(std::string&& value);
  void add_camera_names(const char* value);
  void add_camera_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& camera_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_camera_names();
  private:
  const std::string& _internal_camera_names(int index) const;
  std::string* _internal_add_camera_names();
  public:

  // repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  int camera_focus_config_size() const;
  private:
  int _internal_camera_focus_config_size() const;
  public:
  void clear_camera_focus_config();
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* mutable_camera_focus_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
      mutable_camera_focus_config();
  private:
  const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& _internal_camera_focus_config(int index) const;
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* _internal_add_camera_focus_config();
  public:
  const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& camera_focus_config(int index) const;
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* add_camera_focus_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
      camera_focus_config() const;

  // optional string name = 1 [default = "MultiCamerasProjection"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 2 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  bool has_single_projection() const;
  private:
  bool _internal_has_single_projection() const;
  public:
  void clear_single_projection();
  const std::string& single_projection() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_single_projection(ArgT0&& arg0, ArgT... args);
  std::string* mutable_single_projection();
  PROTOBUF_NODISCARD std::string* release_single_projection();
  void set_allocated_single_projection(std::string* single_projection);
  private:
  const std::string& _internal_single_projection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_single_projection(const std::string& value);
  std::string* _internal_mutable_single_projection();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> camera_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig > camera_focus_config_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_single_projection_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_projection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ModelConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs) */ {
 public:
  inline ModelConfigs() : ModelConfigs(nullptr) {}
  ~ModelConfigs() override;
  explicit PROTOBUF_CONSTEXPR ModelConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfigs(const ModelConfigs& from);
  ModelConfigs(ModelConfigs&& from) noexcept
    : ModelConfigs() {
    *this = ::std::move(from);
  }

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfigs& operator=(ModelConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelConfigs& a, ModelConfigs& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConfigs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelConfigs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelConfigs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs";
  }
  protected:
  explicit ModelConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiCameraProjectionConfigFieldNumber = 1,
  };
  // optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  bool has_multi_camera_projection_config() const;
  private:
  bool _internal_has_multi_camera_projection_config() const;
  public:
  void clear_multi_camera_projection_config();
  const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& multi_camera_projection_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* release_multi_camera_projection_config();
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* mutable_multi_camera_projection_config();
  void set_allocated_multi_camera_projection_config(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config);
  private:
  const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& _internal_multi_camera_projection_config() const;
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* _internal_mutable_multi_camera_projection_config();
  public:
  void unsafe_arena_set_allocated_multi_camera_projection_config(
      ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config);
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* unsafe_arena_release_multi_camera_projection_config();

  // @@protoc_insertion_point(class_scope:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraFocusConfig

// optional string name = 1;
inline bool CameraFocusConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraFocusConfig::has_name() const {
  return _internal_has_name();
}
inline void CameraFocusConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraFocusConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraFocusConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
inline std::string* CameraFocusConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return _s;
}
inline const std::string& CameraFocusConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CameraFocusConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraFocusConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}

// optional string camera_extrinsic_file = 2;
inline bool CameraFocusConfig::_internal_has_camera_extrinsic_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraFocusConfig::has_camera_extrinsic_file() const {
  return _internal_has_camera_extrinsic_file();
}
inline void CameraFocusConfig::clear_camera_extrinsic_file() {
  _impl_.camera_extrinsic_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraFocusConfig::camera_extrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return _internal_camera_extrinsic_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraFocusConfig::set_camera_extrinsic_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.camera_extrinsic_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
inline std::string* CameraFocusConfig::mutable_camera_extrinsic_file() {
  std::string* _s = _internal_mutable_camera_extrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return _s;
}
inline const std::string& CameraFocusConfig::_internal_camera_extrinsic_file() const {
  return _impl_.camera_extrinsic_file_.Get();
}
inline void CameraFocusConfig::_internal_set_camera_extrinsic_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.camera_extrinsic_file_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::_internal_mutable_camera_extrinsic_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.camera_extrinsic_file_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::release_camera_extrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  if (!_internal_has_camera_extrinsic_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.camera_extrinsic_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_extrinsic_file_.IsDefault()) {
    _impl_.camera_extrinsic_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraFocusConfig::set_allocated_camera_extrinsic_file(std::string* camera_extrinsic_file) {
  if (camera_extrinsic_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.camera_extrinsic_file_.SetAllocated(camera_extrinsic_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_extrinsic_file_.IsDefault()) {
    _impl_.camera_extrinsic_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}

// optional string camera_intrinsic_file = 3;
inline bool CameraFocusConfig::_internal_has_camera_intrinsic_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraFocusConfig::has_camera_intrinsic_file() const {
  return _internal_has_camera_intrinsic_file();
}
inline void CameraFocusConfig::clear_camera_intrinsic_file() {
  _impl_.camera_intrinsic_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CameraFocusConfig::camera_intrinsic_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return _internal_camera_intrinsic_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraFocusConfig::set_camera_intrinsic_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.camera_intrinsic_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
inline std::string* CameraFocusConfig::mutable_camera_intrinsic_file() {
  std::string* _s = _internal_mutable_camera_intrinsic_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return _s;
}
inline const std::string& CameraFocusConfig::_internal_camera_intrinsic_file() const {
  return _impl_.camera_intrinsic_file_.Get();
}
inline void CameraFocusConfig::_internal_set_camera_intrinsic_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.camera_intrinsic_file_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::_internal_mutable_camera_intrinsic_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.camera_intrinsic_file_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraFocusConfig::release_camera_intrinsic_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  if (!_internal_has_camera_intrinsic_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.camera_intrinsic_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_intrinsic_file_.IsDefault()) {
    _impl_.camera_intrinsic_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraFocusConfig::set_allocated_camera_intrinsic_file(std::string* camera_intrinsic_file) {
  if (camera_intrinsic_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.camera_intrinsic_file_.SetAllocated(camera_intrinsic_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camera_intrinsic_file_.IsDefault()) {
    _impl_.camera_intrinsic_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}

// -------------------------------------------------------------------

// MultiCamerasProjectionConfig

// optional string name = 1 [default = "MultiCamerasProjection"];
inline bool MultiCamerasProjectionConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MultiCamerasProjectionConfig::has_name() const {
  return _internal_has_name();
}
inline void MultiCamerasProjectionConfig::clear_name() {
  _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MultiCamerasProjectionConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiCamerasProjectionConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
inline std::string* MultiCamerasProjectionConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return _s;
}
inline const std::string& MultiCamerasProjectionConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MultiCamerasProjectionConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void MultiCamerasProjectionConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
inline bool MultiCamerasProjectionConfig::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiCamerasProjectionConfig::has_version() const {
  return _internal_has_version();
}
inline void MultiCamerasProjectionConfig::clear_version() {
  _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MultiCamerasProjectionConfig::version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  if (_impl_.version_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiCamerasProjectionConfig::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
inline std::string* MultiCamerasProjectionConfig::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return _s;
}
inline const std::string& MultiCamerasProjectionConfig::_internal_version() const {
  return _impl_.version_.Get();
}
inline void MultiCamerasProjectionConfig::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::release_version() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.version_.Release();
  return p;
}
inline void MultiCamerasProjectionConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}

// optional string single_projection = 3 [default = "BoundaryProjection"];
inline bool MultiCamerasProjectionConfig::_internal_has_single_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MultiCamerasProjectionConfig::has_single_projection() const {
  return _internal_has_single_projection();
}
inline void MultiCamerasProjectionConfig::clear_single_projection() {
  _impl_.single_projection_.ClearToDefault(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_single_projection_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MultiCamerasProjectionConfig::single_projection() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  if (_impl_.single_projection_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_single_projection_.get();
  return _internal_single_projection();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiCamerasProjectionConfig::set_single_projection(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.single_projection_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
inline std::string* MultiCamerasProjectionConfig::mutable_single_projection() {
  std::string* _s = _internal_mutable_single_projection();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return _s;
}
inline const std::string& MultiCamerasProjectionConfig::_internal_single_projection() const {
  return _impl_.single_projection_.Get();
}
inline void MultiCamerasProjectionConfig::_internal_set_single_projection(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.single_projection_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::_internal_mutable_single_projection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.single_projection_.Mutable(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Impl_::_i_give_permission_to_break_this_code_default_single_projection_, GetArenaForAllocation());
}
inline std::string* MultiCamerasProjectionConfig::release_single_projection() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  if (!_internal_has_single_projection()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.single_projection_.Release();
  return p;
}
inline void MultiCamerasProjectionConfig::set_allocated_single_projection(std::string* single_projection) {
  if (single_projection != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.single_projection_.SetAllocated(single_projection, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}

// repeated string camera_names = 4;
inline int MultiCamerasProjectionConfig::_internal_camera_names_size() const {
  return _impl_.camera_names_.size();
}
inline int MultiCamerasProjectionConfig::camera_names_size() const {
  return _internal_camera_names_size();
}
inline void MultiCamerasProjectionConfig::clear_camera_names() {
  _impl_.camera_names_.Clear();
}
inline std::string* MultiCamerasProjectionConfig::add_camera_names() {
  std::string* _s = _internal_add_camera_names();
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return _s;
}
inline const std::string& MultiCamerasProjectionConfig::_internal_camera_names(int index) const {
  return _impl_.camera_names_.Get(index);
}
inline const std::string& MultiCamerasProjectionConfig::camera_names(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return _internal_camera_names(index);
}
inline std::string* MultiCamerasProjectionConfig::mutable_camera_names(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return _impl_.camera_names_.Mutable(index);
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const std::string& value) {
  _impl_.camera_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, std::string&& value) {
  _impl_.camera_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.camera_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value, size_t size) {
  _impl_.camera_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline std::string* MultiCamerasProjectionConfig::_internal_add_camera_names() {
  return _impl_.camera_names_.Add();
}
inline void MultiCamerasProjectionConfig::add_camera_names(const std::string& value) {
  _impl_.camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::add_camera_names(std::string&& value) {
  _impl_.camera_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::add_camera_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline void MultiCamerasProjectionConfig::add_camera_names(const char* value, size_t size) {
  _impl_.camera_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiCamerasProjectionConfig::camera_names() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return _impl_.camera_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiCamerasProjectionConfig::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return &_impl_.camera_names_;
}

// repeated .apollo.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
inline int MultiCamerasProjectionConfig::_internal_camera_focus_config_size() const {
  return _impl_.camera_focus_config_.size();
}
inline int MultiCamerasProjectionConfig::camera_focus_config_size() const {
  return _internal_camera_focus_config_size();
}
inline void MultiCamerasProjectionConfig::clear_camera_focus_config() {
  _impl_.camera_focus_config_.Clear();
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::mutable_camera_focus_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return _impl_.camera_focus_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
MultiCamerasProjectionConfig::mutable_camera_focus_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return &_impl_.camera_focus_config_;
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& MultiCamerasProjectionConfig::_internal_camera_focus_config(int index) const {
  return _impl_.camera_focus_config_.Get(index);
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& MultiCamerasProjectionConfig::camera_focus_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return _internal_camera_focus_config(index);
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::_internal_add_camera_focus_config() {
  return _impl_.camera_focus_config_.Add();
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::add_camera_focus_config() {
  ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* _add = _internal_add_camera_focus_config();
  // @@protoc_insertion_point(field_add:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
MultiCamerasProjectionConfig::camera_focus_config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return _impl_.camera_focus_config_;
}

// -------------------------------------------------------------------

// ModelConfigs

// optional .apollo.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
inline bool ModelConfigs::_internal_has_multi_camera_projection_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.multi_camera_projection_config_ != nullptr);
  return value;
}
inline bool ModelConfigs::has_multi_camera_projection_config() const {
  return _internal_has_multi_camera_projection_config();
}
inline void ModelConfigs::clear_multi_camera_projection_config() {
  if (_impl_.multi_camera_projection_config_ != nullptr) _impl_.multi_camera_projection_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& ModelConfigs::_internal_multi_camera_projection_config() const {
  const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* p = _impl_.multi_camera_projection_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig&>(
      ::apollo::perception::traffic_light::multi_camera_projection_config::_MultiCamerasProjectionConfig_default_instance_);
}
inline const ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& ModelConfigs::multi_camera_projection_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return _internal_multi_camera_projection_config();
}
inline void ModelConfigs::unsafe_arena_set_allocated_multi_camera_projection_config(
    ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.multi_camera_projection_config_);
  }
  _impl_.multi_camera_projection_config_ = multi_camera_projection_config;
  if (multi_camera_projection_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::release_multi_camera_projection_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* temp = _impl_.multi_camera_projection_config_;
  _impl_.multi_camera_projection_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::unsafe_arena_release_multi_camera_projection_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* temp = _impl_.multi_camera_projection_config_;
  _impl_.multi_camera_projection_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::_internal_mutable_multi_camera_projection_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.multi_camera_projection_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig>(GetArenaForAllocation());
    _impl_.multi_camera_projection_config_ = p;
  }
  return _impl_.multi_camera_projection_config_;
}
inline ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::mutable_multi_camera_projection_config() {
  ::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* _msg = _internal_mutable_multi_camera_projection_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return _msg;
}
inline void ModelConfigs::set_allocated_multi_camera_projection_config(::apollo::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.multi_camera_projection_config_;
  }
  if (multi_camera_projection_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi_camera_projection_config);
    if (message_arena != submessage_arena) {
      multi_camera_projection_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_camera_projection_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.multi_camera_projection_config_ = multi_camera_projection_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto
