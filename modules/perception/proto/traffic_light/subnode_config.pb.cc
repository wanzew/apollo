// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/subnode_config.proto

#include "modules/perception/proto/traffic_light/subnode_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace traffic_light {
namespace subnode_config {
PROTOBUF_CONSTEXPR TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_tf_inverval_seconds_)*/0.2f
  , /*decltype(_impl_.max_ahead_seconds_)*/0.3f
  , /*decltype(_impl_.max_process_image_fps_)*/8} {}
struct TLPreprocessorSubnodeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLPreprocessorSubnodeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLPreprocessorSubnodeConfigDefaultTypeInternal() {}
  union {
    TLPreprocessorSubnodeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLPreprocessorSubnodeConfigDefaultTypeInternal _TLPreprocessorSubnodeConfig_default_instance_;
PROTOBUF_CONSTEXPR TLProcSubnodeConfig::TLProcSubnodeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_border_)*/100
  , /*decltype(_impl_.valid_ts_interval_)*/0.5f} {}
struct TLProcSubnodeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLProcSubnodeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLProcSubnodeConfigDefaultTypeInternal() {}
  union {
    TLProcSubnodeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLProcSubnodeConfigDefaultTypeInternal _TLProcSubnodeConfig_default_instance_;
PROTOBUF_CONSTEXPR SubnodeConfig::SubnodeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tl_preprocessor_subnode_config_)*/nullptr
  , /*decltype(_impl_.tl_proc_subnode_config_)*/nullptr} {}
struct SubnodeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubnodeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubnodeConfigDefaultTypeInternal() {}
  union {
    SubnodeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubnodeConfigDefaultTypeInternal _SubnodeConfig_default_instance_;
}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_.max_ahead_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_.max_process_image_fps_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig, _impl_.query_tf_inverval_seconds_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _impl_.image_border_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig, _impl_.valid_ts_interval_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::SubnodeConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::SubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::SubnodeConfig, _impl_.tl_preprocessor_subnode_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::traffic_light::subnode_config::SubnodeConfig, _impl_.tl_proc_subnode_config_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig)},
  { 16, 26, -1, sizeof(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig)},
  { 30, 38, -1, sizeof(::apollo::perception::traffic_light::subnode_config::SubnodeConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::traffic_light::subnode_config::_TLPreprocessorSubnodeConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::subnode_config::_TLProcSubnodeConfig_default_instance_._instance,
  &::apollo::perception::traffic_light::subnode_config::_SubnodeConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/perception/proto/traffic_light"
  "/subnode_config.proto\022.apollo.perception"
  ".traffic_light.subnode_config\"\304\001\n\033TLPrep"
  "rocessorSubnodeConfig\022#\n\004name\030\001 \001(\t:\025TLP"
  "reprocessorSubnode\022\026\n\007version\030\002 \001(\t:\0051.0"
  ".0\022\036\n\021max_ahead_seconds\030\003 \001(\002:\0030.3\022 \n\025ma"
  "x_process_image_fps\030\004 \001(\002:\0018\022&\n\031query_tf"
  "_inverval_seconds\030\005 \001(\002:\0030.2\"\205\001\n\023TLProcS"
  "ubnodeConfig\022\033\n\004name\030\001 \001(\t:\rTLProcSubnod"
  "e\022\026\n\007version\030\002 \001(\t:\0051.0.0\022\031\n\014image_borde"
  "r\030\003 \001(\005:\003100\022\036\n\021valid_ts_interval\030\004 \001(\002:"
  "\0030.5\"\351\001\n\rSubnodeConfig\022s\n\036tl_preprocesso"
  "r_subnode_config\030\001 \001(\0132K.apollo.percepti"
  "on.traffic_light.subnode_config.TLPrepro"
  "cessorSubnodeConfig\022c\n\026tl_proc_subnode_c"
  "onfig\030\002 \001(\0132C.apollo.perception.traffic_"
  "light.subnode_config.TLProcSubnodeConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto = {
    false, false, 680, descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto,
    "modules/perception/proto/traffic_light/subnode_config.proto",
    &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace traffic_light {
namespace subnode_config {

// ===================================================================

class TLPreprocessorSubnodeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TLPreprocessorSubnodeConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_ahead_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_process_image_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_query_tf_inverval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"TLPreprocessorSubnode", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}
TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig(const TLPreprocessorSubnodeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.query_tf_inverval_seconds_){}
    , decltype(_impl_.max_ahead_seconds_){}
    , decltype(_impl_.max_process_image_fps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.query_tf_inverval_seconds_, &from._impl_.query_tf_inverval_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_process_image_fps_) -
    reinterpret_cast<char*>(&_impl_.query_tf_inverval_seconds_)) + sizeof(_impl_.max_process_image_fps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

inline void TLPreprocessorSubnodeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.query_tf_inverval_seconds_){0.2f}
    , decltype(_impl_.max_ahead_seconds_){0.3f}
    , decltype(_impl_.max_process_image_fps_){8}
  };
  _impl_.name_.InitDefault();
  _impl_.version_.InitDefault();
}

TLPreprocessorSubnodeConfig::~TLPreprocessorSubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLPreprocessorSubnodeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void TLPreprocessorSubnodeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TLPreprocessorSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
    _impl_.query_tf_inverval_seconds_ = 0.2f;
    _impl_.max_ahead_seconds_ = 0.3f;
    _impl_.max_process_image_fps_ = 8;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLPreprocessorSubnodeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = "TLPreprocessorSubnode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2 [default = "1.0.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float max_ahead_seconds = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_max_ahead_seconds(&has_bits);
          _impl_.max_ahead_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_process_image_fps = 4 [default = 8];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_process_image_fps(&has_bits);
          _impl_.max_process_image_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float query_tf_inverval_seconds = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_query_tf_inverval_seconds(&has_bits);
          _impl_.query_tf_inverval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLPreprocessorSubnodeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional float max_ahead_seconds = 3 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_max_ahead_seconds(), target);
  }

  // optional float max_process_image_fps = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_process_image_fps(), target);
  }

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_query_tf_inverval_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return target;
}

size_t TLPreprocessorSubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [default = "TLPreprocessorSubnode"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional float query_tf_inverval_seconds = 5 [default = 0.2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_ahead_seconds = 3 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_process_image_fps = 4 [default = 8];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLPreprocessorSubnodeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLPreprocessorSubnodeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLPreprocessorSubnodeConfig::GetClassData() const { return &_class_data_; }

void TLPreprocessorSubnodeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLPreprocessorSubnodeConfig *>(to)->MergeFrom(
      static_cast<const TLPreprocessorSubnodeConfig &>(from));
}


void TLPreprocessorSubnodeConfig::MergeFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.query_tf_inverval_seconds_ = from._impl_.query_tf_inverval_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_ahead_seconds_ = from._impl_.max_ahead_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.max_process_image_fps_ = from._impl_.max_process_image_fps_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLPreprocessorSubnodeConfig::CopyFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLPreprocessorSubnodeConfig::IsInitialized() const {
  return true;
}

void TLPreprocessorSubnodeConfig::InternalSwap(TLPreprocessorSubnodeConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.query_tf_inverval_seconds_, other->_impl_.query_tf_inverval_seconds_);
  swap(_impl_.max_ahead_seconds_, other->_impl_.max_ahead_seconds_);
  swap(_impl_.max_process_image_fps_, other->_impl_.max_process_image_fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLPreprocessorSubnodeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto[0]);
}

// ===================================================================

class TLProcSubnodeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TLProcSubnodeConfig>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_border(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_valid_ts_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"TLProcSubnode", 13}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
TLProcSubnodeConfig::TLProcSubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}
TLProcSubnodeConfig::TLProcSubnodeConfig(const TLProcSubnodeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.image_border_){}
    , decltype(_impl_.valid_ts_interval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.image_border_, &from._impl_.image_border_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.valid_ts_interval_) -
    reinterpret_cast<char*>(&_impl_.image_border_)) + sizeof(_impl_.valid_ts_interval_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

inline void TLProcSubnodeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.image_border_){100}
    , decltype(_impl_.valid_ts_interval_){0.5f}
  };
  _impl_.name_.InitDefault();
  _impl_.version_.InitDefault();
}

TLProcSubnodeConfig::~TLProcSubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLProcSubnodeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
}

void TLProcSubnodeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TLProcSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearToDefault(::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Impl_::_i_give_permission_to_break_this_code_default_version_, GetArenaForAllocation());
       }
    _impl_.image_border_ = 100;
    _impl_.valid_ts_interval_ = 0.5f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLProcSubnodeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = "TLProcSubnode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2 [default = "1.0.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_border = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_image_border(&has_bits);
          _impl_.image_border_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float valid_ts_interval = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_valid_ts_interval(&has_bits);
          _impl_.valid_ts_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLProcSubnodeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = "TLProcSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional int32 image_border = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_image_border(), target);
  }

  // optional float valid_ts_interval = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_valid_ts_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return target;
}

size_t TLProcSubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1 [default = "TLProcSubnode"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional int32 image_border = 3 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_border());
    }

    // optional float valid_ts_interval = 4 [default = 0.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLProcSubnodeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLProcSubnodeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLProcSubnodeConfig::GetClassData() const { return &_class_data_; }

void TLProcSubnodeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLProcSubnodeConfig *>(to)->MergeFrom(
      static_cast<const TLProcSubnodeConfig &>(from));
}


void TLProcSubnodeConfig::MergeFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.image_border_ = from._impl_.image_border_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.valid_ts_interval_ = from._impl_.valid_ts_interval_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLProcSubnodeConfig::CopyFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLProcSubnodeConfig::IsInitialized() const {
  return true;
}

void TLProcSubnodeConfig::InternalSwap(TLProcSubnodeConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.image_border_, other->_impl_.image_border_);
  swap(_impl_.valid_ts_interval_, other->_impl_.valid_ts_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLProcSubnodeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto[1]);
}

// ===================================================================

class SubnodeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnodeConfig>()._impl_._has_bits_);
  static const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& tl_preprocessor_subnode_config(const SubnodeConfig* msg);
  static void set_has_tl_preprocessor_subnode_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig& tl_proc_subnode_config(const SubnodeConfig* msg);
  static void set_has_tl_proc_subnode_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig&
SubnodeConfig::_Internal::tl_preprocessor_subnode_config(const SubnodeConfig* msg) {
  return *msg->_impl_.tl_preprocessor_subnode_config_;
}
const ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig&
SubnodeConfig::_Internal::tl_proc_subnode_config(const SubnodeConfig* msg) {
  return *msg->_impl_.tl_proc_subnode_config_;
}
SubnodeConfig::SubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
}
SubnodeConfig::SubnodeConfig(const SubnodeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tl_preprocessor_subnode_config_){nullptr}
    , decltype(_impl_.tl_proc_subnode_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tl_preprocessor_subnode_config()) {
    _impl_.tl_preprocessor_subnode_config_ = new ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig(*from._impl_.tl_preprocessor_subnode_config_);
  }
  if (from._internal_has_tl_proc_subnode_config()) {
    _impl_.tl_proc_subnode_config_ = new ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig(*from._impl_.tl_proc_subnode_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
}

inline void SubnodeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tl_preprocessor_subnode_config_){nullptr}
    , decltype(_impl_.tl_proc_subnode_config_){nullptr}
  };
}

SubnodeConfig::~SubnodeConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubnodeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tl_preprocessor_subnode_config_;
  if (this != internal_default_instance()) delete _impl_.tl_proc_subnode_config_;
}

void SubnodeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tl_preprocessor_subnode_config_ != nullptr);
      _impl_.tl_preprocessor_subnode_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tl_proc_subnode_config_ != nullptr);
      _impl_.tl_proc_subnode_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnodeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tl_preprocessor_subnode_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tl_proc_subnode_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubnodeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tl_preprocessor_subnode_config(this),
        _Internal::tl_preprocessor_subnode_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tl_proc_subnode_config(this),
        _Internal::tl_proc_subnode_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  return target;
}

size_t SubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tl_preprocessor_subnode_config_);
    }

    // optional .apollo.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tl_proc_subnode_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnodeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnodeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnodeConfig::GetClassData() const { return &_class_data_; }

void SubnodeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubnodeConfig *>(to)->MergeFrom(
      static_cast<const SubnodeConfig &>(from));
}


void SubnodeConfig::MergeFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tl_preprocessor_subnode_config()->::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::MergeFrom(from._internal_tl_preprocessor_subnode_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tl_proc_subnode_config()->::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig::MergeFrom(from._internal_tl_proc_subnode_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnodeConfig::CopyFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.traffic_light.subnode_config.SubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnodeConfig::IsInitialized() const {
  return true;
}

void SubnodeConfig::InternalSwap(SubnodeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubnodeConfig, _impl_.tl_proc_subnode_config_)
      + sizeof(SubnodeConfig::_impl_.tl_proc_subnode_config_)
      - PROTOBUF_FIELD_OFFSET(SubnodeConfig, _impl_.tl_preprocessor_subnode_config_)>(
          reinterpret_cast<char*>(&_impl_.tl_preprocessor_subnode_config_),
          reinterpret_cast<char*>(&other->_impl_.tl_preprocessor_subnode_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnodeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::subnode_config::TLProcSubnodeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::traffic_light::subnode_config::SubnodeConfig*
Arena::CreateMaybeMessage< ::apollo::perception::traffic_light::subnode_config::SubnodeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::traffic_light::subnode_config::SubnodeConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
