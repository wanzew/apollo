// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/dag_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
namespace apollo {
namespace perception {
class DAGConfig;
struct DAGConfigDefaultTypeInternal;
extern DAGConfigDefaultTypeInternal _DAGConfig_default_instance_;
class DAGConfig_Edge;
struct DAGConfig_EdgeDefaultTypeInternal;
extern DAGConfig_EdgeDefaultTypeInternal _DAGConfig_Edge_default_instance_;
class DAGConfig_EdgeConfig;
struct DAGConfig_EdgeConfigDefaultTypeInternal;
extern DAGConfig_EdgeConfigDefaultTypeInternal _DAGConfig_EdgeConfig_default_instance_;
class DAGConfig_Event;
struct DAGConfig_EventDefaultTypeInternal;
extern DAGConfig_EventDefaultTypeInternal _DAGConfig_Event_default_instance_;
class DAGConfig_SharedData;
struct DAGConfig_SharedDataDefaultTypeInternal;
extern DAGConfig_SharedDataDefaultTypeInternal _DAGConfig_SharedData_default_instance_;
class DAGConfig_SharedDataConfig;
struct DAGConfig_SharedDataConfigDefaultTypeInternal;
extern DAGConfig_SharedDataConfigDefaultTypeInternal _DAGConfig_SharedDataConfig_default_instance_;
class DAGConfig_Subnode;
struct DAGConfig_SubnodeDefaultTypeInternal;
extern DAGConfig_SubnodeDefaultTypeInternal _DAGConfig_Subnode_default_instance_;
class DAGConfig_SubnodeConfig;
struct DAGConfig_SubnodeConfigDefaultTypeInternal;
extern DAGConfig_SubnodeConfigDefaultTypeInternal _DAGConfig_SubnodeConfig_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::DAGConfig* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig>(Arena*);
template<> ::apollo::perception::DAGConfig_Edge* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_Edge>(Arena*);
template<> ::apollo::perception::DAGConfig_EdgeConfig* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_EdgeConfig>(Arena*);
template<> ::apollo::perception::DAGConfig_Event* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_Event>(Arena*);
template<> ::apollo::perception::DAGConfig_SharedData* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_SharedData>(Arena*);
template<> ::apollo::perception::DAGConfig_SharedDataConfig* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_SharedDataConfig>(Arena*);
template<> ::apollo::perception::DAGConfig_Subnode* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_Subnode>(Arena*);
template<> ::apollo::perception::DAGConfig_SubnodeConfig* Arena::CreateMaybeMessage<::apollo::perception::DAGConfig_SubnodeConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

enum DAGConfig_SubnodeType : int {
  DAGConfig_SubnodeType_SUBNODE_IN = 1,
  DAGConfig_SubnodeType_SUBNODE_OUT = 2,
  DAGConfig_SubnodeType_SUBNODE_NORMAL = 3
};
bool DAGConfig_SubnodeType_IsValid(int value);
constexpr DAGConfig_SubnodeType DAGConfig_SubnodeType_SubnodeType_MIN = DAGConfig_SubnodeType_SUBNODE_IN;
constexpr DAGConfig_SubnodeType DAGConfig_SubnodeType_SubnodeType_MAX = DAGConfig_SubnodeType_SUBNODE_NORMAL;
constexpr int DAGConfig_SubnodeType_SubnodeType_ARRAYSIZE = DAGConfig_SubnodeType_SubnodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAGConfig_SubnodeType_descriptor();
template<typename T>
inline const std::string& DAGConfig_SubnodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DAGConfig_SubnodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DAGConfig_SubnodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DAGConfig_SubnodeType_descriptor(), enum_t_value);
}
inline bool DAGConfig_SubnodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DAGConfig_SubnodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DAGConfig_SubnodeType>(
    DAGConfig_SubnodeType_descriptor(), name, value);
}
// ===================================================================

class DAGConfig_Subnode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.Subnode) */ {
 public:
  inline DAGConfig_Subnode() : DAGConfig_Subnode(nullptr) {}
  ~DAGConfig_Subnode() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_Subnode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_Subnode(const DAGConfig_Subnode& from);
  DAGConfig_Subnode(DAGConfig_Subnode&& from) noexcept
    : DAGConfig_Subnode() {
    *this = ::std::move(from);
  }

  inline DAGConfig_Subnode& operator=(const DAGConfig_Subnode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_Subnode& operator=(DAGConfig_Subnode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_Subnode& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_Subnode* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_Subnode*>(
               &_DAGConfig_Subnode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DAGConfig_Subnode& a, DAGConfig_Subnode& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_Subnode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_Subnode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_Subnode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_Subnode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_Subnode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_Subnode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_Subnode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.Subnode";
  }
  protected:
  explicit DAGConfig_Subnode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kReserveFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string reserve = 3;
  bool has_reserve() const;
  private:
  bool _internal_has_reserve() const;
  public:
  void clear_reserve();
  const std::string& reserve() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve();
  PROTOBUF_NODISCARD std::string* release_reserve();
  void set_allocated_reserve(std::string* reserve);
  private:
  const std::string& _internal_reserve() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve(const std::string& value);
  std::string* _internal_mutable_reserve();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .apollo.perception.DAGConfig.SubnodeType type = 4 [default = SUBNODE_NORMAL];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::DAGConfig_SubnodeType type() const;
  void set_type(::apollo::perception::DAGConfig_SubnodeType value);
  private:
  ::apollo::perception::DAGConfig_SubnodeType _internal_type() const;
  void _internal_set_type(::apollo::perception::DAGConfig_SubnodeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.Subnode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_;
    int32_t id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_SubnodeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.SubnodeConfig) */ {
 public:
  inline DAGConfig_SubnodeConfig() : DAGConfig_SubnodeConfig(nullptr) {}
  ~DAGConfig_SubnodeConfig() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_SubnodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_SubnodeConfig(const DAGConfig_SubnodeConfig& from);
  DAGConfig_SubnodeConfig(DAGConfig_SubnodeConfig&& from) noexcept
    : DAGConfig_SubnodeConfig() {
    *this = ::std::move(from);
  }

  inline DAGConfig_SubnodeConfig& operator=(const DAGConfig_SubnodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_SubnodeConfig& operator=(DAGConfig_SubnodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_SubnodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_SubnodeConfig* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_SubnodeConfig*>(
               &_DAGConfig_SubnodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DAGConfig_SubnodeConfig& a, DAGConfig_SubnodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_SubnodeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_SubnodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_SubnodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_SubnodeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_SubnodeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_SubnodeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_SubnodeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.SubnodeConfig";
  }
  protected:
  explicit DAGConfig_SubnodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnodesFieldNumber = 1,
  };
  // repeated .apollo.perception.DAGConfig.Subnode subnodes = 1;
  int subnodes_size() const;
  private:
  int _internal_subnodes_size() const;
  public:
  void clear_subnodes();
  ::apollo::perception::DAGConfig_Subnode* mutable_subnodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Subnode >*
      mutable_subnodes();
  private:
  const ::apollo::perception::DAGConfig_Subnode& _internal_subnodes(int index) const;
  ::apollo::perception::DAGConfig_Subnode* _internal_add_subnodes();
  public:
  const ::apollo::perception::DAGConfig_Subnode& subnodes(int index) const;
  ::apollo::perception::DAGConfig_Subnode* add_subnodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Subnode >&
      subnodes() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.SubnodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Subnode > subnodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.Event) */ {
 public:
  inline DAGConfig_Event() : DAGConfig_Event(nullptr) {}
  ~DAGConfig_Event() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_Event(const DAGConfig_Event& from);
  DAGConfig_Event(DAGConfig_Event&& from) noexcept
    : DAGConfig_Event() {
    *this = ::std::move(from);
  }

  inline DAGConfig_Event& operator=(const DAGConfig_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_Event& operator=(DAGConfig_Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_Event* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_Event*>(
               &_DAGConfig_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DAGConfig_Event& a, DAGConfig_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.Event";
  }
  protected:
  explicit DAGConfig_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.Edge) */ {
 public:
  inline DAGConfig_Edge() : DAGConfig_Edge(nullptr) {}
  ~DAGConfig_Edge() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_Edge(const DAGConfig_Edge& from);
  DAGConfig_Edge(DAGConfig_Edge&& from) noexcept
    : DAGConfig_Edge() {
    *this = ::std::move(from);
  }

  inline DAGConfig_Edge& operator=(const DAGConfig_Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_Edge& operator=(DAGConfig_Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_Edge* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_Edge*>(
               &_DAGConfig_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DAGConfig_Edge& a, DAGConfig_Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_Edge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.Edge";
  }
  protected:
  explicit DAGConfig_Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 4,
    kIdFieldNumber = 1,
    kFromNodeFieldNumber = 2,
    kToNodeFieldNumber = 3,
  };
  // repeated .apollo.perception.DAGConfig.Event events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::apollo::perception::DAGConfig_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Event >*
      mutable_events();
  private:
  const ::apollo::perception::DAGConfig_Event& _internal_events(int index) const;
  ::apollo::perception::DAGConfig_Event* _internal_add_events();
  public:
  const ::apollo::perception::DAGConfig_Event& events(int index) const;
  ::apollo::perception::DAGConfig_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Event >&
      events() const;

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required int32 from_node = 2;
  bool has_from_node() const;
  private:
  bool _internal_has_from_node() const;
  public:
  void clear_from_node();
  int32_t from_node() const;
  void set_from_node(int32_t value);
  private:
  int32_t _internal_from_node() const;
  void _internal_set_from_node(int32_t value);
  public:

  // required int32 to_node = 3;
  bool has_to_node() const;
  private:
  bool _internal_has_to_node() const;
  public:
  void clear_to_node();
  int32_t to_node() const;
  void set_to_node(int32_t value);
  private:
  int32_t _internal_to_node() const;
  void _internal_set_to_node(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.Edge)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Event > events_;
    int32_t id_;
    int32_t from_node_;
    int32_t to_node_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_EdgeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.EdgeConfig) */ {
 public:
  inline DAGConfig_EdgeConfig() : DAGConfig_EdgeConfig(nullptr) {}
  ~DAGConfig_EdgeConfig() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_EdgeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_EdgeConfig(const DAGConfig_EdgeConfig& from);
  DAGConfig_EdgeConfig(DAGConfig_EdgeConfig&& from) noexcept
    : DAGConfig_EdgeConfig() {
    *this = ::std::move(from);
  }

  inline DAGConfig_EdgeConfig& operator=(const DAGConfig_EdgeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_EdgeConfig& operator=(DAGConfig_EdgeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_EdgeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_EdgeConfig* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_EdgeConfig*>(
               &_DAGConfig_EdgeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DAGConfig_EdgeConfig& a, DAGConfig_EdgeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_EdgeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_EdgeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_EdgeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_EdgeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_EdgeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_EdgeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_EdgeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.EdgeConfig";
  }
  protected:
  explicit DAGConfig_EdgeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
  };
  // repeated .apollo.perception.DAGConfig.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::apollo::perception::DAGConfig_Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Edge >*
      mutable_edges();
  private:
  const ::apollo::perception::DAGConfig_Edge& _internal_edges(int index) const;
  ::apollo::perception::DAGConfig_Edge* _internal_add_edges();
  public:
  const ::apollo::perception::DAGConfig_Edge& edges(int index) const;
  ::apollo::perception::DAGConfig_Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Edge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.EdgeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Edge > edges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_SharedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.SharedData) */ {
 public:
  inline DAGConfig_SharedData() : DAGConfig_SharedData(nullptr) {}
  ~DAGConfig_SharedData() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_SharedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_SharedData(const DAGConfig_SharedData& from);
  DAGConfig_SharedData(DAGConfig_SharedData&& from) noexcept
    : DAGConfig_SharedData() {
    *this = ::std::move(from);
  }

  inline DAGConfig_SharedData& operator=(const DAGConfig_SharedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_SharedData& operator=(DAGConfig_SharedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_SharedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_SharedData* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_SharedData*>(
               &_DAGConfig_SharedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DAGConfig_SharedData& a, DAGConfig_SharedData& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_SharedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_SharedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_SharedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_SharedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_SharedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_SharedData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_SharedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.SharedData";
  }
  protected:
  explicit DAGConfig_SharedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.SharedData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig_SharedDataConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig.SharedDataConfig) */ {
 public:
  inline DAGConfig_SharedDataConfig() : DAGConfig_SharedDataConfig(nullptr) {}
  ~DAGConfig_SharedDataConfig() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig_SharedDataConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig_SharedDataConfig(const DAGConfig_SharedDataConfig& from);
  DAGConfig_SharedDataConfig(DAGConfig_SharedDataConfig&& from) noexcept
    : DAGConfig_SharedDataConfig() {
    *this = ::std::move(from);
  }

  inline DAGConfig_SharedDataConfig& operator=(const DAGConfig_SharedDataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig_SharedDataConfig& operator=(DAGConfig_SharedDataConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig_SharedDataConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig_SharedDataConfig* internal_default_instance() {
    return reinterpret_cast<const DAGConfig_SharedDataConfig*>(
               &_DAGConfig_SharedDataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DAGConfig_SharedDataConfig& a, DAGConfig_SharedDataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig_SharedDataConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig_SharedDataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig_SharedDataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig_SharedDataConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig_SharedDataConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig_SharedDataConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig_SharedDataConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig.SharedDataConfig";
  }
  protected:
  explicit DAGConfig_SharedDataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .apollo.perception.DAGConfig.SharedData datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::apollo::perception::DAGConfig_SharedData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_SharedData >*
      mutable_datas();
  private:
  const ::apollo::perception::DAGConfig_SharedData& _internal_datas(int index) const;
  ::apollo::perception::DAGConfig_SharedData* _internal_add_datas();
  public:
  const ::apollo::perception::DAGConfig_SharedData& datas(int index) const;
  ::apollo::perception::DAGConfig_SharedData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_SharedData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig.SharedDataConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_SharedData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DAGConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DAGConfig) */ {
 public:
  inline DAGConfig() : DAGConfig(nullptr) {}
  ~DAGConfig() override;
  explicit PROTOBUF_CONSTEXPR DAGConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAGConfig(const DAGConfig& from);
  DAGConfig(DAGConfig&& from) noexcept
    : DAGConfig() {
    *this = ::std::move(from);
  }

  inline DAGConfig& operator=(const DAGConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGConfig& operator=(DAGConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DAGConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAGConfig* internal_default_instance() {
    return reinterpret_cast<const DAGConfig*>(
               &_DAGConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DAGConfig& a, DAGConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAGConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DAGConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DAGConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DAGConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DAGConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.DAGConfig";
  }
  protected:
  explicit DAGConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DAGConfig_Subnode Subnode;
  typedef DAGConfig_SubnodeConfig SubnodeConfig;
  typedef DAGConfig_Event Event;
  typedef DAGConfig_Edge Edge;
  typedef DAGConfig_EdgeConfig EdgeConfig;
  typedef DAGConfig_SharedData SharedData;
  typedef DAGConfig_SharedDataConfig SharedDataConfig;

  typedef DAGConfig_SubnodeType SubnodeType;
  static constexpr SubnodeType SUBNODE_IN =
    DAGConfig_SubnodeType_SUBNODE_IN;
  static constexpr SubnodeType SUBNODE_OUT =
    DAGConfig_SubnodeType_SUBNODE_OUT;
  static constexpr SubnodeType SUBNODE_NORMAL =
    DAGConfig_SubnodeType_SUBNODE_NORMAL;
  static inline bool SubnodeType_IsValid(int value) {
    return DAGConfig_SubnodeType_IsValid(value);
  }
  static constexpr SubnodeType SubnodeType_MIN =
    DAGConfig_SubnodeType_SubnodeType_MIN;
  static constexpr SubnodeType SubnodeType_MAX =
    DAGConfig_SubnodeType_SubnodeType_MAX;
  static constexpr int SubnodeType_ARRAYSIZE =
    DAGConfig_SubnodeType_SubnodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubnodeType_descriptor() {
    return DAGConfig_SubnodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubnodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubnodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubnodeType_Name.");
    return DAGConfig_SubnodeType_Name(enum_t_value);
  }
  static inline bool SubnodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubnodeType* value) {
    return DAGConfig_SubnodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubnodeConfigFieldNumber = 1,
    kEdgeConfigFieldNumber = 2,
    kDataConfigFieldNumber = 3,
  };
  // required .apollo.perception.DAGConfig.SubnodeConfig subnode_config = 1;
  bool has_subnode_config() const;
  private:
  bool _internal_has_subnode_config() const;
  public:
  void clear_subnode_config();
  const ::apollo::perception::DAGConfig_SubnodeConfig& subnode_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::DAGConfig_SubnodeConfig* release_subnode_config();
  ::apollo::perception::DAGConfig_SubnodeConfig* mutable_subnode_config();
  void set_allocated_subnode_config(::apollo::perception::DAGConfig_SubnodeConfig* subnode_config);
  private:
  const ::apollo::perception::DAGConfig_SubnodeConfig& _internal_subnode_config() const;
  ::apollo::perception::DAGConfig_SubnodeConfig* _internal_mutable_subnode_config();
  public:
  void unsafe_arena_set_allocated_subnode_config(
      ::apollo::perception::DAGConfig_SubnodeConfig* subnode_config);
  ::apollo::perception::DAGConfig_SubnodeConfig* unsafe_arena_release_subnode_config();

  // required .apollo.perception.DAGConfig.EdgeConfig edge_config = 2;
  bool has_edge_config() const;
  private:
  bool _internal_has_edge_config() const;
  public:
  void clear_edge_config();
  const ::apollo::perception::DAGConfig_EdgeConfig& edge_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::DAGConfig_EdgeConfig* release_edge_config();
  ::apollo::perception::DAGConfig_EdgeConfig* mutable_edge_config();
  void set_allocated_edge_config(::apollo::perception::DAGConfig_EdgeConfig* edge_config);
  private:
  const ::apollo::perception::DAGConfig_EdgeConfig& _internal_edge_config() const;
  ::apollo::perception::DAGConfig_EdgeConfig* _internal_mutable_edge_config();
  public:
  void unsafe_arena_set_allocated_edge_config(
      ::apollo::perception::DAGConfig_EdgeConfig* edge_config);
  ::apollo::perception::DAGConfig_EdgeConfig* unsafe_arena_release_edge_config();

  // required .apollo.perception.DAGConfig.SharedDataConfig data_config = 3;
  bool has_data_config() const;
  private:
  bool _internal_has_data_config() const;
  public:
  void clear_data_config();
  const ::apollo::perception::DAGConfig_SharedDataConfig& data_config() const;
  PROTOBUF_NODISCARD ::apollo::perception::DAGConfig_SharedDataConfig* release_data_config();
  ::apollo::perception::DAGConfig_SharedDataConfig* mutable_data_config();
  void set_allocated_data_config(::apollo::perception::DAGConfig_SharedDataConfig* data_config);
  private:
  const ::apollo::perception::DAGConfig_SharedDataConfig& _internal_data_config() const;
  ::apollo::perception::DAGConfig_SharedDataConfig* _internal_mutable_data_config();
  public:
  void unsafe_arena_set_allocated_data_config(
      ::apollo::perception::DAGConfig_SharedDataConfig* data_config);
  ::apollo::perception::DAGConfig_SharedDataConfig* unsafe_arena_release_data_config();

  // @@protoc_insertion_point(class_scope:apollo.perception.DAGConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::DAGConfig_SubnodeConfig* subnode_config_;
    ::apollo::perception::DAGConfig_EdgeConfig* edge_config_;
    ::apollo::perception::DAGConfig_SharedDataConfig* data_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DAGConfig_Subnode

// required int32 id = 1;
inline bool DAGConfig_Subnode::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DAGConfig_Subnode::has_id() const {
  return _internal_has_id();
}
inline void DAGConfig_Subnode::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DAGConfig_Subnode::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DAGConfig_Subnode::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Subnode.id)
  return _internal_id();
}
inline void DAGConfig_Subnode::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void DAGConfig_Subnode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Subnode.id)
}

// required string name = 2;
inline bool DAGConfig_Subnode::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DAGConfig_Subnode::has_name() const {
  return _internal_has_name();
}
inline void DAGConfig_Subnode::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DAGConfig_Subnode::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Subnode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DAGConfig_Subnode::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Subnode.name)
}
inline std::string* DAGConfig_Subnode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.Subnode.name)
  return _s;
}
inline const std::string& DAGConfig_Subnode::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DAGConfig_Subnode::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DAGConfig_Subnode::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DAGConfig_Subnode::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.Subnode.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DAGConfig_Subnode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.Subnode.name)
}

// optional string reserve = 3;
inline bool DAGConfig_Subnode::_internal_has_reserve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DAGConfig_Subnode::has_reserve() const {
  return _internal_has_reserve();
}
inline void DAGConfig_Subnode::clear_reserve() {
  _impl_.reserve_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DAGConfig_Subnode::reserve() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Subnode.reserve)
  return _internal_reserve();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DAGConfig_Subnode::set_reserve(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.reserve_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Subnode.reserve)
}
inline std::string* DAGConfig_Subnode::mutable_reserve() {
  std::string* _s = _internal_mutable_reserve();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.Subnode.reserve)
  return _s;
}
inline const std::string& DAGConfig_Subnode::_internal_reserve() const {
  return _impl_.reserve_.Get();
}
inline void DAGConfig_Subnode::_internal_set_reserve(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reserve_.Set(value, GetArenaForAllocation());
}
inline std::string* DAGConfig_Subnode::_internal_mutable_reserve() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reserve_.Mutable(GetArenaForAllocation());
}
inline std::string* DAGConfig_Subnode::release_reserve() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.Subnode.reserve)
  if (!_internal_has_reserve()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.reserve_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve_.IsDefault()) {
    _impl_.reserve_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DAGConfig_Subnode::set_allocated_reserve(std::string* reserve) {
  if (reserve != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reserve_.SetAllocated(reserve, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve_.IsDefault()) {
    _impl_.reserve_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.Subnode.reserve)
}

// optional .apollo.perception.DAGConfig.SubnodeType type = 4 [default = SUBNODE_NORMAL];
inline bool DAGConfig_Subnode::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DAGConfig_Subnode::has_type() const {
  return _internal_has_type();
}
inline void DAGConfig_Subnode::clear_type() {
  _impl_.type_ = 3;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::perception::DAGConfig_SubnodeType DAGConfig_Subnode::_internal_type() const {
  return static_cast< ::apollo::perception::DAGConfig_SubnodeType >(_impl_.type_);
}
inline ::apollo::perception::DAGConfig_SubnodeType DAGConfig_Subnode::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Subnode.type)
  return _internal_type();
}
inline void DAGConfig_Subnode::_internal_set_type(::apollo::perception::DAGConfig_SubnodeType value) {
  assert(::apollo::perception::DAGConfig_SubnodeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void DAGConfig_Subnode::set_type(::apollo::perception::DAGConfig_SubnodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Subnode.type)
}

// -------------------------------------------------------------------

// DAGConfig_SubnodeConfig

// repeated .apollo.perception.DAGConfig.Subnode subnodes = 1;
inline int DAGConfig_SubnodeConfig::_internal_subnodes_size() const {
  return _impl_.subnodes_.size();
}
inline int DAGConfig_SubnodeConfig::subnodes_size() const {
  return _internal_subnodes_size();
}
inline void DAGConfig_SubnodeConfig::clear_subnodes() {
  _impl_.subnodes_.Clear();
}
inline ::apollo::perception::DAGConfig_Subnode* DAGConfig_SubnodeConfig::mutable_subnodes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.SubnodeConfig.subnodes)
  return _impl_.subnodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Subnode >*
DAGConfig_SubnodeConfig::mutable_subnodes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DAGConfig.SubnodeConfig.subnodes)
  return &_impl_.subnodes_;
}
inline const ::apollo::perception::DAGConfig_Subnode& DAGConfig_SubnodeConfig::_internal_subnodes(int index) const {
  return _impl_.subnodes_.Get(index);
}
inline const ::apollo::perception::DAGConfig_Subnode& DAGConfig_SubnodeConfig::subnodes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.SubnodeConfig.subnodes)
  return _internal_subnodes(index);
}
inline ::apollo::perception::DAGConfig_Subnode* DAGConfig_SubnodeConfig::_internal_add_subnodes() {
  return _impl_.subnodes_.Add();
}
inline ::apollo::perception::DAGConfig_Subnode* DAGConfig_SubnodeConfig::add_subnodes() {
  ::apollo::perception::DAGConfig_Subnode* _add = _internal_add_subnodes();
  // @@protoc_insertion_point(field_add:apollo.perception.DAGConfig.SubnodeConfig.subnodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Subnode >&
DAGConfig_SubnodeConfig::subnodes() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DAGConfig.SubnodeConfig.subnodes)
  return _impl_.subnodes_;
}

// -------------------------------------------------------------------

// DAGConfig_Event

// required int32 id = 1;
inline bool DAGConfig_Event::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DAGConfig_Event::has_id() const {
  return _internal_has_id();
}
inline void DAGConfig_Event::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DAGConfig_Event::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DAGConfig_Event::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Event.id)
  return _internal_id();
}
inline void DAGConfig_Event::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void DAGConfig_Event::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Event.id)
}

// optional string name = 2;
inline bool DAGConfig_Event::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DAGConfig_Event::has_name() const {
  return _internal_has_name();
}
inline void DAGConfig_Event::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DAGConfig_Event::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Event.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DAGConfig_Event::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Event.name)
}
inline std::string* DAGConfig_Event::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.Event.name)
  return _s;
}
inline const std::string& DAGConfig_Event::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DAGConfig_Event::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DAGConfig_Event::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DAGConfig_Event::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.Event.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DAGConfig_Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.Event.name)
}

// -------------------------------------------------------------------

// DAGConfig_Edge

// required int32 id = 1;
inline bool DAGConfig_Edge::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DAGConfig_Edge::has_id() const {
  return _internal_has_id();
}
inline void DAGConfig_Edge::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t DAGConfig_Edge::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DAGConfig_Edge::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Edge.id)
  return _internal_id();
}
inline void DAGConfig_Edge::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void DAGConfig_Edge::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Edge.id)
}

// required int32 from_node = 2;
inline bool DAGConfig_Edge::_internal_has_from_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DAGConfig_Edge::has_from_node() const {
  return _internal_has_from_node();
}
inline void DAGConfig_Edge::clear_from_node() {
  _impl_.from_node_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DAGConfig_Edge::_internal_from_node() const {
  return _impl_.from_node_;
}
inline int32_t DAGConfig_Edge::from_node() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Edge.from_node)
  return _internal_from_node();
}
inline void DAGConfig_Edge::_internal_set_from_node(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.from_node_ = value;
}
inline void DAGConfig_Edge::set_from_node(int32_t value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Edge.from_node)
}

// required int32 to_node = 3;
inline bool DAGConfig_Edge::_internal_has_to_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DAGConfig_Edge::has_to_node() const {
  return _internal_has_to_node();
}
inline void DAGConfig_Edge::clear_to_node() {
  _impl_.to_node_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DAGConfig_Edge::_internal_to_node() const {
  return _impl_.to_node_;
}
inline int32_t DAGConfig_Edge::to_node() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Edge.to_node)
  return _internal_to_node();
}
inline void DAGConfig_Edge::_internal_set_to_node(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.to_node_ = value;
}
inline void DAGConfig_Edge::set_to_node(int32_t value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.Edge.to_node)
}

// repeated .apollo.perception.DAGConfig.Event events = 4;
inline int DAGConfig_Edge::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int DAGConfig_Edge::events_size() const {
  return _internal_events_size();
}
inline void DAGConfig_Edge::clear_events() {
  _impl_.events_.Clear();
}
inline ::apollo::perception::DAGConfig_Event* DAGConfig_Edge::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.Edge.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Event >*
DAGConfig_Edge::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DAGConfig.Edge.events)
  return &_impl_.events_;
}
inline const ::apollo::perception::DAGConfig_Event& DAGConfig_Edge::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::apollo::perception::DAGConfig_Event& DAGConfig_Edge::events(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.Edge.events)
  return _internal_events(index);
}
inline ::apollo::perception::DAGConfig_Event* DAGConfig_Edge::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::apollo::perception::DAGConfig_Event* DAGConfig_Edge::add_events() {
  ::apollo::perception::DAGConfig_Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:apollo.perception.DAGConfig.Edge.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Event >&
DAGConfig_Edge::events() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DAGConfig.Edge.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// DAGConfig_EdgeConfig

// repeated .apollo.perception.DAGConfig.Edge edges = 1;
inline int DAGConfig_EdgeConfig::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int DAGConfig_EdgeConfig::edges_size() const {
  return _internal_edges_size();
}
inline void DAGConfig_EdgeConfig::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::apollo::perception::DAGConfig_Edge* DAGConfig_EdgeConfig::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.EdgeConfig.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Edge >*
DAGConfig_EdgeConfig::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DAGConfig.EdgeConfig.edges)
  return &_impl_.edges_;
}
inline const ::apollo::perception::DAGConfig_Edge& DAGConfig_EdgeConfig::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::apollo::perception::DAGConfig_Edge& DAGConfig_EdgeConfig::edges(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.EdgeConfig.edges)
  return _internal_edges(index);
}
inline ::apollo::perception::DAGConfig_Edge* DAGConfig_EdgeConfig::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::apollo::perception::DAGConfig_Edge* DAGConfig_EdgeConfig::add_edges() {
  ::apollo::perception::DAGConfig_Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:apollo.perception.DAGConfig.EdgeConfig.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_Edge >&
DAGConfig_EdgeConfig::edges() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DAGConfig.EdgeConfig.edges)
  return _impl_.edges_;
}

// -------------------------------------------------------------------

// DAGConfig_SharedData

// required int32 id = 1;
inline bool DAGConfig_SharedData::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DAGConfig_SharedData::has_id() const {
  return _internal_has_id();
}
inline void DAGConfig_SharedData::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DAGConfig_SharedData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DAGConfig_SharedData::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.SharedData.id)
  return _internal_id();
}
inline void DAGConfig_SharedData::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void DAGConfig_SharedData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.SharedData.id)
}

// required string name = 2;
inline bool DAGConfig_SharedData::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DAGConfig_SharedData::has_name() const {
  return _internal_has_name();
}
inline void DAGConfig_SharedData::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DAGConfig_SharedData::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.SharedData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DAGConfig_SharedData::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.DAGConfig.SharedData.name)
}
inline std::string* DAGConfig_SharedData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.SharedData.name)
  return _s;
}
inline const std::string& DAGConfig_SharedData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DAGConfig_SharedData::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DAGConfig_SharedData::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DAGConfig_SharedData::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.SharedData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DAGConfig_SharedData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.SharedData.name)
}

// -------------------------------------------------------------------

// DAGConfig_SharedDataConfig

// repeated .apollo.perception.DAGConfig.SharedData datas = 1;
inline int DAGConfig_SharedDataConfig::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int DAGConfig_SharedDataConfig::datas_size() const {
  return _internal_datas_size();
}
inline void DAGConfig_SharedDataConfig::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::apollo::perception::DAGConfig_SharedData* DAGConfig_SharedDataConfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.SharedDataConfig.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_SharedData >*
DAGConfig_SharedDataConfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DAGConfig.SharedDataConfig.datas)
  return &_impl_.datas_;
}
inline const ::apollo::perception::DAGConfig_SharedData& DAGConfig_SharedDataConfig::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::apollo::perception::DAGConfig_SharedData& DAGConfig_SharedDataConfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.SharedDataConfig.datas)
  return _internal_datas(index);
}
inline ::apollo::perception::DAGConfig_SharedData* DAGConfig_SharedDataConfig::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::apollo::perception::DAGConfig_SharedData* DAGConfig_SharedDataConfig::add_datas() {
  ::apollo::perception::DAGConfig_SharedData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:apollo.perception.DAGConfig.SharedDataConfig.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::DAGConfig_SharedData >&
DAGConfig_SharedDataConfig::datas() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DAGConfig.SharedDataConfig.datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// DAGConfig

// required .apollo.perception.DAGConfig.SubnodeConfig subnode_config = 1;
inline bool DAGConfig::_internal_has_subnode_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subnode_config_ != nullptr);
  return value;
}
inline bool DAGConfig::has_subnode_config() const {
  return _internal_has_subnode_config();
}
inline void DAGConfig::clear_subnode_config() {
  if (_impl_.subnode_config_ != nullptr) _impl_.subnode_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::DAGConfig_SubnodeConfig& DAGConfig::_internal_subnode_config() const {
  const ::apollo::perception::DAGConfig_SubnodeConfig* p = _impl_.subnode_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::DAGConfig_SubnodeConfig&>(
      ::apollo::perception::_DAGConfig_SubnodeConfig_default_instance_);
}
inline const ::apollo::perception::DAGConfig_SubnodeConfig& DAGConfig::subnode_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.subnode_config)
  return _internal_subnode_config();
}
inline void DAGConfig::unsafe_arena_set_allocated_subnode_config(
    ::apollo::perception::DAGConfig_SubnodeConfig* subnode_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subnode_config_);
  }
  _impl_.subnode_config_ = subnode_config;
  if (subnode_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.DAGConfig.subnode_config)
}
inline ::apollo::perception::DAGConfig_SubnodeConfig* DAGConfig::release_subnode_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::DAGConfig_SubnodeConfig* temp = _impl_.subnode_config_;
  _impl_.subnode_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::DAGConfig_SubnodeConfig* DAGConfig::unsafe_arena_release_subnode_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.subnode_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::DAGConfig_SubnodeConfig* temp = _impl_.subnode_config_;
  _impl_.subnode_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::DAGConfig_SubnodeConfig* DAGConfig::_internal_mutable_subnode_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subnode_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::DAGConfig_SubnodeConfig>(GetArenaForAllocation());
    _impl_.subnode_config_ = p;
  }
  return _impl_.subnode_config_;
}
inline ::apollo::perception::DAGConfig_SubnodeConfig* DAGConfig::mutable_subnode_config() {
  ::apollo::perception::DAGConfig_SubnodeConfig* _msg = _internal_mutable_subnode_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.subnode_config)
  return _msg;
}
inline void DAGConfig::set_allocated_subnode_config(::apollo::perception::DAGConfig_SubnodeConfig* subnode_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subnode_config_;
  }
  if (subnode_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subnode_config);
    if (message_arena != submessage_arena) {
      subnode_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnode_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subnode_config_ = subnode_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.subnode_config)
}

// required .apollo.perception.DAGConfig.EdgeConfig edge_config = 2;
inline bool DAGConfig::_internal_has_edge_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edge_config_ != nullptr);
  return value;
}
inline bool DAGConfig::has_edge_config() const {
  return _internal_has_edge_config();
}
inline void DAGConfig::clear_edge_config() {
  if (_impl_.edge_config_ != nullptr) _impl_.edge_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::DAGConfig_EdgeConfig& DAGConfig::_internal_edge_config() const {
  const ::apollo::perception::DAGConfig_EdgeConfig* p = _impl_.edge_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::DAGConfig_EdgeConfig&>(
      ::apollo::perception::_DAGConfig_EdgeConfig_default_instance_);
}
inline const ::apollo::perception::DAGConfig_EdgeConfig& DAGConfig::edge_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.edge_config)
  return _internal_edge_config();
}
inline void DAGConfig::unsafe_arena_set_allocated_edge_config(
    ::apollo::perception::DAGConfig_EdgeConfig* edge_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_config_);
  }
  _impl_.edge_config_ = edge_config;
  if (edge_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.DAGConfig.edge_config)
}
inline ::apollo::perception::DAGConfig_EdgeConfig* DAGConfig::release_edge_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::DAGConfig_EdgeConfig* temp = _impl_.edge_config_;
  _impl_.edge_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::DAGConfig_EdgeConfig* DAGConfig::unsafe_arena_release_edge_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.edge_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::DAGConfig_EdgeConfig* temp = _impl_.edge_config_;
  _impl_.edge_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::DAGConfig_EdgeConfig* DAGConfig::_internal_mutable_edge_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.edge_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::DAGConfig_EdgeConfig>(GetArenaForAllocation());
    _impl_.edge_config_ = p;
  }
  return _impl_.edge_config_;
}
inline ::apollo::perception::DAGConfig_EdgeConfig* DAGConfig::mutable_edge_config() {
  ::apollo::perception::DAGConfig_EdgeConfig* _msg = _internal_mutable_edge_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.edge_config)
  return _msg;
}
inline void DAGConfig::set_allocated_edge_config(::apollo::perception::DAGConfig_EdgeConfig* edge_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edge_config_;
  }
  if (edge_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edge_config);
    if (message_arena != submessage_arena) {
      edge_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.edge_config_ = edge_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.edge_config)
}

// required .apollo.perception.DAGConfig.SharedDataConfig data_config = 3;
inline bool DAGConfig::_internal_has_data_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_config_ != nullptr);
  return value;
}
inline bool DAGConfig::has_data_config() const {
  return _internal_has_data_config();
}
inline void DAGConfig::clear_data_config() {
  if (_impl_.data_config_ != nullptr) _impl_.data_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::DAGConfig_SharedDataConfig& DAGConfig::_internal_data_config() const {
  const ::apollo::perception::DAGConfig_SharedDataConfig* p = _impl_.data_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::DAGConfig_SharedDataConfig&>(
      ::apollo::perception::_DAGConfig_SharedDataConfig_default_instance_);
}
inline const ::apollo::perception::DAGConfig_SharedDataConfig& DAGConfig::data_config() const {
  // @@protoc_insertion_point(field_get:apollo.perception.DAGConfig.data_config)
  return _internal_data_config();
}
inline void DAGConfig::unsafe_arena_set_allocated_data_config(
    ::apollo::perception::DAGConfig_SharedDataConfig* data_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_config_);
  }
  _impl_.data_config_ = data_config;
  if (data_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.DAGConfig.data_config)
}
inline ::apollo::perception::DAGConfig_SharedDataConfig* DAGConfig::release_data_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::DAGConfig_SharedDataConfig* temp = _impl_.data_config_;
  _impl_.data_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::DAGConfig_SharedDataConfig* DAGConfig::unsafe_arena_release_data_config() {
  // @@protoc_insertion_point(field_release:apollo.perception.DAGConfig.data_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::DAGConfig_SharedDataConfig* temp = _impl_.data_config_;
  _impl_.data_config_ = nullptr;
  return temp;
}
inline ::apollo::perception::DAGConfig_SharedDataConfig* DAGConfig::_internal_mutable_data_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::DAGConfig_SharedDataConfig>(GetArenaForAllocation());
    _impl_.data_config_ = p;
  }
  return _impl_.data_config_;
}
inline ::apollo::perception::DAGConfig_SharedDataConfig* DAGConfig::mutable_data_config() {
  ::apollo::perception::DAGConfig_SharedDataConfig* _msg = _internal_mutable_data_config();
  // @@protoc_insertion_point(field_mutable:apollo.perception.DAGConfig.data_config)
  return _msg;
}
inline void DAGConfig::set_allocated_data_config(::apollo::perception::DAGConfig_SharedDataConfig* data_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_config_;
  }
  if (data_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_config);
    if (message_arena != submessage_arena) {
      data_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_config_ = data_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.DAGConfig.data_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::DAGConfig_SubnodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::DAGConfig_SubnodeType>() {
  return ::apollo::perception::DAGConfig_SubnodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fdag_5fconfig_2eproto
