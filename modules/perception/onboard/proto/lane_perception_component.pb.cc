// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lane_perception_component.proto

#include "modules/perception/onboard/proto/lane_perception_component.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace onboard {
PROTOBUF_CONSTEXPR LaneDetection::LaneDetection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_names_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_camera_channel_names_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera_lane_perception_conf_dir_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera_lane_perception_conf_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_lanes_channel_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lane_calibration_working_sensor_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibrator_method_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calib_service_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.visual_debug_folder_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.visual_camera_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_offset_)*/0
  , /*decltype(_impl_.default_camera_pitch_)*/0
  , /*decltype(_impl_.enable_undistortion_)*/false
  , /*decltype(_impl_.enable_visualization_)*/false
  , /*decltype(_impl_.write_visual_img_)*/false
  , /*decltype(_impl_.run_calib_service_)*/true
  , /*decltype(_impl_.frame_capacity_)*/20
  , /*decltype(_impl_.image_channel_num_)*/3
  , /*decltype(_impl_.default_camera_height_)*/1.5
  , /*decltype(_impl_.ts_diff_)*/0.1} {}
struct LaneDetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDetectionDefaultTypeInternal() {}
  union {
    LaneDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDetectionDefaultTypeInternal _LaneDetection_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.camera_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.input_camera_channel_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.timestamp_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.camera_lane_perception_conf_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.camera_lane_perception_conf_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.frame_capacity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.image_channel_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.enable_undistortion_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.enable_visualization_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.output_lanes_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.default_camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.default_camera_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.lane_calibration_working_sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.calibrator_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.calib_service_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.run_calib_service_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.ts_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.visual_debug_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.visual_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LaneDetection, _impl_.write_visual_img_),
  0,
  1,
  10,
  2,
  3,
  16,
  17,
  12,
  13,
  4,
  11,
  18,
  5,
  6,
  7,
  15,
  19,
  8,
  9,
  14,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, -1, sizeof(::apollo::perception::onboard::LaneDetection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::onboard::_LaneDetection_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@modules/perception/onboard/proto/lane_"
  "perception_component.proto\022\031apollo.perce"
  "ption.onboard\"\207\007\n\rLaneDetection\022*\n\014camer"
  "a_names\030\001 \001(\t:\024front_6mm,front_12mm\022p\n\032i"
  "nput_camera_channel_names\030\002 \001(\t:L/apollo"
  "/sensor/camera/front_6mm/image,/apollo/s"
  "ensor/camera/front_12mm/image\022\033\n\020timesta"
  "mp_offset\030\003 \001(\001:\0010\022\?\n\037camera_lane_percep"
  "tion_conf_dir\030\004 \001(\t:\026conf/perception/cam"
  "era\0221\n camera_lane_perception_conf_file\030"
  "\005 \001(\t:\007lane.pt\022\032\n\016frame_capacity\030\006 \001(\005:\002"
  "20\022\034\n\021image_channel_num\030\007 \001(\005:\0013\022\"\n\023enab"
  "le_undistortion\030\010 \001(\010:\005false\022#\n\024enable_v"
  "isualization\030\t \001(\010:\005false\0224\n\031output_lane"
  "s_channel_name\030\n \001(\t:\021/perception/lanes\022"
  "\037\n\024default_camera_pitch\030\013 \001(\001:\0010\022\"\n\025defa"
  "ult_camera_height\030\014 \001(\001:\0031.5\0227\n$lane_cal"
  "ibration_working_sensor_name\030\r \001(\t:\tfron"
  "t_6mm\022-\n\021calibrator_method\030\016 \001(\t:\022LaneLi"
  "neCalibrator\0224\n\022calib_service_name\030\017 \001(\t"
  ":\030OnlineCalibrationService\022\037\n\021run_calib_"
  "service\030\020 \001(\010:\004true\022\024\n\007ts_diff\030\021 \001(\001:\0030."
  "1\0221\n\023visual_debug_folder\030\022 \001(\t:\024/apollo/"
  "debug_output\022 \n\rvisual_camera\030\023 \001(\t:\tfro"
  "nt_6mm\022\037\n\020write_visual_img\030\024 \001(\010:\005false"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto = {
    false, false, 999, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto,
    "modules/perception/onboard/proto/lane_perception_component.proto",
    &descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto,
    file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto(&descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class LaneDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneDetection>()._impl_._has_bits_);
  static void set_has_camera_names(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_camera_channel_names(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_camera_lane_perception_conf_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_lane_perception_conf_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_image_channel_num(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_undistortion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_enable_visualization(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_output_lanes_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_camera_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_default_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lane_calibration_working_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calibrator_method(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_calib_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_run_calib_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ts_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_visual_debug_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_visual_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_write_visual_img(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_names_{{{"front_6mm,front_12mm", 20}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_input_camera_channel_names_{{{"/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image", 76}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_{{{"conf/perception/camera", 22}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_{{{"lane.pt", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_{{{"/perception/lanes", 17}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_{{{"front_6mm", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_calibrator_method_{{{"LaneLineCalibrator", 18}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_calib_service_name_{{{"OnlineCalibrationService", 24}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_visual_debug_folder_{{{"/apollo/debug_output", 20}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_visual_camera_{{{"front_6mm", 9}}, {nullptr}};
LaneDetection::LaneDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.onboard.LaneDetection)
}
LaneDetection::LaneDetection(const LaneDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_names_){}
    , decltype(_impl_.input_camera_channel_names_){}
    , decltype(_impl_.camera_lane_perception_conf_dir_){}
    , decltype(_impl_.camera_lane_perception_conf_file_){}
    , decltype(_impl_.output_lanes_channel_name_){}
    , decltype(_impl_.lane_calibration_working_sensor_name_){}
    , decltype(_impl_.calibrator_method_){}
    , decltype(_impl_.calib_service_name_){}
    , decltype(_impl_.visual_debug_folder_){}
    , decltype(_impl_.visual_camera_){}
    , decltype(_impl_.timestamp_offset_){}
    , decltype(_impl_.default_camera_pitch_){}
    , decltype(_impl_.enable_undistortion_){}
    , decltype(_impl_.enable_visualization_){}
    , decltype(_impl_.write_visual_img_){}
    , decltype(_impl_.run_calib_service_){}
    , decltype(_impl_.frame_capacity_){}
    , decltype(_impl_.image_channel_num_){}
    , decltype(_impl_.default_camera_height_){}
    , decltype(_impl_.ts_diff_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_names_.InitDefault();
  if (from._internal_has_camera_names()) {
    _impl_.camera_names_.Set(from._internal_camera_names(), 
      GetArenaForAllocation());
  }
  _impl_.input_camera_channel_names_.InitDefault();
  if (from._internal_has_input_camera_channel_names()) {
    _impl_.input_camera_channel_names_.Set(from._internal_input_camera_channel_names(), 
      GetArenaForAllocation());
  }
  _impl_.camera_lane_perception_conf_dir_.InitDefault();
  if (from._internal_has_camera_lane_perception_conf_dir()) {
    _impl_.camera_lane_perception_conf_dir_.Set(from._internal_camera_lane_perception_conf_dir(), 
      GetArenaForAllocation());
  }
  _impl_.camera_lane_perception_conf_file_.InitDefault();
  if (from._internal_has_camera_lane_perception_conf_file()) {
    _impl_.camera_lane_perception_conf_file_.Set(from._internal_camera_lane_perception_conf_file(), 
      GetArenaForAllocation());
  }
  _impl_.output_lanes_channel_name_.InitDefault();
  if (from._internal_has_output_lanes_channel_name()) {
    _impl_.output_lanes_channel_name_.Set(from._internal_output_lanes_channel_name(), 
      GetArenaForAllocation());
  }
  _impl_.lane_calibration_working_sensor_name_.InitDefault();
  if (from._internal_has_lane_calibration_working_sensor_name()) {
    _impl_.lane_calibration_working_sensor_name_.Set(from._internal_lane_calibration_working_sensor_name(), 
      GetArenaForAllocation());
  }
  _impl_.calibrator_method_.InitDefault();
  if (from._internal_has_calibrator_method()) {
    _impl_.calibrator_method_.Set(from._internal_calibrator_method(), 
      GetArenaForAllocation());
  }
  _impl_.calib_service_name_.InitDefault();
  if (from._internal_has_calib_service_name()) {
    _impl_.calib_service_name_.Set(from._internal_calib_service_name(), 
      GetArenaForAllocation());
  }
  _impl_.visual_debug_folder_.InitDefault();
  if (from._internal_has_visual_debug_folder()) {
    _impl_.visual_debug_folder_.Set(from._internal_visual_debug_folder(), 
      GetArenaForAllocation());
  }
  _impl_.visual_camera_.InitDefault();
  if (from._internal_has_visual_camera()) {
    _impl_.visual_camera_.Set(from._internal_visual_camera(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_offset_, &from._impl_.timestamp_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ts_diff_) -
    reinterpret_cast<char*>(&_impl_.timestamp_offset_)) + sizeof(_impl_.ts_diff_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.LaneDetection)
}

inline void LaneDetection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_names_){}
    , decltype(_impl_.input_camera_channel_names_){}
    , decltype(_impl_.camera_lane_perception_conf_dir_){}
    , decltype(_impl_.camera_lane_perception_conf_file_){}
    , decltype(_impl_.output_lanes_channel_name_){}
    , decltype(_impl_.lane_calibration_working_sensor_name_){}
    , decltype(_impl_.calibrator_method_){}
    , decltype(_impl_.calib_service_name_){}
    , decltype(_impl_.visual_debug_folder_){}
    , decltype(_impl_.visual_camera_){}
    , decltype(_impl_.timestamp_offset_){0}
    , decltype(_impl_.default_camera_pitch_){0}
    , decltype(_impl_.enable_undistortion_){false}
    , decltype(_impl_.enable_visualization_){false}
    , decltype(_impl_.write_visual_img_){false}
    , decltype(_impl_.run_calib_service_){true}
    , decltype(_impl_.frame_capacity_){20}
    , decltype(_impl_.image_channel_num_){3}
    , decltype(_impl_.default_camera_height_){1.5}
    , decltype(_impl_.ts_diff_){0.1}
  };
  _impl_.camera_names_.InitDefault();
  _impl_.input_camera_channel_names_.InitDefault();
  _impl_.camera_lane_perception_conf_dir_.InitDefault();
  _impl_.camera_lane_perception_conf_file_.InitDefault();
  _impl_.output_lanes_channel_name_.InitDefault();
  _impl_.lane_calibration_working_sensor_name_.InitDefault();
  _impl_.calibrator_method_.InitDefault();
  _impl_.calib_service_name_.InitDefault();
  _impl_.visual_debug_folder_.InitDefault();
  _impl_.visual_camera_.InitDefault();
}

LaneDetection::~LaneDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.LaneDetection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_names_.Destroy();
  _impl_.input_camera_channel_names_.Destroy();
  _impl_.camera_lane_perception_conf_dir_.Destroy();
  _impl_.camera_lane_perception_conf_file_.Destroy();
  _impl_.output_lanes_channel_name_.Destroy();
  _impl_.lane_calibration_working_sensor_name_.Destroy();
  _impl_.calibrator_method_.Destroy();
  _impl_.calib_service_name_.Destroy();
  _impl_.visual_debug_folder_.Destroy();
  _impl_.visual_camera_.Destroy();
}

void LaneDetection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.LaneDetection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.camera_names_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.input_camera_channel_names_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_input_camera_channel_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.camera_lane_perception_conf_dir_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.camera_lane_perception_conf_file_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.output_lanes_channel_name_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.lane_calibration_working_sensor_name_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      _impl_.calibrator_method_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_calibrator_method_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      _impl_.calib_service_name_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_calib_service_name_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.visual_debug_folder_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_visual_debug_folder_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      _impl_.visual_camera_.ClearToDefault(::apollo::perception::onboard::LaneDetection::Impl_::_i_give_permission_to_break_this_code_default_visual_camera_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.timestamp_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.write_visual_img_) -
        reinterpret_cast<char*>(&_impl_.timestamp_offset_)) + sizeof(_impl_.write_visual_img_));
    _impl_.run_calib_service_ = true;
  }
  if (cached_has_bits & 0x000f0000u) {
    _impl_.frame_capacity_ = 20;
    _impl_.image_channel_num_ = 3;
    _impl_.default_camera_height_ = 1.5;
    _impl_.ts_diff_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneDetection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_names();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.camera_names");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_camera_channel_names();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.input_camera_channel_names");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_offset = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_timestamp_offset(&has_bits);
          _impl_.timestamp_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_lane_perception_conf_dir = 4 [default = "conf/perception/camera"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_camera_lane_perception_conf_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string camera_lane_perception_conf_file = 5 [default = "lane.pt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_camera_lane_perception_conf_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_capacity = 6 [default = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_frame_capacity(&has_bits);
          _impl_.frame_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_channel_num = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_image_channel_num(&has_bits);
          _impl_.image_channel_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_undistortion = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_enable_undistortion(&has_bits);
          _impl_.enable_undistortion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_visualization = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enable_visualization(&has_bits);
          _impl_.enable_visualization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_lanes_channel_name = 10 [default = "/perception/lanes"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_output_lanes_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.output_lanes_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double default_camera_pitch = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_default_camera_pitch(&has_bits);
          _impl_.default_camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_camera_height = 12 [default = 1.5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_default_camera_height(&has_bits);
          _impl_.default_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_calibration_working_sensor_name = 13 [default = "front_6mm"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_lane_calibration_working_sensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calibrator_method = 14 [default = "LaneLineCalibrator"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_calibrator_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.calibrator_method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calib_service_name = 15 [default = "OnlineCalibrationService"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_calib_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.calib_service_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool run_calib_service = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_run_calib_service(&has_bits);
          _impl_.run_calib_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ts_diff = 17 [default = 0.1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_ts_diff(&has_bits);
          _impl_.ts_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string visual_debug_folder = 18 [default = "/apollo/debug_output"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_visual_debug_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.visual_debug_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string visual_camera = 19 [default = "front_6mm"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_visual_camera();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.onboard.LaneDetection.visual_camera");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool write_visual_img = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_write_visual_img(&has_bits);
          _impl_.write_visual_img_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneDetection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.LaneDetection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_names().data(), static_cast<int>(this->_internal_camera_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.camera_names");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_names(), target);
  }

  // optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_camera_channel_names().data(), static_cast<int>(this->_internal_input_camera_channel_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.input_camera_channel_names");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_camera_channel_names(), target);
  }

  // optional double timestamp_offset = 3 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp_offset(), target);
  }

  // optional string camera_lane_perception_conf_dir = 4 [default = "conf/perception/camera"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_lane_perception_conf_dir().data(), static_cast<int>(this->_internal_camera_lane_perception_conf_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera_lane_perception_conf_dir(), target);
  }

  // optional string camera_lane_perception_conf_file = 5 [default = "lane.pt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_lane_perception_conf_file().data(), static_cast<int>(this->_internal_camera_lane_perception_conf_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_camera_lane_perception_conf_file(), target);
  }

  // optional int32 frame_capacity = 6 [default = 20];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_capacity(), target);
  }

  // optional int32 image_channel_num = 7 [default = 3];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_image_channel_num(), target);
  }

  // optional bool enable_undistortion = 8 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_undistortion(), target);
  }

  // optional bool enable_visualization = 9 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_visualization(), target);
  }

  // optional string output_lanes_channel_name = 10 [default = "/perception/lanes"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_lanes_channel_name().data(), static_cast<int>(this->_internal_output_lanes_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.output_lanes_channel_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_output_lanes_channel_name(), target);
  }

  // optional double default_camera_pitch = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_default_camera_pitch(), target);
  }

  // optional double default_camera_height = 12 [default = 1.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_default_camera_height(), target);
  }

  // optional string lane_calibration_working_sensor_name = 13 [default = "front_6mm"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_calibration_working_sensor_name().data(), static_cast<int>(this->_internal_lane_calibration_working_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_lane_calibration_working_sensor_name(), target);
  }

  // optional string calibrator_method = 14 [default = "LaneLineCalibrator"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibrator_method().data(), static_cast<int>(this->_internal_calibrator_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.calibrator_method");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_calibrator_method(), target);
  }

  // optional string calib_service_name = 15 [default = "OnlineCalibrationService"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_service_name().data(), static_cast<int>(this->_internal_calib_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.calib_service_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_calib_service_name(), target);
  }

  // optional bool run_calib_service = 16 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_run_calib_service(), target);
  }

  // optional double ts_diff = 17 [default = 0.1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_ts_diff(), target);
  }

  // optional string visual_debug_folder = 18 [default = "/apollo/debug_output"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visual_debug_folder().data(), static_cast<int>(this->_internal_visual_debug_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.visual_debug_folder");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_visual_debug_folder(), target);
  }

  // optional string visual_camera = 19 [default = "front_6mm"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visual_camera().data(), static_cast<int>(this->_internal_visual_camera().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LaneDetection.visual_camera");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_visual_camera(), target);
  }

  // optional bool write_visual_img = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_write_visual_img(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.LaneDetection)
  return target;
}

size_t LaneDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.LaneDetection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_names());
    }

    // optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_camera_channel_names());
    }

    // optional string camera_lane_perception_conf_dir = 4 [default = "conf/perception/camera"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_lane_perception_conf_dir());
    }

    // optional string camera_lane_perception_conf_file = 5 [default = "lane.pt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_lane_perception_conf_file());
    }

    // optional string output_lanes_channel_name = 10 [default = "/perception/lanes"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_lanes_channel_name());
    }

    // optional string lane_calibration_working_sensor_name = 13 [default = "front_6mm"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_calibration_working_sensor_name());
    }

    // optional string calibrator_method = 14 [default = "LaneLineCalibrator"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibrator_method());
    }

    // optional string calib_service_name = 15 [default = "OnlineCalibrationService"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_service_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string visual_debug_folder = 18 [default = "/apollo/debug_output"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visual_debug_folder());
    }

    // optional string visual_camera = 19 [default = "front_6mm"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visual_camera());
    }

    // optional double timestamp_offset = 3 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double default_camera_pitch = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool enable_undistortion = 8 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_visualization = 9 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool write_visual_img = 20 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool run_calib_service = 16 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int32 frame_capacity = 6 [default = 20];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_capacity());
    }

    // optional int32 image_channel_num = 7 [default = 3];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_channel_num());
    }

    // optional double default_camera_height = 12 [default = 1.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double ts_diff = 17 [default = 0.1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneDetection::GetClassData() const { return &_class_data_; }

void LaneDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneDetection *>(to)->MergeFrom(
      static_cast<const LaneDetection &>(from));
}


void LaneDetection::MergeFrom(const LaneDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.LaneDetection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_names(from._internal_camera_names());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_camera_channel_names(from._internal_input_camera_channel_names());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_camera_lane_perception_conf_dir(from._internal_camera_lane_perception_conf_dir());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_camera_lane_perception_conf_file(from._internal_camera_lane_perception_conf_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_output_lanes_channel_name(from._internal_output_lanes_channel_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_lane_calibration_working_sensor_name(from._internal_lane_calibration_working_sensor_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_calibrator_method(from._internal_calibrator_method());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_calib_service_name(from._internal_calib_service_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_visual_debug_folder(from._internal_visual_debug_folder());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_visual_camera(from._internal_visual_camera());
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.timestamp_offset_ = from._impl_.timestamp_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.default_camera_pitch_ = from._impl_.default_camera_pitch_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.enable_undistortion_ = from._impl_.enable_undistortion_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.enable_visualization_ = from._impl_.enable_visualization_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.write_visual_img_ = from._impl_.write_visual_img_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.run_calib_service_ = from._impl_.run_calib_service_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.frame_capacity_ = from._impl_.frame_capacity_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.image_channel_num_ = from._impl_.image_channel_num_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.default_camera_height_ = from._impl_.default_camera_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.ts_diff_ = from._impl_.ts_diff_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneDetection::CopyFrom(const LaneDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.LaneDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneDetection::IsInitialized() const {
  return true;
}

void LaneDetection::InternalSwap(LaneDetection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_names_, lhs_arena,
      &other->_impl_.camera_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_camera_channel_names_, lhs_arena,
      &other->_impl_.input_camera_channel_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_lane_perception_conf_dir_, lhs_arena,
      &other->_impl_.camera_lane_perception_conf_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_lane_perception_conf_file_, lhs_arena,
      &other->_impl_.camera_lane_perception_conf_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_lanes_channel_name_, lhs_arena,
      &other->_impl_.output_lanes_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_calibration_working_sensor_name_, lhs_arena,
      &other->_impl_.lane_calibration_working_sensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibrator_method_, lhs_arena,
      &other->_impl_.calibrator_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calib_service_name_, lhs_arena,
      &other->_impl_.calib_service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.visual_debug_folder_, lhs_arena,
      &other->_impl_.visual_debug_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.visual_camera_, lhs_arena,
      &other->_impl_.visual_camera_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneDetection, _impl_.write_visual_img_)
      + sizeof(LaneDetection::_impl_.write_visual_img_)
      - PROTOBUF_FIELD_OFFSET(LaneDetection, _impl_.timestamp_offset_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_offset_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_offset_));
  swap(_impl_.run_calib_service_, other->_impl_.run_calib_service_);
  swap(_impl_.frame_capacity_, other->_impl_.frame_capacity_);
  swap(_impl_.image_channel_num_, other->_impl_.image_channel_num_);
  swap(_impl_.default_camera_height_, other->_impl_.default_camera_height_);
  swap(_impl_.ts_diff_, other->_impl_.ts_diff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneDetection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto_getter, &descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto_once,
      file_level_metadata_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::LaneDetection*
Arena::CreateMaybeMessage< ::apollo::perception::onboard::LaneDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::onboard::LaneDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
