// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/trafficlights_perception_component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class TrafficLight;
struct TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::TrafficLight* Arena::CreateMaybeMessage<::apollo::perception::onboard::TrafficLight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class TrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {}
  ~TrafficLight() override;
  explicit PROTOBUF_CONSTEXPR TrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.TrafficLight";
  }
  protected:
  explicit TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlTf2FrameIdFieldNumber = 1,
    kTlTf2ChildFrameIdFieldNumber = 2,
    kCameraNamesFieldNumber = 4,
    kCameraChannelNamesFieldNumber = 5,
    kCameraTrafficLightPerceptionConfDirFieldNumber = 12,
    kCameraTrafficLightPerceptionConfFileFieldNumber = 13,
    kTrafficLightOutputChannelNameFieldNumber = 15,
    kSimulationChannelNameFieldNumber = 16,
    kV2XTrafficlightsInputChannelNameFieldNumber = 17,
    kTlPreprocessorNameFieldNumber = 20,
    kTlImageTimestampOffsetFieldNumber = 6,
    kMaxV2XMsgBuffSizeFieldNumber = 19,
    kTf2TimeoutSecondFieldNumber = 3,
    kQueryTfIntervalSecondsFieldNumber = 8,
    kValidHdmapIntervalFieldNumber = 9,
    kImageSysTsDiffThresholdFieldNumber = 10,
    kMaxProcessImageFpsFieldNumber = 7,
    kDefaultImageBorderSizeFieldNumber = 14,
    kSyncIntervalSecondsFieldNumber = 11,
    kV2XSyncIntervalSecondsFieldNumber = 18,
  };
  // optional string tl_tf2_frame_id = 1 [default = "world"];
  bool has_tl_tf2_frame_id() const;
  private:
  bool _internal_has_tl_tf2_frame_id() const;
  public:
  void clear_tl_tf2_frame_id();
  const std::string& tl_tf2_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tl_tf2_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tl_tf2_frame_id();
  PROTOBUF_NODISCARD std::string* release_tl_tf2_frame_id();
  void set_allocated_tl_tf2_frame_id(std::string* tl_tf2_frame_id);
  private:
  const std::string& _internal_tl_tf2_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tl_tf2_frame_id(const std::string& value);
  std::string* _internal_mutable_tl_tf2_frame_id();
  public:

  // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
  bool has_tl_tf2_child_frame_id() const;
  private:
  bool _internal_has_tl_tf2_child_frame_id() const;
  public:
  void clear_tl_tf2_child_frame_id();
  const std::string& tl_tf2_child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tl_tf2_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tl_tf2_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_tl_tf2_child_frame_id();
  void set_allocated_tl_tf2_child_frame_id(std::string* tl_tf2_child_frame_id);
  private:
  const std::string& _internal_tl_tf2_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tl_tf2_child_frame_id(const std::string& value);
  std::string* _internal_mutable_tl_tf2_child_frame_id();
  public:

  // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
  bool has_camera_names() const;
  private:
  bool _internal_has_camera_names() const;
  public:
  void clear_camera_names();
  const std::string& camera_names() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_names(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_names();
  PROTOBUF_NODISCARD std::string* release_camera_names();
  void set_allocated_camera_names(std::string* camera_names);
  private:
  const std::string& _internal_camera_names() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_names(const std::string& value);
  std::string* _internal_mutable_camera_names();
  public:

  // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"];
  bool has_camera_channel_names() const;
  private:
  bool _internal_has_camera_channel_names() const;
  public:
  void clear_camera_channel_names();
  const std::string& camera_channel_names() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_channel_names(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_channel_names();
  PROTOBUF_NODISCARD std::string* release_camera_channel_names();
  void set_allocated_camera_channel_names(std::string* camera_channel_names);
  private:
  const std::string& _internal_camera_channel_names() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_channel_names(const std::string& value);
  std::string* _internal_mutable_camera_channel_names();
  public:

  // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
  bool has_camera_traffic_light_perception_conf_dir() const;
  private:
  bool _internal_has_camera_traffic_light_perception_conf_dir() const;
  public:
  void clear_camera_traffic_light_perception_conf_dir();
  const std::string& camera_traffic_light_perception_conf_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_traffic_light_perception_conf_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_traffic_light_perception_conf_dir();
  PROTOBUF_NODISCARD std::string* release_camera_traffic_light_perception_conf_dir();
  void set_allocated_camera_traffic_light_perception_conf_dir(std::string* camera_traffic_light_perception_conf_dir);
  private:
  const std::string& _internal_camera_traffic_light_perception_conf_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_traffic_light_perception_conf_dir(const std::string& value);
  std::string* _internal_mutable_camera_traffic_light_perception_conf_dir();
  public:

  // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
  bool has_camera_traffic_light_perception_conf_file() const;
  private:
  bool _internal_has_camera_traffic_light_perception_conf_file() const;
  public:
  void clear_camera_traffic_light_perception_conf_file();
  const std::string& camera_traffic_light_perception_conf_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_traffic_light_perception_conf_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_traffic_light_perception_conf_file();
  PROTOBUF_NODISCARD std::string* release_camera_traffic_light_perception_conf_file();
  void set_allocated_camera_traffic_light_perception_conf_file(std::string* camera_traffic_light_perception_conf_file);
  private:
  const std::string& _internal_camera_traffic_light_perception_conf_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_traffic_light_perception_conf_file(const std::string& value);
  std::string* _internal_mutable_camera_traffic_light_perception_conf_file();
  public:

  // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
  bool has_traffic_light_output_channel_name() const;
  private:
  bool _internal_has_traffic_light_output_channel_name() const;
  public:
  void clear_traffic_light_output_channel_name();
  const std::string& traffic_light_output_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traffic_light_output_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traffic_light_output_channel_name();
  PROTOBUF_NODISCARD std::string* release_traffic_light_output_channel_name();
  void set_allocated_traffic_light_output_channel_name(std::string* traffic_light_output_channel_name);
  private:
  const std::string& _internal_traffic_light_output_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traffic_light_output_channel_name(const std::string& value);
  std::string* _internal_mutable_traffic_light_output_channel_name();
  public:

  // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
  bool has_simulation_channel_name() const;
  private:
  bool _internal_has_simulation_channel_name() const;
  public:
  void clear_simulation_channel_name();
  const std::string& simulation_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_simulation_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_simulation_channel_name();
  PROTOBUF_NODISCARD std::string* release_simulation_channel_name();
  void set_allocated_simulation_channel_name(std::string* simulation_channel_name);
  private:
  const std::string& _internal_simulation_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simulation_channel_name(const std::string& value);
  std::string* _internal_mutable_simulation_channel_name();
  public:

  // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
  bool has_v2x_trafficlights_input_channel_name() const;
  private:
  bool _internal_has_v2x_trafficlights_input_channel_name() const;
  public:
  void clear_v2x_trafficlights_input_channel_name();
  const std::string& v2x_trafficlights_input_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v2x_trafficlights_input_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v2x_trafficlights_input_channel_name();
  PROTOBUF_NODISCARD std::string* release_v2x_trafficlights_input_channel_name();
  void set_allocated_v2x_trafficlights_input_channel_name(std::string* v2x_trafficlights_input_channel_name);
  private:
  const std::string& _internal_v2x_trafficlights_input_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v2x_trafficlights_input_channel_name(const std::string& value);
  std::string* _internal_mutable_v2x_trafficlights_input_channel_name();
  public:

  // optional string tl_preprocessor_name = 20 [default = "TLPreprocessor"];
  bool has_tl_preprocessor_name() const;
  private:
  bool _internal_has_tl_preprocessor_name() const;
  public:
  void clear_tl_preprocessor_name();
  const std::string& tl_preprocessor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tl_preprocessor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tl_preprocessor_name();
  PROTOBUF_NODISCARD std::string* release_tl_preprocessor_name();
  void set_allocated_tl_preprocessor_name(std::string* tl_preprocessor_name);
  private:
  const std::string& _internal_tl_preprocessor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tl_preprocessor_name(const std::string& value);
  std::string* _internal_mutable_tl_preprocessor_name();
  public:

  // optional double tl_image_timestamp_offset = 6 [default = 0];
  bool has_tl_image_timestamp_offset() const;
  private:
  bool _internal_has_tl_image_timestamp_offset() const;
  public:
  void clear_tl_image_timestamp_offset();
  double tl_image_timestamp_offset() const;
  void set_tl_image_timestamp_offset(double value);
  private:
  double _internal_tl_image_timestamp_offset() const;
  void _internal_set_tl_image_timestamp_offset(double value);
  public:

  // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
  bool has_max_v2x_msg_buff_size() const;
  private:
  bool _internal_has_max_v2x_msg_buff_size() const;
  public:
  void clear_max_v2x_msg_buff_size();
  int32_t max_v2x_msg_buff_size() const;
  void set_max_v2x_msg_buff_size(int32_t value);
  private:
  int32_t _internal_max_v2x_msg_buff_size() const;
  void _internal_set_max_v2x_msg_buff_size(int32_t value);
  public:

  // optional double tf2_timeout_second = 3 [default = 0.01];
  bool has_tf2_timeout_second() const;
  private:
  bool _internal_has_tf2_timeout_second() const;
  public:
  void clear_tf2_timeout_second();
  double tf2_timeout_second() const;
  void set_tf2_timeout_second(double value);
  private:
  double _internal_tf2_timeout_second() const;
  void _internal_set_tf2_timeout_second(double value);
  public:

  // optional double query_tf_interval_seconds = 8 [default = 0.3];
  bool has_query_tf_interval_seconds() const;
  private:
  bool _internal_has_query_tf_interval_seconds() const;
  public:
  void clear_query_tf_interval_seconds();
  double query_tf_interval_seconds() const;
  void set_query_tf_interval_seconds(double value);
  private:
  double _internal_query_tf_interval_seconds() const;
  void _internal_set_query_tf_interval_seconds(double value);
  public:

  // optional double valid_hdmap_interval = 9 [default = 1.5];
  bool has_valid_hdmap_interval() const;
  private:
  bool _internal_has_valid_hdmap_interval() const;
  public:
  void clear_valid_hdmap_interval();
  double valid_hdmap_interval() const;
  void set_valid_hdmap_interval(double value);
  private:
  double _internal_valid_hdmap_interval() const;
  void _internal_set_valid_hdmap_interval(double value);
  public:

  // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
  bool has_image_sys_ts_diff_threshold() const;
  private:
  bool _internal_has_image_sys_ts_diff_threshold() const;
  public:
  void clear_image_sys_ts_diff_threshold();
  double image_sys_ts_diff_threshold() const;
  void set_image_sys_ts_diff_threshold(double value);
  private:
  double _internal_image_sys_ts_diff_threshold() const;
  void _internal_set_image_sys_ts_diff_threshold(double value);
  public:

  // optional int32 max_process_image_fps = 7 [default = 8];
  bool has_max_process_image_fps() const;
  private:
  bool _internal_has_max_process_image_fps() const;
  public:
  void clear_max_process_image_fps();
  int32_t max_process_image_fps() const;
  void set_max_process_image_fps(int32_t value);
  private:
  int32_t _internal_max_process_image_fps() const;
  void _internal_set_max_process_image_fps(int32_t value);
  public:

  // optional int32 default_image_border_size = 14 [default = 100];
  bool has_default_image_border_size() const;
  private:
  bool _internal_has_default_image_border_size() const;
  public:
  void clear_default_image_border_size();
  int32_t default_image_border_size() const;
  void set_default_image_border_size(int32_t value);
  private:
  int32_t _internal_default_image_border_size() const;
  void _internal_set_default_image_border_size(int32_t value);
  public:

  // optional double sync_interval_seconds = 11 [default = 0.5];
  bool has_sync_interval_seconds() const;
  private:
  bool _internal_has_sync_interval_seconds() const;
  public:
  void clear_sync_interval_seconds();
  double sync_interval_seconds() const;
  void set_sync_interval_seconds(double value);
  private:
  double _internal_sync_interval_seconds() const;
  void _internal_set_sync_interval_seconds(double value);
  public:

  // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
  bool has_v2x_sync_interval_seconds() const;
  private:
  bool _internal_has_v2x_sync_interval_seconds() const;
  public:
  void clear_v2x_sync_interval_seconds();
  double v2x_sync_interval_seconds() const;
  void set_v2x_sync_interval_seconds(double value);
  private:
  double _internal_v2x_sync_interval_seconds() const;
  void _internal_set_v2x_sync_interval_seconds(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.TrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_tl_tf2_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tl_tf2_frame_id_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tl_tf2_child_frame_id_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_camera_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_names_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_camera_channel_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_channel_names_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_traffic_light_perception_conf_dir_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_traffic_light_perception_conf_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traffic_light_output_channel_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_simulation_channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simulation_channel_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v2x_trafficlights_input_channel_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_tl_preprocessor_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tl_preprocessor_name_;
    double tl_image_timestamp_offset_;
    int32_t max_v2x_msg_buff_size_;
    double tf2_timeout_second_;
    double query_tf_interval_seconds_;
    double valid_hdmap_interval_;
    double image_sys_ts_diff_threshold_;
    int32_t max_process_image_fps_;
    int32_t default_image_border_size_;
    double sync_interval_seconds_;
    double v2x_sync_interval_seconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficLight

// optional string tl_tf2_frame_id = 1 [default = "world"];
inline bool TrafficLight::_internal_has_tl_tf2_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficLight::has_tl_tf2_frame_id() const {
  return _internal_has_tl_tf2_frame_id();
}
inline void TrafficLight::clear_tl_tf2_frame_id() {
  _impl_.tl_tf2_frame_id_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrafficLight::tl_tf2_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.tl_tf2_frame_id)
  if (_impl_.tl_tf2_frame_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get();
  return _internal_tl_tf2_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_tl_tf2_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tl_tf2_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.tl_tf2_frame_id)
}
inline std::string* TrafficLight::mutable_tl_tf2_frame_id() {
  std::string* _s = _internal_mutable_tl_tf2_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.tl_tf2_frame_id)
  return _s;
}
inline const std::string& TrafficLight::_internal_tl_tf2_frame_id() const {
  return _impl_.tl_tf2_frame_id_.Get();
}
inline void TrafficLight::_internal_set_tl_tf2_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tl_tf2_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_tl_tf2_frame_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tl_tf2_frame_id_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_tl_tf2_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.tl_tf2_frame_id)
  if (!_internal_has_tl_tf2_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tl_tf2_frame_id_.Release();
  return p;
}
inline void TrafficLight::set_allocated_tl_tf2_frame_id(std::string* tl_tf2_frame_id) {
  if (tl_tf2_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tl_tf2_frame_id_.SetAllocated(tl_tf2_frame_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.tl_tf2_frame_id)
}

// optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
inline bool TrafficLight::_internal_has_tl_tf2_child_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLight::has_tl_tf2_child_frame_id() const {
  return _internal_has_tl_tf2_child_frame_id();
}
inline void TrafficLight::clear_tl_tf2_child_frame_id() {
  _impl_.tl_tf2_child_frame_id_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrafficLight::tl_tf2_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id)
  if (_impl_.tl_tf2_child_frame_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get();
  return _internal_tl_tf2_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_tl_tf2_child_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.tl_tf2_child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id)
}
inline std::string* TrafficLight::mutable_tl_tf2_child_frame_id() {
  std::string* _s = _internal_mutable_tl_tf2_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id)
  return _s;
}
inline const std::string& TrafficLight::_internal_tl_tf2_child_frame_id() const {
  return _impl_.tl_tf2_child_frame_id_.Get();
}
inline void TrafficLight::_internal_set_tl_tf2_child_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tl_tf2_child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_tl_tf2_child_frame_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.tl_tf2_child_frame_id_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_tl_tf2_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id)
  if (!_internal_has_tl_tf2_child_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.tl_tf2_child_frame_id_.Release();
  return p;
}
inline void TrafficLight::set_allocated_tl_tf2_child_frame_id(std::string* tl_tf2_child_frame_id) {
  if (tl_tf2_child_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tl_tf2_child_frame_id_.SetAllocated(tl_tf2_child_frame_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id)
}

// optional double tf2_timeout_second = 3 [default = 0.01];
inline bool TrafficLight::_internal_has_tf2_timeout_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrafficLight::has_tf2_timeout_second() const {
  return _internal_has_tf2_timeout_second();
}
inline void TrafficLight::clear_tf2_timeout_second() {
  _impl_.tf2_timeout_second_ = 0.01;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double TrafficLight::_internal_tf2_timeout_second() const {
  return _impl_.tf2_timeout_second_;
}
inline double TrafficLight::tf2_timeout_second() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.tf2_timeout_second)
  return _internal_tf2_timeout_second();
}
inline void TrafficLight::_internal_set_tf2_timeout_second(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tf2_timeout_second_ = value;
}
inline void TrafficLight::set_tf2_timeout_second(double value) {
  _internal_set_tf2_timeout_second(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.tf2_timeout_second)
}

// optional string camera_names = 4 [default = "front_6mm,front_12mm"];
inline bool TrafficLight::_internal_has_camera_names() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficLight::has_camera_names() const {
  return _internal_has_camera_names();
}
inline void TrafficLight::clear_camera_names() {
  _impl_.camera_names_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_names_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrafficLight::camera_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.camera_names)
  if (_impl_.camera_names_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_camera_names_.get();
  return _internal_camera_names();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_camera_names(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.camera_names_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.camera_names)
}
inline std::string* TrafficLight::mutable_camera_names() {
  std::string* _s = _internal_mutable_camera_names();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.camera_names)
  return _s;
}
inline const std::string& TrafficLight::_internal_camera_names() const {
  return _impl_.camera_names_.Get();
}
inline void TrafficLight::_internal_set_camera_names(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.camera_names_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_camera_names() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.camera_names_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_names_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_camera_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.camera_names)
  if (!_internal_has_camera_names()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.camera_names_.Release();
  return p;
}
inline void TrafficLight::set_allocated_camera_names(std::string* camera_names) {
  if (camera_names != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.camera_names_.SetAllocated(camera_names, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.camera_names)
}

// optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"];
inline bool TrafficLight::_internal_has_camera_channel_names() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficLight::has_camera_channel_names() const {
  return _internal_has_camera_channel_names();
}
inline void TrafficLight::clear_camera_channel_names() {
  _impl_.camera_channel_names_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_channel_names_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TrafficLight::camera_channel_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.camera_channel_names)
  if (_impl_.camera_channel_names_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_camera_channel_names_.get();
  return _internal_camera_channel_names();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_camera_channel_names(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.camera_channel_names_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.camera_channel_names)
}
inline std::string* TrafficLight::mutable_camera_channel_names() {
  std::string* _s = _internal_mutable_camera_channel_names();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.camera_channel_names)
  return _s;
}
inline const std::string& TrafficLight::_internal_camera_channel_names() const {
  return _impl_.camera_channel_names_.Get();
}
inline void TrafficLight::_internal_set_camera_channel_names(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.camera_channel_names_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_camera_channel_names() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.camera_channel_names_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_channel_names_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_camera_channel_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.camera_channel_names)
  if (!_internal_has_camera_channel_names()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.camera_channel_names_.Release();
  return p;
}
inline void TrafficLight::set_allocated_camera_channel_names(std::string* camera_channel_names) {
  if (camera_channel_names != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.camera_channel_names_.SetAllocated(camera_channel_names, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.camera_channel_names)
}

// optional double tl_image_timestamp_offset = 6 [default = 0];
inline bool TrafficLight::_internal_has_tl_image_timestamp_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrafficLight::has_tl_image_timestamp_offset() const {
  return _internal_has_tl_image_timestamp_offset();
}
inline void TrafficLight::clear_tl_image_timestamp_offset() {
  _impl_.tl_image_timestamp_offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double TrafficLight::_internal_tl_image_timestamp_offset() const {
  return _impl_.tl_image_timestamp_offset_;
}
inline double TrafficLight::tl_image_timestamp_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.tl_image_timestamp_offset)
  return _internal_tl_image_timestamp_offset();
}
inline void TrafficLight::_internal_set_tl_image_timestamp_offset(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tl_image_timestamp_offset_ = value;
}
inline void TrafficLight::set_tl_image_timestamp_offset(double value) {
  _internal_set_tl_image_timestamp_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.tl_image_timestamp_offset)
}

// optional int32 max_process_image_fps = 7 [default = 8];
inline bool TrafficLight::_internal_has_max_process_image_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrafficLight::has_max_process_image_fps() const {
  return _internal_has_max_process_image_fps();
}
inline void TrafficLight::clear_max_process_image_fps() {
  _impl_.max_process_image_fps_ = 8;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t TrafficLight::_internal_max_process_image_fps() const {
  return _impl_.max_process_image_fps_;
}
inline int32_t TrafficLight::max_process_image_fps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.max_process_image_fps)
  return _internal_max_process_image_fps();
}
inline void TrafficLight::_internal_set_max_process_image_fps(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.max_process_image_fps_ = value;
}
inline void TrafficLight::set_max_process_image_fps(int32_t value) {
  _internal_set_max_process_image_fps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.max_process_image_fps)
}

// optional double query_tf_interval_seconds = 8 [default = 0.3];
inline bool TrafficLight::_internal_has_query_tf_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrafficLight::has_query_tf_interval_seconds() const {
  return _internal_has_query_tf_interval_seconds();
}
inline void TrafficLight::clear_query_tf_interval_seconds() {
  _impl_.query_tf_interval_seconds_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double TrafficLight::_internal_query_tf_interval_seconds() const {
  return _impl_.query_tf_interval_seconds_;
}
inline double TrafficLight::query_tf_interval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.query_tf_interval_seconds)
  return _internal_query_tf_interval_seconds();
}
inline void TrafficLight::_internal_set_query_tf_interval_seconds(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.query_tf_interval_seconds_ = value;
}
inline void TrafficLight::set_query_tf_interval_seconds(double value) {
  _internal_set_query_tf_interval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.query_tf_interval_seconds)
}

// optional double valid_hdmap_interval = 9 [default = 1.5];
inline bool TrafficLight::_internal_has_valid_hdmap_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrafficLight::has_valid_hdmap_interval() const {
  return _internal_has_valid_hdmap_interval();
}
inline void TrafficLight::clear_valid_hdmap_interval() {
  _impl_.valid_hdmap_interval_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double TrafficLight::_internal_valid_hdmap_interval() const {
  return _impl_.valid_hdmap_interval_;
}
inline double TrafficLight::valid_hdmap_interval() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.valid_hdmap_interval)
  return _internal_valid_hdmap_interval();
}
inline void TrafficLight::_internal_set_valid_hdmap_interval(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.valid_hdmap_interval_ = value;
}
inline void TrafficLight::set_valid_hdmap_interval(double value) {
  _internal_set_valid_hdmap_interval(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.valid_hdmap_interval)
}

// optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
inline bool TrafficLight::_internal_has_image_sys_ts_diff_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrafficLight::has_image_sys_ts_diff_threshold() const {
  return _internal_has_image_sys_ts_diff_threshold();
}
inline void TrafficLight::clear_image_sys_ts_diff_threshold() {
  _impl_.image_sys_ts_diff_threshold_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double TrafficLight::_internal_image_sys_ts_diff_threshold() const {
  return _impl_.image_sys_ts_diff_threshold_;
}
inline double TrafficLight::image_sys_ts_diff_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.image_sys_ts_diff_threshold)
  return _internal_image_sys_ts_diff_threshold();
}
inline void TrafficLight::_internal_set_image_sys_ts_diff_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.image_sys_ts_diff_threshold_ = value;
}
inline void TrafficLight::set_image_sys_ts_diff_threshold(double value) {
  _internal_set_image_sys_ts_diff_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.image_sys_ts_diff_threshold)
}

// optional double sync_interval_seconds = 11 [default = 0.5];
inline bool TrafficLight::_internal_has_sync_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrafficLight::has_sync_interval_seconds() const {
  return _internal_has_sync_interval_seconds();
}
inline void TrafficLight::clear_sync_interval_seconds() {
  _impl_.sync_interval_seconds_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double TrafficLight::_internal_sync_interval_seconds() const {
  return _impl_.sync_interval_seconds_;
}
inline double TrafficLight::sync_interval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.sync_interval_seconds)
  return _internal_sync_interval_seconds();
}
inline void TrafficLight::_internal_set_sync_interval_seconds(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.sync_interval_seconds_ = value;
}
inline void TrafficLight::set_sync_interval_seconds(double value) {
  _internal_set_sync_interval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.sync_interval_seconds)
}

// optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
inline bool TrafficLight::_internal_has_camera_traffic_light_perception_conf_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficLight::has_camera_traffic_light_perception_conf_dir() const {
  return _internal_has_camera_traffic_light_perception_conf_dir();
}
inline void TrafficLight::clear_camera_traffic_light_perception_conf_dir() {
  _impl_.camera_traffic_light_perception_conf_dir_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TrafficLight::camera_traffic_light_perception_conf_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir)
  if (_impl_.camera_traffic_light_perception_conf_dir_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get();
  return _internal_camera_traffic_light_perception_conf_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_camera_traffic_light_perception_conf_dir(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.camera_traffic_light_perception_conf_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir)
}
inline std::string* TrafficLight::mutable_camera_traffic_light_perception_conf_dir() {
  std::string* _s = _internal_mutable_camera_traffic_light_perception_conf_dir();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir)
  return _s;
}
inline const std::string& TrafficLight::_internal_camera_traffic_light_perception_conf_dir() const {
  return _impl_.camera_traffic_light_perception_conf_dir_.Get();
}
inline void TrafficLight::_internal_set_camera_traffic_light_perception_conf_dir(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.camera_traffic_light_perception_conf_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_camera_traffic_light_perception_conf_dir() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.camera_traffic_light_perception_conf_dir_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_camera_traffic_light_perception_conf_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir)
  if (!_internal_has_camera_traffic_light_perception_conf_dir()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.camera_traffic_light_perception_conf_dir_.Release();
  return p;
}
inline void TrafficLight::set_allocated_camera_traffic_light_perception_conf_dir(std::string* camera_traffic_light_perception_conf_dir) {
  if (camera_traffic_light_perception_conf_dir != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.camera_traffic_light_perception_conf_dir_.SetAllocated(camera_traffic_light_perception_conf_dir, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir)
}

// optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
inline bool TrafficLight::_internal_has_camera_traffic_light_perception_conf_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrafficLight::has_camera_traffic_light_perception_conf_file() const {
  return _internal_has_camera_traffic_light_perception_conf_file();
}
inline void TrafficLight::clear_camera_traffic_light_perception_conf_file() {
  _impl_.camera_traffic_light_perception_conf_file_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TrafficLight::camera_traffic_light_perception_conf_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file)
  if (_impl_.camera_traffic_light_perception_conf_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get();
  return _internal_camera_traffic_light_perception_conf_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_camera_traffic_light_perception_conf_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.camera_traffic_light_perception_conf_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file)
}
inline std::string* TrafficLight::mutable_camera_traffic_light_perception_conf_file() {
  std::string* _s = _internal_mutable_camera_traffic_light_perception_conf_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file)
  return _s;
}
inline const std::string& TrafficLight::_internal_camera_traffic_light_perception_conf_file() const {
  return _impl_.camera_traffic_light_perception_conf_file_.Get();
}
inline void TrafficLight::_internal_set_camera_traffic_light_perception_conf_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.camera_traffic_light_perception_conf_file_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_camera_traffic_light_perception_conf_file() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.camera_traffic_light_perception_conf_file_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_camera_traffic_light_perception_conf_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file)
  if (!_internal_has_camera_traffic_light_perception_conf_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.camera_traffic_light_perception_conf_file_.Release();
  return p;
}
inline void TrafficLight::set_allocated_camera_traffic_light_perception_conf_file(std::string* camera_traffic_light_perception_conf_file) {
  if (camera_traffic_light_perception_conf_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.camera_traffic_light_perception_conf_file_.SetAllocated(camera_traffic_light_perception_conf_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file)
}

// optional int32 default_image_border_size = 14 [default = 100];
inline bool TrafficLight::_internal_has_default_image_border_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrafficLight::has_default_image_border_size() const {
  return _internal_has_default_image_border_size();
}
inline void TrafficLight::clear_default_image_border_size() {
  _impl_.default_image_border_size_ = 100;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t TrafficLight::_internal_default_image_border_size() const {
  return _impl_.default_image_border_size_;
}
inline int32_t TrafficLight::default_image_border_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.default_image_border_size)
  return _internal_default_image_border_size();
}
inline void TrafficLight::_internal_set_default_image_border_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.default_image_border_size_ = value;
}
inline void TrafficLight::set_default_image_border_size(int32_t value) {
  _internal_set_default_image_border_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.default_image_border_size)
}

// optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
inline bool TrafficLight::_internal_has_traffic_light_output_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrafficLight::has_traffic_light_output_channel_name() const {
  return _internal_has_traffic_light_output_channel_name();
}
inline void TrafficLight::clear_traffic_light_output_channel_name() {
  _impl_.traffic_light_output_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TrafficLight::traffic_light_output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name)
  if (_impl_.traffic_light_output_channel_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get();
  return _internal_traffic_light_output_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_traffic_light_output_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.traffic_light_output_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name)
}
inline std::string* TrafficLight::mutable_traffic_light_output_channel_name() {
  std::string* _s = _internal_mutable_traffic_light_output_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name)
  return _s;
}
inline const std::string& TrafficLight::_internal_traffic_light_output_channel_name() const {
  return _impl_.traffic_light_output_channel_name_.Get();
}
inline void TrafficLight::_internal_set_traffic_light_output_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.traffic_light_output_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_traffic_light_output_channel_name() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.traffic_light_output_channel_name_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_traffic_light_output_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name)
  if (!_internal_has_traffic_light_output_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.traffic_light_output_channel_name_.Release();
  return p;
}
inline void TrafficLight::set_allocated_traffic_light_output_channel_name(std::string* traffic_light_output_channel_name) {
  if (traffic_light_output_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.traffic_light_output_channel_name_.SetAllocated(traffic_light_output_channel_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name)
}

// optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
inline bool TrafficLight::_internal_has_simulation_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrafficLight::has_simulation_channel_name() const {
  return _internal_has_simulation_channel_name();
}
inline void TrafficLight::clear_simulation_channel_name() {
  _impl_.simulation_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_simulation_channel_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TrafficLight::simulation_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.simulation_channel_name)
  if (_impl_.simulation_channel_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get();
  return _internal_simulation_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_simulation_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.simulation_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.simulation_channel_name)
}
inline std::string* TrafficLight::mutable_simulation_channel_name() {
  std::string* _s = _internal_mutable_simulation_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.simulation_channel_name)
  return _s;
}
inline const std::string& TrafficLight::_internal_simulation_channel_name() const {
  return _impl_.simulation_channel_name_.Get();
}
inline void TrafficLight::_internal_set_simulation_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.simulation_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_simulation_channel_name() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.simulation_channel_name_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_simulation_channel_name_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_simulation_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.simulation_channel_name)
  if (!_internal_has_simulation_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.simulation_channel_name_.Release();
  return p;
}
inline void TrafficLight::set_allocated_simulation_channel_name(std::string* simulation_channel_name) {
  if (simulation_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.simulation_channel_name_.SetAllocated(simulation_channel_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.simulation_channel_name)
}

// optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
inline bool TrafficLight::_internal_has_v2x_trafficlights_input_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrafficLight::has_v2x_trafficlights_input_channel_name() const {
  return _internal_has_v2x_trafficlights_input_channel_name();
}
inline void TrafficLight::clear_v2x_trafficlights_input_channel_name() {
  _impl_.v2x_trafficlights_input_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& TrafficLight::v2x_trafficlights_input_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name)
  if (_impl_.v2x_trafficlights_input_channel_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get();
  return _internal_v2x_trafficlights_input_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_v2x_trafficlights_input_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.v2x_trafficlights_input_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name)
}
inline std::string* TrafficLight::mutable_v2x_trafficlights_input_channel_name() {
  std::string* _s = _internal_mutable_v2x_trafficlights_input_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name)
  return _s;
}
inline const std::string& TrafficLight::_internal_v2x_trafficlights_input_channel_name() const {
  return _impl_.v2x_trafficlights_input_channel_name_.Get();
}
inline void TrafficLight::_internal_set_v2x_trafficlights_input_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.v2x_trafficlights_input_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_v2x_trafficlights_input_channel_name() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.v2x_trafficlights_input_channel_name_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_v2x_trafficlights_input_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name)
  if (!_internal_has_v2x_trafficlights_input_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.v2x_trafficlights_input_channel_name_.Release();
  return p;
}
inline void TrafficLight::set_allocated_v2x_trafficlights_input_channel_name(std::string* v2x_trafficlights_input_channel_name) {
  if (v2x_trafficlights_input_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.v2x_trafficlights_input_channel_name_.SetAllocated(v2x_trafficlights_input_channel_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name)
}

// optional double v2x_sync_interval_seconds = 18 [default = 0.1];
inline bool TrafficLight::_internal_has_v2x_sync_interval_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrafficLight::has_v2x_sync_interval_seconds() const {
  return _internal_has_v2x_sync_interval_seconds();
}
inline void TrafficLight::clear_v2x_sync_interval_seconds() {
  _impl_.v2x_sync_interval_seconds_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double TrafficLight::_internal_v2x_sync_interval_seconds() const {
  return _impl_.v2x_sync_interval_seconds_;
}
inline double TrafficLight::v2x_sync_interval_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.v2x_sync_interval_seconds)
  return _internal_v2x_sync_interval_seconds();
}
inline void TrafficLight::_internal_set_v2x_sync_interval_seconds(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.v2x_sync_interval_seconds_ = value;
}
inline void TrafficLight::set_v2x_sync_interval_seconds(double value) {
  _internal_set_v2x_sync_interval_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.v2x_sync_interval_seconds)
}

// optional int32 max_v2x_msg_buff_size = 19 [default = 50];
inline bool TrafficLight::_internal_has_max_v2x_msg_buff_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrafficLight::has_max_v2x_msg_buff_size() const {
  return _internal_has_max_v2x_msg_buff_size();
}
inline void TrafficLight::clear_max_v2x_msg_buff_size() {
  _impl_.max_v2x_msg_buff_size_ = 50;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t TrafficLight::_internal_max_v2x_msg_buff_size() const {
  return _impl_.max_v2x_msg_buff_size_;
}
inline int32_t TrafficLight::max_v2x_msg_buff_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.max_v2x_msg_buff_size)
  return _internal_max_v2x_msg_buff_size();
}
inline void TrafficLight::_internal_set_max_v2x_msg_buff_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_v2x_msg_buff_size_ = value;
}
inline void TrafficLight::set_max_v2x_msg_buff_size(int32_t value) {
  _internal_set_max_v2x_msg_buff_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.max_v2x_msg_buff_size)
}

// optional string tl_preprocessor_name = 20 [default = "TLPreprocessor"];
inline bool TrafficLight::_internal_has_tl_preprocessor_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrafficLight::has_tl_preprocessor_name() const {
  return _internal_has_tl_preprocessor_name();
}
inline void TrafficLight::clear_tl_preprocessor_name() {
  _impl_.tl_preprocessor_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_preprocessor_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& TrafficLight::tl_preprocessor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.TrafficLight.tl_preprocessor_name)
  if (_impl_.tl_preprocessor_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_tl_preprocessor_name_.get();
  return _internal_tl_preprocessor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficLight::set_tl_preprocessor_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.tl_preprocessor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.TrafficLight.tl_preprocessor_name)
}
inline std::string* TrafficLight::mutable_tl_preprocessor_name() {
  std::string* _s = _internal_mutable_tl_preprocessor_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.TrafficLight.tl_preprocessor_name)
  return _s;
}
inline const std::string& TrafficLight::_internal_tl_preprocessor_name() const {
  return _impl_.tl_preprocessor_name_.Get();
}
inline void TrafficLight::_internal_set_tl_preprocessor_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tl_preprocessor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrafficLight::_internal_mutable_tl_preprocessor_name() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.tl_preprocessor_name_.Mutable(::apollo::perception::onboard::TrafficLight::Impl_::_i_give_permission_to_break_this_code_default_tl_preprocessor_name_, GetArenaForAllocation());
}
inline std::string* TrafficLight::release_tl_preprocessor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.TrafficLight.tl_preprocessor_name)
  if (!_internal_has_tl_preprocessor_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.tl_preprocessor_name_.Release();
  return p;
}
inline void TrafficLight::set_allocated_tl_preprocessor_name(std::string* tl_preprocessor_name) {
  if (tl_preprocessor_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.tl_preprocessor_name_.SetAllocated(tl_preprocessor_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.TrafficLight.tl_preprocessor_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto
