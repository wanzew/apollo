// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lidar_component_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class LidarDetectionComponentConfig;
struct LidarDetectionComponentConfigDefaultTypeInternal;
extern LidarDetectionComponentConfigDefaultTypeInternal _LidarDetectionComponentConfig_default_instance_;
class LidarRecognitionComponentConfig;
struct LidarRecognitionComponentConfigDefaultTypeInternal;
extern LidarRecognitionComponentConfigDefaultTypeInternal _LidarRecognitionComponentConfig_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::LidarDetectionComponentConfig* Arena::CreateMaybeMessage<::apollo::perception::onboard::LidarDetectionComponentConfig>(Arena*);
template<> ::apollo::perception::onboard::LidarRecognitionComponentConfig* Arena::CreateMaybeMessage<::apollo::perception::onboard::LidarRecognitionComponentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class LidarDetectionComponentConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.LidarDetectionComponentConfig) */ {
 public:
  inline LidarDetectionComponentConfig() : LidarDetectionComponentConfig(nullptr) {}
  ~LidarDetectionComponentConfig() override;
  explicit PROTOBUF_CONSTEXPR LidarDetectionComponentConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LidarDetectionComponentConfig(const LidarDetectionComponentConfig& from);
  LidarDetectionComponentConfig(LidarDetectionComponentConfig&& from) noexcept
    : LidarDetectionComponentConfig() {
    *this = ::std::move(from);
  }

  inline LidarDetectionComponentConfig& operator=(const LidarDetectionComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarDetectionComponentConfig& operator=(LidarDetectionComponentConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarDetectionComponentConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarDetectionComponentConfig* internal_default_instance() {
    return reinterpret_cast<const LidarDetectionComponentConfig*>(
               &_LidarDetectionComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LidarDetectionComponentConfig& a, LidarDetectionComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarDetectionComponentConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarDetectionComponentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarDetectionComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LidarDetectionComponentConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LidarDetectionComponentConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LidarDetectionComponentConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarDetectionComponentConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.LidarDetectionComponentConfig";
  }
  protected:
  explicit LidarDetectionComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 1,
    kDetectorNameFieldNumber = 2,
    kLidar2NovatelTf2ChildFrameIdFieldNumber = 5,
    kOutputChannelNameFieldNumber = 6,
    kLidarQueryTfOffsetFieldNumber = 4,
    kEnableHdmapFieldNumber = 3,
  };
  // optional string sensor_name = 1;
  bool has_sensor_name() const;
  private:
  bool _internal_has_sensor_name() const;
  public:
  void clear_sensor_name();
  const std::string& sensor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_name();
  PROTOBUF_NODISCARD std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* sensor_name);
  private:
  const std::string& _internal_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_name(const std::string& value);
  std::string* _internal_mutable_sensor_name();
  public:

  // optional string detector_name = 2;
  bool has_detector_name() const;
  private:
  bool _internal_has_detector_name() const;
  public:
  void clear_detector_name();
  const std::string& detector_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detector_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detector_name();
  PROTOBUF_NODISCARD std::string* release_detector_name();
  void set_allocated_detector_name(std::string* detector_name);
  private:
  const std::string& _internal_detector_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detector_name(const std::string& value);
  std::string* _internal_mutable_detector_name();
  public:

  // optional string lidar2novatel_tf2_child_frame_id = 5;
  bool has_lidar2novatel_tf2_child_frame_id() const;
  private:
  bool _internal_has_lidar2novatel_tf2_child_frame_id() const;
  public:
  void clear_lidar2novatel_tf2_child_frame_id();
  const std::string& lidar2novatel_tf2_child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lidar2novatel_tf2_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lidar2novatel_tf2_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_lidar2novatel_tf2_child_frame_id();
  void set_allocated_lidar2novatel_tf2_child_frame_id(std::string* lidar2novatel_tf2_child_frame_id);
  private:
  const std::string& _internal_lidar2novatel_tf2_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lidar2novatel_tf2_child_frame_id(const std::string& value);
  std::string* _internal_mutable_lidar2novatel_tf2_child_frame_id();
  public:

  // optional string output_channel_name = 6;
  bool has_output_channel_name() const;
  private:
  bool _internal_has_output_channel_name() const;
  public:
  void clear_output_channel_name();
  const std::string& output_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_channel_name();
  PROTOBUF_NODISCARD std::string* release_output_channel_name();
  void set_allocated_output_channel_name(std::string* output_channel_name);
  private:
  const std::string& _internal_output_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_channel_name(const std::string& value);
  std::string* _internal_mutable_output_channel_name();
  public:

  // optional double lidar_query_tf_offset = 4;
  bool has_lidar_query_tf_offset() const;
  private:
  bool _internal_has_lidar_query_tf_offset() const;
  public:
  void clear_lidar_query_tf_offset();
  double lidar_query_tf_offset() const;
  void set_lidar_query_tf_offset(double value);
  private:
  double _internal_lidar_query_tf_offset() const;
  void _internal_set_lidar_query_tf_offset(double value);
  public:

  // optional bool enable_hdmap = 3;
  bool has_enable_hdmap() const;
  private:
  bool _internal_has_enable_hdmap() const;
  public:
  void clear_enable_hdmap();
  bool enable_hdmap() const;
  void set_enable_hdmap(bool value);
  private:
  bool _internal_enable_hdmap() const;
  void _internal_set_enable_hdmap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.LidarDetectionComponentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detector_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lidar2novatel_tf2_child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_name_;
    double lidar_query_tf_offset_;
    bool enable_hdmap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LidarRecognitionComponentConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.LidarRecognitionComponentConfig) */ {
 public:
  inline LidarRecognitionComponentConfig() : LidarRecognitionComponentConfig(nullptr) {}
  ~LidarRecognitionComponentConfig() override;
  explicit PROTOBUF_CONSTEXPR LidarRecognitionComponentConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LidarRecognitionComponentConfig(const LidarRecognitionComponentConfig& from);
  LidarRecognitionComponentConfig(LidarRecognitionComponentConfig&& from) noexcept
    : LidarRecognitionComponentConfig() {
    *this = ::std::move(from);
  }

  inline LidarRecognitionComponentConfig& operator=(const LidarRecognitionComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarRecognitionComponentConfig& operator=(LidarRecognitionComponentConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarRecognitionComponentConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarRecognitionComponentConfig* internal_default_instance() {
    return reinterpret_cast<const LidarRecognitionComponentConfig*>(
               &_LidarRecognitionComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LidarRecognitionComponentConfig& a, LidarRecognitionComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarRecognitionComponentConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarRecognitionComponentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarRecognitionComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LidarRecognitionComponentConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LidarRecognitionComponentConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LidarRecognitionComponentConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarRecognitionComponentConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.LidarRecognitionComponentConfig";
  }
  protected:
  explicit LidarRecognitionComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainSensorNameFieldNumber = 1,
    kOutputChannelNameFieldNumber = 2,
  };
  // optional string main_sensor_name = 1;
  bool has_main_sensor_name() const;
  private:
  bool _internal_has_main_sensor_name() const;
  public:
  void clear_main_sensor_name();
  const std::string& main_sensor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_sensor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_sensor_name();
  PROTOBUF_NODISCARD std::string* release_main_sensor_name();
  void set_allocated_main_sensor_name(std::string* main_sensor_name);
  private:
  const std::string& _internal_main_sensor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_sensor_name(const std::string& value);
  std::string* _internal_mutable_main_sensor_name();
  public:

  // optional string output_channel_name = 2;
  bool has_output_channel_name() const;
  private:
  bool _internal_has_output_channel_name() const;
  public:
  void clear_output_channel_name();
  const std::string& output_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_channel_name();
  PROTOBUF_NODISCARD std::string* release_output_channel_name();
  void set_allocated_output_channel_name(std::string* output_channel_name);
  private:
  const std::string& _internal_output_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_channel_name(const std::string& value);
  std::string* _internal_mutable_output_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.LidarRecognitionComponentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_sensor_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarDetectionComponentConfig

// optional string sensor_name = 1;
inline bool LidarDetectionComponentConfig::_internal_has_sensor_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_sensor_name() const {
  return _internal_has_sensor_name();
}
inline void LidarDetectionComponentConfig::clear_sensor_name() {
  _impl_.sensor_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarDetectionComponentConfig::sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name)
  return _internal_sensor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarDetectionComponentConfig::set_sensor_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sensor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name)
}
inline std::string* LidarDetectionComponentConfig::mutable_sensor_name() {
  std::string* _s = _internal_mutable_sensor_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name)
  return _s;
}
inline const std::string& LidarDetectionComponentConfig::_internal_sensor_name() const {
  return _impl_.sensor_name_.Get();
}
inline void LidarDetectionComponentConfig::_internal_set_sensor_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sensor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::_internal_mutable_sensor_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sensor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::release_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name)
  if (!_internal_has_sensor_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sensor_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_name_.IsDefault()) {
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarDetectionComponentConfig::set_allocated_sensor_name(std::string* sensor_name) {
  if (sensor_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sensor_name_.SetAllocated(sensor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_name_.IsDefault()) {
    _impl_.sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name)
}

// optional string detector_name = 2;
inline bool LidarDetectionComponentConfig::_internal_has_detector_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_detector_name() const {
  return _internal_has_detector_name();
}
inline void LidarDetectionComponentConfig::clear_detector_name() {
  _impl_.detector_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LidarDetectionComponentConfig::detector_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.detector_name)
  return _internal_detector_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarDetectionComponentConfig::set_detector_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.detector_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.detector_name)
}
inline std::string* LidarDetectionComponentConfig::mutable_detector_name() {
  std::string* _s = _internal_mutable_detector_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarDetectionComponentConfig.detector_name)
  return _s;
}
inline const std::string& LidarDetectionComponentConfig::_internal_detector_name() const {
  return _impl_.detector_name_.Get();
}
inline void LidarDetectionComponentConfig::_internal_set_detector_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.detector_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::_internal_mutable_detector_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.detector_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::release_detector_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarDetectionComponentConfig.detector_name)
  if (!_internal_has_detector_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.detector_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detector_name_.IsDefault()) {
    _impl_.detector_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarDetectionComponentConfig::set_allocated_detector_name(std::string* detector_name) {
  if (detector_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.detector_name_.SetAllocated(detector_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detector_name_.IsDefault()) {
    _impl_.detector_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarDetectionComponentConfig.detector_name)
}

// optional bool enable_hdmap = 3;
inline bool LidarDetectionComponentConfig::_internal_has_enable_hdmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_enable_hdmap() const {
  return _internal_has_enable_hdmap();
}
inline void LidarDetectionComponentConfig::clear_enable_hdmap() {
  _impl_.enable_hdmap_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool LidarDetectionComponentConfig::_internal_enable_hdmap() const {
  return _impl_.enable_hdmap_;
}
inline bool LidarDetectionComponentConfig::enable_hdmap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.enable_hdmap)
  return _internal_enable_hdmap();
}
inline void LidarDetectionComponentConfig::_internal_set_enable_hdmap(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.enable_hdmap_ = value;
}
inline void LidarDetectionComponentConfig::set_enable_hdmap(bool value) {
  _internal_set_enable_hdmap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.enable_hdmap)
}

// optional double lidar_query_tf_offset = 4;
inline bool LidarDetectionComponentConfig::_internal_has_lidar_query_tf_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_lidar_query_tf_offset() const {
  return _internal_has_lidar_query_tf_offset();
}
inline void LidarDetectionComponentConfig::clear_lidar_query_tf_offset() {
  _impl_.lidar_query_tf_offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LidarDetectionComponentConfig::_internal_lidar_query_tf_offset() const {
  return _impl_.lidar_query_tf_offset_;
}
inline double LidarDetectionComponentConfig::lidar_query_tf_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.lidar_query_tf_offset)
  return _internal_lidar_query_tf_offset();
}
inline void LidarDetectionComponentConfig::_internal_set_lidar_query_tf_offset(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lidar_query_tf_offset_ = value;
}
inline void LidarDetectionComponentConfig::set_lidar_query_tf_offset(double value) {
  _internal_set_lidar_query_tf_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.lidar_query_tf_offset)
}

// optional string lidar2novatel_tf2_child_frame_id = 5;
inline bool LidarDetectionComponentConfig::_internal_has_lidar2novatel_tf2_child_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_lidar2novatel_tf2_child_frame_id() const {
  return _internal_has_lidar2novatel_tf2_child_frame_id();
}
inline void LidarDetectionComponentConfig::clear_lidar2novatel_tf2_child_frame_id() {
  _impl_.lidar2novatel_tf2_child_frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LidarDetectionComponentConfig::lidar2novatel_tf2_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id)
  return _internal_lidar2novatel_tf2_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarDetectionComponentConfig::set_lidar2novatel_tf2_child_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.lidar2novatel_tf2_child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id)
}
inline std::string* LidarDetectionComponentConfig::mutable_lidar2novatel_tf2_child_frame_id() {
  std::string* _s = _internal_mutable_lidar2novatel_tf2_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id)
  return _s;
}
inline const std::string& LidarDetectionComponentConfig::_internal_lidar2novatel_tf2_child_frame_id() const {
  return _impl_.lidar2novatel_tf2_child_frame_id_.Get();
}
inline void LidarDetectionComponentConfig::_internal_set_lidar2novatel_tf2_child_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lidar2novatel_tf2_child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::_internal_mutable_lidar2novatel_tf2_child_frame_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.lidar2novatel_tf2_child_frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::release_lidar2novatel_tf2_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id)
  if (!_internal_has_lidar2novatel_tf2_child_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.lidar2novatel_tf2_child_frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lidar2novatel_tf2_child_frame_id_.IsDefault()) {
    _impl_.lidar2novatel_tf2_child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarDetectionComponentConfig::set_allocated_lidar2novatel_tf2_child_frame_id(std::string* lidar2novatel_tf2_child_frame_id) {
  if (lidar2novatel_tf2_child_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lidar2novatel_tf2_child_frame_id_.SetAllocated(lidar2novatel_tf2_child_frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lidar2novatel_tf2_child_frame_id_.IsDefault()) {
    _impl_.lidar2novatel_tf2_child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id)
}

// optional string output_channel_name = 6;
inline bool LidarDetectionComponentConfig::_internal_has_output_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LidarDetectionComponentConfig::has_output_channel_name() const {
  return _internal_has_output_channel_name();
}
inline void LidarDetectionComponentConfig::clear_output_channel_name() {
  _impl_.output_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LidarDetectionComponentConfig::output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name)
  return _internal_output_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarDetectionComponentConfig::set_output_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.output_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name)
}
inline std::string* LidarDetectionComponentConfig::mutable_output_channel_name() {
  std::string* _s = _internal_mutable_output_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name)
  return _s;
}
inline const std::string& LidarDetectionComponentConfig::_internal_output_channel_name() const {
  return _impl_.output_channel_name_.Get();
}
inline void LidarDetectionComponentConfig::_internal_set_output_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.output_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::_internal_mutable_output_channel_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.output_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarDetectionComponentConfig::release_output_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name)
  if (!_internal_has_output_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.output_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_name_.IsDefault()) {
    _impl_.output_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarDetectionComponentConfig::set_allocated_output_channel_name(std::string* output_channel_name) {
  if (output_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.output_channel_name_.SetAllocated(output_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_name_.IsDefault()) {
    _impl_.output_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name)
}

// -------------------------------------------------------------------

// LidarRecognitionComponentConfig

// optional string main_sensor_name = 1;
inline bool LidarRecognitionComponentConfig::_internal_has_main_sensor_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarRecognitionComponentConfig::has_main_sensor_name() const {
  return _internal_has_main_sensor_name();
}
inline void LidarRecognitionComponentConfig::clear_main_sensor_name() {
  _impl_.main_sensor_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarRecognitionComponentConfig::main_sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  return _internal_main_sensor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarRecognitionComponentConfig::set_main_sensor_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.main_sensor_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}
inline std::string* LidarRecognitionComponentConfig::mutable_main_sensor_name() {
  std::string* _s = _internal_mutable_main_sensor_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  return _s;
}
inline const std::string& LidarRecognitionComponentConfig::_internal_main_sensor_name() const {
  return _impl_.main_sensor_name_.Get();
}
inline void LidarRecognitionComponentConfig::_internal_set_main_sensor_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.main_sensor_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarRecognitionComponentConfig::_internal_mutable_main_sensor_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.main_sensor_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarRecognitionComponentConfig::release_main_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  if (!_internal_has_main_sensor_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.main_sensor_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_name_.IsDefault()) {
    _impl_.main_sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarRecognitionComponentConfig::set_allocated_main_sensor_name(std::string* main_sensor_name) {
  if (main_sensor_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.main_sensor_name_.SetAllocated(main_sensor_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_name_.IsDefault()) {
    _impl_.main_sensor_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}

// optional string output_channel_name = 2;
inline bool LidarRecognitionComponentConfig::_internal_has_output_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarRecognitionComponentConfig::has_output_channel_name() const {
  return _internal_has_output_channel_name();
}
inline void LidarRecognitionComponentConfig::clear_output_channel_name() {
  _impl_.output_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LidarRecognitionComponentConfig::output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  return _internal_output_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarRecognitionComponentConfig::set_output_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.output_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}
inline std::string* LidarRecognitionComponentConfig::mutable_output_channel_name() {
  std::string* _s = _internal_mutable_output_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  return _s;
}
inline const std::string& LidarRecognitionComponentConfig::_internal_output_channel_name() const {
  return _impl_.output_channel_name_.Get();
}
inline void LidarRecognitionComponentConfig::_internal_set_output_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarRecognitionComponentConfig::_internal_mutable_output_channel_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LidarRecognitionComponentConfig::release_output_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  if (!_internal_has_output_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.output_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_name_.IsDefault()) {
    _impl_.output_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LidarRecognitionComponentConfig::set_allocated_output_channel_name(std::string* output_channel_name) {
  if (output_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_channel_name_.SetAllocated(output_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_name_.IsDefault()) {
    _impl_.output_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
