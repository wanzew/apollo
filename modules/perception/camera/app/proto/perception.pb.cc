// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/app/proto/perception.proto

#include "modules/perception/camera/app/proto/perception.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace app {
PROTOBUF_CONSTEXPR PluginParam::PluginParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PluginParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PluginParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PluginParamDefaultTypeInternal() {}
  union {
    PluginParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PluginParamDefaultTypeInternal _PluginParam_default_instance_;
PROTOBUF_CONSTEXPR DetectorParam::DetectorParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct DetectorParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectorParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectorParamDefaultTypeInternal() {}
  union {
    DetectorParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectorParamDefaultTypeInternal _DetectorParam_default_instance_;
PROTOBUF_CONSTEXPR TrackerParam::TrackerParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct TrackerParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackerParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackerParamDefaultTypeInternal() {}
  union {
    TrackerParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackerParamDefaultTypeInternal _TrackerParam_default_instance_;
PROTOBUF_CONSTEXPR TransformerParam::TransformerParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct TransformerParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformerParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformerParamDefaultTypeInternal() {}
  union {
    TransformerParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformerParamDefaultTypeInternal _TransformerParam_default_instance_;
PROTOBUF_CONSTEXPR PostprocessorParam::PostprocessorParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct PostprocessorParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostprocessorParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostprocessorParamDefaultTypeInternal() {}
  union {
    PostprocessorParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostprocessorParamDefaultTypeInternal _PostprocessorParam_default_instance_;
PROTOBUF_CONSTEXPR FeatureParam::FeatureParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct FeatureParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureParamDefaultTypeInternal() {}
  union {
    FeatureParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
PROTOBUF_CONSTEXPR DebugParam::DebugParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detection_out_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tracked_detection_out_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.track_out_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detect_feature_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lane_out_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.camera2world_out_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibration_out_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DebugParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugParamDefaultTypeInternal() {}
  union {
    DebugParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugParamDefaultTypeInternal _DebugParam_default_instance_;
PROTOBUF_CONSTEXPR LanePerceptionParam::LanePerceptionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_detector_param_)*/nullptr
  , /*decltype(_impl_.lane_postprocessor_param_)*/nullptr
  , /*decltype(_impl_.lane_tracker_param_)*/nullptr
  , /*decltype(_impl_.gpu_id_)*/0} {}
struct LanePerceptionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanePerceptionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanePerceptionParamDefaultTypeInternal() {}
  union {
    LanePerceptionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanePerceptionParamDefaultTypeInternal _LanePerceptionParam_default_instance_;
PROTOBUF_CONSTEXPR CalibrationServiceParam::CalibrationServiceParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.calibrator_method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct CalibrationServiceParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrationServiceParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrationServiceParamDefaultTypeInternal() {}
  union {
    CalibrationServiceParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrationServiceParamDefaultTypeInternal _CalibrationServiceParam_default_instance_;
PROTOBUF_CONSTEXPR ObjectTemplateParam::ObjectTemplateParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_param_)*/nullptr} {}
struct ObjectTemplateParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectTemplateParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectTemplateParamDefaultTypeInternal() {}
  union {
    ObjectTemplateParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectTemplateParamDefaultTypeInternal _ObjectTemplateParam_default_instance_;
PROTOBUF_CONSTEXPR PerceptionParam::PerceptionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detector_param_)*/{}
  , /*decltype(_impl_.lane_param_)*/{}
  , /*decltype(_impl_.camera_intrinsics_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tracker_param_)*/nullptr
  , /*decltype(_impl_.transformer_param_)*/nullptr
  , /*decltype(_impl_.postprocessor_param_)*/nullptr
  , /*decltype(_impl_.feature_param_)*/nullptr
  , /*decltype(_impl_.calibration_service_param_)*/nullptr
  , /*decltype(_impl_.debug_param_)*/nullptr
  , /*decltype(_impl_.object_template_param_)*/nullptr
  , /*decltype(_impl_.gpu_id_)*/0} {}
struct PerceptionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionParamDefaultTypeInternal() {}
  union {
    PerceptionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionParamDefaultTypeInternal _PerceptionParam_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightParam::TrafficLightParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detector_param_)*/{}
  , /*decltype(_impl_.tracker_param_)*/nullptr
  , /*decltype(_impl_.gpu_id_)*/0} {}
struct TrafficLightParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightParamDefaultTypeInternal() {}
  union {
    TrafficLightParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightParamDefaultTypeInternal _TrafficLightParam_default_instance_;
}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _impl_.root_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PluginParam, _impl_.config_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _impl_.plugin_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DetectorParam, _impl_.camera_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrackerParam, _impl_.plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TransformerParam, _impl_.plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PostprocessorParam, _impl_.plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::FeatureParam, _impl_.plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.detection_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.tracked_detection_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.track_out_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.detect_feature_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.lane_out_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.camera2world_out_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::DebugParam, _impl_.calibration_out_dir_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _impl_.lane_detector_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _impl_.lane_postprocessor_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _impl_.lane_tracker_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::LanePerceptionParam, _impl_.gpu_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _impl_.calibrator_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::CalibrationServiceParam, _impl_.plugin_param_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::ObjectTemplateParam, _impl_.plugin_param_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.detector_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.tracker_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.transformer_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.postprocessor_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.gpu_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.camera_intrinsics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.feature_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.lane_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.calibration_service_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.debug_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::PerceptionParam, _impl_.object_template_param_),
  ~0u,
  1,
  2,
  3,
  8,
  0,
  4,
  ~0u,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _impl_.detector_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _impl_.tracker_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::app::TrafficLightParam, _impl_.gpu_id_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::camera::app::PluginParam)},
  { 12, 20, -1, sizeof(::apollo::perception::camera::app::DetectorParam)},
  { 22, 29, -1, sizeof(::apollo::perception::camera::app::TrackerParam)},
  { 30, 37, -1, sizeof(::apollo::perception::camera::app::TransformerParam)},
  { 38, 45, -1, sizeof(::apollo::perception::camera::app::PostprocessorParam)},
  { 46, 53, -1, sizeof(::apollo::perception::camera::app::FeatureParam)},
  { 54, 67, -1, sizeof(::apollo::perception::camera::app::DebugParam)},
  { 74, 84, -1, sizeof(::apollo::perception::camera::app::LanePerceptionParam)},
  { 88, 96, -1, sizeof(::apollo::perception::camera::app::CalibrationServiceParam)},
  { 98, 105, -1, sizeof(::apollo::perception::camera::app::ObjectTemplateParam)},
  { 106, 123, -1, sizeof(::apollo::perception::camera::app::PerceptionParam)},
  { 134, 143, -1, sizeof(::apollo::perception::camera::app::TrafficLightParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::app::_PluginParam_default_instance_._instance,
  &::apollo::perception::camera::app::_DetectorParam_default_instance_._instance,
  &::apollo::perception::camera::app::_TrackerParam_default_instance_._instance,
  &::apollo::perception::camera::app::_TransformerParam_default_instance_._instance,
  &::apollo::perception::camera::app::_PostprocessorParam_default_instance_._instance,
  &::apollo::perception::camera::app::_FeatureParam_default_instance_._instance,
  &::apollo::perception::camera::app::_DebugParam_default_instance_._instance,
  &::apollo::perception::camera::app::_LanePerceptionParam_default_instance_._instance,
  &::apollo::perception::camera::app::_CalibrationServiceParam_default_instance_._instance,
  &::apollo::perception::camera::app::_ObjectTemplateParam_default_instance_._instance,
  &::apollo::perception::camera::app::_PerceptionParam_default_instance_._instance,
  &::apollo::perception::camera::app::_TrafficLightParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/perception/camera/app/proto/pe"
  "rception.proto\022\034apollo.perception.camera"
  ".app\"B\n\013PluginParam\022\014\n\004name\030\001 \001(\t\022\020\n\010roo"
  "t_dir\030\002 \001(\t\022\023\n\013config_file\030\003 \001(\t\"e\n\rDete"
  "ctorParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo"
  ".perception.camera.app.PluginParam\022\023\n\013ca"
  "mera_name\030\002 \001(\t\"O\n\014TrackerParam\022\?\n\014plugi"
  "n_param\030\001 \001(\0132).apollo.perception.camera"
  ".app.PluginParam\"S\n\020TransformerParam\022\?\n\014"
  "plugin_param\030\001 \001(\0132).apollo.perception.c"
  "amera.app.PluginParam\"U\n\022PostprocessorPa"
  "ram\022\?\n\014plugin_param\030\001 \001(\0132).apollo.perce"
  "ption.camera.app.PluginParam\"O\n\014FeatureP"
  "aram\022\?\n\014plugin_param\030\001 \001(\0132).apollo.perc"
  "eption.camera.app.PluginParam\"\320\001\n\nDebugP"
  "aram\022\031\n\021detection_out_dir\030\001 \001(\t\022!\n\031track"
  "ed_detection_out_dir\030\002 \001(\t\022\026\n\016track_out_"
  "file\030\003 \001(\t\022\032\n\022detect_feature_dir\030\004 \001(\t\022\024"
  "\n\014lane_out_dir\030\005 \001(\t\022\035\n\025camera2world_out"
  "_file\030\006 \001(\t\022\033\n\023calibration_out_dir\030\007 \001(\t"
  "\"\203\002\n\023LanePerceptionParam\022H\n\023lane_detecto"
  "r_param\030\001 \001(\0132+.apollo.perception.camera"
  ".app.DetectorParam\022K\n\030lane_postprocessor"
  "_param\030\002 \001(\0132).apollo.perception.camera."
  "app.PluginParam\022E\n\022lane_tracker_param\030\003 "
  "\001(\0132).apollo.perception.camera.app.Plugi"
  "nParam\022\016\n\006gpu_id\030\004 \001(\005\"u\n\027CalibrationSer"
  "viceParam\022\031\n\021calibrator_method\030\002 \001(\t\022\?\n\014"
  "plugin_param\030\003 \001(\0132).apollo.perception.c"
  "amera.app.PluginParam\"V\n\023ObjectTemplateP"
  "aram\022\?\n\014plugin_param\030\001 \001(\0132).apollo.perc"
  "eption.camera.app.PluginParam\"\323\005\n\017Percep"
  "tionParam\022C\n\016detector_param\030\001 \003(\0132+.apol"
  "lo.perception.camera.app.DetectorParam\022A"
  "\n\rtracker_param\030\002 \001(\0132*.apollo.perceptio"
  "n.camera.app.TrackerParam\022I\n\021transformer"
  "_param\030\003 \001(\0132..apollo.perception.camera."
  "app.TransformerParam\022M\n\023postprocessor_pa"
  "ram\030\004 \001(\01320.apollo.perception.camera.app"
  ".PostprocessorParam\022\016\n\006gpu_id\030\005 \001(\005\022\031\n\021c"
  "amera_intrinsics\030\006 \001(\t\022A\n\rfeature_param\030"
  "\007 \001(\0132*.apollo.perception.camera.app.Fea"
  "tureParam\022E\n\nlane_param\030\010 \003(\01321.apollo.p"
  "erception.camera.app.LanePerceptionParam"
  "\022X\n\031calibration_service_param\030\t \001(\01325.ap"
  "ollo.perception.camera.app.CalibrationSe"
  "rviceParam\022=\n\013debug_param\030\n \001(\0132(.apollo"
  ".perception.camera.app.DebugParam\022P\n\025obj"
  "ect_template_param\030\013 \001(\01321.apollo.percep"
  "tion.camera.app.ObjectTemplateParam\"\253\001\n\021"
  "TrafficLightParam\022C\n\016detector_param\030\001 \003("
  "\0132+.apollo.perception.camera.app.Detecto"
  "rParam\022A\n\rtracker_param\030\002 \001(\0132*.apollo.p"
  "erception.camera.app.TrackerParam\022\016\n\006gpu"
  "_id\030\003 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto = {
    false, false, 2169, descriptor_table_protodef_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto,
    "modules/perception/camera/app/proto/perception.proto",
    &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto(&descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace app {

// ===================================================================

class PluginParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginParam>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_root_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PluginParam::PluginParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PluginParam)
}
PluginParam::PluginParam(const PluginParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.root_dir_){}
    , decltype(_impl_.config_file_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.root_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_root_dir()) {
    _impl_.root_dir_.Set(from._internal_root_dir(), 
      GetArenaForAllocation());
  }
  _impl_.config_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_config_file()) {
    _impl_.config_file_.Set(from._internal_config_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PluginParam)
}

inline void PluginParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.root_dir_){}
    , decltype(_impl_.config_file_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.config_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.config_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PluginParam::~PluginParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PluginParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PluginParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.root_dir_.Destroy();
  _impl_.config_file_.Destroy();
}

void PluginParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PluginParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PluginParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.root_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.config_file_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string root_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_root_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.root_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string config_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_config_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.PluginParam.config_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PluginParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PluginParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string root_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_dir().data(), static_cast<int>(this->_internal_root_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.root_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_root_dir(), target);
  }

  // optional string config_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_file().data(), static_cast<int>(this->_internal_config_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PluginParam.config_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_config_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PluginParam)
  return target;
}

size_t PluginParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PluginParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string root_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_dir());
    }

    // optional string config_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_file());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PluginParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PluginParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PluginParam::GetClassData() const { return &_class_data_; }

void PluginParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PluginParam *>(to)->MergeFrom(
      static_cast<const PluginParam &>(from));
}


void PluginParam::MergeFrom(const PluginParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PluginParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_root_dir(from._internal_root_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_config_file(from._internal_config_file());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PluginParam::CopyFrom(const PluginParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PluginParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginParam::IsInitialized() const {
  return true;
}

void PluginParam::InternalSwap(PluginParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_dir_, lhs_arena,
      &other->_impl_.root_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_file_, lhs_arena,
      &other->_impl_.config_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[0]);
}

// ===================================================================

class DetectorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectorParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const DetectorParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
DetectorParam::_Internal::plugin_param(const DetectorParam* msg) {
  return *msg->_impl_.plugin_param_;
}
DetectorParam::DetectorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.DetectorParam)
}
DetectorParam::DetectorParam(const DetectorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_){}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_name()) {
    _impl_.camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DetectorParam)
}

inline void DetectorParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_){}
    , decltype(_impl_.plugin_param_){nullptr}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetectorParam::~DetectorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DetectorParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectorParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void DetectorParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.DetectorParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.camera_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
      _impl_.plugin_param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectorParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DetectorParam.camera_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectorParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DetectorParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  // optional string camera_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DetectorParam.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DetectorParam)
  return target;
}

size_t DetectorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.DetectorParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string camera_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_name());
    }

    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plugin_param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectorParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectorParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectorParam::GetClassData() const { return &_class_data_; }

void DetectorParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectorParam *>(to)->MergeFrom(
      static_cast<const DetectorParam &>(from));
}


void DetectorParam::MergeFrom(const DetectorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.DetectorParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_name(from._internal_camera_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectorParam::CopyFrom(const DetectorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.DetectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorParam::IsInitialized() const {
  return true;
}

void DetectorParam::InternalSwap(DetectorParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_name_, lhs_arena,
      &other->_impl_.camera_name_, rhs_arena
  );
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectorParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[1]);
}

// ===================================================================

class TrackerParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackerParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const TrackerParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
TrackerParam::_Internal::plugin_param(const TrackerParam* msg) {
  return *msg->_impl_.plugin_param_;
}
TrackerParam::TrackerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TrackerParam)
}
TrackerParam::TrackerParam(const TrackerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrackerParam)
}

inline void TrackerParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}
  };
}

TrackerParam::~TrackerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrackerParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void TrackerParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TrackerParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
    _impl_.plugin_param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrackerParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrackerParam)
  return target;
}

size_t TrackerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TrackerParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackerParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerParam::GetClassData() const { return &_class_data_; }

void TrackerParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackerParam *>(to)->MergeFrom(
      static_cast<const TrackerParam &>(from));
}


void TrackerParam::MergeFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerParam::CopyFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerParam::IsInitialized() const {
  return true;
}

void TrackerParam::InternalSwap(TrackerParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[2]);
}

// ===================================================================

class TransformerParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformerParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const TransformerParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
TransformerParam::_Internal::plugin_param(const TransformerParam* msg) {
  return *msg->_impl_.plugin_param_;
}
TransformerParam::TransformerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TransformerParam)
}
TransformerParam::TransformerParam(const TransformerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TransformerParam)
}

inline void TransformerParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}
  };
}

TransformerParam::~TransformerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TransformerParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransformerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void TransformerParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransformerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TransformerParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
    _impl_.plugin_param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformerParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformerParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TransformerParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TransformerParam)
  return target;
}

size_t TransformerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TransformerParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformerParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformerParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformerParam::GetClassData() const { return &_class_data_; }

void TransformerParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformerParam *>(to)->MergeFrom(
      static_cast<const TransformerParam &>(from));
}


void TransformerParam::MergeFrom(const TransformerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TransformerParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformerParam::CopyFrom(const TransformerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TransformerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformerParam::IsInitialized() const {
  return true;
}

void TransformerParam::InternalSwap(TransformerParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformerParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[3]);
}

// ===================================================================

class PostprocessorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PostprocessorParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const PostprocessorParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
PostprocessorParam::_Internal::plugin_param(const PostprocessorParam* msg) {
  return *msg->_impl_.plugin_param_;
}
PostprocessorParam::PostprocessorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PostprocessorParam)
}
PostprocessorParam::PostprocessorParam(const PostprocessorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PostprocessorParam)
}

inline void PostprocessorParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}
  };
}

PostprocessorParam::~PostprocessorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PostprocessorParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostprocessorParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void PostprocessorParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostprocessorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PostprocessorParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
    _impl_.plugin_param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostprocessorParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostprocessorParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PostprocessorParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PostprocessorParam)
  return target;
}

size_t PostprocessorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PostprocessorParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostprocessorParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostprocessorParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostprocessorParam::GetClassData() const { return &_class_data_; }

void PostprocessorParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostprocessorParam *>(to)->MergeFrom(
      static_cast<const PostprocessorParam &>(from));
}


void PostprocessorParam::MergeFrom(const PostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PostprocessorParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostprocessorParam::CopyFrom(const PostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PostprocessorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostprocessorParam::IsInitialized() const {
  return true;
}

void PostprocessorParam::InternalSwap(PostprocessorParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostprocessorParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[4]);
}

// ===================================================================

class FeatureParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const FeatureParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
FeatureParam::_Internal::plugin_param(const FeatureParam* msg) {
  return *msg->_impl_.plugin_param_;
}
FeatureParam::FeatureParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.FeatureParam)
}
FeatureParam::FeatureParam(const FeatureParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.FeatureParam)
}

inline void FeatureParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}
  };
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.FeatureParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void FeatureParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.FeatureParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
    _impl_.plugin_param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.FeatureParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.FeatureParam)
  return target;
}

size_t FeatureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.FeatureParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeatureParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureParam::GetClassData() const { return &_class_data_; }

void FeatureParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeatureParam *>(to)->MergeFrom(
      static_cast<const FeatureParam &>(from));
}


void FeatureParam::MergeFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {
  return true;
}

void FeatureParam::InternalSwap(FeatureParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[5]);
}

// ===================================================================

class DebugParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugParam>()._impl_._has_bits_);
  static void set_has_detection_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tracked_detection_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_out_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_detect_feature_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera2world_out_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calibration_out_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DebugParam::DebugParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.DebugParam)
}
DebugParam::DebugParam(const DebugParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detection_out_dir_){}
    , decltype(_impl_.tracked_detection_out_dir_){}
    , decltype(_impl_.track_out_file_){}
    , decltype(_impl_.detect_feature_dir_){}
    , decltype(_impl_.lane_out_dir_){}
    , decltype(_impl_.camera2world_out_file_){}
    , decltype(_impl_.calibration_out_dir_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detection_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detection_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detection_out_dir()) {
    _impl_.detection_out_dir_.Set(from._internal_detection_out_dir(), 
      GetArenaForAllocation());
  }
  _impl_.tracked_detection_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracked_detection_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tracked_detection_out_dir()) {
    _impl_.tracked_detection_out_dir_.Set(from._internal_tracked_detection_out_dir(), 
      GetArenaForAllocation());
  }
  _impl_.track_out_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_out_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_track_out_file()) {
    _impl_.track_out_file_.Set(from._internal_track_out_file(), 
      GetArenaForAllocation());
  }
  _impl_.detect_feature_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detect_feature_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detect_feature_dir()) {
    _impl_.detect_feature_dir_.Set(from._internal_detect_feature_dir(), 
      GetArenaForAllocation());
  }
  _impl_.lane_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_out_dir()) {
    _impl_.lane_out_dir_.Set(from._internal_lane_out_dir(), 
      GetArenaForAllocation());
  }
  _impl_.camera2world_out_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera2world_out_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera2world_out_file()) {
    _impl_.camera2world_out_file_.Set(from._internal_camera2world_out_file(), 
      GetArenaForAllocation());
  }
  _impl_.calibration_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calibration_out_dir()) {
    _impl_.calibration_out_dir_.Set(from._internal_calibration_out_dir(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DebugParam)
}

inline void DebugParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detection_out_dir_){}
    , decltype(_impl_.tracked_detection_out_dir_){}
    , decltype(_impl_.track_out_file_){}
    , decltype(_impl_.detect_feature_dir_){}
    , decltype(_impl_.lane_out_dir_){}
    , decltype(_impl_.camera2world_out_file_){}
    , decltype(_impl_.calibration_out_dir_){}
  };
  _impl_.detection_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detection_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tracked_detection_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tracked_detection_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.track_out_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.track_out_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detect_feature_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detect_feature_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lane_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.camera2world_out_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera2world_out_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.calibration_out_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_out_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugParam::~DebugParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DebugParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detection_out_dir_.Destroy();
  _impl_.tracked_detection_out_dir_.Destroy();
  _impl_.track_out_file_.Destroy();
  _impl_.detect_feature_dir_.Destroy();
  _impl_.lane_out_dir_.Destroy();
  _impl_.camera2world_out_file_.Destroy();
  _impl_.calibration_out_dir_.Destroy();
}

void DebugParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.DebugParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.detection_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tracked_detection_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.track_out_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.detect_feature_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.lane_out_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.camera2world_out_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.calibration_out_dir_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string detection_out_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detection_out_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.detection_out_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tracked_detection_out_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tracked_detection_out_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.tracked_detection_out_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string track_out_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_track_out_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.track_out_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string detect_feature_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_detect_feature_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.detect_feature_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lane_out_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_lane_out_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.lane_out_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string camera2world_out_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_camera2world_out_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.camera2world_out_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string calibration_out_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_calibration_out_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.DebugParam.calibration_out_dir");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DebugParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string detection_out_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detection_out_dir().data(), static_cast<int>(this->_internal_detection_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.detection_out_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detection_out_dir(), target);
  }

  // optional string tracked_detection_out_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tracked_detection_out_dir().data(), static_cast<int>(this->_internal_tracked_detection_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.tracked_detection_out_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tracked_detection_out_dir(), target);
  }

  // optional string track_out_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_out_file().data(), static_cast<int>(this->_internal_track_out_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.track_out_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_track_out_file(), target);
  }

  // optional string detect_feature_dir = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detect_feature_dir().data(), static_cast<int>(this->_internal_detect_feature_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.detect_feature_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_detect_feature_dir(), target);
  }

  // optional string lane_out_dir = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_out_dir().data(), static_cast<int>(this->_internal_lane_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.lane_out_dir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lane_out_dir(), target);
  }

  // optional string camera2world_out_file = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera2world_out_file().data(), static_cast<int>(this->_internal_camera2world_out_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.camera2world_out_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_camera2world_out_file(), target);
  }

  // optional string calibration_out_dir = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_out_dir().data(), static_cast<int>(this->_internal_calibration_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.DebugParam.calibration_out_dir");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_calibration_out_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DebugParam)
  return target;
}

size_t DebugParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.DebugParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string detection_out_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detection_out_dir());
    }

    // optional string tracked_detection_out_dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tracked_detection_out_dir());
    }

    // optional string track_out_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_out_file());
    }

    // optional string detect_feature_dir = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detect_feature_dir());
    }

    // optional string lane_out_dir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_out_dir());
    }

    // optional string camera2world_out_file = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera2world_out_file());
    }

    // optional string calibration_out_dir = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_out_dir());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DebugParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugParam::GetClassData() const { return &_class_data_; }

void DebugParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DebugParam *>(to)->MergeFrom(
      static_cast<const DebugParam &>(from));
}


void DebugParam::MergeFrom(const DebugParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.DebugParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_detection_out_dir(from._internal_detection_out_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tracked_detection_out_dir(from._internal_tracked_detection_out_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_track_out_file(from._internal_track_out_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_detect_feature_dir(from._internal_detect_feature_dir());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_lane_out_dir(from._internal_lane_out_dir());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_camera2world_out_file(from._internal_camera2world_out_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_calibration_out_dir(from._internal_calibration_out_dir());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugParam::CopyFrom(const DebugParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.DebugParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugParam::IsInitialized() const {
  return true;
}

void DebugParam::InternalSwap(DebugParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detection_out_dir_, lhs_arena,
      &other->_impl_.detection_out_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tracked_detection_out_dir_, lhs_arena,
      &other->_impl_.tracked_detection_out_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.track_out_file_, lhs_arena,
      &other->_impl_.track_out_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detect_feature_dir_, lhs_arena,
      &other->_impl_.detect_feature_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_out_dir_, lhs_arena,
      &other->_impl_.lane_out_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera2world_out_file_, lhs_arena,
      &other->_impl_.camera2world_out_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibration_out_dir_, lhs_arena,
      &other->_impl_.calibration_out_dir_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[6]);
}

// ===================================================================

class LanePerceptionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LanePerceptionParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::DetectorParam& lane_detector_param(const LanePerceptionParam* msg);
  static void set_has_lane_detector_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::PluginParam& lane_postprocessor_param(const LanePerceptionParam* msg);
  static void set_has_lane_postprocessor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::app::PluginParam& lane_tracker_param(const LanePerceptionParam* msg);
  static void set_has_lane_tracker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::camera::app::DetectorParam&
LanePerceptionParam::_Internal::lane_detector_param(const LanePerceptionParam* msg) {
  return *msg->_impl_.lane_detector_param_;
}
const ::apollo::perception::camera::app::PluginParam&
LanePerceptionParam::_Internal::lane_postprocessor_param(const LanePerceptionParam* msg) {
  return *msg->_impl_.lane_postprocessor_param_;
}
const ::apollo::perception::camera::app::PluginParam&
LanePerceptionParam::_Internal::lane_tracker_param(const LanePerceptionParam* msg) {
  return *msg->_impl_.lane_tracker_param_;
}
LanePerceptionParam::LanePerceptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.LanePerceptionParam)
}
LanePerceptionParam::LanePerceptionParam(const LanePerceptionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_detector_param_){nullptr}
    , decltype(_impl_.lane_postprocessor_param_){nullptr}
    , decltype(_impl_.lane_tracker_param_){nullptr}
    , decltype(_impl_.gpu_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_detector_param()) {
    _impl_.lane_detector_param_ = new ::apollo::perception::camera::app::DetectorParam(*from._impl_.lane_detector_param_);
  }
  if (from._internal_has_lane_postprocessor_param()) {
    _impl_.lane_postprocessor_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.lane_postprocessor_param_);
  }
  if (from._internal_has_lane_tracker_param()) {
    _impl_.lane_tracker_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.lane_tracker_param_);
  }
  _impl_.gpu_id_ = from._impl_.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.LanePerceptionParam)
}

inline void LanePerceptionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_detector_param_){nullptr}
    , decltype(_impl_.lane_postprocessor_param_){nullptr}
    , decltype(_impl_.lane_tracker_param_){nullptr}
    , decltype(_impl_.gpu_id_){0}
  };
}

LanePerceptionParam::~LanePerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.LanePerceptionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LanePerceptionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lane_detector_param_;
  if (this != internal_default_instance()) delete _impl_.lane_postprocessor_param_;
  if (this != internal_default_instance()) delete _impl_.lane_tracker_param_;
}

void LanePerceptionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LanePerceptionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.LanePerceptionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lane_detector_param_ != nullptr);
      _impl_.lane_detector_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lane_postprocessor_param_ != nullptr);
      _impl_.lane_postprocessor_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lane_tracker_param_ != nullptr);
      _impl_.lane_tracker_param_->Clear();
    }
  }
  _impl_.gpu_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanePerceptionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_detector_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_postprocessor_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_tracker_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gpu_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gpu_id(&has_bits);
          _impl_.gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanePerceptionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.LanePerceptionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lane_detector_param(this),
        _Internal::lane_detector_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lane_postprocessor_param(this),
        _Internal::lane_postprocessor_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lane_tracker_param(this),
        _Internal::lane_tracker_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 gpu_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.LanePerceptionParam)
  return target;
}

size_t LanePerceptionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.LanePerceptionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_detector_param_);
    }

    // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_postprocessor_param_);
    }

    // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_tracker_param_);
    }

    // optional int32 gpu_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gpu_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanePerceptionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LanePerceptionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanePerceptionParam::GetClassData() const { return &_class_data_; }

void LanePerceptionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LanePerceptionParam *>(to)->MergeFrom(
      static_cast<const LanePerceptionParam &>(from));
}


void LanePerceptionParam::MergeFrom(const LanePerceptionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.LanePerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_detector_param()->::apollo::perception::camera::app::DetectorParam::MergeFrom(from._internal_lane_detector_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_postprocessor_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_lane_postprocessor_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_tracker_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_lane_tracker_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gpu_id_ = from._impl_.gpu_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanePerceptionParam::CopyFrom(const LanePerceptionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.LanePerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePerceptionParam::IsInitialized() const {
  return true;
}

void LanePerceptionParam::InternalSwap(LanePerceptionParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanePerceptionParam, _impl_.gpu_id_)
      + sizeof(LanePerceptionParam::_impl_.gpu_id_)
      - PROTOBUF_FIELD_OFFSET(LanePerceptionParam, _impl_.lane_detector_param_)>(
          reinterpret_cast<char*>(&_impl_.lane_detector_param_),
          reinterpret_cast<char*>(&other->_impl_.lane_detector_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanePerceptionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[7]);
}

// ===================================================================

class CalibrationServiceParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CalibrationServiceParam>()._impl_._has_bits_);
  static void set_has_calibrator_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const CalibrationServiceParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
CalibrationServiceParam::_Internal::plugin_param(const CalibrationServiceParam* msg) {
  return *msg->_impl_.plugin_param_;
}
CalibrationServiceParam::CalibrationServiceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.CalibrationServiceParam)
}
CalibrationServiceParam::CalibrationServiceParam(const CalibrationServiceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.calibrator_method_){}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.calibrator_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibrator_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calibrator_method()) {
    _impl_.calibrator_method_.Set(from._internal_calibrator_method(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.CalibrationServiceParam)
}

inline void CalibrationServiceParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.calibrator_method_){}
    , decltype(_impl_.plugin_param_){nullptr}
  };
  _impl_.calibrator_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibrator_method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CalibrationServiceParam::~CalibrationServiceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.CalibrationServiceParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalibrationServiceParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.calibrator_method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void CalibrationServiceParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalibrationServiceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.CalibrationServiceParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.calibrator_method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
      _impl_.plugin_param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibrationServiceParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string calibrator_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_calibrator_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.CalibrationServiceParam.calibrator_method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalibrationServiceParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.CalibrationServiceParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string calibrator_method = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibrator_method().data(), static_cast<int>(this->_internal_calibrator_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.CalibrationServiceParam.calibrator_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_calibrator_method(), target);
  }

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.CalibrationServiceParam)
  return target;
}

size_t CalibrationServiceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.CalibrationServiceParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string calibrator_method = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibrator_method());
    }

    // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plugin_param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalibrationServiceParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CalibrationServiceParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalibrationServiceParam::GetClassData() const { return &_class_data_; }

void CalibrationServiceParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CalibrationServiceParam *>(to)->MergeFrom(
      static_cast<const CalibrationServiceParam &>(from));
}


void CalibrationServiceParam::MergeFrom(const CalibrationServiceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_calibrator_method(from._internal_calibrator_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrationServiceParam::CopyFrom(const CalibrationServiceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.CalibrationServiceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationServiceParam::IsInitialized() const {
  return true;
}

void CalibrationServiceParam::InternalSwap(CalibrationServiceParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibrator_method_, lhs_arena,
      &other->_impl_.calibrator_method_, rhs_arena
  );
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationServiceParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[8]);
}

// ===================================================================

class ObjectTemplateParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectTemplateParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::PluginParam& plugin_param(const ObjectTemplateParam* msg);
  static void set_has_plugin_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::app::PluginParam&
ObjectTemplateParam::_Internal::plugin_param(const ObjectTemplateParam* msg) {
  return *msg->_impl_.plugin_param_;
}
ObjectTemplateParam::ObjectTemplateParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.ObjectTemplateParam)
}
ObjectTemplateParam::ObjectTemplateParam(const ObjectTemplateParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plugin_param()) {
    _impl_.plugin_param_ = new ::apollo::perception::camera::app::PluginParam(*from._impl_.plugin_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.ObjectTemplateParam)
}

inline void ObjectTemplateParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_param_){nullptr}
  };
}

ObjectTemplateParam::~ObjectTemplateParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.ObjectTemplateParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectTemplateParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plugin_param_;
}

void ObjectTemplateParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectTemplateParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.ObjectTemplateParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.plugin_param_ != nullptr);
    _impl_.plugin_param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTemplateParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectTemplateParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.ObjectTemplateParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_param(this),
        _Internal::plugin_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.ObjectTemplateParam)
  return target;
}

size_t ObjectTemplateParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.ObjectTemplateParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectTemplateParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectTemplateParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectTemplateParam::GetClassData() const { return &_class_data_; }

void ObjectTemplateParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectTemplateParam *>(to)->MergeFrom(
      static_cast<const ObjectTemplateParam &>(from));
}


void ObjectTemplateParam::MergeFrom(const ObjectTemplateParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_param()) {
    _internal_mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from._internal_plugin_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectTemplateParam::CopyFrom(const ObjectTemplateParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.ObjectTemplateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTemplateParam::IsInitialized() const {
  return true;
}

void ObjectTemplateParam::InternalSwap(ObjectTemplateParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_param_, other->_impl_.plugin_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTemplateParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[9]);
}

// ===================================================================

class PerceptionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::TrackerParam& tracker_param(const PerceptionParam* msg);
  static void set_has_tracker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::app::TransformerParam& transformer_param(const PerceptionParam* msg);
  static void set_has_transformer_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::camera::app::PostprocessorParam& postprocessor_param(const PerceptionParam* msg);
  static void set_has_postprocessor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_camera_intrinsics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::app::FeatureParam& feature_param(const PerceptionParam* msg);
  static void set_has_feature_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::camera::app::CalibrationServiceParam& calibration_service_param(const PerceptionParam* msg);
  static void set_has_calibration_service_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::app::DebugParam& debug_param(const PerceptionParam* msg);
  static void set_has_debug_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::camera::app::ObjectTemplateParam& object_template_param(const PerceptionParam* msg);
  static void set_has_object_template_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::camera::app::TrackerParam&
PerceptionParam::_Internal::tracker_param(const PerceptionParam* msg) {
  return *msg->_impl_.tracker_param_;
}
const ::apollo::perception::camera::app::TransformerParam&
PerceptionParam::_Internal::transformer_param(const PerceptionParam* msg) {
  return *msg->_impl_.transformer_param_;
}
const ::apollo::perception::camera::app::PostprocessorParam&
PerceptionParam::_Internal::postprocessor_param(const PerceptionParam* msg) {
  return *msg->_impl_.postprocessor_param_;
}
const ::apollo::perception::camera::app::FeatureParam&
PerceptionParam::_Internal::feature_param(const PerceptionParam* msg) {
  return *msg->_impl_.feature_param_;
}
const ::apollo::perception::camera::app::CalibrationServiceParam&
PerceptionParam::_Internal::calibration_service_param(const PerceptionParam* msg) {
  return *msg->_impl_.calibration_service_param_;
}
const ::apollo::perception::camera::app::DebugParam&
PerceptionParam::_Internal::debug_param(const PerceptionParam* msg) {
  return *msg->_impl_.debug_param_;
}
const ::apollo::perception::camera::app::ObjectTemplateParam&
PerceptionParam::_Internal::object_template_param(const PerceptionParam* msg) {
  return *msg->_impl_.object_template_param_;
}
PerceptionParam::PerceptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.PerceptionParam)
}
PerceptionParam::PerceptionParam(const PerceptionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detector_param_){from._impl_.detector_param_}
    , decltype(_impl_.lane_param_){from._impl_.lane_param_}
    , decltype(_impl_.camera_intrinsics_){}
    , decltype(_impl_.tracker_param_){nullptr}
    , decltype(_impl_.transformer_param_){nullptr}
    , decltype(_impl_.postprocessor_param_){nullptr}
    , decltype(_impl_.feature_param_){nullptr}
    , decltype(_impl_.calibration_service_param_){nullptr}
    , decltype(_impl_.debug_param_){nullptr}
    , decltype(_impl_.object_template_param_){nullptr}
    , decltype(_impl_.gpu_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_intrinsics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_intrinsics_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_intrinsics()) {
    _impl_.camera_intrinsics_.Set(from._internal_camera_intrinsics(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tracker_param()) {
    _impl_.tracker_param_ = new ::apollo::perception::camera::app::TrackerParam(*from._impl_.tracker_param_);
  }
  if (from._internal_has_transformer_param()) {
    _impl_.transformer_param_ = new ::apollo::perception::camera::app::TransformerParam(*from._impl_.transformer_param_);
  }
  if (from._internal_has_postprocessor_param()) {
    _impl_.postprocessor_param_ = new ::apollo::perception::camera::app::PostprocessorParam(*from._impl_.postprocessor_param_);
  }
  if (from._internal_has_feature_param()) {
    _impl_.feature_param_ = new ::apollo::perception::camera::app::FeatureParam(*from._impl_.feature_param_);
  }
  if (from._internal_has_calibration_service_param()) {
    _impl_.calibration_service_param_ = new ::apollo::perception::camera::app::CalibrationServiceParam(*from._impl_.calibration_service_param_);
  }
  if (from._internal_has_debug_param()) {
    _impl_.debug_param_ = new ::apollo::perception::camera::app::DebugParam(*from._impl_.debug_param_);
  }
  if (from._internal_has_object_template_param()) {
    _impl_.object_template_param_ = new ::apollo::perception::camera::app::ObjectTemplateParam(*from._impl_.object_template_param_);
  }
  _impl_.gpu_id_ = from._impl_.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PerceptionParam)
}

inline void PerceptionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detector_param_){arena}
    , decltype(_impl_.lane_param_){arena}
    , decltype(_impl_.camera_intrinsics_){}
    , decltype(_impl_.tracker_param_){nullptr}
    , decltype(_impl_.transformer_param_){nullptr}
    , decltype(_impl_.postprocessor_param_){nullptr}
    , decltype(_impl_.feature_param_){nullptr}
    , decltype(_impl_.calibration_service_param_){nullptr}
    , decltype(_impl_.debug_param_){nullptr}
    , decltype(_impl_.object_template_param_){nullptr}
    , decltype(_impl_.gpu_id_){0}
  };
  _impl_.camera_intrinsics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_intrinsics_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerceptionParam::~PerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PerceptionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detector_param_.~RepeatedPtrField();
  _impl_.lane_param_.~RepeatedPtrField();
  _impl_.camera_intrinsics_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tracker_param_;
  if (this != internal_default_instance()) delete _impl_.transformer_param_;
  if (this != internal_default_instance()) delete _impl_.postprocessor_param_;
  if (this != internal_default_instance()) delete _impl_.feature_param_;
  if (this != internal_default_instance()) delete _impl_.calibration_service_param_;
  if (this != internal_default_instance()) delete _impl_.debug_param_;
  if (this != internal_default_instance()) delete _impl_.object_template_param_;
}

void PerceptionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.PerceptionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detector_param_.Clear();
  _impl_.lane_param_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.camera_intrinsics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tracker_param_ != nullptr);
      _impl_.tracker_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.transformer_param_ != nullptr);
      _impl_.transformer_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.postprocessor_param_ != nullptr);
      _impl_.postprocessor_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.feature_param_ != nullptr);
      _impl_.feature_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.calibration_service_param_ != nullptr);
      _impl_.calibration_service_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.debug_param_ != nullptr);
      _impl_.debug_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.object_template_param_ != nullptr);
      _impl_.object_template_param_->Clear();
    }
  }
  _impl_.gpu_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detector_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_postprocessor_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gpu_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gpu_id(&has_bits);
          _impl_.gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_intrinsics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_camera_intrinsics();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.app.PerceptionParam.camera_intrinsics");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibration_service_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_template_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PerceptionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detector_param_size()); i < n; i++) {
    const auto& repfield = this->_internal_detector_param(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracker_param(this),
        _Internal::tracker_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transformer_param(this),
        _Internal::transformer_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::postprocessor_param(this),
        _Internal::postprocessor_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 gpu_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_gpu_id(), target);
  }

  // optional string camera_intrinsics = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_intrinsics().data(), static_cast<int>(this->_internal_camera_intrinsics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.app.PerceptionParam.camera_intrinsics");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_camera_intrinsics(), target);
  }

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::feature_param(this),
        _Internal::feature_param(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_param_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_param(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::calibration_service_param(this),
        _Internal::calibration_service_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::debug_param(this),
        _Internal::debug_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::object_template_param(this),
        _Internal::object_template_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PerceptionParam)
  return target;
}

size_t PerceptionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.PerceptionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  total_size += 1UL * this->_internal_detector_param_size();
  for (const auto& msg : this->_impl_.detector_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  total_size += 1UL * this->_internal_lane_param_size();
  for (const auto& msg : this->_impl_.lane_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_intrinsics = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_intrinsics());
    }

    // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracker_param_);
    }

    // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transformer_param_);
    }

    // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.postprocessor_param_);
    }

    // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feature_param_);
    }

    // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.calibration_service_param_);
    }

    // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.debug_param_);
    }

    // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_template_param_);
    }

  }
  // optional int32 gpu_id = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gpu_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionParam::GetClassData() const { return &_class_data_; }

void PerceptionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionParam *>(to)->MergeFrom(
      static_cast<const PerceptionParam &>(from));
}


void PerceptionParam::MergeFrom(const PerceptionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.PerceptionParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.detector_param_.MergeFrom(from._impl_.detector_param_);
  _impl_.lane_param_.MergeFrom(from._impl_.lane_param_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_intrinsics(from._internal_camera_intrinsics());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tracker_param()->::apollo::perception::camera::app::TrackerParam::MergeFrom(from._internal_tracker_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transformer_param()->::apollo::perception::camera::app::TransformerParam::MergeFrom(from._internal_transformer_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_postprocessor_param()->::apollo::perception::camera::app::PostprocessorParam::MergeFrom(from._internal_postprocessor_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_feature_param()->::apollo::perception::camera::app::FeatureParam::MergeFrom(from._internal_feature_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_calibration_service_param()->::apollo::perception::camera::app::CalibrationServiceParam::MergeFrom(from._internal_calibration_service_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_debug_param()->::apollo::perception::camera::app::DebugParam::MergeFrom(from._internal_debug_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_object_template_param()->::apollo::perception::camera::app::ObjectTemplateParam::MergeFrom(from._internal_object_template_param());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_gpu_id(from._internal_gpu_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionParam::CopyFrom(const PerceptionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.PerceptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionParam::IsInitialized() const {
  return true;
}

void PerceptionParam::InternalSwap(PerceptionParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.detector_param_.InternalSwap(&other->_impl_.detector_param_);
  _impl_.lane_param_.InternalSwap(&other->_impl_.lane_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_intrinsics_, lhs_arena,
      &other->_impl_.camera_intrinsics_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionParam, _impl_.gpu_id_)
      + sizeof(PerceptionParam::_impl_.gpu_id_)
      - PROTOBUF_FIELD_OFFSET(PerceptionParam, _impl_.tracker_param_)>(
          reinterpret_cast<char*>(&_impl_.tracker_param_),
          reinterpret_cast<char*>(&other->_impl_.tracker_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[10]);
}

// ===================================================================

class TrafficLightParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::app::TrackerParam& tracker_param(const TrafficLightParam* msg);
  static void set_has_tracker_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::camera::app::TrackerParam&
TrafficLightParam::_Internal::tracker_param(const TrafficLightParam* msg) {
  return *msg->_impl_.tracker_param_;
}
TrafficLightParam::TrafficLightParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.app.TrafficLightParam)
}
TrafficLightParam::TrafficLightParam(const TrafficLightParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detector_param_){from._impl_.detector_param_}
    , decltype(_impl_.tracker_param_){nullptr}
    , decltype(_impl_.gpu_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracker_param()) {
    _impl_.tracker_param_ = new ::apollo::perception::camera::app::TrackerParam(*from._impl_.tracker_param_);
  }
  _impl_.gpu_id_ = from._impl_.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrafficLightParam)
}

inline void TrafficLightParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detector_param_){arena}
    , decltype(_impl_.tracker_param_){nullptr}
    , decltype(_impl_.gpu_id_){0}
  };
}

TrafficLightParam::~TrafficLightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrafficLightParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detector_param_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.tracker_param_;
}

void TrafficLightParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.app.TrafficLightParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detector_param_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tracker_param_ != nullptr);
    _impl_.tracker_param_->Clear();
  }
  _impl_.gpu_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detector_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          _impl_.gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrafficLightParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detector_param_size()); i < n; i++) {
    const auto& repfield = this->_internal_detector_param(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracker_param(this),
        _Internal::tracker_param(this).GetCachedSize(), target, stream);
  }

  // optional int32 gpu_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrafficLightParam)
  return target;
}

size_t TrafficLightParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.app.TrafficLightParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  total_size += 1UL * this->_internal_detector_param_size();
  for (const auto& msg : this->_impl_.detector_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracker_param_);
    }

    // optional int32 gpu_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gpu_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightParam::GetClassData() const { return &_class_data_; }

void TrafficLightParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightParam *>(to)->MergeFrom(
      static_cast<const TrafficLightParam &>(from));
}


void TrafficLightParam::MergeFrom(const TrafficLightParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.app.TrafficLightParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.detector_param_.MergeFrom(from._impl_.detector_param_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracker_param()->::apollo::perception::camera::app::TrackerParam::MergeFrom(from._internal_tracker_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gpu_id_ = from._impl_.gpu_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightParam::CopyFrom(const TrafficLightParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.app.TrafficLightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightParam::IsInitialized() const {
  return true;
}

void TrafficLightParam::InternalSwap(TrafficLightParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.detector_param_.InternalSwap(&other->_impl_.detector_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightParam, _impl_.gpu_id_)
      + sizeof(TrafficLightParam::_impl_.gpu_id_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightParam, _impl_.tracker_param_)>(
          reinterpret_cast<char*>(&_impl_.tracker_param_),
          reinterpret_cast<char*>(&other->_impl_.tracker_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2fapp_2fproto_2fperception_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PluginParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PluginParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PluginParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::DetectorParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::DetectorParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::DetectorParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TrackerParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TrackerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TrackerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TransformerParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TransformerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TransformerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PostprocessorParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PostprocessorParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PostprocessorParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::FeatureParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::FeatureParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::FeatureParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::DebugParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::DebugParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::DebugParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::LanePerceptionParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::LanePerceptionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::LanePerceptionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::CalibrationServiceParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::CalibrationServiceParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::CalibrationServiceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::ObjectTemplateParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::ObjectTemplateParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::ObjectTemplateParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::PerceptionParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::PerceptionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::PerceptionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::app::TrafficLightParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::app::TrafficLightParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::app::TrafficLightParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
